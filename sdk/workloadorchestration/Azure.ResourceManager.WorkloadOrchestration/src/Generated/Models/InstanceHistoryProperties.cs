// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Instance History Properties. </summary>
    public partial class InstanceHistoryProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InstanceHistoryProperties"/>. </summary>
        /// <param name="solutionVersion"> Solution version of instance. </param>
        /// <param name="target"> Target of instance. </param>
        internal InstanceHistoryProperties(SolutionVersionSnapshot solutionVersion, TargetSnapshot target)
        {
            SolutionVersion = solutionVersion;
            Target = target;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceHistoryProperties"/>. </summary>
        /// <param name="solutionVersion"> Solution version of instance. </param>
        /// <param name="target"> Target of instance. </param>
        /// <param name="solutionScope"> Scope of instance. </param>
        /// <param name="activeState"> State of instance. </param>
        /// <param name="reconciliationPolicy"> Reconciliation policy of instance. </param>
        /// <param name="status"> Deployment Status of instance. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InstanceHistoryProperties(SolutionVersionSnapshot solutionVersion, TargetSnapshot target, string solutionScope, ActiveState? activeState, ReconciliationPolicyProperties reconciliationPolicy, DeploymentStatus status, ProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersion = solutionVersion;
            Target = target;
            SolutionScope = solutionScope;
            ActiveState = activeState;
            ReconciliationPolicy = reconciliationPolicy;
            Status = status;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceHistoryProperties"/> for deserialization. </summary>
        internal InstanceHistoryProperties()
        {
        }

        /// <summary> Solution version of instance. </summary>
        public SolutionVersionSnapshot SolutionVersion { get; }
        /// <summary> Target of instance. </summary>
        public TargetSnapshot Target { get; }
        /// <summary> Scope of instance. </summary>
        public string SolutionScope { get; }
        /// <summary> State of instance. </summary>
        public ActiveState? ActiveState { get; }
        /// <summary> Reconciliation policy of instance. </summary>
        public ReconciliationPolicyProperties ReconciliationPolicy { get; }
        /// <summary> Deployment Status of instance. </summary>
        public DeploymentStatus Status { get; }
        /// <summary> Provisioning state of resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
    }
}
