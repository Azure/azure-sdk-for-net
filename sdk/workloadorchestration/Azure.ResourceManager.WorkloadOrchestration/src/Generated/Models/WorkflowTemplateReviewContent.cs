// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Workflow Template Review Parameter. </summary>
    public partial class WorkflowTemplateReviewContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WorkflowTemplateReviewContent"/>. </summary>
        /// <param name="workflowTemplateVersion"> Workflow Template Version Name. </param>
        /// <param name="stageTargetMap"> Stage to Target Map. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowTemplateVersion"/> or <paramref name="stageTargetMap"/> is null. </exception>
        public WorkflowTemplateReviewContent(string workflowTemplateVersion, IDictionary<string, BinaryData> stageTargetMap)
        {
            Argument.AssertNotNull(workflowTemplateVersion, nameof(workflowTemplateVersion));
            Argument.AssertNotNull(stageTargetMap, nameof(stageTargetMap));

            WorkflowTemplateVersion = workflowTemplateVersion;
            StageTargetMap = stageTargetMap;
        }

        /// <summary> Initializes a new instance of <see cref="WorkflowTemplateReviewContent"/>. </summary>
        /// <param name="workflowTemplateName"> Workflow Template Name. </param>
        /// <param name="workflowTemplateVersion"> Workflow Template Version Name. </param>
        /// <param name="stageTargetMap"> Stage to Target Map. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WorkflowTemplateReviewContent(string workflowTemplateName, string workflowTemplateVersion, IDictionary<string, BinaryData> stageTargetMap, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            WorkflowTemplateName = workflowTemplateName;
            WorkflowTemplateVersion = workflowTemplateVersion;
            StageTargetMap = stageTargetMap;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="WorkflowTemplateReviewContent"/> for deserialization. </summary>
        internal WorkflowTemplateReviewContent()
        {
        }

        /// <summary> Workflow Template Name. </summary>
        public string WorkflowTemplateName { get; set; }
        /// <summary> Workflow Template Version Name. </summary>
        public string WorkflowTemplateVersion { get; }
        /// <summary>
        /// Stage to Target Map
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> StageTargetMap { get; }
    }
}
