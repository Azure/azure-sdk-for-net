// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Properties of a Job resource, including type, status, parameters, steps, and error details. </summary>
    public partial class JobProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="JobProperties"/>. </summary>
        /// <param name="jobType"> The type of job. </param>
        /// <param name="status"> Status of the job. </param>
        public JobProperties(JobType jobType, JobStatus status)
        {
            JobType = jobType;
            Status = status;
            Steps = new ChangeTrackingList<JobStep>();
        }

        /// <summary> Initializes a new instance of <see cref="JobProperties"/>. </summary>
        /// <param name="jobType"> The type of job. </param>
        /// <param name="startOn"> Start time of the job (ISO8601). </param>
        /// <param name="endOn"> End time of the job (ISO8601). </param>
        /// <param name="status"> Status of the job. </param>
        /// <param name="jobParameter">
        /// Parameters for the job.
        /// Please note <see cref="JobParameterBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeployJobContent"/>.
        /// </param>
        /// <param name="correlationId"> Correlation ID for tracking. </param>
        /// <param name="steps"> Steps and substatuses for the job. </param>
        /// <param name="triggeredBy"> The OID or identity that triggered the job. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="errorDetails"> Error Details if any failure is there. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal JobProperties(JobType jobType, DateTimeOffset? startOn, DateTimeOffset? endOn, JobStatus status, JobParameterBase jobParameter, string correlationId, IList<JobStep> steps, string triggeredBy, ProvisioningState? provisioningState, ResponseError errorDetails, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            JobType = jobType;
            StartOn = startOn;
            EndOn = endOn;
            Status = status;
            JobParameter = jobParameter;
            CorrelationId = correlationId;
            Steps = steps;
            TriggeredBy = triggeredBy;
            ProvisioningState = provisioningState;
            ErrorDetails = errorDetails;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="JobProperties"/> for deserialization. </summary>
        internal JobProperties()
        {
        }

        /// <summary> The type of job. </summary>
        public JobType JobType { get; set; }
        /// <summary> Start time of the job (ISO8601). </summary>
        public DateTimeOffset? StartOn { get; set; }
        /// <summary> End time of the job (ISO8601). </summary>
        public DateTimeOffset? EndOn { get; set; }
        /// <summary> Status of the job. </summary>
        public JobStatus Status { get; }
        /// <summary>
        /// Parameters for the job.
        /// Please note <see cref="JobParameterBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeployJobContent"/>.
        /// </summary>
        public JobParameterBase JobParameter { get; set; }
        /// <summary> Correlation ID for tracking. </summary>
        public string CorrelationId { get; set; }
        /// <summary> Steps and substatuses for the job. </summary>
        public IList<JobStep> Steps { get; }
        /// <summary> The OID or identity that triggered the job. </summary>
        public string TriggeredBy { get; set; }
        /// <summary> Provisioning state of the resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> Error Details if any failure is there. </summary>
        public ResponseError ErrorDetails { get; }
    }
}
