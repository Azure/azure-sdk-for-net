// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> JobType for the job. Supports extensibility via string values. </summary>
    public readonly partial struct EdgeJobType : IEquatable<EdgeJobType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EdgeJobType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EdgeJobType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeployValue = "deploy";
        private const string StagingValue = "staging";
        private const string ExternalValidationValue = "externalValidation";

        /// <summary> A deployment job. </summary>
        public static EdgeJobType Deploy { get; } = new EdgeJobType(DeployValue);
        /// <summary> A staging job. </summary>
        public static EdgeJobType Staging { get; } = new EdgeJobType(StagingValue);
        /// <summary> A validation job. </summary>
        public static EdgeJobType ExternalValidation { get; } = new EdgeJobType(ExternalValidationValue);
        /// <summary> Determines if two <see cref="EdgeJobType"/> values are the same. </summary>
        public static bool operator ==(EdgeJobType left, EdgeJobType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EdgeJobType"/> values are not the same. </summary>
        public static bool operator !=(EdgeJobType left, EdgeJobType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EdgeJobType"/>. </summary>
        public static implicit operator EdgeJobType(string value) => new EdgeJobType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EdgeJobType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EdgeJobType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
