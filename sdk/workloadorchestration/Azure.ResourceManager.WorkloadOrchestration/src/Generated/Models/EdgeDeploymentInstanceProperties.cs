// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Instance Properties. </summary>
    public partial class EdgeDeploymentInstanceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceProperties"/>. </summary>
        /// <param name="solutionVersionId"> Solution version of instance. </param>
        /// <param name="targetId"> Target of instance. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionId"/> or <paramref name="targetId"/> is null. </exception>
        public EdgeDeploymentInstanceProperties(string solutionVersionId, string targetId)
        {
            Argument.AssertNotNull(solutionVersionId, nameof(solutionVersionId));
            Argument.AssertNotNull(targetId, nameof(targetId));

            SolutionVersionId = solutionVersionId;
            TargetId = targetId;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceProperties"/>. </summary>
        /// <param name="solutionVersionId"> Solution version of instance. </param>
        /// <param name="targetId"> Target of instance. </param>
        /// <param name="activeState"> State of instance. </param>
        /// <param name="reconciliationPolicy"> Reconciliation policy of instance. </param>
        /// <param name="solutionScope"> Scope of instance. </param>
        /// <param name="status"> Status of instance. </param>
        /// <param name="deploymentTimestampEpoch"> Deployment timestamp of instance. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EdgeDeploymentInstanceProperties(string solutionVersionId, string targetId, InstanceActiveState? activeState, InstanceReconciliationPolicy reconciliationPolicy, string solutionScope, EdgeDeploymentStatus status, long? deploymentTimestampEpoch, WorkloadOrchestrationProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersionId = solutionVersionId;
            TargetId = targetId;
            ActiveState = activeState;
            ReconciliationPolicy = reconciliationPolicy;
            SolutionScope = solutionScope;
            Status = status;
            DeploymentTimestampEpoch = deploymentTimestampEpoch;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EdgeDeploymentInstanceProperties"/> for deserialization. </summary>
        internal EdgeDeploymentInstanceProperties()
        {
        }

        /// <summary> Solution version of instance. </summary>
        public string SolutionVersionId { get; set; }
        /// <summary> Target of instance. </summary>
        public string TargetId { get; set; }
        /// <summary> State of instance. </summary>
        public InstanceActiveState? ActiveState { get; set; }
        /// <summary> Reconciliation policy of instance. </summary>
        public InstanceReconciliationPolicy ReconciliationPolicy { get; set; }
        /// <summary> Scope of instance. </summary>
        public string SolutionScope { get; set; }
        /// <summary> Status of instance. </summary>
        public EdgeDeploymentStatus Status { get; }
        /// <summary> Deployment timestamp of instance. </summary>
        public long? DeploymentTimestampEpoch { get; }
        /// <summary> Provisioning state of resource. </summary>
        public WorkloadOrchestrationProvisioningState? ProvisioningState { get; }
    }
}
