// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Target Properties. </summary>
    public partial class TargetProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TargetProperties"/>. </summary>
        /// <param name="description"> Description of target. </param>
        /// <param name="displayName"> Display name of target. </param>
        /// <param name="contextId"> ArmId of Context. </param>
        /// <param name="targetSpecification"> target spec. </param>
        /// <param name="capabilities"> List of capabilities. </param>
        /// <param name="hierarchyLevel"> Hierarchy Level. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="description"/>, <paramref name="displayName"/>, <paramref name="contextId"/>, <paramref name="targetSpecification"/>, <paramref name="capabilities"/> or <paramref name="hierarchyLevel"/> is null. </exception>
        public TargetProperties(string description, string displayName, ResourceIdentifier contextId, IDictionary<string, BinaryData> targetSpecification, IEnumerable<string> capabilities, string hierarchyLevel)
        {
            Argument.AssertNotNull(description, nameof(description));
            Argument.AssertNotNull(displayName, nameof(displayName));
            Argument.AssertNotNull(contextId, nameof(contextId));
            Argument.AssertNotNull(targetSpecification, nameof(targetSpecification));
            Argument.AssertNotNull(capabilities, nameof(capabilities));
            Argument.AssertNotNull(hierarchyLevel, nameof(hierarchyLevel));

            Description = description;
            DisplayName = displayName;
            ContextId = contextId;
            TargetSpecification = targetSpecification;
            Capabilities = capabilities.ToList();
            HierarchyLevel = hierarchyLevel;
        }

        /// <summary> Initializes a new instance of <see cref="TargetProperties"/>. </summary>
        /// <param name="description"> Description of target. </param>
        /// <param name="displayName"> Display name of target. </param>
        /// <param name="contextId"> ArmId of Context. </param>
        /// <param name="targetSpecification"> target spec. </param>
        /// <param name="capabilities"> List of capabilities. </param>
        /// <param name="hierarchyLevel"> Hierarchy Level. </param>
        /// <param name="status"> Status of target. </param>
        /// <param name="solutionScope"> Scope of the target resource. </param>
        /// <param name="state"> State of resource. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TargetProperties(string description, string displayName, ResourceIdentifier contextId, IDictionary<string, BinaryData> targetSpecification, IList<string> capabilities, string hierarchyLevel, DeploymentStatus status, string solutionScope, ResourceState? state, ProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            DisplayName = displayName;
            ContextId = contextId;
            TargetSpecification = targetSpecification;
            Capabilities = capabilities;
            HierarchyLevel = hierarchyLevel;
            Status = status;
            SolutionScope = solutionScope;
            State = state;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TargetProperties"/> for deserialization. </summary>
        internal TargetProperties()
        {
        }

        /// <summary> Description of target. </summary>
        public string Description { get; set; }
        /// <summary> Display name of target. </summary>
        public string DisplayName { get; set; }
        /// <summary> ArmId of Context. </summary>
        public ResourceIdentifier ContextId { get; set; }
        /// <summary>
        /// target spec
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> TargetSpecification { get; }
        /// <summary> List of capabilities. </summary>
        public IList<string> Capabilities { get; }
        /// <summary> Hierarchy Level. </summary>
        public string HierarchyLevel { get; set; }
        /// <summary> Status of target. </summary>
        public DeploymentStatus Status { get; }
        /// <summary> Scope of the target resource. </summary>
        public string SolutionScope { get; set; }
        /// <summary> State of resource. </summary>
        public ResourceState? State { get; set; }
        /// <summary> Provisioning state of resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
    }
}
