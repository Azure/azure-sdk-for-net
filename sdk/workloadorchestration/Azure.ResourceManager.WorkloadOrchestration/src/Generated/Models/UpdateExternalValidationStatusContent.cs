// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Update External Validation Status Parameter. </summary>
    public partial class UpdateExternalValidationStatusContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UpdateExternalValidationStatusContent"/>. </summary>
        /// <param name="solutionVersionId"> Solution Version Id. </param>
        /// <param name="externalValidationId"> External validation id. </param>
        /// <param name="validationStatus"> Validation Status of external validation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionVersionId"/> or <paramref name="externalValidationId"/> is null. </exception>
        public UpdateExternalValidationStatusContent(ResourceIdentifier solutionVersionId, string externalValidationId, SolutionInstanceValidationStatus validationStatus)
        {
            Argument.AssertNotNull(solutionVersionId, nameof(solutionVersionId));
            Argument.AssertNotNull(externalValidationId, nameof(externalValidationId));

            SolutionVersionId = solutionVersionId;
            ExternalValidationId = externalValidationId;
            ValidationStatus = validationStatus;
        }

        /// <summary> Initializes a new instance of <see cref="UpdateExternalValidationStatusContent"/>. </summary>
        /// <param name="solutionVersionId"> Solution Version Id. </param>
        /// <param name="errorDetails"> Error Details if any failure is there. </param>
        /// <param name="externalValidationId"> External validation id. </param>
        /// <param name="validationStatus"> Validation Status of external validation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UpdateExternalValidationStatusContent(ResourceIdentifier solutionVersionId, ResponseError errorDetails, string externalValidationId, SolutionInstanceValidationStatus validationStatus, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionVersionId = solutionVersionId;
            ErrorDetails = errorDetails;
            ExternalValidationId = externalValidationId;
            ValidationStatus = validationStatus;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="UpdateExternalValidationStatusContent"/> for deserialization. </summary>
        internal UpdateExternalValidationStatusContent()
        {
        }

        /// <summary> Solution Version Id. </summary>
        public ResourceIdentifier SolutionVersionId { get; }
        /// <summary> Error Details if any failure is there. </summary>
        public ResponseError ErrorDetails { get; set; }
        /// <summary> External validation id. </summary>
        public string ExternalValidationId { get; }
        /// <summary> Validation Status of external validation. </summary>
        public SolutionInstanceValidationStatus ValidationStatus { get; }
    }
}
