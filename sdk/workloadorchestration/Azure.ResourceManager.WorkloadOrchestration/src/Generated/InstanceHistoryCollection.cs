// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="InstanceHistoryResource"/> and their operations.
    /// Each <see cref="InstanceHistoryResource"/> in the collection will belong to the same instance of <see cref="InstanceResource"/>.
    /// To get an <see cref="InstanceHistoryCollection"/> instance call the GetInstanceHistories method from an instance of <see cref="InstanceResource"/>.
    /// </summary>
    public partial class InstanceHistoryCollection : ArmCollection, IEnumerable<InstanceHistoryResource>, IAsyncEnumerable<InstanceHistoryResource>
    {
        private readonly ClientDiagnostics _instanceHistoryClientDiagnostics;
        private readonly InstanceHistoriesRestOperations _instanceHistoryRestClient;

        /// <summary> Initializes a new instance of the <see cref="InstanceHistoryCollection"/> class for mocking. </summary>
        protected InstanceHistoryCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="InstanceHistoryCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal InstanceHistoryCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _instanceHistoryClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", InstanceHistoryResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(InstanceHistoryResource.ResourceType, out string instanceHistoryApiVersion);
            _instanceHistoryRestClient = new InstanceHistoriesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, instanceHistoryApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != InstanceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, InstanceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get InstanceHistory Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual async Task<Response<InstanceHistoryResource>> GetAsync(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _instanceHistoryClientDiagnostics.CreateScope("InstanceHistoryCollection.Get");
            scope.Start();
            try
            {
                var response = await _instanceHistoryRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new InstanceHistoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get InstanceHistory Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual Response<InstanceHistoryResource> Get(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _instanceHistoryClientDiagnostics.CreateScope("InstanceHistoryCollection.Get");
            scope.Start();
            try
            {
                var response = _instanceHistoryRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new InstanceHistoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List InstanceHistory Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_ListByInstance</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="InstanceHistoryResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<InstanceHistoryResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _instanceHistoryRestClient.CreateListByInstanceRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _instanceHistoryRestClient.CreateListByInstanceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new InstanceHistoryResource(Client, InstanceHistoryData.DeserializeInstanceHistoryData(e)), _instanceHistoryClientDiagnostics, Pipeline, "InstanceHistoryCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List InstanceHistory Resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_ListByInstance</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="InstanceHistoryResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<InstanceHistoryResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _instanceHistoryRestClient.CreateListByInstanceRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _instanceHistoryRestClient.CreateListByInstanceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new InstanceHistoryResource(Client, InstanceHistoryData.DeserializeInstanceHistoryData(e)), _instanceHistoryClientDiagnostics, Pipeline, "InstanceHistoryCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _instanceHistoryClientDiagnostics.CreateScope("InstanceHistoryCollection.Exists");
            scope.Start();
            try
            {
                var response = await _instanceHistoryRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual Response<bool> Exists(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _instanceHistoryClientDiagnostics.CreateScope("InstanceHistoryCollection.Exists");
            scope.Start();
            try
            {
                var response = _instanceHistoryRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual async Task<NullableResponse<InstanceHistoryResource>> GetIfExistsAsync(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _instanceHistoryClientDiagnostics.CreateScope("InstanceHistoryCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _instanceHistoryRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<InstanceHistoryResource>(response.GetRawResponse());
                return Response.FromValue(new InstanceHistoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/instances/{instanceName}/histories/{instanceHistoryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstanceHistory_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceHistoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceHistoryName"> Name of the instance history. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceHistoryName"/> is null. </exception>
        public virtual NullableResponse<InstanceHistoryResource> GetIfExists(string instanceHistoryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(instanceHistoryName, nameof(instanceHistoryName));

            using var scope = _instanceHistoryClientDiagnostics.CreateScope("InstanceHistoryCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _instanceHistoryRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, instanceHistoryName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<InstanceHistoryResource>(response.GetRawResponse());
                return Response.FromValue(new InstanceHistoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<InstanceHistoryResource> IEnumerable<InstanceHistoryResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<InstanceHistoryResource> IAsyncEnumerable<InstanceHistoryResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
