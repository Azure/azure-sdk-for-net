// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MockableWorkloadOrchestrationArmClient : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableWorkloadOrchestrationArmClient"/> class for mocking. </summary>
        protected MockableWorkloadOrchestrationArmClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableWorkloadOrchestrationArmClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableWorkloadOrchestrationArmClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MockableWorkloadOrchestrationArmClient(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of SchemaReferenceResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of SchemaReferenceResources and their operations over a SchemaReferenceResource. </returns>
        public virtual SchemaReferenceCollection GetSchemaReferences(ResourceIdentifier scope)
        {
            return new SchemaReferenceCollection(Client, scope);
        }

        /// <summary>
        /// Get a Schema Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SchemaReferenceResource>> GetSchemaReferenceAsync(ResourceIdentifier scope, string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            return await GetSchemaReferences(scope).GetAsync(schemaReferenceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Schema Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<SchemaReferenceResource> GetSchemaReference(ResourceIdentifier scope, string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            return GetSchemaReferences(scope).Get(schemaReferenceName, cancellationToken);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SchemaReferenceResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SchemaReferenceResource.CreateResourceIdentifier" /> to create a <see cref="SchemaReferenceResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SchemaReferenceResource"/> object. </returns>
        public virtual SchemaReferenceResource GetSchemaReferenceResource(ResourceIdentifier id)
        {
            SchemaReferenceResource.ValidateResourceId(id);
            return new SchemaReferenceResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="ConfigTemplateResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConfigTemplateResource.CreateResourceIdentifier" /> to create a <see cref="ConfigTemplateResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConfigTemplateResource"/> object. </returns>
        public virtual ConfigTemplateResource GetConfigTemplateResource(ResourceIdentifier id)
        {
            ConfigTemplateResource.ValidateResourceId(id);
            return new ConfigTemplateResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="ConfigurationTemplateResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConfigurationTemplateResource.CreateResourceIdentifier" /> to create a <see cref="ConfigurationTemplateResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConfigurationTemplateResource"/> object. </returns>
        public virtual ConfigurationTemplateResource GetConfigurationTemplateResource(ResourceIdentifier id)
        {
            ConfigurationTemplateResource.ValidateResourceId(id);
            return new ConfigurationTemplateResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="ContextResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ContextResource.CreateResourceIdentifier" /> to create a <see cref="ContextResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ContextResource"/> object. </returns>
        public virtual ContextResource GetContextResource(ResourceIdentifier id)
        {
            ContextResource.ValidateResourceId(id);
            return new ContextResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DiagnosticResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DiagnosticResource.CreateResourceIdentifier" /> to create a <see cref="DiagnosticResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DiagnosticResource"/> object. </returns>
        public virtual DiagnosticResource GetDiagnosticResource(ResourceIdentifier id)
        {
            DiagnosticResource.ValidateResourceId(id);
            return new DiagnosticResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SchemaResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SchemaResource.CreateResourceIdentifier" /> to create a <see cref="SchemaResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SchemaResource"/> object. </returns>
        public virtual SchemaResource GetSchemaResource(ResourceIdentifier id)
        {
            SchemaResource.ValidateResourceId(id);
            return new SchemaResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SolutionTemplateResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SolutionTemplateResource.CreateResourceIdentifier" /> to create a <see cref="SolutionTemplateResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SolutionTemplateResource"/> object. </returns>
        public virtual SolutionTemplateResource GetSolutionTemplateResource(ResourceIdentifier id)
        {
            SolutionTemplateResource.ValidateResourceId(id);
            return new SolutionTemplateResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="TargetTemplateResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TargetTemplateResource.CreateResourceIdentifier" /> to create a <see cref="TargetTemplateResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TargetTemplateResource"/> object. </returns>
        public virtual TargetTemplateResource GetTargetTemplateResource(ResourceIdentifier id)
        {
            TargetTemplateResource.ValidateResourceId(id);
            return new TargetTemplateResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="TargetResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TargetResource.CreateResourceIdentifier" /> to create a <see cref="TargetResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TargetResource"/> object. </returns>
        public virtual TargetResource GetTargetResource(ResourceIdentifier id)
        {
            TargetResource.ValidateResourceId(id);
            return new TargetResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="WorkflowTemplateResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WorkflowTemplateResource.CreateResourceIdentifier" /> to create a <see cref="WorkflowTemplateResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WorkflowTemplateResource"/> object. </returns>
        public virtual WorkflowTemplateResource GetWorkflowTemplateResource(ResourceIdentifier id)
        {
            WorkflowTemplateResource.ValidateResourceId(id);
            return new WorkflowTemplateResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="ConfigTemplateVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConfigTemplateVersionResource.CreateResourceIdentifier" /> to create a <see cref="ConfigTemplateVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConfigTemplateVersionResource"/> object. </returns>
        public virtual ConfigTemplateVersionResource GetConfigTemplateVersionResource(ResourceIdentifier id)
        {
            ConfigTemplateVersionResource.ValidateResourceId(id);
            return new ConfigTemplateVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="ConfigurationTemplateVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConfigurationTemplateVersionResource.CreateResourceIdentifier" /> to create a <see cref="ConfigurationTemplateVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConfigurationTemplateVersionResource"/> object. </returns>
        public virtual ConfigurationTemplateVersionResource GetConfigurationTemplateVersionResource(ResourceIdentifier id)
        {
            ConfigurationTemplateVersionResource.ValidateResourceId(id);
            return new ConfigurationTemplateVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EventGridFilterResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EventGridFilterResource.CreateResourceIdentifier" /> to create an <see cref="EventGridFilterResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EventGridFilterResource"/> object. </returns>
        public virtual EventGridFilterResource GetEventGridFilterResource(ResourceIdentifier id)
        {
            EventGridFilterResource.ValidateResourceId(id);
            return new EventGridFilterResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SiteReferenceResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteReferenceResource.CreateResourceIdentifier" /> to create a <see cref="SiteReferenceResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteReferenceResource"/> object. </returns>
        public virtual SiteReferenceResource GetSiteReferenceResource(ResourceIdentifier id)
        {
            SiteReferenceResource.ValidateResourceId(id);
            return new SiteReferenceResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="WorkflowResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WorkflowResource.CreateResourceIdentifier" /> to create a <see cref="WorkflowResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WorkflowResource"/> object. </returns>
        public virtual WorkflowResource GetWorkflowResource(ResourceIdentifier id)
        {
            WorkflowResource.ValidateResourceId(id);
            return new WorkflowResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="WorkflowVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WorkflowVersionResource.CreateResourceIdentifier" /> to create a <see cref="WorkflowVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WorkflowVersionResource"/> object. </returns>
        public virtual WorkflowVersionResource GetWorkflowVersionResource(ResourceIdentifier id)
        {
            WorkflowVersionResource.ValidateResourceId(id);
            return new WorkflowVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="ExecutionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExecutionResource.CreateResourceIdentifier" /> to create an <see cref="ExecutionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExecutionResource"/> object. </returns>
        public virtual ExecutionResource GetExecutionResource(ResourceIdentifier id)
        {
            ExecutionResource.ValidateResourceId(id);
            return new ExecutionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DynamicSchemaResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DynamicSchemaResource.CreateResourceIdentifier" /> to create a <see cref="DynamicSchemaResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DynamicSchemaResource"/> object. </returns>
        public virtual DynamicSchemaResource GetDynamicSchemaResource(ResourceIdentifier id)
        {
            DynamicSchemaResource.ValidateResourceId(id);
            return new DynamicSchemaResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DynamicSchemaVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DynamicSchemaVersionResource.CreateResourceIdentifier" /> to create a <see cref="DynamicSchemaVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DynamicSchemaVersionResource"/> object. </returns>
        public virtual DynamicSchemaVersionResource GetDynamicSchemaVersionResource(ResourceIdentifier id)
        {
            DynamicSchemaVersionResource.ValidateResourceId(id);
            return new DynamicSchemaVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SchemaVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SchemaVersionResource.CreateResourceIdentifier" /> to create a <see cref="SchemaVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SchemaVersionResource"/> object. </returns>
        public virtual SchemaVersionResource GetSchemaVersionResource(ResourceIdentifier id)
        {
            SchemaVersionResource.ValidateResourceId(id);
            return new SchemaVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SolutionTemplateVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SolutionTemplateVersionResource.CreateResourceIdentifier" /> to create a <see cref="SolutionTemplateVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SolutionTemplateVersionResource"/> object. </returns>
        public virtual SolutionTemplateVersionResource GetSolutionTemplateVersionResource(ResourceIdentifier id)
        {
            SolutionTemplateVersionResource.ValidateResourceId(id);
            return new SolutionTemplateVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SolutionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SolutionResource.CreateResourceIdentifier" /> to create a <see cref="SolutionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SolutionResource"/> object. </returns>
        public virtual SolutionResource GetSolutionResource(ResourceIdentifier id)
        {
            SolutionResource.ValidateResourceId(id);
            return new SolutionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="InstanceResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="InstanceResource.CreateResourceIdentifier" /> to create an <see cref="InstanceResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="InstanceResource"/> object. </returns>
        public virtual InstanceResource GetInstanceResource(ResourceIdentifier id)
        {
            InstanceResource.ValidateResourceId(id);
            return new InstanceResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="InstanceHistoryResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="InstanceHistoryResource.CreateResourceIdentifier" /> to create an <see cref="InstanceHistoryResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="InstanceHistoryResource"/> object. </returns>
        public virtual InstanceHistoryResource GetInstanceHistoryResource(ResourceIdentifier id)
        {
            InstanceHistoryResource.ValidateResourceId(id);
            return new InstanceHistoryResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SolutionVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SolutionVersionResource.CreateResourceIdentifier" /> to create a <see cref="SolutionVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SolutionVersionResource"/> object. </returns>
        public virtual SolutionVersionResource GetSolutionVersionResource(ResourceIdentifier id)
        {
            SolutionVersionResource.ValidateResourceId(id);
            return new SolutionVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="WorkflowTemplateVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WorkflowTemplateVersionResource.CreateResourceIdentifier" /> to create a <see cref="WorkflowTemplateVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WorkflowTemplateVersionResource"/> object. </returns>
        public virtual WorkflowTemplateVersionResource GetWorkflowTemplateVersionResource(ResourceIdentifier id)
        {
            WorkflowTemplateVersionResource.ValidateResourceId(id);
            return new WorkflowTemplateVersionResource(Client, id);
        }
    }
}
