// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    /// <summary>
    /// A class representing a collection of <see cref="EdgeSchemaReferenceResource"/> and their operations.
    /// Each <see cref="EdgeSchemaReferenceResource"/> in the collection will belong to the same instance of <see cref="ArmResource"/>.
    /// To get an <see cref="EdgeSchemaReferenceCollection"/> instance call the GetEdgeSchemaReferences method from an instance of <see cref="ArmResource"/>.
    /// </summary>
    public partial class EdgeSchemaReferenceCollection : ArmCollection, IEnumerable<EdgeSchemaReferenceResource>, IAsyncEnumerable<EdgeSchemaReferenceResource>
    {
        private readonly ClientDiagnostics _edgeSchemaReferenceSchemaReferencesClientDiagnostics;
        private readonly SchemaReferencesRestOperations _edgeSchemaReferenceSchemaReferencesRestClient;

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaReferenceCollection"/> class for mocking. </summary>
        protected EdgeSchemaReferenceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EdgeSchemaReferenceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EdgeSchemaReferenceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _edgeSchemaReferenceSchemaReferencesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadOrchestration", EdgeSchemaReferenceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EdgeSchemaReferenceResource.ResourceType, out string edgeSchemaReferenceSchemaReferencesApiVersion);
            _edgeSchemaReferenceSchemaReferencesRestClient = new SchemaReferencesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, edgeSchemaReferenceSchemaReferencesApiVersion);
        }

        /// <summary>
        /// Get a Schema Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual async Task<Response<EdgeSchemaReferenceResource>> GetAsync(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.Get");
            scope.Start();
            try
            {
                var response = await _edgeSchemaReferenceSchemaReferencesRestClient.GetAsync(Id, schemaReferenceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Schema Reference Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual Response<EdgeSchemaReferenceResource> Get(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.Get");
            scope.Start();
            try
            {
                var response = _edgeSchemaReferenceSchemaReferencesRestClient.Get(Id, schemaReferenceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReferences_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EdgeSchemaReferenceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EdgeSchemaReferenceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSchemaReferenceSchemaReferencesRestClient.CreateListByResourceGroupRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSchemaReferenceSchemaReferencesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EdgeSchemaReferenceResource(Client, EdgeSchemaReferenceData.DeserializeEdgeSchemaReferenceData(e)), _edgeSchemaReferenceSchemaReferencesClientDiagnostics, Pipeline, "EdgeSchemaReferenceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List by specified resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReferences_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EdgeSchemaReferenceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EdgeSchemaReferenceResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _edgeSchemaReferenceSchemaReferencesRestClient.CreateListByResourceGroupRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _edgeSchemaReferenceSchemaReferencesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EdgeSchemaReferenceResource(Client, EdgeSchemaReferenceData.DeserializeEdgeSchemaReferenceData(e)), _edgeSchemaReferenceSchemaReferencesClientDiagnostics, Pipeline, "EdgeSchemaReferenceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _edgeSchemaReferenceSchemaReferencesRestClient.GetAsync(Id, schemaReferenceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual Response<bool> Exists(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.Exists");
            scope.Start();
            try
            {
                var response = _edgeSchemaReferenceSchemaReferencesRestClient.Get(Id, schemaReferenceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual async Task<NullableResponse<EdgeSchemaReferenceResource>> GetIfExistsAsync(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _edgeSchemaReferenceSchemaReferencesRestClient.GetAsync(Id, schemaReferenceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSchemaReferenceResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SchemaReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeSchemaReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="schemaReferenceName"> The name of the SchemaReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaReferenceName"/> is null. </exception>
        public virtual NullableResponse<EdgeSchemaReferenceResource> GetIfExists(string schemaReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(schemaReferenceName, nameof(schemaReferenceName));

            using var scope = _edgeSchemaReferenceSchemaReferencesClientDiagnostics.CreateScope("EdgeSchemaReferenceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _edgeSchemaReferenceSchemaReferencesRestClient.Get(Id, schemaReferenceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<EdgeSchemaReferenceResource>(response.GetRawResponse());
                return Response.FromValue(new EdgeSchemaReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EdgeSchemaReferenceResource> IEnumerable<EdgeSchemaReferenceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EdgeSchemaReferenceResource> IAsyncEnumerable<EdgeSchemaReferenceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
