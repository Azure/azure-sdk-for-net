// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeSolutionTemplateVersionOperationSource : IOperationSource<EdgeSolutionTemplateVersionResource>
    {
        private readonly ArmClient _client;

        internal EdgeSolutionTemplateVersionOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeSolutionTemplateVersionResource IOperationSource<EdgeSolutionTemplateVersionResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            // Parse the response as operation status first
            using var document = JsonDocument.Parse(response.Content);
            var root = document.RootElement;
            
            // Check if this is an operation status response with actual resource info
            if (root.TryGetProperty("properties", out var properties) && 
                properties.TryGetProperty("solutionTemplateVersionId", out var versionIdElement))
            {
                var actualResourceId = versionIdElement.GetString();
                
                // Get the actual resource using the correct ID
                var resourceIdentifier = new ResourceIdentifier(actualResourceId);
                var actualResource = _client.GetEdgeSolutionTemplateVersionResource(resourceIdentifier);
                return actualResource.Get(cancellationToken).Value;
            }
            
            // If it's not an operation status, try to parse as normal resource data
            var data = ModelReaderWriter.Read<EdgeSolutionTemplateVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeSolutionTemplateVersionResource(_client, data);
        }

        async ValueTask<EdgeSolutionTemplateVersionResource> IOperationSource<EdgeSolutionTemplateVersionResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            // Parse the response as operation status first
            using var document = JsonDocument.Parse(response.Content);
            var root = document.RootElement;
            
            // Check if this is an operation status response with actual resource info
            if (root.TryGetProperty("properties", out var properties) && 
                properties.TryGetProperty("solutionTemplateVersionId", out var versionIdElement))
            {
                var actualResourceId = versionIdElement.GetString();
                
                // Get the actual resource using the correct ID
                var resourceIdentifier = new ResourceIdentifier(actualResourceId);
                var actualResource = _client.GetEdgeSolutionTemplateVersionResource(resourceIdentifier);
                return await actualResource.GetAsync(cancellationToken).ConfigureAwait(false);
            }
            
            // If it's not an operation status, try to parse as normal resource data
            var data = ModelReaderWriter.Read<EdgeSolutionTemplateVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeSolutionTemplateVersionResource(_client, data)).ConfigureAwait(false);
        }
    }
}
