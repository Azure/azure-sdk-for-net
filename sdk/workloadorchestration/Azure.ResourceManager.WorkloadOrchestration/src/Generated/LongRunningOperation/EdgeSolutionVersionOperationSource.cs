// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadOrchestration
{
    internal class EdgeSolutionVersionOperationSource : IOperationSource<EdgeSolutionVersionResource>
    {
        private readonly ArmClient _client;

        internal EdgeSolutionVersionOperationSource(ArmClient client)
        {
            _client = client;
        }

        EdgeSolutionVersionResource IOperationSource<EdgeSolutionVersionResource>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            // Parse the response as operation status first
            using var document = JsonDocument.Parse(response.Content);
            var root = document.RootElement;
            
            // Check if this is an operation status response with actual resource info
            if (root.TryGetProperty("properties", out var properties))
            {
                // The actual resource data is nested in properties.properties with an "id" field
                if (properties.TryGetProperty("properties", out var nestedProperties) &&
                    nestedProperties.TryGetProperty("id", out var actualResourceIdElement))
                {
                    var actualResourceId = actualResourceIdElement.GetString();
                    
                    // Get the actual resource using the correct ID
                    var resourceIdentifier = new ResourceIdentifier(actualResourceId);
                    var actualResource = _client.GetEdgeSolutionVersionResource(resourceIdentifier);
                    return actualResource.Get(cancellationToken).Value;
                }
            }
            
            // If it's not an operation status, try to parse as normal resource data
            var data = ModelReaderWriter.Read<EdgeSolutionVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return new EdgeSolutionVersionResource(_client, data);
        }

        async ValueTask<EdgeSolutionVersionResource> IOperationSource<EdgeSolutionVersionResource>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            // Parse the response as operation status first
            using var document = JsonDocument.Parse(response.Content);
            var root = document.RootElement;
            
            // Check if this is an operation status response with actual resource info
            if (root.TryGetProperty("properties", out var properties))
            {
                // The actual resource data is nested in properties.properties with an "id" field
                if (properties.TryGetProperty("properties", out var nestedProperties) &&
                    nestedProperties.TryGetProperty("id", out var actualResourceIdElement))
                {
                    var actualResourceId = actualResourceIdElement.GetString();
                    
                    // Get the actual resource using the correct ID
                    var resourceIdentifier = new ResourceIdentifier(actualResourceId);
                    var actualResource = _client.GetEdgeSolutionVersionResource(resourceIdentifier);
                    return await actualResource.GetAsync(cancellationToken).ConfigureAwait(false);
                }
            }
            
            // If it's not an operation status, try to parse as normal resource data
            var data = ModelReaderWriter.Read<EdgeSolutionVersionData>(response.Content, ModelReaderWriterOptions.Json, AzureResourceManagerWorkloadOrchestrationContext.Default);
            return await Task.FromResult(new EdgeSolutionVersionResource(_client, data)).ConfigureAwait(false);
        }
    }
}
