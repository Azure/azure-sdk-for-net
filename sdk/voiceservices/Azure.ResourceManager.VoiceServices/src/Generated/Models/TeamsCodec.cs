// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VoiceServices.Models
{
    /// <summary> The voice codecs expected for communication with Teams. </summary>
    public readonly partial struct TeamsCodec : IEquatable<TeamsCodec>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TeamsCodec"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TeamsCodec(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PcmaValue = "PCMA";
        private const string PcmuValue = "PCMU";
        private const string G722Value = "G722";
        private const string G7222Value = "G722_2";
        private const string Silk8Value = "SILK_8";
        private const string Silk16Value = "SILK_16";

        /// <summary> PCMA. </summary>
        public static TeamsCodec Pcma { get; } = new TeamsCodec(PcmaValue);
        /// <summary> PCMU. </summary>
        public static TeamsCodec Pcmu { get; } = new TeamsCodec(PcmuValue);
        /// <summary> G722. </summary>
        public static TeamsCodec G722 { get; } = new TeamsCodec(G722Value);
        /// <summary> G722_2. </summary>
        public static TeamsCodec G7222 { get; } = new TeamsCodec(G7222Value);
        /// <summary> SILK_8. </summary>
        public static TeamsCodec Silk8 { get; } = new TeamsCodec(Silk8Value);
        /// <summary> SILK_16. </summary>
        public static TeamsCodec Silk16 { get; } = new TeamsCodec(Silk16Value);
        /// <summary> Determines if two <see cref="TeamsCodec"/> values are the same. </summary>
        public static bool operator ==(TeamsCodec left, TeamsCodec right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TeamsCodec"/> values are not the same. </summary>
        public static bool operator !=(TeamsCodec left, TeamsCodec right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TeamsCodec"/>. </summary>
        public static implicit operator TeamsCodec(string value) => new TeamsCodec(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TeamsCodec other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TeamsCodec other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
