// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ContainerServiceNodeCustomization.Models;
using Azure.ResourceManager.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ContainerServiceNodeCustomization.Samples
{
    public partial class Sample_NodeCustomizationResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_NodeCustomizationsGet()
        {
            // Generated from example definition: 2025-09-02-preview/NodeCustomizations_Get.json
            // this example is just showing the usage of "NodeCustomization_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NodeCustomizationResource created on azure
            // for more information of creating NodeCustomizationResource, please refer to the document of NodeCustomizationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg1";
            string nodeCustomizationName = "my-node-customization";
            ResourceIdentifier nodeCustomizationResourceId = NodeCustomizationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, nodeCustomizationName);
            NodeCustomizationResource nodeCustomization = client.GetNodeCustomizationResource(nodeCustomizationResourceId);

            // invoke the operation
            NodeCustomizationResource result = await nodeCustomization.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NodeCustomizationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_NodeCustomizationsDelete()
        {
            // Generated from example definition: 2025-09-02-preview/NodeCustomizations_Delete.json
            // this example is just showing the usage of "NodeCustomization_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NodeCustomizationResource created on azure
            // for more information of creating NodeCustomizationResource, please refer to the document of NodeCustomizationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg1";
            string nodeCustomizationName = "my-node-customization";
            ResourceIdentifier nodeCustomizationResourceId = NodeCustomizationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, nodeCustomizationName);
            NodeCustomizationResource nodeCustomization = client.GetNodeCustomizationResource(nodeCustomizationResourceId);

            // invoke the operation
            await nodeCustomization.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_NodeCustomizationsUpdate()
        {
            // Generated from example definition: 2025-09-02-preview/NodeCustomizations_Update.json
            // this example is just showing the usage of "NodeCustomization_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NodeCustomizationResource created on azure
            // for more information of creating NodeCustomizationResource, please refer to the document of NodeCustomizationResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg1";
            string nodeCustomizationName = "my-node-customization";
            ResourceIdentifier nodeCustomizationResourceId = NodeCustomizationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, nodeCustomizationName);
            NodeCustomizationResource nodeCustomization = client.GetNodeCustomizationResource(nodeCustomizationResourceId);

            // invoke the operation
            NodeCustomizationPatch patch = new NodeCustomizationPatch
            {
                Tags =
{
["key5558"] = "xufgvdnarflvwbcdkmhqhgbop"
},
                Properties = new NodeCustomizationUpdateProperties
                {
                    ContainerImages = { "qmetlvqgbvhjnncyraxlhs" },
                    IdentityProfile = new UserAssignedIdentity(),
                    CustomizationScripts = {new NodeCustomizationScript("initialize-node", ExecutionPoint.NodeImageBuildTime, ScriptType.Bash)
{
Script = "echo \"test node customization\" > /var/log/test-node-customization.txt",
}},
                },
            };
            ArmOperation<NodeCustomizationResource> lro = await nodeCustomization.UpdateAsync(WaitUntil.Completed, patch);
            NodeCustomizationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NodeCustomizationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
