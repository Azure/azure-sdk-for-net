// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerServiceNodeCustomization.Models
{
    /// <summary> The execution point for the script. </summary>
    public readonly partial struct ExecutionPoint : IEquatable<ExecutionPoint>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExecutionPoint"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExecutionPoint(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NodeImageBuildTimeValue = "NodeImageBuildTime";
        private const string NodeProvisionTimeValue = "NodeProvisionTime";

        /// <summary> Execute during node image build time. </summary>
        public static ExecutionPoint NodeImageBuildTime { get; } = new ExecutionPoint(NodeImageBuildTimeValue);
        /// <summary> Execute during node provisioning time. </summary>
        public static ExecutionPoint NodeProvisionTime { get; } = new ExecutionPoint(NodeProvisionTimeValue);
        /// <summary> Determines if two <see cref="ExecutionPoint"/> values are the same. </summary>
        public static bool operator ==(ExecutionPoint left, ExecutionPoint right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExecutionPoint"/> values are not the same. </summary>
        public static bool operator !=(ExecutionPoint left, ExecutionPoint right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ExecutionPoint"/>. </summary>
        public static implicit operator ExecutionPoint(string value) => new ExecutionPoint(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExecutionPoint other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExecutionPoint other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
