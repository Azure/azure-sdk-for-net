// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ContainerServiceNodeCustomization.Models
{
    /// <summary> Node customization script. </summary>
    public partial class NodeCustomizationScript
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NodeCustomizationScript"/>. </summary>
        /// <param name="name">
        /// The name for the customization script.
        /// Must be unique within the node customization resource.
        /// Can only contain lowercase alphanumeric,'-' or '.' characters.
        /// </param>
        /// <param name="executionPoint">
        /// The stage at which the script is executed.
        /// Specifying `NodeImageBuildTime` will ensure changes are persisted into the node image.
        /// </param>
        /// <param name="scriptType"> The runtime environment for the script (e.g. Bash). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public NodeCustomizationScript(string name, ExecutionPoint executionPoint, ScriptType scriptType)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            ExecutionPoint = executionPoint;
            ScriptType = scriptType;
        }

        /// <summary> Initializes a new instance of <see cref="NodeCustomizationScript"/>. </summary>
        /// <param name="name">
        /// The name for the customization script.
        /// Must be unique within the node customization resource.
        /// Can only contain lowercase alphanumeric,'-' or '.' characters.
        /// </param>
        /// <param name="executionPoint">
        /// The stage at which the script is executed.
        /// Specifying `NodeImageBuildTime` will ensure changes are persisted into the node image.
        /// </param>
        /// <param name="scriptType"> The runtime environment for the script (e.g. Bash). </param>
        /// <param name="script"> The script content to be executed in plain text. Do not include secrets. </param>
        /// <param name="rebootAfter"> Whether the node should reboot after successful script execution. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NodeCustomizationScript(string name, ExecutionPoint executionPoint, ScriptType scriptType, string script, bool? rebootAfter, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            ExecutionPoint = executionPoint;
            ScriptType = scriptType;
            Script = script;
            RebootAfter = rebootAfter;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NodeCustomizationScript"/> for deserialization. </summary>
        internal NodeCustomizationScript()
        {
        }

        /// <summary>
        /// The name for the customization script.
        /// Must be unique within the node customization resource.
        /// Can only contain lowercase alphanumeric,'-' or '.' characters.
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// The stage at which the script is executed.
        /// Specifying `NodeImageBuildTime` will ensure changes are persisted into the node image.
        /// </summary>
        public ExecutionPoint ExecutionPoint { get; set; }
        /// <summary> The runtime environment for the script (e.g. Bash). </summary>
        public ScriptType ScriptType { get; set; }
        /// <summary> The script content to be executed in plain text. Do not include secrets. </summary>
        public string Script { get; set; }
        /// <summary> Whether the node should reboot after successful script execution. </summary>
        public bool? RebootAfter { get; set; }
    }
}
