// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ContainerServiceNodeCustomization.Models
{
    /// <summary> The properties of the Node Customization resource. </summary>
    public partial class NodeCustomizationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NodeCustomizationProperties"/>. </summary>
        public NodeCustomizationProperties()
        {
            ContainerImages = new ChangeTrackingList<string>();
            CustomizationScripts = new ChangeTrackingList<NodeCustomizationScript>();
        }

        /// <summary> Initializes a new instance of <see cref="NodeCustomizationProperties"/>. </summary>
        /// <param name="containerImages"> The list of container images to cache on nodes. See https://kubernetes.io/docs/concepts/containers/images/#image-names. </param>
        /// <param name="identityProfile">
        /// The identity used to execute node customization tasks during image build time and provisioning time.
        /// If not specified the default agentpool identity will be used.
        /// This does not affect provisioned nodes.
        /// </param>
        /// <param name="version"> An auto-generated value that changes when the other fields of the image customization are changed. </param>
        /// <param name="provisioningState"> The provisioning state of the node customization. </param>
        /// <param name="customizationScripts"> The scripts to customize the node before or after image capture. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NodeCustomizationProperties(IList<string> containerImages, UserAssignedIdentity identityProfile, string version, ProvisioningState? provisioningState, IList<NodeCustomizationScript> customizationScripts, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ContainerImages = containerImages;
            IdentityProfile = identityProfile;
            Version = version;
            ProvisioningState = provisioningState;
            CustomizationScripts = customizationScripts;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The list of container images to cache on nodes. See https://kubernetes.io/docs/concepts/containers/images/#image-names. </summary>
        public IList<string> ContainerImages { get; }
        /// <summary>
        /// The identity used to execute node customization tasks during image build time and provisioning time.
        /// If not specified the default agentpool identity will be used.
        /// This does not affect provisioned nodes.
        /// </summary>
        public UserAssignedIdentity IdentityProfile { get; set; }
        /// <summary> An auto-generated value that changes when the other fields of the image customization are changed. </summary>
        public string Version { get; }
        /// <summary> The provisioning state of the node customization. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The scripts to customize the node before or after image capture. </summary>
        public IList<NodeCustomizationScript> CustomizationScripts { get; }
    }
}
