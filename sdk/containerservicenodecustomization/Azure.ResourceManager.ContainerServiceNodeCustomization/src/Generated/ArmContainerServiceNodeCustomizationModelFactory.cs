// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ContainerServiceNodeCustomization.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmContainerServiceNodeCustomizationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ContainerServiceNodeCustomization.NodeCustomizationData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <returns> A new <see cref="ContainerServiceNodeCustomization.NodeCustomizationData"/> instance for mocking. </returns>
        public static NodeCustomizationData NodeCustomizationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NodeCustomizationProperties properties = null, string etag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NodeCustomizationData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                etag,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NodeCustomizationProperties"/>. </summary>
        /// <param name="containerImages"> The list of container images to cache on nodes. See https://kubernetes.io/docs/concepts/containers/images/#image-names. </param>
        /// <param name="identityProfile">
        /// The identity used to execute node customization tasks during image build time and provisioning time.
        /// If not specified the default agentpool identity will be used.
        /// This does not affect provisioned nodes.
        /// </param>
        /// <param name="version"> An auto-generated value that changes when the other fields of the image customization are changed. </param>
        /// <param name="provisioningState"> The provisioning state of the node customization. </param>
        /// <param name="customizationScripts"> The scripts to customize the node before or after image capture. </param>
        /// <returns> A new <see cref="Models.NodeCustomizationProperties"/> instance for mocking. </returns>
        public static NodeCustomizationProperties NodeCustomizationProperties(IEnumerable<string> containerImages = null, UserAssignedIdentity identityProfile = null, string version = null, ProvisioningState? provisioningState = null, IEnumerable<NodeCustomizationScript> customizationScripts = null)
        {
            containerImages ??= new List<string>();
            customizationScripts ??= new List<NodeCustomizationScript>();

            return new NodeCustomizationProperties(
                containerImages?.ToList(),
                identityProfile,
                version,
                provisioningState,
                customizationScripts?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ContainerServiceNodeCustomization.NodeCustomizationVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ContainerServiceNodeCustomization.NodeCustomizationVersionData"/> instance for mocking. </returns>
        public static NodeCustomizationVersionData NodeCustomizationVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, NodeCustomizationProperties properties = null)
        {
            return new NodeCustomizationVersionData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }
    }
}
