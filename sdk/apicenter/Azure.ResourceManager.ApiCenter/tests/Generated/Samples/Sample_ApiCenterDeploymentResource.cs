// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.ApiCenter.Samples
{
    public partial class Sample_ApiCenterDeploymentResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DeploymentsGet()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/Deployments_Get.json
            // this example is just showing the usage of "Deployments_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ApiCenterDeploymentResource created on azure
            // for more information of creating ApiCenterDeploymentResource, please refer to the document of ApiCenterDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string workspaceName = "default";
            string apiName = "echo-api";
            string deploymentName = "production";
            ResourceIdentifier apiCenterDeploymentResourceId = ApiCenterDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, workspaceName, apiName, deploymentName);
            ApiCenterDeploymentResource apiCenterDeployment = client.GetApiCenterDeploymentResource(apiCenterDeploymentResourceId);

            // invoke the operation
            ApiCenterDeploymentResource result = await apiCenterDeployment.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ApiCenterDeploymentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeploymentsDelete()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/Deployments_Delete.json
            // this example is just showing the usage of "Deployments_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ApiCenterDeploymentResource created on azure
            // for more information of creating ApiCenterDeploymentResource, please refer to the document of ApiCenterDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string workspaceName = "default";
            string apiName = "echo-api";
            string deploymentName = "production";
            ResourceIdentifier apiCenterDeploymentResourceId = ApiCenterDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, workspaceName, apiName, deploymentName);
            ApiCenterDeploymentResource apiCenterDeployment = client.GetApiCenterDeploymentResource(apiCenterDeploymentResourceId);

            // invoke the operation
            await apiCenterDeployment.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_DeploymentsCreateOrUpdate()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/Deployments_CreateOrUpdate.json
            // this example is just showing the usage of "Deployments_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ApiCenterDeploymentResource created on azure
            // for more information of creating ApiCenterDeploymentResource, please refer to the document of ApiCenterDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string workspaceName = "default";
            string apiName = "echo-api";
            string deploymentName = "production";
            ResourceIdentifier apiCenterDeploymentResourceId = ApiCenterDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, workspaceName, apiName, deploymentName);
            ApiCenterDeploymentResource apiCenterDeployment = client.GetApiCenterDeploymentResource(apiCenterDeploymentResourceId);

            // invoke the operation
            ApiCenterDeploymentData data = new ApiCenterDeploymentData();
            ArmOperation<ApiCenterDeploymentResource> lro = await apiCenterDeployment.UpdateAsync(WaitUntil.Completed, data);
            ApiCenterDeploymentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ApiCenterDeploymentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Head_DeploymentsHead()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/Deployments_Head.json
            // this example is just showing the usage of "Deployments_Head" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ApiCenterDeploymentResource created on azure
            // for more information of creating ApiCenterDeploymentResource, please refer to the document of ApiCenterDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string workspaceName = "default";
            string apiName = "echo-api";
            string deploymentName = "production";
            ResourceIdentifier apiCenterDeploymentResourceId = ApiCenterDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, workspaceName, apiName, deploymentName);
            ApiCenterDeploymentResource apiCenterDeployment = client.GetApiCenterDeploymentResource(apiCenterDeploymentResourceId);

            // invoke the operation
            bool result = await apiCenterDeployment.HeadAsync();

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
