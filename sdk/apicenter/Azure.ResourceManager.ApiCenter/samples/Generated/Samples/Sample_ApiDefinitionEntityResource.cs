// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ApiCenter.Models;

namespace Azure.ResourceManager.ApiCenter.Samples
{
    public partial class Sample_ApiDefinitionEntityResource
    {
        // ApiDefinitions_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ApiDefinitionsGet()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/ApiDefinitions_Get.json
            // this example is just showing the usage of "ApiDefinitions_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ApiDefinitionEntityResource created on azure
            // for more information of creating ApiDefinitionEntityResource, please refer to the document of ApiDefinitionEntityResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string workspaceName = "default";
            string apiName = "echo-api";
            string versionName = "2023-01-01";
            string definitionName = "openapi";
            ResourceIdentifier apiDefinitionEntityResourceId = ApiDefinitionEntityResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, workspaceName, apiName, versionName, definitionName);
            ApiDefinitionEntityResource apiDefinitionEntity = client.GetApiDefinitionEntityResource(apiDefinitionEntityResourceId);

            // invoke the operation
            ApiDefinitionEntityResource result = await apiDefinitionEntity.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ApiDefinitionEntityData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ApiDefinitions_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_ApiDefinitionsCreateOrUpdate()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/ApiDefinitions_CreateOrUpdate.json
            // this example is just showing the usage of "ApiDefinitions_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ApiDefinitionEntityResource created on azure
            // for more information of creating ApiDefinitionEntityResource, please refer to the document of ApiDefinitionEntityResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string workspaceName = "default";
            string apiName = "openapi";
            string versionName = "2023-01-01";
            string definitionName = "openapi";
            ResourceIdentifier apiDefinitionEntityResourceId = ApiDefinitionEntityResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, workspaceName, apiName, versionName, definitionName);
            ApiDefinitionEntityResource apiDefinitionEntity = client.GetApiDefinitionEntityResource(apiDefinitionEntityResourceId);

            // invoke the operation
            ApiDefinitionEntityData data = new ApiDefinitionEntityData();
            ArmOperation<ApiDefinitionEntityResource> lro = await apiDefinitionEntity.UpdateAsync(WaitUntil.Completed, data);
            ApiDefinitionEntityResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ApiDefinitionEntityData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ApiDefinitions_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_ApiDefinitionsDelete()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/ApiDefinitions_Delete.json
            // this example is just showing the usage of "ApiDefinitions_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ApiDefinitionEntityResource created on azure
            // for more information of creating ApiDefinitionEntityResource, please refer to the document of ApiDefinitionEntityResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string workspaceName = "default";
            string apiName = "echo-api";
            string versionName = "2023-01-01";
            string definitionName = "openapi";
            ResourceIdentifier apiDefinitionEntityResourceId = ApiDefinitionEntityResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, workspaceName, apiName, versionName, definitionName);
            ApiDefinitionEntityResource apiDefinitionEntity = client.GetApiDefinitionEntityResource(apiDefinitionEntityResourceId);

            // invoke the operation
            await apiDefinitionEntity.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // ApiDefinitions_Head
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Head_ApiDefinitionsHead()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/ApiDefinitions_Head.json
            // this example is just showing the usage of "ApiDefinitions_Head" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ApiDefinitionEntityResource created on azure
            // for more information of creating ApiDefinitionEntityResource, please refer to the document of ApiDefinitionEntityResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string workspaceName = "default";
            string apiName = "echo-api";
            string versionName = "2023-01-01";
            string definitionName = "openapi";
            ResourceIdentifier apiDefinitionEntityResourceId = ApiDefinitionEntityResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, workspaceName, apiName, versionName, definitionName);
            ApiDefinitionEntityResource apiDefinitionEntity = client.GetApiDefinitionEntityResource(apiDefinitionEntityResourceId);

            // invoke the operation
            bool result = await apiDefinitionEntity.HeadAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // ApiDefinitions_ExportSpecification
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task ExportSpecification_ApiDefinitionsExportSpecification()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/ApiDefinitions_ExportSpecification.json
            // this example is just showing the usage of "ApiDefinitions_ExportSpecification" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ApiDefinitionEntityResource created on azure
            // for more information of creating ApiDefinitionEntityResource, please refer to the document of ApiDefinitionEntityResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string workspaceName = "default";
            string apiName = "echo-api";
            string versionName = "2023-01-01";
            string definitionName = "openapi";
            ResourceIdentifier apiDefinitionEntityResourceId = ApiDefinitionEntityResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, workspaceName, apiName, versionName, definitionName);
            ApiDefinitionEntityResource apiDefinitionEntity = client.GetApiDefinitionEntityResource(apiDefinitionEntityResourceId);

            // invoke the operation
            ArmOperation<ApiSpecExportResult> lro = await apiDefinitionEntity.ExportSpecificationAsync(WaitUntil.Completed);
            ApiSpecExportResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // ApiDefinitions_ImportSpecification
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task ImportSpecification_ApiDefinitionsImportSpecification()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/ApiDefinitions_ImportSpecification.json
            // this example is just showing the usage of "ApiDefinitions_ImportSpecification" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ApiDefinitionEntityResource created on azure
            // for more information of creating ApiDefinitionEntityResource, please refer to the document of ApiDefinitionEntityResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string workspaceName = "default";
            string apiName = "echo-api";
            string versionName = "2023-01-01";
            string definitionName = "openapi";
            ResourceIdentifier apiDefinitionEntityResourceId = ApiDefinitionEntityResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, workspaceName, apiName, versionName, definitionName);
            ApiDefinitionEntityResource apiDefinitionEntity = client.GetApiDefinitionEntityResource(apiDefinitionEntityResourceId);

            // invoke the operation
            ApiSpecImportContent content = new ApiSpecImportContent();
            await apiDefinitionEntity.ImportSpecificationAsync(WaitUntil.Completed, content);

            Console.WriteLine($"Succeeded");
        }
    }
}
