// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;

namespace Azure.ResourceManager.ApiCenter.Samples
{
    public partial class Sample_MetadataSchemaResource
    {
        // MetadataSchemas_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_MetadataSchemasGet()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/MetadataSchemas_Get.json
            // this example is just showing the usage of "MetadataSchemas_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MetadataSchemaResource created on azure
            // for more information of creating MetadataSchemaResource, please refer to the document of MetadataSchemaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string metadataSchemaName = "lastName";
            ResourceIdentifier metadataSchemaResourceId = MetadataSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, metadataSchemaName);
            MetadataSchemaResource metadataSchema = client.GetMetadataSchemaResource(metadataSchemaResourceId);

            // invoke the operation
            MetadataSchemaResource result = await metadataSchema.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MetadataSchemaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // MetadataSchemas_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_MetadataSchemasCreateOrUpdate()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/MetadataSchemas_CreateOrUpdate.json
            // this example is just showing the usage of "MetadataSchemas_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MetadataSchemaResource created on azure
            // for more information of creating MetadataSchemaResource, please refer to the document of MetadataSchemaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string metadataSchemaName = "author";
            ResourceIdentifier metadataSchemaResourceId = MetadataSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, metadataSchemaName);
            MetadataSchemaResource metadataSchema = client.GetMetadataSchemaResource(metadataSchemaResourceId);

            // invoke the operation
            MetadataSchemaData data = new MetadataSchemaData();
            ArmOperation<MetadataSchemaResource> lro = await metadataSchema.UpdateAsync(WaitUntil.Completed, data);
            MetadataSchemaResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MetadataSchemaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // MetadataSchemas_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_MetadataSchemasDelete()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/MetadataSchemas_Delete.json
            // this example is just showing the usage of "MetadataSchemas_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MetadataSchemaResource created on azure
            // for more information of creating MetadataSchemaResource, please refer to the document of MetadataSchemaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string metadataSchemaName = "author";
            ResourceIdentifier metadataSchemaResourceId = MetadataSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, metadataSchemaName);
            MetadataSchemaResource metadataSchema = client.GetMetadataSchemaResource(metadataSchemaResourceId);

            // invoke the operation
            await metadataSchema.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // MetadataSchemas_Head
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Head_MetadataSchemasHead()
        {
            // Generated from example definition: specification/apicenter/resource-manager/Microsoft.ApiCenter/stable/2024-03-01/examples/MetadataSchemas_Head.json
            // this example is just showing the usage of "MetadataSchemas_Head" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MetadataSchemaResource created on azure
            // for more information of creating MetadataSchemaResource, please refer to the document of MetadataSchemaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "contoso-resources";
            string serviceName = "contoso";
            string metadataSchemaName = "author";
            ResourceIdentifier metadataSchemaResourceId = MetadataSchemaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, metadataSchemaName);
            MetadataSchemaResource metadataSchema = client.GetMetadataSchemaResource(metadataSchemaResourceId);

            // invoke the operation
            bool result = await metadataSchema.HeadAsync();

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
