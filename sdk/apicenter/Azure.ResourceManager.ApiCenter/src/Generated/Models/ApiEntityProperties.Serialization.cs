// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApiCenter.Models
{
    public partial class ApiEntityProperties : IUtf8JsonSerializable, IJsonModel<ApiEntityProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ApiEntityProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ApiEntityProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApiEntityProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ApiEntityProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("title"u8);
            writer.WriteStringValue(Title);
            writer.WritePropertyName("kind"u8);
            writer.WriteStringValue(Kind.ToString());
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Summary))
            {
                writer.WritePropertyName("summary"u8);
                writer.WriteStringValue(Summary);
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleStage))
            {
                writer.WritePropertyName("lifecycleStage"u8);
                writer.WriteStringValue(LifecycleStage.Value.ToString());
            }
            if (Optional.IsDefined(TermsOfService))
            {
                writer.WritePropertyName("termsOfService"u8);
                writer.WriteObjectValue<TermsOfService>(TermsOfService, options);
            }
            if (Optional.IsCollectionDefined(ExternalDocumentation))
            {
                writer.WritePropertyName("externalDocumentation"u8);
                writer.WriteStartArray();
                foreach (var item in ExternalDocumentation)
                {
                    writer.WriteObjectValue<ExternalDocumentation>(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Contacts))
            {
                writer.WritePropertyName("contacts"u8);
                writer.WriteStartArray();
                foreach (var item in Contacts)
                {
                    writer.WriteObjectValue<ApiContact>(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(License))
            {
                writer.WritePropertyName("license"u8);
                writer.WriteObjectValue<ApiLicense>(License, options);
            }
            if (Optional.IsDefined(CustomProperties))
            {
                writer.WritePropertyName("customProperties"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(CustomProperties);
#else
                using (JsonDocument document = JsonDocument.Parse(CustomProperties))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ApiEntityProperties IJsonModel<ApiEntityProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApiEntityProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ApiEntityProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeApiEntityProperties(document.RootElement, options);
        }

        internal static ApiEntityProperties DeserializeApiEntityProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string title = default;
            ApiKind kind = default;
            string description = default;
            string summary = default;
            LifecycleStage? lifecycleStage = default;
            TermsOfService termsOfService = default;
            IList<ExternalDocumentation> externalDocumentation = default;
            IList<ApiContact> contacts = default;
            ApiLicense license = default;
            BinaryData customProperties = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    kind = new ApiKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("summary"u8))
                {
                    summary = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lifecycleStage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lifecycleStage = new LifecycleStage(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("termsOfService"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    termsOfService = TermsOfService.DeserializeTermsOfService(property.Value, options);
                    continue;
                }
                if (property.NameEquals("externalDocumentation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ExternalDocumentation> array = new List<ExternalDocumentation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.ExternalDocumentation.DeserializeExternalDocumentation(item, options));
                    }
                    externalDocumentation = array;
                    continue;
                }
                if (property.NameEquals("contacts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ApiContact> array = new List<ApiContact>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ApiContact.DeserializeApiContact(item, options));
                    }
                    contacts = array;
                    continue;
                }
                if (property.NameEquals("license"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    license = ApiLicense.DeserializeApiLicense(property.Value, options);
                    continue;
                }
                if (property.NameEquals("customProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customProperties = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ApiEntityProperties(
                title,
                kind,
                description,
                summary,
                lifecycleStage,
                termsOfService,
                externalDocumentation ?? new ChangeTrackingList<ExternalDocumentation>(),
                contacts ?? new ChangeTrackingList<ApiContact>(),
                license,
                customProperties,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ApiEntityProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApiEntityProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ApiEntityProperties)} does not support writing '{options.Format}' format.");
            }
        }

        ApiEntityProperties IPersistableModel<ApiEntityProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApiEntityProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeApiEntityProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ApiEntityProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ApiEntityProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
