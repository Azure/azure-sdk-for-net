// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ApiCenter.Models
{
    /// <summary> Environment properties entity. </summary>
    public partial class EnvironmentProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EnvironmentProperties"/>. </summary>
        /// <param name="title"> Environment title. </param>
        /// <param name="kind"> Environment kind. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="title"/> is null. </exception>
        public EnvironmentProperties(string title, EnvironmentKind kind)
        {
            Argument.AssertNotNull(title, nameof(title));

            Title = title;
            Kind = kind;
        }

        /// <summary> Initializes a new instance of <see cref="EnvironmentProperties"/>. </summary>
        /// <param name="title"> Environment title. </param>
        /// <param name="description"> The environment description. </param>
        /// <param name="kind"> Environment kind. </param>
        /// <param name="server"> Server information of the environment. </param>
        /// <param name="onboarding"> Environment onboarding information. </param>
        /// <param name="customProperties"> The custom metadata defined for API catalog entities. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EnvironmentProperties(string title, string description, EnvironmentKind kind, EnvironmentServer server, Onboarding onboarding, BinaryData customProperties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Title = title;
            Description = description;
            Kind = kind;
            Server = server;
            Onboarding = onboarding;
            CustomProperties = customProperties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EnvironmentProperties"/> for deserialization. </summary>
        internal EnvironmentProperties()
        {
        }

        /// <summary> Environment title. </summary>
        public string Title { get; set; }
        /// <summary> The environment description. </summary>
        public string Description { get; set; }
        /// <summary> Environment kind. </summary>
        public EnvironmentKind Kind { get; set; }
        /// <summary> Server information of the environment. </summary>
        public EnvironmentServer Server { get; set; }
        /// <summary> Environment onboarding information. </summary>
        public Onboarding Onboarding { get; set; }
        /// <summary>
        /// The custom metadata defined for API catalog entities.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData CustomProperties { get; set; }
    }
}
