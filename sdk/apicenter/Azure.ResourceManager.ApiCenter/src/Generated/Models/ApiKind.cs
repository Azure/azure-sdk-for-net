// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ApiCenter.Models
{
    /// <summary> The kind of the API. </summary>
    public readonly partial struct ApiKind : IEquatable<ApiKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ApiKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ApiKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RestValue = "rest";
        private const string GraphqlValue = "graphql";
        private const string GrpcValue = "grpc";
        private const string SoapValue = "soap";
        private const string WebhookValue = "webhook";
        private const string WebsocketValue = "websocket";

        /// <summary> A Representational State Transfer Api. </summary>
        public static ApiKind Rest { get; } = new ApiKind(RestValue);
        /// <summary> A Graph query language Api. </summary>
        public static ApiKind Graphql { get; } = new ApiKind(GraphqlValue);
        /// <summary> A gRPC Api. </summary>
        public static ApiKind Grpc { get; } = new ApiKind(GrpcValue);
        /// <summary> A SOAP Api. </summary>
        public static ApiKind Soap { get; } = new ApiKind(SoapValue);
        /// <summary> Web Hook. </summary>
        public static ApiKind Webhook { get; } = new ApiKind(WebhookValue);
        /// <summary> Web Socket. </summary>
        public static ApiKind Websocket { get; } = new ApiKind(WebsocketValue);
        /// <summary> Determines if two <see cref="ApiKind"/> values are the same. </summary>
        public static bool operator ==(ApiKind left, ApiKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ApiKind"/> values are not the same. </summary>
        public static bool operator !=(ApiKind left, ApiKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ApiKind"/>. </summary>
        public static implicit operator ApiKind(string value) => new ApiKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ApiKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ApiKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
