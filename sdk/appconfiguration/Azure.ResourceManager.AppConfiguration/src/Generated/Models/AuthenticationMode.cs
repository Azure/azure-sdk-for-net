// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppConfiguration.Models
{
    /// <summary> The data plane proxy authentication mode. This property manages the authentication mode of request to the data plane resources. </summary>
    public readonly partial struct AuthenticationMode : IEquatable<AuthenticationMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AuthenticationMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AuthenticationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LocalValue = "Local";
        private const string PassThroughValue = "Pass-through";

        /// <summary> The local authentication mode. Users are not required to have data plane permissions if local authentication is not disabled. </summary>
        public static AuthenticationMode Local { get; } = new AuthenticationMode(LocalValue);
        /// <summary> The pass-through authentication mode. User identity will be passed through from Azure Resource Manager (ARM), requiring user to have data plane action permissions (Available via App Configuration Data Owner/ App Configuration Data Reader). </summary>
        public static AuthenticationMode PassThrough { get; } = new AuthenticationMode(PassThroughValue);
        /// <summary> Determines if two <see cref="AuthenticationMode"/> values are the same. </summary>
        public static bool operator ==(AuthenticationMode left, AuthenticationMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AuthenticationMode"/> values are not the same. </summary>
        public static bool operator !=(AuthenticationMode left, AuthenticationMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AuthenticationMode"/>. </summary>
        public static implicit operator AuthenticationMode(string value) => new AuthenticationMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AuthenticationMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AuthenticationMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
