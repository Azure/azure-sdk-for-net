// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppConfiguration.Models
{
    /// <summary> The composition type describes how the key-values within the snapshot are composed. The 'key' composition type ensures there are no two key-values containing the same key. The 'key_label' composition type ensures there are no two key-values containing the same key and label. </summary>
    public readonly partial struct SnapshotCompositionType : IEquatable<SnapshotCompositionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SnapshotCompositionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SnapshotCompositionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string KeyValue = "Key";
        private const string KeyLabelValue = "Key_Label";

        /// <summary> Key. </summary>
        public static SnapshotCompositionType Key { get; } = new SnapshotCompositionType(KeyValue);
        /// <summary> Key_Label. </summary>
        public static SnapshotCompositionType KeyLabel { get; } = new SnapshotCompositionType(KeyLabelValue);
        /// <summary> Determines if two <see cref="SnapshotCompositionType"/> values are the same. </summary>
        public static bool operator ==(SnapshotCompositionType left, SnapshotCompositionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SnapshotCompositionType"/> values are not the same. </summary>
        public static bool operator !=(SnapshotCompositionType left, SnapshotCompositionType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SnapshotCompositionType"/>. </summary>
        public static implicit operator SnapshotCompositionType(string value) => new SnapshotCompositionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SnapshotCompositionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SnapshotCompositionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
