// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Data.AppConfiguration
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class AppConfigurationModelFactory
    {

        /// <summary> A key-value pair representing application settings. </summary>
        /// <param name="locked"> Indicates whether the key-value is locked. </param>
        /// <param name="etag"> A value representing the current state of the resource. </param>
        /// <param name="key">
        /// The primary identifier of the configuration setting.
        ///     A  is used together with a  to uniquely identify a configuration setting.
        /// </param>
        /// <param name="label">
        /// A value used to group configuration settings.
        ///     A  is used together with a  to uniquely identify a configuration setting.
        /// </param>
        /// <param name="value"> The configuration setting's value. </param>
        /// <param name="contentType">
        /// The content type of the configuration setting's value.
        ///     Providing a proper content-type can enable transformations of values when they are retrieved by applications.
        /// </param>
        /// <param name="lastModified"> The last time a modifying operation was performed on the given configuration setting. </param>
        /// <param name="tags">
        /// A dictionary of tags used to assign additional properties to a configuration setting.
        ///     These can be used to indicate how a configuration setting may be applied.
        /// </param>
        /// <returns> A new <see cref="AppConfiguration.ConfigurationSetting"/> instance for mocking. </returns>
        public static ConfigurationSetting ConfigurationSetting(bool? locked = default, string etag = default, string key = default, string label = default, string value = default, string contentType = default, DateTimeOffset? lastModified = default, IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new ConfigurationSetting(
                locked,
                etag,
                key,
                label,
                value,
                contentType,
                lastModified,
                tags,
                additionalBinaryDataProperties: null);
        }
    }
}
