// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Data.AppConfiguration
{
    /// <summary> Key-value fields. </summary>
    public readonly partial struct KeyValueFields : IEquatable<KeyValueFields>
    {
        private readonly string _value;
        /// <summary> Key field. </summary>
        private const string KeyValue = "key";
        /// <summary> Label field. </summary>
        private const string LabelValue = "label";
        /// <summary> Content type field. </summary>
        private const string ContentTypeValue = "content_type";
        /// <summary> Value field. </summary>
        private const string ValueValue = "value";
        /// <summary> Last modified field. </summary>
        private const string LastModifiedValue = "last_modified";
        /// <summary> Tags field. </summary>
        private const string TagsValue = "tags";
        /// <summary> Locked field. </summary>
        private const string LockedValue = "locked";
        /// <summary> Etag field. </summary>
        private const string EtagValue = "etag";

        /// <summary> Initializes a new instance of <see cref="KeyValueFields"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public KeyValueFields(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Key field. </summary>
        public static KeyValueFields Key { get; } = new KeyValueFields(KeyValue);

        /// <summary> Label field. </summary>
        public static KeyValueFields Label { get; } = new KeyValueFields(LabelValue);

        /// <summary> Content type field. </summary>
        public static KeyValueFields ContentType { get; } = new KeyValueFields(ContentTypeValue);

        /// <summary> Value field. </summary>
        public static KeyValueFields Value { get; } = new KeyValueFields(ValueValue);

        /// <summary> Last modified field. </summary>
        public static KeyValueFields LastModified { get; } = new KeyValueFields(LastModifiedValue);

        /// <summary> Tags field. </summary>
        public static KeyValueFields Tags { get; } = new KeyValueFields(TagsValue);

        /// <summary> Locked field. </summary>
        public static KeyValueFields Locked { get; } = new KeyValueFields(LockedValue);

        /// <summary> Etag field. </summary>
        public static KeyValueFields Etag { get; } = new KeyValueFields(EtagValue);

        /// <summary> Determines if two <see cref="KeyValueFields"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(KeyValueFields left, KeyValueFields right) => left.Equals(right);

        /// <summary> Determines if two <see cref="KeyValueFields"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(KeyValueFields left, KeyValueFields right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="KeyValueFields"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator KeyValueFields(string value) => new KeyValueFields(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is KeyValueFields other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(KeyValueFields other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
