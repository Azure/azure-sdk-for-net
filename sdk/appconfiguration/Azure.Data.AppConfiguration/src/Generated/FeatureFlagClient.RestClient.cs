// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;

namespace Azure.Data.AppConfiguration
{
    /// <summary></summary>
    public partial class FeatureFlagClient
    {
        private static ResponseClassifier _pipelineMessageClassifier200;
        private static ResponseClassifier _pipelineMessageClassifier200204;

        private static ResponseClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 = new StatusCodeClassifier(stackalloc ushort[] { 200 });

        private static ResponseClassifier PipelineMessageClassifier200204 => _pipelineMessageClassifier200204 = new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });

        internal HttpMessage CreateGetFeatureFlagsRequest(string name, string label, string syncToken, string after, string acceptDatetime, IEnumerable<string> @select, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/feature-management/ff", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (name != null)
            {
                uri.AppendQuery("name", name, true);
            }
            if (label != null)
            {
                uri.AppendQuery("label", label, true);
            }
            if (after != null)
            {
                uri.AppendQuery("After", after, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$Select", @select, ",", null, true);
            }
            if (tags != null && !(tags is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                foreach (var @param in tags)
                {
                    uri.AppendQuery("tags", @param, true);
                }
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Get;
            if (syncToken != null)
            {
                request.Headers.SetValue("Sync-Token", syncToken);
            }
            if (acceptDatetime != null)
            {
                request.Headers.SetValue("Accept-Datetime", acceptDatetime);
            }
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            request.Headers.SetValue("Accept", "application/json;profile=\\\"https://azconfig.io/mime-profiles/feature-management/ffset\\\";charset=utf-8, application/problem+json");
            return message;
        }

        internal HttpMessage CreateNextGetFeatureFlagsRequest(Uri nextPage, string name, string label, string syncToken, string after, string acceptDatetime, IEnumerable<string> @select, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Get;
            request.Headers.SetValue("Accept", "application/json;profile=\\\"https://azconfig.io/mime-profiles/feature-management/ffset\\\";charset=utf-8, application/problem+json");
            return message;
        }

        internal HttpMessage CreateCheckFeatureFlagsRequest(string name, string label, string syncToken, string after, string acceptDatetime, IEnumerable<string> @select, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/feature-management/ff", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (name != null)
            {
                uri.AppendQuery("name", name, true);
            }
            if (label != null)
            {
                uri.AppendQuery("label", label, true);
            }
            if (after != null)
            {
                uri.AppendQuery("After", after, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$Select", @select, ",", null, true);
            }
            if (tags != null && !(tags is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                foreach (var @param in tags)
                {
                    uri.AppendQuery("tags", @param, true);
                }
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Head;
            if (syncToken != null)
            {
                request.Headers.SetValue("Sync-Token", syncToken);
            }
            if (acceptDatetime != null)
            {
                request.Headers.SetValue("Accept-Datetime", acceptDatetime);
            }
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            return message;
        }

        internal HttpMessage CreateGetFeatureFlagRequest(string name, string label, IEnumerable<FeatureFlagFields> @select, string syncToken, string acceptDatetime, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/feature-management/ff/", false);
            uri.AppendPath(name, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (label != null)
            {
                uri.AppendQuery("label", label, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<FeatureFlagFields> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$Select", @select, ",", null, true);
            }
            if (tags != null && !(tags is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                foreach (var @param in tags)
                {
                    uri.AppendQuery("tags", @param, true);
                }
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Get;
            if (syncToken != null)
            {
                request.Headers.SetValue("Sync-Token", syncToken);
            }
            if (acceptDatetime != null)
            {
                request.Headers.SetValue("Accept-Datetime", acceptDatetime);
            }
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            request.Headers.SetValue("Accept", "application/json;profile=\\\"https://azconfig.io/mime-profiles/feature-management/ff\\\"â€‹;charset=utf-8, application/problem+json");
            return message;
        }

        internal HttpMessage CreateCheckFeatureFlagRequest(string name, string label, string syncToken, string acceptDatetime, MatchConditions matchConditions, IEnumerable<FeatureFlagFields> @select, IEnumerable<string> tags, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/feature-management/ff/", false);
            uri.AppendPath(name, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (label != null)
            {
                uri.AppendQuery("label", label, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<FeatureFlagFields> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$Select", @select, ",", null, true);
            }
            if (tags != null && !(tags is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                foreach (var @param in tags)
                {
                    uri.AppendQuery("tags", @param, true);
                }
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Head;
            if (syncToken != null)
            {
                request.Headers.SetValue("Sync-Token", syncToken);
            }
            if (acceptDatetime != null)
            {
                request.Headers.SetValue("Accept-Datetime", acceptDatetime);
            }
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            return message;
        }

        internal HttpMessage CreatePutFeatureFlagRequest(string name, RequestContent content, string label, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/feature-management/ff/", false);
            uri.AppendPath(name, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (label != null)
            {
                uri.AppendQuery("label", label, true);
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Put;
            request.Headers.SetValue("Content-Type", "application/json;profile=\\\"https://azconfig.io/mime-profiles/feature-management/ff\\\"â€‹;charset=utf-8");
            if (syncToken != null)
            {
                request.Headers.SetValue("Sync-Token", syncToken);
            }
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            request.Headers.SetValue("Accept", "application/json;profile=\\\"https://azconfig.io/mime-profiles/feature-management/ff\\\"â€‹;charset=utf-8, application/problem+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteFeatureFlagRequest(string name, string label, string syncToken, ETag? ifMatch, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/feature-management/ff/", false);
            uri.AppendPath(name, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (label != null)
            {
                uri.AppendQuery("label", label, true);
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200204);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Delete;
            if (syncToken != null)
            {
                request.Headers.SetValue("Sync-Token", syncToken);
            }
            if (ifMatch != null)
            {
                request.Headers.Add("If-Match", ifMatch.Value);
            }
            request.Headers.SetValue("Accept", "application/json;profile=\\\"https://azconfig.io/mime-profiles/feature-management/ff\\\"â€‹;charset=utf-8, application/problem+json");
            return message;
        }

        internal HttpMessage CreateGetRevisionsRequest(string name, string label, string after, IEnumerable<string> @select, IEnumerable<string> tags, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/feature-management/revisions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (name != null)
            {
                uri.AppendQuery("name", name, true);
            }
            if (label != null)
            {
                uri.AppendQuery("label", label, true);
            }
            if (after != null)
            {
                uri.AppendQuery("After", after, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$Select", @select, ",", null, true);
            }
            if (tags != null && !(tags is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                foreach (var @param in tags)
                {
                    uri.AppendQuery("tags", @param, true);
                }
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Get;
            if (syncToken != null)
            {
                request.Headers.SetValue("Sync-Token", syncToken);
            }
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            request.Headers.SetValue("Accept", "application/json;profile=\\\"https://azconfig.io/mime-profiles/feature-management/ffset\\\"â€‹;charset=utf-8, application/problem+json");
            return message;
        }

        internal HttpMessage CreateCheckRevisionsRequest(string name, string label, string after, IEnumerable<string> @select, IEnumerable<string> tags, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/feature-management/revisions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (name != null)
            {
                uri.AppendQuery("name", name, true);
            }
            if (label != null)
            {
                uri.AppendQuery("label", label, true);
            }
            if (after != null)
            {
                uri.AppendQuery("After", after, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$Select", @select, ",", null, true);
            }
            if (tags != null && !(tags is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                foreach (var @param in tags)
                {
                    uri.AppendQuery("tags", @param, true);
                }
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Head;
            return message;
        }

        internal HttpMessage CreateCreateReadOnlyLockRequest(string name, string label, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/feature-management/locks/", false);
            uri.AppendPath(name, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (label != null)
            {
                uri.AppendQuery("label", label, true);
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Put;
            if (syncToken != null)
            {
                request.Headers.SetValue("Sync-Token", syncToken);
            }
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            request.Headers.SetValue("Accept", "application/json;profile=\\\"https://azconfig.io/mime-profiles/feature-management/ff\\\"â€‹;charset=utf-8, application/problem+json");
            return message;
        }

        internal HttpMessage CreateDeleteReadOnlyLockRequest(string name, string label, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/feature-management/locks/", false);
            uri.AppendPath(name, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (label != null)
            {
                uri.AppendQuery("label", label, true);
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Delete;
            if (syncToken != null)
            {
                request.Headers.SetValue("Sync-Token", syncToken);
            }
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            request.Headers.SetValue("Accept", "application/json;profile=\\\"https://azconfig.io/mime-profiles/feature-management/ff\\\"â€‹;charset=utf-8, application/problem+json");
            return message;
        }
    }
}
