// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Data.AppConfiguration
{
    /// <summary> A feature flag. </summary>
    public partial class FeatureFlag : IJsonModel<FeatureFlag>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<FeatureFlag>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FeatureFlag>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FeatureFlag)} does not support writing '{format}' format.");
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Alias))
            {
                writer.WritePropertyName("alias"u8);
                writer.WriteStringValue(Alias);
            }
            if (Optional.IsDefined(Label))
            {
                writer.WritePropertyName("label"u8);
                writer.WriteStringValue(Label);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Enabled))
            {
                writer.WritePropertyName("enabled"u8);
                writer.WriteBooleanValue(Enabled.Value);
            }
            if (Optional.IsDefined(Conditions))
            {
                writer.WritePropertyName("conditions"u8);
                writer.WriteObjectValue(Conditions, options);
            }
            if (Optional.IsCollectionDefined(Variants))
            {
                writer.WritePropertyName("variants"u8);
                writer.WriteStartArray();
                foreach (FeatureFlagVariant item in Variants)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Allocation))
            {
                writer.WritePropertyName("allocation"u8);
                writer.WriteObjectValue(Allocation, options);
            }
            if (Optional.IsDefined(Telemetry))
            {
                writer.WritePropertyName("telemetry"u8);
                writer.WriteObjectValue(Telemetry, options);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(IsReadOnly))
            {
                writer.WritePropertyName("locked"u8);
                writer.WriteBooleanValue(IsReadOnly.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastModified))
            {
                writer.WritePropertyName("last_modified"u8);
                writer.WriteStringValue(LastModified.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("etag"u8);
                SerializationEtag(writer, options);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        FeatureFlag IJsonModel<FeatureFlag>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual FeatureFlag JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FeatureFlag>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FeatureFlag)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFeatureFlag(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static FeatureFlag DeserializeFeatureFlag(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string @alias = default;
            string label = default;
            string description = default;
            bool? enabled = default;
            FeatureFlagConditions conditions = default;
            IList<FeatureFlagVariant> variants = default;
            FeatureFlagAllocation allocation = default;
            FeatureFlagTelemetry telemetry = default;
            IDictionary<string, string> tags = default;
            bool? isReadOnly = default;
            DateTimeOffset? lastModified = default;
            ETag eTag = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("name"u8))
                {
                    name = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("alias"u8))
                {
                    @alias = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("label"u8))
                {
                    label = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("description"u8))
                {
                    description = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("enabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("conditions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    conditions = FeatureFlagConditions.DeserializeFeatureFlagConditions(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("variants"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FeatureFlagVariant> array = new List<FeatureFlagVariant>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(FeatureFlagVariant.DeserializeFeatureFlagVariant(item, options));
                    }
                    variants = array;
                    continue;
                }
                if (prop.NameEquals("allocation"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allocation = FeatureFlagAllocation.DeserializeFeatureFlagAllocation(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("telemetry"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    telemetry = FeatureFlagTelemetry.DeserializeFeatureFlagTelemetry(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("tags"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, prop0.Value.GetString());
                        }
                    }
                    tags = dictionary;
                    continue;
                }
                if (prop.NameEquals("locked"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isReadOnly = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("last_modified"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastModified = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("etag"u8))
                {
                    DeserializeEtag(prop, ref eTag);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new FeatureFlag(
                name,
                @alias,
                label,
                description,
                enabled,
                conditions,
                variants ?? new ChangeTrackingList<FeatureFlagVariant>(),
                allocation,
                telemetry,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                isReadOnly,
                lastModified,
                eTag,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<FeatureFlag>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FeatureFlag>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureDataAppConfigurationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(FeatureFlag)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        FeatureFlag IPersistableModel<FeatureFlag>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual FeatureFlag PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FeatureFlag>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeFeatureFlag(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FeatureFlag)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<FeatureFlag>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="featureFlag"> The <see cref="FeatureFlag"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(FeatureFlag featureFlag)
        {
            if (featureFlag == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(featureFlag, ModelSerializationExtensions.WireOptions);
            return content;
        }

        /// <param name="result"> The <see cref="Response"/> to deserialize the <see cref="FeatureFlag"/> from. </param>
        public static explicit operator FeatureFlag(Response result)
        {
            using Response response = result;
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeFeatureFlag(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
