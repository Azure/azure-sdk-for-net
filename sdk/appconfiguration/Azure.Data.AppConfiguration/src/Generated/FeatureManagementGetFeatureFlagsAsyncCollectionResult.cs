// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Data.AppConfiguration
{
    internal partial class FeatureManagementGetFeatureFlagsAsyncCollectionResult : AsyncPageable<BinaryData>
    {
        private readonly FeatureManagement _client;
        private readonly string _name;
        private readonly string _label;
        private readonly string _syncToken;
        private readonly string _after;
        private readonly string _acceptDatetime;
        private readonly IEnumerable<FeatureFlagFields> _select;
        private readonly MatchConditions _matchConditions;
        private readonly IEnumerable<string> _tags;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of FeatureManagementGetFeatureFlagsAsyncCollectionResult, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The FeatureManagement client used to send requests. </param>
        /// <param name="name"> A filter used to match feature flag names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        public FeatureManagementGetFeatureFlagsAsyncCollectionResult(FeatureManagement client, string name, string label, string syncToken, string after, string acceptDatetime, IEnumerable<FeatureFlagFields> @select, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context) : base(context?.CancellationToken ?? default)
        {
            _client = client;
            _name = name;
            _label = label;
            _syncToken = syncToken;
            _after = after;
            _acceptDatetime = acceptDatetime;
            _select = @select;
            _matchConditions = matchConditions;
            _tags = tags;
            _context = context;
        }

        /// <summary> Gets the pages of FeatureManagementGetFeatureFlagsAsyncCollectionResult as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of FeatureManagementGetFeatureFlagsAsyncCollectionResult as an enumerable collection. </returns>
        public override async IAsyncEnumerable<Page<BinaryData>> AsPages(string continuationToken, int? pageSizeHint)
        {
            Uri nextPage = continuationToken != null ? new Uri(continuationToken) : null;
            while (true)
            {
                Response response = await GetNextResponseAsync(pageSizeHint, nextPage).ConfigureAwait(false);
                if (response is null)
                {
                    yield break;
                }
                FeatureFlagListResult result = (FeatureFlagListResult)response;
                List<BinaryData> items = new List<BinaryData>();
                foreach (var item in result.Items)
                {
                    items.Add(BinaryData.FromObjectAsJson(item));
                }
                yield return Page<BinaryData>.FromValues(items, nextPage?.AbsoluteUri, response);
                string nextPageString = result.NextLink;
                if (nextPageString == null)
                {
                    yield break;
                }
                nextPage = new Uri(nextPageString);
            }
        }

        /// <summary> Get next page. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="nextLink"> The next link to use for the next page of results. </param>
        private async ValueTask<Response> GetNextResponseAsync(int? pageSizeHint, Uri nextLink)
        {
            HttpMessage message = nextLink != null ? _client.CreateNextGetFeatureFlagsRequest(nextLink, _name, _label, _syncToken, _after, _acceptDatetime, _select, _matchConditions, _tags, _context) : _client.CreateGetFeatureFlagsRequest(_name, _label, _syncToken, _after, _acceptDatetime, _select, _matchConditions, _tags, _context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("FeatureManagement.GetFeatureFlags");
            scope.Start();
            try
            {
                return await _client.Pipeline.ProcessMessageAsync(message, _context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
