// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Data.AppConfiguration
{
    /// <summary> A snapshot is a named, immutable subset of an App Configuration store's key-values. </summary>
    public partial class ConfigurationSnapshot : IJsonModel<ConfigurationSnapshot>
    {
        /// <summary> Initializes a new instance of <see cref="ConfigurationSnapshot"/> for deserialization. </summary>
        internal ConfigurationSnapshot()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ConfigurationSnapshot>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ConfigurationSnapshot IJsonModel<ConfigurationSnapshot>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ConfigurationSnapshot JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ConfigurationSnapshot>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConfigurationSnapshot)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConfigurationSnapshot(document.RootElement, options);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ConfigurationSnapshot>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ConfigurationSnapshot>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureDataAppConfigurationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ConfigurationSnapshot)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ConfigurationSnapshot IPersistableModel<ConfigurationSnapshot>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ConfigurationSnapshot PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ConfigurationSnapshot>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeConfigurationSnapshot(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ConfigurationSnapshot)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ConfigurationSnapshot>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="configurationSnapshot"> The <see cref="ConfigurationSnapshot"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(ConfigurationSnapshot configurationSnapshot)
        {
            if (configurationSnapshot == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(configurationSnapshot, ModelSerializationExtensions.WireOptions);
            return content;
        }

        /// <param name="result"> The <see cref="Response"/> to deserialize the <see cref="ConfigurationSnapshot"/> from. </param>
        public static explicit operator ConfigurationSnapshot(Response result)
        {
            using Response response = result;
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeConfigurationSnapshot(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
