// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Data.AppConfiguration
{
    /// <summary> A key-value pair representing application settings. </summary>
    public partial class KeyValue
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="KeyValue"/>. </summary>
        public KeyValue()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="KeyValue"/>. </summary>
        /// <param name="key"> The key of the key-value. </param>
        /// <param name="label"> The label the key-value belongs to. </param>
        /// <param name="contentType"> The content type of the value stored within the key-value. </param>
        /// <param name="value"> The value of the key-value. </param>
        /// <param name="lastModified"> A date representing the last time the key-value was modified. </param>
        /// <param name="tags"> The tags of the key-value. </param>
        /// <param name="locked"> Indicates whether the key-value is locked. </param>
        /// <param name="etag"> A value representing the current state of the resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal KeyValue(string key, string label, string contentType, string value, DateTimeOffset? lastModified, IDictionary<string, string> tags, bool? locked, string etag, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Key = key;
            Label = label;
            ContentType = contentType;
            Value = value;
            LastModified = lastModified;
            Tags = tags;
            Locked = locked;
            Etag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The key of the key-value. </summary>
        public string Key { get; }
        /// <summary> The label the key-value belongs to. </summary>
        public string Label { get; set; }
        /// <summary> The content type of the value stored within the key-value. </summary>
        public string ContentType { get; set; }
        /// <summary> The value of the key-value. </summary>
        public string Value { get; set; }
        /// <summary> A date representing the last time the key-value was modified. </summary>
        public DateTimeOffset? LastModified { get; set; }
        /// <summary> The tags of the key-value. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> Indicates whether the key-value is locked. </summary>
        public bool? Locked { get; set; }
        /// <summary> A value representing the current state of the resource. </summary>
        public string Etag { get; set; }
    }
}
