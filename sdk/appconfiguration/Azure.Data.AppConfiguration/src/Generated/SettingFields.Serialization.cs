// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Data.AppConfiguration
{
    internal static partial class SettingFieldsExtensions
    {
        /// <param name="value"> The value to serialize. </param>
        public static string ToSerialString(this SettingFields value) => value switch
        {
            SettingFields.Key => "key",
            SettingFields.Label => "label",
            SettingFields.ContentType => "content_type",
            SettingFields.Value => "value",
            SettingFields.LastModified => "last_modified",
            SettingFields.Tags => "tags",
            SettingFields.IsReadOnly => "locked",
            SettingFields.ETag => "etag",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown SettingFields value.")
        };

        /// <param name="value"> The value to deserialize. </param>
        public static SettingFields ToSettingFields(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "key"))
            {
                return SettingFields.Key;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "label"))
            {
                return SettingFields.Label;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "content_type"))
            {
                return SettingFields.ContentType;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "value"))
            {
                return SettingFields.Value;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "last_modified"))
            {
                return SettingFields.LastModified;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "tags"))
            {
                return SettingFields.Tags;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "locked"))
            {
                return SettingFields.IsReadOnly;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "etag"))
            {
                return SettingFields.ETag;
            }
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown SettingFields value.");
        }
    }
}
