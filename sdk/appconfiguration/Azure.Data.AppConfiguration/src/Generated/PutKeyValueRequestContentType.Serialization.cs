// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Data.AppConfiguration
{
    internal static partial class PutKeyValueRequestContentTypeExtensions
    {
        /// <param name="value"> The value to serialize. </param>
        public static string ToSerialString(this PutKeyValueRequestContentType value) => value switch
        {
            PutKeyValueRequestContentType.ApplicationVndMicrosoftAppconfigKvJson => "application/vnd.microsoft.appconfig.kv+json",
            PutKeyValueRequestContentType.ApplicationVndMicrosoftAppconfigKvsetJson => "application/vnd.microsoft.appconfig.kvset+json",
            PutKeyValueRequestContentType.ApplicationJson => "application/json",
            PutKeyValueRequestContentType.TextJson => "text/json",
            PutKeyValueRequestContentType.ApplicationJson => "application/*+json",
            PutKeyValueRequestContentType.ApplicationJsonPatchJson => "application/json-patch+json",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown PutKeyValueRequestContentType value.")
        };

        /// <param name="value"> The value to deserialize. </param>
        public static PutKeyValueRequestContentType ToPutKeyValueRequestContentType(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "application/vnd.microsoft.appconfig.kv+json"))
            {
                return PutKeyValueRequestContentType.ApplicationVndMicrosoftAppconfigKvJson;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "application/vnd.microsoft.appconfig.kvset+json"))
            {
                return PutKeyValueRequestContentType.ApplicationVndMicrosoftAppconfigKvsetJson;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "application/json"))
            {
                return PutKeyValueRequestContentType.ApplicationJson;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "text/json"))
            {
                return PutKeyValueRequestContentType.TextJson;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "application/*+json"))
            {
                return PutKeyValueRequestContentType.ApplicationJson;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "application/json-patch+json"))
            {
                return PutKeyValueRequestContentType.ApplicationJsonPatchJson;
            }
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown PutKeyValueRequestContentType value.");
        }
    }
}
