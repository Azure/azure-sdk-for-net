// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Data.AppConfiguration
{
    /// <summary> Defines how to allocate variants based on context. </summary>
    public partial class Allocation : IJsonModel<Allocation>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<Allocation>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<Allocation>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Allocation)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(DefaultWhenDisabled))
            {
                writer.WritePropertyName("default_when_disabled"u8);
                writer.WriteStringValue(DefaultWhenDisabled);
            }
            if (Optional.IsDefined(DefaultWhenEnabled))
            {
                writer.WritePropertyName("default_when_enabled"u8);
                writer.WriteStringValue(DefaultWhenEnabled);
            }
            if (Optional.IsCollectionDefined(Percentile))
            {
                writer.WritePropertyName("percentile"u8);
                writer.WriteStartArray();
                foreach (PercentileAllocation item in Percentile)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(User))
            {
                writer.WritePropertyName("user"u8);
                writer.WriteStartArray();
                foreach (UserAllocation item in User)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Group))
            {
                writer.WritePropertyName("group"u8);
                writer.WriteStartArray();
                foreach (GroupAllocation item in Group)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Seed))
            {
                writer.WritePropertyName("seed"u8);
                writer.WriteStringValue(Seed);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        Allocation IJsonModel<Allocation>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual Allocation JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<Allocation>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Allocation)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAllocation(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static Allocation DeserializeAllocation(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string defaultWhenDisabled = default;
            string defaultWhenEnabled = default;
            IList<PercentileAllocation> percentile = default;
            IList<UserAllocation> user = default;
            IList<GroupAllocation> @group = default;
            string seed = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("default_when_disabled"u8))
                {
                    defaultWhenDisabled = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("default_when_enabled"u8))
                {
                    defaultWhenEnabled = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("percentile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PercentileAllocation> array = new List<PercentileAllocation>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(PercentileAllocation.DeserializePercentileAllocation(item, options));
                    }
                    percentile = array;
                    continue;
                }
                if (prop.NameEquals("user"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<UserAllocation> array = new List<UserAllocation>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(UserAllocation.DeserializeUserAllocation(item, options));
                    }
                    user = array;
                    continue;
                }
                if (prop.NameEquals("group"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<GroupAllocation> array = new List<GroupAllocation>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(GroupAllocation.DeserializeGroupAllocation(item, options));
                    }
                    @group = array;
                    continue;
                }
                if (prop.NameEquals("seed"u8))
                {
                    seed = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new Allocation(
                defaultWhenDisabled,
                defaultWhenEnabled,
                percentile ?? new ChangeTrackingList<PercentileAllocation>(),
                user ?? new ChangeTrackingList<UserAllocation>(),
                @group ?? new ChangeTrackingList<GroupAllocation>(),
                seed,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<Allocation>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<Allocation>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureDataAppConfigurationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(Allocation)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        Allocation IPersistableModel<Allocation>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual Allocation PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<Allocation>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAllocation(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(Allocation)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<Allocation>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
