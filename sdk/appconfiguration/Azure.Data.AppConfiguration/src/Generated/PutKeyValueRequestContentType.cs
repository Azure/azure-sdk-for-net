// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Data.AppConfiguration
{
    internal readonly partial struct PutKeyValueRequestContentType : IEquatable<PutKeyValueRequestContentType>
    {
        private readonly string _value;
        private const string ApplicationVndMicrosoftAppconfigKvJsonValue = "application/vnd.microsoft.appconfig.kv+json";
        private const string ApplicationVndMicrosoftAppconfigKvsetJsonValue = "application/vnd.microsoft.appconfig.kvset+json";
        private const string ApplicationJsonValue = "application/json";
        private const string TextJsonValue = "text/json";
        private const string ApplicationJsonValue0 = "application/*+json";
        private const string ApplicationJsonPatchJsonValue = "application/json-patch+json";

        /// <summary> Initializes a new instance of <see cref="PutKeyValueRequestContentType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PutKeyValueRequestContentType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Gets the ApplicationVndMicrosoftAppconfigKvJson. </summary>
        public static PutKeyValueRequestContentType ApplicationVndMicrosoftAppconfigKvJson { get; } = new PutKeyValueRequestContentType(ApplicationVndMicrosoftAppconfigKvJsonValue);

        /// <summary> Gets the ApplicationVndMicrosoftAppconfigKvsetJson. </summary>
        public static PutKeyValueRequestContentType ApplicationVndMicrosoftAppconfigKvsetJson { get; } = new PutKeyValueRequestContentType(ApplicationVndMicrosoftAppconfigKvsetJsonValue);

        /// <summary> Gets the TextJson. </summary>
        public static PutKeyValueRequestContentType TextJson { get; } = new PutKeyValueRequestContentType(TextJsonValue);

        /// <summary> Gets the ApplicationJsonPatchJson. </summary>
        public static PutKeyValueRequestContentType ApplicationJsonPatchJson { get; } = new PutKeyValueRequestContentType(ApplicationJsonPatchJsonValue);

        /// <summary> Determines if two <see cref="PutKeyValueRequestContentType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(PutKeyValueRequestContentType left, PutKeyValueRequestContentType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="PutKeyValueRequestContentType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(PutKeyValueRequestContentType left, PutKeyValueRequestContentType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="PutKeyValueRequestContentType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator PutKeyValueRequestContentType(string value) => new PutKeyValueRequestContentType(value);

        /// <summary> Converts a string to a <see cref="PutKeyValueRequestContentType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator PutKeyValueRequestContentType?(string value) => value == null ? null : new PutKeyValueRequestContentType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PutKeyValueRequestContentType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(PutKeyValueRequestContentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
