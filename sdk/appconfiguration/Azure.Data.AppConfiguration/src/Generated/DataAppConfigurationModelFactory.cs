// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Data.AppConfiguration
{
    /// <summary> Model factory for models. </summary>
    public static partial class DataAppConfigurationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="AppConfiguration.Key"/>. </summary>
        /// <param name="name"> The name of the key. </param>
        /// <returns> A new <see cref="AppConfiguration.Key"/> instance for mocking. </returns>
        public static Key Key(string name = null)
        {
            return new Key(name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppConfiguration.KeyValue"/>. </summary>
        /// <param name="key"> The key of the key-value. </param>
        /// <param name="label"> The label the key-value belongs to. </param>
        /// <param name="contentType"> The content type of the value stored within the key-value. </param>
        /// <param name="value"> The value of the key-value. </param>
        /// <param name="lastModified"> A date representing the last time the key-value was modified. </param>
        /// <param name="tags"> The tags of the key-value. </param>
        /// <param name="locked"> Indicates whether the key-value is locked. </param>
        /// <param name="etag"> A value representing the current state of the resource. </param>
        /// <returns> A new <see cref="AppConfiguration.KeyValue"/> instance for mocking. </returns>
        public static KeyValue KeyValue(string key = null, string label = null, string contentType = null, string value = null, DateTimeOffset? lastModified = null, IDictionary<string, string> tags = null, bool? locked = null, string etag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new KeyValue(
                key,
                label,
                contentType,
                value,
                lastModified,
                tags,
                locked,
                etag,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppConfiguration.Snapshot"/>. </summary>
        /// <param name="name"> The name of the snapshot. </param>
        /// <param name="status"> The current status of the snapshot. </param>
        /// <param name="filters"> A list of filters used to filter the key-values included in the snapshot. </param>
        /// <param name="compositionType">
        /// The composition type describes how the key-values within the snapshot are
        /// composed. The 'key' composition type ensures there are no two key-values
        /// containing the same key. The 'key_label' composition type ensures there are no
        /// two key-values containing the same key and label.
        /// </param>
        /// <param name="created"> The time that the snapshot was created. </param>
        /// <param name="expires"> The time that the snapshot will expire. </param>
        /// <param name="retentionPeriod">
        /// The amount of time, in seconds, that a snapshot will remain in the archived
        /// state before expiring. This property is only writable during the creation of a
        /// snapshot. If not specified, the default lifetime of key-value revisions will be
        /// used.
        /// </param>
        /// <param name="size"> The size in bytes of the snapshot. </param>
        /// <param name="itemsCount"> The amount of key-values in the snapshot. </param>
        /// <param name="tags"> The tags of the snapshot. </param>
        /// <param name="etag"> A value representing the current state of the snapshot. </param>
        /// <returns> A new <see cref="AppConfiguration.Snapshot"/> instance for mocking. </returns>
        public static Snapshot Snapshot(string name = null, ConfigurationSnapshotStatus? status = null, IEnumerable<KeyValueFilter> filters = null, CompositionType? compositionType = null, DateTimeOffset? created = null, DateTimeOffset? expires = null, long? retentionPeriod = null, long? size = null, long? itemsCount = null, IDictionary<string, string> tags = null, string etag = null)
        {
            filters ??= new List<KeyValueFilter>();
            tags ??= new Dictionary<string, string>();

            return new Snapshot(
                name,
                status,
                filters?.ToList(),
                compositionType,
                created,
                expires,
                retentionPeriod,
                size,
                itemsCount,
                tags,
                etag,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppConfiguration.OperationDetails"/>. </summary>
        /// <param name="id"> The unique id of the operation. </param>
        /// <param name="status"> The current status of the operation. </param>
        /// <param name="error">
        /// An error, available when the status is `Failed`, describing why the operation
        /// failed.
        /// </param>
        /// <returns> A new <see cref="AppConfiguration.OperationDetails"/> instance for mocking. </returns>
        public static OperationDetails OperationDetails(string id = null, OperationState status = default, ResponseError error = null)
        {
            return new OperationDetails(id, status, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppConfiguration.Label"/>. </summary>
        /// <param name="name"> The name of the label. </param>
        /// <returns> A new <see cref="AppConfiguration.Label"/> instance for mocking. </returns>
        public static Label Label(string name = null)
        {
            return new Label(name, serializedAdditionalRawData: null);
        }
    }
}
