// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Data.AppConfiguration
{
    /// <summary> Defines how to allocate variants based on context. </summary>
    public partial class FeatureFlagAllocation
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="FeatureFlagAllocation"/>. </summary>
        public FeatureFlagAllocation()
        {
            Percentile = new ChangeTrackingList<PercentileAllocation>();
            User = new ChangeTrackingList<UserAllocation>();
            Group = new ChangeTrackingList<GroupAllocation>();
        }

        /// <summary> Initializes a new instance of <see cref="FeatureFlagAllocation"/>. </summary>
        /// <param name="defaultWhenDisabled"> The default variant to use when disabled. </param>
        /// <param name="defaultWhenEnabled"> The default variant to use when enabled but not allocated. </param>
        /// <param name="percentile"> Allocates percentiles to variants. </param>
        /// <param name="user"> Allocates users to variants. </param>
        /// <param name="group"> Allocates groups to variants. </param>
        /// <param name="seed"> The seed used for random allocation. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal FeatureFlagAllocation(string defaultWhenDisabled, string defaultWhenEnabled, IList<PercentileAllocation> percentile, IList<UserAllocation> user, IList<GroupAllocation> @group, string seed, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            DefaultWhenDisabled = defaultWhenDisabled;
            DefaultWhenEnabled = defaultWhenEnabled;
            Percentile = percentile;
            User = user;
            Group = @group;
            Seed = seed;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The default variant to use when disabled. </summary>
        public string DefaultWhenDisabled { get; set; }

        /// <summary> The default variant to use when enabled but not allocated. </summary>
        public string DefaultWhenEnabled { get; set; }

        /// <summary> Allocates percentiles to variants. </summary>
        public IList<PercentileAllocation> Percentile { get; }

        /// <summary> Allocates users to variants. </summary>
        public IList<UserAllocation> User { get; }

        /// <summary> Allocates groups to variants. </summary>
        public IList<GroupAllocation> Group { get; }

        /// <summary> The seed used for random allocation. </summary>
        public string Seed { get; set; }
    }
}
