// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Data.AppConfiguration
{
    /// <summary> A feature flag. </summary>
    public partial class FeatureFlag
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="FeatureFlag"/>. </summary>
        public FeatureFlag()
        {
            Variants = new ChangeTrackingList<Variant>();
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="FeatureFlag"/>. </summary>
        /// <param name="name"> The name of the feature flag. </param>
        /// <param name="alias"> The alias of the feature flag. </param>
        /// <param name="label"> The label the feature flag belongs to. </param>
        /// <param name="description"> The description of the feature flag. </param>
        /// <param name="enabled"> The enabled state of the feature flag. </param>
        /// <param name="conditions"> The conditions of the feature flag. </param>
        /// <param name="variants"> The variants of the feature flag. </param>
        /// <param name="allocation"> The allocation of the feature flag. </param>
        /// <param name="telemetry"> The telemetry settings of the feature flag. </param>
        /// <param name="tags"> The tags of the feature flag. </param>
        /// <param name="locked"> Indicates whether the feature flag is locked. </param>
        /// <param name="lastModified"> A date representing the last time the feature flag was modified. </param>
        /// <param name="etag"> A value representing the current state of the resource. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal FeatureFlag(string name, string @alias, string label, string description, bool? enabled, Conditions conditions, IList<Variant> variants, Allocation allocation, Telemetry telemetry, IDictionary<string, string> tags, bool? locked, DateTimeOffset? lastModified, string etag, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Name = name;
            Alias = @alias;
            Label = label;
            Description = description;
            Enabled = enabled;
            Conditions = conditions;
            Variants = variants;
            Allocation = allocation;
            Telemetry = telemetry;
            Tags = tags;
            Locked = locked;
            LastModified = lastModified;
            Etag = etag;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The name of the feature flag. </summary>
        public string Name { get; }

        /// <summary> The alias of the feature flag. </summary>
        public string Alias { get; set; }

        /// <summary> The label the feature flag belongs to. </summary>
        public string Label { get; set; }

        /// <summary> The description of the feature flag. </summary>
        public string Description { get; set; }

        /// <summary> The enabled state of the feature flag. </summary>
        public bool? Enabled { get; set; }

        /// <summary> The conditions of the feature flag. </summary>
        public Conditions Conditions { get; set; }

        /// <summary> The variants of the feature flag. </summary>
        public IList<Variant> Variants { get; }

        /// <summary> The allocation of the feature flag. </summary>
        public Allocation Allocation { get; set; }

        /// <summary> The telemetry settings of the feature flag. </summary>
        public Telemetry Telemetry { get; set; }

        /// <summary> The tags of the feature flag. </summary>
        public IDictionary<string, string> Tags { get; }

        /// <summary> Indicates whether the feature flag is locked. </summary>
        public bool? Locked { get; set; }

        /// <summary> A date representing the last time the feature flag was modified. </summary>
        public DateTimeOffset? LastModified { get; }

        /// <summary> A value representing the current state of the resource. </summary>
        public string Etag { get; }
    }
}
