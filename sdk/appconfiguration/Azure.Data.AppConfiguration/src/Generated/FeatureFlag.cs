// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;

namespace Azure.Data.AppConfiguration
{
    /// <summary> A feature flag. </summary>
    public partial class FeatureFlag
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="FeatureFlag"/>. </summary>
        /// <param name="name"> The name of the feature flag. </param>
        /// <param name="enabled"> The enabled state of the feature flag. </param>
        /// <param name="label"> The label the feature flag belongs to. </param>
        /// <param name="description"> The description of the feature flag. </param>
        /// <param name="alias"> The alias of the feature flag. </param>
        /// <param name="conditions"> The conditions of the feature flag. </param>
        /// <param name="variants"> A list of variant definitions for the feature flag. </param>
        /// <param name="allocation"> The allocation of the feature flag. </param>
        /// <param name="telemetry"> The telemetry settings of the feature flag. </param>
        /// <param name="tags">
        /// A dictionary of tags used to assign additional properties to a feature flag.
        ///     These can be used to indicate how a feature flag may be applied.
        /// </param>
        /// <param name="isReadOnly">
        /// A value indicating whether the feature flag is read only.
        ///     A read only feature flag may not be modified until it is made writable.
        /// </param>
        /// <param name="lastModified"> The last time a modifying operation was performed on the given feature flag. </param>
        /// <param name="eTag"> An ETag indicating the state of a feature flag within a configuration store. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal FeatureFlag(string name, bool? enabled, string label, string description, string @alias, FeatureFlagConditions conditions, IList<FeatureFlagVariantDefinition> variants, FeatureFlagAllocation allocation, FeatureFlagTelemetryConfiguration telemetry, IDictionary<string, string> tags, bool? isReadOnly, DateTimeOffset? lastModified, ETag eTag, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Name = name;
            Enabled = enabled;
            Label = label;
            Description = description;
            Alias = @alias;
            Conditions = conditions;
            Variants = variants;
            Allocation = allocation;
            Telemetry = telemetry;
            Tags = tags;
            IsReadOnly = isReadOnly;
            LastModified = lastModified;
            ETag = eTag;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The name of the feature flag. </summary>
        public string Name { get; }

        /// <summary> The enabled state of the feature flag. </summary>
        public bool? Enabled { get; set; }

        /// <summary> The label the feature flag belongs to. </summary>
        public string Label { get; set; }

        /// <summary> The description of the feature flag. </summary>
        public string Description { get; set; }

        /// <summary> The alias of the feature flag. </summary>
        public string Alias { get; set; }

        /// <summary> The conditions of the feature flag. </summary>
        public FeatureFlagConditions Conditions { get; set; }

        /// <summary> The allocation of the feature flag. </summary>
        public FeatureFlagAllocation Allocation { get; set; }

        /// <summary> The telemetry settings of the feature flag. </summary>
        public FeatureFlagTelemetryConfiguration Telemetry { get; set; }
    }
}
