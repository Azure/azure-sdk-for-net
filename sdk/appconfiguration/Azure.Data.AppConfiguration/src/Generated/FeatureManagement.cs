// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Data.AppConfiguration
{
    internal partial class FeatureManagement
    {
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of FeatureManagement for mocking. </summary>
        protected FeatureManagement()
        {
        }

        /// <summary> Initializes a new instance of FeatureManagement. </summary>
        /// <param name="clientDiagnostics"> The ClientDiagnostics is used to provide tracing support for the client library. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="apiVersion"></param>
        internal FeatureManagement(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _endpoint = endpoint;
            Pipeline = pipeline;
            _apiVersion = apiVersion;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Gets a list of feature flags.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter used to match feature flag names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetFeatureFlags(string name, string label, string syncToken, string after, string acceptDatetime, IEnumerable<FeatureFlagFields> @select, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.GetFeatureFlags");
            scope.Start();
            try
            {
                return new FeatureManagementGetFeatureFlagsCollectionResult(
                    this,
                    name,
                    label,
                    syncToken,
                    after,
                    acceptDatetime,
                    @select,
                    matchConditions,
                    tags,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a list of feature flags.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter used to match feature flag names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetFeatureFlagsAsync(string name, string label, string syncToken, string after, string acceptDatetime, IEnumerable<FeatureFlagFields> @select, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.GetFeatureFlags");
            scope.Start();
            try
            {
                return new FeatureManagementGetFeatureFlagsAsyncCollectionResult(
                    this,
                    name,
                    label,
                    syncToken,
                    after,
                    acceptDatetime,
                    @select,
                    matchConditions,
                    tags,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of feature flags. </summary>
        /// <param name="name"> A filter used to match feature flag names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<FeatureFlag> GetFeatureFlags(string name = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<FeatureFlagFields> @select = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return new FeatureManagementGetFeatureFlagsCollectionResultOfT(
                this,
                name,
                label,
                syncToken,
                after,
                acceptDatetime,
                @select,
                matchConditions,
                tags,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Gets a list of feature flags. </summary>
        /// <param name="name"> A filter used to match feature flag names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<FeatureFlag> GetFeatureFlagsAsync(string name = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<FeatureFlagFields> @select = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return new FeatureManagementGetFeatureFlagsAsyncCollectionResultOfT(
                this,
                name,
                label,
                syncToken,
                after,
                acceptDatetime,
                @select,
                matchConditions,
                tags,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter used to match feature flag names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CheckFeatureFlags(string name, string label, string syncToken, string after, string acceptDatetime, IEnumerable<FeatureFlagFields> @select, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.CheckFeatureFlags");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckFeatureFlagsRequest(name, label, syncToken, after, acceptDatetime, @select, matchConditions, tags, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter used to match feature flag names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CheckFeatureFlagsAsync(string name, string label, string syncToken, string after, string acceptDatetime, IEnumerable<FeatureFlagFields> @select, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.CheckFeatureFlags");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckFeatureFlagsRequest(name, label, syncToken, after, acceptDatetime, @select, matchConditions, tags, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> A filter used to match feature flag names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CheckFeatureFlags(string name = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<FeatureFlagFields> @select = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return CheckFeatureFlags(name, label, syncToken, after, acceptDatetime, @select, matchConditions, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> A filter used to match feature flag names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CheckFeatureFlagsAsync(string name = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<FeatureFlagFields> @select = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return await CheckFeatureFlagsAsync(name, label, syncToken, after, acceptDatetime, @select, matchConditions, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets a single feature flag.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the feature flag. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetFeatureFlag(string name, string label, IEnumerable<FeatureFlagFields> @select, string syncToken, string acceptDatetime, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.GetFeatureFlag");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreateGetFeatureFlagRequest(name, label, @select, syncToken, acceptDatetime, matchConditions, tags, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a single feature flag.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the feature flag. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetFeatureFlagAsync(string name, string label, IEnumerable<FeatureFlagFields> @select, string syncToken, string acceptDatetime, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.GetFeatureFlag");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreateGetFeatureFlagRequest(name, label, @select, syncToken, acceptDatetime, matchConditions, tags, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a single feature flag. </summary>
        /// <param name="name"> The name of the feature flag. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<FeatureFlag> GetFeatureFlag(string name, string label = default, IEnumerable<FeatureFlagFields> @select = default, string syncToken = default, string acceptDatetime = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            Response result = GetFeatureFlag(name, label, @select, syncToken, acceptDatetime, matchConditions, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((FeatureFlag)result, result);
        }

        /// <summary> Gets a single feature flag. </summary>
        /// <param name="name"> The name of the feature flag. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<FeatureFlag>> GetFeatureFlagAsync(string name, string label = default, IEnumerable<FeatureFlagFields> @select = default, string syncToken = default, string acceptDatetime = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            Response result = await GetFeatureFlagAsync(name, label, @select, syncToken, acceptDatetime, matchConditions, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((FeatureFlag)result, result);
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the feature flag to retrieve. </param>
        /// <param name="label"> The label of the feature flag to retrieve. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CheckFeatureFlag(string name, string label, string syncToken, string acceptDatetime, MatchConditions matchConditions, IEnumerable<FeatureFlagFields> @select, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.CheckFeatureFlag");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreateCheckFeatureFlagRequest(name, label, syncToken, acceptDatetime, matchConditions, @select, tags, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the feature flag to retrieve. </param>
        /// <param name="label"> The label of the feature flag to retrieve. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CheckFeatureFlagAsync(string name, string label, string syncToken, string acceptDatetime, MatchConditions matchConditions, IEnumerable<FeatureFlagFields> @select, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.CheckFeatureFlag");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreateCheckFeatureFlagRequest(name, label, syncToken, acceptDatetime, matchConditions, @select, tags, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> The name of the feature flag to retrieve. </param>
        /// <param name="label"> The label of the feature flag to retrieve. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CheckFeatureFlag(string name, string label = default, string syncToken = default, string acceptDatetime = default, MatchConditions matchConditions = default, IEnumerable<FeatureFlagFields> @select = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            return CheckFeatureFlag(name, label, syncToken, acceptDatetime, matchConditions, @select, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> The name of the feature flag to retrieve. </param>
        /// <param name="label"> The label of the feature flag to retrieve. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CheckFeatureFlagAsync(string name, string label = default, string syncToken = default, string acceptDatetime = default, MatchConditions matchConditions = default, IEnumerable<FeatureFlagFields> @select = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            return await CheckFeatureFlagAsync(name, label, syncToken, acceptDatetime, matchConditions, @select, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Creates a feature flag.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the feature flag to create. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="label"> The label of the feature flag to create. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response PutFeatureFlag(string name, RequestContent content, string label = default, string syncToken = default, MatchConditions matchConditions = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.PutFeatureFlag");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreatePutFeatureFlagRequest(name, content, label, syncToken, matchConditions, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a feature flag.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the feature flag to create. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="label"> The label of the feature flag to create. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> PutFeatureFlagAsync(string name, RequestContent content, string label = default, string syncToken = default, MatchConditions matchConditions = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.PutFeatureFlag");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreatePutFeatureFlagRequest(name, content, label, syncToken, matchConditions, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a feature flag. </summary>
        /// <param name="name"> The name of the feature flag to create. </param>
        /// <param name="entity"> The feature flag to create. </param>
        /// <param name="label"> The label of the feature flag to create. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<FeatureFlag> PutFeatureFlag(string name, FeatureFlag entity = default, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            Response result = PutFeatureFlag(name, entity, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((FeatureFlag)result, result);
        }

        /// <summary> Creates a feature flag. </summary>
        /// <param name="name"> The name of the feature flag to create. </param>
        /// <param name="entity"> The feature flag to create. </param>
        /// <param name="label"> The label of the feature flag to create. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<FeatureFlag>> PutFeatureFlagAsync(string name, FeatureFlag entity = default, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            Response result = await PutFeatureFlagAsync(name, entity, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((FeatureFlag)result, result);
        }

        /// <summary>
        /// [Protocol Method] Deletes a feature flag.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the feature flag to delete. </param>
        /// <param name="label"> The label of the feature flag to delete. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="ifMatch">
        /// Used to perform an operation only if the targeted resource's etag matches the
        /// value provided.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteFeatureFlag(string name, string label, string syncToken, ETag? ifMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.DeleteFeatureFlag");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreateDeleteFeatureFlagRequest(name, label, syncToken, ifMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Deletes a feature flag.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the feature flag to delete. </param>
        /// <param name="label"> The label of the feature flag to delete. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="ifMatch">
        /// Used to perform an operation only if the targeted resource's etag matches the
        /// value provided.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteFeatureFlagAsync(string name, string label, string syncToken, ETag? ifMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.DeleteFeatureFlag");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreateDeleteFeatureFlagRequest(name, label, syncToken, ifMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a feature flag. </summary>
        /// <param name="name"> The name of the feature flag to delete. </param>
        /// <param name="label"> The label of the feature flag to delete. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="ifMatch">
        /// Used to perform an operation only if the targeted resource's etag matches the
        /// value provided.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<FeatureFlag> DeleteFeatureFlag(string name, string label = default, string syncToken = default, ETag? ifMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            Response result = DeleteFeatureFlag(name, label, syncToken, ifMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((FeatureFlag)result, result);
        }

        /// <summary> Deletes a feature flag. </summary>
        /// <param name="name"> The name of the feature flag to delete. </param>
        /// <param name="label"> The label of the feature flag to delete. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="ifMatch">
        /// Used to perform an operation only if the targeted resource's etag matches the
        /// value provided.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<FeatureFlag>> DeleteFeatureFlagAsync(string name, string label = default, string syncToken = default, ETag? ifMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            Response result = await DeleteFeatureFlagAsync(name, label, syncToken, ifMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((FeatureFlag)result, result);
        }

        /// <summary>
        /// [Protocol Method] Gets a list of feature flag revisions.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter used to match names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetFeatureFlagRevisions(string name, string label, string after, IEnumerable<FeatureFlagFields> @select, IEnumerable<string> tags, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.GetFeatureFlagRevisions");
            scope.Start();
            try
            {
                return new FeatureManagementGetFeatureFlagRevisionsCollectionResult(
                    this,
                    name,
                    label,
                    after,
                    @select,
                    tags,
                    syncToken,
                    matchConditions,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a list of feature flag revisions.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter used to match names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetFeatureFlagRevisionsAsync(string name, string label, string after, IEnumerable<FeatureFlagFields> @select, IEnumerable<string> tags, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.GetFeatureFlagRevisions");
            scope.Start();
            try
            {
                return new FeatureManagementGetFeatureFlagRevisionsAsyncCollectionResult(
                    this,
                    name,
                    label,
                    after,
                    @select,
                    tags,
                    syncToken,
                    matchConditions,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of feature flag revisions. </summary>
        /// <param name="name"> A filter used to match names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<FeatureFlag> GetFeatureFlagRevisions(string name = default, string label = default, string after = default, IEnumerable<FeatureFlagFields> @select = default, IEnumerable<string> tags = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            return new FeatureManagementGetFeatureFlagRevisionsCollectionResultOfT(
                this,
                name,
                label,
                after,
                @select,
                tags,
                syncToken,
                matchConditions,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Gets a list of feature flag revisions. </summary>
        /// <param name="name"> A filter used to match names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<FeatureFlag> GetFeatureFlagRevisionsAsync(string name = default, string label = default, string after = default, IEnumerable<FeatureFlagFields> @select = default, IEnumerable<string> tags = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            return new FeatureManagementGetFeatureFlagRevisionsAsyncCollectionResultOfT(
                this,
                name,
                label,
                after,
                @select,
                tags,
                syncToken,
                matchConditions,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter used to match names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CheckFeatureFlagRevisions(string name, string label, string after, IEnumerable<FeatureFlagFields> @select, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.CheckFeatureFlagRevisions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckFeatureFlagRevisionsRequest(name, label, after, @select, tags, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter used to match names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CheckFeatureFlagRevisionsAsync(string name, string label, string after, IEnumerable<FeatureFlagFields> @select, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.CheckFeatureFlagRevisions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckFeatureFlagRevisionsRequest(name, label, after, @select, tags, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> A filter used to match names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CheckFeatureFlagRevisions(string name = default, string label = default, string after = default, IEnumerable<FeatureFlagFields> @select = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return CheckFeatureFlagRevisions(name, label, after, @select, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> A filter used to match names. </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CheckFeatureFlagRevisionsAsync(string name = default, string label = default, string after = default, IEnumerable<FeatureFlagFields> @select = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return await CheckFeatureFlagRevisionsAsync(name, label, after, @select, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Locks a feature flag.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the feature flag to lock. </param>
        /// <param name="label"> The label, if any, of the feature flag to lock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response PutFeatureFlagLock(string name, string label, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.PutFeatureFlagLock");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreatePutFeatureFlagLockRequest(name, label, syncToken, matchConditions, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Locks a feature flag.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the feature flag to lock. </param>
        /// <param name="label"> The label, if any, of the feature flag to lock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> PutFeatureFlagLockAsync(string name, string label, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.PutFeatureFlagLock");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreatePutFeatureFlagLockRequest(name, label, syncToken, matchConditions, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Locks a feature flag. </summary>
        /// <param name="name"> The name of the feature flag to lock. </param>
        /// <param name="label"> The label, if any, of the feature flag to lock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<FeatureFlag> PutFeatureFlagLock(string name, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            Response result = PutFeatureFlagLock(name, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((FeatureFlag)result, result);
        }

        /// <summary> Locks a feature flag. </summary>
        /// <param name="name"> The name of the feature flag to lock. </param>
        /// <param name="label"> The label, if any, of the feature flag to lock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<FeatureFlag>> PutFeatureFlagLockAsync(string name, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            Response result = await PutFeatureFlagLockAsync(name, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((FeatureFlag)result, result);
        }

        /// <summary>
        /// [Protocol Method] Unlocks a feature flag.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The key of the feature flag to unlock. </param>
        /// <param name="label"> The label, if any, of the feature flag to unlock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteFeatureFlagLock(string name, string label, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.DeleteFeatureFlagLock");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreateDeleteFeatureFlagLockRequest(name, label, syncToken, matchConditions, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Unlocks a feature flag.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The key of the feature flag to unlock. </param>
        /// <param name="label"> The label, if any, of the feature flag to unlock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteFeatureFlagLockAsync(string name, string label, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("FeatureManagement.DeleteFeatureFlagLock");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreateDeleteFeatureFlagLockRequest(name, label, syncToken, matchConditions, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Unlocks a feature flag. </summary>
        /// <param name="name"> The key of the feature flag to unlock. </param>
        /// <param name="label"> The label, if any, of the feature flag to unlock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<FeatureFlag> DeleteFeatureFlagLock(string name, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            Response result = DeleteFeatureFlagLock(name, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((FeatureFlag)result, result);
        }

        /// <summary> Unlocks a feature flag. </summary>
        /// <param name="name"> The key of the feature flag to unlock. </param>
        /// <param name="label"> The label, if any, of the feature flag to unlock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<FeatureFlag>> DeleteFeatureFlagLockAsync(string name, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            Response result = await DeleteFeatureFlagLockAsync(name, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((FeatureFlag)result, result);
        }
    }
}
