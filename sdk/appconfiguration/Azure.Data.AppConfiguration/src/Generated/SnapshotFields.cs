// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Data.AppConfiguration
{
    /// <summary> Snapshot fields. </summary>
    public readonly partial struct SnapshotFields : IEquatable<SnapshotFields>
    {
        private readonly string _value;
        /// <summary> Name field. </summary>
        private const string NameValue = "name";
        /// <summary> Status field. </summary>
        private const string StatusValue = "status";
        /// <summary> Filters field. </summary>
        private const string FiltersValue = "filters";
        /// <summary> Composition type field. </summary>
        private const string CompositionTypeValue = "composition_type";
        /// <summary> Created field. </summary>
        private const string CreatedValue = "created";
        /// <summary> Expires field. </summary>
        private const string ExpiresValue = "expires";
        /// <summary> Retention period field. </summary>
        private const string RetentionPeriodValue = "retention_period";
        /// <summary> Size field. </summary>
        private const string SizeValue = "size";
        /// <summary> Items count field. </summary>
        private const string ItemsCountValue = "items_count";
        /// <summary> Tags field. </summary>
        private const string TagsValue = "tags";
        /// <summary> Etag field. </summary>
        private const string EtagValue = "etag";

        /// <summary> Initializes a new instance of <see cref="SnapshotFields"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SnapshotFields(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Name field. </summary>
        public static SnapshotFields Name { get; } = new SnapshotFields(NameValue);

        /// <summary> Status field. </summary>
        public static SnapshotFields Status { get; } = new SnapshotFields(StatusValue);

        /// <summary> Filters field. </summary>
        public static SnapshotFields Filters { get; } = new SnapshotFields(FiltersValue);

        /// <summary> Tags field. </summary>
        public static SnapshotFields Tags { get; } = new SnapshotFields(TagsValue);

        /// <summary> Determines if two <see cref="SnapshotFields"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(SnapshotFields left, SnapshotFields right) => left.Equals(right);

        /// <summary> Determines if two <see cref="SnapshotFields"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(SnapshotFields left, SnapshotFields right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="SnapshotFields"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator SnapshotFields(string value) => new SnapshotFields(value);

        /// <summary> Converts a string to a <see cref="SnapshotFields"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator SnapshotFields?(string value) => value == null ? null : new SnapshotFields(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SnapshotFields other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(SnapshotFields other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
