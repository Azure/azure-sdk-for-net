// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Data.AppConfiguration
{
    internal static partial class FeatureFlagFieldsExtensions
    {
        /// <param name="value"> The value to serialize. </param>
        public static string ToSerialString(this FeatureFlagFields value) => value switch
        {
            FeatureFlagFields.Name => "name",
            FeatureFlagFields.Enabled => "enabled",
            FeatureFlagFields.Label => "label",
            FeatureFlagFields.Description => "description",
            FeatureFlagFields.Alias => "alias",
            FeatureFlagFields.Conditions => "conditions",
            FeatureFlagFields.Variants => "variants",
            FeatureFlagFields.Allocation => "allocation",
            FeatureFlagFields.Telemetry => "telemetry",
            FeatureFlagFields.Tags => "tags",
            FeatureFlagFields.LastModified => "last_modified",
            FeatureFlagFields.ETag => "etag",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown FeatureFlagFields value.")
        };

        /// <param name="value"> The value to deserialize. </param>
        public static FeatureFlagFields ToFeatureFlagFields(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "name"))
            {
                return FeatureFlagFields.Name;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "enabled"))
            {
                return FeatureFlagFields.Enabled;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "label"))
            {
                return FeatureFlagFields.Label;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "description"))
            {
                return FeatureFlagFields.Description;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "alias"))
            {
                return FeatureFlagFields.Alias;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "conditions"))
            {
                return FeatureFlagFields.Conditions;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "variants"))
            {
                return FeatureFlagFields.Variants;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "allocation"))
            {
                return FeatureFlagFields.Allocation;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "telemetry"))
            {
                return FeatureFlagFields.Telemetry;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "tags"))
            {
                return FeatureFlagFields.Tags;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "last_modified"))
            {
                return FeatureFlagFields.LastModified;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "etag"))
            {
                return FeatureFlagFields.ETag;
            }
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown FeatureFlagFields value.");
        }
    }
}
