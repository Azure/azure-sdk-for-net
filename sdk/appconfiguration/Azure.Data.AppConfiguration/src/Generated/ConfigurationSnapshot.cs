// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace Azure.Data.AppConfiguration
{
    /// <summary> A snapshot is a named, immutable subset of an App Configuration store's key-values. </summary>
    public partial class ConfigurationSnapshot
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ConfigurationSnapshot"/>. </summary>
        /// <param name="filters"> A list of filters used to filter the key-values included in the snapshot. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filters"/> is null. </exception>
        public ConfigurationSnapshot(IEnumerable<ConfigurationSettingsFilter> filters)
        {
            Argument.AssertNotNull(filters, nameof(filters));

            Filters = filters.ToList();
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="ConfigurationSnapshot"/>. </summary>
        /// <param name="name"> The name of the snapshot. </param>
        /// <param name="status"> The current status of the snapshot. </param>
        /// <param name="filters"> A list of filters used to filter the key-values included in the snapshot. </param>
        /// <param name="snapshotComposition"> The composition type describes how the key-values within the snapshot are composed. The 'key' composition type ensures there are no two key-values containing the same key. The 'key_label' composition type ensures there are no two key-values containing the same key and label. </param>
        /// <param name="createdOn"> The time that the snapshot was created. </param>
        /// <param name="expiresOn"> The time that the snapshot will expire. </param>
        /// <param name="retentionPeriod"> The amount of time that a snapshot will remain in the archived state before expiring. This property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value revisions will be used. </param>
        /// <param name="sizeInBytes"> The size in bytes of the snapshot. </param>
        /// <param name="itemCount"> The amount of key-values in the snapshot. </param>
        /// <param name="tags"> The tags of the snapshot. </param>
        /// <param name="eTag"> A value representing the current state of the snapshot. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ConfigurationSnapshot(string name, ConfigurationSnapshotStatus? status, IList<ConfigurationSettingsFilter> filters, SnapshotComposition? snapshotComposition, DateTimeOffset? createdOn, DateTimeOffset? expiresOn, TimeSpan? retentionPeriod, long? sizeInBytes, long? itemCount, IDictionary<string, string> tags, ETag eTag, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Name = name;
            Status = status;
            Filters = filters;
            SnapshotComposition = snapshotComposition;
            CreatedOn = createdOn;
            ExpiresOn = expiresOn;
            RetentionPeriod = retentionPeriod;
            SizeInBytes = sizeInBytes;
            ItemCount = itemCount;
            Tags = tags;
            ETag = eTag;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }
    }
}
