<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CheckKeysAsync(string,string,string,RequestContext)">
    </member>
    <member name="CheckKeys(string,string,string,RequestContext)">
    </member>
    <member name="CheckKeyValuesAsync(string,string,string,string,IEnumerable{string},string,RequestContext)">
    </member>
    <member name="CheckKeyValues(string,string,string,string,IEnumerable{string},string,RequestContext)">
    </member>
    <member name="GetConfigurationSettingAsync(string,string,string,IEnumerable{string},MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="GetConfigurationSetting(string,string,string,IEnumerable{string},MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="SetConfigurationSettingAsync(string,RequestContent,ContentType,string,MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

Response Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="SetConfigurationSetting(string,RequestContent,ContentType,string,MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

Response Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="DeleteConfigurationSettingAsync(string,string,ETag?,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="DeleteConfigurationSetting(string,string,ETag?,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="CheckKeyValueAsync(string,string,string,IEnumerable{string},MatchConditions,RequestContext)">
    </member>
    <member name="CheckKeyValue(string,string,string,IEnumerable{string},MatchConditions,RequestContext)">
    </member>
    <member name="CheckSnapshotsAsync(string,RequestContext)">
    </member>
    <member name="CheckSnapshots(string,RequestContext)">
    </member>
    <member name="GetSnapshotAsync(string,IEnumerable{string},MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Snapshot</c>:
<code>{
  name: string, # Optional. The name of the snapshot.
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The current status of the snapshot.
  filters: [
    {
      key: string, # Required. Filters key-values by their key field.
      label: string, # Optional. Filters key-values by their label field.
    }
  ], # Required. A list of filters used to filter the key-values included in the snapshot.
  composition_type: &quot;all&quot; | &quot;group_by_key&quot;, # Optional. The composition type describes how the key-values within the snapshot are composed. The &apos;all&apos; composition type includes all key-values. The &apos;group_by_key&apos; composition type ensures there are no two key-values containing the same key.
  created: string (ISO 8601 Format), # Optional. The time that the snapshot was created.
  expires: string (ISO 8601 Format), # Optional. The time that the snapshot will expire.
  retention_period: number, # Optional. The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value revisions will be used.
  size: number, # Optional. The size in bytes of the snapshot.
  items_count: number, # Optional. The amount of key-values in the snapshot.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the snapshot.
  etag: string, # Optional. A value representing the current state of the snapshot.
}
</code>

</remarks>
    </member>
    <member name="GetSnapshot(string,IEnumerable{string},MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Snapshot</c>:
<code>{
  name: string, # Optional. The name of the snapshot.
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The current status of the snapshot.
  filters: [
    {
      key: string, # Required. Filters key-values by their key field.
      label: string, # Optional. Filters key-values by their label field.
    }
  ], # Required. A list of filters used to filter the key-values included in the snapshot.
  composition_type: &quot;all&quot; | &quot;group_by_key&quot;, # Optional. The composition type describes how the key-values within the snapshot are composed. The &apos;all&apos; composition type includes all key-values. The &apos;group_by_key&apos; composition type ensures there are no two key-values containing the same key.
  created: string (ISO 8601 Format), # Optional. The time that the snapshot was created.
  expires: string (ISO 8601 Format), # Optional. The time that the snapshot will expire.
  retention_period: number, # Optional. The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value revisions will be used.
  size: number, # Optional. The size in bytes of the snapshot.
  items_count: number, # Optional. The amount of key-values in the snapshot.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the snapshot.
  etag: string, # Optional. A value representing the current state of the snapshot.
}
</code>

</remarks>
    </member>
    <member name="UpdateSnapshotStatusAsync(string,RequestContent,MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>SnapshotUpdateParameters</c>:
<code>{
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The desired status of the snapshot.
}
</code>

Response Body:

Schema for <c>Snapshot</c>:
<code>{
  name: string, # Optional. The name of the snapshot.
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The current status of the snapshot.
  filters: [
    {
      key: string, # Required. Filters key-values by their key field.
      label: string, # Optional. Filters key-values by their label field.
    }
  ], # Required. A list of filters used to filter the key-values included in the snapshot.
  composition_type: &quot;all&quot; | &quot;group_by_key&quot;, # Optional. The composition type describes how the key-values within the snapshot are composed. The &apos;all&apos; composition type includes all key-values. The &apos;group_by_key&apos; composition type ensures there are no two key-values containing the same key.
  created: string (ISO 8601 Format), # Optional. The time that the snapshot was created.
  expires: string (ISO 8601 Format), # Optional. The time that the snapshot will expire.
  retention_period: number, # Optional. The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value revisions will be used.
  size: number, # Optional. The size in bytes of the snapshot.
  items_count: number, # Optional. The amount of key-values in the snapshot.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the snapshot.
  etag: string, # Optional. A value representing the current state of the snapshot.
}
</code>

</remarks>
    </member>
    <member name="UpdateSnapshotStatus(string,RequestContent,MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>SnapshotUpdateParameters</c>:
<code>{
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The desired status of the snapshot.
}
</code>

Response Body:

Schema for <c>Snapshot</c>:
<code>{
  name: string, # Optional. The name of the snapshot.
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The current status of the snapshot.
  filters: [
    {
      key: string, # Required. Filters key-values by their key field.
      label: string, # Optional. Filters key-values by their label field.
    }
  ], # Required. A list of filters used to filter the key-values included in the snapshot.
  composition_type: &quot;all&quot; | &quot;group_by_key&quot;, # Optional. The composition type describes how the key-values within the snapshot are composed. The &apos;all&apos; composition type includes all key-values. The &apos;group_by_key&apos; composition type ensures there are no two key-values containing the same key.
  created: string (ISO 8601 Format), # Optional. The time that the snapshot was created.
  expires: string (ISO 8601 Format), # Optional. The time that the snapshot will expire.
  retention_period: number, # Optional. The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value revisions will be used.
  size: number, # Optional. The size in bytes of the snapshot.
  items_count: number, # Optional. The amount of key-values in the snapshot.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the snapshot.
  etag: string, # Optional. A value representing the current state of the snapshot.
}
</code>

</remarks>
    </member>
    <member name="CheckSnapshotAsync(string,MatchConditions,RequestContext)">
    </member>
    <member name="CheckSnapshot(string,MatchConditions,RequestContext)">
    </member>
    <member name="CheckLabelsAsync(string,string,string,IEnumerable{string},RequestContext)">
    </member>
    <member name="CheckLabels(string,string,string,IEnumerable{string},RequestContext)">
    </member>
    <member name="CreateReadOnlyLockAsync(string,string,MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="CreateReadOnlyLock(string,string,MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="DeleteReadOnlyLockAsync(string,string,MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="DeleteReadOnlyLock(string,string,MatchConditions,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>KeyValue</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="CheckRevisionsAsync(string,string,string,string,IEnumerable{string},RequestContext)">
    </member>
    <member name="CheckRevisions(string,string,string,string,IEnumerable{string},RequestContext)">
    </member>
    <member name="GetOperationDetailsAsync(string,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationDetails</c>:
<code>{
  id: string, # Required. The unique id of the operation.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required. The current status of the operation
  error: {
    code: string, # Required. One of a server-defined set of error codes.
    message: string, # Required. A human-readable representation of the error.
    details: [ErrorDetail], # Optional. An array of details about specific errors that led to this reported error.
    innererror: {
      code: string, # Optional. One of a server-defined set of error codes.
      innererror: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
  }, # Optional. An error, available when the status is `Failed`, describing why the operation failed.
}
</code>

</remarks>
    </member>
    <member name="GetOperationDetails(string,RequestContext)">
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationDetails</c>:
<code>{
  id: string, # Required. The unique id of the operation.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required. The current status of the operation
  error: {
    code: string, # Required. One of a server-defined set of error codes.
    message: string, # Required. A human-readable representation of the error.
    details: [ErrorDetail], # Optional. An array of details about specific errors that led to this reported error.
    innererror: {
      code: string, # Optional. One of a server-defined set of error codes.
      innererror: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
  }, # Optional. An error, available when the status is `Failed`, describing why the operation failed.
}
</code>

</remarks>
    </member>
    <member name="GetKeysAsync(string,string,string,RequestContext)">
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>KeyListResultItems</c>:
<code>{
  name: string, # Optional. The name of the key.
}
</code>

</remarks>
    </member>
    <member name="GetKeys(string,string,string,RequestContext)">
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>KeyListResultItems</c>:
<code>{
  name: string, # Optional. The name of the key.
}
</code>

</remarks>
    </member>
    <member name="GetConfigurationSettingsAsync(string,string,string,string,IEnumerable{string},string,RequestContext)">
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>KeyValueListResultItems</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="GetConfigurationSettings(string,string,string,string,IEnumerable{string},string,RequestContext)">
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>KeyValueListResultItems</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="GetSnapshotsAsync(string,string,IEnumerable{string},IEnumerable{string},RequestContext)">
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>SnapshotListResultItems</c>:
<code>{
  name: string, # Optional. The name of the snapshot.
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The current status of the snapshot.
  filters: [
    {
      key: string, # Required. Filters key-values by their key field.
      label: string, # Optional. Filters key-values by their label field.
    }
  ], # Required. A list of filters used to filter the key-values included in the snapshot.
  composition_type: &quot;all&quot; | &quot;group_by_key&quot;, # Optional. The composition type describes how the key-values within the snapshot are composed. The &apos;all&apos; composition type includes all key-values. The &apos;group_by_key&apos; composition type ensures there are no two key-values containing the same key.
  created: string (ISO 8601 Format), # Optional. The time that the snapshot was created.
  expires: string (ISO 8601 Format), # Optional. The time that the snapshot will expire.
  retention_period: number, # Optional. The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value revisions will be used.
  size: number, # Optional. The size in bytes of the snapshot.
  items_count: number, # Optional. The amount of key-values in the snapshot.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the snapshot.
  etag: string, # Optional. A value representing the current state of the snapshot.
}
</code>

</remarks>
    </member>
    <member name="GetSnapshots(string,string,IEnumerable{string},IEnumerable{string},RequestContext)">
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>SnapshotListResultItems</c>:
<code>{
  name: string, # Optional. The name of the snapshot.
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The current status of the snapshot.
  filters: [
    {
      key: string, # Required. Filters key-values by their key field.
      label: string, # Optional. Filters key-values by their label field.
    }
  ], # Required. A list of filters used to filter the key-values included in the snapshot.
  composition_type: &quot;all&quot; | &quot;group_by_key&quot;, # Optional. The composition type describes how the key-values within the snapshot are composed. The &apos;all&apos; composition type includes all key-values. The &apos;group_by_key&apos; composition type ensures there are no two key-values containing the same key.
  created: string (ISO 8601 Format), # Optional. The time that the snapshot was created.
  expires: string (ISO 8601 Format), # Optional. The time that the snapshot will expire.
  retention_period: number, # Optional. The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value revisions will be used.
  size: number, # Optional. The size in bytes of the snapshot.
  items_count: number, # Optional. The amount of key-values in the snapshot.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the snapshot.
  etag: string, # Optional. A value representing the current state of the snapshot.
}
</code>

</remarks>
    </member>
    <member name="GetLabelsAsync(string,string,string,IEnumerable{string},RequestContext)">
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>LabelListResultItems</c>:
<code>{
  name: string, # Optional. The name of the label.
}
</code>

</remarks>
    </member>
    <member name="GetLabels(string,string,string,IEnumerable{string},RequestContext)">
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>LabelListResultItems</c>:
<code>{
  name: string, # Optional. The name of the label.
}
</code>

</remarks>
    </member>
    <member name="GetRevisionsAsync(string,string,string,string,IEnumerable{string},RequestContext)">
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>KeyValueListResultItems</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="GetRevisions(string,string,string,string,IEnumerable{string},RequestContext)">
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>KeyValueListResultItems</c>:
<code>{
  key: string, # Optional. The key of the key-value.
  label: string, # Optional. The label the key-value belongs to.
  content_type: string, # Optional. The content type of the value stored within the key-value.
  value: string, # Optional. The value of the key-value.
  last_modified: string (ISO 8601 Format), # Optional. A date representing the last time the key-value was modified.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the key-value
  locked: boolean, # Optional. Indicates whether the key-value is locked.
  etag: string, # Optional. A value representing the current state of the resource.
}
</code>

</remarks>
    </member>
    <member name="CreateSnapshotAsync(WaitUntil,string,RequestContent,ContentType,RequestContext)">
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Snapshot</c>:
<code>{
  name: string, # Optional. The name of the snapshot.
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The current status of the snapshot.
  filters: [
    {
      key: string, # Required. Filters key-values by their key field.
      label: string, # Optional. Filters key-values by their label field.
    }
  ], # Required. A list of filters used to filter the key-values included in the snapshot.
  composition_type: &quot;all&quot; | &quot;group_by_key&quot;, # Optional. The composition type describes how the key-values within the snapshot are composed. The &apos;all&apos; composition type includes all key-values. The &apos;group_by_key&apos; composition type ensures there are no two key-values containing the same key.
  created: string (ISO 8601 Format), # Optional. The time that the snapshot was created.
  expires: string (ISO 8601 Format), # Optional. The time that the snapshot will expire.
  retention_period: number, # Optional. The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value revisions will be used.
  size: number, # Optional. The size in bytes of the snapshot.
  items_count: number, # Optional. The amount of key-values in the snapshot.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the snapshot.
  etag: string, # Optional. A value representing the current state of the snapshot.
}
</code>

Response Body:

Schema for <c>Snapshot</c>:
<code>{
  name: string, # Optional. The name of the snapshot.
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The current status of the snapshot.
  filters: [
    {
      key: string, # Required. Filters key-values by their key field.
      label: string, # Optional. Filters key-values by their label field.
    }
  ], # Required. A list of filters used to filter the key-values included in the snapshot.
  composition_type: &quot;all&quot; | &quot;group_by_key&quot;, # Optional. The composition type describes how the key-values within the snapshot are composed. The &apos;all&apos; composition type includes all key-values. The &apos;group_by_key&apos; composition type ensures there are no two key-values containing the same key.
  created: string (ISO 8601 Format), # Optional. The time that the snapshot was created.
  expires: string (ISO 8601 Format), # Optional. The time that the snapshot will expire.
  retention_period: number, # Optional. The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value revisions will be used.
  size: number, # Optional. The size in bytes of the snapshot.
  items_count: number, # Optional. The amount of key-values in the snapshot.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the snapshot.
  etag: string, # Optional. A value representing the current state of the snapshot.
}
</code>

</remarks>
    </member>
    <member name="CreateSnapshot(WaitUntil,string,RequestContent,ContentType,RequestContext)">
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Snapshot</c>:
<code>{
  name: string, # Optional. The name of the snapshot.
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The current status of the snapshot.
  filters: [
    {
      key: string, # Required. Filters key-values by their key field.
      label: string, # Optional. Filters key-values by their label field.
    }
  ], # Required. A list of filters used to filter the key-values included in the snapshot.
  composition_type: &quot;all&quot; | &quot;group_by_key&quot;, # Optional. The composition type describes how the key-values within the snapshot are composed. The &apos;all&apos; composition type includes all key-values. The &apos;group_by_key&apos; composition type ensures there are no two key-values containing the same key.
  created: string (ISO 8601 Format), # Optional. The time that the snapshot was created.
  expires: string (ISO 8601 Format), # Optional. The time that the snapshot will expire.
  retention_period: number, # Optional. The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value revisions will be used.
  size: number, # Optional. The size in bytes of the snapshot.
  items_count: number, # Optional. The amount of key-values in the snapshot.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the snapshot.
  etag: string, # Optional. A value representing the current state of the snapshot.
}
</code>

Response Body:

Schema for <c>Snapshot</c>:
<code>{
  name: string, # Optional. The name of the snapshot.
  status: &quot;provisioning&quot; | &quot;ready&quot; | &quot;archived&quot; | &quot;failed&quot;, # Optional. The current status of the snapshot.
  filters: [
    {
      key: string, # Required. Filters key-values by their key field.
      label: string, # Optional. Filters key-values by their label field.
    }
  ], # Required. A list of filters used to filter the key-values included in the snapshot.
  composition_type: &quot;all&quot; | &quot;group_by_key&quot;, # Optional. The composition type describes how the key-values within the snapshot are composed. The &apos;all&apos; composition type includes all key-values. The &apos;group_by_key&apos; composition type ensures there are no two key-values containing the same key.
  created: string (ISO 8601 Format), # Optional. The time that the snapshot was created.
  expires: string (ISO 8601 Format), # Optional. The time that the snapshot will expire.
  retention_period: number, # Optional. The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value revisions will be used.
  size: number, # Optional. The size in bytes of the snapshot.
  items_count: number, # Optional. The amount of key-values in the snapshot.
  tags: Dictionary&lt;string, string&gt;, # Optional. The tags of the snapshot.
  etag: string, # Optional. A value representing the current state of the snapshot.
}
</code>

</remarks>
    </member>
  </members>
</doc>