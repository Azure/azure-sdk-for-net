// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Data.AppConfiguration
{
    /// <summary> Feature Flag fields. </summary>
    public readonly partial struct FeatureFlagFields : IEquatable<FeatureFlagFields>
    {
        private readonly string _value;
        /// <summary> Name field. </summary>
        private const string NameValue = "name";
        /// <summary> Alias field. </summary>
        private const string AliasValue = "alias";
        /// <summary> Label field. </summary>
        private const string LabelValue = "label";
        /// <summary> Description field. </summary>
        private const string DescriptionValue = "description";
        /// <summary> Enabled field. </summary>
        private const string EnabledValue = "enabled";
        /// <summary> Conditions field. </summary>
        private const string ConditionsValue = "conditions";
        /// <summary> Variants field. </summary>
        private const string VariantsValue = "variants";
        /// <summary> Allocation field. </summary>
        private const string AllocationValue = "allocation";
        /// <summary> Telemetry field. </summary>
        private const string TelemetryValue = "telemetry";
        /// <summary> Tags field. </summary>
        private const string TagsValue = "tags";
        /// <summary> Last modified field. </summary>
        private const string LastModifiedValue = "last_modified";
        /// <summary> Etag field. </summary>
        private const string EtagValue = "etag";

        /// <summary> Initializes a new instance of <see cref="FeatureFlagFields"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FeatureFlagFields(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Name field. </summary>
        public static FeatureFlagFields Name { get; } = new FeatureFlagFields(NameValue);

        /// <summary> Alias field. </summary>
        public static FeatureFlagFields Alias { get; } = new FeatureFlagFields(AliasValue);

        /// <summary> Label field. </summary>
        public static FeatureFlagFields Label { get; } = new FeatureFlagFields(LabelValue);

        /// <summary> Description field. </summary>
        public static FeatureFlagFields Description { get; } = new FeatureFlagFields(DescriptionValue);

        /// <summary> Enabled field. </summary>
        public static FeatureFlagFields Enabled { get; } = new FeatureFlagFields(EnabledValue);

        /// <summary> Conditions field. </summary>
        public static FeatureFlagFields Conditions { get; } = new FeatureFlagFields(ConditionsValue);

        /// <summary> Variants field. </summary>
        public static FeatureFlagFields Variants { get; } = new FeatureFlagFields(VariantsValue);

        /// <summary> Allocation field. </summary>
        public static FeatureFlagFields Allocation { get; } = new FeatureFlagFields(AllocationValue);

        /// <summary> Telemetry field. </summary>
        public static FeatureFlagFields Telemetry { get; } = new FeatureFlagFields(TelemetryValue);

        /// <summary> Tags field. </summary>
        public static FeatureFlagFields Tags { get; } = new FeatureFlagFields(TagsValue);

        /// <summary> Last modified field. </summary>
        public static FeatureFlagFields LastModified { get; } = new FeatureFlagFields(LastModifiedValue);

        /// <summary> Etag field. </summary>
        public static FeatureFlagFields Etag { get; } = new FeatureFlagFields(EtagValue);

        /// <summary> Determines if two <see cref="FeatureFlagFields"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(FeatureFlagFields left, FeatureFlagFields right) => left.Equals(right);

        /// <summary> Determines if two <see cref="FeatureFlagFields"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(FeatureFlagFields left, FeatureFlagFields right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="FeatureFlagFields"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator FeatureFlagFields(string value) => new FeatureFlagFields(value);

        /// <summary> Converts a string to a <see cref="FeatureFlagFields"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator FeatureFlagFields?(string value) => value == null ? null : new FeatureFlagFields(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FeatureFlagFields other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(FeatureFlagFields other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
