// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppConfiguration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for KeyValuesOperations.
    /// </summary>
    public static partial class KeyValuesOperationsExtensions
    {
            /// <summary>
            /// Lists the key-values for a given configuration store.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='configStoreName'>
            /// The name of the configuration store.
            /// </param>
            /// <param name='skipToken'>
            /// A skip token is used to continue retrieving items after an operation
            /// returns a partial result. If a previous response contains a nextLink
            /// element, the value of the nextLink element will include a skipToken
            /// parameter that specifies a starting point to use for subsequent calls.
            /// </param>
            public static IPage<KeyValue> ListByConfigurationStore(this IKeyValuesOperations operations, string resourceGroupName, string configStoreName, string skipToken = default(string))
            {
                return operations.ListByConfigurationStoreAsync(resourceGroupName, configStoreName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the key-values for a given configuration store.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='configStoreName'>
            /// The name of the configuration store.
            /// </param>
            /// <param name='skipToken'>
            /// A skip token is used to continue retrieving items after an operation
            /// returns a partial result. If a previous response contains a nextLink
            /// element, the value of the nextLink element will include a skipToken
            /// parameter that specifies a starting point to use for subsequent calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyValue>> ListByConfigurationStoreAsync(this IKeyValuesOperations operations, string resourceGroupName, string configStoreName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByConfigurationStoreWithHttpMessagesAsync(resourceGroupName, configStoreName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the properties of the specified key-value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='configStoreName'>
            /// The name of the configuration store.
            /// </param>
            /// <param name='keyValueName'>
            /// Identifier of key and label combination. Key and label are joined by $
            /// character. Label is optional.
            /// </param>
            public static KeyValue Get(this IKeyValuesOperations operations, string resourceGroupName, string configStoreName, string keyValueName)
            {
                return operations.GetAsync(resourceGroupName, configStoreName, keyValueName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the properties of the specified key-value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='configStoreName'>
            /// The name of the configuration store.
            /// </param>
            /// <param name='keyValueName'>
            /// Identifier of key and label combination. Key and label are joined by $
            /// character. Label is optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyValue> GetAsync(this IKeyValuesOperations operations, string resourceGroupName, string configStoreName, string keyValueName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, configStoreName, keyValueName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a key-value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='configStoreName'>
            /// The name of the configuration store.
            /// </param>
            /// <param name='keyValueName'>
            /// Identifier of key and label combination. Key and label are joined by $
            /// character. Label is optional.
            /// </param>
            /// <param name='keyValueParameters'>
            /// The parameters for creating a key-value.
            /// </param>
            public static KeyValue CreateOrUpdate(this IKeyValuesOperations operations, string resourceGroupName, string configStoreName, string keyValueName, KeyValue keyValueParameters = default(KeyValue))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, configStoreName, keyValueName, keyValueParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a key-value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='configStoreName'>
            /// The name of the configuration store.
            /// </param>
            /// <param name='keyValueName'>
            /// Identifier of key and label combination. Key and label are joined by $
            /// character. Label is optional.
            /// </param>
            /// <param name='keyValueParameters'>
            /// The parameters for creating a key-value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyValue> CreateOrUpdateAsync(this IKeyValuesOperations operations, string resourceGroupName, string configStoreName, string keyValueName, KeyValue keyValueParameters = default(KeyValue), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, configStoreName, keyValueName, keyValueParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a key-value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='configStoreName'>
            /// The name of the configuration store.
            /// </param>
            /// <param name='keyValueName'>
            /// Identifier of key and label combination. Key and label are joined by $
            /// character. Label is optional.
            /// </param>
            public static void Delete(this IKeyValuesOperations operations, string resourceGroupName, string configStoreName, string keyValueName)
            {
                operations.DeleteAsync(resourceGroupName, configStoreName, keyValueName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a key-value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='configStoreName'>
            /// The name of the configuration store.
            /// </param>
            /// <param name='keyValueName'>
            /// Identifier of key and label combination. Key and label are joined by $
            /// character. Label is optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IKeyValuesOperations operations, string resourceGroupName, string configStoreName, string keyValueName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, configStoreName, keyValueName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a key-value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='configStoreName'>
            /// The name of the configuration store.
            /// </param>
            /// <param name='keyValueName'>
            /// Identifier of key and label combination. Key and label are joined by $
            /// character. Label is optional.
            /// </param>
            public static void BeginDelete(this IKeyValuesOperations operations, string resourceGroupName, string configStoreName, string keyValueName)
            {
                operations.BeginDeleteAsync(resourceGroupName, configStoreName, keyValueName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a key-value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the container registry belongs.
            /// </param>
            /// <param name='configStoreName'>
            /// The name of the configuration store.
            /// </param>
            /// <param name='keyValueName'>
            /// Identifier of key and label combination. Key and label are joined by $
            /// character. Label is optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IKeyValuesOperations operations, string resourceGroupName, string configStoreName, string keyValueName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, configStoreName, keyValueName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists the key-values for a given configuration store.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<KeyValue> ListByConfigurationStoreNext(this IKeyValuesOperations operations, string nextPageLink)
            {
                return operations.ListByConfigurationStoreNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the key-values for a given configuration store.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyValue>> ListByConfigurationStoreNextAsync(this IKeyValuesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByConfigurationStoreNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
