// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppConfiguration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The parameters for updating a configuration store.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ConfigurationStoreUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ConfigurationStoreUpdateParameters class.
        /// </summary>
        public ConfigurationStoreUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ConfigurationStoreUpdateParameters class.
        /// </summary>
        /// <param name="encryption">The encryption settings of the
        /// configuration store.</param>
        /// <param name="publicNetworkAccess">Control permission for data plane
        /// traffic coming from public networks while private endpoint is
        /// enabled. Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="identity">The managed identity information for the
        /// configuration store.</param>
        /// <param name="sku">The SKU of the configuration store.</param>
        /// <param name="tags">The ARM resource tags.</param>
        public ConfigurationStoreUpdateParameters(EncryptionProperties encryption = default(EncryptionProperties), string publicNetworkAccess = default(string), ResourceIdentity identity = default(ResourceIdentity), Sku sku = default(Sku), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Encryption = encryption;
            PublicNetworkAccess = publicNetworkAccess;
            Identity = identity;
            Sku = sku;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the encryption settings of the configuration store.
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryption")]
        public EncryptionProperties Encryption { get; set; }

        /// <summary>
        /// Gets or sets control permission for data plane traffic coming from
        /// public networks while private endpoint is enabled. Possible values
        /// include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess { get; set; }

        /// <summary>
        /// Gets or sets the managed identity information for the configuration
        /// store.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public ResourceIdentity Identity { get; set; }

        /// <summary>
        /// Gets or sets the SKU of the configuration store.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets the ARM resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku != null)
            {
                Sku.Validate();
            }
        }
    }
}
