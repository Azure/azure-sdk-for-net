// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Storage.Admin.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Storage share.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Share : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Share class.
        /// </summary>
        public Share()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Share class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource Name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="location">Resource location.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="shareName">The name of the storage share.</param>
        /// <param name="uncPath">The UNC path to the storage share.</param>
        /// <param name="totalCapacity">The total capacity of the storage share
        /// in bytes.</param>
        /// <param name="usedCapacity">The used capacity of the storage share
        /// in bytes.</param>
        /// <param name="freeCapacity">The free space of the storage share in
        /// bytes.</param>
        /// <param name="healthStatus">The health status of the storage share.
        /// Possible values include: 'Unknown', 'Healthy', 'Warning',
        /// 'Critical'</param>
        public Share(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string shareName = default(string), string uncPath = default(string), long? totalCapacity = default(long?), long? usedCapacity = default(long?), long? freeCapacity = default(long?), string healthStatus = default(string))
            : base(id, name, type, location, tags)
        {
            ShareName = shareName;
            UncPath = uncPath;
            TotalCapacity = totalCapacity;
            UsedCapacity = usedCapacity;
            FreeCapacity = freeCapacity;
            HealthStatus = healthStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the name of the storage share.
        /// </summary>
        [JsonProperty(PropertyName = "properties.shareName")]
        public string ShareName { get; private set; }

        /// <summary>
        /// Gets the UNC path to the storage share.
        /// </summary>
        [JsonProperty(PropertyName = "properties.uncPath")]
        public string UncPath { get; private set; }

        /// <summary>
        /// Gets the total capacity of the storage share in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalCapacity")]
        public long? TotalCapacity { get; private set; }

        /// <summary>
        /// Gets the used capacity of the storage share in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.usedCapacity")]
        public long? UsedCapacity { get; private set; }

        /// <summary>
        /// Gets the free space of the storage share in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.freeCapacity")]
        public long? FreeCapacity { get; private set; }

        /// <summary>
        /// Gets the health status of the storage share. Possible values
        /// include: 'Unknown', 'Healthy', 'Warning', 'Critical'
        /// </summary>
        [JsonProperty(PropertyName = "properties.healthStatus")]
        public string HealthStatus { get; private set; }

    }
}
