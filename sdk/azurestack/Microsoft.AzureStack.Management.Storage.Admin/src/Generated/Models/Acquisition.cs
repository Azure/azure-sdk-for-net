// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Storage.Admin.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The acquisition of the page BLOB.
    /// </summary>
    public partial class Acquisition : IResource
    {
        /// <summary>
        /// Initializes a new instance of the Acquisition class.
        /// </summary>
        public Acquisition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Acquisition class.
        /// </summary>
        /// <param name="susbcriptionid">ID of the subscription associated with
        /// the page BLOB.</param>
        /// <param name="storageaccount">The storage account that holds the
        /// page BLOB.</param>
        /// <param name="container">The container associated with the page
        /// BLOB.</param>
        /// <param name="blob">The name of the page BLOB.</param>
        /// <param name="acquisitionid">The ID of page BLOB
        /// acquisition.</param>
        /// <param name="filePath">The file path of the page BLOB file on
        /// storage cluster.</param>
        /// <param name="filePathUnc">The file path unc of the page BLOB file
        /// on storage cluster.</param>
        /// <param name="maximumblobsize">The maximum size of the page
        /// BLOB.</param>
        /// <param name="status">The status of the page BLOB acquisition.
        /// Possible values include: 'Unknown', 'NotAcquired', 'Pending',
        /// 'Success', 'Failed'</param>
        public Acquisition(string susbcriptionid = default(string), string storageaccount = default(string), string container = default(string), string blob = default(string), string acquisitionid = default(string), string filePath = default(string), string filePathUnc = default(string), long? maximumblobsize = default(long?), string status = default(string))
        {
            Susbcriptionid = susbcriptionid;
            Storageaccount = storageaccount;
            Container = container;
            Blob = blob;
            Acquisitionid = acquisitionid;
            FilePath = filePath;
            FilePathUnc = filePathUnc;
            Maximumblobsize = maximumblobsize;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets ID of the subscription associated with the page BLOB.
        /// </summary>
        [JsonProperty(PropertyName = "susbcriptionid")]
        public string Susbcriptionid { get; private set; }

        /// <summary>
        /// Gets the storage account that holds the page BLOB.
        /// </summary>
        [JsonProperty(PropertyName = "storageaccount")]
        public string Storageaccount { get; private set; }

        /// <summary>
        /// Gets the container associated with the page BLOB.
        /// </summary>
        [JsonProperty(PropertyName = "container")]
        public string Container { get; private set; }

        /// <summary>
        /// Gets the name of the page BLOB.
        /// </summary>
        [JsonProperty(PropertyName = "blob")]
        public string Blob { get; private set; }

        /// <summary>
        /// Gets the ID of page BLOB acquisition.
        /// </summary>
        [JsonProperty(PropertyName = "acquisitionid")]
        public string Acquisitionid { get; private set; }

        /// <summary>
        /// Gets the file path of the page BLOB file on storage cluster.
        /// </summary>
        [JsonProperty(PropertyName = "filePath")]
        public string FilePath { get; private set; }

        /// <summary>
        /// Gets the file path unc of the page BLOB file on storage cluster.
        /// </summary>
        [JsonProperty(PropertyName = "filePathUnc")]
        public string FilePathUnc { get; private set; }

        /// <summary>
        /// Gets the maximum size of the page BLOB.
        /// </summary>
        [JsonProperty(PropertyName = "maximumblobsize")]
        public long? Maximumblobsize { get; private set; }

        /// <summary>
        /// Gets the status of the page BLOB acquisition. Possible values
        /// include: 'Unknown', 'NotAcquired', 'Pending', 'Success', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

    }
}
