// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Storage.Admin.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties of the storage account.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class StorageAccount : Resource
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccount class.
        /// </summary>
        public StorageAccount()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageAccount class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource Name.</param>
        /// <param name="type">Resource Type.</param>
        /// <param name="location">Resource Location.</param>
        /// <param name="tenantViewId">Resource URI of storage account from
        /// tenant view.</param>
        /// <param name="accountType">Storage account type. Possible values
        /// include: 'Standard_LRS', 'Standard_GRS', 'Standard_ZRS',
        /// 'Standard_RAGRS', 'Premium_LRS'</param>
        /// <param name="provisioningState">The provisioning state of storage
        /// account. Possible values include: 'Creating', 'Succeeded'</param>
        /// <param name="kind">Indicates the type of storage account. Possible
        /// values include: 'Storage', 'StorageV2', 'BlobStorage'</param>
        /// <param name="primaryEndpoints">The URLs that are used to perform a
        /// retrieval of a public BLOB, queue, or table object.</param>
        /// <param name="creationTime">The creation date and time of storage
        /// account in UTC.</param>
        /// <param name="primaryLocation">The primary location for the storage
        /// account.</param>
        /// <param name="faultDomain">The fault domain for the storage
        /// account.</param>
        /// <param name="statusOfPrimary">The status of primary location of
        /// storage account. Possible values include: 'Available',
        /// 'Unavailable'</param>
        /// <param name="tenantSubscriptionId">Subscription ID of the
        /// subscription under which the storage account locates.</param>
        /// <param name="tenantStorageAccountName">Storage account name from
        /// tenant view.</param>
        /// <param name="tenantResourceGroupName">The name of resource group
        /// under which the storage account locates.</param>
        /// <param name="deletedTime">The date-time when the storage account
        /// was deleted.</param>
        /// <param name="accountStatus">The status of storage account. Possible
        /// values include: 'Active', 'Deleted'</param>
        /// <param name="accountId">Internal storage account ID, which is not
        /// visible to tenant.</param>
        /// <param name="encryption">The storage encryption setting</param>
        /// <param name="supportsHttpsTrafficOnly">Storage account supports
        /// https traffic only or not</param>
        /// <param name="accessTier">Required for storage accounts where 
        /// kind = BlobStorage. Possible values include: 'Hot', 'Cool'</param>
        /// <param name="healthState">The internal health state for storage 
        /// account. Possible values include: 'Healthy', 'Suspended', 
        /// 'OverQuota', 'SuspendedAndOverQuota'</param>
        /// <param name="tags">Resource tags.</param>
        public StorageAccount(string id = default(string), string name = default(string), string type = default(string), string location = default(string), string tenantViewId = default(string), string accountType = default(string), string provisioningState = default(string), string kind = default(string), IDictionary<string, string> primaryEndpoints = default(IDictionary<string, string>), string creationTime = default(string), string primaryLocation = default(string), string faultDomain = default(string), string statusOfPrimary = default(string), string tenantSubscriptionId = default(string), string tenantStorageAccountName = default(string), string tenantResourceGroupName = default(string), System.DateTime? deletedTime = default(System.DateTime?), string accountStatus = default(string), string accountId = default(string), StorageEncryption encryption = default(StorageEncryption), bool? supportsHttpsTrafficOnly = default(bool?), string accessTier = default(string), string healthState = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
            : base(id, name, type, location)
        {
            TenantViewId = tenantViewId;
            AccountType = accountType;
            ProvisioningState = provisioningState;
            Kind = kind;
            PrimaryEndpoints = primaryEndpoints;
            CreationTime = creationTime;
            PrimaryLocation = primaryLocation;
            FaultDomain = faultDomain;
            StatusOfPrimary = statusOfPrimary;
            TenantSubscriptionId = tenantSubscriptionId;
            TenantStorageAccountName = tenantStorageAccountName;
            TenantResourceGroupName = tenantResourceGroupName;
            DeletedTime = deletedTime;
            AccountStatus = accountStatus;
            AccountId = accountId;
            Encryption = encryption;
            SupportsHttpsTrafficOnly = supportsHttpsTrafficOnly;
            AccessTier = accessTier;
            HealthState = healthState;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets resource URI of storage account from tenant view.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantViewId")]
        public string TenantViewId { get; private set; }

        /// <summary>
        /// Gets storage account type. Possible values include: 'Standard_LRS',
        /// 'Standard_GRS', 'Standard_ZRS', 'Standard_RAGRS', 'Premium_LRS'
        /// </summary>
        [JsonProperty(PropertyName = "properties.accountType")]
        public string AccountType { get; private set; }

        /// <summary>
        /// Gets the provisioning state of storage account. Possible values
        /// include: 'Creating', 'Succeeded'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the URLs that are used to perform a retrieval of a public
        /// BLOB, queue, or table object.
        /// </summary>
        [JsonProperty(PropertyName = "properties.primaryEndpoints")]
        public IDictionary<string, string> PrimaryEndpoints { get; private set; }

        /// <summary>
        /// Gets the creation date and time of storage account in UTC.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationTime")]
        public string CreationTime { get; private set; }

        /// <summary>
        /// Gets the primary location for the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.primaryLocation")]
        public string PrimaryLocation { get; private set; }

        /// <summary>
        /// Gets the fault domain for the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.faultDomain")]
        public string FaultDomain { get; private set; }

        /// <summary>
        /// Gets the status of primary location of storage account. Possible
        /// values include: 'Available', 'Unavailable'
        /// </summary>
        [JsonProperty(PropertyName = "properties.statusOfPrimary")]
        public string StatusOfPrimary { get; private set; }

        /// <summary>
        /// Gets subscription ID of the subscription under which the storage
        /// account locates.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantSubscriptionId")]
        public string TenantSubscriptionId { get; private set; }

        /// <summary>
        /// Gets storage account name from tenant view.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantStorageAccountName")]
        public string TenantStorageAccountName { get; private set; }

        /// <summary>
        /// Gets the name of resource group under which the storage account
        /// locates.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantResourceGroupName")]
        public string TenantResourceGroupName { get; private set; }

        /// <summary>
        /// Gets the date-time when the storage account was deleted.
        /// </summary>
        [JsonProperty(PropertyName = "properties.deletedTime")]
        public System.DateTime? DeletedTime { get; private set; }

        /// <summary>
        /// Gets or sets the status of storage account. Possible values
        /// include: 'Active', 'Deleted'
        /// </summary>
        [JsonProperty(PropertyName = "properties.accountStatus")]
        public string AccountStatus { get; set; }

        /// <summary>
        /// Gets internal storage account ID, which is not visible to tenant.
        /// </summary>
        [JsonProperty(PropertyName = "properties.accountId")]
        public string AccountId { get; private set; }

        /// <summary>
        /// Gets the storage encryption setting
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryption")]
        public StorageEncryption Encryption { get; private set; }

        /// <summary>
        /// Gets storage account supports https traffic only or not
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportsHttpsTrafficOnly")]
        public bool? SupportsHttpsTrafficOnly { get; private set; }

        /// <summary>
        /// Required for storage accounts where kind = BlobStorage. Possible values
        /// include: 'Hot', 'Cool'
        /// </summary>
        [JsonProperty(PropertyName = "properties.accessTier")]
        public string AccessTier { get; private set; }

        /// <summary>
        /// Health state for storage account. Possible values
        /// include: 'Healthy', 'Suspended', 'OverQuota', 
        /// 'SuspendedAndOverQuota'
        /// </summary>
        [JsonProperty(PropertyName = "properties.healthState")]
        public string HealthState { get; private set; }

        /// <summary>
        /// Gets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; private set; }

        /// <summary>
        /// Indicates the type of storage account. Possible values
        /// include: 'Storage', 'StorageV2', 'BlobStorage'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; private set; }

    }
}
