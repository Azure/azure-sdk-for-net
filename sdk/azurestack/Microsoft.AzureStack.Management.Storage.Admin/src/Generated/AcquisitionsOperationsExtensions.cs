// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Storage.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AcquisitionsOperations.
    /// </summary>
    public static partial class AcquisitionsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of BLOB acquistions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='farmId'>
            /// Farm Id.
            /// </param>
            /// <param name='filter'>
            /// Filter string
            /// </param>
            public static IList<Acquisition> List(this IAcquisitionsOperations operations, string resourceGroupName, string farmId, string filter = default(string))
            {
                return operations.ListAsync(resourceGroupName, farmId, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of BLOB acquistions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='farmId'>
            /// Farm Id.
            /// </param>
            /// <param name='filter'>
            /// Filter string
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Acquisition>> ListAsync(this IAcquisitionsOperations operations, string resourceGroupName, string farmId, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, farmId, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
