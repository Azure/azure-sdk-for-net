// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Storage.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StorageAccountsOperations.
    /// </summary>
    public static partial class StorageAccountsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of storage accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='filter'>
            /// Filter string
            /// </param>
            /// <param name='summary'>
            /// Switch for whether summary or detailed information is returned.
            /// </param>
            public static IPage<StorageAccount> List(this IStorageAccountsOperations operations, string location, string filter = default(string), bool? summary = default(bool?))
            {
                return operations.ListAsync(location, filter, summary).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of storage accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='filter'>
            /// Filter string
            /// </param>
            /// <param name='summary'>
            /// Switch for whether summary or detailed information is returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StorageAccount>> ListAsync(this IStorageAccountsOperations operations, string location, string filter = default(string), bool? summary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(location, filter, summary, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the requested storage account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='accountId'>
            /// Internal storage account ID, which is not visible to tenant.
            /// </param>
            public static StorageAccount Get(this IStorageAccountsOperations operations, string location, string accountId)
            {
                return operations.GetAsync(location, accountId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the requested storage account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='accountId'>
            /// Internal storage account ID, which is not visible to tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccount> GetAsync(this IStorageAccountsOperations operations, string location, string accountId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(location, accountId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Undelete a deleted storage account with new account name if the a new name
            /// is provided.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='accountId'>
            /// Internal storage account ID, which is not visible to tenant.
            /// </param>
            /// <param name='newAccountName'>
            /// New storage account name when doing undelete storage account operation.
            /// </param>
            public static UndeleteStorageAccount Undelete(this IStorageAccountsOperations operations, string location, string accountId, string newAccountName = default(string))
            {
                return operations.UndeleteAsync(location, accountId, newAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Undelete a deleted storage account with new account name if the a new name
            /// is provided.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='accountId'>
            /// Internal storage account ID, which is not visible to tenant.
            /// </param>
            /// <param name='newAccountName'>
            /// New storage account name when doing undelete storage account operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UndeleteStorageAccount> UndeleteAsync(this IStorageAccountsOperations operations, string location, string accountId, string newAccountName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UndeleteWithHttpMessagesAsync(location, accountId, newAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start reclaim storage capacity on deleted storage objects.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            public static void ReclaimStorageCapacity(this IStorageAccountsOperations operations, string location)
            {
                operations.ReclaimStorageCapacityAsync(location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start reclaim storage capacity on deleted storage objects.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReclaimStorageCapacityAsync(this IStorageAccountsOperations operations, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ReclaimStorageCapacityWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Undelete a deleted storage account with new account name if the a new name
            /// is provided.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='accountId'>
            /// Internal storage account ID, which is not visible to tenant.
            /// </param>
            /// <param name='newAccountName'>
            /// New storage account name when doing undelete storage account operation.
            /// </param>
            public static UndeleteStorageAccount BeginUndelete(this IStorageAccountsOperations operations, string location, string accountId, string newAccountName = default(string))
            {
                return operations.BeginUndeleteAsync(location, accountId, newAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Undelete a deleted storage account with new account name if the a new name
            /// is provided.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='accountId'>
            /// Internal storage account ID, which is not visible to tenant.
            /// </param>
            /// <param name='newAccountName'>
            /// New storage account name when doing undelete storage account operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UndeleteStorageAccount> BeginUndeleteAsync(this IStorageAccountsOperations operations, string location, string accountId, string newAccountName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUndeleteWithHttpMessagesAsync(location, accountId, newAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start reclaim storage capacity on deleted storage objects.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            public static void BeginReclaimStorageCapacity(this IStorageAccountsOperations operations, string location)
            {
                operations.BeginReclaimStorageCapacityAsync(location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start reclaim storage capacity on deleted storage objects.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginReclaimStorageCapacityAsync(this IStorageAccountsOperations operations, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginReclaimStorageCapacityWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of storage accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StorageAccount> ListNext(this IStorageAccountsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of storage accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StorageAccount>> ListNextAsync(this IStorageAccountsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
