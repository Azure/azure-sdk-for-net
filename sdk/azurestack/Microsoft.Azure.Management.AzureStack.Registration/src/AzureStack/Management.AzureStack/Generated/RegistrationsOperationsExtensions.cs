// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureStack
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RegistrationsOperations.
    /// </summary>
    public static partial class RegistrationsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of all registrations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            public static IPage<Registration> List(this IRegistrationsOperations operations, string resourceGroup)
            {
                return operations.ListAsync(resourceGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all registrations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Registration>> ListAsync(this IRegistrationsOperations operations, string resourceGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the properties of an Azure Stack registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='registrationName'>
            /// Name of the Azure Stack registration.
            /// </param>
            public static Registration Get(this IRegistrationsOperations operations, string resourceGroup, string registrationName)
            {
                return operations.GetAsync(resourceGroup, registrationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the properties of an Azure Stack registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='registrationName'>
            /// Name of the Azure Stack registration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Registration> GetAsync(this IRegistrationsOperations operations, string resourceGroup, string registrationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroup, registrationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the requested Azure Stack registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='registrationName'>
            /// Name of the Azure Stack registration.
            /// </param>
            public static void Delete(this IRegistrationsOperations operations, string resourceGroup, string registrationName)
            {
                operations.DeleteAsync(resourceGroup, registrationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the requested Azure Stack registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='registrationName'>
            /// Name of the Azure Stack registration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IRegistrationsOperations operations, string resourceGroup, string registrationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroup, registrationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update an Azure Stack registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='registrationName'>
            /// Name of the Azure Stack registration.
            /// </param>
            /// <param name='token'>
            /// Registration token
            /// </param>
            public static Registration CreateOrUpdate(this IRegistrationsOperations operations, string resourceGroup, string registrationName, RegistrationParameter token)
            {
                return operations.CreateOrUpdateAsync(resourceGroup, registrationName, token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Azure Stack registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='registrationName'>
            /// Name of the Azure Stack registration.
            /// </param>
            /// <param name='token'>
            /// Registration token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Registration> CreateOrUpdateAsync(this IRegistrationsOperations operations, string resourceGroup, string registrationName, RegistrationParameter token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroup, registrationName, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch an Azure Stack registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='registrationName'>
            /// Name of the Azure Stack registration.
            /// </param>
            /// <param name='token'>
            /// Registration token
            /// </param>
            public static Registration Update(this IRegistrationsOperations operations, string resourceGroup, string registrationName, RegistrationParameter token)
            {
                return operations.UpdateAsync(resourceGroup, registrationName, token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch an Azure Stack registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='registrationName'>
            /// Name of the Azure Stack registration.
            /// </param>
            /// <param name='token'>
            /// Registration token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Registration> UpdateAsync(this IRegistrationsOperations operations, string resourceGroup, string registrationName, RegistrationParameter token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroup, registrationName, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Azure Stack Activation Key.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='registrationName'>
            /// Name of the Azure Stack registration.
            /// </param>
            public static ActivationKeyResult GetActivationKey(this IRegistrationsOperations operations, string resourceGroup, string registrationName)
            {
                return operations.GetActivationKeyAsync(resourceGroup, registrationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Azure Stack Activation Key.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// Name of the resource group.
            /// </param>
            /// <param name='registrationName'>
            /// Name of the Azure Stack registration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActivationKeyResult> GetActivationKeyAsync(this IRegistrationsOperations operations, string resourceGroup, string registrationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivationKeyWithHttpMessagesAsync(resourceGroup, registrationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of all registrations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Registration> ListNext(this IRegistrationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all registrations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Registration>> ListNextAsync(this IRegistrationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
