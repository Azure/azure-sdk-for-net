// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.InfrastructureInsights.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AlertsOperations.
    /// </summary>
    public static partial class AlertsOperationsExtensions
    {
            /// <summary>
            /// Returns the list of all alerts in a given region.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Name of the region
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Alert> List(this IAlertsOperations operations, string resourceGroupName, string location, ODataQuery<Alert> odataQuery = default(ODataQuery<Alert>))
            {
                return operations.ListAsync(resourceGroupName, location, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of all alerts in a given region.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Name of the region
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Alert>> ListAsync(this IAlertsOperations operations, string resourceGroupName, string location, ODataQuery<Alert> odataQuery = default(ODataQuery<Alert>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, location, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the requested an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Name of the region
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert.
            /// </param>
            public static Alert Get(this IAlertsOperations operations, string resourceGroupName, string location, string alertName)
            {
                return operations.GetAsync(resourceGroupName, location, alertName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the requested an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Name of the region
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Alert> GetAsync(this IAlertsOperations operations, string resourceGroupName, string location, string alertName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, location, alertName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Closes the given alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Name of the region
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert.
            /// </param>
            /// <param name='user'>
            /// The username used to perform the operation.
            /// </param>
            /// <param name='alert'>
            /// Updated alert parameter.
            /// </param>
            public static Alert Close(this IAlertsOperations operations, string resourceGroupName, string location, string alertName, string user, Alert alert)
            {
                return operations.CloseAsync(resourceGroupName, location, alertName, user, alert).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Closes the given alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Name of the region
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert.
            /// </param>
            /// <param name='user'>
            /// The username used to perform the operation.
            /// </param>
            /// <param name='alert'>
            /// Updated alert parameter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Alert> CloseAsync(this IAlertsOperations operations, string resourceGroupName, string location, string alertName, string user, Alert alert, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloseWithHttpMessagesAsync(resourceGroupName, location, alertName, user, alert, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Repairs an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Name of the region
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert.
            /// </param>
            public static void Repair(this IAlertsOperations operations, string resourceGroupName, string location, string alertName)
            {
                operations.RepairAsync(resourceGroupName, location, alertName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Repairs an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Name of the region
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RepairAsync(this IAlertsOperations operations, string resourceGroupName, string location, string alertName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RepairWithHttpMessagesAsync(resourceGroupName, location, alertName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Repairs an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Name of the region
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert.
            /// </param>
            public static void BeginRepair(this IAlertsOperations operations, string resourceGroupName, string location, string alertName)
            {
                operations.BeginRepairAsync(resourceGroupName, location, alertName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Repairs an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='location'>
            /// Name of the region
            /// </param>
            /// <param name='alertName'>
            /// Name of the alert.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRepairAsync(this IAlertsOperations operations, string resourceGroupName, string location, string alertName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRepairWithHttpMessagesAsync(resourceGroupName, location, alertName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the list of all alerts in a given region.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Alert> ListNext(this IAlertsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of all alerts in a given region.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Alert>> ListNextAsync(this IAlertsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
