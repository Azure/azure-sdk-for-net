// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Fabric.Admin.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Representation of a volume resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Volume : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Volume class.
        /// </summary>
        public Volume()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Volume class.
        /// </summary>
        /// <param name="id">URI of the resource.</param>
        /// <param name="name">Name of the resource.</param>
        /// <param name="type">Type of resource.</param>
        /// <param name="location">The region where the resource is
        /// located.</param>
        /// <param name="tags">List of key-value pairs.</param>
        /// <param name="totalCapacityGB">Total capacity in GB of the
        /// volume.</param>
        /// <param name="remainingCapacityGB">Remaining capacity in GB of the
        /// volume.</param>
        /// <param name="healthStatus">Health status of the volume.</param>
        /// <param name="operationalStatus">Operational status of the
        /// volume.</param>
        /// <param name="repairStatus">Repair status of the volume. Empty if no
        /// repair job running, something like 'Running, 90%' when
        /// repairing.</param>
        /// <param name="description">Detailed description for
        /// HealthStatus/OperationalStatus. Empty if
        /// HealthStatus/OperationalStatus is Healthy/Ok.</param>
        /// <param name="action">Detailed recommended action for
        /// HealthStatus/OperationalStatus. Empty if
        /// HealthStatus/OperationalStatus is Healthy/Ok.</param>
        /// <param name="volumeLabel">Volume label.</param>
        public Volume(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), int? totalCapacityGB = default(int?), int? remainingCapacityGB = default(int?), string healthStatus = default(string), string operationalStatus = default(string), string repairStatus = default(string), string description = default(string), string action = default(string), string volumeLabel = default(string))
            : base(id, name, type, location, tags)
        {
            TotalCapacityGB = totalCapacityGB;
            RemainingCapacityGB = remainingCapacityGB;
            HealthStatus = healthStatus;
            OperationalStatus = operationalStatus;
            RepairStatus = repairStatus;
            Description = description;
            Action = action;
            VolumeLabel = volumeLabel;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets total capacity in GB of the volume.
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalCapacityGB")]
        public int? TotalCapacityGB { get; private set; }

        /// <summary>
        /// Gets remaining capacity in GB of the volume.
        /// </summary>
        [JsonProperty(PropertyName = "properties.remainingCapacityGB")]
        public int? RemainingCapacityGB { get; private set; }

        /// <summary>
        /// Gets health status of the volume.
        /// </summary>
        [JsonProperty(PropertyName = "properties.healthStatus")]
        public string HealthStatus { get; private set; }

        /// <summary>
        /// Gets operational status of the volume.
        /// </summary>
        [JsonProperty(PropertyName = "properties.operationalStatus")]
        public string OperationalStatus { get; private set; }

        /// <summary>
        /// Gets repair status of the volume. Empty if no repair job running,
        /// something like 'Running, 90%' when repairing.
        /// </summary>
        [JsonProperty(PropertyName = "properties.repairStatus")]
        public string RepairStatus { get; private set; }

        /// <summary>
        /// Gets detailed description for HealthStatus/OperationalStatus. Empty
        /// if HealthStatus/OperationalStatus is Healthy/Ok.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets detailed recommended action for
        /// HealthStatus/OperationalStatus. Empty if
        /// HealthStatus/OperationalStatus is Healthy/Ok.
        /// </summary>
        [JsonProperty(PropertyName = "properties.action")]
        public string Action { get; private set; }

        /// <summary>
        /// Gets volume label.
        /// </summary>
        [JsonProperty(PropertyName = "properties.volumeLabel")]
        public string VolumeLabel { get; private set; }

    }
}
