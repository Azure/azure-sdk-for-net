// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Subscriptions.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DirectoryTenantsOperations.
    /// </summary>
    public static partial class DirectoryTenantsOperationsExtensions
    {
            /// <summary>
            /// Lists all the directory tenants under the current subscription and given
            /// resource group name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            public static IPage<DirectoryTenant> List(this IDirectoryTenantsOperations operations, string resourceGroupName)
            {
                return operations.ListAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the directory tenants under the current subscription and given
            /// resource group name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DirectoryTenant>> ListAsync(this IDirectoryTenantsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a directory tenant by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='tenant'>
            /// Directory tenant name.
            /// </param>
            public static DirectoryTenant Get(this IDirectoryTenantsOperations operations, string resourceGroupName, string tenant)
            {
                return operations.GetAsync(resourceGroupName, tenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a directory tenant by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='tenant'>
            /// Directory tenant name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DirectoryTenant> GetAsync(this IDirectoryTenantsOperations operations, string resourceGroupName, string tenant, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, tenant, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a directory tenant under a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='tenant'>
            /// Directory tenant name.
            /// </param>
            public static void Delete(this IDirectoryTenantsOperations operations, string resourceGroupName, string tenant)
            {
                operations.DeleteAsync(resourceGroupName, tenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a directory tenant under a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='tenant'>
            /// Directory tenant name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDirectoryTenantsOperations operations, string resourceGroupName, string tenant, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, tenant, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or updates a directory tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='tenant'>
            /// Directory tenant name.
            /// </param>
            /// <param name='newTenant'>
            /// New directory tenant properties.
            /// </param>
            public static DirectoryTenant CreateOrUpdate(this IDirectoryTenantsOperations operations, string resourceGroupName, string tenant, DirectoryTenant newTenant)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, tenant, newTenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or updates a directory tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='tenant'>
            /// Directory tenant name.
            /// </param>
            /// <param name='newTenant'>
            /// New directory tenant properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DirectoryTenant> CreateOrUpdateAsync(this IDirectoryTenantsOperations operations, string resourceGroupName, string tenant, DirectoryTenant newTenant, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, tenant, newTenant, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the directory tenants under the current subscription and given
            /// resource group name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DirectoryTenant> ListNext(this IDirectoryTenantsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the directory tenants under the current subscription and given
            /// resource group name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DirectoryTenant>> ListNextAsync(this IDirectoryTenantsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
