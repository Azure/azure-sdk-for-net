// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Subscriptions.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DelegatedProviderOffersOperations.
    /// </summary>
    public static partial class DelegatedProviderOffersOperationsExtensions
    {
            /// <summary>
            /// Get the list of delegated provider offers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegatedProviderSubscriptionId'>
            /// Delegated provider subscription identifier.
            /// </param>
            public static IPage<DelegatedProviderOffer> List(this IDelegatedProviderOffersOperations operations, string delegatedProviderSubscriptionId)
            {
                return operations.ListAsync(delegatedProviderSubscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of delegated provider offers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegatedProviderSubscriptionId'>
            /// Delegated provider subscription identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DelegatedProviderOffer>> ListAsync(this IDelegatedProviderOffersOperations operations, string delegatedProviderSubscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(delegatedProviderSubscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the specified delegated provider offer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegatedProviderSubscriptionId'>
            /// Delegated provider subscription identifier.
            /// </param>
            /// <param name='offer'>
            /// Name of an offer.
            /// </param>
            public static DelegatedProviderOffer Get(this IDelegatedProviderOffersOperations operations, string delegatedProviderSubscriptionId, string offer)
            {
                return operations.GetAsync(delegatedProviderSubscriptionId, offer).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the specified delegated provider offer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='delegatedProviderSubscriptionId'>
            /// Delegated provider subscription identifier.
            /// </param>
            /// <param name='offer'>
            /// Name of an offer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DelegatedProviderOffer> GetAsync(this IDelegatedProviderOffersOperations operations, string delegatedProviderSubscriptionId, string offer, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(delegatedProviderSubscriptionId, offer, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of delegated provider offers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DelegatedProviderOffer> ListNext(this IDelegatedProviderOffersOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of delegated provider offers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DelegatedProviderOffer>> ListNextAsync(this IDelegatedProviderOffersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
