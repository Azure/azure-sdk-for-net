// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Subscriptions.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OfferDelegationsOperations.
    /// </summary>
    public static partial class OfferDelegationsOperationsExtensions
    {
            /// <summary>
            /// Get the list of offer delegations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='offer'>
            /// Name of an offer.
            /// </param>
            public static IPage<OfferDelegation> List(this IOfferDelegationsOperations operations, string resourceGroupName, string offer)
            {
                return operations.ListAsync(resourceGroupName, offer).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of offer delegations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='offer'>
            /// Name of an offer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OfferDelegation>> ListAsync(this IOfferDelegationsOperations operations, string resourceGroupName, string offer, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, offer, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the specified offer delegation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='offer'>
            /// Name of an offer.
            /// </param>
            /// <param name='offerDelegationName'>
            /// Name of a offer delegation.
            /// </param>
            public static OfferDelegation Get(this IOfferDelegationsOperations operations, string resourceGroupName, string offer, string offerDelegationName)
            {
                return operations.GetAsync(resourceGroupName, offer, offerDelegationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the specified offer delegation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='offer'>
            /// Name of an offer.
            /// </param>
            /// <param name='offerDelegationName'>
            /// Name of a offer delegation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OfferDelegation> GetAsync(this IOfferDelegationsOperations operations, string resourceGroupName, string offer, string offerDelegationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, offer, offerDelegationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the offer delegation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='offer'>
            /// Name of an offer.
            /// </param>
            /// <param name='offerDelegationName'>
            /// Name of a offer delegation.
            /// </param>
            /// <param name='newOfferDelegation'>
            /// New offer delegation parameter.
            /// </param>
            public static OfferDelegation CreateOrUpdate(this IOfferDelegationsOperations operations, string resourceGroupName, string offer, string offerDelegationName, OfferDelegation newOfferDelegation)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, offer, offerDelegationName, newOfferDelegation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the offer delegation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='offer'>
            /// Name of an offer.
            /// </param>
            /// <param name='offerDelegationName'>
            /// Name of a offer delegation.
            /// </param>
            /// <param name='newOfferDelegation'>
            /// New offer delegation parameter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OfferDelegation> CreateOrUpdateAsync(this IOfferDelegationsOperations operations, string resourceGroupName, string offer, string offerDelegationName, OfferDelegation newOfferDelegation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, offer, offerDelegationName, newOfferDelegation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the specified offer delegation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='offer'>
            /// Name of an offer.
            /// </param>
            /// <param name='offerDelegationName'>
            /// Name of a offer delegation.
            /// </param>
            public static void Delete(this IOfferDelegationsOperations operations, string resourceGroupName, string offer, string offerDelegationName)
            {
                operations.DeleteAsync(resourceGroupName, offer, offerDelegationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the specified offer delegation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='offer'>
            /// Name of an offer.
            /// </param>
            /// <param name='offerDelegationName'>
            /// Name of a offer delegation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IOfferDelegationsOperations operations, string resourceGroupName, string offer, string offerDelegationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, offer, offerDelegationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the list of offer delegations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OfferDelegation> ListNext(this IOfferDelegationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of offer delegations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OfferDelegation>> ListNextAsync(this IOfferDelegationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
