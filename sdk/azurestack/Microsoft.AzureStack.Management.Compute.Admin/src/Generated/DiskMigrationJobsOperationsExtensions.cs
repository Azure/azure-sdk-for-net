// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Compute.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DiskMigrationJobsOperations.
    /// </summary>
    public static partial class DiskMigrationJobsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of disk migration jobs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='status'>
            /// The parameters of disk migration job status.
            /// </param>
            public static IEnumerable<DiskMigrationJob> List(this IDiskMigrationJobsOperations operations, string location, string status = default(string))
            {
                return operations.ListAsync(location, status).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of disk migration jobs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='status'>
            /// The parameters of disk migration job status.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<DiskMigrationJob>> ListAsync(this IDiskMigrationJobsOperations operations, string location, string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(location, status, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the requested disk migration job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='migrationId'>
            /// The migration job guid name.
            /// </param>
            public static DiskMigrationJob Get(this IDiskMigrationJobsOperations operations, string location, string migrationId)
            {
                return operations.GetAsync(location, migrationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the requested disk migration job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='migrationId'>
            /// The migration job guid name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiskMigrationJob> GetAsync(this IDiskMigrationJobsOperations operations, string location, string migrationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(location, migrationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a disk migration job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='migrationId'>
            /// The migration job guid name.
            /// </param>
            /// <param name='targetShare'>
            /// The target share name.
            /// </param>
            /// <param name='disks'>
            /// The parameters of disk list.
            /// </param>
            public static DiskMigrationJob Create(this IDiskMigrationJobsOperations operations, string location, string migrationId, string targetShare, IList<Disk> disks)
            {
                return operations.CreateAsync(location, migrationId, targetShare, disks).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a disk migration job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='migrationId'>
            /// The migration job guid name.
            /// </param>
            /// <param name='targetShare'>
            /// The target share name.
            /// </param>
            /// <param name='disks'>
            /// The parameters of disk list.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiskMigrationJob> CreateAsync(this IDiskMigrationJobsOperations operations, string location, string migrationId, string targetShare, IList<Disk> disks, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(location, migrationId, targetShare, disks, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel a disk migration job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='migrationId'>
            /// The migration job guid name.
            /// </param>
            public static DiskMigrationJob Cancel(this IDiskMigrationJobsOperations operations, string location, string migrationId)
            {
                return operations.CancelAsync(location, migrationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel a disk migration job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='migrationId'>
            /// The migration job guid name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiskMigrationJob> CancelAsync(this IDiskMigrationJobsOperations operations, string location, string migrationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelWithHttpMessagesAsync(location, migrationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
