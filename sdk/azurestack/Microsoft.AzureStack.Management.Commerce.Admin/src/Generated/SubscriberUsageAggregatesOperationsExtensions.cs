// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Commerce.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SubscriberUsageAggregatesOperations.
    /// </summary>
    public static partial class SubscriberUsageAggregatesOperationsExtensions
    {
            /// <summary>
            /// Gets a collection of SubscriberUsageAggregates, which are UsageAggregates
            /// from users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportedStartTime'>
            /// The reported start time (inclusive).
            /// </param>
            /// <param name='reportedEndTime'>
            /// The reported end time (exclusive).
            /// </param>
            /// <param name='aggregationGranularity'>
            /// The aggregation granularity.
            /// </param>
            /// <param name='subscriberId'>
            /// The tenant subscription identifier.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token.
            /// </param>
            public static IPage<UsageAggregate> List(this ISubscriberUsageAggregatesOperations operations, System.DateTime reportedStartTime, System.DateTime reportedEndTime, string aggregationGranularity = default(string), string subscriberId = default(string), string continuationToken = default(string))
            {
                return operations.ListAsync(reportedStartTime, reportedEndTime, aggregationGranularity, subscriberId, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a collection of SubscriberUsageAggregates, which are UsageAggregates
            /// from users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportedStartTime'>
            /// The reported start time (inclusive).
            /// </param>
            /// <param name='reportedEndTime'>
            /// The reported end time (exclusive).
            /// </param>
            /// <param name='aggregationGranularity'>
            /// The aggregation granularity.
            /// </param>
            /// <param name='subscriberId'>
            /// The tenant subscription identifier.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<UsageAggregate>> ListAsync(this ISubscriberUsageAggregatesOperations operations, System.DateTime reportedStartTime, System.DateTime reportedEndTime, string aggregationGranularity = default(string), string subscriberId = default(string), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(reportedStartTime, reportedEndTime, aggregationGranularity, subscriberId, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a collection of SubscriberUsageAggregates, which are UsageAggregates
            /// from users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<UsageAggregate> ListNext(this ISubscriberUsageAggregatesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a collection of SubscriberUsageAggregates, which are UsageAggregates
            /// from users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<UsageAggregate>> ListNextAsync(this ISubscriberUsageAggregatesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
