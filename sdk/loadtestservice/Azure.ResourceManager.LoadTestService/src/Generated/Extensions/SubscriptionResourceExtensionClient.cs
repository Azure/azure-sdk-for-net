// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.LoadTestService
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _loadTestResourceLoadTestsClientDiagnostics;
        private LoadTestsRestOperations _loadTestResourceLoadTestsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics LoadTestResourceLoadTestsClientDiagnostics => _loadTestResourceLoadTestsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.LoadTestService", LoadTestResource.ResourceType.Namespace, Diagnostics);
        private LoadTestsRestOperations LoadTestResourceLoadTestsRestClient => _loadTestResourceLoadTestsRestClient ??= new LoadTestsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(LoadTestResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of QuotaResources in the SubscriptionResource. </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <returns> An object representing collection of QuotaResources and their operations over a QuotaResource. </returns>
        public virtual QuotaResourceCollection GetQuotaResources(AzureLocation location)
        {
            return new QuotaResourceCollection(Client, Id, location);
        }

        /// <summary>
        /// Lists loadtests resources in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/loadTests
        /// Operation Id: LoadTests_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LoadTestResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<LoadTestResource> GetLoadTestResourcesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<LoadTestResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LoadTestResourceLoadTestsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetLoadTestResources");
                scope.Start();
                try
                {
                    var response = await LoadTestResourceLoadTestsRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LoadTestResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<LoadTestResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = LoadTestResourceLoadTestsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetLoadTestResources");
                scope.Start();
                try
                {
                    var response = await LoadTestResourceLoadTestsRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LoadTestResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists loadtests resources in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/loadTests
        /// Operation Id: LoadTests_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LoadTestResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<LoadTestResource> GetLoadTestResources(CancellationToken cancellationToken = default)
        {
            Page<LoadTestResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LoadTestResourceLoadTestsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetLoadTestResources");
                scope.Start();
                try
                {
                    var response = LoadTestResourceLoadTestsRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LoadTestResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<LoadTestResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = LoadTestResourceLoadTestsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetLoadTestResources");
                scope.Start();
                try
                {
                    var response = LoadTestResourceLoadTestsRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LoadTestResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
