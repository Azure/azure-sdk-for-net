// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Json;
using Azure.Core.Serialization;

namespace Azure.Developer.LoadTesting.Models
{
    public partial class PassFailMetric : IUtf8JsonSerializable, IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ClientMetric))
            {
                writer.WritePropertyName("clientMetric"u8);
                writer.WriteStringValue(ClientMetric.Value.ToString());
            }
            if (Optional.IsDefined(Aggregate))
            {
                writer.WritePropertyName("aggregate"u8);
                writer.WriteStringValue(Aggregate.Value.ToString());
            }
            if (Optional.IsDefined(Condition))
            {
                writer.WritePropertyName("condition"u8);
                writer.WriteStringValue(Condition);
            }
            if (Optional.IsDefined(RequestName))
            {
                writer.WritePropertyName("requestName"u8);
                writer.WriteStringValue(RequestName);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value"u8);
                writer.WriteNumberValue(Value.Value);
            }
            if (Optional.IsDefined(Action))
            {
                writer.WritePropertyName("action"u8);
                writer.WriteStringValue(Action.Value.ToString());
            }
            writer.WriteEndObject();
        }

        void IModelSerializable.Serialize(Utf8JsonWriter writer)
        {
            ((IUtf8JsonSerializable)this).Write(writer);
        }

        internal static PassFailMetric DeserializePassFailMetric(JsonElement element)
        {
            BinaryData utf8Json = Test.GetBytes(element);
            MutableJsonElement mje = MutableJsonDocument.Parse(utf8Json).RootElement;
            return new PassFailMetric(mje);
        }

        object IModelSerializable.Deserialize(JsonElement element)
        {
            return DeserializePassFailMetric(element);
        }
    }
}
