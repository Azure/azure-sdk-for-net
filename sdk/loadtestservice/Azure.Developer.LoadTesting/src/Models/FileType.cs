// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> File type. </summary>
    public readonly partial struct FileType : IEquatable<FileType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FileType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string JMXFileValue = "JMX_FILE";
        private const string UserPropertiesValue = "USER_PROPERTIES";
        private const string AdditionalArtifactsValue = "ADDITIONAL_ARTIFACTS";

        /// <summary> If file is jmx script. </summary>
        public static FileType JMXFile { get; } = new FileType(JMXFileValue);
        /// <summary> If file is user properties. </summary>
        public static FileType UserProperties { get; } = new FileType(UserPropertiesValue);
        /// <summary> If file is not any of other supported type. </summary>
        public static FileType AdditionalArtifacts { get; } = new FileType(AdditionalArtifactsValue);
        /// <summary> Determines if two <see cref="FileType"/> values are the same. </summary>
        public static bool operator ==(FileType left, FileType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FileType"/> values are not the same. </summary>
        public static bool operator !=(FileType left, FileType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FileType"/>. </summary>
        public static implicit operator FileType(string value) => new FileType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FileType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FileType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
