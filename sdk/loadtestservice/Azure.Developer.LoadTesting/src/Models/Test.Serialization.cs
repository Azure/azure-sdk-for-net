// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Developer.LoadTesting.Models
{
    public partial class Test : IUtf8JsonSerializable, IModelJsonSerializable<Test>
    {
        #region Serialize
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<Test>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<Test>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            // TODO: PatchModelHelper.ValidateFormat(this, options.Format);

            switch (options.Format.ToString())
            {
                case "J":
                case "W":
                    Serialize(writer, options);
                    break;
                case "P":
                    SerializePatch(writer);
                    break;
                default:
                    // Exception was thrown by ValidateFormat.
                    break;
            }
        }

        BinaryData IModelSerializable<Test>.Serialize(ModelSerializerOptions options)
        {
            // TODO: PatchModelHelper.ValidateFormat(this, options.Format);
            return ModelSerializer.SerializeCore(this, options);
        }

        private void Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PassFailCriteria))
            {
                writer.WritePropertyName("passFailCriteria"u8);
                writer.WriteObjectValue(PassFailCriteria);
            }
            if (Optional.IsCollectionDefined(Secrets))
            {
                writer.WritePropertyName("secrets"u8);
                writer.WriteStartObject();
                foreach (var item in Secrets)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Certificate))
            {
                writer.WritePropertyName("certificate"u8);
                writer.WriteObjectValue(Certificate);
            }
            if (Optional.IsCollectionDefined(EnvironmentVariables))
            {
                writer.WritePropertyName("environmentVariables"u8);
                writer.WriteStartObject();
                foreach (var item in EnvironmentVariables)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(LoadTestConfiguration))
            {
                writer.WritePropertyName("loadTestConfiguration"u8);
                writer.WriteObjectValue(LoadTestConfiguration);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnetId"u8);
                writer.WriteStringValue(SubnetId);
            }
            if (Optional.IsDefined(KeyvaultReferenceIdentityType))
            {
                writer.WritePropertyName("keyvaultReferenceIdentityType"u8);
                writer.WriteStringValue(KeyvaultReferenceIdentityType);
            }
            if (Optional.IsDefined(KeyvaultReferenceIdentityId))
            {
                writer.WritePropertyName("keyvaultReferenceIdentityId"u8);
                writer.WriteStringValue(KeyvaultReferenceIdentityId);
            }
            writer.WriteEndObject();
        }

        private void SerializePatch(Utf8JsonWriter writer)
        {
            throw new NotImplementedException();
        }

        public static implicit operator RequestContent(Test model)
            => RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        #endregion Serialize

        #region Deserialize
        internal static Test DeserializeTest(JsonElement element, ModelSerializerOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<PassFailCriteria> passFailCriteria = default;
            Optional<IDictionary<string, Secret>> secrets = default;
            Optional<CertificateMetadata> certificate = default;
            Optional<IDictionary<string, string>> environmentVariables = default;
            Optional<LoadTestConfiguration> loadTestConfiguration = default;
            Optional<TestInputArtifacts> inputArtifacts = default;
            Optional<string> testId = default;
            Optional<string> description = default;
            Optional<string> displayName = default;
            Optional<string> subnetId = default;
            Optional<string> keyvaultReferenceIdentityType = default;
            Optional<string> keyvaultReferenceIdentityId = default;
            Optional<DateTimeOffset> createdDateTime = default;
            Optional<string> createdBy = default;
            Optional<DateTimeOffset> lastModifiedDateTime = default;
            Optional<string> lastModifiedBy = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("passFailCriteria"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    passFailCriteria = PassFailCriteria.DeserializePassFailCriteria(property.Value);
                    continue;
                }
                if (property.NameEquals("secrets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, Secret> dictionary = new Dictionary<string, Secret>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, Secret.DeserializeSecret(property0.Value));
                    }
                    secrets = dictionary;
                    continue;
                }
                if (property.NameEquals("certificate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    certificate = CertificateMetadata.DeserializeCertificateMetadata(property.Value);
                    continue;
                }
                if (property.NameEquals("environmentVariables"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    environmentVariables = dictionary;
                    continue;
                }
                if (property.NameEquals("loadTestConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    loadTestConfiguration = LoadTestConfiguration.DeserializeLoadTestConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("inputArtifacts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputArtifacts = TestInputArtifacts.DeserializeTestInputArtifacts(property.Value);
                    continue;
                }
                if (property.NameEquals("testId"u8))
                {
                    testId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subnetId"u8))
                {
                    subnetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyvaultReferenceIdentityType"u8))
                {
                    keyvaultReferenceIdentityType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyvaultReferenceIdentityId"u8))
                {
                    keyvaultReferenceIdentityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("createdBy"u8))
                {
                    createdBy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastModifiedDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastModifiedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastModifiedBy"u8))
                {
                    lastModifiedBy = property.Value.GetString();
                    continue;
                }
            }
            return new Test(passFailCriteria.Value, Optional.ToDictionary(secrets), certificate.Value, Optional.ToDictionary(environmentVariables), loadTestConfiguration.Value, inputArtifacts.Value, testId.Value, description.Value, displayName.Value, subnetId.Value, keyvaultReferenceIdentityType.Value, keyvaultReferenceIdentityId.Value, Optional.ToNullable(createdDateTime), createdBy.Value, Optional.ToNullable(lastModifiedDateTime), lastModifiedBy.Value);
        }

        Test IModelJsonSerializable<Test>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            // TODO: PatchModelHelper.ValidateFormat(this, options.Format);
            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeTest(doc.RootElement, options);
        }

        Test IModelSerializable<Test>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            // TODO: PatchModelHelper.ValidateFormat(this, options.Format);
            return DeserializeTest(JsonDocument.Parse(data.ToString()).RootElement, options);
        }

        public static explicit operator Test(Response response)
        {
            Argument.AssertNotNull(response, nameof(response));

            using JsonDocument jsonDocument = JsonDocument.Parse(response.ContentStream);
            return DeserializeTest(jsonDocument.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
        #endregion Deserialize

        //void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<Test>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);
    }
}
