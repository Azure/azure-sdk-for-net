// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Json;

namespace Azure.Developer.LoadTesting.Models
{
    public partial class Test : IUtf8JsonSerializable
    {
        // Making this public to prove the concept - this will depend on
        // serialization work?


        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PassFailCriteria))
            {
                writer.WritePropertyName("passFailCriteria"u8);
                writer.WriteObjectValue(PassFailCriteria);
            }
            if (Optional.IsCollectionDefined(Secrets))
            {
                writer.WritePropertyName("secrets"u8);
                writer.WriteStartObject();
                foreach (var item in Secrets)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Certificate))
            {
                writer.WritePropertyName("certificate"u8);
                writer.WriteObjectValue(Certificate);
            }
            if (Optional.IsCollectionDefined(EnvironmentVariables))
            {
                writer.WritePropertyName("environmentVariables"u8);
                writer.WriteStartObject();
                foreach (var item in EnvironmentVariables)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(LoadTestConfiguration))
            {
                writer.WritePropertyName("loadTestConfiguration"u8);
                writer.WriteObjectValue(LoadTestConfiguration);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnetId"u8);
                writer.WriteStringValue(SubnetId);
            }
            if (Optional.IsDefined(KeyvaultReferenceIdentityType))
            {
                writer.WritePropertyName("keyvaultReferenceIdentityType"u8);
                writer.WriteStringValue(KeyvaultReferenceIdentityType);
            }
            if (Optional.IsDefined(KeyvaultReferenceIdentityId))
            {
                writer.WritePropertyName("keyvaultReferenceIdentityId"u8);
                writer.WriteStringValue(KeyvaultReferenceIdentityId);
            }
            writer.WriteEndObject();
        }

        internal void WritePatch(Stream stream)
        {
            _element.WriteTo(stream, 'P');
        }

        internal static Test DeserializeTest(JsonElement element)
        {
            // TODO: Get the raw bytes instead of a JsonElement to avoid the
            // cost of a conversion.
            BinaryData utf8Json = GetBytes(element);
            MutableJsonElement mje = MutableJsonDocument.Parse(utf8Json).RootElement;

            return new Test(mje);
        }

        internal static Test DeserializeTest(BinaryData utf8Json)
        {
            MutableJsonElement mje = MutableJsonDocument.Parse(utf8Json).RootElement;
            return new Test(mje);
        }

        // TODO: Move this to Core, but hopefully not for long
        internal static BinaryData GetBytes(JsonElement element)
        {
            BinaryData bytes;
            using (Stream stream = new MemoryStream())
            {
                using (Utf8JsonWriter writer = new Utf8JsonWriter(stream))
                {
                    element.WriteTo(writer);
                }
                stream.Position = 0;
                bytes = BinaryData.FromStream(stream);
            }

            return bytes;
        }
    }
}
