// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class AzureLoadTestingModelFactory
    {
        /// <summary> Initializes a new instance of Test. </summary>
        /// <param name="passFailCriteria"> Pass fail criteria for a test. </param>
        /// <param name="secrets">
        /// Secrets can be stored in an Azure Key Vault or any other secret store. If the
        /// secret is stored in an Azure Key Vault, the value should be the secret
        /// identifier and the type should be AKV_SECRET_URI. If the secret is stored
        /// elsewhere, the secret value should be provided directly and the type should be
        /// SECRET_VALUE.
        /// </param>
        /// <param name="certificate"> Certificates metadata. </param>
        /// <param name="environmentVariables"> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </param>
        /// <param name="loadTestConfiguration"> The load test configuration. </param>
        /// <param name="inputArtifacts"> The input artifacts for the test. </param>
        /// <param name="testId"> Unique test name as identifier. </param>
        /// <param name="description"> The test description. </param>
        /// <param name="displayName"> Display name of a test. </param>
        /// <param name="subnetId"> Subnet ID on which the load test instances should run. </param>
        /// <param name="keyvaultReferenceIdentityType"> Type of the managed identity referencing the Key vault. </param>
        /// <param name="keyvaultReferenceIdentityId"> Resource Id of the managed identity referencing the Key vault. </param>
        /// <param name="createdDateTime"> The creation datetime(ISO 8601 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(ISO 8601 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.Test"/> instance for mocking. </returns>
        public static Test Test(PassFailCriteria passFailCriteria = null, IReadOnlyDictionary<string, Secret> secrets = null, CertificateMetadata certificate = null, IReadOnlyDictionary<string, string> environmentVariables = null, LoadTestConfiguration loadTestConfiguration = null, TestInputArtifacts inputArtifacts = null, string testId = null, string description = null, string displayName = null, string subnetId = null, string keyvaultReferenceIdentityType = null, string keyvaultReferenceIdentityId = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            secrets ??= new Dictionary<string, Secret>();
            environmentVariables ??= new Dictionary<string, string>();

            return new Test(passFailCriteria, secrets, certificate, environmentVariables, loadTestConfiguration, inputArtifacts, testId, description, displayName, subnetId, keyvaultReferenceIdentityType, keyvaultReferenceIdentityId, createdDateTime, createdBy, lastModifiedDateTime, lastModifiedBy);
        }

        /// <summary> Initializes a new instance of PassFailCriteria. </summary>
        /// <param name="passFailMetrics"> Map of id and pass fail metrics { id  : pass fail metrics }. </param>
        /// <returns> A new <see cref="Models.PassFailCriteria"/> instance for mocking. </returns>
        public static PassFailCriteria PassFailCriteria(IReadOnlyDictionary<string, PassFailMetric> passFailMetrics = null)
        {
            passFailMetrics ??= new Dictionary<string, PassFailMetric>();

            return new PassFailCriteria(passFailMetrics);
        }

        /// <summary> Initializes a new instance of PassFailMetric. </summary>
        /// <param name="clientMetric"> The client metric on which the criteria should be applied. </param>
        /// <param name="aggregate">
        /// The aggregation function to be applied on the client metric. Allowed functions
        /// - ‘percentage’ - for error metric , ‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’,
        /// ‘max’ - for response_time_ms and latency metric, ‘avg’ - for requests_per_sec,
        /// ‘count’ - for requests
        /// </param>
        /// <param name="condition"> The comparison operator. Supported types ‘&gt;’, ‘&lt;’. </param>
        /// <param name="requestName"> Request name for which the Pass fail criteria has to be applied. </param>
        /// <param name="value">
        /// The value to compare with the client metric. Allowed values - ‘error : [0.0 ,
        /// 100.0] unit- % ’, response_time_ms and latency : any integer value unit- ms.
        /// </param>
        /// <param name="action"> Action taken after the threshold is met. Default is ‘continue’. </param>
        /// <param name="actualValue"> The actual value of the client metric for the test run. </param>
        /// <param name="result"> Outcome of the test run. </param>
        /// <returns> A new <see cref="Models.PassFailMetric"/> instance for mocking. </returns>
        public static PassFailMetric PassFailMetric(PFMetrics? clientMetric = null, PFAgFunc? aggregate = null, string condition = null, string requestName = null, float? value = null, PFAction? action = null, float? actualValue = null, PFResult? result = null)
        {
            return new PassFailMetric(clientMetric, aggregate, condition, requestName, value, action, actualValue, result);
        }

        /// <summary> Initializes a new instance of Secret. </summary>
        /// <param name="value"> The value of the secret for the respective type. </param>
        /// <param name="type"> Type of secret. </param>
        /// <returns> A new <see cref="Models.Secret"/> instance for mocking. </returns>
        public static Secret Secret(string value = null, SecretType? type = null)
        {
            return new Secret(value, type);
        }

        /// <summary> Initializes a new instance of CertificateMetadata. </summary>
        /// <param name="value"> The value of the certificate for respective type. </param>
        /// <param name="type"> Type of certificate. </param>
        /// <param name="name"> Name of the certificate. </param>
        /// <returns> A new <see cref="Models.CertificateMetadata"/> instance for mocking. </returns>
        public static CertificateMetadata CertificateMetadata(string value = null, CertificateType? type = null, string name = null)
        {
            return new CertificateMetadata(value, type, name);
        }

        /// <summary> Initializes a new instance of LoadTestConfiguration. </summary>
        /// <param name="engineInstances">
        /// The number of engine instances to execute load test. Supported values are in
        /// range of 1-45. Required for creating a new test.
        /// </param>
        /// <param name="splitAllCSVs">
        /// If false, Azure Load Testing copies and processes your input files unmodified
        /// across all test engine instances. If true, Azure Load Testing splits the CSV
        /// input data evenly across all engine instances. If you provide multiple CSV
        /// files, each file will be split evenly.
        /// </param>
        /// <param name="quickStartTest">
        /// If true, optionalLoadTestConfig is required and JMX script for the load test is
        /// not required to upload.
        /// </param>
        /// <param name="optionalLoadTestConfig"> Optional load test config. </param>
        /// <returns> A new <see cref="Models.LoadTestConfiguration"/> instance for mocking. </returns>
        public static LoadTestConfiguration LoadTestConfiguration(int? engineInstances = null, bool? splitAllCSVs = null, bool? quickStartTest = null, OptionalLoadTestConfig optionalLoadTestConfig = null)
        {
            return new LoadTestConfiguration(engineInstances, splitAllCSVs, quickStartTest, optionalLoadTestConfig);
        }

        /// <summary> Initializes a new instance of OptionalLoadTestConfig. </summary>
        /// <param name="endpointUrl">
        /// Test URL. Provide the complete HTTP URL. For example,
        /// http://contoso-app.azurewebsites.net/login
        /// </param>
        /// <param name="virtualUsers"> No of concurrent virtual users. </param>
        /// <param name="rampUpTime"> Ramp up time. </param>
        /// <param name="duration"> Test run duration. </param>
        /// <returns> A new <see cref="Models.OptionalLoadTestConfig"/> instance for mocking. </returns>
        public static OptionalLoadTestConfig OptionalLoadTestConfig(string endpointUrl = null, int? virtualUsers = null, int? rampUpTime = null, int? duration = null)
        {
            return new OptionalLoadTestConfig(endpointUrl, virtualUsers, rampUpTime, duration);
        }

        /// <summary> Initializes a new instance of TestInputArtifacts. </summary>
        /// <param name="configFileInfo"> File info. </param>
        /// <param name="testScriptFileInfo"> File info. </param>
        /// <param name="userPropFileInfo"> File info. </param>
        /// <param name="inputArtifactsZipFileInfo"> File info. </param>
        /// <param name="additionalFileInfo"> Additional supported files for the test run. </param>
        /// <returns> A new <see cref="Models.TestInputArtifacts"/> instance for mocking. </returns>
        public static TestInputArtifacts TestInputArtifacts(FileInfo configFileInfo = null, FileInfo testScriptFileInfo = null, FileInfo userPropFileInfo = null, FileInfo inputArtifactsZipFileInfo = null, IEnumerable<FileInfo> additionalFileInfo = null)
        {
            additionalFileInfo ??= new List<FileInfo>();

            return new TestInputArtifacts(configFileInfo, testScriptFileInfo, userPropFileInfo, inputArtifactsZipFileInfo, additionalFileInfo?.ToList());
        }

        /// <summary> Initializes a new instance of FileInfo. </summary>
        /// <param name="url"> File URL. </param>
        /// <param name="fileName"> Name of the file. </param>
        /// <param name="fileType"> File type. </param>
        /// <param name="expireDateTime"> Expiry time of the file (ISO 8601 literal format). </param>
        /// <param name="validationStatus"> Validation status of the file. </param>
        /// <param name="validationFailureDetails"> Validation failure error details. </param>
        /// <returns> A new <see cref="Models.FileInfo"/> instance for mocking. </returns>
        public static FileInfo FileInfo(string url = null, string fileName = null, FileType? fileType = null, DateTimeOffset? expireDateTime = null, FileStatus? validationStatus = null, string validationFailureDetails = null)
        {
            return new FileInfo(url, fileName, fileType, expireDateTime, validationStatus, validationFailureDetails);
        }

        /// <summary> Initializes a new instance of TestAppComponents. </summary>
        /// <param name="components">
        /// Azure resource collection { resource id (fully qualified resource Id e.g
        /// subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName})
        /// : resource object } 
        /// </param>
        /// <param name="testId"> Test identifier. </param>
        /// <param name="createdDateTime"> The creation datetime(ISO 8601 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(ISO 8601 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestAppComponents"/> instance for mocking. </returns>
        public static TestAppComponents TestAppComponents(IReadOnlyDictionary<string, AppComponent> components = null, string testId = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            components ??= new Dictionary<string, AppComponent>();

            return new TestAppComponents(components, testId, createdDateTime, createdBy, lastModifiedDateTime, lastModifiedBy);
        }

        /// <summary> Initializes a new instance of AppComponent. </summary>
        /// <param name="resourceId">
        /// fully qualified resource Id e.g
        /// subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}
        /// </param>
        /// <param name="resourceName"> Azure resource name, required while creating the app component. </param>
        /// <param name="resourceType"> Azure resource type, required while creating the app component. </param>
        /// <param name="displayName"> Azure resource display name. </param>
        /// <param name="resourceGroup"> Resource group name of the Azure resource. </param>
        /// <param name="subscriptionId"> Subscription Id of the Azure resource. </param>
        /// <param name="kind"> Kind of Azure resource type. </param>
        /// <returns> A new <see cref="Models.AppComponent"/> instance for mocking. </returns>
        public static AppComponent AppComponent(string resourceId = null, string resourceName = null, string resourceType = null, string displayName = null, string resourceGroup = null, string subscriptionId = null, string kind = null)
        {
            return new AppComponent(resourceId, resourceName, resourceType, displayName, resourceGroup, subscriptionId, kind);
        }

        /// <summary> Initializes a new instance of TestServerMetricConfig. </summary>
        /// <param name="testId"> Test identifier. </param>
        /// <param name="metrics">
        /// Azure resource metrics collection {metric id : metrics object} (Refer :
        /// https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition
        /// for metric id).
        /// </param>
        /// <param name="createdDateTime"> The creation datetime(ISO 8601 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(ISO 8601 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestServerMetricConfig"/> instance for mocking. </returns>
        public static TestServerMetricConfig TestServerMetricConfig(string testId = null, IReadOnlyDictionary<string, ResourceMetric> metrics = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            metrics ??= new Dictionary<string, ResourceMetric>();

            return new TestServerMetricConfig(testId, metrics, createdDateTime, createdBy, lastModifiedDateTime, lastModifiedBy);
        }

        /// <summary> Initializes a new instance of ResourceMetric. </summary>
        /// <param name="id"> Unique name for metric. </param>
        /// <param name="resourceId"> Azure resource id. </param>
        /// <param name="metricNamespace"> Metric name space. </param>
        /// <param name="displayDescription"> Metric description. </param>
        /// <param name="name"> The invariant value of metric name. </param>
        /// <param name="aggregation"> Metric aggregation. </param>
        /// <param name="unit"> Metric unit. </param>
        /// <param name="resourceType"> Azure resource type. </param>
        /// <returns> A new <see cref="Models.ResourceMetric"/> instance for mocking. </returns>
        public static ResourceMetric ResourceMetric(string id = null, string resourceId = null, string metricNamespace = null, string displayDescription = null, string name = null, string aggregation = null, string unit = null, string resourceType = null)
        {
            return new ResourceMetric(id, resourceId, metricNamespace, displayDescription, name, aggregation, unit, resourceType);
        }

        /// <summary> Initializes a new instance of TestRun. </summary>
        /// <param name="passFailCriteria"> Pass fail criteria for a test. </param>
        /// <param name="secrets">
        /// Secrets can be stored in an Azure Key Vault or any other secret store. If the
        /// secret is stored in an Azure Key Vault, the value should be the secret
        /// identifier and the type should be AKV_SECRET_URI. If the secret is stored
        /// elsewhere, the secret value should be provided directly and the type should be
        /// SECRET_VALUE.
        /// </param>
        /// <param name="certificate"> Certificates metadata. </param>
        /// <param name="environmentVariables"> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </param>
        /// <param name="errorDetails"> Error details if there is any failure in load test run. </param>
        /// <param name="testRunStatistics"> Test run statistics. </param>
        /// <param name="loadTestConfiguration"> The load test configuration. </param>
        /// <param name="testArtifacts"> Collection of test run artifacts. </param>
        /// <param name="testResult"> Test result for pass/Fail criteria used during the test run. </param>
        /// <param name="virtualUsers"> Number of virtual users, for which test has been run. </param>
        /// <param name="displayName"> Display name of a testRun. </param>
        /// <param name="testId"> Associated test Id. </param>
        /// <param name="description"> The test run description. </param>
        /// <param name="status"> The test run status. </param>
        /// <param name="startDateTime"> The test run start DateTime(ISO 8601 literal format). </param>
        /// <param name="endDateTime"> The test run end DateTime(ISO 8601 literal format). </param>
        /// <param name="executedDateTime"> Test run initiated time. </param>
        /// <param name="portalUrl"> Portal url. </param>
        /// <param name="duration"> Test run duration in milliseconds. </param>
        /// <param name="subnetId"> Subnet ID on which the load test instances should run. </param>
        /// <param name="createdDateTime"> The creation datetime(ISO 8601 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(ISO 8601 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestRun"/> instance for mocking. </returns>
        public static TestRun TestRun(PassFailCriteria passFailCriteria = null, IReadOnlyDictionary<string, Secret> secrets = null, CertificateMetadata certificate = null, IReadOnlyDictionary<string, string> environmentVariables = null, IEnumerable<ErrorDetails> errorDetails = null, IReadOnlyDictionary<string, TestRunStatistics> testRunStatistics = null, LoadTestConfiguration loadTestConfiguration = null, TestRunArtifacts testArtifacts = null, PFTestResult? testResult = null, int? virtualUsers = null, string displayName = null, string testId = null, string description = null, Status? status = null, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, DateTimeOffset? executedDateTime = null, string portalUrl = null, int? duration = null, string subnetId = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            secrets ??= new Dictionary<string, Secret>();
            environmentVariables ??= new Dictionary<string, string>();
            errorDetails ??= new List<ErrorDetails>();
            testRunStatistics ??= new Dictionary<string, TestRunStatistics>();

            return new TestRun(passFailCriteria, secrets, certificate, environmentVariables, errorDetails?.ToList(), testRunStatistics, loadTestConfiguration, testArtifacts, testResult, virtualUsers, displayName, testId, description, status, startDateTime, endDateTime, executedDateTime, portalUrl, duration, subnetId, createdDateTime, createdBy, lastModifiedDateTime, lastModifiedBy);
        }

        /// <summary> Initializes a new instance of ErrorDetails. </summary>
        /// <param name="message"> Error details in case test run was not successfully run. </param>
        /// <returns> A new <see cref="Models.ErrorDetails"/> instance for mocking. </returns>
        public static ErrorDetails ErrorDetails(string message = null)
        {
            return new ErrorDetails(message);
        }

        /// <summary> Initializes a new instance of TestRunStatistics. </summary>
        /// <param name="transaction"> Transaction name. </param>
        /// <param name="sampleCount"> Sampler count. </param>
        /// <param name="errorCount"> Error count. </param>
        /// <param name="errorPct"> Error percentage. </param>
        /// <param name="meanResTime"> Mean response time. </param>
        /// <param name="medianResTime"> Median response time. </param>
        /// <param name="maxResTime"> Max response time. </param>
        /// <param name="minResTime"> Minimum response time. </param>
        /// <param name="pct1ResTime"> 90 percentile response time. </param>
        /// <param name="pct2ResTime"> 95 percentile response time. </param>
        /// <param name="pct3ResTime"> 99 percentile response time. </param>
        /// <param name="throughput"> Throughput. </param>
        /// <param name="receivedKBytesPerSec"> Received network bytes. </param>
        /// <param name="sentKBytesPerSec"> Send network bytes. </param>
        /// <returns> A new <see cref="Models.TestRunStatistics"/> instance for mocking. </returns>
        public static TestRunStatistics TestRunStatistics(string transaction = null, float? sampleCount = null, float? errorCount = null, float? errorPct = null, float? meanResTime = null, float? medianResTime = null, float? maxResTime = null, float? minResTime = null, float? pct1ResTime = null, float? pct2ResTime = null, float? pct3ResTime = null, float? throughput = null, float? receivedKBytesPerSec = null, float? sentKBytesPerSec = null)
        {
            return new TestRunStatistics(transaction, sampleCount, errorCount, errorPct, meanResTime, medianResTime, maxResTime, minResTime, pct1ResTime, pct2ResTime, pct3ResTime, throughput, receivedKBytesPerSec, sentKBytesPerSec);
        }

        /// <summary> Initializes a new instance of TestRunArtifacts. </summary>
        /// <param name="inputArtifacts"> The input artifacts for the test run. </param>
        /// <param name="outputArtifacts"> The output artifacts for the test run. </param>
        /// <returns> A new <see cref="Models.TestRunArtifacts"/> instance for mocking. </returns>
        public static TestRunArtifacts TestRunArtifacts(TestRunInputArtifacts inputArtifacts = null, TestRunOutputArtifacts outputArtifacts = null)
        {
            return new TestRunArtifacts(inputArtifacts, outputArtifacts);
        }

        /// <summary> Initializes a new instance of TestRunInputArtifacts. </summary>
        /// <param name="configFileInfo"> File info. </param>
        /// <param name="testScriptFileInfo"> File info. </param>
        /// <param name="userPropFileInfo"> File info. </param>
        /// <param name="inputArtifactsZipFileInfo"> File info. </param>
        /// <param name="additionalFileInfo"> Additional supported files for the test run. </param>
        /// <returns> A new <see cref="Models.TestRunInputArtifacts"/> instance for mocking. </returns>
        public static TestRunInputArtifacts TestRunInputArtifacts(FileInfo configFileInfo = null, FileInfo testScriptFileInfo = null, FileInfo userPropFileInfo = null, FileInfo inputArtifactsZipFileInfo = null, IEnumerable<FileInfo> additionalFileInfo = null)
        {
            additionalFileInfo ??= new List<FileInfo>();

            return new TestRunInputArtifacts(configFileInfo, testScriptFileInfo, userPropFileInfo, inputArtifactsZipFileInfo, additionalFileInfo?.ToList());
        }

        /// <summary> Initializes a new instance of TestRunOutputArtifacts. </summary>
        /// <param name="resultFileInfo"> File info. </param>
        /// <param name="logsFileInfo"> File info. </param>
        /// <returns> A new <see cref="Models.TestRunOutputArtifacts"/> instance for mocking. </returns>
        public static TestRunOutputArtifacts TestRunOutputArtifacts(FileInfo resultFileInfo = null, FileInfo logsFileInfo = null)
        {
            return new TestRunOutputArtifacts(resultFileInfo, logsFileInfo);
        }

        /// <summary> Initializes a new instance of TestRunAppComponents. </summary>
        /// <param name="components">
        /// Azure resource collection { resource id (fully qualified resource Id e.g
        /// subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName})
        /// : resource object } 
        /// </param>
        /// <param name="testRunId"> Test run identifier. </param>
        /// <param name="createdDateTime"> The creation datetime(ISO 8601 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(ISO 8601 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestRunAppComponents"/> instance for mocking. </returns>
        public static TestRunAppComponents TestRunAppComponents(IReadOnlyDictionary<string, AppComponent> components = null, string testRunId = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            components ??= new Dictionary<string, AppComponent>();

            return new TestRunAppComponents(components, testRunId, createdDateTime, createdBy, lastModifiedDateTime, lastModifiedBy);
        }

        /// <summary> Initializes a new instance of TestRunServerMetricConfig. </summary>
        /// <param name="testRunId"> Test run identifier. </param>
        /// <param name="metrics">
        /// Azure resource metrics collection {metric id : metrics object} (Refer :
        /// https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition
        /// for metric id).
        /// </param>
        /// <param name="createdDateTime"> The creation datetime(ISO 8601 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(ISO 8601 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestRunServerMetricConfig"/> instance for mocking. </returns>
        public static TestRunServerMetricConfig TestRunServerMetricConfig(string testRunId = null, IReadOnlyDictionary<string, ResourceMetric> metrics = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            metrics ??= new Dictionary<string, ResourceMetric>();

            return new TestRunServerMetricConfig(testRunId, metrics, createdDateTime, createdBy, lastModifiedDateTime, lastModifiedBy);
        }

        /// <summary> Initializes a new instance of DimensionValueList. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.DimensionValueList"/> instance for mocking. </returns>
        public static DimensionValueList DimensionValueList(IEnumerable<string> value = null)
        {
            value ??= new List<string>();

            return new DimensionValueList(value?.ToList());
        }

        /// <summary> Initializes a new instance of MetricDefinitionCollection. </summary>
        /// <param name="value"> the values for the metric definitions. </param>
        /// <returns> A new <see cref="Models.MetricDefinitionCollection"/> instance for mocking. </returns>
        public static MetricDefinitionCollection MetricDefinitionCollection(IEnumerable<MetricDefinition> value = null)
        {
            value ??= new List<MetricDefinition>();

            return new MetricDefinitionCollection(value?.ToList());
        }

        /// <summary> Initializes a new instance of MetricDefinition. </summary>
        /// <param name="dimensions"> List of dimensions. </param>
        /// <param name="description"> The metric description. </param>
        /// <param name="name"> The metric name. </param>
        /// <param name="namespace"> The namespace the metric belongs to. </param>
        /// <param name="primaryAggregationType"> The primary aggregation type value defining how to use the values for display. </param>
        /// <param name="supportedAggregationTypes"> The collection of what all aggregation types are supported. </param>
        /// <param name="unit"> The unit of the metric. </param>
        /// <param name="metricAvailabilities">
        /// Metric availability specifies the time grain (aggregation interval or
        /// frequency).
        /// </param>
        /// <returns> A new <see cref="Models.MetricDefinition"/> instance for mocking. </returns>
        public static MetricDefinition MetricDefinition(IEnumerable<NameAndDesc> dimensions = null, string description = null, string name = null, string @namespace = null, AggregationType? primaryAggregationType = null, IEnumerable<string> supportedAggregationTypes = null, MetricUnit? unit = null, IEnumerable<MetricAvailability> metricAvailabilities = null)
        {
            dimensions ??= new List<NameAndDesc>();
            supportedAggregationTypes ??= new List<string>();
            metricAvailabilities ??= new List<MetricAvailability>();

            return new MetricDefinition(dimensions?.ToList(), description, name, @namespace, primaryAggregationType, supportedAggregationTypes?.ToList(), unit, metricAvailabilities?.ToList());
        }

        /// <summary> Initializes a new instance of NameAndDesc. </summary>
        /// <param name="description"> The description. </param>
        /// <param name="name"> The name. </param>
        /// <returns> A new <see cref="Models.NameAndDesc"/> instance for mocking. </returns>
        public static NameAndDesc NameAndDesc(string description = null, string name = null)
        {
            return new NameAndDesc(description, name);
        }

        /// <summary> Initializes a new instance of MetricAvailability. </summary>
        /// <param name="timeGrain">
        /// The time grain specifies the aggregation interval for the metric. Expressed as
        /// a duration 'PT1M', 'PT1H', etc.
        /// </param>
        /// <returns> A new <see cref="Models.MetricAvailability"/> instance for mocking. </returns>
        public static MetricAvailability MetricAvailability(TimeGrain? timeGrain = null)
        {
            return new MetricAvailability(timeGrain);
        }

        /// <summary> Initializes a new instance of MetricNamespaceCollection. </summary>
        /// <param name="value"> The values for the metric namespaces. </param>
        /// <returns> A new <see cref="Models.MetricNamespaceCollection"/> instance for mocking. </returns>
        public static MetricNamespaceCollection MetricNamespaceCollection(IEnumerable<MetricNamespace> value = null)
        {
            value ??= new List<MetricNamespace>();

            return new MetricNamespaceCollection(value?.ToList());
        }

        /// <summary> Initializes a new instance of MetricNamespace. </summary>
        /// <param name="description"> The namespace description. </param>
        /// <param name="name"> The metric namespace name. </param>
        /// <returns> A new <see cref="Models.MetricNamespace"/> instance for mocking. </returns>
        public static MetricNamespace MetricNamespace(string description = null, string name = null)
        {
            return new MetricNamespace(description, name);
        }

        /// <summary> Initializes a new instance of TimeSeriesElement. </summary>
        /// <param name="data"> An array of data points representing the metric values. </param>
        /// <param name="dimensionValues"> The dimension values. </param>
        /// <returns> A new <see cref="Models.TimeSeriesElement"/> instance for mocking. </returns>
        public static TimeSeriesElement TimeSeriesElement(IEnumerable<MetricValue> data = null, IEnumerable<DimensionValue> dimensionValues = null)
        {
            data ??= new List<MetricValue>();
            dimensionValues ??= new List<DimensionValue>();

            return new TimeSeriesElement(data?.ToList(), dimensionValues?.ToList());
        }

        /// <summary> Initializes a new instance of MetricValue. </summary>
        /// <param name="timestamp"> The timestamp for the metric value in ISO 8601 format. </param>
        /// <param name="value"> The metric value. </param>
        /// <returns> A new <see cref="Models.MetricValue"/> instance for mocking. </returns>
        public static MetricValue MetricValue(string timestamp = null, float? value = null)
        {
            return new MetricValue(timestamp, value);
        }

        /// <summary> Initializes a new instance of DimensionValue. </summary>
        /// <param name="name"> The name of the dimension. </param>
        /// <param name="value"> The value of the dimension. </param>
        /// <returns> A new <see cref="Models.DimensionValue"/> instance for mocking. </returns>
        public static DimensionValue DimensionValue(string name = null, string value = null)
        {
            return new DimensionValue(name, value);
        }
    }
}
