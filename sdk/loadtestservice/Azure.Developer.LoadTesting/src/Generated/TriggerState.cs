// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Current state of a trigger. </summary>
    public readonly partial struct TriggerState : IEquatable<TriggerState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TriggerState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TriggerState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string PausedValue = "Paused";
        private const string CompletedValue = "Completed";
        private const string DisabledValue = "Disabled";

        /// <summary> The trigger is active. </summary>
        public static TriggerState Active { get; } = new TriggerState(ActiveValue);
        /// <summary> The trigger is paused manually. </summary>
        public static TriggerState Paused { get; } = new TriggerState(PausedValue);
        /// <summary> The trigger is completed. </summary>
        public static TriggerState Completed { get; } = new TriggerState(CompletedValue);
        /// <summary> The trigger is disabled due to error. </summary>
        public static TriggerState Disabled { get; } = new TriggerState(DisabledValue);
        /// <summary> Determines if two <see cref="TriggerState"/> values are the same. </summary>
        public static bool operator ==(TriggerState left, TriggerState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TriggerState"/> values are not the same. </summary>
        public static bool operator !=(TriggerState left, TriggerState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TriggerState"/>. </summary>
        public static implicit operator TriggerState(string value) => new TriggerState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TriggerState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TriggerState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
