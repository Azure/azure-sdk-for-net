// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Types of file supported. </summary>
    public readonly partial struct LoadTestingFileType : IEquatable<LoadTestingFileType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LoadTestingFileType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LoadTestingFileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string JmxFileValue = "JMX_FILE";
        private const string UserPropertiesValue = "USER_PROPERTIES";
        private const string AdditionalArtifactsValue = "ADDITIONAL_ARTIFACTS";
        private const string ZippedArtifactsValue = "ZIPPED_ARTIFACTS";
        private const string UrlTestConfigValue = "URL_TEST_CONFIG";
        private const string TestScriptValue = "TEST_SCRIPT";

        /// <summary> If the file is a JMX script. </summary>
        public static LoadTestingFileType JmxFile { get; } = new LoadTestingFileType(JmxFileValue);
        /// <summary> If the file is a user properties file. </summary>
        public static LoadTestingFileType UserProperties { get; } = new LoadTestingFileType(UserPropertiesValue);
        /// <summary> If the file is not among any of the other supported file types. </summary>
        public static LoadTestingFileType AdditionalArtifacts { get; } = new LoadTestingFileType(AdditionalArtifactsValue);
        /// <summary> If the file is a compressed archive containing a collection of various artifacts or resources. </summary>
        public static LoadTestingFileType ZippedArtifacts { get; } = new LoadTestingFileType(ZippedArtifactsValue);
        /// <summary> If the file is a JSON config file to define the requests for a URL test. </summary>
        public static LoadTestingFileType UrlTestConfig { get; } = new LoadTestingFileType(UrlTestConfigValue);
        /// <summary> If the file is a test script. </summary>
        public static LoadTestingFileType TestScript { get; } = new LoadTestingFileType(TestScriptValue);
        /// <summary> Determines if two <see cref="LoadTestingFileType"/> values are the same. </summary>
        public static bool operator ==(LoadTestingFileType left, LoadTestingFileType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LoadTestingFileType"/> values are not the same. </summary>
        public static bool operator !=(LoadTestingFileType left, LoadTestingFileType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LoadTestingFileType"/>. </summary>
        public static implicit operator LoadTestingFileType(string value) => new LoadTestingFileType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LoadTestingFileType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LoadTestingFileType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
