// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class DeveloperLoadTestingModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.Test"/>. </summary>
        /// <param name="passFailCriteria"> Pass fail criteria for a test. </param>
        /// <param name="autoStopCriteria"> Auto stop criteria for a test. This will automatically stop a load test if the error percentage is high for a certain time window. </param>
        /// <param name="secrets">
        /// Secrets can be stored in an Azure Key Vault or any other secret store. If the
        /// secret is stored in an Azure Key Vault, the value should be the secret
        /// identifier and the type should be AKV_SECRET_URI. If the secret is stored
        /// elsewhere, the secret value should be provided directly and the type should be
        /// SECRET_VALUE.
        /// </param>
        /// <param name="certificate"> Certificates metadata. </param>
        /// <param name="environmentVariables"> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </param>
        /// <param name="loadTestConfiguration"> The load test configuration. </param>
        /// <param name="baselineTestRunId"> Id of the test run to be marked as baseline to view trends of client-side metrics from recent test runs. </param>
        /// <param name="inputArtifacts"> The input artifacts for the test. </param>
        /// <param name="testId"> Unique test identifier for the load test, must contain only lower-case alphabetic, numeric, underscore or hyphen characters. </param>
        /// <param name="description"> The test description. </param>
        /// <param name="displayName"> Display name of a test. </param>
        /// <param name="subnetId"> Subnet ID on which the load test instances should run. </param>
        /// <param name="kind"> Kind of test. </param>
        /// <param name="publicIpDisabled"> Inject load test engines without deploying public IP for outbound access. </param>
        /// <param name="keyvaultReferenceIdentityType"> Type of the managed identity referencing the Key vault. </param>
        /// <param name="keyvaultReferenceIdentityId"> Resource Id of the managed identity referencing the Key vault. </param>
        /// <param name="metricsReferenceIdentityType"> Type of the managed identity referencing the metrics. </param>
        /// <param name="metricsReferenceIdentityId"> Resource Id of the managed identity referencing the metrics. </param>
        /// <param name="engineBuiltInIdentityType"> Type of the managed identity built in load test engines. </param>
        /// <param name="engineBuiltInIdentityIds"> Resource Ids of the managed identity built in to load test engines. Required if engineBuiltInIdentityType is UserAssigned. </param>
        /// <param name="createdDateTime"> The creation datetime(RFC 3339 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(RFC 3339 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.Test"/> instance for mocking. </returns>
        public static Test Test(PassFailCriteria passFailCriteria = null, AutoStopCriteria autoStopCriteria = null, IDictionary<string, TestSecret> secrets = null, CertificateMetadata certificate = null, IDictionary<string, string> environmentVariables = null, LoadTestConfiguration loadTestConfiguration = null, string baselineTestRunId = null, TestInputArtifacts inputArtifacts = null, string testId = null, string description = null, string displayName = null, string subnetId = null, TestKind? kind = null, bool? publicIpDisabled = null, string keyvaultReferenceIdentityType = null, string keyvaultReferenceIdentityId = null, LoadTestingManagedIdentityType? metricsReferenceIdentityType = null, string metricsReferenceIdentityId = null, LoadTestingManagedIdentityType? engineBuiltInIdentityType = null, IEnumerable<string> engineBuiltInIdentityIds = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            secrets ??= new Dictionary<string, TestSecret>();
            environmentVariables ??= new Dictionary<string, string>();
            engineBuiltInIdentityIds ??= new List<string>();

            return new Test(
                passFailCriteria,
                autoStopCriteria,
                secrets,
                certificate,
                environmentVariables,
                loadTestConfiguration,
                baselineTestRunId,
                inputArtifacts,
                testId,
                description,
                displayName,
                subnetId,
                kind,
                publicIpDisabled,
                keyvaultReferenceIdentityType,
                keyvaultReferenceIdentityId,
                metricsReferenceIdentityType,
                metricsReferenceIdentityId,
                engineBuiltInIdentityType,
                engineBuiltInIdentityIds?.ToList(),
                createdDateTime,
                createdBy,
                lastModifiedDateTime,
                lastModifiedBy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PassFailMetric"/>. </summary>
        /// <param name="clientMetric"> The client metric on which the criteria should be applied. </param>
        /// <param name="aggregate">
        /// The aggregation function to be applied on the client metric. Allowed functions
        /// - ‘percentage’ - for error metric , ‘avg’, percentiles like ‘p50’, ‘p90’, &amp; so on, ‘min’,
        /// ‘max’ - for response_time_ms and latency metric, ‘avg’ - for requests_per_sec,
        /// ‘count’ - for requests
        /// </param>
        /// <param name="condition"> The comparison operator. Supported types ‘&gt;’, ‘&lt;’. </param>
        /// <param name="requestName"> Request name for which the Pass fail criteria has to be applied. </param>
        /// <param name="value">
        /// The value to compare with the client metric. Allowed values - ‘error : [0.0 ,
        /// 100.0] unit- % ’, response_time_ms and latency : any integer value unit- ms.
        /// </param>
        /// <param name="action"> Action taken after the threshold is met. Default is ‘continue’. </param>
        /// <param name="actualValue"> The actual value of the client metric for the test run. </param>
        /// <param name="result"> Outcome of the test run. </param>
        /// <returns> A new <see cref="Models.PassFailMetric"/> instance for mocking. </returns>
        public static PassFailMetric PassFailMetric(PFMetrics? clientMetric = null, PassFailAggregationFunction? aggregate = null, string condition = null, string requestName = null, double? value = null, PassFailAction? action = null, double? actualValue = null, PassFailResult? result = null)
        {
            return new PassFailMetric(
                clientMetric,
                aggregate,
                condition,
                requestName,
                value,
                action,
                actualValue,
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PassFailServerMetric"/>. </summary>
        /// <param name="resourceId"> The resource id of the resource emitting the metric. </param>
        /// <param name="metricNamespace"> The server metric namespace. </param>
        /// <param name="metricName"> The server metric name. </param>
        /// <param name="aggregation"> Aggregation Type. </param>
        /// <param name="condition"> The comparison operator. Supported types ‘&gt;’, ‘&lt;’. </param>
        /// <param name="value"> The value to compare with the server metric. </param>
        /// <param name="action"> Action taken after the threshold is met. Default is ‘continue’. </param>
        /// <param name="actualValue"> The actual value of the server metric. </param>
        /// <param name="result"> Outcome of the test run. </param>
        /// <returns> A new <see cref="Models.PassFailServerMetric"/> instance for mocking. </returns>
        public static PassFailServerMetric PassFailServerMetric(ResourceIdentifier resourceId = null, string metricNamespace = null, string metricName = null, string aggregation = null, string condition = null, double value = default, PassFailAction? action = null, double? actualValue = null, PassFailResult? result = null)
        {
            return new PassFailServerMetric(
                resourceId,
                metricNamespace,
                metricName,
                aggregation,
                condition,
                value,
                action,
                actualValue,
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestInputArtifacts"/>. </summary>
        /// <param name="configFileInfo"> The load test YAML file that contains the the test configuration. </param>
        /// <param name="testScriptFileInfo"> The test script file for the test run. </param>
        /// <param name="userPropertyFileInfo"> The user properties file. </param>
        /// <param name="inputArtifactsZipFileInfo"> The zip file with all input artifacts. </param>
        /// <param name="urlTestConfigFileInfo"> The config json file for url based test. </param>
        /// <param name="additionalFileInfo"> Additional supported files for the test run. </param>
        /// <returns> A new <see cref="Models.TestInputArtifacts"/> instance for mocking. </returns>
        public static TestInputArtifacts TestInputArtifacts(TestFileInfo configFileInfo = null, TestFileInfo testScriptFileInfo = null, TestFileInfo userPropertyFileInfo = null, TestFileInfo inputArtifactsZipFileInfo = null, TestFileInfo urlTestConfigFileInfo = null, IEnumerable<TestFileInfo> additionalFileInfo = null)
        {
            additionalFileInfo ??= new List<TestFileInfo>();

            return new TestInputArtifacts(
                configFileInfo,
                testScriptFileInfo,
                userPropertyFileInfo,
                inputArtifactsZipFileInfo,
                urlTestConfigFileInfo,
                additionalFileInfo?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestFileInfo"/>. </summary>
        /// <param name="fileName"> Name of the file. </param>
        /// <param name="uri"> File URL. </param>
        /// <param name="fileType"> File type. </param>
        /// <param name="expireDateTime"> Expiry time of the file (RFC 3339 literal format). </param>
        /// <param name="validationStatus"> Validation status of the file. </param>
        /// <param name="validationFailureDetails"> Validation failure error details. </param>
        /// <returns> A new <see cref="Models.TestFileInfo"/> instance for mocking. </returns>
        public static TestFileInfo TestFileInfo(string fileName = null, Uri uri = null, FileType? fileType = null, DateTimeOffset? expireDateTime = null, FileValidationStatus? validationStatus = null, string validationFailureDetails = null)
        {
            return new TestFileInfo(
                fileName,
                uri,
                fileType,
                expireDateTime,
                validationStatus,
                validationFailureDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestAppComponents"/>. </summary>
        /// <param name="components">
        /// Azure resource collection { resource id (fully qualified resource Id e.g
        /// subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName})
        /// : resource object }
        /// </param>
        /// <param name="testId"> Test identifier. </param>
        /// <param name="createdDateTime"> The creation datetime(RFC 3339 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(RFC 3339 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestAppComponents"/> instance for mocking. </returns>
        public static TestAppComponents TestAppComponents(IDictionary<string, AppComponent> components = null, string testId = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            components ??= new Dictionary<string, AppComponent>();

            return new TestAppComponents(
                components,
                testId,
                createdDateTime,
                createdBy,
                lastModifiedDateTime,
                lastModifiedBy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AppComponent"/>. </summary>
        /// <param name="resourceId"> fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}. </param>
        /// <param name="resourceName"> Azure resource name, required while creating the app component. </param>
        /// <param name="resourceType"> Azure resource type, required while creating the app component. </param>
        /// <param name="displayName"> Azure resource display name. </param>
        /// <param name="resourceGroup"> Resource group name of the Azure resource. </param>
        /// <param name="subscriptionId"> Subscription Id of the Azure resource. </param>
        /// <param name="kind"> Kind of Azure resource type. </param>
        /// <returns> A new <see cref="Models.AppComponent"/> instance for mocking. </returns>
        public static AppComponent AppComponent(ResourceIdentifier resourceId = null, string resourceName = null, string resourceType = null, string displayName = null, string resourceGroup = null, string subscriptionId = null, string kind = null)
        {
            return new AppComponent(
                resourceId,
                resourceName,
                resourceType,
                displayName,
                resourceGroup,
                subscriptionId,
                kind,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestServerMetricsConfiguration"/>. </summary>
        /// <param name="testId"> Test identifier. </param>
        /// <param name="metrics">
        /// Azure resource metrics collection {metric id : metrics object} (Refer :
        /// https://learn.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition
        /// for metric id).
        /// </param>
        /// <param name="createdDateTime"> The creation datetime(RFC 3339 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(RFC 3339 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestServerMetricsConfiguration"/> instance for mocking. </returns>
        public static TestServerMetricsConfiguration TestServerMetricsConfiguration(string testId = null, IDictionary<string, ResourceMetric> metrics = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            metrics ??= new Dictionary<string, ResourceMetric>();

            return new TestServerMetricsConfiguration(
                testId,
                metrics,
                createdDateTime,
                createdBy,
                lastModifiedDateTime,
                lastModifiedBy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceMetric"/>. </summary>
        /// <param name="id"> Unique name for metric. </param>
        /// <param name="resourceId"> Azure resource id. </param>
        /// <param name="metricNamespace"> Metric name space. </param>
        /// <param name="displayDescription"> Metric description. </param>
        /// <param name="name"> The invariant value of metric name. </param>
        /// <param name="aggregation"> Metric aggregation. </param>
        /// <param name="unit"> Metric unit. </param>
        /// <param name="resourceType"> Azure resource type. </param>
        /// <returns> A new <see cref="Models.ResourceMetric"/> instance for mocking. </returns>
        public static ResourceMetric ResourceMetric(string id = null, ResourceIdentifier resourceId = null, string metricNamespace = null, string displayDescription = null, string name = null, string aggregation = null, string unit = null, string resourceType = null)
        {
            return new ResourceMetric(
                id,
                resourceId,
                metricNamespace,
                displayDescription,
                name,
                aggregation,
                unit,
                resourceType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestProfile"/>. </summary>
        /// <param name="testProfileId"> Unique identifier for the test profile, must contain only lower-case alphabetic, numeric, underscore or hyphen characters. </param>
        /// <param name="displayName"> Display name of the test profile. </param>
        /// <param name="description"> Description for the test profile. </param>
        /// <param name="testId"> Associated test ID for the test profile. This property is required for creating a Test Profile and it's not allowed to be updated. </param>
        /// <param name="targetResourceId"> Target resource ID on which the test profile is created. This property is required for creating a Test Profile and it's not allowed to be updated. </param>
        /// <param name="targetResourceConfigurations">
        /// Configurations of the target resource on which testing would be done.
        /// Please note <see cref="TargetResourceConfigurations"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FunctionFlexConsumptionTargetResourceConfigurations"/>.
        /// </param>
        /// <param name="createdDateTime"> The creation datetime(RFC 3339 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(RFC 3339 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestProfile"/> instance for mocking. </returns>
        public static TestProfile TestProfile(string testProfileId = null, string displayName = null, string description = null, string testId = null, ResourceIdentifier targetResourceId = null, TargetResourceConfigurations targetResourceConfigurations = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            return new TestProfile(
                testProfileId,
                displayName,
                description,
                testId,
                targetResourceId,
                targetResourceConfigurations,
                createdDateTime,
                createdBy,
                lastModifiedDateTime,
                lastModifiedBy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestRun"/>. </summary>
        /// <param name="testRunId"> Unique test run identifier for the load test run, must contain only lower-case alphabetic, numeric, underscore or hyphen characters. </param>
        /// <param name="passFailCriteria"> Pass fail criteria for a test. </param>
        /// <param name="autoStopCriteria"> Auto stop criteria for a test. This will automatically stop a load test if the error percentage is high for a certain time window. </param>
        /// <param name="secrets">
        /// Secrets can be stored in an Azure Key Vault or any other secret store. If the
        /// secret is stored in an Azure Key Vault, the value should be the secret
        /// identifier and the type should be AKV_SECRET_URI. If the secret is stored
        /// elsewhere, the secret value should be provided directly and the type should be
        /// SECRET_VALUE.
        /// </param>
        /// <param name="certificate"> Certificates metadata. </param>
        /// <param name="environmentVariables"> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </param>
        /// <param name="errorDetails"> Error details if there is any failure in load test run. </param>
        /// <param name="testRunStatistics">
        /// Test run statistics. Key is the sampler name and value is the set of statistics for performance metrics like response time, throughput, etc. from the load test run.
        /// The sampler name is the same as the name mentioned in the test script.
        /// Sampler name "Total" represents the aggregated statistics of all the samplers.
        /// </param>
        /// <param name="regionalStatistics">
        /// Regional statistics. Key is the Azure region name and value is the test run statistics.
        /// The region name should of format accepted by ARM, and should be a region supported by Azure Load Testing. For example, East US should be passed as "eastus".
        /// The region name must match one of the strings in the "Name" column returned from running the "az account list-locations -o table" Azure CLI command.
        /// </param>
        /// <param name="loadTestConfiguration"> The load test configuration. </param>
        /// <param name="testArtifacts"> Collection of test run artifacts. </param>
        /// <param name="testResult"> Test result for pass/Fail criteria used during the test run. </param>
        /// <param name="virtualUsers"> Number of virtual users, for which test has been run. </param>
        /// <param name="displayName"> Display name of a testRun. </param>
        /// <param name="testId"> Associated test Id. </param>
        /// <param name="description"> The test run description. </param>
        /// <param name="status"> The test run status. </param>
        /// <param name="startDateTime"> The test run start DateTime(RFC 3339 literal format). </param>
        /// <param name="endDateTime"> The test run end DateTime(RFC 3339 literal format). </param>
        /// <param name="executedDateTime"> Test run initiated time. </param>
        /// <param name="portalUri"> Portal url. </param>
        /// <param name="duration"> Test run duration in milliseconds. </param>
        /// <param name="virtualUserHours"> Virtual user hours consumed by the test run. </param>
        /// <param name="subnetId"> Subnet ID on which the load test instances should run. </param>
        /// <param name="kind"> Type of test. </param>
        /// <param name="requestDataLevel"> Request data collection level for test run. </param>
        /// <param name="debugLogsEnabled"> Enable or disable debug level logging. True if debug logs are enabled for the test run. False otherwise. </param>
        /// <param name="publicIpDisabled"> Inject load test engines without deploying public IP for outbound access. </param>
        /// <param name="createdByType"> The type of the entity that created the test run. (E.x. User, ScheduleTrigger, etc). </param>
        /// <param name="createdDateTime"> The creation datetime(RFC 3339 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(RFC 3339 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestRun"/> instance for mocking. </returns>
        public static TestRun TestRun(string testRunId = null, PassFailCriteria passFailCriteria = null, AutoStopCriteria autoStopCriteria = null, IDictionary<string, TestSecret> secrets = null, CertificateMetadata certificate = null, IDictionary<string, string> environmentVariables = null, IEnumerable<ErrorDetails> errorDetails = null, IReadOnlyDictionary<string, TestRunStatistics> testRunStatistics = null, IReadOnlyDictionary<string, TestRunStatistics> regionalStatistics = null, LoadTestConfiguration loadTestConfiguration = null, TestRunArtifacts testArtifacts = null, PassFailTestResult? testResult = null, int? virtualUsers = null, string displayName = null, string testId = null, string description = null, TestRunStatus? status = null, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, DateTimeOffset? executedDateTime = null, Uri portalUri = null, long? duration = null, double? virtualUserHours = null, string subnetId = null, TestKind? kind = null, RequestDataLevel? requestDataLevel = null, bool? debugLogsEnabled = null, bool? publicIpDisabled = null, CreatedByType? createdByType = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            secrets ??= new Dictionary<string, TestSecret>();
            environmentVariables ??= new Dictionary<string, string>();
            errorDetails ??= new List<ErrorDetails>();
            testRunStatistics ??= new Dictionary<string, TestRunStatistics>();
            regionalStatistics ??= new Dictionary<string, TestRunStatistics>();

            return new TestRun(
                testRunId,
                passFailCriteria,
                autoStopCriteria,
                secrets,
                certificate,
                environmentVariables,
                errorDetails?.ToList(),
                testRunStatistics,
                regionalStatistics,
                loadTestConfiguration,
                testArtifacts,
                testResult,
                virtualUsers,
                displayName,
                testId,
                description,
                status,
                startDateTime,
                endDateTime,
                executedDateTime,
                portalUri,
                duration,
                virtualUserHours,
                subnetId,
                kind,
                requestDataLevel,
                debugLogsEnabled,
                publicIpDisabled,
                createdByType,
                createdDateTime,
                createdBy,
                lastModifiedDateTime,
                lastModifiedBy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ErrorDetails"/>. </summary>
        /// <param name="message"> Error details in case test run was not successfully run. </param>
        /// <returns> A new <see cref="Models.ErrorDetails"/> instance for mocking. </returns>
        public static ErrorDetails ErrorDetails(string message = null)
        {
            return new ErrorDetails(message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestRunStatistics"/>. </summary>
        /// <param name="transaction"> Transaction name. </param>
        /// <param name="sampleCount"> Sampler count. </param>
        /// <param name="errorCount"> Error count. </param>
        /// <param name="errorPercentage"> Error percentage. </param>
        /// <param name="meanResponseTime"> Mean response time. </param>
        /// <param name="medianResponseTime"> Median response time. </param>
        /// <param name="maxResponseTime"> Max response time. </param>
        /// <param name="minResponseTime"> Minimum response time. </param>
        /// <param name="percentile90ResponseTime"> 90 percentile response time. </param>
        /// <param name="percentile95ResponseTime"> 95 percentile response time. </param>
        /// <param name="percentile99ResponseTime"> 99 percentile response time. </param>
        /// <param name="percentile75ResponseTime"> 75 percentile response time. </param>
        /// <param name="percentile96ResponseTime"> 96 percentile response time. </param>
        /// <param name="percentile97ResponseTime"> 97 percentile response time. </param>
        /// <param name="percentile98ResponseTime"> 98 percentile response time. </param>
        /// <param name="percentile999ResponseTime"> 99.9 percentile response time. </param>
        /// <param name="percentile9999ResponseTime"> 99.99 percentile response time. </param>
        /// <param name="throughput"> Throughput. </param>
        /// <param name="receivedKBytesPerSec"> Received network bytes. </param>
        /// <param name="sentKBytesPerSec"> Send network bytes. </param>
        /// <returns> A new <see cref="Models.TestRunStatistics"/> instance for mocking. </returns>
        public static TestRunStatistics TestRunStatistics(string transaction = null, double? sampleCount = null, double? errorCount = null, double? errorPercentage = null, double? meanResponseTime = null, double? medianResponseTime = null, double? maxResponseTime = null, double? minResponseTime = null, double? percentile90ResponseTime = null, double? percentile95ResponseTime = null, double? percentile99ResponseTime = null, double? percentile75ResponseTime = null, double? percentile96ResponseTime = null, double? percentile97ResponseTime = null, double? percentile98ResponseTime = null, double? percentile999ResponseTime = null, double? percentile9999ResponseTime = null, double? throughput = null, double? receivedKBytesPerSec = null, double? sentKBytesPerSec = null)
        {
            return new TestRunStatistics(
                transaction,
                sampleCount,
                errorCount,
                errorPercentage,
                meanResponseTime,
                medianResponseTime,
                maxResponseTime,
                minResponseTime,
                percentile90ResponseTime,
                percentile95ResponseTime,
                percentile99ResponseTime,
                percentile75ResponseTime,
                percentile96ResponseTime,
                percentile97ResponseTime,
                percentile98ResponseTime,
                percentile999ResponseTime,
                percentile9999ResponseTime,
                throughput,
                receivedKBytesPerSec,
                sentKBytesPerSec,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestRunArtifacts"/>. </summary>
        /// <param name="inputArtifacts"> The input artifacts for the test run. </param>
        /// <param name="outputArtifacts"> The output artifacts for the test run. </param>
        /// <returns> A new <see cref="Models.TestRunArtifacts"/> instance for mocking. </returns>
        public static TestRunArtifacts TestRunArtifacts(TestRunInputArtifacts inputArtifacts = null, TestRunOutputArtifacts outputArtifacts = null)
        {
            return new TestRunArtifacts(inputArtifacts, outputArtifacts, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestRunInputArtifacts"/>. </summary>
        /// <param name="configFileInfo"> The load test YAML file that contains the the test configuration. </param>
        /// <param name="testScriptFileInfo"> The test script file for the test run. </param>
        /// <param name="userPropertyFileInfo"> The user properties file. </param>
        /// <param name="inputArtifactsZipFileInfo"> The zip file for all input artifacts. </param>
        /// <param name="urlTestConfigFileInfo"> The config json file for url based test. </param>
        /// <param name="additionalFileInfo"> Additional supported files for the test run. </param>
        /// <returns> A new <see cref="Models.TestRunInputArtifacts"/> instance for mocking. </returns>
        public static TestRunInputArtifacts TestRunInputArtifacts(TestRunFileInfo configFileInfo = null, TestRunFileInfo testScriptFileInfo = null, TestRunFileInfo userPropertyFileInfo = null, TestRunFileInfo inputArtifactsZipFileInfo = null, TestRunFileInfo urlTestConfigFileInfo = null, IEnumerable<TestRunFileInfo> additionalFileInfo = null)
        {
            additionalFileInfo ??= new List<TestRunFileInfo>();

            return new TestRunInputArtifacts(
                configFileInfo,
                testScriptFileInfo,
                userPropertyFileInfo,
                inputArtifactsZipFileInfo,
                urlTestConfigFileInfo,
                additionalFileInfo?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestRunFileInfo"/>. </summary>
        /// <param name="fileName"> Name of the file. </param>
        /// <param name="uri"> File URL. </param>
        /// <param name="fileType"> File type. </param>
        /// <param name="expireDateTime"> Expiry time of the file (RFC 3339 literal format). </param>
        /// <param name="validationStatus"> Validation status of the file. </param>
        /// <param name="validationFailureDetails"> Validation failure error details. </param>
        /// <returns> A new <see cref="Models.TestRunFileInfo"/> instance for mocking. </returns>
        public static TestRunFileInfo TestRunFileInfo(string fileName = null, Uri uri = null, FileType? fileType = null, DateTimeOffset? expireDateTime = null, FileValidationStatus? validationStatus = null, string validationFailureDetails = null)
        {
            return new TestRunFileInfo(
                fileName,
                uri,
                fileType,
                expireDateTime,
                validationStatus,
                validationFailureDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestRunOutputArtifacts"/>. </summary>
        /// <param name="resultFileInfo"> The test run results file. </param>
        /// <param name="logsFileInfo"> The test run report with metrics. </param>
        /// <param name="artifactsContainerInfo"> The container for test run artifacts. </param>
        /// <param name="reportFileInfo"> The report file for the test run. </param>
        /// <returns> A new <see cref="Models.TestRunOutputArtifacts"/> instance for mocking. </returns>
        public static TestRunOutputArtifacts TestRunOutputArtifacts(TestRunFileInfo resultFileInfo = null, TestRunFileInfo logsFileInfo = null, ArtifactsContainerInfo artifactsContainerInfo = null, TestRunFileInfo reportFileInfo = null)
        {
            return new TestRunOutputArtifacts(resultFileInfo, logsFileInfo, artifactsContainerInfo, reportFileInfo, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArtifactsContainerInfo"/>. </summary>
        /// <param name="uri"> This is a SAS URI to an Azure Storage Container that contains the test run artifacts. </param>
        /// <param name="expireDateTime"> Expiry time of the container (RFC 3339 literal format). </param>
        /// <returns> A new <see cref="Models.ArtifactsContainerInfo"/> instance for mocking. </returns>
        public static ArtifactsContainerInfo ArtifactsContainerInfo(Uri uri = null, DateTimeOffset? expireDateTime = null)
        {
            return new ArtifactsContainerInfo(uri, expireDateTime, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestRunAppComponents"/>. </summary>
        /// <param name="components">
        /// Azure resource collection { resource id (fully qualified resource Id e.g
        /// subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName})
        /// : resource object }
        /// </param>
        /// <param name="testRunId"> Test run identifier. </param>
        /// <param name="createdDateTime"> The creation datetime(RFC 3339 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(RFC 3339 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestRunAppComponents"/> instance for mocking. </returns>
        public static TestRunAppComponents TestRunAppComponents(IDictionary<string, AppComponent> components = null, string testRunId = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            components ??= new Dictionary<string, AppComponent>();

            return new TestRunAppComponents(
                components,
                testRunId,
                createdDateTime,
                createdBy,
                lastModifiedDateTime,
                lastModifiedBy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestRunServerMetricsConfiguration"/>. </summary>
        /// <param name="testRunId"> Test run identifier. </param>
        /// <param name="metrics">
        /// Azure resource metrics collection {metric id : metrics object} (Refer :
        /// https://learn.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition
        /// for metric id).
        /// </param>
        /// <param name="createdDateTime"> The creation datetime(RFC 3339 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(RFC 3339 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestRunServerMetricsConfiguration"/> instance for mocking. </returns>
        public static TestRunServerMetricsConfiguration TestRunServerMetricsConfiguration(string testRunId = null, IDictionary<string, ResourceMetric> metrics = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            metrics ??= new Dictionary<string, ResourceMetric>();

            return new TestRunServerMetricsConfiguration(
                testRunId,
                metrics,
                createdDateTime,
                createdBy,
                lastModifiedDateTime,
                lastModifiedBy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricDefinitionCollection"/>. </summary>
        /// <param name="value"> the values for the metric definitions. </param>
        /// <returns> A new <see cref="Models.MetricDefinitionCollection"/> instance for mocking. </returns>
        public static MetricDefinitionCollection MetricDefinitionCollection(IEnumerable<MetricDefinition> value = null)
        {
            value ??= new List<MetricDefinition>();

            return new MetricDefinitionCollection(value?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricDefinition"/>. </summary>
        /// <param name="dimensions"> List of dimensions. </param>
        /// <param name="description"> The metric description. </param>
        /// <param name="name"> The metric name. </param>
        /// <param name="namespace"> The namespace the metric belongs to. </param>
        /// <param name="primaryAggregationType"> The primary aggregation type value defining how to use the values for display. </param>
        /// <param name="supportedAggregationTypes"> The collection of what all aggregation types are supported. </param>
        /// <param name="unit"> The unit of the metric. </param>
        /// <param name="metricAvailabilities">
        /// Metric availability specifies the time grain (aggregation interval or
        /// frequency).
        /// </param>
        /// <returns> A new <see cref="Models.MetricDefinition"/> instance for mocking. </returns>
        public static MetricDefinition MetricDefinition(IEnumerable<NameAndDescription> dimensions = null, string description = null, string name = null, string @namespace = null, Aggregation? primaryAggregationType = null, IEnumerable<string> supportedAggregationTypes = null, MetricUnit? unit = null, IEnumerable<MetricAvailability> metricAvailabilities = null)
        {
            dimensions ??= new List<NameAndDescription>();
            supportedAggregationTypes ??= new List<string>();
            metricAvailabilities ??= new List<MetricAvailability>();

            return new MetricDefinition(
                dimensions?.ToList(),
                description,
                name,
                @namespace,
                primaryAggregationType,
                supportedAggregationTypes?.ToList(),
                unit,
                metricAvailabilities?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NameAndDescription"/>. </summary>
        /// <param name="description"> The description. </param>
        /// <param name="name"> The name. </param>
        /// <returns> A new <see cref="Models.NameAndDescription"/> instance for mocking. </returns>
        public static NameAndDescription NameAndDescription(string description = null, string name = null)
        {
            return new NameAndDescription(description, name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricAvailability"/>. </summary>
        /// <param name="timeGrain">
        /// The time grain specifies the aggregation interval for the metric. Expressed as
        /// a duration 'PT1M', 'PT1H', etc.
        /// </param>
        /// <returns> A new <see cref="Models.MetricAvailability"/> instance for mocking. </returns>
        public static MetricAvailability MetricAvailability(TimeGrain? timeGrain = null)
        {
            return new MetricAvailability(timeGrain, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricNamespaceCollection"/>. </summary>
        /// <param name="value"> The values for the metric namespaces. </param>
        /// <returns> A new <see cref="Models.MetricNamespaceCollection"/> instance for mocking. </returns>
        public static MetricNamespaceCollection MetricNamespaceCollection(IEnumerable<MetricNamespace> value = null)
        {
            value ??= new List<MetricNamespace>();

            return new MetricNamespaceCollection(value?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricNamespace"/>. </summary>
        /// <param name="description"> The namespace description. </param>
        /// <param name="name"> The metric namespace name. </param>
        /// <returns> A new <see cref="Models.MetricNamespace"/> instance for mocking. </returns>
        public static MetricNamespace MetricNamespace(string description = null, string name = null)
        {
            return new MetricNamespace(description, name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TimeSeriesElement"/>. </summary>
        /// <param name="data"> An array of data points representing the metric values. </param>
        /// <param name="dimensionValues"> The dimension values. </param>
        /// <returns> A new <see cref="Models.TimeSeriesElement"/> instance for mocking. </returns>
        public static TimeSeriesElement TimeSeriesElement(IEnumerable<MetricValue> data = null, IEnumerable<DimensionValue> dimensionValues = null)
        {
            data ??= new List<MetricValue>();
            dimensionValues ??= new List<DimensionValue>();

            return new TimeSeriesElement(data?.ToList(), dimensionValues?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricValue"/>. </summary>
        /// <param name="timestamp"> The timestamp for the metric value in RFC 3339 format. </param>
        /// <param name="value"> The metric value. </param>
        /// <returns> A new <see cref="Models.MetricValue"/> instance for mocking. </returns>
        public static MetricValue MetricValue(DateTimeOffset? timestamp = null, double? value = null)
        {
            return new MetricValue(timestamp, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DimensionValue"/>. </summary>
        /// <param name="name"> The name of the dimension. </param>
        /// <param name="value"> The value of the dimension. </param>
        /// <returns> A new <see cref="Models.DimensionValue"/> instance for mocking. </returns>
        public static DimensionValue DimensionValue(string name = null, string value = null)
        {
            return new DimensionValue(name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestProfileRun"/>. </summary>
        /// <param name="testProfileRunId"> Unique identifier for the test profile run, must contain only lower-case alphabetic, numeric, underscore or hyphen characters. </param>
        /// <param name="displayName"> Display name for the test profile run. </param>
        /// <param name="description"> The test profile run description. </param>
        /// <param name="testProfileId"> Associated test profile ID for the test profile run. This is required to create a test profile run and can't be updated. </param>
        /// <param name="targetResourceId"> Target resource ID on which the test profile run is created. </param>
        /// <param name="targetResourceConfigurations">
        /// Configurations of the target resource on which the test profile ran.
        /// Please note <see cref="TargetResourceConfigurations"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FunctionFlexConsumptionTargetResourceConfigurations"/>.
        /// </param>
        /// <param name="status"> The test profile run status. </param>
        /// <param name="errorDetails"> Error details if there is any failure in test profile run. These errors are specific to the Test Profile Run. </param>
        /// <param name="startDateTime"> The test profile run start DateTime(RFC 3339 literal format). </param>
        /// <param name="endDateTime"> The test profile run end DateTime(RFC 3339 literal format). </param>
        /// <param name="durationInSeconds"> Test profile run duration in seconds. </param>
        /// <param name="testRunDetails">
        /// Details of the test runs ran as part of the test profile run.
        /// Key is the testRunId of the corresponding testRun.
        /// </param>
        /// <param name="recommendations"> Recommendations provided based on a successful test profile run. </param>
        /// <param name="createdDateTime"> The creation datetime(RFC 3339 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(RFC 3339 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <returns> A new <see cref="Models.TestProfileRun"/> instance for mocking. </returns>
        public static TestProfileRun TestProfileRun(string testProfileRunId = null, string displayName = null, string description = null, string testProfileId = null, ResourceIdentifier targetResourceId = null, TargetResourceConfigurations targetResourceConfigurations = null, TestProfileRunStatus? status = null, IEnumerable<ErrorDetails> errorDetails = null, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, long? durationInSeconds = null, IReadOnlyDictionary<string, TestRunDetail> testRunDetails = null, IEnumerable<TestProfileRunRecommendation> recommendations = null, DateTimeOffset? createdDateTime = null, string createdBy = null, DateTimeOffset? lastModifiedDateTime = null, string lastModifiedBy = null)
        {
            errorDetails ??= new List<ErrorDetails>();
            testRunDetails ??= new Dictionary<string, TestRunDetail>();
            recommendations ??= new List<TestProfileRunRecommendation>();

            return new TestProfileRun(
                testProfileRunId,
                displayName,
                description,
                testProfileId,
                targetResourceId,
                targetResourceConfigurations,
                status,
                errorDetails?.ToList(),
                startDateTime,
                endDateTime,
                durationInSeconds,
                testRunDetails,
                recommendations?.ToList(),
                createdDateTime,
                createdBy,
                lastModifiedDateTime,
                lastModifiedBy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestRunDetail"/>. </summary>
        /// <param name="status"> Status of the test run. </param>
        /// <param name="configurationId"> ID of the configuration on which the test ran. </param>
        /// <param name="properties"> Key value pair of extra properties associated with the test run. </param>
        /// <returns> A new <see cref="Models.TestRunDetail"/> instance for mocking. </returns>
        public static TestRunDetail TestRunDetail(TestRunStatus status = default, string configurationId = null, IReadOnlyDictionary<string, string> properties = null)
        {
            properties ??= new Dictionary<string, string>();

            return new TestRunDetail(status, configurationId, properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestProfileRunRecommendation"/>. </summary>
        /// <param name="category"> Category of the recommendation. </param>
        /// <param name="configurations"> List of configurations IDs for which the recommendation is applicable. These are a subset of the provided target resource configurations. </param>
        /// <returns> A new <see cref="Models.TestProfileRunRecommendation"/> instance for mocking. </returns>
        public static TestProfileRunRecommendation TestProfileRunRecommendation(RecommendationCategory category = default, IEnumerable<string> configurations = null)
        {
            configurations ??= new List<string>();

            return new TestProfileRunRecommendation(category, configurations?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
