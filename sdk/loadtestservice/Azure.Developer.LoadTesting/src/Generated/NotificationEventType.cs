// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Notification event type. </summary>
    internal readonly partial struct NotificationEventType : IEquatable<NotificationEventType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NotificationEventType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NotificationEventType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TestRunEndedValue = "TestRunEnded";
        private const string TestRunStartedValue = "TestRunStarted";
        private const string TriggerCompletedValue = "TriggerCompleted";
        private const string TriggerDisabledValue = "TriggerDisabled";

        /// <summary> Test run ended event. This event would occur when a test run reaches terminal state. </summary>
        public static NotificationEventType TestRunEnded { get; } = new NotificationEventType(TestRunEndedValue);
        /// <summary> Test run started event. This event would occur when a new test run is triggered. </summary>
        public static NotificationEventType TestRunStarted { get; } = new NotificationEventType(TestRunStartedValue);
        /// <summary> Trigger completed event. This event would occur when a trigger completes. </summary>
        public static NotificationEventType TriggerCompleted { get; } = new NotificationEventType(TriggerCompletedValue);
        /// <summary> Trigger disabled event. This event would occur when a trigger is disabled. </summary>
        public static NotificationEventType TriggerDisabled { get; } = new NotificationEventType(TriggerDisabledValue);
        /// <summary> Determines if two <see cref="NotificationEventType"/> values are the same. </summary>
        public static bool operator ==(NotificationEventType left, NotificationEventType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NotificationEventType"/> values are not the same. </summary>
        public static bool operator !=(NotificationEventType left, NotificationEventType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="NotificationEventType"/>. </summary>
        public static implicit operator NotificationEventType(string value) => new NotificationEventType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NotificationEventType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NotificationEventType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
