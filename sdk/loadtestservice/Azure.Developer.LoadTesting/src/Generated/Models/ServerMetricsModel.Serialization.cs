// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Developer.LoadTesting.Models
{
    public partial class ServerMetricsModel : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TestId))
            {
                writer.WritePropertyName("testId");
                writer.WriteStringValue(TestId);
            }
            if (Optional.IsDefined(TestRunId))
            {
                writer.WritePropertyName("testRunId");
                writer.WriteStringValue(TestRunId);
            }
            if (Optional.IsCollectionDefined(Metrics))
            {
                writer.WritePropertyName("metrics");
                writer.WriteStartObject();
                foreach (var item in Metrics)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static ServerMetricsModel DeserializeServerMetricsModel(JsonElement element)
        {
            Optional<string> name = default;
            Optional<string> testId = default;
            Optional<string> testRunId = default;
            Optional<IDictionary<string, ResourceMetricModel>> metrics = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testId"))
                {
                    testId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testRunId"))
                {
                    testRunId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metrics"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, ResourceMetricModel> dictionary = new Dictionary<string, ResourceMetricModel>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, ResourceMetricModel.DeserializeResourceMetricModel(property0.Value));
                    }
                    metrics = dictionary;
                    continue;
                }
            }
            return new ServerMetricsModel(name.Value, testId.Value, testRunId.Value, Optional.ToDictionary(metrics));
        }
    }
}
