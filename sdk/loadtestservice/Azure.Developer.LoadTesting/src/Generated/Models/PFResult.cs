// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureLoadTesting.Models
{
    public readonly partial struct PFResult : IEquatable<PFResult>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PFResult"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PFResult(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PassedValue = "passed";
        private const string UndeterminedValue = "undetermined";
        private const string FailedValue = "failed";

        /// <summary> Given pass fail criteria metric has passed. </summary>
        public static PFResult Passed { get; } = new PFResult(PassedValue);
        /// <summary> Given pass fail criteria metric couldn't determine. </summary>
        public static PFResult Undetermined { get; } = new PFResult(UndeterminedValue);
        /// <summary> Given pass fail criteria metric has failed. </summary>
        public static PFResult Failed { get; } = new PFResult(FailedValue);
        /// <summary> Determines if two <see cref="PFResult"/> values are the same. </summary>
        public static bool operator ==(PFResult left, PFResult right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PFResult"/> values are not the same. </summary>
        public static bool operator !=(PFResult left, PFResult right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PFResult"/>. </summary>
        public static implicit operator PFResult(string value) => new PFResult(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PFResult other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PFResult other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
