// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Developer.LoadTesting.Models
{
    public partial class ResourceMetricModel : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("resourceId");
            writer.WriteStringValue(ResourceId);
            writer.WritePropertyName("metricnamespace");
            writer.WriteStringValue(Metricnamespace);
            if (Optional.IsDefined(DisplayDescription))
            {
                writer.WritePropertyName("displayDescription");
                writer.WriteStringValue(DisplayDescription);
            }
            writer.WritePropertyName("name");
            writer.WriteObjectValue(Name);
            writer.WritePropertyName("aggregation");
            writer.WriteStringValue(Aggregation);
            if (Optional.IsDefined(Unit))
            {
                writer.WritePropertyName("unit");
                writer.WriteStringValue(Unit);
            }
            writer.WritePropertyName("resourceType");
            writer.WriteStringValue(ResourceType);
            writer.WriteEndObject();
        }

        internal static ResourceMetricModel DeserializeResourceMetricModel(JsonElement element)
        {
            Optional<string> id = default;
            string resourceId = default;
            string metricnamespace = default;
            Optional<string> displayDescription = default;
            ServerMetricName name = default;
            string aggregation = default;
            Optional<string> unit = default;
            string resourceType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceId"))
                {
                    resourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metricnamespace"))
                {
                    metricnamespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayDescription"))
                {
                    displayDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = ServerMetricName.DeserializeServerMetricName(property.Value);
                    continue;
                }
                if (property.NameEquals("aggregation"))
                {
                    aggregation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unit"))
                {
                    unit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceType"))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
            }
            return new ResourceMetricModel(id.Value, resourceId, metricnamespace, displayDescription.Value, name, aggregation, unit.Value, resourceType);
        }
    }
}
