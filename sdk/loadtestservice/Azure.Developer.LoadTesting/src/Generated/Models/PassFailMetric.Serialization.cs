// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Developer.LoadTesting.Models
{
    public partial class PassFailMetric : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Clientmetric))
            {
                writer.WritePropertyName("clientmetric");
                writer.WriteStringValue(Clientmetric);
            }
            if (Optional.IsDefined(Aggregate))
            {
                writer.WritePropertyName("aggregate");
                writer.WriteStringValue(Aggregate);
            }
            if (Optional.IsDefined(Condition))
            {
                writer.WritePropertyName("condition");
                writer.WriteStringValue(Condition);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value");
                writer.WriteNumberValue(Value.Value);
            }
            if (Optional.IsDefined(Action))
            {
                writer.WritePropertyName("action");
                writer.WriteStringValue(Action);
            }
            writer.WriteEndObject();
        }

        internal static PassFailMetric DeserializePassFailMetric(JsonElement element)
        {
            Optional<string> clientmetric = default;
            Optional<string> aggregate = default;
            Optional<string> condition = default;
            Optional<double> value = default;
            Optional<string> action = default;
            Optional<double> actualValue = default;
            Optional<string> result = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clientmetric"))
                {
                    clientmetric = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aggregate"))
                {
                    aggregate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("condition"))
                {
                    condition = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    value = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("action"))
                {
                    action = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("actualValue"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    actualValue = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("result"))
                {
                    result = property.Value.GetString();
                    continue;
                }
            }
            return new PassFailMetric(clientmetric.Value, aggregate.Value, condition.Value, Optional.ToNullable(value), action.Value, Optional.ToNullable(actualValue), result.Value);
        }
    }
}
