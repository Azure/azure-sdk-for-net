// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureLoadTesting.Models
{
    public readonly partial struct AggregationType : IEquatable<AggregationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AggregationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AggregationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AverageValue = "Average";
        private const string CountValue = "Count";
        private const string NoneValue = "None";
        private const string TotalValue = "Total";
        private const string Percentile90Value = "Percentile90";
        private const string Percentile95Value = "Percentile95";
        private const string Percentile99Value = "Percentile99";

        /// <summary> Average value. </summary>
        public static AggregationType Average { get; } = new AggregationType(AverageValue);
        /// <summary> Total count. </summary>
        public static AggregationType Count { get; } = new AggregationType(CountValue);
        /// <summary> Aggregation will be average in this case. </summary>
        public static AggregationType None { get; } = new AggregationType(NoneValue);
        /// <summary> Total sum. </summary>
        public static AggregationType Total { get; } = new AggregationType(TotalValue);
        /// <summary> 90th percentile. </summary>
        public static AggregationType Percentile90 { get; } = new AggregationType(Percentile90Value);
        /// <summary> 95th percentile. </summary>
        public static AggregationType Percentile95 { get; } = new AggregationType(Percentile95Value);
        /// <summary> 99th percentile. </summary>
        public static AggregationType Percentile99 { get; } = new AggregationType(Percentile99Value);
        /// <summary> Determines if two <see cref="AggregationType"/> values are the same. </summary>
        public static bool operator ==(AggregationType left, AggregationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AggregationType"/> values are not the same. </summary>
        public static bool operator !=(AggregationType left, AggregationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AggregationType"/>. </summary>
        public static implicit operator AggregationType(string value) => new AggregationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AggregationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AggregationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
