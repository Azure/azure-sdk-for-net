// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> File status. </summary>
    public readonly partial struct FileValidationStatus : IEquatable<FileValidationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FileValidationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FileValidationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NOTVALIDATEDValue = "NOT_VALIDATED";
        private const string VALIDATIONSUCCESSValue = "VALIDATION_SUCCESS";
        private const string VALIDATIONFAILUREValue = "VALIDATION_FAILURE";
        private const string VALIDATIONINITIATEDValue = "VALIDATION_INITIATED";
        private const string VALIDATIONNOTREQUIREDValue = "VALIDATION_NOT_REQUIRED";

        /// <summary> File is not validated. </summary>
        public static FileValidationStatus NOTVALIDATED { get; } = new FileValidationStatus(NOTVALIDATEDValue);
        /// <summary> File is validated. </summary>
        public static FileValidationStatus VALIDATIONSUCCESS { get; } = new FileValidationStatus(VALIDATIONSUCCESSValue);
        /// <summary> File validation is failed. </summary>
        public static FileValidationStatus VALIDATIONFAILURE { get; } = new FileValidationStatus(VALIDATIONFAILUREValue);
        /// <summary> File validation is in progress. </summary>
        public static FileValidationStatus VALIDATIONINITIATED { get; } = new FileValidationStatus(VALIDATIONINITIATEDValue);
        /// <summary> Validation is not required. </summary>
        public static FileValidationStatus VALIDATIONNOTREQUIRED { get; } = new FileValidationStatus(VALIDATIONNOTREQUIREDValue);
        /// <summary> Determines if two <see cref="FileValidationStatus"/> values are the same. </summary>
        public static bool operator ==(FileValidationStatus left, FileValidationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FileValidationStatus"/> values are not the same. </summary>
        public static bool operator !=(FileValidationStatus left, FileValidationStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="FileValidationStatus"/>. </summary>
        public static implicit operator FileValidationStatus(string value) => new FileValidationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FileValidationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FileValidationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
