// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Developer.LoadTesting.Models
{
    public partial class TestRunStatistics
    {
        internal static TestRunStatistics DeserializeTestRunStatistics(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> transaction = default;
            Optional<double> sampleCount = default;
            Optional<double> errorCount = default;
            Optional<double> errorPct = default;
            Optional<double> meanResTime = default;
            Optional<double> medianResTime = default;
            Optional<double> maxResTime = default;
            Optional<double> minResTime = default;
            Optional<double> pct1ResTime = default;
            Optional<double> pct2ResTime = default;
            Optional<double> pct3ResTime = default;
            Optional<double> throughput = default;
            Optional<double> receivedKBytesPerSec = default;
            Optional<double> sentKBytesPerSec = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("transaction"u8))
                {
                    transaction = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sampleCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sampleCount = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("errorCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorCount = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("errorPct"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorPct = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("meanResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    meanResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("medianResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    medianResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("maxResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("minResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct1ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct1ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct2ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct2ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct3ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct3ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("throughput"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    throughput = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("receivedKBytesPerSec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    receivedKBytesPerSec = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("sentKBytesPerSec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sentKBytesPerSec = property.Value.GetDouble();
                    continue;
                }
            }
            return new TestRunStatistics(transaction.Value, Optional.ToNullable(sampleCount), Optional.ToNullable(errorCount), Optional.ToNullable(errorPct), Optional.ToNullable(meanResTime), Optional.ToNullable(medianResTime), Optional.ToNullable(maxResTime), Optional.ToNullable(minResTime), Optional.ToNullable(pct1ResTime), Optional.ToNullable(pct2ResTime), Optional.ToNullable(pct3ResTime), Optional.ToNullable(throughput), Optional.ToNullable(receivedKBytesPerSec), Optional.ToNullable(sentKBytesPerSec));
        }
    }
}
