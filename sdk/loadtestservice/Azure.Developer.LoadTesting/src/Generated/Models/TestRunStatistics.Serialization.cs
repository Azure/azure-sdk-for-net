// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace AzureLoadTesting.Models
{
    public partial class TestRunStatistics
    {
        internal static TestRunStatistics DeserializeTestRunStatistics(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> transaction = default;
            Optional<float> sampleCount = default;
            Optional<float> errorCount = default;
            Optional<float> errorPct = default;
            Optional<float> meanResTime = default;
            Optional<float> medianResTime = default;
            Optional<float> maxResTime = default;
            Optional<float> minResTime = default;
            Optional<float> pct1ResTime = default;
            Optional<float> pct2ResTime = default;
            Optional<float> pct3ResTime = default;
            Optional<float> throughput = default;
            Optional<float> receivedKBytesPerSec = default;
            Optional<float> sentKBytesPerSec = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("transaction"u8))
                {
                    transaction = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sampleCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sampleCount = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("errorCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorCount = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("errorPct"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorPct = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("meanResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    meanResTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("medianResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    medianResTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("maxResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxResTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("minResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minResTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("pct1ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct1ResTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("pct2ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct2ResTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("pct3ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct3ResTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("throughput"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    throughput = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("receivedKBytesPerSec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    receivedKBytesPerSec = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("sentKBytesPerSec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sentKBytesPerSec = property.Value.GetSingle();
                    continue;
                }
            }
            return new TestRunStatistics(transaction.Value, Optional.ToNullable(sampleCount), Optional.ToNullable(errorCount), Optional.ToNullable(errorPct), Optional.ToNullable(meanResTime), Optional.ToNullable(medianResTime), Optional.ToNullable(maxResTime), Optional.ToNullable(minResTime), Optional.ToNullable(pct1ResTime), Optional.ToNullable(pct2ResTime), Optional.ToNullable(pct3ResTime), Optional.ToNullable(throughput), Optional.ToNullable(receivedKBytesPerSec), Optional.ToNullable(sentKBytesPerSec));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TestRunStatistics FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeTestRunStatistics(document.RootElement);
        }
    }
}
