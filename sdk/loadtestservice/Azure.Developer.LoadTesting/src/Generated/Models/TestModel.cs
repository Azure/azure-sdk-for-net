// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> Load test model. </summary>
    public partial class TestModel
    {
        /// <summary> Initializes a new instance of TestModel. </summary>
        public TestModel()
        {
            Secrets = new ChangeTrackingDictionary<string, SecretMetadata>();
            EnvironmentVariables = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of TestModel. </summary>
        /// <param name="testId"> Unique test name as identifier. </param>
        /// <param name="description"> The test description. </param>
        /// <param name="displayName"> Display name of a test. </param>
        /// <param name="resourceId"> Fully qualified resource Id e.g /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}. </param>
        /// <param name="loadTestConfig"> The load test configuration. </param>
        /// <param name="passFailCriteria"> Pass fail criteria for a test. </param>
        /// <param name="createdDateTime"> The created DateTime(ISO 8601 literal format) of the test model. </param>
        /// <param name="createdBy"> The user that created the test model. </param>
        /// <param name="lastModifiedDateTime"> The last Modified DateTime(ISO 8601 literal format) of the test model. </param>
        /// <param name="lastModifiedBy"> The user that last modified the test model. </param>
        /// <param name="inputArtifacts"> The input artifacts for the test. </param>
        /// <param name="secrets"> Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE. </param>
        /// <param name="environmentVariables"> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </param>
        /// <param name="subnetId"> Subnet ID on which the load test instances should run. </param>
        /// <param name="keyvaultReferenceIdentityType"> Type of the managed identity referencing the Key vault. </param>
        /// <param name="keyvaultReferenceIdentityId"> Resource Id of the managed identity referencing the Key vault. </param>
        internal TestModel(string testId, string description, string displayName, string resourceId, LoadTestConfig loadTestConfig, PassFailCriteria passFailCriteria, DateTimeOffset? createdDateTime, string createdBy, DateTimeOffset? lastModifiedDateTime, string lastModifiedBy, InputTestArtifacts inputArtifacts, IDictionary<string, SecretMetadata> secrets, IDictionary<string, string> environmentVariables, string subnetId, string keyvaultReferenceIdentityType, string keyvaultReferenceIdentityId)
        {
            TestId = testId;
            Description = description;
            DisplayName = displayName;
            ResourceId = resourceId;
            LoadTestConfig = loadTestConfig;
            PassFailCriteria = passFailCriteria;
            CreatedDateTime = createdDateTime;
            CreatedBy = createdBy;
            LastModifiedDateTime = lastModifiedDateTime;
            LastModifiedBy = lastModifiedBy;
            InputArtifacts = inputArtifacts;
            Secrets = secrets;
            EnvironmentVariables = environmentVariables;
            SubnetId = subnetId;
            KeyvaultReferenceIdentityType = keyvaultReferenceIdentityType;
            KeyvaultReferenceIdentityId = keyvaultReferenceIdentityId;
        }

        /// <summary> Unique test name as identifier. </summary>
        public string TestId { get; }
        /// <summary> The test description. </summary>
        public string Description { get; set; }
        /// <summary> Display name of a test. </summary>
        public string DisplayName { get; set; }
        /// <summary> Fully qualified resource Id e.g /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}. </summary>
        public string ResourceId { get; }
        /// <summary> The load test configuration. </summary>
        public LoadTestConfig LoadTestConfig { get; set; }
        /// <summary> Pass fail criteria for a test. </summary>
        public PassFailCriteria PassFailCriteria { get; set; }
        /// <summary> The created DateTime(ISO 8601 literal format) of the test model. </summary>
        public DateTimeOffset? CreatedDateTime { get; }
        /// <summary> The user that created the test model. </summary>
        public string CreatedBy { get; }
        /// <summary> The last Modified DateTime(ISO 8601 literal format) of the test model. </summary>
        public DateTimeOffset? LastModifiedDateTime { get; }
        /// <summary> The user that last modified the test model. </summary>
        public string LastModifiedBy { get; }
        /// <summary> The input artifacts for the test. </summary>
        public InputTestArtifacts InputArtifacts { get; }
        /// <summary> Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE. </summary>
        public IDictionary<string, SecretMetadata> Secrets { get; }
        /// <summary> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </summary>
        public IDictionary<string, string> EnvironmentVariables { get; }
        /// <summary> Subnet ID on which the load test instances should run. </summary>
        public string SubnetId { get; set; }
        /// <summary> Type of the managed identity referencing the Key vault. </summary>
        public string KeyvaultReferenceIdentityType { get; set; }
        /// <summary> Resource Id of the managed identity referencing the Key vault. </summary>
        public string KeyvaultReferenceIdentityId { get; set; }
    }
}
