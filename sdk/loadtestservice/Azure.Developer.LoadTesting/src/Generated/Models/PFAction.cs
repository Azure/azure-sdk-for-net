// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureLoadTesting.Models
{
    public readonly partial struct PFAction : IEquatable<PFAction>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PFAction"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PFAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ContinueValue = "continue";
        private const string StopValue = "stop";

        /// <summary> Test will continue to run even if pass fail metric criteria metric gets failed. </summary>
        public static PFAction Continue { get; } = new PFAction(ContinueValue);
        /// <summary> Test run will stop if pass fail criteria metric is not passed. </summary>
        public static PFAction Stop { get; } = new PFAction(StopValue);
        /// <summary> Determines if two <see cref="PFAction"/> values are the same. </summary>
        public static bool operator ==(PFAction left, PFAction right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PFAction"/> values are not the same. </summary>
        public static bool operator !=(PFAction left, PFAction right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PFAction"/>. </summary>
        public static implicit operator PFAction(string value) => new PFAction(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PFAction other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PFAction other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
