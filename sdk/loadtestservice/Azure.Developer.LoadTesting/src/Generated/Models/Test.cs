// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.Core.Json;

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> Load test model. </summary>
    public partial class Test
    {
        private MutableJsonElement _element;

        /// <summary> Initializes a new instance of Test. </summary>
        public Test()
        {
            // TODO: Store a way to make an empty MJD - avoid the ToArray() allocation below.
            //_element = MutableJsonDocument.Parse(BinaryData.FromBytes("{}"u8.ToArray())).RootElement;

            // TODO: Or do we want to initialize it with some basic JSON, e.g. child values?
            _element = MutableJsonDocument.Parse(BinaryData.FromBytes("""
                {
                    "passFailCriteria": {
                        "passFailMetrics": {
                        }
                    }
                }
                """u8.ToArray())).RootElement;

            PassFailCriteria = new PassFailCriteria(_element.GetProperty("passFailCriteria"));

            Secrets = new ChangeTrackingDictionary<string, Secret>();
            EnvironmentVariables = new ChangeTrackingDictionary<string, string>();
        }

        internal Test(MutableJsonElement element)
        {
            _element = element;

            // TODO: if passFailCriteria is optional, we'll want to use TryGetProperty here instead.
            PassFailCriteria = new PassFailCriteria(_element.GetProperty("passFailCriteria"));
        }

        /// <summary> Pass fail criteria for a test. </summary>
        public PassFailCriteria PassFailCriteria { get; set; }

        /// <summary> Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE. </summary>
        public IDictionary<string, Secret> Secrets { get; }

        /// <summary> Certificates metadata. </summary>
        public CertificateMetadata Certificate { get; set; }

        /// <summary> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </summary>
        public IDictionary<string, string> EnvironmentVariables { get; }

        /// <summary> The load test configuration. </summary>
        public LoadTestConfiguration LoadTestConfiguration { get; set; }

        /// <summary> The input artifacts for the test. </summary>
        public TestInputArtifacts InputArtifacts { get; }

        /// <summary> Unique test name as identifier. </summary>
        public string TestId
        {
            get => _element.GetProperty("testId").GetString();
            set => _element.SetProperty("testId", value);
        }

        /// <summary> The test description. </summary>
        public string Description
        {
            get => _element.GetProperty("description").GetString();
            set => _element.SetProperty("description", value);
        }

        /// <summary> Display name of a test. </summary>
        public string DisplayName
        {
            get => _element.GetProperty("displayName").GetString();
            set => _element.SetProperty("displayName", value);
        }

        /// <summary> Subnet ID on which the load test instances should run. </summary>
        public string SubnetId
        {
            get => _element.GetProperty("subnetId").GetString();
            set => _element.SetProperty("subnetId", value);
        }

        /// <summary> Type of the managed identity referencing the Key vault. </summary>
        public string KeyvaultReferenceIdentityType
        {
            get => _element.GetProperty("keyvaultReferenceIdentityType").GetString();
            set => _element.SetProperty("keyvaultReferenceIdentityType", value);
        }

        /// <summary> Resource Id of the managed identity referencing the Key vault. </summary>
        public string KeyvaultReferenceIdentityId
        {
            get => _element.GetProperty("keyvaultReferenceIdentityId").GetString();
            set => _element.SetProperty("keyvaultReferenceIdentityId", value);
        }

        /// <summary> The creation datetime(ISO 8601 literal format). </summary>
        public DateTimeOffset? CreatedDateTime
        {
            get => _element.GetProperty("createdDateTime").GetDateTimeOffset();
        }

        /// <summary> The user that created. </summary>
        public string CreatedBy
        {
            get => _element.GetProperty("createdBy").GetString();
            set => _element.SetProperty("createdBy", value);
        }

        /// <summary> The last Modified datetime(ISO 8601 literal format). </summary>
        public DateTimeOffset? LastModifiedDateTime
        {
            get => _element.GetProperty("lastModifiedDateTime").GetDateTimeOffset();
        }

        /// <summary> The user that last modified. </summary>
        public string LastModifiedBy
        {
            get => _element.GetProperty("lastModifiedBy").GetString();
            set => _element.SetProperty("lastModifiedBy", value);
        }
    }
}
