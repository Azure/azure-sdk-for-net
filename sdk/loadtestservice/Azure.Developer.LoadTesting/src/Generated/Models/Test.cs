// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace AzureLoadTesting.Models
{
    /// <summary> Load test model. </summary>
    public partial class Test
    {
        /// <summary> Initializes a new instance of Test. </summary>
        internal Test()
        {
            Secrets = new ChangeTrackingDictionary<string, Secret>();
            EnvironmentVariables = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of Test. </summary>
        /// <param name="passFailCriteria"> Pass fail criteria for a test. </param>
        /// <param name="secrets">
        /// Secrets can be stored in an Azure Key Vault or any other secret store. If the
        /// secret is stored in an Azure Key Vault, the value should be the secret
        /// identifier and the type should be AKV_SECRET_URI. If the secret is stored
        /// elsewhere, the secret value should be provided directly and the type should be
        /// SECRET_VALUE.
        /// </param>
        /// <param name="certificate"> Certificates metadata. </param>
        /// <param name="environmentVariables"> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </param>
        /// <param name="loadTestConfiguration"> The load test configuration. </param>
        /// <param name="inputArtifacts"> The input artifacts for the test. </param>
        /// <param name="testId"> Unique test name as identifier. </param>
        /// <param name="description"> The test description. </param>
        /// <param name="displayName"> Display name of a test. </param>
        /// <param name="subnetId"> Subnet ID on which the load test instances should run. </param>
        /// <param name="keyvaultReferenceIdentityType"> Type of the managed identity referencing the Key vault. </param>
        /// <param name="keyvaultReferenceIdentityId"> Resource Id of the managed identity referencing the Key vault. </param>
        /// <param name="createdDateTime"> The creation datetime(ISO 8601 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(ISO 8601 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        internal Test(PassFailCriteria passFailCriteria, IReadOnlyDictionary<string, Secret> secrets, CertificateMetadata certificate, IReadOnlyDictionary<string, string> environmentVariables, LoadTestConfiguration loadTestConfiguration, TestInputArtifacts inputArtifacts, string testId, string description, string displayName, string subnetId, string keyvaultReferenceIdentityType, string keyvaultReferenceIdentityId, DateTimeOffset? createdDateTime, string createdBy, DateTimeOffset? lastModifiedDateTime, string lastModifiedBy)
        {
            PassFailCriteria = passFailCriteria;
            Secrets = secrets;
            Certificate = certificate;
            EnvironmentVariables = environmentVariables;
            LoadTestConfiguration = loadTestConfiguration;
            InputArtifacts = inputArtifacts;
            TestId = testId;
            Description = description;
            DisplayName = displayName;
            SubnetId = subnetId;
            KeyvaultReferenceIdentityType = keyvaultReferenceIdentityType;
            KeyvaultReferenceIdentityId = keyvaultReferenceIdentityId;
            CreatedDateTime = createdDateTime;
            CreatedBy = createdBy;
            LastModifiedDateTime = lastModifiedDateTime;
            LastModifiedBy = lastModifiedBy;
        }

        /// <summary> Pass fail criteria for a test. </summary>
        public PassFailCriteria PassFailCriteria { get; }
        /// <summary>
        /// Secrets can be stored in an Azure Key Vault or any other secret store. If the
        /// secret is stored in an Azure Key Vault, the value should be the secret
        /// identifier and the type should be AKV_SECRET_URI. If the secret is stored
        /// elsewhere, the secret value should be provided directly and the type should be
        /// SECRET_VALUE.
        /// </summary>
        public IReadOnlyDictionary<string, Secret> Secrets { get; }
        /// <summary> Certificates metadata. </summary>
        public CertificateMetadata Certificate { get; }
        /// <summary> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </summary>
        public IReadOnlyDictionary<string, string> EnvironmentVariables { get; }
        /// <summary> The load test configuration. </summary>
        public LoadTestConfiguration LoadTestConfiguration { get; }
        /// <summary> The input artifacts for the test. </summary>
        public TestInputArtifacts InputArtifacts { get; }
        /// <summary> Unique test name as identifier. </summary>
        public string TestId { get; }
        /// <summary> The test description. </summary>
        public string Description { get; }
        /// <summary> Display name of a test. </summary>
        public string DisplayName { get; }
        /// <summary> Subnet ID on which the load test instances should run. </summary>
        public string SubnetId { get; }
        /// <summary> Type of the managed identity referencing the Key vault. </summary>
        public string KeyvaultReferenceIdentityType { get; }
        /// <summary> Resource Id of the managed identity referencing the Key vault. </summary>
        public string KeyvaultReferenceIdentityId { get; }
        /// <summary> The creation datetime(ISO 8601 literal format). </summary>
        public DateTimeOffset? CreatedDateTime { get; }
        /// <summary> The user that created. </summary>
        public string CreatedBy { get; }
        /// <summary> The last Modified datetime(ISO 8601 literal format). </summary>
        public DateTimeOffset? LastModifiedDateTime { get; }
        /// <summary> The user that last modified. </summary>
        public string LastModifiedBy { get; }
    }
}
