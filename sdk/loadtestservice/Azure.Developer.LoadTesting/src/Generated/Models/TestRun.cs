// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace AzureLoadTesting.Models
{
    /// <summary> Load test run model. </summary>
    public partial class TestRun
    {
        /// <summary> Initializes a new instance of TestRun. </summary>
        internal TestRun()
        {
            Secrets = new ChangeTrackingDictionary<string, Secret>();
            EnvironmentVariables = new ChangeTrackingDictionary<string, string>();
            ErrorDetails = new ChangeTrackingList<ErrorDetails>();
            TestRunStatistics = new ChangeTrackingDictionary<string, TestRunStatistics>();
        }

        /// <summary> Initializes a new instance of TestRun. </summary>
        /// <param name="passFailCriteria"> Pass fail criteria for a test. </param>
        /// <param name="secrets">
        /// Secrets can be stored in an Azure Key Vault or any other secret store. If the
        /// secret is stored in an Azure Key Vault, the value should be the secret
        /// identifier and the type should be AKV_SECRET_URI. If the secret is stored
        /// elsewhere, the secret value should be provided directly and the type should be
        /// SECRET_VALUE.
        /// </param>
        /// <param name="certificate"> Certificates metadata. </param>
        /// <param name="environmentVariables"> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </param>
        /// <param name="errorDetails"> Error details if there is any failure in load test run. </param>
        /// <param name="testRunStatistics"> Test run statistics. </param>
        /// <param name="loadTestConfiguration"> The load test configuration. </param>
        /// <param name="testArtifacts"> Collection of test run artifacts. </param>
        /// <param name="testResult"> Test result for pass/Fail criteria used during the test run. </param>
        /// <param name="virtualUsers"> Number of virtual users, for which test has been run. </param>
        /// <param name="displayName"> Display name of a testRun. </param>
        /// <param name="testId"> Associated test Id. </param>
        /// <param name="description"> The test run description. </param>
        /// <param name="status"> The test run status. </param>
        /// <param name="startDateTime"> The test run start DateTime(ISO 8601 literal format). </param>
        /// <param name="endDateTime"> The test run end DateTime(ISO 8601 literal format). </param>
        /// <param name="executedDateTime"> Test run initiated time. </param>
        /// <param name="portalUrl"> Portal url. </param>
        /// <param name="duration"> Test run duration in milliseconds. </param>
        /// <param name="subnetId"> Subnet ID on which the load test instances should run. </param>
        /// <param name="createdDateTime"> The creation datetime(ISO 8601 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(ISO 8601 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        internal TestRun(PassFailCriteria passFailCriteria, IReadOnlyDictionary<string, Secret> secrets, CertificateMetadata certificate, IReadOnlyDictionary<string, string> environmentVariables, IReadOnlyList<ErrorDetails> errorDetails, IReadOnlyDictionary<string, TestRunStatistics> testRunStatistics, LoadTestConfiguration loadTestConfiguration, TestRunArtifacts testArtifacts, PFTestResult? testResult, int? virtualUsers, string displayName, string testId, string description, Status? status, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, DateTimeOffset? executedDateTime, string portalUrl, int? duration, string subnetId, DateTimeOffset? createdDateTime, string createdBy, DateTimeOffset? lastModifiedDateTime, string lastModifiedBy)
        {
            PassFailCriteria = passFailCriteria;
            Secrets = secrets;
            Certificate = certificate;
            EnvironmentVariables = environmentVariables;
            ErrorDetails = errorDetails;
            TestRunStatistics = testRunStatistics;
            LoadTestConfiguration = loadTestConfiguration;
            TestArtifacts = testArtifacts;
            TestResult = testResult;
            VirtualUsers = virtualUsers;
            DisplayName = displayName;
            TestId = testId;
            Description = description;
            Status = status;
            StartDateTime = startDateTime;
            EndDateTime = endDateTime;
            ExecutedDateTime = executedDateTime;
            PortalUrl = portalUrl;
            Duration = duration;
            SubnetId = subnetId;
            CreatedDateTime = createdDateTime;
            CreatedBy = createdBy;
            LastModifiedDateTime = lastModifiedDateTime;
            LastModifiedBy = lastModifiedBy;
        }

        /// <summary> Pass fail criteria for a test. </summary>
        public PassFailCriteria PassFailCriteria { get; }
        /// <summary>
        /// Secrets can be stored in an Azure Key Vault or any other secret store. If the
        /// secret is stored in an Azure Key Vault, the value should be the secret
        /// identifier and the type should be AKV_SECRET_URI. If the secret is stored
        /// elsewhere, the secret value should be provided directly and the type should be
        /// SECRET_VALUE.
        /// </summary>
        public IReadOnlyDictionary<string, Secret> Secrets { get; }
        /// <summary> Certificates metadata. </summary>
        public CertificateMetadata Certificate { get; }
        /// <summary> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </summary>
        public IReadOnlyDictionary<string, string> EnvironmentVariables { get; }
        /// <summary> Error details if there is any failure in load test run. </summary>
        public IReadOnlyList<ErrorDetails> ErrorDetails { get; }
        /// <summary> Test run statistics. </summary>
        public IReadOnlyDictionary<string, TestRunStatistics> TestRunStatistics { get; }
        /// <summary> The load test configuration. </summary>
        public LoadTestConfiguration LoadTestConfiguration { get; }
        /// <summary> Collection of test run artifacts. </summary>
        public TestRunArtifacts TestArtifacts { get; }
        /// <summary> Test result for pass/Fail criteria used during the test run. </summary>
        public PFTestResult? TestResult { get; }
        /// <summary> Number of virtual users, for which test has been run. </summary>
        public int? VirtualUsers { get; }
        /// <summary> Display name of a testRun. </summary>
        public string DisplayName { get; }
        /// <summary> Associated test Id. </summary>
        public string TestId { get; }
        /// <summary> The test run description. </summary>
        public string Description { get; }
        /// <summary> The test run status. </summary>
        public Status? Status { get; }
        /// <summary> The test run start DateTime(ISO 8601 literal format). </summary>
        public DateTimeOffset? StartDateTime { get; }
        /// <summary> The test run end DateTime(ISO 8601 literal format). </summary>
        public DateTimeOffset? EndDateTime { get; }
        /// <summary> Test run initiated time. </summary>
        public DateTimeOffset? ExecutedDateTime { get; }
        /// <summary> Portal url. </summary>
        public string PortalUrl { get; }
        /// <summary> Test run duration in milliseconds. </summary>
        public int? Duration { get; }
        /// <summary> Subnet ID on which the load test instances should run. </summary>
        public string SubnetId { get; }
        /// <summary> The creation datetime(ISO 8601 literal format). </summary>
        public DateTimeOffset? CreatedDateTime { get; }
        /// <summary> The user that created. </summary>
        public string CreatedBy { get; }
        /// <summary> The last Modified datetime(ISO 8601 literal format). </summary>
        public DateTimeOffset? LastModifiedDateTime { get; }
        /// <summary> The user that last modified. </summary>
        public string LastModifiedBy { get; }
    }
}
