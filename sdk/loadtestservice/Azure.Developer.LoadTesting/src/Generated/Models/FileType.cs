// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS). </summary>
    public readonly partial struct FileType : IEquatable<FileType>
    {
        private readonly int _value;

        /// <summary> Determines if two <see cref="FileType"/> values are the same. </summary>
        public FileType(int value)
        {
            _value = value;
        }

        private const int ZeroValue = 0;
        private const int OneValue = 1;
        private const int TwoValue = 2;

        /// <summary> 0. </summary>
        public static FileType Zero { get; } = new FileType(ZeroValue);
        /// <summary> 1. </summary>
        public static FileType One { get; } = new FileType(OneValue);
        /// <summary> 2. </summary>
        public static FileType Two { get; } = new FileType(TwoValue);
        /// <summary> Determines if two <see cref="FileType"/> values are the same. </summary>
        public static bool operator ==(FileType left, FileType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FileType"/> values are not the same. </summary>
        public static bool operator !=(FileType left, FileType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FileType"/>. </summary>
        public static implicit operator FileType(int value) => new FileType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FileType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FileType other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
