// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Developer.LoadTesting.Models
{
    public partial class Series
    {
        internal static Series DeserializeSeries(JsonElement element)
        {
            Optional<IReadOnlyDictionary<string, IList<TimeSeries>>> activeUsers = default;
            Optional<IReadOnlyDictionary<string, IList<TimeSeries>>> responseTime = default;
            Optional<IReadOnlyDictionary<string, IList<TimeSeries>>> throughput = default;
            Optional<IReadOnlyDictionary<string, IList<TimeSeries>>> errors = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("activeUsers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, IList<TimeSeries>> dictionary = new Dictionary<string, IList<TimeSeries>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        List<TimeSeries> array = new List<TimeSeries>();
                        foreach (var item in property0.Value.EnumerateArray())
                        {
                            array.Add(TimeSeries.DeserializeTimeSeries(item));
                        }
                        dictionary.Add(property0.Name, array);
                    }
                    activeUsers = dictionary;
                    continue;
                }
                if (property.NameEquals("responseTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, IList<TimeSeries>> dictionary = new Dictionary<string, IList<TimeSeries>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        List<TimeSeries> array = new List<TimeSeries>();
                        foreach (var item in property0.Value.EnumerateArray())
                        {
                            array.Add(TimeSeries.DeserializeTimeSeries(item));
                        }
                        dictionary.Add(property0.Name, array);
                    }
                    responseTime = dictionary;
                    continue;
                }
                if (property.NameEquals("throughput"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, IList<TimeSeries>> dictionary = new Dictionary<string, IList<TimeSeries>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        List<TimeSeries> array = new List<TimeSeries>();
                        foreach (var item in property0.Value.EnumerateArray())
                        {
                            array.Add(TimeSeries.DeserializeTimeSeries(item));
                        }
                        dictionary.Add(property0.Name, array);
                    }
                    throughput = dictionary;
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, IList<TimeSeries>> dictionary = new Dictionary<string, IList<TimeSeries>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        List<TimeSeries> array = new List<TimeSeries>();
                        foreach (var item in property0.Value.EnumerateArray())
                        {
                            array.Add(TimeSeries.DeserializeTimeSeries(item));
                        }
                        dictionary.Add(property0.Name, array);
                    }
                    errors = dictionary;
                    continue;
                }
            }
            return new Series(Optional.ToDictionary(activeUsers), Optional.ToDictionary(responseTime), Optional.ToDictionary(throughput), Optional.ToDictionary(errors));
        }
    }
}
