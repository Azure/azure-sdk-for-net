// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> The test run status. </summary>
    public readonly partial struct Status : IEquatable<Status>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Status"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AcceptedValue = "ACCEPTED";
        private const string NotstartedValue = "NOTSTARTED";
        private const string ProvisioningValue = "PROVISIONING";
        private const string ProvisionedValue = "PROVISIONED";
        private const string ConfiguringValue = "CONFIGURING";
        private const string ConfiguredValue = "CONFIGURED";
        private const string ExecutingValue = "EXECUTING";
        private const string ExecutedValue = "EXECUTED";
        private const string DeprovisioningValue = "DEPROVISIONING";
        private const string DeprovisionedValue = "DEPROVISIONED";
        private const string DoneValue = "DONE";
        private const string CancellingValue = "CANCELLING";
        private const string CancelledValue = "CANCELLED";
        private const string FailedValue = "FAILED";
        private const string ValidationSuccessValue = "VALIDATION_SUCCESS";
        private const string ValidationFailureValue = "VALIDATION_FAILURE";

        /// <summary> Test run request is accepted. </summary>
        public static Status Accepted { get; } = new Status(AcceptedValue);
        /// <summary> Test run is not yet started. </summary>
        public static Status Notstarted { get; } = new Status(NotstartedValue);
        /// <summary> Test run is getting provision. </summary>
        public static Status Provisioning { get; } = new Status(ProvisioningValue);
        /// <summary> Test run is provisioned. </summary>
        public static Status Provisioned { get; } = new Status(ProvisionedValue);
        /// <summary> Test run is getting configure. </summary>
        public static Status Configuring { get; } = new Status(ConfiguringValue);
        /// <summary> Test run configuration is done. </summary>
        public static Status Configured { get; } = new Status(ConfiguredValue);
        /// <summary> Test run has started executing. </summary>
        public static Status Executing { get; } = new Status(ExecutingValue);
        /// <summary> Test run has been executed. </summary>
        public static Status Executed { get; } = new Status(ExecutedValue);
        /// <summary> Test run is getting deprovision. </summary>
        public static Status Deprovisioning { get; } = new Status(DeprovisioningValue);
        /// <summary> Test run request is deprovisioned. </summary>
        public static Status Deprovisioned { get; } = new Status(DeprovisionedValue);
        /// <summary> Test run request is finished. </summary>
        public static Status Done { get; } = new Status(DoneValue);
        /// <summary> Test run request is getting cancelled. </summary>
        public static Status Cancelling { get; } = new Status(CancellingValue);
        /// <summary> Test run request is cancelled. </summary>
        public static Status Cancelled { get; } = new Status(CancelledValue);
        /// <summary> Test run request is failed. </summary>
        public static Status Failed { get; } = new Status(FailedValue);
        /// <summary> Test run JMX file is validated. </summary>
        public static Status ValidationSuccess { get; } = new Status(ValidationSuccessValue);
        /// <summary> Test run JMX file validation is failed. </summary>
        public static Status ValidationFailure { get; } = new Status(ValidationFailureValue);
        /// <summary> Determines if two <see cref="Status"/> values are the same. </summary>
        public static bool operator ==(Status left, Status right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Status"/> values are not the same. </summary>
        public static bool operator !=(Status left, Status right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Status"/>. </summary>
        public static implicit operator Status(string value) => new Status(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Status other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
