// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureLoadTesting.Models
{
    public readonly partial struct Status : IEquatable<Status>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Status"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ACCEPTEDValue = "ACCEPTED";
        private const string NOTSTARTEDValue = "NOTSTARTED";
        private const string PROVISIONINGValue = "PROVISIONING";
        private const string PROVISIONEDValue = "PROVISIONED";
        private const string CONFIGURINGValue = "CONFIGURING";
        private const string CONFIGUREDValue = "CONFIGURED";
        private const string EXECUTINGValue = "EXECUTING";
        private const string EXECUTEDValue = "EXECUTED";
        private const string DEPROVISIONINGValue = "DEPROVISIONING";
        private const string DEPROVISIONEDValue = "DEPROVISIONED";
        private const string DONEValue = "DONE";
        private const string CANCELLINGValue = "CANCELLING";
        private const string CANCELLEDValue = "CANCELLED";
        private const string FAILEDValue = "FAILED";
        private const string VALIDATIONSUCCESSValue = "VALIDATION_SUCCESS";
        private const string VALIDATIONFAILUREValue = "VALIDATION_FAILURE";

        /// <summary> Test run request is accepted. </summary>
        public static Status ACCEPTED { get; } = new Status(ACCEPTEDValue);
        /// <summary> Test run is not yet started. </summary>
        public static Status NOTSTARTED { get; } = new Status(NOTSTARTEDValue);
        /// <summary> Test run is getting provision. </summary>
        public static Status PROVISIONING { get; } = new Status(PROVISIONINGValue);
        /// <summary> Test run is provisioned. </summary>
        public static Status PROVISIONED { get; } = new Status(PROVISIONEDValue);
        /// <summary> Test run is getting configure. </summary>
        public static Status CONFIGURING { get; } = new Status(CONFIGURINGValue);
        /// <summary> Test run configuration is done. </summary>
        public static Status CONFIGURED { get; } = new Status(CONFIGUREDValue);
        /// <summary> Test run has started executing. </summary>
        public static Status EXECUTING { get; } = new Status(EXECUTINGValue);
        /// <summary> Test run has been executed. </summary>
        public static Status EXECUTED { get; } = new Status(EXECUTEDValue);
        /// <summary> Test run is getting deprovision. </summary>
        public static Status DEPROVISIONING { get; } = new Status(DEPROVISIONINGValue);
        /// <summary> Test run request is deprovisioned. </summary>
        public static Status DEPROVISIONED { get; } = new Status(DEPROVISIONEDValue);
        /// <summary> Test run request is finished. </summary>
        public static Status DONE { get; } = new Status(DONEValue);
        /// <summary> Test run request is getting cancelled. </summary>
        public static Status CANCELLING { get; } = new Status(CANCELLINGValue);
        /// <summary> Test run request is cancelled. </summary>
        public static Status CANCELLED { get; } = new Status(CANCELLEDValue);
        /// <summary> Test run request is failed. </summary>
        public static Status FAILED { get; } = new Status(FAILEDValue);
        /// <summary> Test run JMX file is validated. </summary>
        public static Status VALIDATIONSUCCESS { get; } = new Status(VALIDATIONSUCCESSValue);
        /// <summary> Test run JMX file validation is failed. </summary>
        public static Status VALIDATIONFAILURE { get; } = new Status(VALIDATIONFAILUREValue);
        /// <summary> Determines if two <see cref="Status"/> values are the same. </summary>
        public static bool operator ==(Status left, Status right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Status"/> values are not the same. </summary>
        public static bool operator !=(Status left, Status right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Status"/>. </summary>
        public static implicit operator Status(string value) => new Status(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Status other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
