// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureLoadTesting.Models
{
    public readonly partial struct FileStatus : IEquatable<FileStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FileStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FileStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NOTVALIDATEDValue = "NOT_VALIDATED";
        private const string VALIDATIONSUCCESSValue = "VALIDATION_SUCCESS";
        private const string VALIDATIONFAILUREValue = "VALIDATION_FAILURE";
        private const string VALIDATIONINITIATEDValue = "VALIDATION_INITIATED";
        private const string VALIDATIONNOTREQUIREDValue = "VALIDATION_NOT_REQUIRED";

        /// <summary> File is not validated. </summary>
        public static FileStatus NOTVALIDATED { get; } = new FileStatus(NOTVALIDATEDValue);
        /// <summary> File is validated. </summary>
        public static FileStatus VALIDATIONSUCCESS { get; } = new FileStatus(VALIDATIONSUCCESSValue);
        /// <summary> File validation is failed. </summary>
        public static FileStatus VALIDATIONFAILURE { get; } = new FileStatus(VALIDATIONFAILUREValue);
        /// <summary> File validation is in progress. </summary>
        public static FileStatus VALIDATIONINITIATED { get; } = new FileStatus(VALIDATIONINITIATEDValue);
        /// <summary> Validation is not required. </summary>
        public static FileStatus VALIDATIONNOTREQUIRED { get; } = new FileStatus(VALIDATIONNOTREQUIREDValue);
        /// <summary> Determines if two <see cref="FileStatus"/> values are the same. </summary>
        public static bool operator ==(FileStatus left, FileStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FileStatus"/> values are not the same. </summary>
        public static bool operator !=(FileStatus left, FileStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FileStatus"/>. </summary>
        public static implicit operator FileStatus(string value) => new FileStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FileStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FileStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
