// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> The PassFailMetric. </summary>
    public partial class PassFailMetric
    {
        /// <summary> Initializes a new instance of PassFailMetric. </summary>
        public PassFailMetric()
        {
        }

        /// <summary> Initializes a new instance of PassFailMetric. </summary>
        /// <param name="clientmetric"> The client metric on which the criteria should be applied. Allowed values - ‘response_time_ms’ , ‘latency’, ‘error’. </param>
        /// <param name="aggregate"> The aggregation function to be applied on the client metric. Allowed functions - ‘percentage’ - for error metric , ‘avg’ - for response_time_ms and latency metric. </param>
        /// <param name="condition"> The comparison operator. Supported types ‘&gt;’. </param>
        /// <param name="value"> The value to compare with the client metric. Allowed values - ‘error : [0.0 , 100.0] unit- % ’, response_time_ms and latency : any integer value unit- ms. </param>
        /// <param name="action"> Either ‘stop’ or ‘continue’ after the threshold is met. Default is ‘continue’. </param>
        /// <param name="actualValue"> The actual value of the client metric for the test run. </param>
        /// <param name="result"> Outcome of the test run. possible outcome - ‘passed’ , ‘failed’ , ‘undetermined’. </param>
        internal PassFailMetric(string clientmetric, string aggregate, string condition, double? value, string action, double? actualValue, string result)
        {
            Clientmetric = clientmetric;
            Aggregate = aggregate;
            Condition = condition;
            Value = value;
            Action = action;
            ActualValue = actualValue;
            Result = result;
        }

        /// <summary> The client metric on which the criteria should be applied. Allowed values - ‘response_time_ms’ , ‘latency’, ‘error’. </summary>
        public string Clientmetric { get; set; }
        /// <summary> The aggregation function to be applied on the client metric. Allowed functions - ‘percentage’ - for error metric , ‘avg’ - for response_time_ms and latency metric. </summary>
        public string Aggregate { get; set; }
        /// <summary> The comparison operator. Supported types ‘&gt;’. </summary>
        public string Condition { get; set; }
        /// <summary> The value to compare with the client metric. Allowed values - ‘error : [0.0 , 100.0] unit- % ’, response_time_ms and latency : any integer value unit- ms. </summary>
        public double? Value { get; set; }
        /// <summary> Either ‘stop’ or ‘continue’ after the threshold is met. Default is ‘continue’. </summary>
        public string Action { get; set; }
        /// <summary> The actual value of the client metric for the test run. </summary>
        public double? ActualValue { get; }
        /// <summary> Outcome of the test run. possible outcome - ‘passed’ , ‘failed’ , ‘undetermined’. </summary>
        public string Result { get; }
    }
}
