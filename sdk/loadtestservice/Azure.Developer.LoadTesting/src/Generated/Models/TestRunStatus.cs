// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> Test run status. </summary>
    public readonly partial struct TestRunStatus : IEquatable<TestRunStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TestRunStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TestRunStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ACCEPTEDValue = "ACCEPTED";
        private const string NOTSTARTEDValue = "NOTSTARTED";
        private const string PROVISIONINGValue = "PROVISIONING";
        private const string PROVISIONEDValue = "PROVISIONED";
        private const string CONFIGURINGValue = "CONFIGURING";
        private const string CONFIGUREDValue = "CONFIGURED";
        private const string EXECUTINGValue = "EXECUTING";
        private const string EXECUTEDValue = "EXECUTED";
        private const string DEPROVISIONINGValue = "DEPROVISIONING";
        private const string DEPROVISIONEDValue = "DEPROVISIONED";
        private const string DONEValue = "DONE";
        private const string CANCELLINGValue = "CANCELLING";
        private const string CANCELLEDValue = "CANCELLED";
        private const string FAILEDValue = "FAILED";
        private const string VALIDATIONSUCCESSValue = "VALIDATION_SUCCESS";
        private const string VALIDATIONFAILUREValue = "VALIDATION_FAILURE";

        /// <summary> Test run request is accepted. </summary>
        public static TestRunStatus ACCEPTED { get; } = new TestRunStatus(ACCEPTEDValue);
        /// <summary> Test run is not yet started. </summary>
        public static TestRunStatus NOTSTARTED { get; } = new TestRunStatus(NOTSTARTEDValue);
        /// <summary> Test run is provisioning. </summary>
        public static TestRunStatus PROVISIONING { get; } = new TestRunStatus(PROVISIONINGValue);
        /// <summary> Test run is provisioned. </summary>
        public static TestRunStatus PROVISIONED { get; } = new TestRunStatus(PROVISIONEDValue);
        /// <summary> Test run is getting configured. </summary>
        public static TestRunStatus CONFIGURING { get; } = new TestRunStatus(CONFIGURINGValue);
        /// <summary> Test run configuration is done. </summary>
        public static TestRunStatus CONFIGURED { get; } = new TestRunStatus(CONFIGUREDValue);
        /// <summary> Test run has started executing. </summary>
        public static TestRunStatus EXECUTING { get; } = new TestRunStatus(EXECUTINGValue);
        /// <summary> Test run execution is completed. </summary>
        public static TestRunStatus EXECUTED { get; } = new TestRunStatus(EXECUTEDValue);
        /// <summary> Test run is getting deprovisioned. </summary>
        public static TestRunStatus DEPROVISIONING { get; } = new TestRunStatus(DEPROVISIONINGValue);
        /// <summary> Test run is deprovisioned. </summary>
        public static TestRunStatus DEPROVISIONED { get; } = new TestRunStatus(DEPROVISIONEDValue);
        /// <summary> Test run is completed. </summary>
        public static TestRunStatus DONE { get; } = new TestRunStatus(DONEValue);
        /// <summary> Test run is being cancelled. </summary>
        public static TestRunStatus CANCELLING { get; } = new TestRunStatus(CANCELLINGValue);
        /// <summary> Test run request is cancelled. </summary>
        public static TestRunStatus CANCELLED { get; } = new TestRunStatus(CANCELLEDValue);
        /// <summary> Test run request is failed. </summary>
        public static TestRunStatus FAILED { get; } = new TestRunStatus(FAILEDValue);
        /// <summary> Test run JMX file is validated. </summary>
        public static TestRunStatus VALIDATIONSUCCESS { get; } = new TestRunStatus(VALIDATIONSUCCESSValue);
        /// <summary> Test run JMX file validation is failed. </summary>
        public static TestRunStatus VALIDATIONFAILURE { get; } = new TestRunStatus(VALIDATIONFAILUREValue);
        /// <summary> Determines if two <see cref="TestRunStatus"/> values are the same. </summary>
        public static bool operator ==(TestRunStatus left, TestRunStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TestRunStatus"/> values are not the same. </summary>
        public static bool operator !=(TestRunStatus left, TestRunStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TestRunStatus"/>. </summary>
        public static implicit operator TestRunStatus(string value) => new TestRunStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TestRunStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TestRunStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
