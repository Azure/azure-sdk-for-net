// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Developer.LoadTesting.Models
{
    public partial class InputTestArtifacts
    {
        internal static InputTestArtifacts DeserializeInputTestArtifacts(JsonElement element)
        {
            Optional<FileUrl> configUrl = default;
            Optional<FileUrl> testScriptUrl = default;
            Optional<FileUrl> userPropUrl = default;
            Optional<FileUrl> inputArtifactsZipFileurl = default;
            Optional<IReadOnlyList<FileUrl>> additionalUrls = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("configUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    configUrl = FileUrl.DeserializeFileUrl(property.Value);
                    continue;
                }
                if (property.NameEquals("testScriptUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    testScriptUrl = FileUrl.DeserializeFileUrl(property.Value);
                    continue;
                }
                if (property.NameEquals("userPropUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    userPropUrl = FileUrl.DeserializeFileUrl(property.Value);
                    continue;
                }
                if (property.NameEquals("inputArtifactsZipFileurl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    inputArtifactsZipFileurl = FileUrl.DeserializeFileUrl(property.Value);
                    continue;
                }
                if (property.NameEquals("additionalUrls"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<FileUrl> array = new List<FileUrl>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FileUrl.DeserializeFileUrl(item));
                    }
                    additionalUrls = array;
                    continue;
                }
            }
            return new InputTestArtifacts(configUrl.Value, testScriptUrl.Value, userPropUrl.Value, inputArtifactsZipFileurl.Value, Optional.ToList(additionalUrls));
        }
    }
}
