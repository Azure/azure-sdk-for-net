// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting.Models
{
    /// <summary> Aggregation type. </summary>
    public readonly partial struct Aggregation : IEquatable<Aggregation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Aggregation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Aggregation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AverageValue = "Average";
        private const string CountValue = "Count";
        private const string NoneValue = "None";
        private const string TotalValue = "Total";
        private const string Percentile75Value = "Percentile75";
        private const string Percentile90Value = "Percentile90";
        private const string Percentile95Value = "Percentile95";
        private const string Percentile96Value = "Percentile96";
        private const string Percentile97Value = "Percentile97";
        private const string Percentile98Value = "Percentile98";
        private const string Percentile99Value = "Percentile99";
        private const string Percentile999Value = "Percentile999";
        private const string Percentile9999Value = "Percentile9999";

        /// <summary> Average value. </summary>
        public static Aggregation Average { get; } = new Aggregation(AverageValue);
        /// <summary> Total count. </summary>
        public static Aggregation Count { get; } = new Aggregation(CountValue);
        /// <summary> Aggregation will be average in this case. </summary>
        public static Aggregation None { get; } = new Aggregation(NoneValue);
        /// <summary> Total sum. </summary>
        public static Aggregation Total { get; } = new Aggregation(TotalValue);
        /// <summary> 75th percentile. </summary>
        public static Aggregation Percentile75 { get; } = new Aggregation(Percentile75Value);
        /// <summary> 90th percentile. </summary>
        public static Aggregation Percentile90 { get; } = new Aggregation(Percentile90Value);
        /// <summary> 95th percentile. </summary>
        public static Aggregation Percentile95 { get; } = new Aggregation(Percentile95Value);
        /// <summary> 96th percentile. </summary>
        public static Aggregation Percentile96 { get; } = new Aggregation(Percentile96Value);
        /// <summary> 97th percentile. </summary>
        public static Aggregation Percentile97 { get; } = new Aggregation(Percentile97Value);
        /// <summary> 98th percentile. </summary>
        public static Aggregation Percentile98 { get; } = new Aggregation(Percentile98Value);
        /// <summary> 99th percentile. </summary>
        public static Aggregation Percentile99 { get; } = new Aggregation(Percentile99Value);
        /// <summary> 99.9th percentile. </summary>
        public static Aggregation Percentile999 { get; } = new Aggregation(Percentile999Value);
        /// <summary> 99.99th percentile. </summary>
        public static Aggregation Percentile9999 { get; } = new Aggregation(Percentile9999Value);
        /// <summary> Determines if two <see cref="Aggregation"/> values are the same. </summary>
        public static bool operator ==(Aggregation left, Aggregation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Aggregation"/> values are not the same. </summary>
        public static bool operator !=(Aggregation left, Aggregation right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Aggregation"/>. </summary>
        public static implicit operator Aggregation(string value) => new Aggregation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Aggregation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Aggregation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
