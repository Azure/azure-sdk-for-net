// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace AzureLoadTesting.Models
{
    public partial class FileInfo
    {
        internal static FileInfo DeserializeFileInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> url = default;
            Optional<string> fileName = default;
            Optional<FileType> fileType = default;
            Optional<DateTimeOffset> expireDateTime = default;
            Optional<FileStatus> validationStatus = default;
            Optional<string> validationFailureDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileName"u8))
                {
                    fileName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fileType = new FileType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("expireDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expireDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("validationStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validationStatus = new FileStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("validationFailureDetails"u8))
                {
                    validationFailureDetails = property.Value.GetString();
                    continue;
                }
            }
            return new FileInfo(url.Value, fileName.Value, Optional.ToNullable(fileType), Optional.ToNullable(expireDateTime), Optional.ToNullable(validationStatus), validationFailureDetails.Value);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static FileInfo FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeFileInfo(document.RootElement);
        }
    }
}
