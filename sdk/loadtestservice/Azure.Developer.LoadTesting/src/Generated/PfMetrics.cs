// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Metrics for pass/fail criteria. </summary>
    public readonly partial struct PfMetrics : IEquatable<PfMetrics>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PfMetrics"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PfMetrics(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ResponseTimeInMillisecondsValue = "response_time_ms";
        private const string LatencyValue = "latency";
        private const string ErrorValue = "error";
        private const string RequestsValue = "requests";
        private const string RequestsPerSecondValue = "requests_per_sec";

        /// <summary> Pass fail criteria for response time metric in milliseconds. </summary>
        public static PfMetrics ResponseTimeInMilliseconds { get; } = new PfMetrics(ResponseTimeInMillisecondsValue);
        /// <summary> Pass fail criteria for latency metric in milliseconds. </summary>
        public static PfMetrics Latency { get; } = new PfMetrics(LatencyValue);
        /// <summary> Pass fail criteria for error metric. </summary>
        public static PfMetrics Error { get; } = new PfMetrics(ErrorValue);
        /// <summary> Pass fail criteria for total requests. </summary>
        public static PfMetrics Requests { get; } = new PfMetrics(RequestsValue);
        /// <summary> Pass fail criteria for request per second. </summary>
        public static PfMetrics RequestsPerSecond { get; } = new PfMetrics(RequestsPerSecondValue);
        /// <summary> Determines if two <see cref="PfMetrics"/> values are the same. </summary>
        public static bool operator ==(PfMetrics left, PfMetrics right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PfMetrics"/> values are not the same. </summary>
        public static bool operator !=(PfMetrics left, PfMetrics right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PfMetrics"/>. </summary>
        public static implicit operator PfMetrics(string value) => new PfMetrics(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PfMetrics other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PfMetrics other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
