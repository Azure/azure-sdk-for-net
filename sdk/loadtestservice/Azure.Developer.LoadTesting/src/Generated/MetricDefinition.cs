// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Metric definition. </summary>
    public partial class MetricDefinition
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MetricDefinition"/>. </summary>
        internal MetricDefinition()
        {
            Dimensions = new ChangeTrackingList<NameAndDescription>();
            SupportedAggregationTypes = new ChangeTrackingList<string>();
            MetricAvailabilities = new ChangeTrackingList<MetricAvailability>();
        }

        /// <summary> Initializes a new instance of <see cref="MetricDefinition"/>. </summary>
        /// <param name="dimensions"> List of dimensions. </param>
        /// <param name="description"> The metric description. </param>
        /// <param name="name"> The metric name. </param>
        /// <param name="namespace"> The namespace the metric belongs to. </param>
        /// <param name="primaryAggregationType"> The primary aggregation type value defining how to use the values for display. </param>
        /// <param name="supportedAggregationTypes"> The collection of what all aggregation types are supported. </param>
        /// <param name="unit"> The unit of the metric. </param>
        /// <param name="metricAvailabilities">
        /// Metric availability specifies the time grain (aggregation interval or
        /// frequency).
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MetricDefinition(IReadOnlyList<NameAndDescription> dimensions, string description, string name, string @namespace, AggregationType? primaryAggregationType, IReadOnlyList<string> supportedAggregationTypes, MetricUnit? unit, IReadOnlyList<MetricAvailability> metricAvailabilities, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Dimensions = dimensions;
            Description = description;
            Name = name;
            Namespace = @namespace;
            PrimaryAggregationType = primaryAggregationType;
            SupportedAggregationTypes = supportedAggregationTypes;
            Unit = unit;
            MetricAvailabilities = metricAvailabilities;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> List of dimensions. </summary>
        public IReadOnlyList<NameAndDescription> Dimensions { get; }
        /// <summary> The metric description. </summary>
        public string Description { get; }
        /// <summary> The metric name. </summary>
        public string Name { get; }
        /// <summary> The namespace the metric belongs to. </summary>
        public string Namespace { get; }
        /// <summary> The primary aggregation type value defining how to use the values for display. </summary>
        public AggregationType? PrimaryAggregationType { get; }
        /// <summary> The collection of what all aggregation types are supported. </summary>
        public IReadOnlyList<string> SupportedAggregationTypes { get; }
        /// <summary> The unit of the metric. </summary>
        public MetricUnit? Unit { get; }
        /// <summary>
        /// Metric availability specifies the time grain (aggregation interval or
        /// frequency).
        /// </summary>
        public IReadOnlyList<MetricAvailability> MetricAvailabilities { get; }
    }
}
