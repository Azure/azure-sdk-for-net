<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateOrUpdateAppComponentsAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAppComponentsAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {
    value = new {
        key = new {
            resourceId = "<resourceId>",
            resourceName = "<resourceName>",
            resourceType = "<resourceType>",
        },
    },
};

Response response = await client.CreateOrUpdateAppComponentsAsync("<name>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
]]></code>
This sample shows how to call CreateOrUpdateAppComponentsAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {
    testId = "<testId>",
    testRunId = "<testRunId>",
    value = new {
        key = new {
            resourceId = "<resourceId>",
            resourceName = "<resourceName>",
            resourceType = "<resourceType>",
            displayName = "<displayName>",
            kind = "<kind>",
        },
    },
};

Response response = await client.CreateOrUpdateAppComponentsAsync("<name>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AppComponentsMap</c>:
<code>{
  resourceId: string, # Optional. Azure Load Testing resource Id
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
  name: string, # Optional. AppComponent name
  value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
}
</code>

Response Body:

Schema for <c>AppComponentsMap</c>:
<code>{
  resourceId: string, # Optional. Azure Load Testing resource Id
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
  name: string, # Optional. AppComponent name
  value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateAppComponents(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAppComponents with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {
    value = new {
        key = new {
            resourceId = "<resourceId>",
            resourceName = "<resourceName>",
            resourceType = "<resourceType>",
        },
    },
};

Response response = client.CreateOrUpdateAppComponents("<name>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
]]></code>
This sample shows how to call CreateOrUpdateAppComponents with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {
    testId = "<testId>",
    testRunId = "<testRunId>",
    value = new {
        key = new {
            resourceId = "<resourceId>",
            resourceName = "<resourceName>",
            resourceType = "<resourceType>",
            displayName = "<displayName>",
            kind = "<kind>",
        },
    },
};

Response response = client.CreateOrUpdateAppComponents("<name>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AppComponentsMap</c>:
<code>{
  resourceId: string, # Optional. Azure Load Testing resource Id
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
  name: string, # Optional. AppComponent name
  value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
}
</code>

Response Body:

Schema for <c>AppComponentsMap</c>:
<code>{
  resourceId: string, # Optional. Azure Load Testing resource Id
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
  name: string, # Optional. AppComponent name
  value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
}
</code>

</remarks>
    </member>
    <member name="DeleteAppComponentAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteAppComponentAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.DeleteAppComponentAsync("<name>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteAppComponent(String,RequestContext)">
<example>
This sample shows how to call DeleteAppComponent with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.DeleteAppComponent("<name>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetAppComponentByNameAsync(String,RequestContext)">
<example>
This sample shows how to call GetAppComponentByNameAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetAppComponentByNameAsync("<name>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AppComponentsMap</c>:
<code>{
  resourceId: string, # Optional. Azure Load Testing resource Id
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
  name: string, # Optional. AppComponent name
  value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
}
</code>

</remarks>
    </member>
    <member name="GetAppComponentByName(String,RequestContext)">
<example>
This sample shows how to call GetAppComponentByName with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetAppComponentByName("<name>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AppComponentsMap</c>:
<code>{
  resourceId: string, # Optional. Azure Load Testing resource Id
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
  name: string, # Optional. AppComponent name
  value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
}
</code>

</remarks>
    </member>
    <member name="GetAppComponentAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetAppComponentAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetAppComponentAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
]]></code>
This sample shows how to call GetAppComponentAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetAppComponentAsync("<testRunId>", "<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AppComponentsMap</c>:
<code>{
  resourceId: string, # Optional. Azure Load Testing resource Id
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
  name: string, # Optional. AppComponent name
  value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
}
</code>

</remarks>
    </member>
    <member name="GetAppComponent(String,String,RequestContext)">
<example>
This sample shows how to call GetAppComponent and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetAppComponent();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
]]></code>
This sample shows how to call GetAppComponent with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetAppComponent("<testRunId>", "<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>AppComponentsMap</c>:
<code>{
  resourceId: string, # Optional. Azure Load Testing resource Id
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
  name: string, # Optional. AppComponent name
  value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateServerMetricsConfigAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateServerMetricsConfigAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {};

Response response = await client.CreateOrUpdateServerMetricsConfigAsync("<name>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateServerMetricsConfigAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {
    testId = "<testId>",
    testRunId = "<testRunId>",
    metrics = new {
        key = new {
            resourceId = "<resourceId>",
            metricnamespace = "<metricnamespace>",
            displayDescription = "<displayDescription>",
            name = new {
                value = "<value>",
                localizedValue = "<localizedValue>",
            },
            aggregation = "<aggregation>",
            unit = "<unit>",
            resourceType = "<resourceType>",
        },
    },
};

Response response = await client.CreateOrUpdateServerMetricsConfigAsync("<name>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("metricnamespace").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("displayDescription").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("localizedValue").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>ServerMetricsModel</c>:
<code>{
  name: string, # Optional. Server metrics config name.
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required, if testId is not given] Load test run unique identifier
  metrics: Dictionary&lt;string, ResourceMetricModel&gt;, # Optional. Metrics map {metric id : metrics object} (Refer : https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for metric id).
}
</code>

Response Body:

Schema for <c>ServerMetricsModel</c>:
<code>{
  name: string, # Optional. Server metrics config name.
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required, if testId is not given] Load test run unique identifier
  metrics: Dictionary&lt;string, ResourceMetricModel&gt;, # Optional. Metrics map {metric id : metrics object} (Refer : https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for metric id).
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateServerMetricsConfig(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateServerMetricsConfig with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {};

Response response = client.CreateOrUpdateServerMetricsConfig("<name>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateServerMetricsConfig with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {
    testId = "<testId>",
    testRunId = "<testRunId>",
    metrics = new {
        key = new {
            resourceId = "<resourceId>",
            metricnamespace = "<metricnamespace>",
            displayDescription = "<displayDescription>",
            name = new {
                value = "<value>",
                localizedValue = "<localizedValue>",
            },
            aggregation = "<aggregation>",
            unit = "<unit>",
            resourceType = "<resourceType>",
        },
    },
};

Response response = client.CreateOrUpdateServerMetricsConfig("<name>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("metricnamespace").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("displayDescription").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("localizedValue").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>ServerMetricsModel</c>:
<code>{
  name: string, # Optional. Server metrics config name.
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required, if testId is not given] Load test run unique identifier
  metrics: Dictionary&lt;string, ResourceMetricModel&gt;, # Optional. Metrics map {metric id : metrics object} (Refer : https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for metric id).
}
</code>

Response Body:

Schema for <c>ServerMetricsModel</c>:
<code>{
  name: string, # Optional. Server metrics config name.
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required, if testId is not given] Load test run unique identifier
  metrics: Dictionary&lt;string, ResourceMetricModel&gt;, # Optional. Metrics map {metric id : metrics object} (Refer : https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for metric id).
}
</code>

</remarks>
    </member>
    <member name="GetServerMetricsByNameAsync(String,RequestContext)">
<example>
This sample shows how to call GetServerMetricsByNameAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetServerMetricsByNameAsync("<name>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("metricnamespace").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("displayDescription").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("localizedValue").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ServerMetricsModel</c>:
<code>{
  name: string, # Optional. Server metrics config name.
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required, if testId is not given] Load test run unique identifier
  metrics: Dictionary&lt;string, ResourceMetricModel&gt;, # Optional. Metrics map {metric id : metrics object} (Refer : https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for metric id).
}
</code>

</remarks>
    </member>
    <member name="GetServerMetricsByName(String,RequestContext)">
<example>
This sample shows how to call GetServerMetricsByName with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetServerMetricsByName("<name>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("metricnamespace").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("displayDescription").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("localizedValue").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ServerMetricsModel</c>:
<code>{
  name: string, # Optional. Server metrics config name.
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required, if testId is not given] Load test run unique identifier
  metrics: Dictionary&lt;string, ResourceMetricModel&gt;, # Optional. Metrics map {metric id : metrics object} (Refer : https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for metric id).
}
</code>

</remarks>
    </member>
    <member name="DeleteServerMetricsAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteServerMetricsAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.DeleteServerMetricsAsync("<name>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteServerMetrics(String,RequestContext)">
<example>
This sample shows how to call DeleteServerMetrics with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.DeleteServerMetrics("<name>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetServerMetricsAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetServerMetricsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetServerMetricsAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetServerMetricsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetServerMetricsAsync("<testRunId>", "<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("metricnamespace").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("displayDescription").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("localizedValue").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ServerMetricsModel</c>:
<code>{
  name: string, # Optional. Server metrics config name.
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required, if testId is not given] Load test run unique identifier
  metrics: Dictionary&lt;string, ResourceMetricModel&gt;, # Optional. Metrics map {metric id : metrics object} (Refer : https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for metric id).
}
</code>

</remarks>
    </member>
    <member name="GetServerMetrics(String,String,RequestContext)">
<example>
This sample shows how to call GetServerMetrics and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetServerMetrics();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetServerMetrics with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetServerMetrics("<testRunId>", "<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("metricnamespace").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("displayDescription").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("name").GetProperty("localizedValue").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<test>").GetProperty("resourceType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ServerMetricsModel</c>:
<code>{
  name: string, # Optional. Server metrics config name.
  testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
  testRunId: string, # Optional. [Required, if testId is not given] Load test run unique identifier
  metrics: Dictionary&lt;string, ResourceMetricModel&gt;, # Optional. Metrics map {metric id : metrics object} (Refer : https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for metric id).
}
</code>

</remarks>
    </member>
    <member name="GetServerDefaultMetricsAsync(RequestContext)">
<example>
This sample shows how to call GetServerDefaultMetricsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetServerDefaultMetricsAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("metricnamespace").ToString());
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("name").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("name").GetProperty("localizedValue").ToString());
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("displayDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DefaultServerMetricsConfigListModel</c>:
<code>{
  defaultMetrics: Dictionary&lt;string, DefaultServerMetricsConfigModel[]&gt;, # Optional. Default metrics map {resourceType : list of metrics config} (Refer for metrics structure: https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition)
}
</code>

</remarks>
    </member>
    <member name="GetServerDefaultMetrics(RequestContext)">
<example>
This sample shows how to call GetServerDefaultMetrics and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetServerDefaultMetrics();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("metricnamespace").ToString());
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("name").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("name").GetProperty("localizedValue").ToString());
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("defaultMetrics").GetProperty("<test>")[0].GetProperty("displayDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DefaultServerMetricsConfigListModel</c>:
<code>{
  defaultMetrics: Dictionary&lt;string, DefaultServerMetricsConfigModel[]&gt;, # Optional. Default metrics map {resourceType : list of metrics config} (Refer for metrics structure: https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition)
}
</code>

</remarks>
    </member>
    <member name="GetSupportedResourceTypesAsync(RequestContext)">
<example>
This sample shows how to call GetSupportedResourceTypesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetSupportedResourceTypesAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SupportedResourceType</c>:
<code>{
  value: [string], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetSupportedResourceTypes(RequestContext)">
<example>
This sample shows how to call GetSupportedResourceTypes and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetSupportedResourceTypes();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SupportedResourceType</c>:
<code>{
  value: [string], # Optional.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateTestAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateTestAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {};

Response response = await client.CreateOrUpdateTestAsync("<testId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateTestAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {
    description = "<description>",
    displayName = "<displayName>",
    loadTestConfig = new {
        engineInstances = 1234,
        splitAllCSVs = true,
    },
    passFailCriteria = new {
        passFailMetrics = new {
            key = new {
                clientmetric = "<clientmetric>",
                aggregate = "<aggregate>",
                condition = "<condition>",
                requestName = "<requestName>",
                value = 123.45d,
                action = "<action>",
            },
        },
    },
    secrets = new {
        key = new {
            value = "<value>",
            type = "<type>",
        },
    },
    environmentVariables = new {
        key = "<String>",
    },
    subnetId = "<subnetId>",
    keyvaultReferenceIdentityType = "<keyvaultReferenceIdentityType>",
    keyvaultReferenceIdentityId = "<keyvaultReferenceIdentityId>",
};

Response response = await client.CreateOrUpdateTestAsync("<testId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
Console.WriteLine(result.GetProperty("keyvaultReferenceIdentityType").ToString());
Console.WriteLine(result.GetProperty("keyvaultReferenceIdentityId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TestModel</c>:
<code>{
  testId: string, # Optional. Unique test name as identifier.
  description: string, # Optional. The test description.
  displayName: string, # Optional. Display name of a test.
  resourceId: string, # Optional. Fully qualified resource Id e.g /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test model.
  createdBy: string, # Optional. The user that created the test model.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last Modified DateTime(ISO 8601 literal format) of the test model.
  lastModifiedBy: string, # Optional. The user that last modified the test model.
  inputArtifacts: {
    configUrl: {
      url: string, # Optional. File URL.
      fileId: string, # Optional. File unique identifier.
      filename: string, # Optional. Name of the file.
      fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
      expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
      validationStatus: string, # Optional. Validation status of the file
    }, # Optional. FileUrl Model.
    testScriptUrl: FileUrl, # Optional. FileUrl Model.
    userPropUrl: FileUrl, # Optional. FileUrl Model.
    inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
    additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
  }, # Optional. The input artifacts for the test.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
  keyvaultReferenceIdentityType: string, # Optional. Type of the managed identity referencing the Key vault.
  keyvaultReferenceIdentityId: string, # Optional. Resource Id of the managed identity referencing the Key vault.
}
</code>

Response Body:

Schema for <c>TestModel</c>:
<code>{
  testId: string, # Optional. Unique test name as identifier.
  description: string, # Optional. The test description.
  displayName: string, # Optional. Display name of a test.
  resourceId: string, # Optional. Fully qualified resource Id e.g /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test model.
  createdBy: string, # Optional. The user that created the test model.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last Modified DateTime(ISO 8601 literal format) of the test model.
  lastModifiedBy: string, # Optional. The user that last modified the test model.
  inputArtifacts: {
    configUrl: {
      url: string, # Optional. File URL.
      fileId: string, # Optional. File unique identifier.
      filename: string, # Optional. Name of the file.
      fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
      expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
      validationStatus: string, # Optional. Validation status of the file
    }, # Optional. FileUrl Model.
    testScriptUrl: FileUrl, # Optional. FileUrl Model.
    userPropUrl: FileUrl, # Optional. FileUrl Model.
    inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
    additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
  }, # Optional. The input artifacts for the test.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
  keyvaultReferenceIdentityType: string, # Optional. Type of the managed identity referencing the Key vault.
  keyvaultReferenceIdentityId: string, # Optional. Resource Id of the managed identity referencing the Key vault.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateTest(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateTest with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {};

Response response = client.CreateOrUpdateTest("<testId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateTest with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = new {
    description = "<description>",
    displayName = "<displayName>",
    loadTestConfig = new {
        engineInstances = 1234,
        splitAllCSVs = true,
    },
    passFailCriteria = new {
        passFailMetrics = new {
            key = new {
                clientmetric = "<clientmetric>",
                aggregate = "<aggregate>",
                condition = "<condition>",
                requestName = "<requestName>",
                value = 123.45d,
                action = "<action>",
            },
        },
    },
    secrets = new {
        key = new {
            value = "<value>",
            type = "<type>",
        },
    },
    environmentVariables = new {
        key = "<String>",
    },
    subnetId = "<subnetId>",
    keyvaultReferenceIdentityType = "<keyvaultReferenceIdentityType>",
    keyvaultReferenceIdentityId = "<keyvaultReferenceIdentityId>",
};

Response response = client.CreateOrUpdateTest("<testId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
Console.WriteLine(result.GetProperty("keyvaultReferenceIdentityType").ToString());
Console.WriteLine(result.GetProperty("keyvaultReferenceIdentityId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TestModel</c>:
<code>{
  testId: string, # Optional. Unique test name as identifier.
  description: string, # Optional. The test description.
  displayName: string, # Optional. Display name of a test.
  resourceId: string, # Optional. Fully qualified resource Id e.g /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test model.
  createdBy: string, # Optional. The user that created the test model.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last Modified DateTime(ISO 8601 literal format) of the test model.
  lastModifiedBy: string, # Optional. The user that last modified the test model.
  inputArtifacts: {
    configUrl: {
      url: string, # Optional. File URL.
      fileId: string, # Optional. File unique identifier.
      filename: string, # Optional. Name of the file.
      fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
      expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
      validationStatus: string, # Optional. Validation status of the file
    }, # Optional. FileUrl Model.
    testScriptUrl: FileUrl, # Optional. FileUrl Model.
    userPropUrl: FileUrl, # Optional. FileUrl Model.
    inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
    additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
  }, # Optional. The input artifacts for the test.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
  keyvaultReferenceIdentityType: string, # Optional. Type of the managed identity referencing the Key vault.
  keyvaultReferenceIdentityId: string, # Optional. Resource Id of the managed identity referencing the Key vault.
}
</code>

Response Body:

Schema for <c>TestModel</c>:
<code>{
  testId: string, # Optional. Unique test name as identifier.
  description: string, # Optional. The test description.
  displayName: string, # Optional. Display name of a test.
  resourceId: string, # Optional. Fully qualified resource Id e.g /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test model.
  createdBy: string, # Optional. The user that created the test model.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last Modified DateTime(ISO 8601 literal format) of the test model.
  lastModifiedBy: string, # Optional. The user that last modified the test model.
  inputArtifacts: {
    configUrl: {
      url: string, # Optional. File URL.
      fileId: string, # Optional. File unique identifier.
      filename: string, # Optional. Name of the file.
      fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
      expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
      validationStatus: string, # Optional. Validation status of the file
    }, # Optional. FileUrl Model.
    testScriptUrl: FileUrl, # Optional. FileUrl Model.
    userPropUrl: FileUrl, # Optional. FileUrl Model.
    inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
    additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
  }, # Optional. The input artifacts for the test.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
  keyvaultReferenceIdentityType: string, # Optional. Type of the managed identity referencing the Key vault.
  keyvaultReferenceIdentityId: string, # Optional. Resource Id of the managed identity referencing the Key vault.
}
</code>

</remarks>
    </member>
    <member name="DeleteLoadTestAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteLoadTestAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.DeleteLoadTestAsync("<testId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteLoadTest(String,RequestContext)">
<example>
This sample shows how to call DeleteLoadTest with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.DeleteLoadTest("<testId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetLoadTestAsync(String,RequestContext)">
<example>
This sample shows how to call GetLoadTestAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetLoadTestAsync("<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
Console.WriteLine(result.GetProperty("keyvaultReferenceIdentityType").ToString());
Console.WriteLine(result.GetProperty("keyvaultReferenceIdentityId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestModel</c>:
<code>{
  testId: string, # Optional. Unique test name as identifier.
  description: string, # Optional. The test description.
  displayName: string, # Optional. Display name of a test.
  resourceId: string, # Optional. Fully qualified resource Id e.g /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test model.
  createdBy: string, # Optional. The user that created the test model.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last Modified DateTime(ISO 8601 literal format) of the test model.
  lastModifiedBy: string, # Optional. The user that last modified the test model.
  inputArtifacts: {
    configUrl: {
      url: string, # Optional. File URL.
      fileId: string, # Optional. File unique identifier.
      filename: string, # Optional. Name of the file.
      fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
      expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
      validationStatus: string, # Optional. Validation status of the file
    }, # Optional. FileUrl Model.
    testScriptUrl: FileUrl, # Optional. FileUrl Model.
    userPropUrl: FileUrl, # Optional. FileUrl Model.
    inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
    additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
  }, # Optional. The input artifacts for the test.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
  keyvaultReferenceIdentityType: string, # Optional. Type of the managed identity referencing the Key vault.
  keyvaultReferenceIdentityId: string, # Optional. Resource Id of the managed identity referencing the Key vault.
}
</code>

</remarks>
    </member>
    <member name="GetLoadTest(String,RequestContext)">
<example>
This sample shows how to call GetLoadTest with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetLoadTest("<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
Console.WriteLine(result.GetProperty("keyvaultReferenceIdentityType").ToString());
Console.WriteLine(result.GetProperty("keyvaultReferenceIdentityId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestModel</c>:
<code>{
  testId: string, # Optional. Unique test name as identifier.
  description: string, # Optional. The test description.
  displayName: string, # Optional. Display name of a test.
  resourceId: string, # Optional. Fully qualified resource Id e.g /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test model.
  createdBy: string, # Optional. The user that created the test model.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last Modified DateTime(ISO 8601 literal format) of the test model.
  lastModifiedBy: string, # Optional. The user that last modified the test model.
  inputArtifacts: {
    configUrl: {
      url: string, # Optional. File URL.
      fileId: string, # Optional. File unique identifier.
      filename: string, # Optional. Name of the file.
      fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
      expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
      validationStatus: string, # Optional. Validation status of the file
    }, # Optional. FileUrl Model.
    testScriptUrl: FileUrl, # Optional. FileUrl Model.
    userPropUrl: FileUrl, # Optional. FileUrl Model.
    inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
    additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
  }, # Optional. The input artifacts for the test.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
  keyvaultReferenceIdentityType: string, # Optional. Type of the managed identity referencing the Key vault.
  keyvaultReferenceIdentityId: string, # Optional. Resource Id of the managed identity referencing the Key vault.
}
</code>

</remarks>
    </member>
    <member name="GetLoadTestSearchesAsync(String,String,DateTimeOffset,DateTimeOffset,String,Int32,RequestContext)">
<example>
This sample shows how to call GetLoadTestSearchesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetLoadTestSearchesAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
This sample shows how to call GetLoadTestSearchesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetLoadTestSearchesAsync("<orderBy>", "<search>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<continuationToken>", 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("subnetId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("keyvaultReferenceIdentityType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("keyvaultReferenceIdentityId").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestModelResourceList</c>:
<code>{
  value: [
    {
      testId: string, # Optional. Unique test name as identifier.
      description: string, # Optional. The test description.
      displayName: string, # Optional. Display name of a test.
      resourceId: string, # Optional. Fully qualified resource Id e.g /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
      loadTestConfig: {
        engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
        splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
      }, # Optional. The load test configuration.
      passFailCriteria: {
        passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
      }, # Optional. Pass fail criteria for a test.
      createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test model.
      createdBy: string, # Optional. The user that created the test model.
      lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last Modified DateTime(ISO 8601 literal format) of the test model.
      lastModifiedBy: string, # Optional. The user that last modified the test model.
      inputArtifacts: {
        configUrl: {
          url: string, # Optional. File URL.
          fileId: string, # Optional. File unique identifier.
          filename: string, # Optional. Name of the file.
          fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
          expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
          validationStatus: string, # Optional. Validation status of the file
        }, # Optional. FileUrl Model.
        testScriptUrl: FileUrl, # Optional. FileUrl Model.
        userPropUrl: FileUrl, # Optional. FileUrl Model.
        inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
        additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
      }, # Optional. The input artifacts for the test.
      secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
      environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
      subnetId: string, # Optional. Subnet ID on which the load test instances should run.
      keyvaultReferenceIdentityType: string, # Optional. Type of the managed identity referencing the Key vault.
      keyvaultReferenceIdentityId: string, # Optional. Resource Id of the managed identity referencing the Key vault.
    }
  ], # Required. List of Resources
  nextLink: string, # Optional. Link for the next list of resources in case of paginated results, if applicable
}
</code>

</remarks>
    </member>
    <member name="GetLoadTestSearches(String,String,DateTimeOffset,DateTimeOffset,String,Int32,RequestContext)">
<example>
This sample shows how to call GetLoadTestSearches and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetLoadTestSearches();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
This sample shows how to call GetLoadTestSearches with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetLoadTestSearches("<orderBy>", "<search>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<continuationToken>", 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("subnetId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("keyvaultReferenceIdentityType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("keyvaultReferenceIdentityId").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestModelResourceList</c>:
<code>{
  value: [
    {
      testId: string, # Optional. Unique test name as identifier.
      description: string, # Optional. The test description.
      displayName: string, # Optional. Display name of a test.
      resourceId: string, # Optional. Fully qualified resource Id e.g /subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
      loadTestConfig: {
        engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
        splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
      }, # Optional. The load test configuration.
      passFailCriteria: {
        passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
      }, # Optional. Pass fail criteria for a test.
      createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test model.
      createdBy: string, # Optional. The user that created the test model.
      lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last Modified DateTime(ISO 8601 literal format) of the test model.
      lastModifiedBy: string, # Optional. The user that last modified the test model.
      inputArtifacts: {
        configUrl: {
          url: string, # Optional. File URL.
          fileId: string, # Optional. File unique identifier.
          filename: string, # Optional. Name of the file.
          fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
          expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
          validationStatus: string, # Optional. Validation status of the file
        }, # Optional. FileUrl Model.
        testScriptUrl: FileUrl, # Optional. FileUrl Model.
        userPropUrl: FileUrl, # Optional. FileUrl Model.
        inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
        additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
      }, # Optional. The input artifacts for the test.
      secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
      environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
      subnetId: string, # Optional. Subnet ID on which the load test instances should run.
      keyvaultReferenceIdentityType: string, # Optional. Type of the managed identity referencing the Key vault.
      keyvaultReferenceIdentityId: string, # Optional. Resource Id of the managed identity referencing the Key vault.
    }
  ], # Required. List of Resources
  nextLink: string, # Optional. Link for the next list of resources in case of paginated results, if applicable
}
</code>

</remarks>
    </member>
    <member name="UploadTestFileAsync(String,String,RequestContent,Int32,RequestContext)">
<example>
This sample shows how to call UploadTestFileAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = File.OpenRead("<filePath>");

Response response = await client.UploadTestFileAsync("<testId>", "<fileId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UploadTestFileAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = File.OpenRead("<filePath>");

Response response = await client.UploadTestFileAsync("<testId>", "<fileId>", RequestContent.Create(data), 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("validationStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileUrl</c>:
<code>{
  url: string, # Optional. File URL.
  fileId: string, # Optional. File unique identifier.
  filename: string, # Optional. Name of the file.
  fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
  expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
  validationStatus: string, # Optional. Validation status of the file
}
</code>

</remarks>
    </member>
    <member name="UploadTestFile(String,String,RequestContent,Int32,RequestContext)">
<example>
This sample shows how to call UploadTestFile with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = File.OpenRead("<filePath>");

Response response = client.UploadTestFile("<testId>", "<fileId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UploadTestFile with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

var data = File.OpenRead("<filePath>");

Response response = client.UploadTestFile("<testId>", "<fileId>", RequestContent.Create(data), 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("validationStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileUrl</c>:
<code>{
  url: string, # Optional. File URL.
  fileId: string, # Optional. File unique identifier.
  filename: string, # Optional. Name of the file.
  fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
  expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
  validationStatus: string, # Optional. Validation status of the file
}
</code>

</remarks>
    </member>
    <member name="GetTestFileAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetTestFileAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetTestFileAsync("<testId>", "<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("validationStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileUrl</c>:
<code>{
  url: string, # Optional. File URL.
  fileId: string, # Optional. File unique identifier.
  filename: string, # Optional. Name of the file.
  fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
  expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
  validationStatus: string, # Optional. Validation status of the file
}
</code>

</remarks>
    </member>
    <member name="GetTestFile(String,String,RequestContext)">
<example>
This sample shows how to call GetTestFile with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetTestFile("<testId>", "<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("validationStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileUrl</c>:
<code>{
  url: string, # Optional. File URL.
  fileId: string, # Optional. File unique identifier.
  filename: string, # Optional. Name of the file.
  fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
  expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
  validationStatus: string, # Optional. Validation status of the file
}
</code>

</remarks>
    </member>
    <member name="DeleteTestFileAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteTestFileAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.DeleteTestFileAsync("<testId>", "<fileId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteTestFile(String,String,RequestContext)">
<example>
This sample shows how to call DeleteTestFile with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.DeleteTestFile("<testId>", "<fileId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetAllTestFilesAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetAllTestFilesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetAllTestFilesAsync("<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
This sample shows how to call GetAllTestFilesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetAllTestFilesAsync("<testId>", "<continuationToken>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileUrlList</c>:
<code>{
  value: [
    {
      url: string, # Optional. File URL.
      fileId: string, # Optional. File unique identifier.
      filename: string, # Optional. Name of the file.
      fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
      expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
      validationStatus: string, # Optional. Validation status of the file
    }
  ], # Required. List of file URLs.
  nextLink: string, # Optional. Link for the next list of file URLs, if applicable
}
</code>

</remarks>
    </member>
    <member name="GetAllTestFiles(String,String,RequestContext)">
<example>
This sample shows how to call GetAllTestFiles with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetAllTestFiles("<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
This sample shows how to call GetAllTestFiles with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetAllTestFiles("<testId>", "<continuationToken>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileUrlList</c>:
<code>{
  value: [
    {
      url: string, # Optional. File URL.
      fileId: string, # Optional. File unique identifier.
      filename: string, # Optional. Name of the file.
      fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
      expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
      validationStatus: string, # Optional. Validation status of the file
    }
  ], # Required. List of file URLs.
  nextLink: string, # Optional. Link for the next list of file URLs, if applicable
}
</code>

</remarks>
    </member>
  </members>
</doc>