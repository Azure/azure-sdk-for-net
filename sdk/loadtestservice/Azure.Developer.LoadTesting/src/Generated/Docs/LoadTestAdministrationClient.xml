<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateOrUpdateTestAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateTestAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    description = "sample description",
    displayName = "Performance_LoadTest",
    loadTestConfiguration = new
    {
        engineInstances = 6,
        splitAllCSVs = true,
    },
    passFailCriteria = new
    {
        passFailMetrics = new Dictionary<string, object>
        {
            ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
            {
                clientMetric = "response_time_ms",
                aggregate = "percentage",
                condition = ">",
                value = 20,
                action = "continue",
            }
        },
        passFailServerMetrics = new Dictionary<string, object>
        {
            ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
            {
                resourceId = "/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/MyResourceGroup/providers/Microsoft.Compute/virtualMachines/MyVM",
                metricNamespace = "Microsoft.Compute/virtualMachines",
                metricName = "Percentage CPU",
                aggregation = "Average",
                condition = ">",
                value = 20,
                action = "continue",
            }
        },
    },
    autoStopCriteria = new
    {
        autoStopDisabled = true,
        errorRate = 70F,
        errorRateTimeWindowInSeconds = 60,
    },
    secrets = new
    {
        secret1 = new
        {
            value = "https://samplevault.vault.azure.net/secrets/samplesecret/f113f91fd4c44a368049849c164db827",
            type = "AKV_SECRET_URI",
        },
    },
    environmentVariables = new
    {
        envvar1 = "sampletext",
    },
    subnetId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Network/virtualNetworks/samplenetworkresource/subnets/AAAAA0A0A0",
    keyvaultReferenceIdentityType = "UserAssigned",
    keyvaultReferenceIdentityId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/sampleprovider/sampleresourcetype/sampleresourcename",
    metricsReferenceIdentityType = "UserAssigned",
    metricsReferenceIdentityId = "/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename",
    engineBuiltInIdentityType = "UserAssigned",
    engineBuiltInIdentityIds = new object[]
    {
        "/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename"
    },
});
Response response = await client.CreateOrUpdateTestAsync("12345678-1234-1234-1234-123456789012", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testId").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateTest(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateTest and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    description = "sample description",
    displayName = "Performance_LoadTest",
    loadTestConfiguration = new
    {
        engineInstances = 6,
        splitAllCSVs = true,
    },
    passFailCriteria = new
    {
        passFailMetrics = new Dictionary<string, object>
        {
            ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
            {
                clientMetric = "response_time_ms",
                aggregate = "percentage",
                condition = ">",
                value = 20,
                action = "continue",
            }
        },
        passFailServerMetrics = new Dictionary<string, object>
        {
            ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
            {
                resourceId = "/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/MyResourceGroup/providers/Microsoft.Compute/virtualMachines/MyVM",
                metricNamespace = "Microsoft.Compute/virtualMachines",
                metricName = "Percentage CPU",
                aggregation = "Average",
                condition = ">",
                value = 20,
                action = "continue",
            }
        },
    },
    autoStopCriteria = new
    {
        autoStopDisabled = true,
        errorRate = 70F,
        errorRateTimeWindowInSeconds = 60,
    },
    secrets = new
    {
        secret1 = new
        {
            value = "https://samplevault.vault.azure.net/secrets/samplesecret/f113f91fd4c44a368049849c164db827",
            type = "AKV_SECRET_URI",
        },
    },
    environmentVariables = new
    {
        envvar1 = "sampletext",
    },
    subnetId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Network/virtualNetworks/samplenetworkresource/subnets/AAAAA0A0A0",
    keyvaultReferenceIdentityType = "UserAssigned",
    keyvaultReferenceIdentityId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/sampleprovider/sampleresourcetype/sampleresourcename",
    metricsReferenceIdentityType = "UserAssigned",
    metricsReferenceIdentityId = "/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename",
    engineBuiltInIdentityType = "UserAssigned",
    engineBuiltInIdentityIds = new object[]
    {
        "/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename"
    },
});
Response response = client.CreateOrUpdateTest("12345678-1234-1234-1234-123456789012", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testId").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateAppComponentsAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAppComponentsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    components = new Dictionary<string, object>
    {
        ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource"] = new
        {
            resourceType = "microsoft.insights/components",
            resourceName = "appcomponentresource",
            displayName = "Performance_LoadTest_Insights",
            kind = "web",
        }
    },
});
Response response = await client.CreateOrUpdateAppComponentsAsync("ee843bd9-a6d4-4364-a45c-427a03c39fa7", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateAppComponents(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAppComponents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    components = new Dictionary<string, object>
    {
        ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource"] = new
        {
            resourceType = "microsoft.insights/components",
            resourceName = "appcomponentresource",
            displayName = "Performance_LoadTest_Insights",
            kind = "web",
        }
    },
});
Response response = client.CreateOrUpdateAppComponents("ee843bd9-a6d4-4364-a45c-427a03c39fa7", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateServerMetricsConfigAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateServerMetricsConfigAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    metrics = new Dictionary<string, object>
    {
        ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource/providers/microsoft.insights/metricdefinitions/requests/duration"] = new
        {
            resourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource",
            metricNamespace = "microsoft.insights/components",
            displayDescription = "sample description",
            name = "requests/duration",
            aggregation = "Average",
            resourceType = "microsoft.insights/components",
        }
    },
});
Response response = await client.CreateOrUpdateServerMetricsConfigAsync("edc6e529-d009-4b99-b763-ca492e3a2823", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("metricNamespace").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceType").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateServerMetricsConfig(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateServerMetricsConfig and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    metrics = new Dictionary<string, object>
    {
        ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource/providers/microsoft.insights/metricdefinitions/requests/duration"] = new
        {
            resourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource",
            metricNamespace = "microsoft.insights/components",
            displayDescription = "sample description",
            name = "requests/duration",
            aggregation = "Average",
            resourceType = "microsoft.insights/components",
        }
    },
});
Response response = client.CreateOrUpdateServerMetricsConfig("edc6e529-d009-4b99-b763-ca492e3a2823", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("metricNamespace").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceType").ToString());
]]></code></example>
    </member>
    <member name="GetAppComponentsAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetAppComponentsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response<TestAppComponents> response = await client.GetAppComponentsAsync("ee843bd9-a6d4-4364-a45c-427a03c39fa7");
]]></code></example>
    </member>
    <member name="GetAppComponents(string,CancellationToken)">
      <example>
This sample shows how to call GetAppComponents.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response<TestAppComponents> response = client.GetAppComponents("ee843bd9-a6d4-4364-a45c-427a03c39fa7");
]]></code></example>
    </member>
    <member name="GetAppComponentsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetAppComponentsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetAppComponentsAsync("ee843bd9-a6d4-4364-a45c-427a03c39fa7", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
]]></code></example>
    </member>
    <member name="GetAppComponents(string,RequestContext)">
      <example>
This sample shows how to call GetAppComponents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetAppComponents("ee843bd9-a6d4-4364-a45c-427a03c39fa7", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
]]></code></example>
    </member>
    <member name="GetServerMetricsConfigAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetServerMetricsConfigAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response<TestServerMetricsConfiguration> response = await client.GetServerMetricsConfigAsync("12345678-1234-1234-1234-123456789012");
]]></code></example>
    </member>
    <member name="GetServerMetricsConfig(string,CancellationToken)">
      <example>
This sample shows how to call GetServerMetricsConfig.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response<TestServerMetricsConfiguration> response = client.GetServerMetricsConfig("12345678-1234-1234-1234-123456789012");
]]></code></example>
    </member>
    <member name="GetServerMetricsConfigAsync(string,RequestContext)">
      <example>
This sample shows how to call GetServerMetricsConfigAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetServerMetricsConfigAsync("12345678-1234-1234-1234-123456789012", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("metricNamespace").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceType").ToString());
]]></code></example>
    </member>
    <member name="GetServerMetricsConfig(string,RequestContext)">
      <example>
This sample shows how to call GetServerMetricsConfig and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetServerMetricsConfig("12345678-1234-1234-1234-123456789012", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("metricNamespace").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("aggregation").ToString());
Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceType").ToString());
]]></code></example>
    </member>
    <member name="GetTestAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetTestAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response<LoadTest> response = await client.GetTestAsync("12345678-1234-1234-1234-123456789012");
]]></code></example>
    </member>
    <member name="GetTest(string,CancellationToken)">
      <example>
This sample shows how to call GetTest.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response<LoadTest> response = client.GetTest("12345678-1234-1234-1234-123456789012");
]]></code></example>
    </member>
    <member name="GetTestAsync(string,RequestContext)">
      <example>
This sample shows how to call GetTestAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetTestAsync("12345678-1234-1234-1234-123456789012", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testId").ToString());
]]></code></example>
    </member>
    <member name="GetTest(string,RequestContext)">
      <example>
This sample shows how to call GetTest and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetTest("12345678-1234-1234-1234-123456789012", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testId").ToString());
]]></code></example>
    </member>
    <member name="GetTestFileAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetTestFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response<TestFileInfo> response = await client.GetTestFileAsync("12345678-1234-1234-1234-123456789012", "sample.jmx");
]]></code></example>
    </member>
    <member name="GetTestFile(string,string,CancellationToken)">
      <example>
This sample shows how to call GetTestFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response<TestFileInfo> response = client.GetTestFile("12345678-1234-1234-1234-123456789012", "sample.jmx");
]]></code></example>
    </member>
    <member name="GetTestFileAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetTestFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetTestFileAsync("12345678-1234-1234-1234-123456789012", "sample.jmx", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fileName").ToString());
]]></code></example>
    </member>
    <member name="GetTestFile(string,string,RequestContext)">
      <example>
This sample shows how to call GetTestFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetTestFile("12345678-1234-1234-1234-123456789012", "sample.jmx", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fileName").ToString());
]]></code></example>
    </member>
    <member name="DeleteTestFileAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteTestFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.DeleteTestFileAsync("12345678-1234-1234-1234-123456789012", "app.jmx");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteTestFile(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteTestFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.DeleteTestFile("12345678-1234-1234-1234-123456789012", "app.jmx");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteTestAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteTestAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.DeleteTestAsync("12345678-1234-1234-1234-123456789012");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteTest(string,RequestContext)">
      <example>
This sample shows how to call DeleteTest.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.DeleteTest("12345678-1234-1234-1234-123456789012");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="CreateOrUpdateTestProfileAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateTestProfileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    description = "sample description",
    displayName = "Performance_TestProfile",
    testId = "12346-abcd-6789",
    targetResourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Web/sites/myfunctionapp",
    targetResourceConfigurations = new
    {
        kind = "FunctionsFlexConsumption",
        configurations = new
        {
            config1 = new
            {
                instanceMemoryMB = 2048L,
                httpConcurrency = 16L,
            },
            config2 = new
            {
                instanceMemoryMB = 4096L,
                httpConcurrency = 16L,
            },
        },
    },
});
Response response = await client.CreateOrUpdateTestProfileAsync("12345678-1234-1234-1234-123456789012", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testProfileId").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateTestProfile(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateTestProfile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    description = "sample description",
    displayName = "Performance_TestProfile",
    testId = "12346-abcd-6789",
    targetResourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Web/sites/myfunctionapp",
    targetResourceConfigurations = new
    {
        kind = "FunctionsFlexConsumption",
        configurations = new
        {
            config1 = new
            {
                instanceMemoryMB = 2048L,
                httpConcurrency = 16L,
            },
            config2 = new
            {
                instanceMemoryMB = 4096L,
                httpConcurrency = 16L,
            },
        },
    },
});
Response response = client.CreateOrUpdateTestProfile("12345678-1234-1234-1234-123456789012", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testProfileId").ToString());
]]></code></example>
    </member>
    <member name="DeleteTestProfileAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteTestProfileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.DeleteTestProfileAsync("12345678-1234-1234-1234-123456789012");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteTestProfile(string,RequestContext)">
      <example>
This sample shows how to call DeleteTestProfile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.DeleteTestProfile("12345678-1234-1234-1234-123456789012");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetTestProfileAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetTestProfileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response<TestProfile> response = await client.GetTestProfileAsync("12345678-1234-1234-1234-123456789012");
]]></code></example>
    </member>
    <member name="GetTestProfile(string,CancellationToken)">
      <example>
This sample shows how to call GetTestProfile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response<TestProfile> response = client.GetTestProfile("12345678-1234-1234-1234-123456789012");
]]></code></example>
    </member>
    <member name="GetTestProfileAsync(string,RequestContext)">
      <example>
This sample shows how to call GetTestProfileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = await client.GetTestProfileAsync("12345678-1234-1234-1234-123456789012", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testProfileId").ToString());
]]></code></example>
    </member>
    <member name="GetTestProfile(string,RequestContext)">
      <example>
This sample shows how to call GetTestProfile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

Response response = client.GetTestProfile("12345678-1234-1234-1234-123456789012", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testProfileId").ToString());
]]></code></example>
    </member>
    <member name="GetTestFilesAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetTestFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

await foreach (TestFileInfo item in client.GetTestFilesAsync("12345678-1234-1234-1234-123456789012"))
{
}
]]></code></example>
    </member>
    <member name="GetTestFiles(string,CancellationToken)">
      <example>
This sample shows how to call GetTestFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

foreach (TestFileInfo item in client.GetTestFiles("12345678-1234-1234-1234-123456789012"))
{
}
]]></code></example>
    </member>
    <member name="GetTestFilesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetTestFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

await foreach (BinaryData item in client.GetTestFilesAsync("12345678-1234-1234-1234-123456789012", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("fileName").ToString());
}
]]></code></example>
    </member>
    <member name="GetTestFiles(string,RequestContext)">
      <example>
This sample shows how to call GetTestFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

foreach (BinaryData item in client.GetTestFiles("12345678-1234-1234-1234-123456789012", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("fileName").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>