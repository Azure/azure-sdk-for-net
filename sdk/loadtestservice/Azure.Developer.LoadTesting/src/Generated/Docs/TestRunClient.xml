<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="DeleteTestRunAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteTestRunAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = await client.DeleteTestRunAsync("<testRunId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteTestRun(String,RequestContext)">
<example>
This sample shows how to call DeleteTestRun with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = client.DeleteTestRun("<testRunId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="CreateAndUpdateTestAsync(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call CreateAndUpdateTestAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

var data = new {};

Response response = await client.CreateAndUpdateTestAsync("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateAndUpdateTestAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

var data = new {
    displayName = "<displayName>",
    testId = "<testId>",
    description = "<description>",
    loadTestConfig = new {
        engineInstances = 1234,
        splitAllCSVs = true,
    },
    passFailCriteria = new {
        passFailMetrics = new {
            key = new {
                clientmetric = "<clientmetric>",
                aggregate = "<aggregate>",
                condition = "<condition>",
                requestName = "<requestName>",
                value = 123.45d,
                action = "<action>",
            },
        },
    },
    secrets = new {
        key = new {
            value = "<value>",
            type = "<type>",
        },
    },
    environmentVariables = new {
        key = "<String>",
    },
};

Response response = await client.CreateAndUpdateTestAsync("<testRunId>", RequestContent.Create(data), "<oldTestRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code>

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code>

</remarks>
    </member>
    <member name="CreateAndUpdateTest(String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call CreateAndUpdateTest with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

var data = new {};

Response response = client.CreateAndUpdateTest("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateAndUpdateTest with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

var data = new {
    displayName = "<displayName>",
    testId = "<testId>",
    description = "<description>",
    loadTestConfig = new {
        engineInstances = 1234,
        splitAllCSVs = true,
    },
    passFailCriteria = new {
        passFailMetrics = new {
            key = new {
                clientmetric = "<clientmetric>",
                aggregate = "<aggregate>",
                condition = "<condition>",
                requestName = "<requestName>",
                value = 123.45d,
                action = "<action>",
            },
        },
    },
    secrets = new {
        key = new {
            value = "<value>",
            type = "<type>",
        },
    },
    environmentVariables = new {
        key = "<String>",
    },
};

Response response = client.CreateAndUpdateTest("<testRunId>", RequestContent.Create(data), "<oldTestRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code>

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code>

</remarks>
    </member>
    <member name="GetTestRunAsync(String,RequestContext)">
<example>
This sample shows how to call GetTestRunAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = await client.GetTestRunAsync("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code>

</remarks>
    </member>
    <member name="GetTestRun(String,RequestContext)">
<example>
This sample shows how to call GetTestRun with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = client.GetTestRun("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code>

</remarks>
    </member>
    <member name="GetTestRunFileAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetTestRunFileAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = await client.GetTestRunFileAsync("<testRunId>", "<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("validationStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileUrl</c>:
<code>{
  url: string, # Optional. File URL.
  fileId: string, # Optional. File unique identifier.
  filename: string, # Optional. Name of the file.
  fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
  expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
  validationStatus: string, # Optional. Validation status of the file
}
</code>

</remarks>
    </member>
    <member name="GetTestRunFile(String,String,RequestContext)">
<example>
This sample shows how to call GetTestRunFile with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = client.GetTestRunFile("<testRunId>", "<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("validationStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileUrl</c>:
<code>{
  url: string, # Optional. File URL.
  fileId: string, # Optional. File unique identifier.
  filename: string, # Optional. Name of the file.
  fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
  expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
  validationStatus: string, # Optional. Validation status of the file
}
</code>

</remarks>
    </member>
    <member name="GetTestRunsSearchesAsync(String,String,String,DateTimeOffset,DateTimeOffset,String,Int32,String,RequestContext)">
<example>
This sample shows how to call GetTestRunsSearchesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = await client.GetTestRunsSearchesAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
This sample shows how to call GetTestRunsSearchesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = await client.GetTestRunsSearchesAsync("<orderBy>", "<continuationToken>", "<search>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<status>", 1234, "<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("subnetId").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModelResourceList</c>:
<code>{
  value: [
    {
      testRunId: string, # Optional. Unique test run name as identifier.
      displayName: string, # Optional. Display name of a test run.
      testId: string, # Optional. Associated test Id.
      resourceId: string, # Optional. Load test resource Id.
      description: string, # Optional. The test run description.
      status: string, # Optional. The test run status.
      startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
      endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
      loadTestConfig: {
        engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
        splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
      }, # Optional. The load test configuration.
      testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
      passFailCriteria: {
        passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
      }, # Optional. Pass fail criteria for a test.
      testArtifacts: {
        inputArtifacts: {
          configUrl: {
            url: string, # Optional. File URL.
            fileId: string, # Optional. File unique identifier.
            filename: string, # Optional. Name of the file.
            fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
            expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
            validationStatus: string, # Optional. Validation status of the file
          }, # Optional. FileUrl Model.
          testScriptUrl: FileUrl, # Optional. FileUrl Model.
          userPropUrl: FileUrl, # Optional. FileUrl Model.
          inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
          additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
        }, # Required. The input artifacts for the test.
        outputArtifacts: {
          resultUrl: FileUrl, # Optional. FileUrl Model.
          logsUrl: FileUrl, # Optional. FileUrl Model.
        }, # Optional. The output artifacts for the test run.
      }, # Optional.
      executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
      vusers: number, # Optional. Number of virtual users, for which test has been run.
      testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
      createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
      createdBy: string, # Optional. The user that created the test run.
      lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
      lastModifiedBy: string, # Optional. The user that updated the test run.
      portalUrl: string, # Optional. Portal url.
      secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
      environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
      duration: number, # Optional. Test run duration in milliseconds.
      subnetId: string, # Optional. Subnet ID on which the load test instances should run.
    }
  ], # Required. List of Resources
  nextLink: string, # Optional. Link for the next list of resources in case of paginated results, if applicable
}
</code>

</remarks>
    </member>
    <member name="GetTestRunsSearches(String,String,String,DateTimeOffset,DateTimeOffset,String,Int32,String,RequestContext)">
<example>
This sample shows how to call GetTestRunsSearches and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = client.GetTestRunsSearches();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
This sample shows how to call GetTestRunsSearches with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = client.GetTestRunsSearches("<orderBy>", "<continuationToken>", "<search>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<status>", 1234, "<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("subnetId").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModelResourceList</c>:
<code>{
  value: [
    {
      testRunId: string, # Optional. Unique test run name as identifier.
      displayName: string, # Optional. Display name of a test run.
      testId: string, # Optional. Associated test Id.
      resourceId: string, # Optional. Load test resource Id.
      description: string, # Optional. The test run description.
      status: string, # Optional. The test run status.
      startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
      endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
      loadTestConfig: {
        engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
        splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
      }, # Optional. The load test configuration.
      testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
      passFailCriteria: {
        passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
      }, # Optional. Pass fail criteria for a test.
      testArtifacts: {
        inputArtifacts: {
          configUrl: {
            url: string, # Optional. File URL.
            fileId: string, # Optional. File unique identifier.
            filename: string, # Optional. Name of the file.
            fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
            expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
            validationStatus: string, # Optional. Validation status of the file
          }, # Optional. FileUrl Model.
          testScriptUrl: FileUrl, # Optional. FileUrl Model.
          userPropUrl: FileUrl, # Optional. FileUrl Model.
          inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
          additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
        }, # Required. The input artifacts for the test.
        outputArtifacts: {
          resultUrl: FileUrl, # Optional. FileUrl Model.
          logsUrl: FileUrl, # Optional. FileUrl Model.
        }, # Optional. The output artifacts for the test run.
      }, # Optional.
      executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
      vusers: number, # Optional. Number of virtual users, for which test has been run.
      testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
      createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
      createdBy: string, # Optional. The user that created the test run.
      lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
      lastModifiedBy: string, # Optional. The user that updated the test run.
      portalUrl: string, # Optional. Portal url.
      secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
      environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
      duration: number, # Optional. Test run duration in milliseconds.
      subnetId: string, # Optional. Subnet ID on which the load test instances should run.
    }
  ], # Required. List of Resources
  nextLink: string, # Optional. Link for the next list of resources in case of paginated results, if applicable
}
</code>

</remarks>
    </member>
    <member name="StopTestRunAsync(String,RequestContext)">
<example>
This sample shows how to call StopTestRunAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = await client.StopTestRunAsync("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code>

</remarks>
    </member>
    <member name="StopTestRun(String,RequestContext)">
<example>
This sample shows how to call StopTestRun with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = client.StopTestRun("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: &quot;0&quot; | &quot;1&quot; | &quot;2&quot;, # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code>

</remarks>
    </member>
    <member name="GetTestRunClientMetricsAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call GetTestRunClientMetricsAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

var data = new {
    startTime = "2022-05-10T18:57:31.2311892Z",
    endTime = "2022-05-10T18:57:31.2311892Z",
};

Response response = await client.GetTestRunClientMetricsAsync("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetTestRunClientMetricsAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

var data = new {
    requestSamplers = new[] {
        "<String>"
    },
    errors = new[] {
        "<String>"
    },
    percentiles = new[] {
        "<String>"
    },
    groupByInterval = "<groupByInterval>",
    startTime = "2022-05-10T18:57:31.2311892Z",
    endTime = "2022-05-10T18:57:31.2311892Z",
};

Response response = await client.GetTestRunClientMetricsAsync("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("activeUsers").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("activeUsers").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("responseTime").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("responseTime").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("throughput").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("throughput").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("errors").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("errors").GetProperty("<test>")[0].GetProperty("value").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>ClientMetricsRequestModel</c>:
<code>{
  requestSamplers: [string], # Optional. List of request samplers, maximum supported samplers for queries are 20. In case of empty, it will return metrics for maximum 20 samplers
  errors: [string], # Optional. List of errors, maximum supported errors for queries are 20. In case of empty, by default will return metrics for maximum 20 errors
  percentiles: [string], # Optional. List of percentiles values for response time, supported values 50,90,99,95. Default value is 50th percentile.
  groupByInterval: string, # Optional. For test duration less than 10 minutes group by time interval can be any one of 5s,10s,1m,5m.\n\nFor test duration greater than 10 minutes, group by time interval can be any one of 1m,5m,1h. Default value is 1m.
  startTime: string (ISO 8601 Format), # Required. Start time
  endTime: string (ISO 8601 Format), # Required. End time
}
</code>

Response Body:

Schema for <c>ClientMetricsResults</c>:
<code>{
  testRunId: string, # Optional. Test run name for which client metrics results is required.
  timeSeries: {
    activeUsers: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Active users time series data.
    responseTime: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Response time, time series data.
    throughput: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Throughput time series data.
    errors: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Errors time series data.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetTestRunClientMetrics(String,RequestContent,RequestContext)">
<example>
This sample shows how to call GetTestRunClientMetrics with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

var data = new {
    startTime = "2022-05-10T18:57:31.2311892Z",
    endTime = "2022-05-10T18:57:31.2311892Z",
};

Response response = client.GetTestRunClientMetrics("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetTestRunClientMetrics with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

var data = new {
    requestSamplers = new[] {
        "<String>"
    },
    errors = new[] {
        "<String>"
    },
    percentiles = new[] {
        "<String>"
    },
    groupByInterval = "<groupByInterval>",
    startTime = "2022-05-10T18:57:31.2311892Z",
    endTime = "2022-05-10T18:57:31.2311892Z",
};

Response response = client.GetTestRunClientMetrics("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("activeUsers").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("activeUsers").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("responseTime").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("responseTime").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("throughput").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("throughput").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("errors").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("errors").GetProperty("<test>")[0].GetProperty("value").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>ClientMetricsRequestModel</c>:
<code>{
  requestSamplers: [string], # Optional. List of request samplers, maximum supported samplers for queries are 20. In case of empty, it will return metrics for maximum 20 samplers
  errors: [string], # Optional. List of errors, maximum supported errors for queries are 20. In case of empty, by default will return metrics for maximum 20 errors
  percentiles: [string], # Optional. List of percentiles values for response time, supported values 50,90,99,95. Default value is 50th percentile.
  groupByInterval: string, # Optional. For test duration less than 10 minutes group by time interval can be any one of 5s,10s,1m,5m.\n\nFor test duration greater than 10 minutes, group by time interval can be any one of 1m,5m,1h. Default value is 1m.
  startTime: string (ISO 8601 Format), # Required. Start time
  endTime: string (ISO 8601 Format), # Required. End time
}
</code>

Response Body:

Schema for <c>ClientMetricsResults</c>:
<code>{
  testRunId: string, # Optional. Test run name for which client metrics results is required.
  timeSeries: {
    activeUsers: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Active users time series data.
    responseTime: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Response time, time series data.
    throughput: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Throughput time series data.
    errors: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Errors time series data.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetTestRunClientMetricsFiltersAsync(String,RequestContext)">
<example>
This sample shows how to call GetTestRunClientMetricsFiltersAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = await client.GetTestRunClientMetricsFiltersAsync("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("filters").GetProperty("requestSamplerValues")[0].ToString());
Console.WriteLine(result.GetProperty("filters").GetProperty("errorFiltersValues")[0].ToString());
Console.WriteLine(result.GetProperty("timeRange").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("timeRange").GetProperty("endTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ClientMetricsFilters</c>:
<code>{
  testRunId: string, # Optional. Test run name for which client metrics filters is required.
  filters: {
    requestSamplerValues: [string], # Optional. List of request sampler for the test run, for which client metrics can be filtered.
    errorFiltersValues: [string], # Optional. List of errors occurred for the test run, for which client metrics can be filtered.
  }, # Optional.
  timeRange: {
    startTime: string (ISO 8601 Format), # Optional. start DateTime(ISO 8601 literal format) for the requested client metrics filter.
    endTime: string (ISO 8601 Format), # Optional. end DateTime(ISO 8601 literal format) for the requested client metrics filter.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetTestRunClientMetricsFilters(String,RequestContext)">
<example>
This sample shows how to call GetTestRunClientMetricsFilters with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TestRunClient(endpoint, credential);

Response response = client.GetTestRunClientMetricsFilters("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("filters").GetProperty("requestSamplerValues")[0].ToString());
Console.WriteLine(result.GetProperty("filters").GetProperty("errorFiltersValues")[0].ToString());
Console.WriteLine(result.GetProperty("timeRange").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("timeRange").GetProperty("endTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ClientMetricsFilters</c>:
<code>{
  testRunId: string, # Optional. Test run name for which client metrics filters is required.
  filters: {
    requestSamplerValues: [string], # Optional. List of request sampler for the test run, for which client metrics can be filtered.
    errorFiltersValues: [string], # Optional. List of errors occurred for the test run, for which client metrics can be filtered.
  }, # Optional.
  timeRange: {
    startTime: string (ISO 8601 Format), # Optional. start DateTime(ISO 8601 literal format) for the requested client metrics filter.
    endTime: string (ISO 8601 Format), # Optional. end DateTime(ISO 8601 literal format) for the requested client metrics filter.
  }, # Optional.
}
</code>

</remarks>
    </member>
  </members>
</doc>