// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Developer.LoadTesting
{
    // Data plane generated client. The AppComponent service client.
    /// <summary> The AppComponent service client. </summary>
    public partial class AppComponentClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://loadtest.azure-dev.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AppComponentClient for mocking. </summary>
        protected AppComponentClient()
        {
        }

        /// <summary> Initializes a new instance of AppComponentClient. </summary>
        /// <param name="endpoint"> URL to perform data plane API operations on the resource. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        internal AppComponentClient(string endpoint, TokenCredential credential) : this(endpoint, credential, new AzureLoadTestingClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AppComponentClient. </summary>
        /// <param name="endpoint"> URL to perform data plane API operations on the resource. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AppComponentClient(string endpoint, TokenCredential credential, AzureLoadTestingClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AzureLoadTestingClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Associate an App Component (Azure resource) to a test or test run. </summary>
        /// <param name="name"> Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     value = new {
        ///         key = new {
        ///             resourceId = "<resourceId>",
        ///             resourceName = "<resourceName>",
        ///             resourceType = "<resourceType>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<name>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     testId = "<testId>",
        ///     testRunId = "<testRunId>",
        ///     value = new {
        ///         key = new {
        ///             resourceId = "<resourceId>",
        ///             resourceName = "<resourceName>",
        ///             resourceType = "<resourceType>",
        ///             displayName = "<displayName>",
        ///             kind = "<kind>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<name>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("testId").ToString());
        /// Console.WriteLine(result.GetProperty("testRunId").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AppComponentsMap</c>:
        /// <code>{
        ///   resourceId: string, # Optional. Azure Load Testing resource Id
        ///   testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
        ///   testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
        ///   name: string, # Optional. AppComponent name
        ///   value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AppComponentsMap</c>:
        /// <code>{
        ///   resourceId: string, # Optional. Azure Load Testing resource Id
        ///   testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
        ///   testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
        ///   name: string, # Optional. AppComponent name
        ///   value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateAsync(string name, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AppComponentClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(name, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Associate an App Component (Azure resource) to a test or test run. </summary>
        /// <param name="name"> Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdate with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     value = new {
        ///         key = new {
        ///             resourceId = "<resourceId>",
        ///             resourceName = "<resourceName>",
        ///             resourceType = "<resourceType>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdate("<name>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     testId = "<testId>",
        ///     testRunId = "<testRunId>",
        ///     value = new {
        ///         key = new {
        ///             resourceId = "<resourceId>",
        ///             resourceName = "<resourceName>",
        ///             resourceType = "<resourceType>",
        ///             displayName = "<displayName>",
        ///             kind = "<kind>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdate("<name>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("testId").ToString());
        /// Console.WriteLine(result.GetProperty("testRunId").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AppComponentsMap</c>:
        /// <code>{
        ///   resourceId: string, # Optional. Azure Load Testing resource Id
        ///   testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
        ///   testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
        ///   name: string, # Optional. AppComponent name
        ///   value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AppComponentsMap</c>:
        /// <code>{
        ///   resourceId: string, # Optional. Azure Load Testing resource Id
        ///   testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
        ///   testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
        ///   name: string, # Optional. AppComponent name
        ///   value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdate(string name, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AppComponentClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(name, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an App Component. </summary>
        /// <param name="name"> Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = await client.DeleteAsync("<name>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteAsync(string name, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("AppComponentClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(name, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an App Component. </summary>
        /// <param name="name"> Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = client.Delete("<name>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Delete(string name, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("AppComponentClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(name, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get App Component details by App Component name. </summary>
        /// <param name="name"> Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetByNameAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = await client.GetByNameAsync("<name>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("testId").ToString());
        /// Console.WriteLine(result.GetProperty("testRunId").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AppComponentsMap</c>:
        /// <code>{
        ///   resourceId: string, # Optional. Azure Load Testing resource Id
        ///   testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
        ///   testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
        ///   name: string, # Optional. AppComponent name
        ///   value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetByNameAsync(string name, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("AppComponentClient.GetByName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByNameRequest(name, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get App Component details by App Component name. </summary>
        /// <param name="name"> Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetByName with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = client.GetByName("<name>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("testId").ToString());
        /// Console.WriteLine(result.GetProperty("testRunId").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AppComponentsMap</c>:
        /// <code>{
        ///   resourceId: string, # Optional. Azure Load Testing resource Id
        ///   testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
        ///   testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
        ///   name: string, # Optional. AppComponent name
        ///   value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetByName(string name, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = ClientDiagnostics.CreateScope("AppComponentClient.GetByName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByNameRequest(name, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get App Components for a test or a test run by its name. </summary>
        /// <param name="testRunId"> [Required, if testId is not provided] Test run Id. </param>
        /// <param name="testId"> Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAppComponentAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = await client.GetAppComponentAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
        /// ]]></code>
        /// This sample shows how to call GetAppComponentAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = await client.GetAppComponentAsync("<testRunId>", "<testId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("testId").ToString());
        /// Console.WriteLine(result.GetProperty("testRunId").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AppComponentsMap</c>:
        /// <code>{
        ///   resourceId: string, # Optional. Azure Load Testing resource Id
        ///   testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
        ///   testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
        ///   name: string, # Optional. AppComponent name
        ///   value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAppComponentAsync(string testRunId = null, string testId = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("AppComponentClient.GetAppComponent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAppComponentRequest(testRunId, testId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get App Components for a test or a test run by its name. </summary>
        /// <param name="testRunId"> [Required, if testId is not provided] Test run Id. </param>
        /// <param name="testId"> Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAppComponent and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = client.GetAppComponent();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
        /// ]]></code>
        /// This sample shows how to call GetAppComponent with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AppComponentClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = client.GetAppComponent("<testRunId>", "<testId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("testId").ToString());
        /// Console.WriteLine(result.GetProperty("testRunId").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceType").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("resourceGroup").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("subscriptionId").ToString());
        /// Console.WriteLine(result.GetProperty("value").GetProperty("<test>").GetProperty("kind").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AppComponentsMap</c>:
        /// <code>{
        ///   resourceId: string, # Optional. Azure Load Testing resource Id
        ///   testId: string, # Optional. [Required, if testRunId is not given] Load test unique identifier
        ///   testRunId: string, # Optional. [Required if testId is not given] Load test run unique identifier
        ///   name: string, # Optional. AppComponent name
        ///   value: Dictionary&lt;string, AppComponent&gt;, # Required. AppComponents Map { resource id (Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}) : resource object } 
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAppComponent(string testRunId = null, string testId = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("AppComponentClient.GetAppComponent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAppComponentRequest(testRunId, testId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string name, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/appcomponents/", false);
            uri.AppendPath(name, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string name, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/appcomponents/", false);
            uri.AppendPath(name, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetByNameRequest(string name, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/appcomponents/", false);
            uri.AppendPath(name, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAppComponentRequest(string testRunId, string testId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/appcomponents", false);
            if (testRunId != null)
            {
                uri.AppendQuery("testRunId", testRunId, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            if (testId != null)
            {
                uri.AppendQuery("testId", testId, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
