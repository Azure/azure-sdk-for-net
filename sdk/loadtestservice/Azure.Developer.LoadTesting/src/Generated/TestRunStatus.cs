// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Test run status. </summary>
    public readonly partial struct TestRunStatus : IEquatable<TestRunStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TestRunStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TestRunStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AcceptedValue = "ACCEPTED";
        private const string NotStartedValue = "NOTSTARTED";
        private const string ProvisioningValue = "PROVISIONING";
        private const string ProvisionedValue = "PROVISIONED";
        private const string ConfiguringValue = "CONFIGURING";
        private const string ConfiguredValue = "CONFIGURED";
        private const string ExecutingValue = "EXECUTING";
        private const string ExecutedValue = "EXECUTED";
        private const string DeprovisioningValue = "DEPROVISIONING";
        private const string DeprovisionedValue = "DEPROVISIONED";
        private const string DoneValue = "DONE";
        private const string CancellingValue = "CANCELLING";
        private const string CancelledValue = "CANCELLED";
        private const string FailedValue = "FAILED";
        private const string ValidationSuccessValue = "VALIDATION_SUCCESS";
        private const string ValidationFailureValue = "VALIDATION_FAILURE";

        /// <summary> Test run request is accepted. </summary>
        public static TestRunStatus Accepted { get; } = new TestRunStatus(AcceptedValue);
        /// <summary> Test run is not yet started. </summary>
        public static TestRunStatus NotStarted { get; } = new TestRunStatus(NotStartedValue);
        /// <summary> Test run is provisioning. </summary>
        public static TestRunStatus Provisioning { get; } = new TestRunStatus(ProvisioningValue);
        /// <summary> Test run is provisioned. </summary>
        public static TestRunStatus Provisioned { get; } = new TestRunStatus(ProvisionedValue);
        /// <summary> Test run is getting configured. </summary>
        public static TestRunStatus Configuring { get; } = new TestRunStatus(ConfiguringValue);
        /// <summary> Test run configuration is done. </summary>
        public static TestRunStatus Configured { get; } = new TestRunStatus(ConfiguredValue);
        /// <summary> Test run has started executing. </summary>
        public static TestRunStatus Executing { get; } = new TestRunStatus(ExecutingValue);
        /// <summary> Test run execution is completed. </summary>
        public static TestRunStatus Executed { get; } = new TestRunStatus(ExecutedValue);
        /// <summary> Test run is getting deprovisioned. </summary>
        public static TestRunStatus Deprovisioning { get; } = new TestRunStatus(DeprovisioningValue);
        /// <summary> Test run is deprovisioned. </summary>
        public static TestRunStatus Deprovisioned { get; } = new TestRunStatus(DeprovisionedValue);
        /// <summary> Test run is completed. </summary>
        public static TestRunStatus Done { get; } = new TestRunStatus(DoneValue);
        /// <summary> Test run is being cancelled. </summary>
        public static TestRunStatus Cancelling { get; } = new TestRunStatus(CancellingValue);
        /// <summary> Test run request is cancelled. </summary>
        public static TestRunStatus Cancelled { get; } = new TestRunStatus(CancelledValue);
        /// <summary> Test run request is failed. </summary>
        public static TestRunStatus Failed { get; } = new TestRunStatus(FailedValue);
        /// <summary> Test run JMX file is validated. </summary>
        public static TestRunStatus ValidationSuccess { get; } = new TestRunStatus(ValidationSuccessValue);
        /// <summary> Test run JMX file validation is failed. </summary>
        public static TestRunStatus ValidationFailure { get; } = new TestRunStatus(ValidationFailureValue);
        /// <summary> Determines if two <see cref="TestRunStatus"/> values are the same. </summary>
        public static bool operator ==(TestRunStatus left, TestRunStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TestRunStatus"/> values are not the same. </summary>
        public static bool operator !=(TestRunStatus left, TestRunStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TestRunStatus"/>. </summary>
        public static implicit operator TestRunStatus(string value) => new TestRunStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TestRunStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TestRunStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
