// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Developer.LoadTesting
{
    public partial class TestRunStatistics : IUtf8JsonSerializable, IJsonModel<TestRunStatistics>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TestRunStatistics>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TestRunStatistics>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRunStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TestRunStatistics)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(Transaction))
            {
                writer.WritePropertyName("transaction"u8);
                writer.WriteStringValue(Transaction);
            }
            if (options.Format != "W" && Optional.IsDefined(SampleCount))
            {
                writer.WritePropertyName("sampleCount"u8);
                writer.WriteNumberValue(SampleCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ErrorCount))
            {
                writer.WritePropertyName("errorCount"u8);
                writer.WriteNumberValue(ErrorCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ErrorPercentage))
            {
                writer.WritePropertyName("errorPct"u8);
                writer.WriteNumberValue(ErrorPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MeanResponseTime))
            {
                writer.WritePropertyName("meanResTime"u8);
                writer.WriteNumberValue(MeanResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MedianResponseTime))
            {
                writer.WritePropertyName("medianResTime"u8);
                writer.WriteNumberValue(MedianResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MaxResponseTime))
            {
                writer.WritePropertyName("maxResTime"u8);
                writer.WriteNumberValue(MaxResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MinResponseTime))
            {
                writer.WritePropertyName("minResTime"u8);
                writer.WriteNumberValue(MinResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Percentile90ResponseTime))
            {
                writer.WritePropertyName("pct1ResTime"u8);
                writer.WriteNumberValue(Percentile90ResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Percentile95ResponseTime))
            {
                writer.WritePropertyName("pct2ResTime"u8);
                writer.WriteNumberValue(Percentile95ResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Percentile99ResponseTime))
            {
                writer.WritePropertyName("pct3ResTime"u8);
                writer.WriteNumberValue(Percentile99ResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Percentile75ResponseTime))
            {
                writer.WritePropertyName("pct75ResTime"u8);
                writer.WriteNumberValue(Percentile75ResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Percentile96ResponseTime))
            {
                writer.WritePropertyName("pct96ResTime"u8);
                writer.WriteNumberValue(Percentile96ResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Percentile97ResponseTime))
            {
                writer.WritePropertyName("pct97ResTime"u8);
                writer.WriteNumberValue(Percentile97ResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Percentile98ResponseTime))
            {
                writer.WritePropertyName("pct98ResTime"u8);
                writer.WriteNumberValue(Percentile98ResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Percentile999ResponseTime))
            {
                writer.WritePropertyName("pct999ResTime"u8);
                writer.WriteNumberValue(Percentile999ResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Percentile9999ResponseTime))
            {
                writer.WritePropertyName("pct9999ResTime"u8);
                writer.WriteNumberValue(Percentile9999ResponseTime.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Throughput))
            {
                writer.WritePropertyName("throughput"u8);
                writer.WriteNumberValue(Throughput.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ReceivedKBytesPerSec))
            {
                writer.WritePropertyName("receivedKBytesPerSec"u8);
                writer.WriteNumberValue(ReceivedKBytesPerSec.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SentKBytesPerSec))
            {
                writer.WritePropertyName("sentKBytesPerSec"u8);
                writer.WriteNumberValue(SentKBytesPerSec.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        TestRunStatistics IJsonModel<TestRunStatistics>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRunStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TestRunStatistics)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTestRunStatistics(document.RootElement, options);
        }

        internal static TestRunStatistics DeserializeTestRunStatistics(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string transaction = default;
            double? sampleCount = default;
            double? errorCount = default;
            double? errorPct = default;
            double? meanResTime = default;
            double? medianResTime = default;
            double? maxResTime = default;
            double? minResTime = default;
            double? pct1ResTime = default;
            double? pct2ResTime = default;
            double? pct3ResTime = default;
            double? pct75ResTime = default;
            double? pct96ResTime = default;
            double? pct97ResTime = default;
            double? pct98ResTime = default;
            double? pct999ResTime = default;
            double? pct9999ResTime = default;
            double? throughput = default;
            double? receivedKBytesPerSec = default;
            double? sentKBytesPerSec = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("transaction"u8))
                {
                    transaction = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sampleCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sampleCount = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("errorCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorCount = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("errorPct"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errorPct = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("meanResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    meanResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("medianResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    medianResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("maxResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("minResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct1ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct1ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct2ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct2ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct3ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct3ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct75ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct75ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct96ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct96ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct97ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct97ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct98ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct98ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct999ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct999ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("pct9999ResTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pct9999ResTime = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("throughput"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    throughput = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("receivedKBytesPerSec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    receivedKBytesPerSec = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("sentKBytesPerSec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sentKBytesPerSec = property.Value.GetDouble();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TestRunStatistics(
                transaction,
                sampleCount,
                errorCount,
                errorPct,
                meanResTime,
                medianResTime,
                maxResTime,
                minResTime,
                pct1ResTime,
                pct2ResTime,
                pct3ResTime,
                pct75ResTime,
                pct96ResTime,
                pct97ResTime,
                pct98ResTime,
                pct999ResTime,
                pct9999ResTime,
                throughput,
                receivedKBytesPerSec,
                sentKBytesPerSec,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TestRunStatistics>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRunStatistics>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(TestRunStatistics)} does not support writing '{options.Format}' format.");
            }
        }

        TestRunStatistics IPersistableModel<TestRunStatistics>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRunStatistics>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeTestRunStatistics(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TestRunStatistics)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TestRunStatistics>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TestRunStatistics FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeTestRunStatistics(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
