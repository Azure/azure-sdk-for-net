// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Test run file info. </summary>
    public partial class TestRunFileInfo
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TestRunFileInfo"/>. </summary>
        /// <param name="fileName"> Name of the file. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fileName"/> is null. </exception>
        internal TestRunFileInfo(string fileName)
        {
            Argument.AssertNotNull(fileName, nameof(fileName));

            FileName = fileName;
        }

        /// <summary> Initializes a new instance of <see cref="TestRunFileInfo"/>. </summary>
        /// <param name="fileName"> Name of the file. </param>
        /// <param name="uri"> File URL. </param>
        /// <param name="fileType"> File type. </param>
        /// <param name="expiresOn"> Expiry time of the file (RFC 3339 literal format). </param>
        /// <param name="validationStatus"> Validation status of the file. </param>
        /// <param name="validationFailureDetails"> Validation failure error details. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TestRunFileInfo(string fileName, Uri uri, LoadTestingFileType? fileType, DateTimeOffset? expiresOn, FileValidationStatus? validationStatus, string validationFailureDetails, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FileName = fileName;
            Uri = uri;
            FileType = fileType;
            ExpiresOn = expiresOn;
            ValidationStatus = validationStatus;
            ValidationFailureDetails = validationFailureDetails;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TestRunFileInfo"/> for deserialization. </summary>
        internal TestRunFileInfo()
        {
        }

        /// <summary> Name of the file. </summary>
        public string FileName { get; }
        /// <summary> File URL. </summary>
        public Uri Uri { get; }
        /// <summary> File type. </summary>
        public LoadTestingFileType? FileType { get; }
        /// <summary> Expiry time of the file (RFC 3339 literal format). </summary>
        public DateTimeOffset? ExpiresOn { get; }
        /// <summary> Validation status of the file. </summary>
        public FileValidationStatus? ValidationStatus { get; }
        /// <summary> Validation failure error details. </summary>
        public string ValidationFailureDetails { get; }
    }
}
