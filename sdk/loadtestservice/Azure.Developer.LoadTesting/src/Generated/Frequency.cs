// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Frequency of recurrence for a trigger. </summary>
    internal readonly partial struct Frequency : IEquatable<Frequency>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Frequency"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Frequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CronValue = "Cron";
        private const string HourlyValue = "Hourly";
        private const string DailyValue = "Daily";
        private const string WeeklyValue = "Weekly";
        private const string MonthlyByDaysValue = "MonthlyByDays";
        private const string MonthlyByDatesValue = "MonthlyByDates";

        /// <summary> Recurrence defined by a cron expression. </summary>
        public static Frequency Cron { get; } = new Frequency(CronValue);
        /// <summary> Recurrence defined on an hourly basis, as specified by HourlyRecurrence. </summary>
        public static Frequency Hourly { get; } = new Frequency(HourlyValue);
        /// <summary> Recurrence defined on a daily basis, as specified by DailyRecurrence. </summary>
        public static Frequency Daily { get; } = new Frequency(DailyValue);
        /// <summary> Recurrence defined on a weekly basis, as specified by WeeklyRecurrence. </summary>
        public static Frequency Weekly { get; } = new Frequency(WeeklyValue);
        /// <summary> Recurrence defined monthly on specific days, as specified by MonthlyRecurrenceByWeekDays. </summary>
        public static Frequency MonthlyByDays { get; } = new Frequency(MonthlyByDaysValue);
        /// <summary> Recurrence defined monthly on specific dates, as specified by MonthlyRecurrenceByDates. </summary>
        public static Frequency MonthlyByDates { get; } = new Frequency(MonthlyByDatesValue);
        /// <summary> Determines if two <see cref="Frequency"/> values are the same. </summary>
        public static bool operator ==(Frequency left, Frequency right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Frequency"/> values are not the same. </summary>
        public static bool operator !=(Frequency left, Frequency right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Frequency"/>. </summary>
        public static implicit operator Frequency(string value) => new Frequency(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Frequency other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Frequency other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
