// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.LoadTesting
{
    /// <summary>
    /// Trigger model.
    /// Please note <see cref="LoadTestingTrigger"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="ScheduleTestsTrigger"/>.
    /// </summary>
    public abstract partial class LoadTestingTrigger
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LoadTestingTrigger"/>. </summary>
        /// <param name="displayName"> The name of the trigger. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="displayName"/> is null. </exception>
        protected LoadTestingTrigger(string displayName)
        {
            Argument.AssertNotNull(displayName, nameof(displayName));

            DisplayName = displayName;
        }

        /// <summary> Initializes a new instance of <see cref="LoadTestingTrigger"/>. </summary>
        /// <param name="triggerId"> The unique identifier of the trigger. </param>
        /// <param name="displayName"> The name of the trigger. </param>
        /// <param name="description"> The description of the trigger. </param>
        /// <param name="kind"> The type of the trigger. </param>
        /// <param name="state"> The current state of the trigger. </param>
        /// <param name="stateDetails"> Details of current state of the trigger. </param>
        /// <param name="createdDateTime"> The creation datetime(RFC 3339 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(RFC 3339 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LoadTestingTrigger(string triggerId, string displayName, string description, TriggerType kind, TriggerState? state, StateDetails stateDetails, DateTimeOffset? createdDateTime, string createdBy, DateTimeOffset? lastModifiedDateTime, string lastModifiedBy, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TriggerId = triggerId;
            DisplayName = displayName;
            Description = description;
            Kind = kind;
            State = state;
            StateDetails = stateDetails;
            CreatedDateTime = createdDateTime;
            CreatedBy = createdBy;
            LastModifiedDateTime = lastModifiedDateTime;
            LastModifiedBy = lastModifiedBy;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LoadTestingTrigger"/> for deserialization. </summary>
        internal LoadTestingTrigger()
        {
        }

        /// <summary> The unique identifier of the trigger. </summary>
        public string TriggerId { get; }
        /// <summary> The name of the trigger. </summary>
        public string DisplayName { get; set; }
        /// <summary> The description of the trigger. </summary>
        public string Description { get; set; }
        /// <summary> The type of the trigger. </summary>
        internal TriggerType Kind { get; set; }
        /// <summary> The current state of the trigger. </summary>
        public TriggerState? State { get; set; }
        /// <summary> Details of current state of the trigger. </summary>
        public StateDetails StateDetails { get; }
        /// <summary> The creation datetime(RFC 3339 literal format). </summary>
        public DateTimeOffset? CreatedDateTime { get; }
        /// <summary> The user that created. </summary>
        public string CreatedBy { get; }
        /// <summary> The last Modified datetime(RFC 3339 literal format). </summary>
        public DateTimeOffset? LastModifiedDateTime { get; }
        /// <summary> The user that last modified. </summary>
        public string LastModifiedBy { get; }
    }
}
