// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.LoadTesting
{
    /// <summary> The input artifacts for the test run. </summary>
    public partial class TestRunInputArtifacts
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TestRunInputArtifacts"/>. </summary>
        internal TestRunInputArtifacts()
        {
            AdditionalFileInfo = new ChangeTrackingList<TestRunFileInfo>();
        }

        /// <summary> Initializes a new instance of <see cref="TestRunInputArtifacts"/>. </summary>
        /// <param name="configFileInfo"> The load test YAML file that contains the the test configuration. </param>
        /// <param name="testScriptFileInfo"> The test script file for the test run. </param>
        /// <param name="userPropertyFileInfo"> The user properties file. </param>
        /// <param name="inputArtifactsZipFileInfo"> The zip file for all input artifacts. </param>
        /// <param name="urlTestConfigFileInfo"> The config json file for url based test. </param>
        /// <param name="additionalFileInfo"> Additional supported files for the test run. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TestRunInputArtifacts(TestRunFileInfo configFileInfo, TestRunFileInfo testScriptFileInfo, TestRunFileInfo userPropertyFileInfo, TestRunFileInfo inputArtifactsZipFileInfo, TestRunFileInfo urlTestConfigFileInfo, IReadOnlyList<TestRunFileInfo> additionalFileInfo, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ConfigFileInfo = configFileInfo;
            TestScriptFileInfo = testScriptFileInfo;
            UserPropertyFileInfo = userPropertyFileInfo;
            InputArtifactsZipFileInfo = inputArtifactsZipFileInfo;
            UrlTestConfigFileInfo = urlTestConfigFileInfo;
            AdditionalFileInfo = additionalFileInfo;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The load test YAML file that contains the the test configuration. </summary>
        public TestRunFileInfo ConfigFileInfo { get; }
        /// <summary> The test script file for the test run. </summary>
        public TestRunFileInfo TestScriptFileInfo { get; }
        /// <summary> The user properties file. </summary>
        public TestRunFileInfo UserPropertyFileInfo { get; }
        /// <summary> The zip file for all input artifacts. </summary>
        public TestRunFileInfo InputArtifactsZipFileInfo { get; }
        /// <summary> The config json file for url based test. </summary>
        public TestRunFileInfo UrlTestConfigFileInfo { get; }
        /// <summary> Additional supported files for the test run. </summary>
        public IReadOnlyList<TestRunFileInfo> AdditionalFileInfo { get; }
    }
}
