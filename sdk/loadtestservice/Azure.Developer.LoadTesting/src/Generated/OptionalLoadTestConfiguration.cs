// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Configuration for quick load test. </summary>
    public partial class OptionalLoadTestConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="OptionalLoadTestConfiguration"/>. </summary>
        public OptionalLoadTestConfiguration()
        {
        }

        /// <summary> Initializes a new instance of <see cref="OptionalLoadTestConfiguration"/>. </summary>
        /// <param name="endpointUri"> Test URL. Provide the complete HTTP URL. For example, https://contoso-app.azurewebsites.net/login. </param>
        /// <param name="requestsPerSecond"> Target throughput (requests per second). This may not be necessarily achieved. The actual throughput will be lower if the application is not capable of handling it. </param>
        /// <param name="maxResponseTimeInMs"> Maximum response time in milliseconds of the API/endpoint. </param>
        /// <param name="virtualUsers"> No of concurrent virtual users. </param>
        /// <param name="rampUpTime"> Ramp up time in seconds. </param>
        /// <param name="duration"> Test run duration in seconds. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OptionalLoadTestConfiguration(Uri endpointUri, int? requestsPerSecond, int? maxResponseTimeInMs, int? virtualUsers, int? rampUpTime, TimeSpan? duration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EndpointUri = endpointUri;
            RequestsPerSecond = requestsPerSecond;
            MaxResponseTimeInMs = maxResponseTimeInMs;
            VirtualUsers = virtualUsers;
            RampUpTime = rampUpTime;
            Duration = duration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Test URL. Provide the complete HTTP URL. For example, https://contoso-app.azurewebsites.net/login. </summary>
        public Uri EndpointUri { get; set; }
        /// <summary> Target throughput (requests per second). This may not be necessarily achieved. The actual throughput will be lower if the application is not capable of handling it. </summary>
        public int? RequestsPerSecond { get; set; }
        /// <summary> Maximum response time in milliseconds of the API/endpoint. </summary>
        public int? MaxResponseTimeInMs { get; set; }
        /// <summary> No of concurrent virtual users. </summary>
        public int? VirtualUsers { get; set; }
        /// <summary> Ramp up time in seconds. </summary>
        public int? RampUpTime { get; set; }
        /// <summary> Test run duration in seconds. </summary>
        public TimeSpan? Duration { get; set; }
    }
}
