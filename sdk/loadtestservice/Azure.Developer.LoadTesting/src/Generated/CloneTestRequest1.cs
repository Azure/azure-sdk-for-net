// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.LoadTesting
{
    /// <summary> The CloneTestRequest1. </summary>
    internal partial class CloneTestRequest1
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CloneTestRequest1"/>. </summary>
        /// <param name="newTestId"> Unique identifier for the new test that will be created. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="newTestId"/> is null. </exception>
        internal CloneTestRequest1(string newTestId)
        {
            Argument.AssertNotNull(newTestId, nameof(newTestId));

            NewTestId = newTestId;
        }

        /// <summary> Initializes a new instance of <see cref="CloneTestRequest1"/>. </summary>
        /// <param name="newTestId"> Unique identifier for the new test that will be created. </param>
        /// <param name="displayName"> Display Name override for the newly created test. </param>
        /// <param name="description"> Description override for the newly created test. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CloneTestRequest1(string newTestId, string displayName, string description, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            NewTestId = newTestId;
            DisplayName = displayName;
            Description = description;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CloneTestRequest1"/> for deserialization. </summary>
        internal CloneTestRequest1()
        {
        }

        /// <summary> Unique identifier for the new test that will be created. </summary>
        public string NewTestId { get; }
        /// <summary> Display Name override for the newly created test. </summary>
        public string DisplayName { get; }
        /// <summary> Description override for the newly created test. </summary>
        public string Description { get; }
    }
}
