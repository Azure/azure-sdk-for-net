// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Request data collection level for test run. </summary>
    public readonly partial struct RequestDataLevel : IEquatable<RequestDataLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RequestDataLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RequestDataLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NONEValue = "NONE";
        private const string ERRORSValue = "ERRORS";

        /// <summary> No request data will be collected. </summary>
        public static RequestDataLevel NONE { get; } = new RequestDataLevel(NONEValue);
        /// <summary> Request data will be collected in case of failed requests. </summary>
        public static RequestDataLevel ERRORS { get; } = new RequestDataLevel(ERRORSValue);
        /// <summary> Determines if two <see cref="RequestDataLevel"/> values are the same. </summary>
        public static bool operator ==(RequestDataLevel left, RequestDataLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RequestDataLevel"/> values are not the same. </summary>
        public static bool operator !=(RequestDataLevel left, RequestDataLevel right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RequestDataLevel"/>. </summary>
        public static implicit operator RequestDataLevel(string value) => new RequestDataLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RequestDataLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RequestDataLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
