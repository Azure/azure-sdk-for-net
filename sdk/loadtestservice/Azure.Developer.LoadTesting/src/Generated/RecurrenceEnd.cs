// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Recurrence end model. Either provide numberOfOccurrences if you want recurrence to end after a specified number of occurrences or provide endDate if you want recurrence to end after a specified end date. If both values are provided, a validation error will be thrown indicating that only one field should be provided. If neither value is provided, the recurrence will end when manually ended. </summary>
    public partial class RecurrenceEnd
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RecurrenceEnd"/>. </summary>
        public RecurrenceEnd()
        {
        }

        /// <summary> Initializes a new instance of <see cref="RecurrenceEnd"/>. </summary>
        /// <param name="numberOfOccurrences"> Number of occurrences after which the recurrence will end. </param>
        /// <param name="endDateTime"> The date after which the recurrence will end. (RFC 3339 literal format). </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RecurrenceEnd(int? numberOfOccurrences, DateTimeOffset? endDateTime, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            NumberOfOccurrences = numberOfOccurrences;
            EndDateTime = endDateTime;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Number of occurrences after which the recurrence will end. </summary>
        public int? NumberOfOccurrences { get; set; }
        /// <summary> The date after which the recurrence will end. (RFC 3339 literal format). </summary>
        public DateTimeOffset? EndDateTime { get; set; }
    }
}
