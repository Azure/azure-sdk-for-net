// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.LoadTesting
{
    /// <summary> Load test model. </summary>
    public partial class LoadTest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LoadTest"/>. </summary>
        public LoadTest()
        {
            Secrets = new ChangeTrackingDictionary<string, TestSecret>();
            EnvironmentVariables = new ChangeTrackingDictionary<string, string>();
            EngineBuiltInIdentityIds = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="LoadTest"/>. </summary>
        /// <param name="passFailCriteria"> Pass fail criteria for a test. </param>
        /// <param name="autoStopCriteria"> Auto stop criteria for a test. This will automatically stop a load test if the error percentage is high for a certain time window. </param>
        /// <param name="secrets">
        /// Secrets can be stored in an Azure Key Vault or any other secret store. If the
        /// secret is stored in an Azure Key Vault, the value should be the secret
        /// identifier and the type should be AKV_SECRET_URI. If the secret is stored
        /// elsewhere, the secret value should be provided directly and the type should be
        /// SECRET_VALUE.
        /// </param>
        /// <param name="certificate"> Certificates metadata. </param>
        /// <param name="environmentVariables"> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </param>
        /// <param name="loadTestConfiguration"> The load test configuration. </param>
        /// <param name="baselineTestRunId"> Id of the test run to be marked as baseline to view trends of client-side metrics from recent test runs. </param>
        /// <param name="inputArtifacts"> The input artifacts for the test. </param>
        /// <param name="testId"> Unique test identifier for the load test, must contain only lower-case alphabetic, numeric, underscore or hyphen characters. </param>
        /// <param name="description"> The test description. </param>
        /// <param name="displayName"> Display name of a test. </param>
        /// <param name="subnetId"> Subnet ID on which the load test instances should run. </param>
        /// <param name="kind"> Kind of test. </param>
        /// <param name="publicIpDisabled"> Inject load test engines without deploying public IP for outbound access. </param>
        /// <param name="keyvaultReferenceIdentityType"> Type of the managed identity referencing the Key vault. </param>
        /// <param name="keyvaultReferenceIdentityId"> Resource Id of the managed identity referencing the Key vault. </param>
        /// <param name="metricsReferenceIdentityType"> Type of the managed identity referencing the metrics. </param>
        /// <param name="metricsReferenceIdentityId"> Resource Id of the managed identity referencing the metrics. </param>
        /// <param name="engineBuiltInIdentityType"> Type of the managed identity built in load test engines. </param>
        /// <param name="engineBuiltInIdentityIds"> Resource Ids of the managed identity built in to load test engines. Required if engineBuiltInIdentityType is UserAssigned. </param>
        /// <param name="createdDateTime"> The creation datetime(RFC 3339 literal format). </param>
        /// <param name="createdBy"> The user that created. </param>
        /// <param name="lastModifiedDateTime"> The last Modified datetime(RFC 3339 literal format). </param>
        /// <param name="lastModifiedBy"> The user that last modified. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LoadTest(PassFailCriteria passFailCriteria, AutoStopCriteria autoStopCriteria, IDictionary<string, TestSecret> secrets, TestCertificate certificate, IDictionary<string, string> environmentVariables, LoadTestConfiguration loadTestConfiguration, string baselineTestRunId, TestInputArtifacts inputArtifacts, string testId, string description, string displayName, string subnetId, LoadTestKind? kind, bool? publicIpDisabled, string keyvaultReferenceIdentityType, string keyvaultReferenceIdentityId, LoadTestingManagedIdentityType? metricsReferenceIdentityType, string metricsReferenceIdentityId, LoadTestingManagedIdentityType? engineBuiltInIdentityType, IList<string> engineBuiltInIdentityIds, DateTimeOffset? createdDateTime, string createdBy, DateTimeOffset? lastModifiedDateTime, string lastModifiedBy, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PassFailCriteria = passFailCriteria;
            AutoStopCriteria = autoStopCriteria;
            Secrets = secrets;
            Certificate = certificate;
            EnvironmentVariables = environmentVariables;
            LoadTestConfiguration = loadTestConfiguration;
            BaselineTestRunId = baselineTestRunId;
            InputArtifacts = inputArtifacts;
            TestId = testId;
            Description = description;
            DisplayName = displayName;
            SubnetId = subnetId;
            Kind = kind;
            PublicIpDisabled = publicIpDisabled;
            KeyvaultReferenceIdentityType = keyvaultReferenceIdentityType;
            KeyvaultReferenceIdentityId = keyvaultReferenceIdentityId;
            MetricsReferenceIdentityType = metricsReferenceIdentityType;
            MetricsReferenceIdentityId = metricsReferenceIdentityId;
            EngineBuiltInIdentityType = engineBuiltInIdentityType;
            EngineBuiltInIdentityIds = engineBuiltInIdentityIds;
            CreatedDateTime = createdDateTime;
            CreatedBy = createdBy;
            LastModifiedDateTime = lastModifiedDateTime;
            LastModifiedBy = lastModifiedBy;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Pass fail criteria for a test. </summary>
        public PassFailCriteria PassFailCriteria { get; set; }
        /// <summary> Auto stop criteria for a test. This will automatically stop a load test if the error percentage is high for a certain time window. </summary>
        public AutoStopCriteria AutoStopCriteria { get; set; }
        /// <summary>
        /// Secrets can be stored in an Azure Key Vault or any other secret store. If the
        /// secret is stored in an Azure Key Vault, the value should be the secret
        /// identifier and the type should be AKV_SECRET_URI. If the secret is stored
        /// elsewhere, the secret value should be provided directly and the type should be
        /// SECRET_VALUE.
        /// </summary>
        public IDictionary<string, TestSecret> Secrets { get; }
        /// <summary> Certificates metadata. </summary>
        public TestCertificate Certificate { get; set; }
        /// <summary> Environment variables which are defined as a set of &lt;name,value&gt; pairs. </summary>
        public IDictionary<string, string> EnvironmentVariables { get; }
        /// <summary> The load test configuration. </summary>
        public LoadTestConfiguration LoadTestConfiguration { get; set; }
        /// <summary> Id of the test run to be marked as baseline to view trends of client-side metrics from recent test runs. </summary>
        public string BaselineTestRunId { get; set; }
        /// <summary> The input artifacts for the test. </summary>
        public TestInputArtifacts InputArtifacts { get; }
        /// <summary> Unique test identifier for the load test, must contain only lower-case alphabetic, numeric, underscore or hyphen characters. </summary>
        public string TestId { get; }
        /// <summary> The test description. </summary>
        public string Description { get; set; }
        /// <summary> Display name of a test. </summary>
        public string DisplayName { get; set; }
        /// <summary> Subnet ID on which the load test instances should run. </summary>
        public string SubnetId { get; set; }
        /// <summary> Kind of test. </summary>
        public LoadTestKind? Kind { get; set; }
        /// <summary> Inject load test engines without deploying public IP for outbound access. </summary>
        public bool? PublicIpDisabled { get; set; }
        /// <summary> Type of the managed identity referencing the Key vault. </summary>
        public string KeyvaultReferenceIdentityType { get; set; }
        /// <summary> Resource Id of the managed identity referencing the Key vault. </summary>
        public string KeyvaultReferenceIdentityId { get; set; }
        /// <summary> Type of the managed identity referencing the metrics. </summary>
        public LoadTestingManagedIdentityType? MetricsReferenceIdentityType { get; set; }
        /// <summary> Resource Id of the managed identity referencing the metrics. </summary>
        public string MetricsReferenceIdentityId { get; set; }
        /// <summary> Type of the managed identity built in load test engines. </summary>
        public LoadTestingManagedIdentityType? EngineBuiltInIdentityType { get; set; }
        /// <summary> Resource Ids of the managed identity built in to load test engines. Required if engineBuiltInIdentityType is UserAssigned. </summary>
        public IList<string> EngineBuiltInIdentityIds { get; }
        /// <summary> The creation datetime(RFC 3339 literal format). </summary>
        public DateTimeOffset? CreatedDateTime { get; }
        /// <summary> The user that created. </summary>
        public string CreatedBy { get; }
        /// <summary> The last Modified datetime(RFC 3339 literal format). </summary>
        public DateTimeOffset? LastModifiedDateTime { get; }
        /// <summary> The user that last modified. </summary>
        public string LastModifiedBy { get; }
    }
}
