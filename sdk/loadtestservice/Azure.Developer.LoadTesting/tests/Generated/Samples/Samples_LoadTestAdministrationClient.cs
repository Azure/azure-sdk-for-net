// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.LoadTesting.Samples
{
    public partial class Samples_LoadTestAdministrationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Test_CreateOrUpdateTest_CreateOrUpdateALoadTest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                description = "sample description",
                displayName = "Performance_LoadTest",
                loadTestConfiguration = new
                {
                    engineInstances = 6,
                    splitAllCSVs = true,
                },
                passFailCriteria = new
                {
                    passFailMetrics = new Dictionary<string, object>
                    {
                        ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
                        {
                            clientMetric = "response_time_ms",
                            aggregate = "percentage",
                            condition = ">",
                            value = 20,
                            action = "continue",
                        }
                    },
                    passFailServerMetrics = new Dictionary<string, object>
                    {
                        ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
                        {
                            resourceId = "/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/MyResourceGroup/providers/Microsoft.Compute/virtualMachines/MyVM",
                            metricNamespace = "Microsoft.Compute/virtualMachines",
                            metricName = "Percentage CPU",
                            aggregation = "Average",
                            condition = ">",
                            value = 20,
                            action = "continue",
                        }
                    },
                },
                autoStopCriteria = new
                {
                    autoStopDisabled = true,
                    errorRate = 70F,
                    errorRateTimeWindowInSeconds = 60,
                },
                secrets = new
                {
                    secret1 = new
                    {
                        value = "https://samplevault.vault.azure.net/secrets/samplesecret/f113f91fd4c44a368049849c164db827",
                        type = "AKV_SECRET_URI",
                    },
                },
                environmentVariables = new
                {
                    envvar1 = "sampletext",
                },
                subnetId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Network/virtualNetworks/samplenetworkresource/subnets/AAAAA0A0A0",
                keyvaultReferenceIdentityType = "UserAssigned",
                keyvaultReferenceIdentityId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/sampleprovider/sampleresourcetype/sampleresourcename",
                metricsReferenceIdentityType = "UserAssigned",
                metricsReferenceIdentityId = "/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename",
                engineBuiltInIdentityType = "UserAssigned",
                engineBuiltInIdentityIds = new object[]
            {
"/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename"
            },
            });
            Response response = client.CreateOrUpdateTest("12345678-1234-1234-1234-123456789012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Test_CreateOrUpdateTest_CreateOrUpdateALoadTest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                description = "sample description",
                displayName = "Performance_LoadTest",
                loadTestConfiguration = new
                {
                    engineInstances = 6,
                    splitAllCSVs = true,
                },
                passFailCriteria = new
                {
                    passFailMetrics = new Dictionary<string, object>
                    {
                        ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
                        {
                            clientMetric = "response_time_ms",
                            aggregate = "percentage",
                            condition = ">",
                            value = 20,
                            action = "continue",
                        }
                    },
                    passFailServerMetrics = new Dictionary<string, object>
                    {
                        ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
                        {
                            resourceId = "/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/MyResourceGroup/providers/Microsoft.Compute/virtualMachines/MyVM",
                            metricNamespace = "Microsoft.Compute/virtualMachines",
                            metricName = "Percentage CPU",
                            aggregation = "Average",
                            condition = ">",
                            value = 20,
                            action = "continue",
                        }
                    },
                },
                autoStopCriteria = new
                {
                    autoStopDisabled = true,
                    errorRate = 70F,
                    errorRateTimeWindowInSeconds = 60,
                },
                secrets = new
                {
                    secret1 = new
                    {
                        value = "https://samplevault.vault.azure.net/secrets/samplesecret/f113f91fd4c44a368049849c164db827",
                        type = "AKV_SECRET_URI",
                    },
                },
                environmentVariables = new
                {
                    envvar1 = "sampletext",
                },
                subnetId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Network/virtualNetworks/samplenetworkresource/subnets/AAAAA0A0A0",
                keyvaultReferenceIdentityType = "UserAssigned",
                keyvaultReferenceIdentityId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/sampleprovider/sampleresourcetype/sampleresourcename",
                metricsReferenceIdentityType = "UserAssigned",
                metricsReferenceIdentityId = "/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename",
                engineBuiltInIdentityType = "UserAssigned",
                engineBuiltInIdentityIds = new object[]
            {
"/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/samplerg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sampleresourcename"
            },
            });
            Response response = await client.CreateOrUpdateTestAsync("12345678-1234-1234-1234-123456789012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AdministrationOperations_CreateOrUpdateAppComponents_AddOrUpdateAppComponentsToALoadTest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                components = new Dictionary<string, object>
                {
                    ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource"] = new
                    {
                        resourceType = "microsoft.insights/components",
                        resourceName = "appcomponentresource",
                        displayName = "Performance_LoadTest_Insights",
                        kind = "web",
                    }
                },
            });
            Response response = client.CreateOrUpdateAppComponents("ee843bd9-a6d4-4364-a45c-427a03c39fa7", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AdministrationOperations_CreateOrUpdateAppComponents_AddOrUpdateAppComponentsToALoadTest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                components = new Dictionary<string, object>
                {
                    ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource"] = new
                    {
                        resourceType = "microsoft.insights/components",
                        resourceName = "appcomponentresource",
                        displayName = "Performance_LoadTest_Insights",
                        kind = "web",
                    }
                },
            });
            Response response = await client.CreateOrUpdateAppComponentsAsync("ee843bd9-a6d4-4364-a45c-427a03c39fa7", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AdministrationOperations_CreateOrUpdateServerMetricsConfig_AddOrUpdateServerMetricsConfigurationForALoadTest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metrics = new Dictionary<string, object>
                {
                    ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource/providers/microsoft.insights/metricdefinitions/requests/duration"] = new
                    {
                        resourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource",
                        metricNamespace = "microsoft.insights/components",
                        displayDescription = "sample description",
                        name = "requests/duration",
                        aggregation = "Average",
                        resourceType = "microsoft.insights/components",
                    }
                },
            });
            Response response = client.CreateOrUpdateServerMetricsConfig("edc6e529-d009-4b99-b763-ca492e3a2823", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("metricNamespace").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("aggregation").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AdministrationOperations_CreateOrUpdateServerMetricsConfig_AddOrUpdateServerMetricsConfigurationForALoadTest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metrics = new Dictionary<string, object>
                {
                    ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource/providers/microsoft.insights/metricdefinitions/requests/duration"] = new
                    {
                        resourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource",
                        metricNamespace = "microsoft.insights/components",
                        displayDescription = "sample description",
                        name = "requests/duration",
                        aggregation = "Average",
                        resourceType = "microsoft.insights/components",
                    }
                },
            });
            Response response = await client.CreateOrUpdateServerMetricsConfigAsync("edc6e529-d009-4b99-b763-ca492e3a2823", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("metricNamespace").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("aggregation").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AdministrationOperations_GetAppComponents_GetAssociatedAppComponentForTheGivenTest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = client.GetAppComponents("ee843bd9-a6d4-4364-a45c-427a03c39fa7", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AdministrationOperations_GetAppComponents_GetAssociatedAppComponentForTheGivenTest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = await client.GetAppComponentsAsync("ee843bd9-a6d4-4364-a45c-427a03c39fa7", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AdministrationOperations_GetAppComponents_GetAssociatedAppComponentForTheGivenTest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<TestAppComponents> response = client.GetAppComponents("ee843bd9-a6d4-4364-a45c-427a03c39fa7");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AdministrationOperations_GetAppComponents_GetAssociatedAppComponentForTheGivenTest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<TestAppComponents> response = await client.GetAppComponentsAsync("ee843bd9-a6d4-4364-a45c-427a03c39fa7");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AdministrationOperations_GetServerMetricsConfig_ListServerMetricsConfigurationForTheGivenTest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = client.GetServerMetricsConfig("12345678-1234-1234-1234-123456789012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("metricNamespace").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("aggregation").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AdministrationOperations_GetServerMetricsConfig_ListServerMetricsConfigurationForTheGivenTest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = await client.GetServerMetricsConfigAsync("12345678-1234-1234-1234-123456789012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("metricNamespace").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("aggregation").ToString());
            Console.WriteLine(result.GetProperty("metrics").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AdministrationOperations_GetServerMetricsConfig_ListServerMetricsConfigurationForTheGivenTest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<TestServerMetricsConfiguration> response = client.GetServerMetricsConfig("12345678-1234-1234-1234-123456789012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AdministrationOperations_GetServerMetricsConfig_ListServerMetricsConfigurationForTheGivenTest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<TestServerMetricsConfiguration> response = await client.GetServerMetricsConfigAsync("12345678-1234-1234-1234-123456789012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Test_GetTest_GetALoadTest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = client.GetTest("12345678-1234-1234-1234-123456789012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Test_GetTest_GetALoadTest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = await client.GetTestAsync("12345678-1234-1234-1234-123456789012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Test_GetTest_GetALoadTest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<LoadTest> response = client.GetTest("12345678-1234-1234-1234-123456789012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Test_GetTest_GetALoadTest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<LoadTest> response = await client.GetTestAsync("12345678-1234-1234-1234-123456789012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestFileInfo_GetTestFile_GetAFileFromALoadTest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = client.GetTestFile("12345678-1234-1234-1234-123456789012", "sample.jmx", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("fileName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestFileInfo_GetTestFile_GetAFileFromALoadTest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = await client.GetTestFileAsync("12345678-1234-1234-1234-123456789012", "sample.jmx", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("fileName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestFileInfo_GetTestFile_GetAFileFromALoadTest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<TestFileInfo> response = client.GetTestFile("12345678-1234-1234-1234-123456789012", "sample.jmx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestFileInfo_GetTestFile_GetAFileFromALoadTest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<TestFileInfo> response = await client.GetTestFileAsync("12345678-1234-1234-1234-123456789012", "sample.jmx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AdministrationOperations_UploadTestFile_UploadInputFileForAGivenTestName()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("application/octet-stream content");
            Response response = client.UploadTestFile("12345678-1234-1234-1234-123456789012", "sample.jmx", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("fileName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AdministrationOperations_UploadTestFile_UploadInputFileForAGivenTestName_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("application/octet-stream content");
            Response response = await client.UploadTestFileAsync("12345678-1234-1234-1234-123456789012", "sample.jmx", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("fileName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AdministrationOperations_UploadTestFile_UploadInputFileForAGivenTestName_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<TestFileInfo> response = client.UploadTestFile("12345678-1234-1234-1234-123456789012", "sample.jmx", BinaryData.FromObjectAsJson("application/octet-stream content"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AdministrationOperations_UploadTestFile_UploadInputFileForAGivenTestName_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<TestFileInfo> response = await client.UploadTestFileAsync("12345678-1234-1234-1234-123456789012", "sample.jmx", BinaryData.FromObjectAsJson("application/octet-stream content"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestFileInfo_DeleteTestFile_DeleteAFileFromALoadTest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = client.DeleteTestFile("12345678-1234-1234-1234-123456789012", "app.jmx");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestFileInfo_DeleteTestFile_DeleteAFileFromALoadTest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = await client.DeleteTestFileAsync("12345678-1234-1234-1234-123456789012", "app.jmx");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Test_DeleteTest_DeleteALoadTest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = client.DeleteTest("12345678-1234-1234-1234-123456789012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Test_DeleteTest_DeleteALoadTest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = await client.DeleteTestAsync("12345678-1234-1234-1234-123456789012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfile_CreateOrUpdateTestProfile_CreateOrUpdateATestProfile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                description = "sample description",
                displayName = "Performance_TestProfile",
                testId = "12346-abcd-6789",
                targetResourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Web/sites/myfunctionapp",
                targetResourceConfigurations = new
                {
                    kind = "FunctionsFlexConsumption",
                    configurations = new
                    {
                        config1 = new
                        {
                            instanceMemoryMB = 2048L,
                            httpConcurrency = 16L,
                        },
                        config2 = new
                        {
                            instanceMemoryMB = 4096L,
                            httpConcurrency = 16L,
                        },
                    },
                },
            });
            Response response = client.CreateOrUpdateTestProfile("12345678-1234-1234-1234-123456789012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfile_CreateOrUpdateTestProfile_CreateOrUpdateATestProfile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                description = "sample description",
                displayName = "Performance_TestProfile",
                testId = "12346-abcd-6789",
                targetResourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Web/sites/myfunctionapp",
                targetResourceConfigurations = new
                {
                    kind = "FunctionsFlexConsumption",
                    configurations = new
                    {
                        config1 = new
                        {
                            instanceMemoryMB = 2048L,
                            httpConcurrency = 16L,
                        },
                        config2 = new
                        {
                            instanceMemoryMB = 4096L,
                            httpConcurrency = 16L,
                        },
                    },
                },
            });
            Response response = await client.CreateOrUpdateTestProfileAsync("12345678-1234-1234-1234-123456789012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfile_DeleteTestProfile_DeleteATestProfile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = client.DeleteTestProfile("12345678-1234-1234-1234-123456789012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfile_DeleteTestProfile_DeleteATestProfile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = await client.DeleteTestProfileAsync("12345678-1234-1234-1234-123456789012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfile_GetTestProfile_GetATestProfile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = client.GetTestProfile("12345678-1234-1234-1234-123456789012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfile_GetTestProfile_GetATestProfile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response response = await client.GetTestProfileAsync("12345678-1234-1234-1234-123456789012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfile_GetTestProfile_GetATestProfile_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<TestProfile> response = client.GetTestProfile("12345678-1234-1234-1234-123456789012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfile_GetTestProfile_GetATestProfile_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            Response<TestProfile> response = await client.GetTestProfileAsync("12345678-1234-1234-1234-123456789012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestFileInfo_GetTestFiles_GetAllTestFiles()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            foreach (BinaryData item in client.GetTestFiles("12345678-1234-1234-1234-123456789012", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("fileName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestFileInfo_GetTestFiles_GetAllTestFiles_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTestFilesAsync("12345678-1234-1234-1234-123456789012", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("fileName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestFileInfo_GetTestFiles_GetAllTestFiles_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            foreach (TestFileInfo item in client.GetTestFiles("12345678-1234-1234-1234-123456789012"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestFileInfo_GetTestFiles_GetAllTestFiles_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(endpoint, credential);

            await foreach (TestFileInfo item in client.GetTestFilesAsync("12345678-1234-1234-1234-123456789012"))
            {
            }
        }
    }
}
