// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Developer.LoadTesting.Models;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.LoadTesting.Samples
{
    public partial class Samples_LoadTestRunClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRun_CreateOrUpdateTestRun_CreateUpdateAndStartALoadTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Performance_LoadTest_Run1",
                testId = "12345678-1234-1234-1234-123456789012",
                description = "sample description",
                loadTestConfiguration = new
                {
                    engineInstances = 6,
                    splitAllCSVs = true,
                },
                passFailCriteria = new
                {
                    passFailMetrics = new Dictionary<string, object>
                    {
                        ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
                        {
                            clientMetric = "response_time_ms",
                            aggregate = "percentage",
                            condition = ">",
                            value = 20,
                            action = "continue",
                        }
                    },
                    passFailServerMetrics = new Dictionary<string, object>
                    {
                        ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
                        {
                            resourceId = "/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/MyResourceGroup/providers/Microsoft.Compute/virtualMachines/MyVM",
                            metricNamespace = "Microsoft.Compute/virtualMachines",
                            metricName = "Percentage CPU",
                            aggregation = "Average",
                            condition = ">",
                            value = 20,
                            action = "continue",
                        }
                    },
                },
                autoStopCriteria = new
                {
                    autoStopDisabled = true,
                    errorRate = 70F,
                    errorRateTimeWindowInSeconds = 60,
                },
                secrets = new
                {
                    secret1 = new
                    {
                        value = "https://samplevault.vault.azure.net/secrets/samplesecret/f113f91fd4c44a368049849c164db827",
                        type = "AKV_SECRET_URI",
                    },
                },
                environmentVariables = new
                {
                    envvar1 = "sampletext",
                },
                debugLogsEnabled = true,
                requestDataLevel = "NONE",
            });
            Response response = client.CreateOrUpdateTestRun("12316678-1234-1234-1234-122451189012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRun_CreateOrUpdateTestRun_CreateUpdateAndStartALoadTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Performance_LoadTest_Run1",
                testId = "12345678-1234-1234-1234-123456789012",
                description = "sample description",
                loadTestConfiguration = new
                {
                    engineInstances = 6,
                    splitAllCSVs = true,
                },
                passFailCriteria = new
                {
                    passFailMetrics = new Dictionary<string, object>
                    {
                        ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
                        {
                            clientMetric = "response_time_ms",
                            aggregate = "percentage",
                            condition = ">",
                            value = 20,
                            action = "continue",
                        }
                    },
                    passFailServerMetrics = new Dictionary<string, object>
                    {
                        ["fefd759d-7fe8-4f83-8b6d-aeebe0f491fe"] = new
                        {
                            resourceId = "/subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/MyResourceGroup/providers/Microsoft.Compute/virtualMachines/MyVM",
                            metricNamespace = "Microsoft.Compute/virtualMachines",
                            metricName = "Percentage CPU",
                            aggregation = "Average",
                            condition = ">",
                            value = 20,
                            action = "continue",
                        }
                    },
                },
                autoStopCriteria = new
                {
                    autoStopDisabled = true,
                    errorRate = 70F,
                    errorRateTimeWindowInSeconds = 60,
                },
                secrets = new
                {
                    secret1 = new
                    {
                        value = "https://samplevault.vault.azure.net/secrets/samplesecret/f113f91fd4c44a368049849c164db827",
                        type = "AKV_SECRET_URI",
                    },
                },
                environmentVariables = new
                {
                    envvar1 = "sampletext",
                },
                debugLogsEnabled = true,
                requestDataLevel = "NONE",
            });
            Response response = await client.CreateOrUpdateTestRunAsync("12316678-1234-1234-1234-122451189012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_CreateOrUpdateAppComponents_AddOrUpdateAppComponentsToALoadTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                components = new Dictionary<string, object>
                {
                    ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource"] = new
                    {
                        resourceType = "microsoft.insights/components",
                        resourceName = "appcomponentresource",
                        displayName = "Performance_LoadTest_Insights",
                        kind = "web",
                    }
                },
            });
            Response response = client.CreateOrUpdateAppComponents("ee843bd9-a6d4-4364-a45c-427a03c39fa7", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_CreateOrUpdateAppComponents_AddOrUpdateAppComponentsToALoadTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                components = new Dictionary<string, object>
                {
                    ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource"] = new
                    {
                        resourceType = "microsoft.insights/components",
                        resourceName = "appcomponentresource",
                        displayName = "Performance_LoadTest_Insights",
                        kind = "web",
                    }
                },
            });
            Response response = await client.CreateOrUpdateAppComponentsAsync("ee843bd9-a6d4-4364-a45c-427a03c39fa7", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_CreateOrUpdateServerMetricsConfig_AddOrUpdateServerMetricsConfigurationForALoadTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metrics = new Dictionary<string, object>
                {
                    ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource/providers/microsoft.insights/metricdefinitions/requests/duration"] = new
                    {
                        resourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource",
                        metricNamespace = "microsoft.insights/components",
                        displayDescription = "sample description",
                        name = "requests/duration",
                        aggregation = "Average",
                        resourceType = "microsoft.insights/components",
                    }
                },
            });
            Response response = client.CreateOrUpdateServerMetricsConfig("edc6e529-d009-4b99-b763-ca492e3a2823", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_CreateOrUpdateServerMetricsConfig_AddOrUpdateServerMetricsConfigurationForALoadTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metrics = new Dictionary<string, object>
                {
                    ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource/providers/microsoft.insights/metricdefinitions/requests/duration"] = new
                    {
                        resourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/microsoft.insights/components/appcomponentresource",
                        metricNamespace = "microsoft.insights/components",
                        displayDescription = "sample description",
                        name = "requests/duration",
                        aggregation = "Average",
                        resourceType = "microsoft.insights/components",
                    }
                },
            });
            Response response = await client.CreateOrUpdateServerMetricsConfigAsync("edc6e529-d009-4b99-b763-ca492e3a2823", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRun_DeleteTestRun_DeleteALoadTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.DeleteTestRun("12316678-1234-1234-1234-122451189012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRun_DeleteTestRun_DeleteALoadTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.DeleteTestRunAsync("12316678-1234-1234-1234-122451189012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetAppComponents_GetAssociatedAppComponentForTheGivenTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.GetAppComponents("ee843bd9-a6d4-4364-a45c-427a03c39fa7", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetAppComponents_GetAssociatedAppComponentForTheGivenTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.GetAppComponentsAsync("ee843bd9-a6d4-4364-a45c-427a03c39fa7", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceName").ToString());
            Console.WriteLine(result.GetProperty("components").GetProperty("<key>").GetProperty("resourceType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetAppComponents_GetAssociatedAppComponentForTheGivenTestRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestRunAppComponents> response = client.GetAppComponents("ee843bd9-a6d4-4364-a45c-427a03c39fa7");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetAppComponents_GetAssociatedAppComponentForTheGivenTestRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestRunAppComponents> response = await client.GetAppComponentsAsync("ee843bd9-a6d4-4364-a45c-427a03c39fa7");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetServerMetricsConfig_ListServerMetricsConfigurationForTheGivenTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.GetServerMetricsConfig("12345678-1234-1234-1234-123456789012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetServerMetricsConfig_ListServerMetricsConfigurationForTheGivenTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.GetServerMetricsConfigAsync("12345678-1234-1234-1234-123456789012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetServerMetricsConfig_ListServerMetricsConfigurationForTheGivenTestRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestRunServerMetricConfig> response = client.GetServerMetricsConfig("12345678-1234-1234-1234-123456789012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetServerMetricsConfig_ListServerMetricsConfigurationForTheGivenTestRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestRunServerMetricConfig> response = await client.GetServerMetricsConfigAsync("12345678-1234-1234-1234-123456789012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRun_GetTestRun_GetALoadTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.GetTestRun("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRun_GetTestRun_GetALoadTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.GetTestRunAsync("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRun_GetTestRun_GetALoadTestRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestRun> response = client.GetTestRun("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRun_GetTestRun_GetALoadTestRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestRun> response = await client.GetTestRunAsync("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunFileInfo_GetTestRunFile_GetAFileAssociatedToALoadTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.GetTestRunFile("12316678-1234-1234-1234-122451189012", "sample.jmx", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("fileName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunFileInfo_GetTestRunFile_GetAFileAssociatedToALoadTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.GetTestRunFileAsync("12316678-1234-1234-1234-122451189012", "sample.jmx", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("fileName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunFileInfo_GetTestRunFile_GetAFileAssociatedToALoadTestRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestRunFileInfo> response = client.GetTestRunFile("12316678-1234-1234-1234-122451189012", "sample.jmx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunFileInfo_GetTestRunFile_GetAFileAssociatedToALoadTestRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestRunFileInfo> response = await client.GetTestRunFileAsync("12316678-1234-1234-1234-122451189012", "sample.jmx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetMetricDefinitions_ListTheMetricDefinitionsForALoadTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.GetMetricDefinitions("12316678-1234-1234-1234-122451189012", "LoadTestRunMetrics", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetMetricDefinitions_ListTheMetricDefinitionsForALoadTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.GetMetricDefinitionsAsync("12316678-1234-1234-1234-122451189012", "LoadTestRunMetrics", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetMetricDefinitions_ListTheMetricDefinitionsForALoadTestRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<MetricDefinitionCollection> response = client.GetMetricDefinitions("12316678-1234-1234-1234-122451189012", "LoadTestRunMetrics");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetMetricDefinitions_ListTheMetricDefinitionsForALoadTestRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<MetricDefinitionCollection> response = await client.GetMetricDefinitionsAsync("12316678-1234-1234-1234-122451189012", "LoadTestRunMetrics");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetMetricNamespaces_ListTheMetricNamespacesForALoadTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.GetMetricNamespaces("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetMetricNamespaces_ListTheMetricNamespacesForALoadTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.GetMetricNamespacesAsync("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetMetricNamespaces_ListTheMetricNamespacesForALoadTestRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<MetricNamespaceCollection> response = client.GetMetricNamespaces("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetMetricNamespaces_ListTheMetricNamespacesForALoadTestRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<MetricNamespaceCollection> response = await client.GetMetricNamespacesAsync("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_StopTestRun_StopTestRunByName()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.StopTestRun("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_StopTestRun_StopTestRunByName_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.StopTestRunAsync("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_StopTestRun_StopTestRunByName_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestRun> response = client.StopTestRun("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_StopTestRun_StopTestRunByName_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestRun> response = await client.StopTestRunAsync("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_CreateOrUpdateTestProfileRun_CreateUpdateAndStartATestProfileRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Performance_TestProfile_Run1",
                testProfileId = "12345678-1234-1234-1234-123456789012",
                description = "sample description",
            });
            Response response = client.CreateOrUpdateTestProfileRun("12316678-1234-1234-1234-122451189012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_CreateOrUpdateTestProfileRun_CreateUpdateAndStartATestProfileRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Performance_TestProfile_Run1",
                testProfileId = "12345678-1234-1234-1234-123456789012",
                description = "sample description",
            });
            Response response = await client.CreateOrUpdateTestProfileRunAsync("12316678-1234-1234-1234-122451189012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_DeleteTestProfileRun_DeletesATestProfileRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.DeleteTestProfileRun("12316678-1234-1234-1234-122451189012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_DeleteTestProfileRun_DeletesATestProfileRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.DeleteTestProfileRunAsync("12316678-1234-1234-1234-122451189012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunAfterTheRunHasExecuted()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.GetTestProfileRun("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunAfterTheRunHasExecuted_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.GetTestProfileRunAsync("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunAfterTheRunHasExecuted_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestProfileRun> response = client.GetTestProfileRun("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunAfterTheRunHasExecuted_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestProfileRun> response = await client.GetTestProfileRunAsync("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunWhileTheRunIsExecuting()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.GetTestProfileRun("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunWhileTheRunIsExecuting_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.GetTestProfileRunAsync("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunWhileTheRunIsExecuting_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestProfileRun> response = client.GetTestProfileRun("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunWhileTheRunIsExecuting_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestProfileRun> response = await client.GetTestProfileRunAsync("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_StopTestProfileRun_StopATestProfileRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = client.StopTestProfileRun("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_StopTestProfileRun_StopATestProfileRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response response = await client.StopTestProfileRunAsync("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_StopTestProfileRun_StopATestProfileRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestProfileRun> response = client.StopTestProfileRun("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_StopTestProfileRun_StopATestProfileRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            Response<TestProfileRun> response = await client.StopTestProfileRunAsync("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetMetricDimensionValues_ListTheDimensionValuesForTheGivenMetricDimensionName()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            foreach (BinaryData item in client.GetMetricDimensionValues("12316678-1234-1234-1234-122451189012", "SamplerName", "ActiveThreads", "LoadTestRunMetrics", "2022-09-24T19:00:40Z/2022-09-25T19:28:40Z", "PT1H", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetMetricDimensionValues_ListTheDimensionValuesForTheGivenMetricDimensionName_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            await foreach (BinaryData item in client.GetMetricDimensionValuesAsync("12316678-1234-1234-1234-122451189012", "SamplerName", "ActiveThreads", "LoadTestRunMetrics", "2022-09-24T19:00:40Z/2022-09-25T19:28:40Z", "PT1H", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetMetricDimensionValues_ListTheDimensionValuesForTheGivenMetricDimensionName_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            foreach (string item in client.GetMetricDimensionValues("12316678-1234-1234-1234-122451189012", "SamplerName", "ActiveThreads", "LoadTestRunMetrics", "2022-09-24T19:00:40Z/2022-09-25T19:28:40Z"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetMetricDimensionValues_ListTheDimensionValuesForTheGivenMetricDimensionName_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            await foreach (string item in client.GetMetricDimensionValuesAsync("12316678-1234-1234-1234-122451189012", "SamplerName", "ActiveThreads", "LoadTestRunMetrics", "2022-09-24T19:00:40Z/2022-09-25T19:28:40Z"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetMetrics_ListTheMetricValuesForALoadTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                filters = new object[]
            {
new
{
name = "SamplerName",
values = new object[]
{
"HTTP Request"
},
}
            },
            });
            foreach (BinaryData item in client.GetMetrics("12316678-1234-1234-1234-122451189012", "ActiveThreads", "LoadTestRunMetrics", "2022-09-24T19:00:40Z/2022-09-25T19:28:40Z", content))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetMetrics_ListTheMetricValuesForALoadTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                filters = new object[]
            {
new
{
name = "SamplerName",
values = new object[]
{
"HTTP Request"
},
}
            },
            });
            await foreach (BinaryData item in client.GetMetricsAsync("12316678-1234-1234-1234-122451189012", "ActiveThreads", "LoadTestRunMetrics", "2022-09-24T19:00:40Z/2022-09-25T19:28:40Z", content))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRunOperations_GetMetrics_ListTheMetricValuesForALoadTestRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            foreach (TimeSeriesElement item in client.GetMetrics("12316678-1234-1234-1234-122451189012", "ActiveThreads", "LoadTestRunMetrics", "2022-09-24T19:00:40Z/2022-09-25T19:28:40Z"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRunOperations_GetMetrics_ListTheMetricValuesForALoadTestRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            await foreach (TimeSeriesElement item in client.GetMetricsAsync("12316678-1234-1234-1234-122451189012", "ActiveThreads", "LoadTestRunMetrics", "2022-09-24T19:00:40Z/2022-09-25T19:28:40Z"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRuns_GetAllTestProfileRunsForTheSpecifiedFilters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            foreach (BinaryData item in client.GetTestProfileRuns(null, DateTimeOffset.Parse("2024-05-01T16:00:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:50:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:00:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:50:46.072Z"), null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRuns_GetAllTestProfileRunsForTheSpecifiedFilters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTestProfileRunsAsync(null, DateTimeOffset.Parse("2024-05-01T16:00:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:50:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:00:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:50:46.072Z"), null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRuns_GetAllTestProfileRunsForTheSpecifiedFilters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            foreach (TestProfileRun item in client.GetTestProfileRuns())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRuns_GetAllTestProfileRunsForTheSpecifiedFilters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            LoadTestRunClient client = new LoadTestRunClient(endpoint, credential);

            await foreach (TestProfileRun item in client.GetTestProfileRunsAsync())
            {
            }
        }
    }
}
