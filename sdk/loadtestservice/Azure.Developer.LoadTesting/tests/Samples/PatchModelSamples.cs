// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.Developer.LoadTesting.Models;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.LoadTesting.Tests.Samples
{
    public class LoadTestingPatchModelSampels
    {
        [Test]
        public void RoundTripLoadTestSample_ProtocolMethods()
        {            
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(new Uri("<https://my-service.azure.com>"), new DefaultAzureCredential());

            Response response = client.GetTest("<id>", new RequestContext());

            dynamic loadTest = response.Content.ToDynamicFromJson(JsonPropertyNames.CamelCase);
            Console.WriteLine($"Test ID: '{loadTest.TestId}'.");
            Console.WriteLine($"Display Name: '{loadTest.DisplayName}'.");

            var patch = new
            {
                enviornmentVariables = new
                {
                    myVariable = "my-value"
                }
            };

            // Sends JSON """{{"enviornmentVariables": {"myVariable": "my-value"}}}"""
            client.CreateOrUpdateTest(loadTest.TestId, RequestContent.Create(patch));
        }

        [Test]
        public void RoundTripLoadTestSample_ProtocolMethods_DeleteVariable()
        {
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(new Uri("<https://my-service.azure.com>"), new DefaultAzureCredential());

            Response response = client.GetTest("<id>", new RequestContext());

            dynamic loadTest = response.Content.ToDynamicFromJson(JsonPropertyNames.CamelCase);
            Console.WriteLine($"Test ID: '{loadTest.TestId}'.");
            Console.WriteLine($"Display Name: '{loadTest.DisplayName}'.");

            var patch = new
            {
                enviornmentVariables = new
                {
                    myVariable = (object)null
                }
            };

            // Sends JSON """{{"enviornmentVariables": {"myVariable": "my-value"}}}"""
            client.CreateOrUpdateTest(loadTest.TestId, RequestContent.Create(patch));
        }

        [Test]
        public void RoundTripRouterJobSample_ProtocolMethods_DeleteLabel_DynamicData()
        {
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(new Uri("<https://my-service.azure.com>"), new DefaultAzureCredential());

            Response response = client.GetTest("<id>", new RequestContext());

            dynamic loadTest = response.Content.ToDynamicFromJson(JsonPropertyNames.CamelCase);
            Console.WriteLine($"Test ID: '{loadTest.TestId}'.");
            Console.WriteLine($"Display Name: '{loadTest.DisplayName}'.");

            loadTest.EnvironmentVariables["myVariable"] = null;

            // Sends JSON """{{"enviornmentVariables": {"myVariable": "my-value"}}}"""
            client.CreateOrUpdateTest(loadTest.TestId, RequestContent.Create(loadTest, new ModelSerializerOptions("P")));
        }

        [Test]
        public void RoundTripRouterJobSample_ConvenienceMethods()
        {
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(new Uri("<https://my-service.azure.com>"), new DefaultAzureCredential());

            Test loadTest = client.GetTest("<id>");

            Console.WriteLine($"Test ID: '{loadTest.TestId}'.");
            Console.WriteLine($"Display Name: '{loadTest.DisplayName}'.");

            loadTest.EnvironmentVariables["myVariable"] = "my-value";

            // Sends JSON """{{"enviornmentVariables": {"myVariable": "my-value"}}}"""
            client.CreateOrUpdateTest(loadTest);
        }

        [Test]
        public void RoundTripRouterJobSample_ConvenienceMethods_DeleteLabel()
        {
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(new Uri("<https://my-service.azure.com>"), new DefaultAzureCredential());

            Test loadTest = client.GetTest("<id>");

            Console.WriteLine($"Test ID: '{loadTest.TestId}'.");
            Console.WriteLine($"Display Name: '{loadTest.DisplayName}'.");

            loadTest.EnvironmentVariables.Remove("myVariable");

            // Sends JSON """{{"enviornmentVariables": {"myVariable": "null"}}}"""
            client.CreateOrUpdateTest(loadTest);
        }
        [Test]
        public void PatchWithoutGetRouterJobSample_ProtocolMethods()
        {
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(new Uri("<https://my-service.azure.com>"), new DefaultAzureCredential());

            var patch = new
            {
                enviornmentVariables = new
                {
                    myVariable = "my-value"
                }
            };

            // Sends JSON """{{"enviornmentVariables": {"myVariable": "my-value"}}}"""
            client.CreateOrUpdateTest("<id>", RequestContent.Create(patch));
        }

        [Test]
        public void PatchWithoutGetRouterJobSample_ProtocolMethods_DeleteLabel()
        {
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(new Uri("<https://my-service.azure.com>"), new DefaultAzureCredential());

            var patch = new
            {
                enviornmentVariables = new
                {
                    myVariable = (object)null
                }
            };

            // Sends JSON """{{"enviornmentVariables": {"myVariable": "null"}}}"""
            client.CreateOrUpdateTest("<id>", RequestContent.Create(patch));
        }

        [Test]
        public void PatchWithoutGetRouterJobSample_ConvenienceMethods()
        {
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(new Uri("<https://my-service.azure.com>"), new DefaultAzureCredential());

            Test loadTest = new Test("<id>");

            loadTest.EnvironmentVariables["myVariable"] = "my-value";

            // Sends JSON """{{"enviornmentVariables": {"myVariable": "my-value"}}}"""
            client.CreateOrUpdateTest(loadTest);
        }

        [Test]
        public void PatchWithoutGetRouterJobSample_ConvenienceMethods_DeleteLabel()
        {
            LoadTestAdministrationClient client = new LoadTestAdministrationClient(new Uri("<https://my-service.azure.com>"), new DefaultAzureCredential());

            Test loadTest = new Test("<id>");

            loadTest.EnvironmentVariables.Remove("myVariable");

            // Sends JSON """{{"enviornmentVariables": {"myVariable": "null"}}}"""
            client.CreateOrUpdateTest(loadTest);
        }
    }
}
