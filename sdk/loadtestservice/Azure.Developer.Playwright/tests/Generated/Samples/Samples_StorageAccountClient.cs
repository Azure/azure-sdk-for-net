// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;

namespace ReportingTestReporting.Samples
{
    public partial class Samples_StorageAccountClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GET_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            StorageAccountClient client = new StorageAccountClient(endpoint);

            Response response = client.GET("<workspaceId>", "<storageAccountId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GET_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            StorageAccountClient client = new StorageAccountClient(endpoint);

            Response response = await client.GETAsync("<workspaceId>", "<storageAccountId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GET_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            StorageAccountClient client = new StorageAccountClient(endpoint);

            Response response = client.GET("<workspaceId>", "<storageAccountId>", "<authorization>", "<xCorrelationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("subscriptionId").ToString());
            Console.WriteLine(result.GetProperty("linkedAt").ToString());
            Console.WriteLine(result.GetProperty("accountId").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GET_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            StorageAccountClient client = new StorageAccountClient(endpoint);

            Response response = await client.GETAsync("<workspaceId>", "<storageAccountId>", "<authorization>", "<xCorrelationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("subscriptionId").ToString());
            Console.WriteLine(result.GetProperty("linkedAt").ToString());
            Console.WriteLine(result.GetProperty("accountId").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            StorageAccountClient client = new StorageAccountClient(endpoint);

            Response response = client.Delete("<workspaceId>", "<storageAccountId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            StorageAccountClient client = new StorageAccountClient(endpoint);

            Response response = await client.DeleteAsync("<workspaceId>", "<storageAccountId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            StorageAccountClient client = new StorageAccountClient(endpoint);

            Response response = client.Delete("<workspaceId>", "<storageAccountId>", isSoftDelete: true, authorization: "<authorization>", xCorrelationId: "<xCorrelationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            StorageAccountClient client = new StorageAccountClient(endpoint);

            Response response = await client.DeleteAsync("<workspaceId>", "<storageAccountId>", isSoftDelete: true, authorization: "<authorization>", xCorrelationId: "<xCorrelationId>");

            Console.WriteLine(response.Status);
        }
    }
}
