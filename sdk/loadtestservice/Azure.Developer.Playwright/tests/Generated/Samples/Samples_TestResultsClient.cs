// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace ReportingTestReporting.Samples
{
    public partial class Samples_TestResultsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GETSummary_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            Response response = client.GETSummary("<workspaceId>", null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GETSummary_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            Response response = await client.GETSummaryAsync("<workspaceId>", null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GETSummary_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            Response response = client.GETSummary("<workspaceId>", "<filter>", "<orderby>", "<authorization>", "<xCorrelationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("passed").ToString());
            Console.WriteLine(result.GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("skipped").ToString());
            Console.WriteLine(result.GetProperty("flaky").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GETSummary_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            Response response = await client.GETSummaryAsync("<workspaceId>", "<filter>", "<orderby>", "<authorization>", "<xCorrelationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("passed").ToString());
            Console.WriteLine(result.GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("skipped").ToString());
            Console.WriteLine(result.GetProperty("flaky").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GET_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            Response response = client.GET("<workspaceId>", null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GET_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            Response response = await client.GETAsync("<workspaceId>", null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GET_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            Response response = client.GET("<workspaceId>", "<filter>", "<orderby>", 1234, 1234, "<authorization>", "<xCorrelationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("testExecutionId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("testId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("testCombinationId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("shardId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("accountId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("suiteId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("testTitle").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("suiteTitle").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("lineNumber").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("retry").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("webTestConfig").GetProperty("jobName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("webTestConfig").GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("webTestConfig").GetProperty("browserType").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("webTestConfig").GetProperty("os").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("ciProviderName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("branch").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("author").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("commitId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("revisionUrl").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("resultsSummary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("resultsSummary").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("resultsSummary").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("resultsSummary").GetProperty("attachmentsMetadata").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("testExecutionId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("retry").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("attachmentsMetadata").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("artifactsPath")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("tags")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("annotations")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("artifactsPath")[0].ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GET_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            Response response = await client.GETAsync("<workspaceId>", "<filter>", "<orderby>", 1234, 1234, "<authorization>", "<xCorrelationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("testExecutionId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("testId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("testCombinationId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("shardId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("accountId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("suiteId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("testTitle").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("suiteTitle").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("lineNumber").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("retry").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("webTestConfig").GetProperty("jobName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("webTestConfig").GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("webTestConfig").GetProperty("browserType").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("webTestConfig").GetProperty("os").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("ciProviderName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("branch").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("author").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("commitId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("revisionUrl").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("resultsSummary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("resultsSummary").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("resultsSummary").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("resultsSummary").GetProperty("attachmentsMetadata").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("testExecutionId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("retry").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("attachmentsMetadata").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("previousRetries")[0].GetProperty("artifactsPath")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("tags")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("annotations")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("artifactsPath")[0].ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostBatchUpload_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            using RequestContent content = null;
            Response response = client.PostBatchUpload("<workspaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PostBatchUpload_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            using RequestContent content = null;
            Response response = await client.PostBatchUploadAsync("<workspaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostBatchUpload_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new
{
testExecutionId = "<testExecutionId>",
testId = "<testId>",
testCombinationId = "<testCombinationId>",
runId = "<runId>",
shardId = "<shardId>",
accountId = "<accountId>",
suiteId = "<suiteId>",
testTitle = "<testTitle>",
suiteTitle = "<suiteTitle>",
fileName = "<fileName>",
lineNumber = 1234,
retry = 1234,
status = "<status>",
webTestConfig = new
{
jobName = "<jobName>",
projectName = "<projectName>",
browserType = "<browserType>",
os = "<os>",
},
ciConfig = new
{
ciProviderName = "<ciProviderName>",
branch = "<branch>",
author = "<author>",
commitId = "<commitId>",
revisionUrl = "<revisionUrl>",
},
resultsSummary = new
{
status = "<status>",
duration = 1234L,
startTime = "<startTime>",
attachmentsMetadata = "<attachmentsMetadata>",
},
previousRetries = new object[]
{
new
{
testExecutionId = "<testExecutionId>",
retry = 1234,
status = "<status>",
duration = 1234L,
startTime = "<startTime>",
attachmentsMetadata = "<attachmentsMetadata>",
artifactsPath = new object[]
{
"<artifactsPath>"
},
}
},
tags = new object[]
{
"<tags>"
},
annotations = new object[]
{
"<annotations>"
},
artifactsPath = new object[]
{
"<artifactsPath>"
},
}
            },
            });
            Response response = client.PostBatchUpload("<workspaceId>", content, authorization: "<authorization>", xCorrelationId: "<xCorrelationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PostBatchUpload_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestResultsClient client = new TestResultsClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new
{
testExecutionId = "<testExecutionId>",
testId = "<testId>",
testCombinationId = "<testCombinationId>",
runId = "<runId>",
shardId = "<shardId>",
accountId = "<accountId>",
suiteId = "<suiteId>",
testTitle = "<testTitle>",
suiteTitle = "<suiteTitle>",
fileName = "<fileName>",
lineNumber = 1234,
retry = 1234,
status = "<status>",
webTestConfig = new
{
jobName = "<jobName>",
projectName = "<projectName>",
browserType = "<browserType>",
os = "<os>",
},
ciConfig = new
{
ciProviderName = "<ciProviderName>",
branch = "<branch>",
author = "<author>",
commitId = "<commitId>",
revisionUrl = "<revisionUrl>",
},
resultsSummary = new
{
status = "<status>",
duration = 1234L,
startTime = "<startTime>",
attachmentsMetadata = "<attachmentsMetadata>",
},
previousRetries = new object[]
{
new
{
testExecutionId = "<testExecutionId>",
retry = 1234,
status = "<status>",
duration = 1234L,
startTime = "<startTime>",
attachmentsMetadata = "<attachmentsMetadata>",
artifactsPath = new object[]
{
"<artifactsPath>"
},
}
},
tags = new object[]
{
"<tags>"
},
annotations = new object[]
{
"<annotations>"
},
artifactsPath = new object[]
{
"<artifactsPath>"
},
}
            },
            });
            Response response = await client.PostBatchUploadAsync("<workspaceId>", content, authorization: "<authorization>", xCorrelationId: "<xCorrelationId>");

            Console.WriteLine(response.Status);
        }
    }
}
