// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace ReportingTestReporting.Samples
{
    public partial class Samples_TestRunsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Patch_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestRunsClient client = new TestRunsClient(endpoint);

            using RequestContent content = null;
            Response response = client.Patch("<workspaceId>", "<testRunId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Patch_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestRunsClient client = new TestRunsClient(endpoint);

            using RequestContent content = null;
            Response response = await client.PatchAsync("<workspaceId>", "<testRunId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Patch_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestRunsClient client = new TestRunsClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                runId = "<runId>",
                displayName = "<displayName>",
                creatorId = "<creatorId>",
                creatorName = "<creatorName>",
                summary = new
                {
                    status = "<status>",
                    billableTime = 1234L,
                    numBrowserSessions = 1234L,
                    maxConcurrentBrowserSessions = 1234,
                    startTime = "<startTime>",
                    endTime = "<endTime>",
                    duration = 1234L,
                    errorMessages = new object[]
            {
"<errorMessages>"
            },
                },
                ciConfig = new
                {
                    providerName = "<providerName>",
                    branch = "<branch>",
                    author = "<author>",
                    commitId = "<commitId>",
                    revisionUrl = "<revisionUrl>",
                },
                config = new
                {
                    framework = new
                    {
                        name = "<name>",
                        version = "<version>",
                        runnerName = "<runnerName>",
                    },
                    sdkLanguage = "<sdkLanguage>",
                },
            });
            Response response = client.Patch("<workspaceId>", "<testRunId>", content, authorization: "<authorization>", xCorrelationId: "<xCorrelationId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("creatorId").ToString());
            Console.WriteLine(result.GetProperty("creatorName").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("billableTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("numBrowserSessions").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("maxConcurrentBrowserSessions").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("errorMessages")[0].ToString());
            Console.WriteLine(result.GetProperty("ciConfig").GetProperty("providerName").ToString());
            Console.WriteLine(result.GetProperty("ciConfig").GetProperty("branch").ToString());
            Console.WriteLine(result.GetProperty("ciConfig").GetProperty("author").ToString());
            Console.WriteLine(result.GetProperty("ciConfig").GetProperty("commitId").ToString());
            Console.WriteLine(result.GetProperty("ciConfig").GetProperty("revisionUrl").ToString());
            Console.WriteLine(result.GetProperty("config").GetProperty("framework").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("config").GetProperty("framework").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("config").GetProperty("framework").GetProperty("runnerName").ToString());
            Console.WriteLine(result.GetProperty("config").GetProperty("sdkLanguage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Patch_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestRunsClient client = new TestRunsClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                runId = "<runId>",
                displayName = "<displayName>",
                creatorId = "<creatorId>",
                creatorName = "<creatorName>",
                summary = new
                {
                    status = "<status>",
                    billableTime = 1234L,
                    numBrowserSessions = 1234L,
                    maxConcurrentBrowserSessions = 1234,
                    startTime = "<startTime>",
                    endTime = "<endTime>",
                    duration = 1234L,
                    errorMessages = new object[]
            {
"<errorMessages>"
            },
                },
                ciConfig = new
                {
                    providerName = "<providerName>",
                    branch = "<branch>",
                    author = "<author>",
                    commitId = "<commitId>",
                    revisionUrl = "<revisionUrl>",
                },
                config = new
                {
                    framework = new
                    {
                        name = "<name>",
                        version = "<version>",
                        runnerName = "<runnerName>",
                    },
                    sdkLanguage = "<sdkLanguage>",
                },
            });
            Response response = await client.PatchAsync("<workspaceId>", "<testRunId>", content, authorization: "<authorization>", xCorrelationId: "<xCorrelationId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("creatorId").ToString());
            Console.WriteLine(result.GetProperty("creatorName").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("billableTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("numBrowserSessions").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("maxConcurrentBrowserSessions").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("errorMessages")[0].ToString());
            Console.WriteLine(result.GetProperty("ciConfig").GetProperty("providerName").ToString());
            Console.WriteLine(result.GetProperty("ciConfig").GetProperty("branch").ToString());
            Console.WriteLine(result.GetProperty("ciConfig").GetProperty("author").ToString());
            Console.WriteLine(result.GetProperty("ciConfig").GetProperty("commitId").ToString());
            Console.WriteLine(result.GetProperty("ciConfig").GetProperty("revisionUrl").ToString());
            Console.WriteLine(result.GetProperty("config").GetProperty("framework").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("config").GetProperty("framework").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("config").GetProperty("framework").GetProperty("runnerName").ToString());
            Console.WriteLine(result.GetProperty("config").GetProperty("sdkLanguage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GET_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestRunsClient client = new TestRunsClient(endpoint);

            Response response = client.GET("<workspaceId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GET_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestRunsClient client = new TestRunsClient(endpoint);

            Response response = await client.GETAsync("<workspaceId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GET_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestRunsClient client = new TestRunsClient(endpoint);

            Response response = client.GET("<workspaceId>", "<filter>", 1234, 1234, "<authorization>", "<xCorrelationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("creatorId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("creatorName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("billableTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("numBrowserSessions").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("maxConcurrentBrowserSessions").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("errorMessages")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("providerName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("branch").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("author").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("commitId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("revisionUrl").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("config").GetProperty("framework").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("config").GetProperty("framework").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("config").GetProperty("framework").GetProperty("runnerName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("config").GetProperty("sdkLanguage").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("size").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GET_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TestRunsClient client = new TestRunsClient(endpoint);

            Response response = await client.GETAsync("<workspaceId>", "<filter>", 1234, 1234, "<authorization>", "<xCorrelationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("creatorId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("creatorName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("billableTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("numBrowserSessions").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("maxConcurrentBrowserSessions").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("summary").GetProperty("errorMessages")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("providerName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("branch").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("author").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("commitId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ciConfig").GetProperty("revisionUrl").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("config").GetProperty("framework").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("config").GetProperty("framework").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("config").GetProperty("framework").GetProperty("runnerName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("config").GetProperty("sdkLanguage").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("size").ToString());
        }
    }
}
