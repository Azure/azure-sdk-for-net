// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PostgreSQL.FlexibleServers.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ServerPropertiesForUpdate
    {
        /// <summary>
        /// Initializes a new instance of the ServerPropertiesForUpdate class.
        /// </summary>
        public ServerPropertiesForUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerPropertiesForUpdate class.
        /// </summary>
        /// <param name="administratorLoginPassword">The password of the
        /// administrator login.</param>
        /// <param name="vCores">Max compute of a server is 64vCores.</param>
        /// <param name="storageProfile">Storage profile of a server.</param>
        /// <param name="standbyCount">stand by count value can be either 0 or
        /// 1</param>
        public ServerPropertiesForUpdate(string administratorLoginPassword = default(string), int? vCores = default(int?), StorageProfile storageProfile = default(StorageProfile), int? standbyCount = default(int?))
        {
            AdministratorLoginPassword = administratorLoginPassword;
            VCores = vCores;
            StorageProfile = storageProfile;
            StandbyCount = standbyCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the password of the administrator login.
        /// </summary>
        [JsonProperty(PropertyName = "administratorLoginPassword")]
        public string AdministratorLoginPassword { get; set; }

        /// <summary>
        /// Gets or sets max compute of a server is 64vCores.
        /// </summary>
        [JsonProperty(PropertyName = "vCores")]
        public int? VCores { get; set; }

        /// <summary>
        /// Gets or sets storage profile of a server.
        /// </summary>
        [JsonProperty(PropertyName = "storageProfile")]
        public StorageProfile StorageProfile { get; set; }

        /// <summary>
        /// Gets or sets stand by count value can be either 0 or 1
        /// </summary>
        [JsonProperty(PropertyName = "standbyCount")]
        public int? StandbyCount { get; set; }

    }
}
