// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PostgreSQL.FlexibleServers.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Vcores capability
    /// </summary>
    public partial class VcoreCapability
    {
        /// <summary>
        /// Initializes a new instance of the VcoreCapability class.
        /// </summary>
        public VcoreCapability()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VcoreCapability class.
        /// </summary>
        /// <param name="name">vCore name</param>
        /// <param name="vCores">supported vCores</param>
        /// <param name="supportedIops">supported IOPS</param>
        /// <param name="supportedMemoryPerVcoreMB">supported memory per vCore
        /// in MB</param>
        public VcoreCapability(string name = default(string), long? vCores = default(long?), long? supportedIops = default(long?), long? supportedMemoryPerVcoreMB = default(long?))
        {
            Name = name;
            VCores = vCores;
            SupportedIops = supportedIops;
            SupportedMemoryPerVcoreMB = supportedMemoryPerVcoreMB;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets vCore name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets supported vCores
        /// </summary>
        [JsonProperty(PropertyName = "vCores")]
        public long? VCores { get; private set; }

        /// <summary>
        /// Gets supported IOPS
        /// </summary>
        [JsonProperty(PropertyName = "supportedIops")]
        public long? SupportedIops { get; private set; }

        /// <summary>
        /// Gets supported memory per vCore in MB
        /// </summary>
        [JsonProperty(PropertyName = "supportedMemoryPerVcoreMB")]
        public long? SupportedMemoryPerVcoreMB { get; private set; }

    }
}
