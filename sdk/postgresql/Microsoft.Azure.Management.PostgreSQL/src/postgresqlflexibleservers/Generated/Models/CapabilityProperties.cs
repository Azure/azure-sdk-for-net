// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PostgreSQL.FlexibleServers.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Location capabilities.
    /// </summary>
    public partial class CapabilityProperties
    {
        /// <summary>
        /// Initializes a new instance of the CapabilityProperties class.
        /// </summary>
        public CapabilityProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CapabilityProperties class.
        /// </summary>
        /// <param name="zone">zone name</param>
        /// <param name="geoBackupSupported">A value indicating whether a new
        /// server in this region can have geo-backups to paired
        /// region.</param>
        /// <param name="zoneRedundantHaSupported">A value indicating whether a
        /// new server in this region can support multi zone HA.</param>
        /// <param name="zoneRedundantHaAndGeoBackupSupported">A value
        /// indicating whether a new server in this region can have geo-backups
        /// to paired region.</param>
        /// <param name="status">The status</param>
        public CapabilityProperties(string zone = default(string), bool? geoBackupSupported = default(bool?), bool? zoneRedundantHaSupported = default(bool?), bool? zoneRedundantHaAndGeoBackupSupported = default(bool?), IList<FlexibleServerEditionCapability> supportedFlexibleServerEditions = default(IList<FlexibleServerEditionCapability>), IList<HyperscaleNodeEditionCapability> supportedHyperscaleNodeEditions = default(IList<HyperscaleNodeEditionCapability>), string status = default(string))
        {
            Zone = zone;
            GeoBackupSupported = geoBackupSupported;
            ZoneRedundantHaSupported = zoneRedundantHaSupported;
            ZoneRedundantHaAndGeoBackupSupported = zoneRedundantHaAndGeoBackupSupported;
            SupportedFlexibleServerEditions = supportedFlexibleServerEditions;
            SupportedHyperscaleNodeEditions = supportedHyperscaleNodeEditions;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets zone name
        /// </summary>
        [JsonProperty(PropertyName = "zone")]
        public string Zone { get; private set; }

        /// <summary>
        /// Gets a value indicating whether a new server in this region can
        /// have geo-backups to paired region.
        /// </summary>
        [JsonProperty(PropertyName = "geoBackupSupported")]
        public bool? GeoBackupSupported { get; private set; }

        /// <summary>
        /// Gets a value indicating whether a new server in this region can
        /// support multi zone HA.
        /// </summary>
        [JsonProperty(PropertyName = "zoneRedundantHaSupported")]
        public bool? ZoneRedundantHaSupported { get; private set; }

        /// <summary>
        /// Gets a value indicating whether a new server in this region can
        /// have geo-backups to paired region.
        /// </summary>
        [JsonProperty(PropertyName = "zoneRedundantHaAndGeoBackupSupported")]
        public bool? ZoneRedundantHaAndGeoBackupSupported { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "supportedFlexibleServerEditions")]
        public IList<FlexibleServerEditionCapability> SupportedFlexibleServerEditions { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "supportedHyperscaleNodeEditions")]
        public IList<HyperscaleNodeEditionCapability> SupportedHyperscaleNodeEditions { get; private set; }

        /// <summary>
        /// Gets the status
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

    }
}
