// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PostgreSQL.FlexibleServers
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CustomerMaintenanceWindowOperations.
    /// </summary>
    public static partial class CustomerMaintenanceWindowOperationsExtensions
    {
            /// <summary>
            /// Creates a new customer maintenance window.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='maintenanceWindowName'>
            /// The name of the maintenance window.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a customer maintenance
            /// window.
            /// </param>
            public static CustomerMaintenanceWindow CreateOrUpdate(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName, string maintenanceWindowName, CustomerMaintenanceWindow parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serverName, maintenanceWindowName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new customer maintenance window.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='maintenanceWindowName'>
            /// The name of the maintenance window.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a customer maintenance
            /// window.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerMaintenanceWindow> CreateOrUpdateAsync(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName, string maintenanceWindowName, CustomerMaintenanceWindow parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serverName, maintenanceWindowName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a PostgreSQL server Customer maintenance window.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='maintenanceWindowName'>
            /// The name of the maintenance window.
            /// </param>
            public static void Delete(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName, string maintenanceWindowName)
            {
                operations.DeleteAsync(resourceGroupName, serverName, maintenanceWindowName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a PostgreSQL server Customer maintenance window.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='maintenanceWindowName'>
            /// The name of the maintenance window.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName, string maintenanceWindowName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serverName, maintenanceWindowName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the Customer maintenance windows of a given PostgreSQL server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='maintenanceWindowName'>
            /// The name of the maintenance window.
            /// </param>
            public static CustomerMaintenanceWindow Get(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName, string maintenanceWindowName)
            {
                return operations.GetAsync(resourceGroupName, serverName, maintenanceWindowName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the Customer maintenance windows of a given PostgreSQL server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='maintenanceWindowName'>
            /// The name of the maintenance window.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerMaintenanceWindow> GetAsync(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName, string maintenanceWindowName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serverName, maintenanceWindowName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the Customer Maintenance Windows in a given PostgreSQL flexible
            /// server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            public static CustomerMaintenanceWindowListResult ListByServer(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName)
            {
                return operations.ListByServerAsync(resourceGroupName, serverName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the Customer Maintenance Windows in a given PostgreSQL flexible
            /// server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerMaintenanceWindowListResult> ListByServerAsync(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServerWithHttpMessagesAsync(resourceGroupName, serverName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new customer maintenance window.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='maintenanceWindowName'>
            /// The name of the maintenance window.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a customer maintenance
            /// window.
            /// </param>
            public static CustomerMaintenanceWindow BeginCreateOrUpdate(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName, string maintenanceWindowName, CustomerMaintenanceWindow parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, serverName, maintenanceWindowName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new customer maintenance window.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='maintenanceWindowName'>
            /// The name of the maintenance window.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a customer maintenance
            /// window.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerMaintenanceWindow> BeginCreateOrUpdateAsync(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName, string maintenanceWindowName, CustomerMaintenanceWindow parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serverName, maintenanceWindowName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a PostgreSQL server Customer maintenance window.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='maintenanceWindowName'>
            /// The name of the maintenance window.
            /// </param>
            public static void BeginDelete(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName, string maintenanceWindowName)
            {
                operations.BeginDeleteAsync(resourceGroupName, serverName, maintenanceWindowName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a PostgreSQL server Customer maintenance window.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='maintenanceWindowName'>
            /// The name of the maintenance window.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ICustomerMaintenanceWindowOperations operations, string resourceGroupName, string serverName, string maintenanceWindowName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, serverName, maintenanceWindowName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
