// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.PostgreSql.FlexibleServers.Models
{
    public partial class HyperscaleNodeEditionCapability
    {
        internal static HyperscaleNodeEditionCapability DeserializeHyperscaleNodeEditionCapability(JsonElement element)
        {
            Optional<string> name = default;
            Optional<IReadOnlyList<StorageEditionCapability>> supportedStorageEditions = default;
            Optional<IReadOnlyList<ServerVersionCapability>> supportedServerVersions = default;
            Optional<IReadOnlyList<NodeTypeCapability>> supportedNodeTypes = default;
            Optional<string> status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportedStorageEditions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<StorageEditionCapability> array = new List<StorageEditionCapability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(StorageEditionCapability.DeserializeStorageEditionCapability(item));
                    }
                    supportedStorageEditions = array;
                    continue;
                }
                if (property.NameEquals("supportedServerVersions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ServerVersionCapability> array = new List<ServerVersionCapability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ServerVersionCapability.DeserializeServerVersionCapability(item));
                    }
                    supportedServerVersions = array;
                    continue;
                }
                if (property.NameEquals("supportedNodeTypes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<NodeTypeCapability> array = new List<NodeTypeCapability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NodeTypeCapability.DeserializeNodeTypeCapability(item));
                    }
                    supportedNodeTypes = array;
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = property.Value.GetString();
                    continue;
                }
            }
            return new HyperscaleNodeEditionCapability(name.Value, Optional.ToList(supportedStorageEditions), Optional.ToList(supportedServerVersions), Optional.ToList(supportedNodeTypes), status.Value);
        }
    }
}
