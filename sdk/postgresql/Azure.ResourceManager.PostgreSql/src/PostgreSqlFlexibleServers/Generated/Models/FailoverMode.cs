// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PostgreSql.FlexibleServers.Models
{
    /// <summary> Failover mode. </summary>
    public readonly partial struct FailoverMode : IEquatable<FailoverMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FailoverMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FailoverMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PlannedFailoverValue = "PlannedFailover";
        private const string ForcedFailoverValue = "ForcedFailover";
        private const string PlannedSwitchoverValue = "PlannedSwitchover";
        private const string ForcedSwitchoverValue = "ForcedSwitchover";

        /// <summary> PlannedFailover. </summary>
        public static FailoverMode PlannedFailover { get; } = new FailoverMode(PlannedFailoverValue);
        /// <summary> ForcedFailover. </summary>
        public static FailoverMode ForcedFailover { get; } = new FailoverMode(ForcedFailoverValue);
        /// <summary> PlannedSwitchover. </summary>
        public static FailoverMode PlannedSwitchover { get; } = new FailoverMode(PlannedSwitchoverValue);
        /// <summary> ForcedSwitchover. </summary>
        public static FailoverMode ForcedSwitchover { get; } = new FailoverMode(ForcedSwitchoverValue);
        /// <summary> Determines if two <see cref="FailoverMode"/> values are the same. </summary>
        public static bool operator ==(FailoverMode left, FailoverMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FailoverMode"/> values are not the same. </summary>
        public static bool operator !=(FailoverMode left, FailoverMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FailoverMode"/>. </summary>
        public static implicit operator FailoverMode(string value) => new FailoverMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FailoverMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FailoverMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
