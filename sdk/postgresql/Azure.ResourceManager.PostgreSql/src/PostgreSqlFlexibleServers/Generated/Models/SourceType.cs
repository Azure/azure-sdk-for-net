// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PostgreSql.FlexibleServers.Models
{
    /// <summary> Migration source server type : OnPremises, AWS, GCP, AzureVM, PostgreSQLSingleServer, AWS_RDS, AWS_AURORA, AWS_EC2, GCP_CloudSQL, GCP_AlloyDB, GCP_Compute, or EDB. </summary>
    public readonly partial struct SourceType : IEquatable<SourceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SourceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OnPremisesValue = "OnPremises";
        private const string AWSValue = "AWS";
        private const string GCPValue = "GCP";
        private const string AzureVmValue = "AzureVM";
        private const string PostgreSQLSingleServerValue = "PostgreSQLSingleServer";
        private const string AWSRDSValue = "AWS_RDS";
        private const string AWSAuroraValue = "AWS_AURORA";
        private const string AWSEC2Value = "AWS_EC2";
        private const string GCPCloudSQLValue = "GCP_CloudSQL";
        private const string GCPAlloyDBValue = "GCP_AlloyDB";
        private const string GCPComputeValue = "GCP_Compute";
        private const string EDBValue = "EDB";

        /// <summary> OnPremises. </summary>
        public static SourceType OnPremises { get; } = new SourceType(OnPremisesValue);
        /// <summary> AWS. </summary>
        public static SourceType AWS { get; } = new SourceType(AWSValue);
        /// <summary> GCP. </summary>
        public static SourceType GCP { get; } = new SourceType(GCPValue);
        /// <summary> AzureVM. </summary>
        public static SourceType AzureVm { get; } = new SourceType(AzureVmValue);
        /// <summary> PostgreSQLSingleServer. </summary>
        public static SourceType PostgreSQLSingleServer { get; } = new SourceType(PostgreSQLSingleServerValue);
        /// <summary> AWS_RDS. </summary>
        public static SourceType AWSRDS { get; } = new SourceType(AWSRDSValue);
        /// <summary> AWS_AURORA. </summary>
        public static SourceType AWSAurora { get; } = new SourceType(AWSAuroraValue);
        /// <summary> AWS_EC2. </summary>
        public static SourceType AWSEC2 { get; } = new SourceType(AWSEC2Value);
        /// <summary> GCP_CloudSQL. </summary>
        public static SourceType GCPCloudSQL { get; } = new SourceType(GCPCloudSQLValue);
        /// <summary> GCP_AlloyDB. </summary>
        public static SourceType GCPAlloyDB { get; } = new SourceType(GCPAlloyDBValue);
        /// <summary> GCP_Compute. </summary>
        public static SourceType GCPCompute { get; } = new SourceType(GCPComputeValue);
        /// <summary> EDB. </summary>
        public static SourceType EDB { get; } = new SourceType(EDBValue);
        /// <summary> Determines if two <see cref="SourceType"/> values are the same. </summary>
        public static bool operator ==(SourceType left, SourceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SourceType"/> values are not the same. </summary>
        public static bool operator !=(SourceType left, SourceType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SourceType"/>. </summary>
        public static implicit operator SourceType(string value) => new SourceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SourceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
