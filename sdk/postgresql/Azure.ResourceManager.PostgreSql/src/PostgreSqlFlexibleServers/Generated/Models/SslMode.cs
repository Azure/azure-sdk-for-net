// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PostgreSql.FlexibleServers.Models
{
    /// <summary> Supported SSL modes for migration. VerifyFull is the recommended SSL mode for Single server migration. Prefer, Require are recommended SSL modes for other source types. </summary>
    public readonly partial struct SslMode : IEquatable<SslMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SslMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SslMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PreferValue = "Prefer";
        private const string RequireValue = "Require";
        private const string VerifyCAValue = "VerifyCA";
        private const string VerifyFullValue = "VerifyFull";

        /// <summary> Prefer. </summary>
        public static SslMode Prefer { get; } = new SslMode(PreferValue);
        /// <summary> Require. </summary>
        public static SslMode Require { get; } = new SslMode(RequireValue);
        /// <summary> VerifyCA. </summary>
        public static SslMode VerifyCA { get; } = new SslMode(VerifyCAValue);
        /// <summary> VerifyFull. </summary>
        public static SslMode VerifyFull { get; } = new SslMode(VerifyFullValue);
        /// <summary> Determines if two <see cref="SslMode"/> values are the same. </summary>
        public static bool operator ==(SslMode left, SslMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SslMode"/> values are not the same. </summary>
        public static bool operator !=(SslMode left, SslMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SslMode"/>. </summary>
        public static implicit operator SslMode(string value) => new SslMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SslMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SslMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
