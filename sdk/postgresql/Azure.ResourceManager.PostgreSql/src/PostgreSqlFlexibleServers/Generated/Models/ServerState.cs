// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PostgreSql.FlexibleServers.Models
{
    /// <summary> A state of a server that is visible to user. </summary>
    public readonly partial struct ServerState : IEquatable<ServerState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ServerState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServerState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReadyValue = "Ready";
        private const string DroppingValue = "Dropping";
        private const string DisabledValue = "Disabled";
        private const string StartingValue = "Starting";
        private const string StoppingValue = "Stopping";
        private const string StoppedValue = "Stopped";
        private const string UpdatingValue = "Updating";

        /// <summary> Ready. </summary>
        public static ServerState Ready { get; } = new ServerState(ReadyValue);
        /// <summary> Dropping. </summary>
        public static ServerState Dropping { get; } = new ServerState(DroppingValue);
        /// <summary> Disabled. </summary>
        public static ServerState Disabled { get; } = new ServerState(DisabledValue);
        /// <summary> Starting. </summary>
        public static ServerState Starting { get; } = new ServerState(StartingValue);
        /// <summary> Stopping. </summary>
        public static ServerState Stopping { get; } = new ServerState(StoppingValue);
        /// <summary> Stopped. </summary>
        public static ServerState Stopped { get; } = new ServerState(StoppedValue);
        /// <summary> Updating. </summary>
        public static ServerState Updating { get; } = new ServerState(UpdatingValue);
        /// <summary> Determines if two <see cref="ServerState"/> values are the same. </summary>
        public static bool operator ==(ServerState left, ServerState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServerState"/> values are not the same. </summary>
        public static bool operator !=(ServerState left, ServerState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ServerState"/>. </summary>
        public static implicit operator ServerState(string value) => new ServerState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ServerState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ServerState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
