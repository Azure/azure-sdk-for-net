// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Applications.Containers.Models
{
    public partial class ContainerAppProbe : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(FailureThreshold))
            {
                writer.WritePropertyName("failureThreshold");
                writer.WriteNumberValue(FailureThreshold.Value);
            }
            if (Optional.IsDefined(InitialDelaySeconds))
            {
                writer.WritePropertyName("initialDelaySeconds");
                writer.WriteNumberValue(InitialDelaySeconds.Value);
            }
            if (Optional.IsDefined(PeriodSeconds))
            {
                writer.WritePropertyName("periodSeconds");
                writer.WriteNumberValue(PeriodSeconds.Value);
            }
            if (Optional.IsDefined(SuccessThreshold))
            {
                writer.WritePropertyName("successThreshold");
                writer.WriteNumberValue(SuccessThreshold.Value);
            }
            if (Optional.IsDefined(TcpSocket))
            {
                writer.WritePropertyName("tcpSocket");
                writer.WriteObjectValue(TcpSocket);
            }
            if (Optional.IsDefined(TerminationGracePeriodSeconds))
            {
                writer.WritePropertyName("terminationGracePeriodSeconds");
                writer.WriteNumberValue(TerminationGracePeriodSeconds.Value);
            }
            if (Optional.IsDefined(TimeoutSeconds))
            {
                writer.WritePropertyName("timeoutSeconds");
                writer.WriteNumberValue(TimeoutSeconds.Value);
            }
            if (Optional.IsDefined(ProbeType))
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(ProbeType.Value.ToString());
            }
            writer.WritePropertyName("httpGet");
            writer.WriteStartObject();
            if (Optional.IsDefined(HttpHost))
            {
                writer.WritePropertyName("host");
                writer.WriteStringValue(HttpHost);
            }
            if (Optional.IsCollectionDefined(HttpHeaders))
            {
                writer.WritePropertyName("httpHeaders");
                writer.WriteStartArray();
                foreach (var item in HttpHeaders)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Path))
            {
                writer.WritePropertyName("path");
                writer.WriteStringValue(Path);
            }
            if (Optional.IsDefined(HttpPort))
            {
                writer.WritePropertyName("port");
                writer.WriteNumberValue(HttpPort.Value);
            }
            if (Optional.IsDefined(Scheme))
            {
                writer.WritePropertyName("scheme");
                writer.WriteStringValue(Scheme.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ContainerAppProbe DeserializeContainerAppProbe(JsonElement element)
        {
            Optional<int> failureThreshold = default;
            Optional<int> initialDelaySeconds = default;
            Optional<int> periodSeconds = default;
            Optional<int> successThreshold = default;
            Optional<ContainerAppProbeTcpSocket> tcpSocket = default;
            Optional<long> terminationGracePeriodSeconds = default;
            Optional<int> timeoutSeconds = default;
            Optional<ProbeType> type = default;
            Optional<string> host = default;
            Optional<IList<HttpHeaderData>> httpHeaders = default;
            Optional<string> path = default;
            Optional<int> port = default;
            Optional<Scheme> scheme = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("failureThreshold"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    failureThreshold = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("initialDelaySeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    initialDelaySeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("periodSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    periodSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("successThreshold"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    successThreshold = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("tcpSocket"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tcpSocket = ContainerAppProbeTcpSocket.DeserializeContainerAppProbeTcpSocket(property.Value);
                    continue;
                }
                if (property.NameEquals("terminationGracePeriodSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    terminationGracePeriodSeconds = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("timeoutSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timeoutSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    type = new ProbeType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("httpGet"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("host"))
                        {
                            host = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("httpHeaders"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<HttpHeaderData> array = new List<HttpHeaderData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(HttpHeaderData.DeserializeHttpHeaderData(item));
                            }
                            httpHeaders = array;
                            continue;
                        }
                        if (property0.NameEquals("path"))
                        {
                            path = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("port"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            port = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("scheme"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            scheme = new Scheme(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ContainerAppProbe(Optional.ToNullable(failureThreshold), Optional.ToNullable(initialDelaySeconds), Optional.ToNullable(periodSeconds), Optional.ToNullable(successThreshold), tcpSocket.Value, Optional.ToNullable(terminationGracePeriodSeconds), Optional.ToNullable(timeoutSeconds), Optional.ToNullable(type), host.Value, Optional.ToList(httpHeaders), path.Value, Optional.ToNullable(port), Optional.ToNullable(scheme));
        }
    }
}
