// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppContainers.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AppContainers
{
    public partial class Sample_ManagedEnvironmentResource
    {
        // List environments by subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetManagedEnvironments_ListEnvironmentsBySubscription()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ManagedEnvironments_ListBySubscription.json
            // this example is just showing the usage of "ManagedEnvironments_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (ManagedEnvironmentResource item in subscriptionResource.GetManagedEnvironmentsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ManagedEnvironmentData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get environments by name
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetEnvironmentsByName()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ManagedEnvironments_Get.json
            // this example is just showing the usage of "ManagedEnvironments_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ManagedEnvironmentResource created on azure
            // for more information of creating ManagedEnvironmentResource, please refer to the document of ManagedEnvironmentResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string environmentName = "jlaw-demo1";
            ResourceIdentifier managedEnvironmentResourceId = ManagedEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName);
            ManagedEnvironmentResource managedEnvironment = client.GetManagedEnvironmentResource(managedEnvironmentResourceId);

            // invoke the operation
            ManagedEnvironmentResource result = await managedEnvironment.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ManagedEnvironmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete environment by name
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteEnvironmentByName()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ManagedEnvironments_Delete.json
            // this example is just showing the usage of "ManagedEnvironments_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ManagedEnvironmentResource created on azure
            // for more information of creating ManagedEnvironmentResource, please refer to the document of ManagedEnvironmentResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "examplerg";
            string environmentName = "examplekenv";
            ResourceIdentifier managedEnvironmentResourceId = ManagedEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName);
            ManagedEnvironmentResource managedEnvironment = client.GetManagedEnvironmentResource(managedEnvironmentResourceId);

            // invoke the operation
            await managedEnvironment.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Patch Managed Environment
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchManagedEnvironment()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ManagedEnvironments_Patch.json
            // this example is just showing the usage of "ManagedEnvironments_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ManagedEnvironmentResource created on azure
            // for more information of creating ManagedEnvironmentResource, please refer to the document of ManagedEnvironmentResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "examplerg";
            string environmentName = "testcontainerenv";
            ResourceIdentifier managedEnvironmentResourceId = ManagedEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName);
            ManagedEnvironmentResource managedEnvironment = client.GetManagedEnvironmentResource(managedEnvironmentResourceId);

            // invoke the operation
            ManagedEnvironmentData data = new ManagedEnvironmentData(new AzureLocation("East US"))
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
            };
            await managedEnvironment.UpdateAsync(WaitUntil.Completed, data);

            Console.WriteLine($"Succeeded");
        }

        // Get Managed Environment Auth Token
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAuthToken_GetManagedEnvironmentAuthToken()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ManagedEnvironments_GetAuthToken.json
            // this example is just showing the usage of "ManagedEnvironments_GetAuthToken" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ManagedEnvironmentResource created on azure
            // for more information of creating ManagedEnvironmentResource, please refer to the document of ManagedEnvironmentResource
            string subscriptionId = "651f8027-33e8-4ec4-97b4-f6e9f3dc8744";
            string resourceGroupName = "rg";
            string environmentName = "testenv";
            ResourceIdentifier managedEnvironmentResourceId = ManagedEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName);
            ManagedEnvironmentResource managedEnvironment = client.GetManagedEnvironmentResource(managedEnvironmentResourceId);

            // invoke the operation
            EnvironmentAuthToken result = await managedEnvironment.GetAuthTokenAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // List environments by subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetWorkloadProfileStates_ListEnvironmentsBySubscription()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ManagedEnvironments_ListWorkloadProfileStates.json
            // this example is just showing the usage of "ManagedEnvironments_ListWorkloadProfileStates" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ManagedEnvironmentResource created on azure
            // for more information of creating ManagedEnvironmentResource, please refer to the document of ManagedEnvironmentResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string environmentName = "jlaw-demo1";
            ResourceIdentifier managedEnvironmentResourceId = ManagedEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName);
            ManagedEnvironmentResource managedEnvironment = client.GetManagedEnvironmentResource(managedEnvironmentResourceId);

            // invoke the operation and iterate over the result
            await foreach (WorkloadProfileStates item in managedEnvironment.GetWorkloadProfileStatesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Certificates_CheckNameAvailability
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CheckContainerAppNameAvailability_CertificatesCheckNameAvailability()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/Certificates_CheckNameAvailability.json
            // this example is just showing the usage of "Namespaces_CheckNameAvailability" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ManagedEnvironmentResource created on azure
            // for more information of creating ManagedEnvironmentResource, please refer to the document of ManagedEnvironmentResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "examplerg";
            string environmentName = "testcontainerenv";
            ResourceIdentifier managedEnvironmentResourceId = ManagedEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName);
            ManagedEnvironmentResource managedEnvironment = client.GetManagedEnvironmentResource(managedEnvironmentResourceId);

            // invoke the operation
            CheckNameAvailabilityRequest checkNameAvailabilityRequest = new CheckNameAvailabilityRequest()
            {
                Name = "testcertificatename",
                ResourceType = "Microsoft.App/managedEnvironments/certificates",
            };
            CheckNameAvailabilityResponse result = await managedEnvironment.CheckContainerAppNameAvailabilityAsync(checkNameAvailabilityRequest);

            Console.WriteLine($"Succeeded: {result}");
        }

        // ContainerApps_CheckNameAvailability
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CheckContainerAppNameAvailability_ContainerAppsCheckNameAvailability()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ContainerApps_CheckNameAvailability.json
            // this example is just showing the usage of "Namespaces_CheckNameAvailability" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ManagedEnvironmentResource created on azure
            // for more information of creating ManagedEnvironmentResource, please refer to the document of ManagedEnvironmentResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "examplerg";
            string environmentName = "testcontainerenv";
            ResourceIdentifier managedEnvironmentResourceId = ManagedEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName);
            ManagedEnvironmentResource managedEnvironment = client.GetManagedEnvironmentResource(managedEnvironmentResourceId);

            // invoke the operation
            CheckNameAvailabilityRequest checkNameAvailabilityRequest = new CheckNameAvailabilityRequest()
            {
                Name = "testcappname",
                ResourceType = "Microsoft.App/containerApps",
            };
            CheckNameAvailabilityResponse result = await managedEnvironment.CheckContainerAppNameAvailabilityAsync(checkNameAvailabilityRequest);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
