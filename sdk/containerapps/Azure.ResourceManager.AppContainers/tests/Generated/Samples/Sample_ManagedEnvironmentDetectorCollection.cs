// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;

namespace Azure.ResourceManager.AppContainers
{
    public partial class Sample_ManagedEnvironmentDetectorCollection
    {
        // Get the list of available diagnostic data for a managed environments
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GetTheListOfAvailableDiagnosticDataForAManagedEnvironments()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ManagedEnvironmentDiagnostics_List.json
            // this example is just showing the usage of "ManagedEnvironmentDiagnostics_ListDetectors" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ManagedEnvironmentResource created on azure
            // for more information of creating ManagedEnvironmentResource, please refer to the document of ManagedEnvironmentResource
            string subscriptionId = "f07f3711-b45e-40fe-a941-4e6d93f851e6";
            string resourceGroupName = "mikono-workerapp-test-rg";
            string environmentName = "mikonokubeenv";
            ResourceIdentifier managedEnvironmentResourceId = ManagedEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName);
            ManagedEnvironmentResource managedEnvironment = client.GetManagedEnvironmentResource(managedEnvironmentResourceId);

            // get the collection of this ManagedEnvironmentDetectorResource
            ManagedEnvironmentDetectorCollection collection = managedEnvironment.GetManagedEnvironmentDetectors();

            // invoke the operation and iterate over the result
            await foreach (ManagedEnvironmentDetectorResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DiagnosticData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get diagnostic data for a managed environments
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetDiagnosticDataForAManagedEnvironments()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ManagedEnvironmentDiagnostics_Get.json
            // this example is just showing the usage of "ManagedEnvironmentDiagnostics_GetDetector" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ManagedEnvironmentResource created on azure
            // for more information of creating ManagedEnvironmentResource, please refer to the document of ManagedEnvironmentResource
            string subscriptionId = "f07f3711-b45e-40fe-a941-4e6d93f851e6";
            string resourceGroupName = "mikono-workerapp-test-rg";
            string environmentName = "mikonokubeenv";
            ResourceIdentifier managedEnvironmentResourceId = ManagedEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName);
            ManagedEnvironmentResource managedEnvironment = client.GetManagedEnvironmentResource(managedEnvironmentResourceId);

            // get the collection of this ManagedEnvironmentDetectorResource
            ManagedEnvironmentDetectorCollection collection = managedEnvironment.GetManagedEnvironmentDetectors();

            // invoke the operation
            string detectorName = "ManagedEnvAvailabilityMetrics";
            ManagedEnvironmentDetectorResource result = await collection.GetAsync(detectorName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DiagnosticData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get diagnostic data for a managed environments
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetDiagnosticDataForAManagedEnvironments()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ManagedEnvironmentDiagnostics_Get.json
            // this example is just showing the usage of "ManagedEnvironmentDiagnostics_GetDetector" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ManagedEnvironmentResource created on azure
            // for more information of creating ManagedEnvironmentResource, please refer to the document of ManagedEnvironmentResource
            string subscriptionId = "f07f3711-b45e-40fe-a941-4e6d93f851e6";
            string resourceGroupName = "mikono-workerapp-test-rg";
            string environmentName = "mikonokubeenv";
            ResourceIdentifier managedEnvironmentResourceId = ManagedEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName);
            ManagedEnvironmentResource managedEnvironment = client.GetManagedEnvironmentResource(managedEnvironmentResourceId);

            // get the collection of this ManagedEnvironmentDetectorResource
            ManagedEnvironmentDetectorCollection collection = managedEnvironment.GetManagedEnvironmentDetectors();

            // invoke the operation
            string detectorName = "ManagedEnvAvailabilityMetrics";
            bool result = await collection.ExistsAsync(detectorName);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
