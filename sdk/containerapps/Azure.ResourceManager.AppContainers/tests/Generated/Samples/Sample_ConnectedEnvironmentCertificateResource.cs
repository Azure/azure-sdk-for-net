// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppContainers.Models;

namespace Azure.ResourceManager.AppContainers
{
    public partial class Sample_ConnectedEnvironmentCertificateResource
    {
        // Get Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetCertificate()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ConnectedEnvironmentsCertificate_Get.json
            // this example is just showing the usage of "ConnectedEnvironmentsCertificates_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ConnectedEnvironmentCertificateResource created on azure
            // for more information of creating ConnectedEnvironmentCertificateResource, please refer to the document of ConnectedEnvironmentCertificateResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "examplerg";
            string connectedEnvironmentName = "testcontainerenv";
            string certificateName = "certificate-firendly-name";
            ResourceIdentifier connectedEnvironmentCertificateResourceId = ConnectedEnvironmentCertificateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, connectedEnvironmentName, certificateName);
            ConnectedEnvironmentCertificateResource connectedEnvironmentCertificate = client.GetConnectedEnvironmentCertificateResource(connectedEnvironmentCertificateResourceId);

            // invoke the operation
            ConnectedEnvironmentCertificateResource result = await connectedEnvironmentCertificate.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CertificateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteCertificate()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ConnectedEnvironmentsCertificate_Delete.json
            // this example is just showing the usage of "ConnectedEnvironmentsCertificates_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ConnectedEnvironmentCertificateResource created on azure
            // for more information of creating ConnectedEnvironmentCertificateResource, please refer to the document of ConnectedEnvironmentCertificateResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "examplerg";
            string connectedEnvironmentName = "testcontainerenv";
            string certificateName = "certificate-firendly-name";
            ResourceIdentifier connectedEnvironmentCertificateResourceId = ConnectedEnvironmentCertificateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, connectedEnvironmentName, certificateName);
            ConnectedEnvironmentCertificateResource connectedEnvironmentCertificate = client.GetConnectedEnvironmentCertificateResource(connectedEnvironmentCertificateResourceId);

            // invoke the operation
            await connectedEnvironmentCertificate.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Patch Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchCertificate()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ConnectedEnvironmentsCertificates_Patch.json
            // this example is just showing the usage of "ConnectedEnvironmentsCertificates_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ConnectedEnvironmentCertificateResource created on azure
            // for more information of creating ConnectedEnvironmentCertificateResource, please refer to the document of ConnectedEnvironmentCertificateResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "examplerg";
            string connectedEnvironmentName = "testcontainerenv";
            string certificateName = "certificate-firendly-name";
            ResourceIdentifier connectedEnvironmentCertificateResourceId = ConnectedEnvironmentCertificateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, connectedEnvironmentName, certificateName);
            ConnectedEnvironmentCertificateResource connectedEnvironmentCertificate = client.GetConnectedEnvironmentCertificateResource(connectedEnvironmentCertificateResourceId);

            // invoke the operation
            CertificatePatch patch = new CertificatePatch()
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
            };
            ConnectedEnvironmentCertificateResource result = await connectedEnvironmentCertificate.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CertificateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
