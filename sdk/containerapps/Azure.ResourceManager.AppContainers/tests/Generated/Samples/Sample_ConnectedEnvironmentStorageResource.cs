// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppContainers.Models;

namespace Azure.ResourceManager.AppContainers
{
    public partial class Sample_ConnectedEnvironmentStorageResource
    {
        // get a environments storage properties by subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAEnvironmentsStoragePropertiesBySubscription()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ConnectedEnvironmentsStorages_Get.json
            // this example is just showing the usage of "ConnectedEnvironmentsStorages_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ConnectedEnvironmentStorageResource created on azure
            // for more information of creating ConnectedEnvironmentStorageResource, please refer to the document of ConnectedEnvironmentStorageResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string connectedEnvironmentName = "env";
            string storageName = "jlaw-demo1";
            ResourceIdentifier connectedEnvironmentStorageResourceId = ConnectedEnvironmentStorageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, connectedEnvironmentName, storageName);
            ConnectedEnvironmentStorageResource connectedEnvironmentStorage = client.GetConnectedEnvironmentStorageResource(connectedEnvironmentStorageResourceId);

            // invoke the operation
            ConnectedEnvironmentStorageResource result = await connectedEnvironmentStorage.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectedEnvironmentStorageData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create or update environments storage
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateEnvironmentsStorage()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ConnectedEnvironmentsStorages_CreateOrUpdate.json
            // this example is just showing the usage of "ConnectedEnvironmentsStorages_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ConnectedEnvironmentStorageResource created on azure
            // for more information of creating ConnectedEnvironmentStorageResource, please refer to the document of ConnectedEnvironmentStorageResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string connectedEnvironmentName = "env";
            string storageName = "jlaw-demo1";
            ResourceIdentifier connectedEnvironmentStorageResourceId = ConnectedEnvironmentStorageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, connectedEnvironmentName, storageName);
            ConnectedEnvironmentStorageResource connectedEnvironmentStorage = client.GetConnectedEnvironmentStorageResource(connectedEnvironmentStorageResourceId);

            // invoke the operation
            ConnectedEnvironmentStorageData data = new ConnectedEnvironmentStorageData()
            {
                ConnectedEnvironmentStorageAzureFile = new AzureFileProperties()
                {
                    AccountName = "account1",
                    AccountKey = "key",
                    AccessMode = AccessMode.ReadOnly,
                    ShareName = "share1",
                },
            };
            ArmOperation<ConnectedEnvironmentStorageResource> lro = await connectedEnvironmentStorage.UpdateAsync(WaitUntil.Completed, data);
            ConnectedEnvironmentStorageResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectedEnvironmentStorageData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // List environments storages by subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_ListEnvironmentsStoragesBySubscription()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2022-06-01-preview/examples/ConnectedEnvironmentsStorages_Delete.json
            // this example is just showing the usage of "ConnectedEnvironmentsStorages_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ConnectedEnvironmentStorageResource created on azure
            // for more information of creating ConnectedEnvironmentStorageResource, please refer to the document of ConnectedEnvironmentStorageResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string connectedEnvironmentName = "env";
            string storageName = "jlaw-demo1";
            ResourceIdentifier connectedEnvironmentStorageResourceId = ConnectedEnvironmentStorageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, connectedEnvironmentName, storageName);
            ConnectedEnvironmentStorageResource connectedEnvironmentStorage = client.GetConnectedEnvironmentStorageResource(connectedEnvironmentStorageResourceId);

            // invoke the operation
            await connectedEnvironmentStorage.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
