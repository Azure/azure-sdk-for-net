// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.AppContainers.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppContainers
{
    /// <summary>
    /// A class representing the SessionPool data model.
    /// Container App session pool.
    /// </summary>
    public partial class SessionPoolData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SessionPoolData"/>. </summary>
        /// <param name="location"> The location. </param>
        public SessionPoolData(AzureLocation location) : base(location)
        {
            Secrets = new ChangeTrackingList<SessionPoolSecret>();
            ManagedIdentitySettings = new ChangeTrackingList<ManagedIdentitySetting>();
        }

        /// <summary> Initializes a new instance of <see cref="SessionPoolData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed identities needed by a session pool to interact with other Azure services to not maintain any secrets or credentials in code. </param>
        /// <param name="environmentId"> Resource ID of the session pool's environment. </param>
        /// <param name="containerType"> The container type of the sessions. </param>
        /// <param name="poolManagementType"> The pool management type of the session pool. </param>
        /// <param name="nodeCount"> The number of nodes the session pool is using. </param>
        /// <param name="scaleConfiguration"> The scale configuration of the session pool. </param>
        /// <param name="secrets"> The secrets of the session pool. </param>
        /// <param name="dynamicPoolConfiguration"> The pool configuration if the poolManagementType is dynamic. </param>
        /// <param name="customContainerTemplate"> The custom container configuration if the containerType is CustomContainer. </param>
        /// <param name="sessionNetworkConfiguration"> The network configuration of the sessions in the session pool. </param>
        /// <param name="poolManagementEndpoint"> The endpoint to manage the pool. </param>
        /// <param name="provisioningState"> Provisioning state of the session pool. </param>
        /// <param name="managedIdentitySettings"> Optional settings for a Managed Identity that is assigned to the Session pool. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SessionPoolData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ManagedServiceIdentity identity, ResourceIdentifier environmentId, ContainerType? containerType, PoolManagementType? poolManagementType, int? nodeCount, ScaleConfiguration scaleConfiguration, IList<SessionPoolSecret> secrets, DynamicPoolConfiguration dynamicPoolConfiguration, CustomContainerTemplate customContainerTemplate, SessionNetworkConfiguration sessionNetworkConfiguration, Uri poolManagementEndpoint, SessionPoolProvisioningState? provisioningState, IList<ManagedIdentitySetting> managedIdentitySettings, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            Identity = identity;
            EnvironmentId = environmentId;
            ContainerType = containerType;
            PoolManagementType = poolManagementType;
            NodeCount = nodeCount;
            ScaleConfiguration = scaleConfiguration;
            Secrets = secrets;
            DynamicPoolConfiguration = dynamicPoolConfiguration;
            CustomContainerTemplate = customContainerTemplate;
            SessionNetworkConfiguration = sessionNetworkConfiguration;
            PoolManagementEndpoint = poolManagementEndpoint;
            ProvisioningState = provisioningState;
            ManagedIdentitySettings = managedIdentitySettings;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SessionPoolData"/> for deserialization. </summary>
        internal SessionPoolData()
        {
        }

        /// <summary> Managed identities needed by a session pool to interact with other Azure services to not maintain any secrets or credentials in code. </summary>
        [WirePath("identity")]
        public ManagedServiceIdentity Identity { get; set; }
        /// <summary> Resource ID of the session pool's environment. </summary>
        [WirePath("properties.environmentId")]
        public ResourceIdentifier EnvironmentId { get; set; }
        /// <summary> The container type of the sessions. </summary>
        [WirePath("properties.containerType")]
        public ContainerType? ContainerType { get; set; }
        /// <summary> The pool management type of the session pool. </summary>
        [WirePath("properties.poolManagementType")]
        public PoolManagementType? PoolManagementType { get; set; }
        /// <summary> The number of nodes the session pool is using. </summary>
        [WirePath("properties.nodeCount")]
        public int? NodeCount { get; }
        /// <summary> The scale configuration of the session pool. </summary>
        [WirePath("properties.scaleConfiguration")]
        public ScaleConfiguration ScaleConfiguration { get; set; }
        /// <summary> The secrets of the session pool. </summary>
        [WirePath("properties.secrets")]
        public IList<SessionPoolSecret> Secrets { get; }
        /// <summary> The pool configuration if the poolManagementType is dynamic. </summary>
        [WirePath("properties.dynamicPoolConfiguration")]
        public DynamicPoolConfiguration DynamicPoolConfiguration { get; set; }
        /// <summary> The custom container configuration if the containerType is CustomContainer. </summary>
        [WirePath("properties.customContainerTemplate")]
        public CustomContainerTemplate CustomContainerTemplate { get; set; }
        /// <summary> The network configuration of the sessions in the session pool. </summary>
        internal SessionNetworkConfiguration SessionNetworkConfiguration { get; set; }
        /// <summary> Network status for the sessions. </summary>
        [WirePath("properties.sessionNetworkConfiguration.status")]
        public SessionNetworkStatus? SessionNetworkStatus
        {
            get => SessionNetworkConfiguration is null ? default : SessionNetworkConfiguration.Status;
            set
            {
                if (SessionNetworkConfiguration is null)
                    SessionNetworkConfiguration = new SessionNetworkConfiguration();
                SessionNetworkConfiguration.Status = value;
            }
        }

        /// <summary> The endpoint to manage the pool. </summary>
        [WirePath("properties.poolManagementEndpoint")]
        public Uri PoolManagementEndpoint { get; }
        /// <summary> Provisioning state of the session pool. </summary>
        [WirePath("properties.provisioningState")]
        public SessionPoolProvisioningState? ProvisioningState { get; }
        /// <summary> Optional settings for a Managed Identity that is assigned to the Session pool. </summary>
        [WirePath("properties.managedIdentitySettings")]
        public IList<ManagedIdentitySetting> ManagedIdentitySettings { get; }
    }
}
