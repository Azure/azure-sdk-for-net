// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.AppContainers
{
    /// <summary>
    /// A class representing a collection of <see cref="ContainerAppsPatchResource"/> and their operations.
    /// Each <see cref="ContainerAppsPatchResource"/> in the collection will belong to the same instance of <see cref="ContainerAppResource"/>.
    /// To get a <see cref="ContainerAppsPatchResourceCollection"/> instance call the GetContainerAppsPatchResources method from an instance of <see cref="ContainerAppResource"/>.
    /// </summary>
    public partial class ContainerAppsPatchResourceCollection : ArmCollection, IEnumerable<ContainerAppsPatchResource>, IAsyncEnumerable<ContainerAppsPatchResource>
    {
        private readonly ClientDiagnostics _containerAppsPatchResourceContainerAppsPatchesClientDiagnostics;
        private readonly ContainerAppsPatchesRestOperations _containerAppsPatchResourceContainerAppsPatchesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ContainerAppsPatchResourceCollection"/> class for mocking. </summary>
        protected ContainerAppsPatchResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ContainerAppsPatchResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ContainerAppsPatchResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _containerAppsPatchResourceContainerAppsPatchesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AppContainers", ContainerAppsPatchResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ContainerAppsPatchResource.ResourceType, out string containerAppsPatchResourceContainerAppsPatchesApiVersion);
            _containerAppsPatchResourceContainerAppsPatchesRestClient = new ContainerAppsPatchesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, containerAppsPatchResourceContainerAppsPatchesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ContainerAppResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ContainerAppResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get details for specific Container Apps Patch by patch name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches/{patchName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerAppsPatches_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-10-02-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ContainerAppsPatchResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patchName"> The name of the patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="patchName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="patchName"/> is null. </exception>
        public virtual async Task<Response<ContainerAppsPatchResource>> GetAsync(string patchName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(patchName, nameof(patchName));

            using var scope = _containerAppsPatchResourceContainerAppsPatchesClientDiagnostics.CreateScope("ContainerAppsPatchResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _containerAppsPatchResourceContainerAppsPatchesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patchName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ContainerAppsPatchResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get details for specific Container Apps Patch by patch name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches/{patchName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerAppsPatches_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-10-02-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ContainerAppsPatchResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patchName"> The name of the patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="patchName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="patchName"/> is null. </exception>
        public virtual Response<ContainerAppsPatchResource> Get(string patchName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(patchName, nameof(patchName));

            using var scope = _containerAppsPatchResourceContainerAppsPatchesClientDiagnostics.CreateScope("ContainerAppsPatchResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _containerAppsPatchResourceContainerAppsPatchesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patchName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ContainerAppsPatchResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Container Apps Patch resources by ContainerApp.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerAppsPatches_ListByContainerApp</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-10-02-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ContainerAppsPatchResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> The filter to apply on the operation. For example, $filter=properties/patchApplyStatus eq 'Succeeded'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContainerAppsPatchResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContainerAppsPatchResource> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _containerAppsPatchResourceContainerAppsPatchesRestClient.CreateListByContainerAppRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _containerAppsPatchResourceContainerAppsPatchesRestClient.CreateListByContainerAppNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ContainerAppsPatchResource(Client, ContainerAppsPatchResourceData.DeserializeContainerAppsPatchResourceData(e)), _containerAppsPatchResourceContainerAppsPatchesClientDiagnostics, Pipeline, "ContainerAppsPatchResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Container Apps Patch resources by ContainerApp.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerAppsPatches_ListByContainerApp</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-10-02-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ContainerAppsPatchResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> The filter to apply on the operation. For example, $filter=properties/patchApplyStatus eq 'Succeeded'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContainerAppsPatchResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContainerAppsPatchResource> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _containerAppsPatchResourceContainerAppsPatchesRestClient.CreateListByContainerAppRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _containerAppsPatchResourceContainerAppsPatchesRestClient.CreateListByContainerAppNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ContainerAppsPatchResource(Client, ContainerAppsPatchResourceData.DeserializeContainerAppsPatchResourceData(e)), _containerAppsPatchResourceContainerAppsPatchesClientDiagnostics, Pipeline, "ContainerAppsPatchResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches/{patchName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerAppsPatches_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-10-02-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ContainerAppsPatchResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patchName"> The name of the patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="patchName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="patchName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string patchName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(patchName, nameof(patchName));

            using var scope = _containerAppsPatchResourceContainerAppsPatchesClientDiagnostics.CreateScope("ContainerAppsPatchResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _containerAppsPatchResourceContainerAppsPatchesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patchName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches/{patchName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerAppsPatches_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-10-02-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ContainerAppsPatchResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patchName"> The name of the patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="patchName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="patchName"/> is null. </exception>
        public virtual Response<bool> Exists(string patchName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(patchName, nameof(patchName));

            using var scope = _containerAppsPatchResourceContainerAppsPatchesClientDiagnostics.CreateScope("ContainerAppsPatchResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _containerAppsPatchResourceContainerAppsPatchesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patchName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches/{patchName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerAppsPatches_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-10-02-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ContainerAppsPatchResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patchName"> The name of the patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="patchName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="patchName"/> is null. </exception>
        public virtual async Task<NullableResponse<ContainerAppsPatchResource>> GetIfExistsAsync(string patchName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(patchName, nameof(patchName));

            using var scope = _containerAppsPatchResourceContainerAppsPatchesClientDiagnostics.CreateScope("ContainerAppsPatchResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _containerAppsPatchResourceContainerAppsPatchesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patchName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ContainerAppsPatchResource>(response.GetRawResponse());
                return Response.FromValue(new ContainerAppsPatchResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches/{patchName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerAppsPatches_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-10-02-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ContainerAppsPatchResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patchName"> The name of the patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="patchName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="patchName"/> is null. </exception>
        public virtual NullableResponse<ContainerAppsPatchResource> GetIfExists(string patchName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(patchName, nameof(patchName));

            using var scope = _containerAppsPatchResourceContainerAppsPatchesClientDiagnostics.CreateScope("ContainerAppsPatchResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _containerAppsPatchResourceContainerAppsPatchesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patchName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ContainerAppsPatchResource>(response.GetRawResponse());
                return Response.FromValue(new ContainerAppsPatchResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ContainerAppsPatchResource> IEnumerable<ContainerAppsPatchResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ContainerAppsPatchResource> IAsyncEnumerable<ContainerAppsPatchResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
