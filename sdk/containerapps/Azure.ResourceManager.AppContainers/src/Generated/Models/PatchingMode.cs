// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> Patching mode for the container app. Null or default in this field will be interpreted as Automatic by RP. Automatic mode will automatically apply available patches. Manual mode will require the user to manually apply patches. Disabled mode will stop patch detection and auto patching. </summary>
    public readonly partial struct PatchingMode : IEquatable<PatchingMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PatchingMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PatchingMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AutomaticValue = "Automatic";
        private const string ManualValue = "Manual";
        private const string DisabledValue = "Disabled";

        /// <summary> Automatic. </summary>
        public static PatchingMode Automatic { get; } = new PatchingMode(AutomaticValue);
        /// <summary> Manual. </summary>
        public static PatchingMode Manual { get; } = new PatchingMode(ManualValue);
        /// <summary> Disabled. </summary>
        public static PatchingMode Disabled { get; } = new PatchingMode(DisabledValue);
        /// <summary> Determines if two <see cref="PatchingMode"/> values are the same. </summary>
        public static bool operator ==(PatchingMode left, PatchingMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PatchingMode"/> values are not the same. </summary>
        public static bool operator !=(PatchingMode left, PatchingMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PatchingMode"/>. </summary>
        public static implicit operator PatchingMode(string value) => new PatchingMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PatchingMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PatchingMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
