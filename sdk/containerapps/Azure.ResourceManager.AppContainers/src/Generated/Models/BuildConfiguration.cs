// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> Configuration of the build. </summary>
    public partial class BuildConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BuildConfiguration"/>. </summary>
        public BuildConfiguration()
        {
            EnvironmentVariables = new ChangeTrackingList<EnvironmentVariable>();
            PreBuildSteps = new ChangeTrackingList<PreBuildStep>();
        }

        /// <summary> Initializes a new instance of <see cref="BuildConfiguration"/>. </summary>
        /// <param name="baseOS"> Base OS used to build and run the app. </param>
        /// <param name="platform"> Platform to be used to build and run the app. </param>
        /// <param name="platformVersion"> Platform version to be used to build and run the app. </param>
        /// <param name="environmentVariables"> List of environment variables to be passed to the build, secrets should not be used in environment variable. </param>
        /// <param name="preBuildSteps"> List of steps to perform before the build. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BuildConfiguration(string baseOS, string platform, string platformVersion, IList<EnvironmentVariable> environmentVariables, IList<PreBuildStep> preBuildSteps, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            BaseOS = baseOS;
            Platform = platform;
            PlatformVersion = platformVersion;
            EnvironmentVariables = environmentVariables;
            PreBuildSteps = preBuildSteps;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Base OS used to build and run the app. </summary>
        [WirePath("baseOs")]
        public string BaseOS { get; set; }
        /// <summary> Platform to be used to build and run the app. </summary>
        [WirePath("platform")]
        public string Platform { get; set; }
        /// <summary> Platform version to be used to build and run the app. </summary>
        [WirePath("platformVersion")]
        public string PlatformVersion { get; set; }
        /// <summary> List of environment variables to be passed to the build, secrets should not be used in environment variable. </summary>
        [WirePath("environmentVariables")]
        public IList<EnvironmentVariable> EnvironmentVariables { get; }
        /// <summary> List of steps to perform before the build. </summary>
        [WirePath("preBuildSteps")]
        public IList<PreBuildStep> PreBuildSteps { get; }
    }
}
