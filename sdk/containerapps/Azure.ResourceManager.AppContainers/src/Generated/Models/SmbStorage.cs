// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> SMB storage properties. </summary>
    public partial class SmbStorage
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SmbStorage"/>. </summary>
        public SmbStorage()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SmbStorage"/>. </summary>
        /// <param name="host"> The host name or IP address of the SMB server. </param>
        /// <param name="shareName"> The path to the SMB shared folder. </param>
        /// <param name="username"> The user to log on to the SMB server. </param>
        /// <param name="domain"> The domain name for the user. </param>
        /// <param name="password"> The password for the user. </param>
        /// <param name="accessMode"> Access mode for storage. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SmbStorage(string host, string shareName, string username, string domain, string password, ContainerAppAccessMode? accessMode, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Host = host;
            ShareName = shareName;
            Username = username;
            Domain = domain;
            Password = password;
            AccessMode = accessMode;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The host name or IP address of the SMB server. </summary>
        [WirePath("host")]
        public string Host { get; set; }
        /// <summary> The path to the SMB shared folder. </summary>
        [WirePath("shareName")]
        public string ShareName { get; set; }
        /// <summary> The user to log on to the SMB server. </summary>
        [WirePath("username")]
        public string Username { get; set; }
        /// <summary> The domain name for the user. </summary>
        [WirePath("domain")]
        public string Domain { get; set; }
        /// <summary> The password for the user. </summary>
        [WirePath("password")]
        public string Password { get; set; }
        /// <summary> Access mode for storage. </summary>
        [WirePath("accessMode")]
        public ContainerAppAccessMode? AccessMode { get; set; }
    }
}
