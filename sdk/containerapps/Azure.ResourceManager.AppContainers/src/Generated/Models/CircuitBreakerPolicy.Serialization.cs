// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class CircuitBreakerPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ConsecutiveErrors))
            {
                writer.WritePropertyName("consecutiveErrors"u8);
                writer.WriteNumberValue(ConsecutiveErrors.Value);
            }
            if (Optional.IsDefined(IntervalInSeconds))
            {
                writer.WritePropertyName("intervalInSeconds"u8);
                writer.WriteNumberValue(IntervalInSeconds.Value);
            }
            if (Optional.IsDefined(MaxEjectionPercent))
            {
                writer.WritePropertyName("maxEjectionPercent"u8);
                writer.WriteNumberValue(MaxEjectionPercent.Value);
            }
            writer.WriteEndObject();
        }

        internal static CircuitBreakerPolicy DeserializeCircuitBreakerPolicy(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> consecutiveErrors = default;
            Optional<int> intervalInSeconds = default;
            Optional<int> maxEjectionPercent = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("consecutiveErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    consecutiveErrors = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("intervalInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    intervalInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxEjectionPercent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxEjectionPercent = property.Value.GetInt32();
                    continue;
                }
            }
            return new CircuitBreakerPolicy(Optional.ToNullable(consecutiveErrors), Optional.ToNullable(intervalInSeconds), Optional.ToNullable(maxEjectionPercent));
        }
    }
}
