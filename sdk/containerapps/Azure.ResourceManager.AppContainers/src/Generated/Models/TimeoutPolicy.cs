// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> Policy to set request timeouts. </summary>
    public partial class TimeoutPolicy
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TimeoutPolicy"/>. </summary>
        public TimeoutPolicy()
        {
        }

        /// <summary> Initializes a new instance of <see cref="TimeoutPolicy"/>. </summary>
        /// <param name="responseTimeoutInSeconds"> Timeout, in seconds, for a request to respond. </param>
        /// <param name="connectionTimeoutInSeconds"> Timeout, in seconds, for a request to initiate a connection. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TimeoutPolicy(int? responseTimeoutInSeconds, int? connectionTimeoutInSeconds, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ResponseTimeoutInSeconds = responseTimeoutInSeconds;
            ConnectionTimeoutInSeconds = connectionTimeoutInSeconds;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Timeout, in seconds, for a request to respond. </summary>
        [WirePath("responseTimeoutInSeconds")]
        public int? ResponseTimeoutInSeconds { get; set; }
        /// <summary> Timeout, in seconds, for a request to initiate a connection. </summary>
        [WirePath("connectionTimeoutInSeconds")]
        public int? ConnectionTimeoutInSeconds { get; set; }
    }
}
