// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class ContainerAppDaprConfiguration : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(IsEnabled))
            {
                writer.WritePropertyName("enabled"u8);
                writer.WriteBooleanValue(IsEnabled.Value);
            }
            if (Core.Optional.IsDefined(AppId))
            {
                writer.WritePropertyName("appId"u8);
                writer.WriteStringValue(AppId);
            }
            if (Core.Optional.IsDefined(AppProtocol))
            {
                writer.WritePropertyName("appProtocol"u8);
                writer.WriteStringValue(AppProtocol.Value.ToString());
            }
            if (Core.Optional.IsDefined(AppPort))
            {
                writer.WritePropertyName("appPort"u8);
                writer.WriteNumberValue(AppPort.Value);
            }
            if (Core.Optional.IsDefined(HttpReadBufferSize))
            {
                writer.WritePropertyName("httpReadBufferSize"u8);
                writer.WriteNumberValue(HttpReadBufferSize.Value);
            }
            if (Core.Optional.IsDefined(HttpMaxRequestSize))
            {
                writer.WritePropertyName("httpMaxRequestSize"u8);
                writer.WriteNumberValue(HttpMaxRequestSize.Value);
            }
            if (Core.Optional.IsDefined(LogLevel))
            {
                writer.WritePropertyName("logLevel"u8);
                writer.WriteStringValue(LogLevel.Value.ToString());
            }
            if (Core.Optional.IsDefined(IsApiLoggingEnabled))
            {
                writer.WritePropertyName("enableApiLogging"u8);
                writer.WriteBooleanValue(IsApiLoggingEnabled.Value);
            }
            writer.WriteEndObject();
        }

        internal static ContainerAppDaprConfiguration DeserializeContainerAppDaprConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<bool> enabled = default;
            Core.Optional<string> appId = default;
            Core.Optional<ContainerAppProtocol> appProtocol = default;
            Core.Optional<int> appPort = default;
            Core.Optional<int> httpReadBufferSize = default;
            Core.Optional<int> httpMaxRequestSize = default;
            Core.Optional<ContainerAppDaprLogLevel> logLevel = default;
            Core.Optional<bool> enableApiLogging = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("appId"u8))
                {
                    appId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appProtocol"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    appProtocol = new ContainerAppProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("appPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    appPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("httpReadBufferSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    httpReadBufferSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("httpMaxRequestSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    httpMaxRequestSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("logLevel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logLevel = new ContainerAppDaprLogLevel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enableApiLogging"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableApiLogging = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ContainerAppDaprConfiguration(Core.Optional.ToNullable(enabled), appId.Value, Core.Optional.ToNullable(appProtocol), Core.Optional.ToNullable(appPort), Core.Optional.ToNullable(httpReadBufferSize), Core.Optional.ToNullable(httpMaxRequestSize), Core.Optional.ToNullable(logLevel), Core.Optional.ToNullable(enableApiLogging));
        }
    }
}
