// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> The status of the patch once it has been provisioned. </summary>
    public readonly partial struct PatchApplyStatus : IEquatable<PatchApplyStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PatchApplyStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PatchApplyStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string RebaseInProgressValue = "RebaseInProgress";
        private const string CreatingRevisionValue = "CreatingRevision";
        private const string SucceededValue = "Succeeded";
        private const string CanceledValue = "Canceled";
        private const string RebaseFailedValue = "RebaseFailed";
        private const string RevisionCreationFailedValue = "RevisionCreationFailed";
        private const string ImagePushPullFailedValue = "ImagePushPullFailed";
        private const string ManuallySkippedValue = "ManuallySkipped";

        /// <summary> NotStarted. </summary>
        public static PatchApplyStatus NotStarted { get; } = new PatchApplyStatus(NotStartedValue);
        /// <summary> RebaseInProgress. </summary>
        public static PatchApplyStatus RebaseInProgress { get; } = new PatchApplyStatus(RebaseInProgressValue);
        /// <summary> CreatingRevision. </summary>
        public static PatchApplyStatus CreatingRevision { get; } = new PatchApplyStatus(CreatingRevisionValue);
        /// <summary> Succeeded. </summary>
        public static PatchApplyStatus Succeeded { get; } = new PatchApplyStatus(SucceededValue);
        /// <summary> Canceled. </summary>
        public static PatchApplyStatus Canceled { get; } = new PatchApplyStatus(CanceledValue);
        /// <summary> RebaseFailed. </summary>
        public static PatchApplyStatus RebaseFailed { get; } = new PatchApplyStatus(RebaseFailedValue);
        /// <summary> RevisionCreationFailed. </summary>
        public static PatchApplyStatus RevisionCreationFailed { get; } = new PatchApplyStatus(RevisionCreationFailedValue);
        /// <summary> ImagePushPullFailed. </summary>
        public static PatchApplyStatus ImagePushPullFailed { get; } = new PatchApplyStatus(ImagePushPullFailedValue);
        /// <summary> ManuallySkipped. </summary>
        public static PatchApplyStatus ManuallySkipped { get; } = new PatchApplyStatus(ManuallySkippedValue);
        /// <summary> Determines if two <see cref="PatchApplyStatus"/> values are the same. </summary>
        public static bool operator ==(PatchApplyStatus left, PatchApplyStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PatchApplyStatus"/> values are not the same. </summary>
        public static bool operator !=(PatchApplyStatus left, PatchApplyStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PatchApplyStatus"/>. </summary>
        public static implicit operator PatchApplyStatus(string value) => new PatchApplyStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PatchApplyStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PatchApplyStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
