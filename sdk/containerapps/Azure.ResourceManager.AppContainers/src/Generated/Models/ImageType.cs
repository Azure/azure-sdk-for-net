// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> The type of the image. Set to CloudBuild to let the system manages the image, where user will not be able to update image through image field. Set to ContainerImage for user provided image. </summary>
    public readonly partial struct ImageType : IEquatable<ImageType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImageType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CloudBuildValue = "CloudBuild";
        private const string ContainerImageValue = "ContainerImage";

        /// <summary> CloudBuild. </summary>
        public static ImageType CloudBuild { get; } = new ImageType(CloudBuildValue);
        /// <summary> ContainerImage. </summary>
        public static ImageType ContainerImage { get; } = new ImageType(ContainerImageValue);
        /// <summary> Determines if two <see cref="ImageType"/> values are the same. </summary>
        public static bool operator ==(ImageType left, ImageType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImageType"/> values are not the same. </summary>
        public static bool operator !=(ImageType left, ImageType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ImageType"/>. </summary>
        public static implicit operator ImageType(string value) => new ImageType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImageType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImageType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
