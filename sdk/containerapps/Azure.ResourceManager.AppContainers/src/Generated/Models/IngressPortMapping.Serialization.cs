// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class IngressPortMapping : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("external"u8);
            writer.WriteBooleanValue(External);
            writer.WritePropertyName("targetPort"u8);
            writer.WriteNumberValue(TargetPort);
            if (Optional.IsDefined(ExposedPort))
            {
                writer.WritePropertyName("exposedPort"u8);
                writer.WriteNumberValue(ExposedPort.Value);
            }
            writer.WriteEndObject();
        }

        internal static IngressPortMapping DeserializeIngressPortMapping(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool external = default;
            int targetPort = default;
            Optional<int> exposedPort = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("external"u8))
                {
                    external = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("targetPort"u8))
                {
                    targetPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("exposedPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exposedPort = property.Value.GetInt32();
                    continue;
                }
            }
            return new IngressPortMapping(external, targetPort, Optional.ToNullable(exposedPort));
        }
    }
}
