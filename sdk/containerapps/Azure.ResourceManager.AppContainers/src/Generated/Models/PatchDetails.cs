// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> The detailed info of patch operation performing when applying a patch. </summary>
    public partial class PatchDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PatchDetails"/>. </summary>
        /// <param name="targetContainerName"> The name of the target container for the patch. </param>
        /// <param name="targetImage"> The name of the target image for the patch. </param>
        /// <param name="lastDetectionOn"> The UTC timestamp that describes the latest detection was done. </param>
        /// <param name="detectionStatus"> The status of the patch detection. </param>
        internal PatchDetails(string targetContainerName, string targetImage, DateTimeOffset lastDetectionOn, DetectionStatus detectionStatus)
        {
            TargetContainerName = targetContainerName;
            TargetImage = targetImage;
            LastDetectionOn = lastDetectionOn;
            DetectionStatus = detectionStatus;
        }

        /// <summary> Initializes a new instance of <see cref="PatchDetails"/>. </summary>
        /// <param name="targetContainerName"> The name of the target container for the patch. </param>
        /// <param name="targetImage"> The name of the target image for the patch. </param>
        /// <param name="lastDetectionOn"> The UTC timestamp that describes the latest detection was done. </param>
        /// <param name="detectionStatus"> The status of the patch detection. </param>
        /// <param name="newImageName"> The name of the new image created by the patch. </param>
        /// <param name="newLayer"> New layer update details in the target image. </param>
        /// <param name="oldLayer"> The old layer details in the target image. </param>
        /// <param name="patchType"> The type for the patch. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PatchDetails(string targetContainerName, string targetImage, DateTimeOffset lastDetectionOn, DetectionStatus detectionStatus, string newImageName, PatchDetailsNewLayer newLayer, PatchDetailsOldLayer oldLayer, PatchType? patchType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TargetContainerName = targetContainerName;
            TargetImage = targetImage;
            LastDetectionOn = lastDetectionOn;
            DetectionStatus = detectionStatus;
            NewImageName = newImageName;
            NewLayer = newLayer;
            OldLayer = oldLayer;
            PatchType = patchType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PatchDetails"/> for deserialization. </summary>
        internal PatchDetails()
        {
        }

        /// <summary> The name of the target container for the patch. </summary>
        [WirePath("targetContainerName")]
        public string TargetContainerName { get; }
        /// <summary> The name of the target image for the patch. </summary>
        [WirePath("targetImage")]
        public string TargetImage { get; }
        /// <summary> The UTC timestamp that describes the latest detection was done. </summary>
        [WirePath("lastDetectionTime")]
        public DateTimeOffset LastDetectionOn { get; }
        /// <summary> The status of the patch detection. </summary>
        [WirePath("detectionStatus")]
        public DetectionStatus DetectionStatus { get; }
        /// <summary> The name of the new image created by the patch. </summary>
        [WirePath("newImageName")]
        public string NewImageName { get; }
        /// <summary> New layer update details in the target image. </summary>
        [WirePath("newLayer")]
        public PatchDetailsNewLayer NewLayer { get; }
        /// <summary> The old layer details in the target image. </summary>
        [WirePath("oldLayer")]
        public PatchDetailsOldLayer OldLayer { get; }
        /// <summary> The type for the patch. </summary>
        [WirePath("patchType")]
        public PatchType? PatchType { get; }
    }
}
