// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class DaprProvider : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Enabled))
            {
                writer.WritePropertyName("enabled");
                writer.WriteBooleanValue(Enabled.Value);
            }
            if (Optional.IsDefined(AppId))
            {
                writer.WritePropertyName("appId");
                writer.WriteStringValue(AppId);
            }
            if (Optional.IsDefined(AppProtocol))
            {
                writer.WritePropertyName("appProtocol");
                writer.WriteStringValue(AppProtocol.Value.ToString());
            }
            if (Optional.IsDefined(AppPort))
            {
                writer.WritePropertyName("appPort");
                writer.WriteNumberValue(AppPort.Value);
            }
            if (Optional.IsDefined(HttpReadBufferSize))
            {
                writer.WritePropertyName("httpReadBufferSize");
                writer.WriteNumberValue(HttpReadBufferSize.Value);
            }
            if (Optional.IsDefined(HttpMaxRequestSize))
            {
                writer.WritePropertyName("httpMaxRequestSize");
                writer.WriteNumberValue(HttpMaxRequestSize.Value);
            }
            if (Optional.IsDefined(LogLevel))
            {
                writer.WritePropertyName("logLevel");
                writer.WriteStringValue(LogLevel.Value.ToString());
            }
            if (Optional.IsDefined(EnableApiLogging))
            {
                writer.WritePropertyName("enableApiLogging");
                writer.WriteBooleanValue(EnableApiLogging.Value);
            }
            writer.WriteEndObject();
        }

        internal static DaprProvider DeserializeDaprProvider(JsonElement element)
        {
            Optional<bool> enabled = default;
            Optional<string> appId = default;
            Optional<AppProtocol> appProtocol = default;
            Optional<int> appPort = default;
            Optional<int> httpReadBufferSize = default;
            Optional<int> httpMaxRequestSize = default;
            Optional<LogLevel> logLevel = default;
            Optional<bool> enableApiLogging = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("appId"))
                {
                    appId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appProtocol"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    appProtocol = new AppProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("appPort"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    appPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("httpReadBufferSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    httpReadBufferSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("httpMaxRequestSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    httpMaxRequestSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("logLevel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    logLevel = new LogLevel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enableApiLogging"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enableApiLogging = property.Value.GetBoolean();
                    continue;
                }
            }
            return new DaprProvider(Optional.ToNullable(enabled), appId.Value, Optional.ToNullable(appProtocol), Optional.ToNullable(appPort), Optional.ToNullable(httpReadBufferSize), Optional.ToNullable(httpMaxRequestSize), Optional.ToNullable(logLevel), Optional.ToNullable(enableApiLogging));
        }
    }
}
