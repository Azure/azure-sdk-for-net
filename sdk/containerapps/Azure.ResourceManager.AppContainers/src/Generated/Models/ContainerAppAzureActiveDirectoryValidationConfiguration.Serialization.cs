// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class ContainerAppAzureActiveDirectoryValidationConfiguration : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(JwtClaimChecks))
            {
                writer.WritePropertyName("jwtClaimChecks"u8);
                writer.WriteObjectValue(JwtClaimChecks);
            }
            if (Core.Optional.IsCollectionDefined(AllowedAudiences))
            {
                writer.WritePropertyName("allowedAudiences"u8);
                writer.WriteStartArray();
                foreach (var item in AllowedAudiences)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(DefaultAuthorizationPolicy))
            {
                writer.WritePropertyName("defaultAuthorizationPolicy"u8);
                writer.WriteObjectValue(DefaultAuthorizationPolicy);
            }
            writer.WriteEndObject();
        }

        internal static ContainerAppAzureActiveDirectoryValidationConfiguration DeserializeContainerAppAzureActiveDirectoryValidationConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ContainerAppJwtClaimChecks> jwtClaimChecks = default;
            Core.Optional<IList<string>> allowedAudiences = default;
            Core.Optional<ContainerAppDefaultAuthorizationPolicy> defaultAuthorizationPolicy = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("jwtClaimChecks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jwtClaimChecks = ContainerAppJwtClaimChecks.DeserializeContainerAppJwtClaimChecks(property.Value);
                    continue;
                }
                if (property.NameEquals("allowedAudiences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    allowedAudiences = array;
                    continue;
                }
                if (property.NameEquals("defaultAuthorizationPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultAuthorizationPolicy = ContainerAppDefaultAuthorizationPolicy.DeserializeContainerAppDefaultAuthorizationPolicy(property.Value);
                    continue;
                }
            }
            return new ContainerAppAzureActiveDirectoryValidationConfiguration(jwtClaimChecks.Value, Core.Optional.ToList(allowedAudiences), defaultAuthorizationPolicy.Value);
        }
    }
}
