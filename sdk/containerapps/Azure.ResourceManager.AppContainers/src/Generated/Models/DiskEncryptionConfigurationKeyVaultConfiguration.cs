// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> The Key Vault that contains your key to use for disk encryption. The Key Vault must be in the same region as the Managed Environment. </summary>
    public partial class DiskEncryptionConfigurationKeyVaultConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DiskEncryptionConfigurationKeyVaultConfiguration"/>. </summary>
        public DiskEncryptionConfigurationKeyVaultConfiguration()
        {
        }

        /// <summary> Initializes a new instance of <see cref="DiskEncryptionConfigurationKeyVaultConfiguration"/>. </summary>
        /// <param name="keyUri"> Key URL pointing to a key in KeyVault. Version segment of the Url is required. </param>
        /// <param name="auth"> Configuration properties for the authentication to the Key Vault. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DiskEncryptionConfigurationKeyVaultConfiguration(Uri keyUri, DiskEncryptionConfigurationKeyVaultConfigurationAuth auth, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            KeyUri = keyUri;
            Auth = auth;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Key URL pointing to a key in KeyVault. Version segment of the Url is required. </summary>
        [WirePath("keyUrl")]
        public Uri KeyUri { get; set; }
        /// <summary> Configuration properties for the authentication to the Key Vault. </summary>
        internal DiskEncryptionConfigurationKeyVaultConfigurationAuth Auth { get; set; }
        /// <summary> Resource ID of a user-assigned managed identity to authenticate to the Key Vault. The identity must be assigned to the managed environment, in the same tenant as the Key Vault, and it must have the following key permissions on the Key Vault: wrapkey, unwrapkey, get. </summary>
        [WirePath("auth.identity")]
        public ResourceIdentifier AuthIdentity
        {
            get => Auth is null ? default : Auth.Identity;
            set
            {
                if (Auth is null)
                    Auth = new DiskEncryptionConfigurationKeyVaultConfigurationAuth();
                Auth.Identity = value;
            }
        }
    }
}
