// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> Type of the .NET Component. </summary>
    public readonly partial struct DotNetComponentType : IEquatable<DotNetComponentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DotNetComponentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DotNetComponentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AspireDashboardValue = "AspireDashboard";

        /// <summary> AspireDashboard. </summary>
        public static DotNetComponentType AspireDashboard { get; } = new DotNetComponentType(AspireDashboardValue);
        /// <summary> Determines if two <see cref="DotNetComponentType"/> values are the same. </summary>
        public static bool operator ==(DotNetComponentType left, DotNetComponentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DotNetComponentType"/> values are not the same. </summary>
        public static bool operator !=(DotNetComponentType left, DotNetComponentType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DotNetComponentType"/>. </summary>
        public static implicit operator DotNetComponentType(string value) => new DotNetComponentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DotNetComponentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DotNetComponentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
