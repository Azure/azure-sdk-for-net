// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class PatchDetails : IUtf8JsonSerializable, IJsonModel<PatchDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PatchDetails>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<PatchDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PatchDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PatchDetails)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("targetContainerName"u8);
                writer.WriteStringValue(TargetContainerName);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("targetImage"u8);
                writer.WriteStringValue(TargetImage);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("lastDetectionTime"u8);
                writer.WriteStringValue(LastDetectionOn, "O");
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("detectionStatus"u8);
                writer.WriteStringValue(DetectionStatus.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(NewImageName))
            {
                writer.WritePropertyName("newImageName"u8);
                writer.WriteStringValue(NewImageName);
            }
            if (options.Format != "W" && Optional.IsDefined(NewLayer))
            {
                writer.WritePropertyName("newLayer"u8);
                writer.WriteObjectValue(NewLayer, options);
            }
            if (options.Format != "W" && Optional.IsDefined(OldLayer))
            {
                writer.WritePropertyName("oldLayer"u8);
                writer.WriteObjectValue(OldLayer, options);
            }
            if (options.Format != "W" && Optional.IsDefined(PatchType))
            {
                writer.WritePropertyName("patchType"u8);
                writer.WriteStringValue(PatchType.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        PatchDetails IJsonModel<PatchDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PatchDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PatchDetails)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePatchDetails(document.RootElement, options);
        }

        internal static PatchDetails DeserializePatchDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string targetContainerName = default;
            string targetImage = default;
            DateTimeOffset lastDetectionTime = default;
            DetectionStatus detectionStatus = default;
            string newImageName = default;
            PatchDetailsNewLayer newLayer = default;
            PatchDetailsOldLayer oldLayer = default;
            PatchType? patchType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetContainerName"u8))
                {
                    targetContainerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetImage"u8))
                {
                    targetImage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastDetectionTime"u8))
                {
                    lastDetectionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("detectionStatus"u8))
                {
                    detectionStatus = new DetectionStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("newImageName"u8))
                {
                    newImageName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("newLayer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    newLayer = PatchDetailsNewLayer.DeserializePatchDetailsNewLayer(property.Value, options);
                    continue;
                }
                if (property.NameEquals("oldLayer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    oldLayer = PatchDetailsOldLayer.DeserializePatchDetailsOldLayer(property.Value, options);
                    continue;
                }
                if (property.NameEquals("patchType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    patchType = new PatchType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new PatchDetails(
                targetContainerName,
                targetImage,
                lastDetectionTime,
                detectionStatus,
                newImageName,
                newLayer,
                oldLayer,
                patchType,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<PatchDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PatchDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(PatchDetails)} does not support writing '{options.Format}' format.");
            }
        }

        PatchDetails IPersistableModel<PatchDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PatchDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializePatchDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(PatchDetails)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<PatchDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
