// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class AvailableWorkloadProfileProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(BillingMeterCategory))
            {
                writer.WritePropertyName("billingMeterCategory");
                writer.WriteStringValue(BillingMeterCategory.Value.ToString());
            }
            if (Optional.IsDefined(Applicability))
            {
                writer.WritePropertyName("applicability");
                writer.WriteStringValue(Applicability.Value.ToString());
            }
            if (Optional.IsDefined(Cores))
            {
                writer.WritePropertyName("cores");
                writer.WriteNumberValue(Cores.Value);
            }
            if (Optional.IsDefined(MemoryGiB))
            {
                writer.WritePropertyName("memoryGiB");
                writer.WriteNumberValue(MemoryGiB.Value);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            writer.WriteEndObject();
        }

        internal static AvailableWorkloadProfileProperties DeserializeAvailableWorkloadProfileProperties(JsonElement element)
        {
            Optional<Category> billingMeterCategory = default;
            Optional<Applicability> applicability = default;
            Optional<int> cores = default;
            Optional<int> memoryGiB = default;
            Optional<string> displayName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("billingMeterCategory"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    billingMeterCategory = new Category(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("applicability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    applicability = new Applicability(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("cores"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cores = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("memoryGiB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    memoryGiB = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
            }
            return new AvailableWorkloadProfileProperties(Optional.ToNullable(billingMeterCategory), Optional.ToNullable(applicability), Optional.ToNullable(cores), Optional.ToNullable(memoryGiB), displayName.Value);
        }
    }
}
