// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> Denotes the type of probe. Can be Liveness or Startup, Readiness probe is not supported in sessions. Type must be unique for each probe within the context of a list of probes (SessionProbes). </summary>
    public readonly partial struct SessionProbeType : IEquatable<SessionProbeType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SessionProbeType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SessionProbeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LivenessValue = "Liveness";
        private const string StartupValue = "Startup";

        /// <summary> Liveness. </summary>
        public static SessionProbeType Liveness { get; } = new SessionProbeType(LivenessValue);
        /// <summary> Startup. </summary>
        public static SessionProbeType Startup { get; } = new SessionProbeType(StartupValue);
        /// <summary> Determines if two <see cref="SessionProbeType"/> values are the same. </summary>
        public static bool operator ==(SessionProbeType left, SessionProbeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SessionProbeType"/> values are not the same. </summary>
        public static bool operator !=(SessionProbeType left, SessionProbeType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SessionProbeType"/>. </summary>
        public static implicit operator SessionProbeType(string value) => new SessionProbeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SessionProbeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SessionProbeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
