// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class ContainerAppJobConfiguration : IUtf8JsonSerializable, IJsonModel<ContainerAppJobConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ContainerAppJobConfiguration>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ContainerAppJobConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerAppJobConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerAppJobConfiguration)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Secrets))
            {
                writer.WritePropertyName("secrets"u8);
                writer.WriteStartArray();
                foreach (var item in Secrets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("triggerType"u8);
            writer.WriteStringValue(TriggerType.ToString());
            writer.WritePropertyName("replicaTimeout"u8);
            writer.WriteNumberValue(ReplicaTimeout);
            if (Optional.IsDefined(ReplicaRetryLimit))
            {
                writer.WritePropertyName("replicaRetryLimit"u8);
                writer.WriteNumberValue(ReplicaRetryLimit.Value);
            }
            if (Optional.IsDefined(ManualTriggerConfig))
            {
                writer.WritePropertyName("manualTriggerConfig"u8);
                writer.WriteObjectValue(ManualTriggerConfig);
            }
            if (Optional.IsDefined(ScheduleTriggerConfig))
            {
                writer.WritePropertyName("scheduleTriggerConfig"u8);
                writer.WriteObjectValue(ScheduleTriggerConfig);
            }
            if (Optional.IsDefined(EventTriggerConfig))
            {
                writer.WritePropertyName("eventTriggerConfig"u8);
                writer.WriteObjectValue(EventTriggerConfig);
            }
            if (Optional.IsCollectionDefined(Registries))
            {
                writer.WritePropertyName("registries"u8);
                writer.WriteStartArray();
                foreach (var item in Registries)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ContainerAppJobConfiguration IJsonModel<ContainerAppJobConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerAppJobConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerAppJobConfiguration)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContainerAppJobConfiguration(document.RootElement, options);
        }

        internal static ContainerAppJobConfiguration DeserializeContainerAppJobConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<ContainerAppWritableSecret>> secrets = default;
            ContainerAppJobTriggerType triggerType = default;
            int replicaTimeout = default;
            Optional<int> replicaRetryLimit = default;
            Optional<JobConfigurationManualTriggerConfig> manualTriggerConfig = default;
            Optional<JobConfigurationScheduleTriggerConfig> scheduleTriggerConfig = default;
            Optional<EventTriggerConfiguration> eventTriggerConfig = default;
            Optional<IList<ContainerAppRegistryCredentials>> registries = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("secrets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ContainerAppWritableSecret> array = new List<ContainerAppWritableSecret>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContainerAppWritableSecret.DeserializeContainerAppWritableSecret(item));
                    }
                    secrets = array;
                    continue;
                }
                if (property.NameEquals("triggerType"u8))
                {
                    triggerType = new ContainerAppJobTriggerType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("replicaTimeout"u8))
                {
                    replicaTimeout = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("replicaRetryLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    replicaRetryLimit = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("manualTriggerConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    manualTriggerConfig = JobConfigurationManualTriggerConfig.DeserializeJobConfigurationManualTriggerConfig(property.Value);
                    continue;
                }
                if (property.NameEquals("scheduleTriggerConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scheduleTriggerConfig = JobConfigurationScheduleTriggerConfig.DeserializeJobConfigurationScheduleTriggerConfig(property.Value);
                    continue;
                }
                if (property.NameEquals("eventTriggerConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    eventTriggerConfig = EventTriggerConfiguration.DeserializeEventTriggerConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("registries"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ContainerAppRegistryCredentials> array = new List<ContainerAppRegistryCredentials>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContainerAppRegistryCredentials.DeserializeContainerAppRegistryCredentials(item));
                    }
                    registries = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ContainerAppJobConfiguration(Optional.ToList(secrets), triggerType, replicaTimeout, Optional.ToNullable(replicaRetryLimit), manualTriggerConfig.Value, scheduleTriggerConfig.Value, eventTriggerConfig.Value, Optional.ToList(registries), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsCollectionDefined(Secrets))
            {
                if (Secrets.Any())
                {
                    builder.Append("  secrets:");
                    builder.AppendLine(" [");
                    foreach (var item in Secrets)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(TriggerType))
            {
                builder.Append("  triggerType:");
                builder.AppendLine($" '{TriggerType.ToString()}'");
            }

            if (Optional.IsDefined(ReplicaTimeout))
            {
                builder.Append("  replicaTimeout:");
                builder.AppendLine($" {ReplicaTimeout}");
            }

            if (Optional.IsDefined(ReplicaRetryLimit))
            {
                builder.Append("  replicaRetryLimit:");
                builder.AppendLine($" {ReplicaRetryLimit.Value}");
            }

            if (Optional.IsDefined(ManualTriggerConfig))
            {
                builder.Append("  manualTriggerConfig:");
                AppendChildObject(builder, ManualTriggerConfig, options, 2, false);
            }

            if (Optional.IsDefined(ScheduleTriggerConfig))
            {
                builder.Append("  scheduleTriggerConfig:");
                AppendChildObject(builder, ScheduleTriggerConfig, options, 2, false);
            }

            if (Optional.IsDefined(EventTriggerConfig))
            {
                builder.Append("  eventTriggerConfig:");
                AppendChildObject(builder, EventTriggerConfig, options, 2, false);
            }

            if (Optional.IsCollectionDefined(Registries))
            {
                if (Registries.Any())
                {
                    builder.Append("  registries:");
                    builder.AppendLine(" [");
                    foreach (var item in Registries)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<ContainerAppJobConfiguration>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerAppJobConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ContainerAppJobConfiguration)} does not support '{options.Format}' format.");
            }
        }

        ContainerAppJobConfiguration IPersistableModel<ContainerAppJobConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerAppJobConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeContainerAppJobConfiguration(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(ContainerAppJobConfiguration)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ContainerAppJobConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
