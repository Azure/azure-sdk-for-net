// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class ContainerAppGitHubActionConfiguration : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(RegistryInfo))
            {
                writer.WritePropertyName("registryInfo"u8);
                writer.WriteObjectValue(RegistryInfo);
            }
            if (Core.Optional.IsDefined(AzureCredentials))
            {
                writer.WritePropertyName("azureCredentials"u8);
                writer.WriteObjectValue(AzureCredentials);
            }
            if (Core.Optional.IsDefined(ContextPath))
            {
                writer.WritePropertyName("contextPath"u8);
                writer.WriteStringValue(ContextPath);
            }
            if (Core.Optional.IsDefined(GitHubPersonalAccessToken))
            {
                writer.WritePropertyName("githubPersonalAccessToken"u8);
                writer.WriteStringValue(GitHubPersonalAccessToken);
            }
            if (Core.Optional.IsDefined(Image))
            {
                writer.WritePropertyName("image"u8);
                writer.WriteStringValue(Image);
            }
            if (Core.Optional.IsDefined(PublishType))
            {
                writer.WritePropertyName("publishType"u8);
                writer.WriteStringValue(PublishType);
            }
            if (Core.Optional.IsDefined(OS))
            {
                writer.WritePropertyName("os"u8);
                writer.WriteStringValue(OS);
            }
            if (Core.Optional.IsDefined(RuntimeStack))
            {
                writer.WritePropertyName("runtimeStack"u8);
                writer.WriteStringValue(RuntimeStack);
            }
            if (Core.Optional.IsDefined(RuntimeVersion))
            {
                writer.WritePropertyName("runtimeVersion"u8);
                writer.WriteStringValue(RuntimeVersion);
            }
            writer.WriteEndObject();
        }

        internal static ContainerAppGitHubActionConfiguration DeserializeContainerAppGitHubActionConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ContainerAppRegistryInfo> registryInfo = default;
            Core.Optional<ContainerAppCredentials> azureCredentials = default;
            Core.Optional<string> contextPath = default;
            Core.Optional<string> gitHubPersonalAccessToken = default;
            Core.Optional<string> image = default;
            Core.Optional<string> publishType = default;
            Core.Optional<string> os = default;
            Core.Optional<string> runtimeStack = default;
            Core.Optional<string> runtimeVersion = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("registryInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    registryInfo = ContainerAppRegistryInfo.DeserializeContainerAppRegistryInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("azureCredentials"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureCredentials = ContainerAppCredentials.DeserializeContainerAppCredentials(property.Value);
                    continue;
                }
                if (property.NameEquals("contextPath"u8))
                {
                    contextPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("githubPersonalAccessToken"u8))
                {
                    gitHubPersonalAccessToken = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("image"u8))
                {
                    image = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publishType"u8))
                {
                    publishType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("os"u8))
                {
                    os = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runtimeStack"u8))
                {
                    runtimeStack = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runtimeVersion"u8))
                {
                    runtimeVersion = property.Value.GetString();
                    continue;
                }
            }
            return new ContainerAppGitHubActionConfiguration(registryInfo.Value, azureCredentials.Value, contextPath.Value, gitHubPersonalAccessToken.Value, image.Value, publishType.Value, os.Value, runtimeStack.Value, runtimeVersion.Value);
        }
    }
}
