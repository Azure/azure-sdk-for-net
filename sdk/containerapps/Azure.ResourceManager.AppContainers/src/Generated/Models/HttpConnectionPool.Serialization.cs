// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class HttpConnectionPool : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Http1MaxPendingRequests))
            {
                writer.WritePropertyName("http1MaxPendingRequests"u8);
                writer.WriteNumberValue(Http1MaxPendingRequests.Value);
            }
            if (Optional.IsDefined(Http2MaxRequests))
            {
                writer.WritePropertyName("http2MaxRequests"u8);
                writer.WriteNumberValue(Http2MaxRequests.Value);
            }
            writer.WriteEndObject();
        }

        internal static HttpConnectionPool DeserializeHttpConnectionPool(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> http1MaxPendingRequests = default;
            Optional<int> http2MaxRequests = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("http1MaxPendingRequests"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    http1MaxPendingRequests = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("http2MaxRequests"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    http2MaxRequests = property.Value.GetInt32();
                    continue;
                }
            }
            return new HttpConnectionPool(Optional.ToNullable(http1MaxPendingRequests), Optional.ToNullable(http2MaxRequests));
        }
    }
}
