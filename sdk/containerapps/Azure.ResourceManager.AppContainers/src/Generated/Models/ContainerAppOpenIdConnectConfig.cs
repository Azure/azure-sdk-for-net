// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary>
    /// The configuration settings of the endpoints used for the custom Open ID Connect provider.
    /// Serialized Name: OpenIdConnectConfig
    /// </summary>
    public partial class ContainerAppOpenIdConnectConfig
    {
        /// <summary> Initializes a new instance of ContainerAppOpenIdConnectConfig. </summary>
        public ContainerAppOpenIdConnectConfig()
        {
        }

        /// <summary> Initializes a new instance of ContainerAppOpenIdConnectConfig. </summary>
        /// <param name="authorizationEndpoint">
        /// The endpoint to be used to make an authorization request.
        /// Serialized Name: OpenIdConnectConfig.authorizationEndpoint
        /// </param>
        /// <param name="tokenEndpoint">
        /// The endpoint to be used to request a token.
        /// Serialized Name: OpenIdConnectConfig.tokenEndpoint
        /// </param>
        /// <param name="issuer">
        /// The endpoint that issues the token.
        /// Serialized Name: OpenIdConnectConfig.issuer
        /// </param>
        /// <param name="certificationUri">
        /// The endpoint that provides the keys necessary to validate the token.
        /// Serialized Name: OpenIdConnectConfig.certificationUri
        /// </param>
        /// <param name="wellKnownOpenIdConfiguration">
        /// The endpoint that contains all the configuration endpoints for the provider.
        /// Serialized Name: OpenIdConnectConfig.wellKnownOpenIdConfiguration
        /// </param>
        internal ContainerAppOpenIdConnectConfig(string authorizationEndpoint, string tokenEndpoint, string issuer, Uri certificationUri, string wellKnownOpenIdConfiguration)
        {
            AuthorizationEndpoint = authorizationEndpoint;
            TokenEndpoint = tokenEndpoint;
            Issuer = issuer;
            CertificationUri = certificationUri;
            WellKnownOpenIdConfiguration = wellKnownOpenIdConfiguration;
        }

        /// <summary>
        /// The endpoint to be used to make an authorization request.
        /// Serialized Name: OpenIdConnectConfig.authorizationEndpoint
        /// </summary>
        public string AuthorizationEndpoint { get; set; }
        /// <summary>
        /// The endpoint to be used to request a token.
        /// Serialized Name: OpenIdConnectConfig.tokenEndpoint
        /// </summary>
        public string TokenEndpoint { get; set; }
        /// <summary>
        /// The endpoint that issues the token.
        /// Serialized Name: OpenIdConnectConfig.issuer
        /// </summary>
        public string Issuer { get; set; }
        /// <summary>
        /// The endpoint that provides the keys necessary to validate the token.
        /// Serialized Name: OpenIdConnectConfig.certificationUri
        /// </summary>
        public Uri CertificationUri { get; set; }
        /// <summary>
        /// The endpoint that contains all the configuration endpoints for the provider.
        /// Serialized Name: OpenIdConnectConfig.wellKnownOpenIdConfiguration
        /// </summary>
        public string WellKnownOpenIdConfiguration { get; set; }
    }
}
