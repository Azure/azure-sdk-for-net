// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class ContainerAppReplicaContainer : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(ContainerId))
            {
                writer.WritePropertyName("containerId");
                writer.WriteStringValue(ContainerId);
            }
            if (Optional.IsDefined(IsReady))
            {
                writer.WritePropertyName("ready");
                writer.WriteBooleanValue(IsReady.Value);
            }
            if (Optional.IsDefined(IsStarted))
            {
                writer.WritePropertyName("started");
                writer.WriteBooleanValue(IsStarted.Value);
            }
            if (Optional.IsDefined(RestartCount))
            {
                writer.WritePropertyName("restartCount");
                writer.WriteNumberValue(RestartCount.Value);
            }
            writer.WriteEndObject();
        }

        internal static ContainerAppReplicaContainer DeserializeContainerAppReplicaContainer(JsonElement element)
        {
            Optional<string> name = default;
            Optional<string> containerId = default;
            Optional<bool> ready = default;
            Optional<bool> started = default;
            Optional<int> restartCount = default;
            Optional<string> logStreamEndpoint = default;
            Optional<string> execEndpoint = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("containerId"))
                {
                    containerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ready"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ready = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("started"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    started = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("restartCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    restartCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("logStreamEndpoint"))
                {
                    logStreamEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("execEndpoint"))
                {
                    execEndpoint = property.Value.GetString();
                    continue;
                }
            }
            return new ContainerAppReplicaContainer(name.Value, containerId.Value, Optional.ToNullable(ready), Optional.ToNullable(started), Optional.ToNullable(restartCount), logStreamEndpoint.Value, execEndpoint.Value);
        }
    }
}
