// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> Conditions required to match a header. </summary>
    public partial class HeaderMatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="HeaderMatch"/>. </summary>
        public HeaderMatch()
        {
        }

        /// <summary> Initializes a new instance of <see cref="HeaderMatch"/>. </summary>
        /// <param name="header"> Name of the header. </param>
        /// <param name="exactMatch"> Exact value of the header. </param>
        /// <param name="prefixMatch"> Prefix value of the header. </param>
        /// <param name="suffixMatch"> Suffix value of the header. </param>
        /// <param name="regexMatch"> Regex value of the header. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal HeaderMatch(string header, string exactMatch, string prefixMatch, string suffixMatch, string regexMatch, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Header = header;
            ExactMatch = exactMatch;
            PrefixMatch = prefixMatch;
            SuffixMatch = suffixMatch;
            RegexMatch = regexMatch;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Name of the header. </summary>
        [WirePath("header")]
        public string Header { get; set; }
        /// <summary> Exact value of the header. </summary>
        [WirePath("match.exactMatch")]
        public string ExactMatch { get; set; }
        /// <summary> Prefix value of the header. </summary>
        [WirePath("match.prefixMatch")]
        public string PrefixMatch { get; set; }
        /// <summary> Suffix value of the header. </summary>
        [WirePath("match.suffixMatch")]
        public string SuffixMatch { get; set; }
        /// <summary> Regex value of the header. </summary>
        [WirePath("match.regexMatch")]
        public string RegexMatch { get; set; }
    }
}
