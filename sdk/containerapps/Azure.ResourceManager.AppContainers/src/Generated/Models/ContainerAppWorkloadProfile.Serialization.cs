// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class ContainerAppWorkloadProfile : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("workloadProfileType"u8);
            writer.WriteStringValue(WorkloadProfileType);
            if (Core.Optional.IsDefined(MinimumNodeCount))
            {
                writer.WritePropertyName("minimumCount"u8);
                writer.WriteNumberValue(MinimumNodeCount.Value);
            }
            if (Core.Optional.IsDefined(MaximumNodeCount))
            {
                writer.WritePropertyName("maximumCount"u8);
                writer.WriteNumberValue(MaximumNodeCount.Value);
            }
            writer.WriteEndObject();
        }

        internal static ContainerAppWorkloadProfile DeserializeContainerAppWorkloadProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string workloadProfileType = default;
            Core.Optional<int> minimumCount = default;
            Core.Optional<int> maximumCount = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("workloadProfileType"u8))
                {
                    workloadProfileType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minimumCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minimumCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maximumCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maximumCount = property.Value.GetInt32();
                    continue;
                }
            }
            return new ContainerAppWorkloadProfile(name, workloadProfileType, Core.Optional.ToNullable(minimumCount), Core.Optional.ToNullable(maximumCount));
        }
    }
}
