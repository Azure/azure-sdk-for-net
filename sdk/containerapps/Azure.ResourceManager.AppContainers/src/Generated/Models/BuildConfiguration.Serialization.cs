// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class BuildConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(BaseOS))
            {
                writer.WritePropertyName("baseOs"u8);
                writer.WriteStringValue(BaseOS);
            }
            if (Optional.IsDefined(Platform))
            {
                writer.WritePropertyName("platform"u8);
                writer.WriteStringValue(Platform);
            }
            if (Optional.IsDefined(PlatformVersion))
            {
                writer.WritePropertyName("platformVersion"u8);
                writer.WriteStringValue(PlatformVersion);
            }
            if (Optional.IsCollectionDefined(EnvironmentVariables))
            {
                writer.WritePropertyName("environmentVariables"u8);
                writer.WriteStartArray();
                foreach (var item in EnvironmentVariables)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PreBuildSteps))
            {
                writer.WritePropertyName("preBuildSteps"u8);
                writer.WriteStartArray();
                foreach (var item in PreBuildSteps)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static BuildConfiguration DeserializeBuildConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> baseOS = default;
            Optional<string> platform = default;
            Optional<string> platformVersion = default;
            Optional<IList<EnvironmentVariable>> environmentVariables = default;
            Optional<IList<PreBuildStep>> preBuildSteps = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("baseOs"u8))
                {
                    baseOS = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("platform"u8))
                {
                    platform = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("platformVersion"u8))
                {
                    platformVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("environmentVariables"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EnvironmentVariable> array = new List<EnvironmentVariable>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EnvironmentVariable.DeserializeEnvironmentVariable(item));
                    }
                    environmentVariables = array;
                    continue;
                }
                if (property.NameEquals("preBuildSteps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PreBuildStep> array = new List<PreBuildStep>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PreBuildStep.DeserializePreBuildStep(item));
                    }
                    preBuildSteps = array;
                    continue;
                }
            }
            return new BuildConfiguration(baseOS.Value, platform.Value, platformVersion.Value, Optional.ToList(environmentVariables), Optional.ToList(preBuildSteps));
        }
    }
}
