// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class ContainerAppVolume : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Core.Optional.IsDefined(StorageType))
            {
                writer.WritePropertyName("storageType"u8);
                writer.WriteStringValue(StorageType.Value.ToString());
            }
            if (Core.Optional.IsDefined(StorageName))
            {
                writer.WritePropertyName("storageName"u8);
                writer.WriteStringValue(StorageName);
            }
            if (Core.Optional.IsCollectionDefined(Secrets))
            {
                writer.WritePropertyName("secrets"u8);
                writer.WriteStartArray();
                foreach (var item in Secrets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(MountOptions))
            {
                writer.WritePropertyName("mountOptions"u8);
                writer.WriteStringValue(MountOptions);
            }
            writer.WriteEndObject();
        }

        internal static ContainerAppVolume DeserializeContainerAppVolume(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> name = default;
            Core.Optional<ContainerAppStorageType> storageType = default;
            Core.Optional<string> storageName = default;
            Core.Optional<IList<SecretVolumeItem>> secrets = default;
            Core.Optional<string> mountOptions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageType = new ContainerAppStorageType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageName"u8))
                {
                    storageName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("secrets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SecretVolumeItem> array = new List<SecretVolumeItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SecretVolumeItem.DeserializeSecretVolumeItem(item));
                    }
                    secrets = array;
                    continue;
                }
                if (property.NameEquals("mountOptions"u8))
                {
                    mountOptions = property.Value.GetString();
                    continue;
                }
            }
            return new ContainerAppVolume(name.Value, Core.Optional.ToNullable(storageType), storageName.Value, Core.Optional.ToList(secrets), mountOptions.Value);
        }
    }
}
