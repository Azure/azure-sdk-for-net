// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> Http Route Config properties. </summary>
    public partial class HttpRouteConfigProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="HttpRouteConfigProperties"/>. </summary>
        public HttpRouteConfigProperties()
        {
            ProvisioningErrors = new ChangeTrackingList<HttpRouteProvisioningErrors>();
            CustomDomains = new ChangeTrackingList<ContainerAppCustomDomain>();
            Rules = new ChangeTrackingList<HttpRouteRule>();
        }

        /// <summary> Initializes a new instance of <see cref="HttpRouteConfigProperties"/>. </summary>
        /// <param name="provisioningState"> The provisioning state of the Http Route Config in cluster. </param>
        /// <param name="provisioningErrors"> List of errors when trying to reconcile http routes. </param>
        /// <param name="fqdn"> FQDN of the route resource. </param>
        /// <param name="customDomains"> Custom domain bindings for http Routes' hostnames. </param>
        /// <param name="rules"> Routing Rules for http route resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal HttpRouteConfigProperties(HttpRouteProvisioningState? provisioningState, IReadOnlyList<HttpRouteProvisioningErrors> provisioningErrors, string fqdn, IList<ContainerAppCustomDomain> customDomains, IList<HttpRouteRule> rules, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            ProvisioningErrors = provisioningErrors;
            Fqdn = fqdn;
            CustomDomains = customDomains;
            Rules = rules;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The provisioning state of the Http Route Config in cluster. </summary>
        [WirePath("provisioningState")]
        public HttpRouteProvisioningState? ProvisioningState { get; }
        /// <summary> List of errors when trying to reconcile http routes. </summary>
        [WirePath("provisioningErrors")]
        public IReadOnlyList<HttpRouteProvisioningErrors> ProvisioningErrors { get; }
        /// <summary> FQDN of the route resource. </summary>
        [WirePath("fqdn")]
        public string Fqdn { get; }
        /// <summary> Custom domain bindings for http Routes' hostnames. </summary>
        [WirePath("customDomains")]
        public IList<ContainerAppCustomDomain> CustomDomains { get; }
        /// <summary> Routing Rules for http route resource. </summary>
        [WirePath("rules")]
        public IList<HttpRouteRule> Rules { get; }
    }
}
