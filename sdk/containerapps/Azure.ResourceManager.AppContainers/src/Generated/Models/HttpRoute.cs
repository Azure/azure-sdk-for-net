// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> Http Routes configuration, including paths to match on and whether or not rewrites are to be done. </summary>
    public partial class HttpRoute
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="HttpRoute"/>. </summary>
        public HttpRoute()
        {
        }

        /// <summary> Initializes a new instance of <see cref="HttpRoute"/>. </summary>
        /// <param name="match"> Conditions route will match on. </param>
        /// <param name="action"> Once route is matched, what is the desired action. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal HttpRoute(HttpRouteMatch match, HttpRouteAction action, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Match = match;
            Action = action;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Conditions route will match on. </summary>
        [WirePath("match")]
        public HttpRouteMatch Match { get; set; }
        /// <summary> Once route is matched, what is the desired action. </summary>
        internal HttpRouteAction Action { get; set; }
        /// <summary> Rewrite prefix, default is no rewrites. </summary>
        [WirePath("action.prefixRewrite")]
        public string ActionPrefixRewrite
        {
            get => Action is null ? default : Action.PrefixRewrite;
            set
            {
                if (Action is null)
                    Action = new HttpRouteAction();
                Action.PrefixRewrite = value;
            }
        }
    }
}
