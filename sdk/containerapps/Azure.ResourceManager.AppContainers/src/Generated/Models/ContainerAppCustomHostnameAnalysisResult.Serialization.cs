// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class ContainerAppCustomHostnameAnalysisResult : IUtf8JsonSerializable, IJsonModel<ContainerAppCustomHostnameAnalysisResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ContainerAppCustomHostnameAnalysisResult>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<ContainerAppCustomHostnameAnalysisResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<ContainerAppCustomHostnameAnalysisResult>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<ContainerAppCustomHostnameAnalysisResult>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(HostName))
                {
                    writer.WritePropertyName("hostName"u8);
                    writer.WriteStringValue(HostName);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(IsHostnameAlreadyVerified))
                {
                    writer.WritePropertyName("isHostnameAlreadyVerified"u8);
                    writer.WriteBooleanValue(IsHostnameAlreadyVerified.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(CustomDomainVerificationTest))
                {
                    writer.WritePropertyName("customDomainVerificationTest"u8);
                    writer.WriteStringValue(CustomDomainVerificationTest.Value.ToSerialString());
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(CustomDomainVerificationFailureInfo))
                {
                    writer.WritePropertyName("customDomainVerificationFailureInfo"u8);
                    writer.WriteObjectValue(CustomDomainVerificationFailureInfo);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(HasConflictOnManagedEnvironment))
                {
                    writer.WritePropertyName("hasConflictOnManagedEnvironment"u8);
                    writer.WriteBooleanValue(HasConflictOnManagedEnvironment.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ConflictWithEnvironmentCustomDomain))
                {
                    writer.WritePropertyName("conflictWithEnvironmentCustomDomain"u8);
                    writer.WriteBooleanValue(ConflictWithEnvironmentCustomDomain.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ConflictingContainerAppResourceId))
                {
                    writer.WritePropertyName("conflictingContainerAppResourceId"u8);
                    writer.WriteStringValue(ConflictingContainerAppResourceId);
                }
            }
            if (Optional.IsCollectionDefined(CNameRecords))
            {
                writer.WritePropertyName("cNameRecords"u8);
                writer.WriteStartArray();
                foreach (var item in CNameRecords)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(TxtRecords))
            {
                writer.WritePropertyName("txtRecords"u8);
                writer.WriteStartArray();
                foreach (var item in TxtRecords)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ARecords))
            {
                writer.WritePropertyName("aRecords"u8);
                writer.WriteStartArray();
                foreach (var item in ARecords)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AlternateCNameRecords))
            {
                writer.WritePropertyName("alternateCNameRecords"u8);
                writer.WriteStartArray();
                foreach (var item in AlternateCNameRecords)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AlternateTxtRecords))
            {
                writer.WritePropertyName("alternateTxtRecords"u8);
                writer.WriteStartArray();
                foreach (var item in AlternateTxtRecords)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ContainerAppCustomHostnameAnalysisResult IJsonModel<ContainerAppCustomHostnameAnalysisResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ContainerAppCustomHostnameAnalysisResult)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContainerAppCustomHostnameAnalysisResult(document.RootElement, options);
        }

        internal static ContainerAppCustomHostnameAnalysisResult DeserializeContainerAppCustomHostnameAnalysisResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> hostName = default;
            Optional<bool> isHostnameAlreadyVerified = default;
            Optional<ContainerAppDnsVerificationTestResult> customDomainVerificationTest = default;
            Optional<ContainerAppCustomDomainVerificationFailureInfo> customDomainVerificationFailureInfo = default;
            Optional<bool> hasConflictOnManagedEnvironment = default;
            Optional<bool> conflictWithEnvironmentCustomDomain = default;
            Optional<string> conflictingContainerAppResourceId = default;
            Optional<IReadOnlyList<string>> cNameRecords = default;
            Optional<IReadOnlyList<string>> txtRecords = default;
            Optional<IReadOnlyList<string>> aRecords = default;
            Optional<IReadOnlyList<string>> alternateCNameRecords = default;
            Optional<IReadOnlyList<string>> alternateTxtRecords = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hostName"u8))
                {
                    hostName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isHostnameAlreadyVerified"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isHostnameAlreadyVerified = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("customDomainVerificationTest"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customDomainVerificationTest = property.Value.GetString().ToContainerAppDnsVerificationTestResult();
                    continue;
                }
                if (property.NameEquals("customDomainVerificationFailureInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customDomainVerificationFailureInfo = ContainerAppCustomDomainVerificationFailureInfo.DeserializeContainerAppCustomDomainVerificationFailureInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("hasConflictOnManagedEnvironment"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hasConflictOnManagedEnvironment = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("conflictWithEnvironmentCustomDomain"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    conflictWithEnvironmentCustomDomain = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("conflictingContainerAppResourceId"u8))
                {
                    conflictingContainerAppResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cNameRecords"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    cNameRecords = array;
                    continue;
                }
                if (property.NameEquals("txtRecords"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    txtRecords = array;
                    continue;
                }
                if (property.NameEquals("aRecords"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    aRecords = array;
                    continue;
                }
                if (property.NameEquals("alternateCNameRecords"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    alternateCNameRecords = array;
                    continue;
                }
                if (property.NameEquals("alternateTxtRecords"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    alternateTxtRecords = array;
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ContainerAppCustomHostnameAnalysisResult(hostName.Value, Optional.ToNullable(isHostnameAlreadyVerified), Optional.ToNullable(customDomainVerificationTest), customDomainVerificationFailureInfo.Value, Optional.ToNullable(hasConflictOnManagedEnvironment), Optional.ToNullable(conflictWithEnvironmentCustomDomain), conflictingContainerAppResourceId.Value, Optional.ToList(cNameRecords), Optional.ToList(txtRecords), Optional.ToList(aRecords), Optional.ToList(alternateCNameRecords), Optional.ToList(alternateTxtRecords), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ContainerAppCustomHostnameAnalysisResult>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ContainerAppCustomHostnameAnalysisResult)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        ContainerAppCustomHostnameAnalysisResult IPersistableModel<ContainerAppCustomHostnameAnalysisResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ContainerAppCustomHostnameAnalysisResult)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeContainerAppCustomHostnameAnalysisResult(document.RootElement, options);
        }

        string IPersistableModel<ContainerAppCustomHostnameAnalysisResult>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
