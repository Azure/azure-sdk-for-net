// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class DiagnosticsProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Metadata))
            {
                writer.WritePropertyName("metadata");
                writer.WriteObjectValue(Metadata);
            }
            if (Optional.IsCollectionDefined(Dataset))
            {
                writer.WritePropertyName("dataset");
                writer.WriteStartArray();
                foreach (var item in Dataset)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteObjectValue(Status);
            }
            if (Optional.IsDefined(DataProviderMetadata))
            {
                writer.WritePropertyName("dataProviderMetadata");
                writer.WriteObjectValue(DataProviderMetadata);
            }
            writer.WriteEndObject();
        }

        internal static DiagnosticsProperties DeserializeDiagnosticsProperties(JsonElement element)
        {
            Optional<DiagnosticsDefinition> metadata = default;
            Optional<IList<DiagnosticsDataApiResponse>> dataset = default;
            Optional<DiagnosticsStatus> status = default;
            Optional<DiagnosticDataProviderMetadata> dataProviderMetadata = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("metadata"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    metadata = DiagnosticsDefinition.DeserializeDiagnosticsDefinition(property.Value);
                    continue;
                }
                if (property.NameEquals("dataset"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DiagnosticsDataApiResponse> array = new List<DiagnosticsDataApiResponse>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DiagnosticsDataApiResponse.DeserializeDiagnosticsDataApiResponse(item));
                    }
                    dataset = array;
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = DiagnosticsStatus.DeserializeDiagnosticsStatus(property.Value);
                    continue;
                }
                if (property.NameEquals("dataProviderMetadata"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dataProviderMetadata = DiagnosticDataProviderMetadata.DeserializeDiagnosticDataProviderMetadata(property.Value);
                    continue;
                }
            }
            return new DiagnosticsProperties(metadata.Value, Optional.ToList(dataset), status.Value, dataProviderMetadata.Value);
        }
    }
}
