// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> Policy that defines circuit breaker conditions. </summary>
    public partial class CircuitBreakerPolicy
    {
        /// <summary> Initializes a new instance of CircuitBreakerPolicy. </summary>
        public CircuitBreakerPolicy()
        {
        }

        /// <summary> Initializes a new instance of CircuitBreakerPolicy. </summary>
        /// <param name="consecutiveErrors"> Number of consecutive errors before the circuit breaker opens. </param>
        /// <param name="intervalInSeconds"> The time interval, in seconds, between endpoint checks. This can result in opening the circuit breaker if the check fails as well as closing the circuit breaker if the check succeeds. Defaults to 10s. </param>
        /// <param name="maxEjectionPercent"> Maximum percentage of hosts that will be ejected after failure threshold has been met. </param>
        internal CircuitBreakerPolicy(int? consecutiveErrors, int? intervalInSeconds, int? maxEjectionPercent)
        {
            ConsecutiveErrors = consecutiveErrors;
            IntervalInSeconds = intervalInSeconds;
            MaxEjectionPercent = maxEjectionPercent;
        }

        /// <summary> Number of consecutive errors before the circuit breaker opens. </summary>
        public int? ConsecutiveErrors { get; set; }
        /// <summary> The time interval, in seconds, between endpoint checks. This can result in opening the circuit breaker if the check fails as well as closing the circuit breaker if the check succeeds. Defaults to 10s. </summary>
        public int? IntervalInSeconds { get; set; }
        /// <summary> Maximum percentage of hosts that will be ejected after failure threshold has been met. </summary>
        public int? MaxEjectionPercent { get; set; }
    }
}
