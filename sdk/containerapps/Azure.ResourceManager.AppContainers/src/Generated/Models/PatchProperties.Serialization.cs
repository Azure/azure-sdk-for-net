// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppContainers.Models
{
    public partial class PatchProperties : IUtf8JsonSerializable, IJsonModel<PatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PatchProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<PatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PatchProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(TargetEnvironmentId))
            {
                writer.WritePropertyName("targetEnvironmentId"u8);
                writer.WriteStringValue(TargetEnvironmentId);
            }
            if (Optional.IsDefined(TargetContainerAppId))
            {
                writer.WritePropertyName("targetContainerAppId"u8);
                writer.WriteStringValue(TargetContainerAppId);
            }
            if (Optional.IsDefined(TargetRevisionId))
            {
                writer.WritePropertyName("targetRevisionId"u8);
                writer.WriteStringValue(TargetRevisionId);
            }
            if (options.Format != "W" && Optional.IsDefined(PatchApplyStatus))
            {
                writer.WritePropertyName("patchApplyStatus"u8);
                writer.WriteStringValue(PatchApplyStatus.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("createdAt"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastModifiedOn))
            {
                writer.WritePropertyName("lastModifiedAt"u8);
                writer.WriteStringValue(LastModifiedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(PatchDetails))
            {
                writer.WritePropertyName("patchDetails"u8);
                writer.WriteStartArray();
                foreach (var item in PatchDetails)
                {
                    writer.WriteObjectValue<PatchDetails>(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        PatchProperties IJsonModel<PatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePatchProperties(document.RootElement, options);
        }

        internal static PatchProperties DeserializePatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier targetEnvironmentId = default;
            ResourceIdentifier targetContainerAppId = default;
            ResourceIdentifier targetRevisionId = default;
            PatchApplyStatus? patchApplyStatus = default;
            DateTimeOffset? createdAt = default;
            DateTimeOffset? lastModifiedAt = default;
            IReadOnlyList<PatchDetails> patchDetails = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetEnvironmentId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetEnvironmentId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetContainerAppId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetContainerAppId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetRevisionId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetRevisionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("patchApplyStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    patchApplyStatus = new PatchApplyStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("createdAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastModifiedAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastModifiedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("patchDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PatchDetails> array = new List<PatchDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.PatchDetails.DeserializePatchDetails(item, options));
                    }
                    patchDetails = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new PatchProperties(
                targetEnvironmentId,
                targetContainerAppId,
                targetRevisionId,
                patchApplyStatus,
                createdAt,
                lastModifiedAt,
                patchDetails ?? new ChangeTrackingList<PatchDetails>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<PatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(PatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        PatchProperties IPersistableModel<PatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializePatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(PatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<PatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
