// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppContainers.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmAppContainersModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="AppContainers.AppResiliencyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="timeoutPolicy"> Policy to set request timeouts. </param>
        /// <param name="httpRetryPolicy"> Policy that defines http request retry conditions. </param>
        /// <param name="tcpRetryMaxConnectAttempts"> Policy that defines tcp request retry conditions. </param>
        /// <param name="circuitBreakerPolicy"> Policy that defines circuit breaker conditions. </param>
        /// <param name="httpConnectionPool"> Defines parameters for http connection pooling. </param>
        /// <param name="maxConnections"> Defines parameters for tcp connection pooling. </param>
        /// <returns> A new <see cref="AppContainers.AppResiliencyData"/> instance for mocking. </returns>
        public static AppResiliencyData AppResiliencyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, TimeoutPolicy timeoutPolicy = null, HttpRetryPolicy httpRetryPolicy = null, int? tcpRetryMaxConnectAttempts = null, CircuitBreakerPolicy circuitBreakerPolicy = null, HttpConnectionPool httpConnectionPool = null, int? maxConnections = null)
        {
            return new AppResiliencyData(
                id,
                name,
                resourceType,
                systemData,
                timeoutPolicy,
                httpRetryPolicy,
                tcpRetryMaxConnectAttempts != null ? new TcpRetryPolicy(tcpRetryMaxConnectAttempts, serializedAdditionalRawData: null) : null,
                circuitBreakerPolicy,
                httpConnectionPool,
                maxConnections != null ? new TcpConnectionPool(maxConnections, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppAuthConfigData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="platform"> The configuration settings of the platform of ContainerApp Service Authentication/Authorization. </param>
        /// <param name="globalValidation"> The configuration settings that determines the validation flow of users using  Service Authentication/Authorization. </param>
        /// <param name="identityProviders"> The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization. </param>
        /// <param name="login"> The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization. </param>
        /// <param name="httpSettings"> The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization. </param>
        /// <param name="encryptionSettings"> The configuration settings of the secrets references of encryption key and signing key for ContainerApp Service Authentication/Authorization. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppAuthConfigData"/> instance for mocking. </returns>
        public static ContainerAppAuthConfigData ContainerAppAuthConfigData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ContainerAppAuthPlatform platform = null, ContainerAppGlobalValidation globalValidation = null, ContainerAppIdentityProvidersConfiguration identityProviders = null, ContainerAppLogin login = null, ContainerAppHttpSettings httpSettings = null, EncryptionSettings encryptionSettings = null)
        {
            return new ContainerAppAuthConfigData(
                id,
                name,
                resourceType,
                systemData,
                platform,
                globalValidation,
                identityProviders,
                login,
                httpSettings,
                encryptionSettings,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppAvailableWorkloadProfile"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Region of the workload profile. </param>
        /// <param name="properties"> Revision resource specific properties. </param>
        /// <returns> A new <see cref="Models.ContainerAppAvailableWorkloadProfile"/> instance for mocking. </returns>
        public static ContainerAppAvailableWorkloadProfile ContainerAppAvailableWorkloadProfile(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, ContainerAppAvailableWorkloadProfileProperties properties = null)
        {
            return new ContainerAppAvailableWorkloadProfile(
                id,
                name,
                resourceType,
                systemData,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppBillingMeter"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Region for the billing meter. </param>
        /// <param name="properties"> Revision resource specific properties. </param>
        /// <returns> A new <see cref="Models.ContainerAppBillingMeter"/> instance for mocking. </returns>
        public static ContainerAppBillingMeter ContainerAppBillingMeter(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, ContainerAppBillingMeterProperties properties = null)
        {
            return new ContainerAppBillingMeter(
                id,
                name,
                resourceType,
                systemData,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppBillingMeterProperties"/>. </summary>
        /// <param name="workloadProfileCategory"> Used to categorize billing meters. </param>
        /// <param name="meterType"> Billing meter type. </param>
        /// <param name="displayName"> The everyday name of the billing meter. </param>
        /// <returns> A new <see cref="Models.ContainerAppBillingMeterProperties"/> instance for mocking. </returns>
        public static ContainerAppBillingMeterProperties ContainerAppBillingMeterProperties(string workloadProfileCategory = null, string meterType = null, string displayName = null)
        {
            return new ContainerAppBillingMeterProperties(workloadProfileCategory, meterType, displayName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.BuilderResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="provisioningState"> Provisioning state of a builder resource. </param>
        /// <param name="environmentId"> Resource ID of the container apps environment that the builder is associated with. </param>
        /// <param name="containerRegistries"> List of mappings of container registries and the managed identity used to connect to it. </param>
        /// <returns> A new <see cref="AppContainers.BuilderResourceData"/> instance for mocking. </returns>
        public static BuilderResourceData BuilderResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, BuilderProvisioningState? provisioningState = null, ResourceIdentifier environmentId = null, IEnumerable<ContainerRegistry> containerRegistries = null)
        {
            tags ??= new Dictionary<string, string>();
            containerRegistries ??= new List<ContainerRegistry>();

            return new BuilderResourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                identity,
                provisioningState,
                environmentId,
                containerRegistries?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.BuildResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Build provisioning state. </param>
        /// <param name="buildStatus"> Status of the build once it has been provisioned. </param>
        /// <param name="destinationContainerRegistry"> Container registry that the final image will be uploaded to. </param>
        /// <param name="configuration"> Configuration of the build. </param>
        /// <param name="uploadEndpoint"> Endpoint to which the source code should be uploaded. </param>
        /// <param name="logStreamEndpoint"> Endpoint from which the build logs can be streamed. </param>
        /// <param name="tokenEndpoint"> Endpoint to use to retrieve an authentication token for log streaming and uploading source code. </param>
        /// <returns> A new <see cref="AppContainers.BuildResourceData"/> instance for mocking. </returns>
        public static BuildResourceData BuildResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BuildProvisioningState? provisioningState = null, BuildStatus? buildStatus = null, ContainerRegistryWithCustomImage destinationContainerRegistry = null, BuildConfiguration configuration = null, string uploadEndpoint = null, string logStreamEndpoint = null, string tokenEndpoint = null)
        {
            return new BuildResourceData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                buildStatus,
                destinationContainerRegistry,
                configuration,
                uploadEndpoint,
                logStreamEndpoint,
                tokenEndpoint,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.BuildToken"/>. </summary>
        /// <param name="token"> Authentication token. </param>
        /// <param name="expires"> Token expiration date. </param>
        /// <returns> A new <see cref="Models.BuildToken"/> instance for mocking. </returns>
        public static BuildToken BuildToken(string token = null, DateTimeOffset? expires = null)
        {
            return new BuildToken(token, expires, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppConnectedEnvironmentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The complex type of the extended location. </param>
        /// <param name="provisioningState"> Provisioning state of the Kubernetes Environment. </param>
        /// <param name="deploymentErrors"> Any errors that occurred during deployment or deployment validation. </param>
        /// <param name="defaultDomain"> Default Domain Name for the cluster. </param>
        /// <param name="staticIP"> Static IP of the connectedEnvironment. </param>
        /// <param name="daprAIConnectionString"> Application Insights connection string used by Dapr to export Service to Service communication telemetry. </param>
        /// <param name="customDomainConfiguration"> Custom domain configuration for the environment. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppConnectedEnvironmentData"/> instance for mocking. </returns>
        public static ContainerAppConnectedEnvironmentData ContainerAppConnectedEnvironmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ContainerAppExtendedLocation extendedLocation = null, ContainerAppConnectedEnvironmentProvisioningState? provisioningState = null, string deploymentErrors = null, string defaultDomain = null, IPAddress staticIP = null, string daprAIConnectionString = null, ContainerAppCustomDomainConfiguration customDomainConfiguration = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ContainerAppConnectedEnvironmentData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                extendedLocation,
                provisioningState,
                deploymentErrors,
                defaultDomain,
                staticIP,
                daprAIConnectionString,
                customDomainConfiguration,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppCustomDomainConfiguration"/>. </summary>
        /// <param name="customDomainVerificationId"> Id used to verify domain name ownership. </param>
        /// <param name="dnsSuffix"> Dns suffix for the environment domain. </param>
        /// <param name="certificateKeyVaultProperties"> Certificate stored in Azure Key Vault. </param>
        /// <param name="certificateValue"> PFX or PEM blob. </param>
        /// <param name="certificatePassword"> Certificate password. </param>
        /// <param name="expireOn"> Certificate expiration date. </param>
        /// <param name="thumbprint"> Certificate thumbprint. </param>
        /// <param name="subjectName"> Subject name of the certificate. </param>
        /// <returns> A new <see cref="Models.ContainerAppCustomDomainConfiguration"/> instance for mocking. </returns>
        public static ContainerAppCustomDomainConfiguration ContainerAppCustomDomainConfiguration(string customDomainVerificationId = null, string dnsSuffix = null, CertificateKeyVaultProperties certificateKeyVaultProperties = null, byte[] certificateValue = null, string certificatePassword = null, DateTimeOffset? expireOn = null, string thumbprint = null, string subjectName = null)
        {
            return new ContainerAppCustomDomainConfiguration(
                customDomainVerificationId,
                dnsSuffix,
                certificateKeyVaultProperties,
                certificateValue,
                certificatePassword,
                expireOn,
                thumbprint,
                subjectName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppNameAvailabilityResult"/>. </summary>
        /// <param name="isNameAvailable"> Indicates if the resource name is available. </param>
        /// <param name="reason"> The reason why the given name is not available. </param>
        /// <param name="message"> Detailed reason why the given name is available. </param>
        /// <returns> A new <see cref="Models.ContainerAppNameAvailabilityResult"/> instance for mocking. </returns>
        public static ContainerAppNameAvailabilityResult ContainerAppNameAvailabilityResult(bool? isNameAvailable = null, ContainerAppNameUnavailableReason? reason = null, string message = null)
        {
            return new ContainerAppNameAvailabilityResult(isNameAvailable, reason, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppCertificateData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> Certificate resource specific properties. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppCertificateData"/> instance for mocking. </returns>
        public static ContainerAppCertificateData ContainerAppCertificateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ContainerAppCertificateProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ContainerAppCertificateData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppCertificateProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the certificate. </param>
        /// <param name="deploymentErrors"> Any errors that occurred during deployment or deployment validation. </param>
        /// <param name="certificateKeyVaultProperties"> Properties for a certificate stored in a Key Vault. </param>
        /// <param name="password"> Certificate password. </param>
        /// <param name="subjectName"> Subject name of the certificate. </param>
        /// <param name="subjectAlternativeNames"> Subject alternative names the certificate applies to. </param>
        /// <param name="value"> PFX or PEM blob. </param>
        /// <param name="issuer"> Certificate issuer. </param>
        /// <param name="issueOn"> Certificate issue Date. </param>
        /// <param name="expireOn"> Certificate expiration date. </param>
        /// <param name="thumbprint"> Certificate thumbprint. </param>
        /// <param name="isValid"> Is the certificate valid?. </param>
        /// <param name="publicKeyHash"> Public key hash. </param>
        /// <param name="certificateType"> The type of the certificate. Allowed values are `ServerSSLCertificate` and `ImagePullTrustedCA`. </param>
        /// <returns> A new <see cref="Models.ContainerAppCertificateProperties"/> instance for mocking. </returns>
        public static ContainerAppCertificateProperties ContainerAppCertificateProperties(ContainerAppCertificateProvisioningState? provisioningState = null, string deploymentErrors = null, CertificateKeyVaultProperties certificateKeyVaultProperties = null, string password = null, string subjectName = null, IEnumerable<string> subjectAlternativeNames = null, byte[] value = null, string issuer = null, DateTimeOffset? issueOn = null, DateTimeOffset? expireOn = null, string thumbprint = null, bool? isValid = null, string publicKeyHash = null, CertificateType? certificateType = null)
        {
            subjectAlternativeNames ??= new List<string>();

            return new ContainerAppCertificateProperties(
                provisioningState,
                deploymentErrors,
                certificateKeyVaultProperties,
                password,
                subjectName,
                subjectAlternativeNames?.ToList(),
                value,
                issuer,
                issueOn,
                expireOn,
                thumbprint,
                isValid,
                publicKeyHash,
                certificateType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ConnectedEnvironmentDaprComponentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Dapr component properties. </param>
        /// <returns> A new <see cref="AppContainers.ConnectedEnvironmentDaprComponentData"/> instance for mocking. </returns>
        public static ConnectedEnvironmentDaprComponentData ConnectedEnvironmentDaprComponentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ConnectedEnvironmentDaprComponentProperties properties = null)
        {
            return new ConnectedEnvironmentDaprComponentData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConnectedEnvironmentDaprComponentProperties"/>. </summary>
        /// <param name="componentType"> Component type. </param>
        /// <param name="version"> Component version. </param>
        /// <param name="ignoreErrors"> Boolean describing if the component errors are ignores. </param>
        /// <param name="initTimeout"> Initialization timeout. </param>
        /// <param name="secrets"> Collection of secrets used by a Dapr component. </param>
        /// <param name="secretStoreComponent"> Name of a Dapr component to retrieve component secrets from. </param>
        /// <param name="metadata"> Component metadata. </param>
        /// <param name="scopes"> Names of container apps that can use this Dapr component. </param>
        /// <param name="serviceComponentBind"> List of container app services that are bound to the Dapr component. </param>
        /// <param name="provisioningState"> Provisioning state of the Connected Environment Dapr Component. </param>
        /// <param name="deploymentErrors"> Any errors that occurred during deployment or deployment validation. </param>
        /// <returns> A new <see cref="Models.ConnectedEnvironmentDaprComponentProperties"/> instance for mocking. </returns>
        public static ConnectedEnvironmentDaprComponentProperties ConnectedEnvironmentDaprComponentProperties(string componentType = null, string version = null, bool? ignoreErrors = null, string initTimeout = null, IEnumerable<ContainerAppWritableSecret> secrets = null, string secretStoreComponent = null, IEnumerable<ContainerAppDaprMetadata> metadata = null, IEnumerable<string> scopes = null, IEnumerable<DaprComponentServiceBinding> serviceComponentBind = null, ConnectedEnvironmentDaprComponentProvisioningState? provisioningState = null, string deploymentErrors = null)
        {
            secrets ??= new List<ContainerAppWritableSecret>();
            metadata ??= new List<ContainerAppDaprMetadata>();
            scopes ??= new List<string>();
            serviceComponentBind ??= new List<DaprComponentServiceBinding>();

            return new ConnectedEnvironmentDaprComponentProperties(
                componentType,
                version,
                ignoreErrors,
                initTimeout,
                secrets?.ToList(),
                secretStoreComponent,
                metadata?.ToList(),
                scopes?.ToList(),
                serviceComponentBind?.ToList(),
                serializedAdditionalRawData: null,
                provisioningState,
                deploymentErrors);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppDaprSecret"/>. </summary>
        /// <param name="name"> Secret Name. </param>
        /// <param name="value"> Secret Value. </param>
        /// <returns> A new <see cref="Models.ContainerAppDaprSecret"/> instance for mocking. </returns>
        public static ContainerAppDaprSecret ContainerAppDaprSecret(string name = null, string value = null)
        {
            return new ContainerAppDaprSecret(name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppConnectedEnvironmentStorageData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Storage properties. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppConnectedEnvironmentStorageData"/> instance for mocking. </returns>
        public static ContainerAppConnectedEnvironmentStorageData ContainerAppConnectedEnvironmentStorageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ConnectedEnvironmentStorageProperties properties = null)
        {
            return new ContainerAppConnectedEnvironmentStorageData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConnectedEnvironmentStorageProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the storage. </param>
        /// <param name="deploymentErrors"> Any errors that occurred during deployment or deployment validation. </param>
        /// <param name="azureFile"> Azure file properties. </param>
        /// <param name="smb"> SMB storage properties. </param>
        /// <returns> A new <see cref="Models.ConnectedEnvironmentStorageProperties"/> instance for mocking. </returns>
        public static ConnectedEnvironmentStorageProperties ConnectedEnvironmentStorageProperties(ConnectedEnvironmentStorageProvisioningState? provisioningState = null, string deploymentErrors = null, ContainerAppAzureFileProperties azureFile = null, SmbStorage smb = null)
        {
            return new ConnectedEnvironmentStorageProperties(provisioningState, deploymentErrors, azureFile, smb, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The complex type of the extended location. </param>
        /// <param name="identity"> managed identities for the Container App to interact with other Azure services without maintaining any secrets or credentials in code. </param>
        /// <param name="managedBy"> The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource. </param>
        /// <param name="kind"> Metadata used to render different experiences for resources of the same type; e.g. WorkflowApp is a kind of Microsoft.App/ContainerApps type. If supported, the resource provider must validate and persist this value. </param>
        /// <param name="provisioningState"> Provisioning state of the Container App. </param>
        /// <param name="runningStatus"> Running status of the Container App. </param>
        /// <param name="deploymentErrors"> Any errors that occurred during deployment. </param>
        /// <param name="managedEnvironmentId"> Deprecated. Resource ID of the Container App's environment. </param>
        /// <param name="environmentId"> Resource ID of environment. </param>
        /// <param name="workloadProfileName"> Workload profile name to pin for container app execution. </param>
        /// <param name="patchingMode"> Container App auto patch configuration. </param>
        /// <param name="latestRevisionName"> Name of the latest revision of the Container App. </param>
        /// <param name="latestReadyRevisionName"> Name of the latest ready revision of the Container App. </param>
        /// <param name="latestRevisionFqdn"> Fully Qualified Domain Name of the latest revision of the Container App. </param>
        /// <param name="customDomainVerificationId"> Id used to verify domain name ownership. </param>
        /// <param name="configuration"> Non versioned Container App configuration properties. </param>
        /// <param name="template"> Container App versioned application definition. </param>
        /// <param name="outboundIPAddressList"> Outbound IP Addresses for container app. </param>
        /// <param name="eventStreamEndpoint"> The endpoint of the eventstream of the container app. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppData"/> instance for mocking. </returns>
        public static ContainerAppData ContainerAppData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ContainerAppExtendedLocation extendedLocation = null, ManagedServiceIdentity identity = null, string managedBy = null, AppContainersKind? kind = null, ContainerAppProvisioningState? provisioningState = null, ContainerAppRunningStatus? runningStatus = null, string deploymentErrors = null, ResourceIdentifier managedEnvironmentId = null, ResourceIdentifier environmentId = null, string workloadProfileName = null, PatchingMode? patchingMode = null, string latestRevisionName = null, string latestReadyRevisionName = null, string latestRevisionFqdn = null, string customDomainVerificationId = null, ContainerAppConfiguration configuration = null, ContainerAppTemplate template = null, IEnumerable<IPAddress> outboundIPAddressList = null, Uri eventStreamEndpoint = null)
        {
            tags ??= new Dictionary<string, string>();
            outboundIPAddressList ??= new List<IPAddress>();

            return new ContainerAppData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                extendedLocation,
                identity,
                managedBy,
                kind,
                provisioningState,
                runningStatus,
                deploymentErrors,
                managedEnvironmentId,
                environmentId,
                workloadProfileName,
                patchingMode != null ? new ContainerAppPropertiesPatchingConfiguration(patchingMode, serializedAdditionalRawData: null) : null,
                latestRevisionName,
                latestReadyRevisionName,
                latestRevisionFqdn,
                customDomainVerificationId,
                configuration,
                template,
                outboundIPAddressList?.ToList(),
                eventStreamEndpoint,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppIngressConfiguration"/>. </summary>
        /// <param name="fqdn"> Hostname. </param>
        /// <param name="external"> Bool indicating if app exposes an external http endpoint. </param>
        /// <param name="targetPort"> Target Port in containers for traffic from ingress. </param>
        /// <param name="exposedPort"> Exposed Port in containers for TCP traffic from ingress. </param>
        /// <param name="transport"> Ingress transport protocol. </param>
        /// <param name="traffic"> Traffic weights for app's revisions. </param>
        /// <param name="customDomains"> custom domain bindings for Container Apps' hostnames. </param>
        /// <param name="allowInsecure"> Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections. </param>
        /// <param name="ipSecurityRestrictions"> Rules to restrict incoming IP address. </param>
        /// <param name="stickySessionsAffinity"> Sticky Sessions for Single Revision Mode. </param>
        /// <param name="clientCertificateMode"> Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate. </param>
        /// <param name="corsPolicy"> CORS policy for container app. </param>
        /// <param name="additionalPortMappings"> Settings to expose additional ports on container app. </param>
        /// <param name="targetPortHttpScheme"> Whether an http app listens on http or https. </param>
        /// <returns> A new <see cref="Models.ContainerAppIngressConfiguration"/> instance for mocking. </returns>
        public static ContainerAppIngressConfiguration ContainerAppIngressConfiguration(string fqdn = null, bool? external = null, int? targetPort = null, int? exposedPort = null, ContainerAppIngressTransportMethod? transport = null, IEnumerable<ContainerAppRevisionTrafficWeight> traffic = null, IEnumerable<ContainerAppCustomDomain> customDomains = null, bool? allowInsecure = null, IEnumerable<ContainerAppIPSecurityRestrictionRule> ipSecurityRestrictions = null, Affinity? stickySessionsAffinity = null, ContainerAppIngressClientCertificateMode? clientCertificateMode = null, ContainerAppCorsPolicy corsPolicy = null, IEnumerable<IngressPortMapping> additionalPortMappings = null, IngressTargetPortHttpScheme? targetPortHttpScheme = null)
        {
            traffic ??= new List<ContainerAppRevisionTrafficWeight>();
            customDomains ??= new List<ContainerAppCustomDomain>();
            ipSecurityRestrictions ??= new List<ContainerAppIPSecurityRestrictionRule>();
            additionalPortMappings ??= new List<IngressPortMapping>();

            return new ContainerAppIngressConfiguration(
                fqdn,
                external,
                targetPort,
                exposedPort,
                transport,
                traffic?.ToList(),
                customDomains?.ToList(),
                allowInsecure,
                ipSecurityRestrictions?.ToList(),
                stickySessionsAffinity != null ? new IngressStickySessions(stickySessionsAffinity, serializedAdditionalRawData: null) : null,
                clientCertificateMode,
                corsPolicy,
                additionalPortMappings?.ToList(),
                targetPortHttpScheme,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AppContainerResources"/>. </summary>
        /// <param name="cpu"> Required CPU in cores, e.g. 0.5. </param>
        /// <param name="memory"> Required memory, e.g. "250Mb". </param>
        /// <param name="ephemeralStorage"> Ephemeral Storage, e.g. "1Gi". </param>
        /// <param name="gpu"> Required GPU in cores for GPU based app, e.g. 1.0. </param>
        /// <returns> A new <see cref="Models.AppContainerResources"/> instance for mocking. </returns>
        public static AppContainerResources AppContainerResources(double? cpu = null, string memory = null, string ephemeralStorage = null, double? gpu = null)
        {
            return new AppContainerResources(cpu, memory, ephemeralStorage, gpu, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppCustomHostnameAnalysisResult"/>. </summary>
        /// <param name="hostName"> Host name that was analyzed. </param>
        /// <param name="isHostnameAlreadyVerified"> &lt;code&gt;true&lt;/code&gt; if hostname is already verified; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="customDomainVerificationTest"> DNS verification test result. </param>
        /// <param name="customDomainVerificationFailureInfo"> Raw failure information if DNS verification fails. </param>
        /// <param name="hasConflictOnManagedEnvironment"> &lt;code&gt;true&lt;/code&gt; if there is a conflict on the Container App's managed environment; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="conflictWithEnvironmentCustomDomain"> &lt;code&gt;true&lt;/code&gt; if there is a conflict on the Container App's managed environment level custom domain; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="conflictingContainerAppResourceId"> Name of the conflicting Container App on the Managed Environment if it's within the same subscription. </param>
        /// <param name="cNameRecords"> CName records visible for this hostname. </param>
        /// <param name="txtRecords"> TXT records visible for this hostname. </param>
        /// <param name="aRecords"> A records visible for this hostname. </param>
        /// <param name="alternateCNameRecords"> Alternate CName records visible for this hostname. </param>
        /// <param name="alternateTxtRecords"> Alternate TXT records visible for this hostname. </param>
        /// <returns> A new <see cref="Models.ContainerAppCustomHostnameAnalysisResult"/> instance for mocking. </returns>
        public static ContainerAppCustomHostnameAnalysisResult ContainerAppCustomHostnameAnalysisResult(string hostName = null, bool? isHostnameAlreadyVerified = null, ContainerAppDnsVerificationTestResult? customDomainVerificationTest = null, ContainerAppCustomDomainVerificationFailureInfo customDomainVerificationFailureInfo = null, bool? hasConflictOnManagedEnvironment = null, bool? conflictWithEnvironmentCustomDomain = null, string conflictingContainerAppResourceId = null, IEnumerable<string> cNameRecords = null, IEnumerable<string> txtRecords = null, IEnumerable<string> aRecords = null, IEnumerable<string> alternateCNameRecords = null, IEnumerable<string> alternateTxtRecords = null)
        {
            cNameRecords ??= new List<string>();
            txtRecords ??= new List<string>();
            aRecords ??= new List<string>();
            alternateCNameRecords ??= new List<string>();
            alternateTxtRecords ??= new List<string>();

            return new ContainerAppCustomHostnameAnalysisResult(
                hostName,
                isHostnameAlreadyVerified,
                customDomainVerificationTest,
                customDomainVerificationFailureInfo,
                hasConflictOnManagedEnvironment,
                conflictWithEnvironmentCustomDomain,
                conflictingContainerAppResourceId,
                cNameRecords?.ToList(),
                txtRecords?.ToList(),
                aRecords?.ToList(),
                alternateCNameRecords?.ToList(),
                alternateTxtRecords?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppCustomDomainVerificationFailureInfo"/>. </summary>
        /// <param name="code"> Standardized string to programmatically identify the error. </param>
        /// <param name="message"> Detailed error description and debugging information. </param>
        /// <param name="target"> Detailed error description and debugging information. </param>
        /// <param name="details"> Details or the error. </param>
        /// <returns> A new <see cref="Models.ContainerAppCustomDomainVerificationFailureInfo"/> instance for mocking. </returns>
        public static ContainerAppCustomDomainVerificationFailureInfo ContainerAppCustomDomainVerificationFailureInfo(string code = null, string message = null, string target = null, IEnumerable<ContainerAppCustomDomainVerificationFailureInfoDetailsItem> details = null)
        {
            details ??= new List<ContainerAppCustomDomainVerificationFailureInfoDetailsItem>();

            return new ContainerAppCustomDomainVerificationFailureInfo(code, message, target, details?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppCustomDomainVerificationFailureInfoDetailsItem"/>. </summary>
        /// <param name="code"> Standardized string to programmatically identify the error. </param>
        /// <param name="message"> Detailed error description and debugging information. </param>
        /// <param name="target"> Detailed error description and debugging information. </param>
        /// <returns> A new <see cref="Models.ContainerAppCustomDomainVerificationFailureInfoDetailsItem"/> instance for mocking. </returns>
        public static ContainerAppCustomDomainVerificationFailureInfoDetailsItem ContainerAppCustomDomainVerificationFailureInfoDetailsItem(string code = null, string message = null, string target = null)
        {
            return new ContainerAppCustomDomainVerificationFailureInfoDetailsItem(code, message, target, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppSecret"/>. </summary>
        /// <param name="name"> Secret Name. </param>
        /// <param name="value"> Secret Value. </param>
        /// <param name="identity"> Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity. </param>
        /// <param name="keyVaultUri"> Azure Key Vault URL pointing to the secret referenced by the container app. </param>
        /// <returns> A new <see cref="Models.ContainerAppSecret"/> instance for mocking. </returns>
        public static ContainerAppSecret ContainerAppSecret(string name = null, string value = null, string identity = null, Uri keyVaultUri = null)
        {
            return new ContainerAppSecret(name, value, identity, keyVaultUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppAuthToken"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="token"> Auth token value. </param>
        /// <param name="expireOn"> Token expiration date. </param>
        /// <returns> A new <see cref="Models.ContainerAppAuthToken"/> instance for mocking. </returns>
        public static ContainerAppAuthToken ContainerAppAuthToken(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string token = null, DateTimeOffset? expireOn = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ContainerAppAuthToken(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                token,
                expireOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppsBuildResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Build provisioning state. </param>
        /// <param name="buildStatus"> Status of the build once it has been provisioned. </param>
        /// <param name="destinationContainerRegistry"> Container registry that the final image will be uploaded to. </param>
        /// <param name="configuration"> Configuration of the build. </param>
        /// <param name="logStreamEndpoint"> Endpoint from which the build logs can be streamed. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppsBuildResourceData"/> instance for mocking. </returns>
        public static ContainerAppsBuildResourceData ContainerAppsBuildResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BuildProvisioningState? provisioningState = null, BuildStatus? buildStatus = null, ContainerRegistryWithCustomImage destinationContainerRegistry = null, ContainerAppsBuildConfiguration configuration = null, string logStreamEndpoint = null)
        {
            return new ContainerAppsBuildResourceData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                buildStatus,
                destinationContainerRegistry,
                configuration,
                logStreamEndpoint,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppsBuildConfiguration"/>. </summary>
        /// <param name="baseOS"> Base OS used to build and run the app. </param>
        /// <param name="platform"> Platform to be used to build and run the app. </param>
        /// <param name="platformVersion"> Platform version to be used to build and run the app. </param>
        /// <param name="environmentVariables"> List of environment variables to be passed to the build, secrets should not be used in environment variable. </param>
        /// <param name="preBuildSteps"> List of steps to perform before the build. </param>
        /// <returns> A new <see cref="Models.ContainerAppsBuildConfiguration"/> instance for mocking. </returns>
        public static ContainerAppsBuildConfiguration ContainerAppsBuildConfiguration(string baseOS = null, string platform = null, string platformVersion = null, IEnumerable<EnvironmentVariable> environmentVariables = null, IEnumerable<PreBuildStep> preBuildSteps = null)
        {
            environmentVariables ??= new List<EnvironmentVariable>();
            preBuildSteps ??= new List<PreBuildStep>();

            return new ContainerAppsBuildConfiguration(
                baseOS,
                platform,
                platformVersion,
                environmentVariables?.ToList(),
                preBuildSteps?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppsPatchResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties that describes current states of the patch resource. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppsPatchResourceData"/> instance for mocking. </returns>
        public static ContainerAppsPatchResourceData ContainerAppsPatchResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PatchProperties properties = null)
        {
            return new ContainerAppsPatchResourceData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PatchProperties"/>. </summary>
        /// <param name="targetEnvironmentId"> The Azure resource id of the target environment for the patch. </param>
        /// <param name="targetContainerAppId"> The Azure resource id of the target container app for the patch. </param>
        /// <param name="targetRevisionId"> The Azure resource id of the target revision for the patch. </param>
        /// <param name="patchApplyStatus"> The status of the patch operation. </param>
        /// <param name="createdOn"> The UTC timestamp that describes when the patch object was created. </param>
        /// <param name="lastModifiedOn"> The UTC timestamp that describes when the patch object was last updated. </param>
        /// <param name="patchDetails"> Detailed info describes the patch operation for the target container app. </param>
        /// <returns> A new <see cref="Models.PatchProperties"/> instance for mocking. </returns>
        public static PatchProperties PatchProperties(ResourceIdentifier targetEnvironmentId = null, ResourceIdentifier targetContainerAppId = null, ResourceIdentifier targetRevisionId = null, PatchApplyStatus? patchApplyStatus = null, DateTimeOffset? createdOn = null, DateTimeOffset? lastModifiedOn = null, IEnumerable<PatchDetails> patchDetails = null)
        {
            patchDetails ??= new List<PatchDetails>();

            return new PatchProperties(
                targetEnvironmentId,
                targetContainerAppId,
                targetRevisionId,
                patchApplyStatus,
                createdOn,
                lastModifiedOn,
                patchDetails?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PatchDetails"/>. </summary>
        /// <param name="targetContainerName"> The name of the target container for the patch. </param>
        /// <param name="targetImage"> The name of the target image for the patch. </param>
        /// <param name="lastDetectionOn"> The UTC timestamp that describes the latest detection was done. </param>
        /// <param name="detectionStatus"> The status of the patch detection. </param>
        /// <param name="newImageName"> The name of the new image created by the patch. </param>
        /// <param name="newLayer"> New layer update details in the target image. </param>
        /// <param name="oldLayer"> The old layer details in the target image. </param>
        /// <param name="patchType"> The type for the patch. </param>
        /// <returns> A new <see cref="Models.PatchDetails"/> instance for mocking. </returns>
        public static PatchDetails PatchDetails(string targetContainerName = null, string targetImage = null, DateTimeOffset lastDetectionOn = default, DetectionStatus detectionStatus = default, string newImageName = null, PatchDetailsNewLayer newLayer = null, PatchDetailsOldLayer oldLayer = null, PatchType? patchType = null)
        {
            return new PatchDetails(
                targetContainerName,
                targetImage,
                lastDetectionOn,
                detectionStatus,
                newImageName,
                newLayer,
                oldLayer,
                patchType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PatchDetailsNewLayer"/>. </summary>
        /// <param name="name"> The details of the new layer for the target image. </param>
        /// <param name="frameworkAndVersion"> The framework and its version in the new run image for the target image. </param>
        /// <param name="osAndVersion"> The OS name and its version in the new run image for the target image. </param>
        /// <returns> A new <see cref="Models.PatchDetailsNewLayer"/> instance for mocking. </returns>
        public static PatchDetailsNewLayer PatchDetailsNewLayer(string name = null, string frameworkAndVersion = null, string osAndVersion = null)
        {
            return new PatchDetailsNewLayer(name, frameworkAndVersion, osAndVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PatchDetailsOldLayer"/>. </summary>
        /// <param name="name"> The details of the old layer for the target image. </param>
        /// <param name="frameworkAndVersion"> The framework and its version in the old run image for the target image. </param>
        /// <param name="osAndVersion"> The OS name and its version in the old run image for the target image. </param>
        /// <returns> A new <see cref="Models.PatchDetailsOldLayer"/> instance for mocking. </returns>
        public static PatchDetailsOldLayer PatchDetailsOldLayer(string name = null, string frameworkAndVersion = null, string osAndVersion = null)
        {
            return new PatchDetailsOldLayer(name, frameworkAndVersion, osAndVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.LabelHistoryData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="labelHistoryRecords"> Container App Label History resource specific properties. </param>
        /// <returns> A new <see cref="AppContainers.LabelHistoryData"/> instance for mocking. </returns>
        public static LabelHistoryData LabelHistoryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<LabelHistoryRecordItem> labelHistoryRecords = null)
        {
            labelHistoryRecords ??= new List<LabelHistoryRecordItem>();

            return new LabelHistoryData(
                id,
                name,
                resourceType,
                systemData,
                labelHistoryRecords != null ? new LabelHistoryProperties(labelHistoryRecords?.ToList(), serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LabelHistoryRecordItem"/>. </summary>
        /// <param name="revision"> Container App revision name that label was applied to. </param>
        /// <param name="start"> Timestamp describing when the label was applied to the revision. </param>
        /// <param name="stop"> Timestamp describing when the label was removed from the revision. Only meaningful when the label is currently applied to the revision. </param>
        /// <returns> A new <see cref="Models.LabelHistoryRecordItem"/> instance for mocking. </returns>
        public static LabelHistoryRecordItem LabelHistoryRecordItem(string revision = null, DateTimeOffset? start = null, DateTimeOffset? stop = null)
        {
            return new LabelHistoryRecordItem(revision, start, stop, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppRevisionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="createdOn">
        /// Timestamp describing when the revision was created
        /// by controller
        /// </param>
        /// <param name="lastActiveOn"> Timestamp describing when the revision was last active. Only meaningful when revision is inactive. </param>
        /// <param name="fqdn"> Fully qualified domain name of the revision. </param>
        /// <param name="template">
        /// Container App Revision Template with all possible settings and the
        /// defaults if user did not provide them. The defaults are populated
        /// as they were at the creation time
        /// </param>
        /// <param name="isActive"> Boolean describing if the Revision is Active. </param>
        /// <param name="replicas"> Number of pods currently running for this revision. </param>
        /// <param name="trafficWeight"> Traffic weight assigned to this revision. </param>
        /// <param name="labels"> List of labels assigned to this revision. </param>
        /// <param name="provisioningError"> Optional Field - Platform Error Message. </param>
        /// <param name="healthState"> Current health State of the revision. </param>
        /// <param name="provisioningState"> Current provisioning State of the revision. </param>
        /// <param name="runningState"> Current running state of the revision. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppRevisionData"/> instance for mocking. </returns>
        public static ContainerAppRevisionData ContainerAppRevisionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? createdOn = null, DateTimeOffset? lastActiveOn = null, string fqdn = null, ContainerAppTemplate template = null, bool? isActive = null, int? replicas = null, int? trafficWeight = null, IEnumerable<string> labels = null, string provisioningError = null, ContainerAppRevisionHealthState? healthState = null, ContainerAppRevisionProvisioningState? provisioningState = null, RevisionRunningState? runningState = null)
        {
            labels ??= new List<string>();

            return new ContainerAppRevisionData(
                id,
                name,
                resourceType,
                systemData,
                createdOn,
                lastActiveOn,
                fqdn,
                template,
                isActive,
                replicas,
                trafficWeight,
                labels?.ToList(),
                provisioningError,
                healthState,
                provisioningState,
                runningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppReplicaData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="createdOn"> Timestamp describing when the pod was created by controller. </param>
        /// <param name="runningState"> Current running state of the replica. </param>
        /// <param name="runningStateDetails"> The details of replica current running state. </param>
        /// <param name="containers"> The containers collection under a replica. </param>
        /// <param name="initContainers"> The init containers collection under a replica. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppReplicaData"/> instance for mocking. </returns>
        public static ContainerAppReplicaData ContainerAppReplicaData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? createdOn = null, ContainerAppReplicaRunningState? runningState = null, string runningStateDetails = null, IEnumerable<ContainerAppReplicaContainer> containers = null, IEnumerable<ContainerAppReplicaContainer> initContainers = null)
        {
            containers ??= new List<ContainerAppReplicaContainer>();
            initContainers ??= new List<ContainerAppReplicaContainer>();

            return new ContainerAppReplicaData(
                id,
                name,
                resourceType,
                systemData,
                createdOn,
                runningState,
                runningStateDetails,
                containers?.ToList(),
                initContainers?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppReplicaContainer"/>. </summary>
        /// <param name="name"> The Name of the Container. </param>
        /// <param name="containerId"> The Id of the Container. </param>
        /// <param name="isReady"> The container ready status. </param>
        /// <param name="isStarted"> The container start status. </param>
        /// <param name="restartCount"> The container restart count. </param>
        /// <param name="runningState"> Current running state of the container. </param>
        /// <param name="runningStateDetails"> The details of container current running state. </param>
        /// <param name="logStreamEndpoint"> Log Stream endpoint. </param>
        /// <param name="execEndpoint"> Container exec endpoint. </param>
        /// <param name="debugEndpoint"> Container debug endpoint. </param>
        /// <returns> A new <see cref="Models.ContainerAppReplicaContainer"/> instance for mocking. </returns>
        public static ContainerAppReplicaContainer ContainerAppReplicaContainer(string name = null, string containerId = null, bool? isReady = null, bool? isStarted = null, int? restartCount = null, ContainerAppContainerRunningState? runningState = null, string runningStateDetails = null, string logStreamEndpoint = null, string execEndpoint = null, string debugEndpoint = null)
        {
            return new ContainerAppReplicaContainer(
                name,
                containerId,
                isReady,
                isStarted,
                restartCount,
                runningState,
                runningStateDetails,
                logStreamEndpoint,
                execEndpoint,
                debugEndpoint,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppDiagnosticData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Diagnostics resource specific properties. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppDiagnosticData"/> instance for mocking. </returns>
        public static ContainerAppDiagnosticData ContainerAppDiagnosticData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ContainerAppDiagnosticsProperties properties = null)
        {
            return new ContainerAppDiagnosticData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppDiagnosticsMetadata"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> Details of the diagnostics info. </param>
        /// <param name="author"> Authors' names of the detector. </param>
        /// <param name="category"> Category of the detector. </param>
        /// <param name="supportTopicList"> List of support topics. </param>
        /// <param name="analysisTypes"> List of analysis types. </param>
        /// <param name="score"> Authors' names of the detector. </param>
        /// <returns> A new <see cref="Models.ContainerAppDiagnosticsMetadata"/> instance for mocking. </returns>
        public static ContainerAppDiagnosticsMetadata ContainerAppDiagnosticsMetadata(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, string author = null, string category = null, IEnumerable<ContainerAppDiagnosticSupportTopic> supportTopicList = null, IEnumerable<string> analysisTypes = null, float? score = null)
        {
            supportTopicList ??= new List<ContainerAppDiagnosticSupportTopic>();
            analysisTypes ??= new List<string>();

            return new ContainerAppDiagnosticsMetadata(
                id,
                name,
                resourceType,
                systemData,
                description,
                author,
                category,
                supportTopicList?.ToList(),
                analysisTypes?.ToList(),
                score,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppDiagnosticSupportTopic"/>. </summary>
        /// <param name="id"> Unique topic identifier. </param>
        /// <param name="pesId"> PES identifier. </param>
        /// <returns> A new <see cref="Models.ContainerAppDiagnosticSupportTopic"/> instance for mocking. </returns>
        public static ContainerAppDiagnosticSupportTopic ContainerAppDiagnosticSupportTopic(string id = null, string pesId = null)
        {
            return new ContainerAppDiagnosticSupportTopic(id, pesId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppManagedEnvironmentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="kind"> Kind of the Environment. </param>
        /// <param name="identity"> Managed identities for the Managed Environment to interact with other Azure services without maintaining any secrets or credentials in code. </param>
        /// <param name="provisioningState"> Provisioning state of the Environment. </param>
        /// <param name="daprAIInstrumentationKey"> Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry. </param>
        /// <param name="daprAIConnectionString"> Application Insights connection string used by Dapr to export Service to Service communication telemetry. </param>
        /// <param name="vnetConfiguration"> Vnet configuration for the environment. </param>
        /// <param name="deploymentErrors"> Any errors that occurred during deployment or deployment validation. </param>
        /// <param name="defaultDomain"> Default Domain Name for the cluster. </param>
        /// <param name="staticIP"> Static IP of the Environment. </param>
        /// <param name="appLogsConfiguration"> Cluster configuration which enables the log daemon to export app logs to configured destination. </param>
        /// <param name="appInsightsConnectionString"> Environment level Application Insights configuration. </param>
        /// <param name="openTelemetryConfiguration"> Environment Open Telemetry configuration. </param>
        /// <param name="isZoneRedundant"> Whether or not this Managed Environment is zone-redundant. </param>
        /// <param name="availabilityZones"> The list of availability zones to use for managed environment. </param>
        /// <param name="customDomainConfiguration"> Custom domain configuration for the environment. </param>
        /// <param name="eventStreamEndpoint"> The endpoint of the eventstream of the Environment. </param>
        /// <param name="workloadProfiles"> Workload profiles configured for the Managed Environment. </param>
        /// <param name="kedaVersion"> The configuration of Keda component. </param>
        /// <param name="daprVersion"> The configuration of Dapr component. </param>
        /// <param name="infrastructureResourceGroup"> Name of the platform-managed resource group created for the Managed Environment to host infrastructure resources. If a subnet ID is provided, this resource group will be created in the same subscription as the subnet. </param>
        /// <param name="isMtlsEnabled"> Peer authentication settings for the Managed Environment. </param>
        /// <param name="isPeerToPeerEncryptionEnabled"> Peer traffic settings for the Managed Environment. </param>
        /// <param name="privateEndpointConnections"> Private endpoint connections to the resource. </param>
        /// <param name="publicNetworkAccess"> Property to allow or block all public traffic. Allowed Values: 'Enabled', 'Disabled'. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppManagedEnvironmentData"/> instance for mocking. </returns>
        public static ContainerAppManagedEnvironmentData ContainerAppManagedEnvironmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string kind = null, ManagedServiceIdentity identity = null, ContainerAppEnvironmentProvisioningState? provisioningState = null, string daprAIInstrumentationKey = null, string daprAIConnectionString = null, ContainerAppVnetConfiguration vnetConfiguration = null, string deploymentErrors = null, string defaultDomain = null, IPAddress staticIP = null, ContainerAppLogsConfiguration appLogsConfiguration = null, string appInsightsConnectionString = null, OpenTelemetryConfiguration openTelemetryConfiguration = null, bool? isZoneRedundant = null, IEnumerable<string> availabilityZones = null, ContainerAppCustomDomainConfiguration customDomainConfiguration = null, string eventStreamEndpoint = null, IEnumerable<ContainerAppWorkloadProfile> workloadProfiles = null, string kedaVersion = null, string daprVersion = null, string infrastructureResourceGroup = null, bool? isMtlsEnabled = null, bool? isPeerToPeerEncryptionEnabled = null, IEnumerable<AppContainersPrivateEndpointConnectionData> privateEndpointConnections = null, PublicNetworkAccess? publicNetworkAccess = null)
        {
            tags ??= new Dictionary<string, string>();
            availabilityZones ??= new List<string>();
            workloadProfiles ??= new List<ContainerAppWorkloadProfile>();
            privateEndpointConnections ??= new List<AppContainersPrivateEndpointConnectionData>();

            return new ContainerAppManagedEnvironmentData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                kind,
                identity,
                provisioningState,
                daprAIInstrumentationKey,
                daprAIConnectionString,
                vnetConfiguration,
                deploymentErrors,
                defaultDomain,
                staticIP,
                appLogsConfiguration,
                appInsightsConnectionString != null ? new AppInsightsConfiguration(appInsightsConnectionString, serializedAdditionalRawData: null) : null,
                openTelemetryConfiguration,
                isZoneRedundant,
                availabilityZones?.ToList(),
                customDomainConfiguration,
                eventStreamEndpoint,
                workloadProfiles?.ToList(),
                kedaVersion != null ? new KedaConfiguration(kedaVersion, serializedAdditionalRawData: null) : null,
                daprVersion != null ? new DaprConfiguration(daprVersion, serializedAdditionalRawData: null) : null,
                infrastructureResourceGroup,
                isMtlsEnabled != null ? new ManagedEnvironmentPropertiesPeerAuthentication(new Mtls(isMtlsEnabled, serializedAdditionalRawData: null), serializedAdditionalRawData: null) : null,
                isPeerToPeerEncryptionEnabled != null ? new ManagedEnvironmentPropertiesPeerTrafficConfiguration(new ManagedEnvironmentPropertiesPeerTrafficConfigurationEncryption(isPeerToPeerEncryptionEnabled, serializedAdditionalRawData: null), serializedAdditionalRawData: null) : null,
                privateEndpointConnections?.ToList(),
                publicNetworkAccess,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.AppContainersPrivateEndpointConnectionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupIds"> The group ids for the private endpoint resource. </param>
        /// <param name="privateEndpointId"> The resource of private end point. </param>
        /// <param name="connectionState"> A collection of information about the state of the connection between service consumer and provider. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection resource. </param>
        /// <returns> A new <see cref="AppContainers.AppContainersPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static AppContainersPrivateEndpointConnectionData AppContainersPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<string> groupIds = null, ResourceIdentifier privateEndpointId = null, AppContainersPrivateLinkServiceConnectionState connectionState = null, AppContainersPrivateEndpointConnectionProvisioningState? provisioningState = null)
        {
            groupIds ??= new List<string>();

            return new AppContainersPrivateEndpointConnectionData(
                id,
                name,
                resourceType,
                systemData,
                groupIds?.ToList(),
                privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null,
                connectionState,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppJobData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The complex type of the extended location. </param>
        /// <param name="identity"> Managed identities needed by a container app job to interact with other Azure services to not maintain any secrets or credentials in code. </param>
        /// <param name="provisioningState"> Provisioning state of the Container Apps Job. </param>
        /// <param name="runningState"> Current running state of the job. </param>
        /// <param name="environmentId"> Resource ID of environment. </param>
        /// <param name="workloadProfileName"> Workload profile name to pin for container apps job execution. </param>
        /// <param name="configuration"> Container Apps Job configuration properties. </param>
        /// <param name="template"> Container Apps job definition. </param>
        /// <param name="outboundIPAddresses"> Outbound IP Addresses of a container apps job. </param>
        /// <param name="eventStreamEndpoint"> The endpoint of the eventstream of the container apps job. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppJobData"/> instance for mocking. </returns>
        public static ContainerAppJobData ContainerAppJobData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ContainerAppExtendedLocation extendedLocation = null, ManagedServiceIdentity identity = null, ContainerAppJobProvisioningState? provisioningState = null, JobRunningState? runningState = null, string environmentId = null, string workloadProfileName = null, ContainerAppJobConfiguration configuration = null, ContainerAppJobTemplate template = null, IEnumerable<string> outboundIPAddresses = null, string eventStreamEndpoint = null)
        {
            tags ??= new Dictionary<string, string>();
            outboundIPAddresses ??= new List<string>();

            return new ContainerAppJobData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                extendedLocation,
                identity,
                provisioningState,
                runningState,
                environmentId,
                workloadProfileName,
                configuration,
                template,
                outboundIPAddresses?.ToList(),
                eventStreamEndpoint,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.DotNetComponentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="componentType"> Type of the .NET Component. </param>
        /// <param name="provisioningState"> Provisioning state of the .NET Component. </param>
        /// <param name="configurations"> List of .NET Components configuration properties. </param>
        /// <param name="serviceBinds"> List of .NET Components that are bound to the .NET component. </param>
        /// <returns> A new <see cref="AppContainers.DotNetComponentData"/> instance for mocking. </returns>
        public static DotNetComponentData DotNetComponentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DotNetComponentType? componentType = null, DotNetComponentProvisioningState? provisioningState = null, IEnumerable<DotNetComponentConfigurationProperty> configurations = null, IEnumerable<DotNetComponentServiceBind> serviceBinds = null)
        {
            configurations ??= new List<DotNetComponentConfigurationProperty>();
            serviceBinds ??= new List<DotNetComponentServiceBind>();

            return new DotNetComponentData(
                id,
                name,
                resourceType,
                systemData,
                componentType,
                provisioningState,
                configurations?.ToList(),
                serviceBinds?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.JavaComponentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Java Component resource specific properties
        /// Please note <see cref="Models.JavaComponentProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.NacosComponent"/>, <see cref="Models.SpringBootAdminComponent"/>, <see cref="Models.SpringCloudConfigComponent"/>, <see cref="Models.SpringCloudEurekaComponent"/> and <see cref="Models.SpringCloudGatewayComponent"/>.
        /// </param>
        /// <returns> A new <see cref="AppContainers.JavaComponentData"/> instance for mocking. </returns>
        public static JavaComponentData JavaComponentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, JavaComponentProperties properties = null)
        {
            return new JavaComponentData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.JavaComponentProperties"/>. </summary>
        /// <param name="componentType"> Type of the Java Component. </param>
        /// <param name="provisioningState"> Provisioning state of the Java Component. </param>
        /// <param name="configurations"> List of Java Components configuration properties. </param>
        /// <param name="scale"> Java component scaling configurations. </param>
        /// <param name="serviceBinds"> List of Java Components that are bound to the Java component. </param>
        /// <returns> A new <see cref="Models.JavaComponentProperties"/> instance for mocking. </returns>
        public static JavaComponentProperties JavaComponentProperties(string componentType = null, JavaComponentProvisioningState? provisioningState = null, IEnumerable<JavaComponentConfigurationProperty> configurations = null, JavaComponentPropertiesScale scale = null, IEnumerable<JavaComponentServiceBind> serviceBinds = null)
        {
            configurations ??= new List<JavaComponentConfigurationProperty>();
            serviceBinds ??= new List<JavaComponentServiceBind>();

            return new UnknownJavaComponentProperties(
                componentType == null ? default : new JavaComponentType(componentType),
                provisioningState,
                configurations?.ToList(),
                scale,
                serviceBinds?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppJobExecutionBase"/>. </summary>
        /// <param name="name"> Job execution name. </param>
        /// <param name="id"> Job execution Id. </param>
        /// <returns> A new <see cref="Models.ContainerAppJobExecutionBase"/> instance for mocking. </returns>
        public static ContainerAppJobExecutionBase ContainerAppJobExecutionBase(string name = null, string id = null)
        {
            return new ContainerAppJobExecutionBase(name, id, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppJobExecutions"/>. </summary>
        /// <param name="value"> Collection of resources. </param>
        /// <param name="nextLink"> Link to next page of resources. </param>
        /// <returns> A new <see cref="Models.ContainerAppJobExecutions"/> instance for mocking. </returns>
        public static ContainerAppJobExecutions ContainerAppJobExecutions(IEnumerable<ContainerAppJobExecutionData> value = null, string nextLink = null)
        {
            value ??= new List<ContainerAppJobExecutionData>();

            return new ContainerAppJobExecutions(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppJobExecutionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="status"> Current running State of the job. </param>
        /// <param name="startOn"> Job execution start time. </param>
        /// <param name="endOn"> Job execution end time. </param>
        /// <param name="template"> Job's execution container. </param>
        /// <param name="detailedStatusReplicas"> Detailed status of the job execution. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppJobExecutionData"/> instance for mocking. </returns>
        public static ContainerAppJobExecutionData ContainerAppJobExecutionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, JobExecutionRunningState? status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, ContainerAppJobExecutionTemplate template = null, IEnumerable<ReplicaExecutionStatus> detailedStatusReplicas = null)
        {
            detailedStatusReplicas ??= new List<ReplicaExecutionStatus>();

            return new ContainerAppJobExecutionData(
                id,
                name,
                resourceType,
                systemData,
                status,
                startOn,
                endOn,
                template,
                detailedStatusReplicas != null ? new ExecutionStatus(detailedStatusReplicas?.ToList(), serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReplicaExecutionStatus"/>. </summary>
        /// <param name="name"> Replica Name. </param>
        /// <param name="containers"> Containers in the execution replica. </param>
        /// <returns> A new <see cref="Models.ReplicaExecutionStatus"/> instance for mocking. </returns>
        public static ReplicaExecutionStatus ReplicaExecutionStatus(string name = null, IEnumerable<ContainerExecutionStatus> containers = null)
        {
            containers ??= new List<ContainerExecutionStatus>();

            return new ReplicaExecutionStatus(name, containers?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerExecutionStatus"/>. </summary>
        /// <param name="name"> Container Name. </param>
        /// <param name="code"> Exit code. </param>
        /// <param name="additionalInformation"> Additional information for the container status. </param>
        /// <param name="status"> Status of the container. </param>
        /// <returns> A new <see cref="Models.ContainerExecutionStatus"/> instance for mocking. </returns>
        public static ContainerExecutionStatus ContainerExecutionStatus(string name = null, int? code = null, string additionalInformation = null, string status = null)
        {
            return new ContainerExecutionStatus(name, code, additionalInformation, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.LogicAppData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="AppContainers.LogicAppData"/> instance for mocking. </returns>
        public static LogicAppData LogicAppData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BinaryData properties = null)
        {
            return new LogicAppData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.WorkflowEnvelopeData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="kind"> The resource kind. </param>
        /// <param name="location"> The resource location. </param>
        /// <param name="properties"> Additional workflow properties. </param>
        /// <returns> A new <see cref="AppContainers.WorkflowEnvelopeData"/> instance for mocking. </returns>
        public static WorkflowEnvelopeData WorkflowEnvelopeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string kind = null, AzureLocation? location = null, WorkflowEnvelopeProperties properties = null)
        {
            return new WorkflowEnvelopeData(
                id,
                name,
                resourceType,
                systemData,
                kind,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WorkflowEnvelopeProperties"/>. </summary>
        /// <param name="files"> Gets or sets the files. </param>
        /// <param name="flowState"> Gets or sets the state of the workflow. </param>
        /// <param name="health"> Gets or sets workflow health. </param>
        /// <returns> A new <see cref="Models.WorkflowEnvelopeProperties"/> instance for mocking. </returns>
        public static WorkflowEnvelopeProperties WorkflowEnvelopeProperties(BinaryData files = null, WorkflowState? flowState = null, WorkflowHealth health = null)
        {
            return new WorkflowEnvelopeProperties(files, flowState, health, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WorkflowHealth"/>. </summary>
        /// <param name="state"> Gets or sets the workflow health state. </param>
        /// <param name="error"> Gets or sets the workflow error. </param>
        /// <returns> A new <see cref="Models.WorkflowHealth"/> instance for mocking. </returns>
        public static WorkflowHealth WorkflowHealth(WorkflowHealthState state = default, ResponseError error = null)
        {
            return new WorkflowHealth(state, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppManagedCertificateData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> Certificate resource specific properties. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppManagedCertificateData"/> instance for mocking. </returns>
        public static ContainerAppManagedCertificateData ContainerAppManagedCertificateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedCertificateProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ContainerAppManagedCertificateData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ManagedCertificateProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the certificate. </param>
        /// <param name="subjectName"> Subject name of the certificate. </param>
        /// <param name="error"> Any error occurred during the certificate provision. </param>
        /// <param name="domainControlValidation"> Selected type of domain control validation for managed certificates. </param>
        /// <param name="validationToken"> A TXT token used for DNS TXT domain control validation when issuing this type of managed certificates. </param>
        /// <returns> A new <see cref="Models.ManagedCertificateProperties"/> instance for mocking. </returns>
        public static ManagedCertificateProperties ManagedCertificateProperties(ContainerAppCertificateProvisioningState? provisioningState = null, string subjectName = null, string error = null, ManagedCertificateDomainControlValidation? domainControlValidation = null, string validationToken = null)
        {
            return new ManagedCertificateProperties(
                provisioningState,
                subjectName,
                error,
                domainControlValidation,
                validationToken,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppEnvironmentAuthToken"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="token"> Auth token value. </param>
        /// <param name="expireOn"> Token expiration date. </param>
        /// <returns> A new <see cref="Models.ContainerAppEnvironmentAuthToken"/> instance for mocking. </returns>
        public static ContainerAppEnvironmentAuthToken ContainerAppEnvironmentAuthToken(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string token = null, DateTimeOffset? expireOn = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ContainerAppEnvironmentAuthToken(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                token,
                expireOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppWorkloadProfileState"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Workload Profile resource specific properties. </param>
        /// <returns> A new <see cref="Models.ContainerAppWorkloadProfileState"/> instance for mocking. </returns>
        public static ContainerAppWorkloadProfileState ContainerAppWorkloadProfileState(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ContainerAppWorkloadProfileStateProperties properties = null)
        {
            return new ContainerAppWorkloadProfileState(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AppContainersPrivateLinkResource"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> The private link resource private link DNS zone name. </param>
        /// <returns> A new <see cref="Models.AppContainersPrivateLinkResource"/> instance for mocking. </returns>
        public static AppContainersPrivateLinkResource AppContainersPrivateLinkResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new AppContainersPrivateLinkResource(
                id,
                name,
                resourceType,
                systemData,
                groupId,
                requiredMembers?.ToList(),
                requiredZoneNames?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.DaprComponentResiliencyPolicyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="inboundPolicy"> The optional inbound component resiliency policy configuration. </param>
        /// <param name="outboundPolicy"> The optional outbound component resiliency policy configuration. </param>
        /// <returns> A new <see cref="AppContainers.DaprComponentResiliencyPolicyData"/> instance for mocking. </returns>
        public static DaprComponentResiliencyPolicyData DaprComponentResiliencyPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DaprComponentResiliencyPolicyConfiguration inboundPolicy = null, DaprComponentResiliencyPolicyConfiguration outboundPolicy = null)
        {
            return new DaprComponentResiliencyPolicyData(
                id,
                name,
                resourceType,
                systemData,
                inboundPolicy,
                outboundPolicy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppDaprComponentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="componentType"> Component type. </param>
        /// <param name="version"> Component version. </param>
        /// <param name="ignoreErrors"> Boolean describing if the component errors are ignores. </param>
        /// <param name="initTimeout"> Initialization timeout. </param>
        /// <param name="secrets"> Collection of secrets used by a Dapr component. </param>
        /// <param name="secretStoreComponent"> Name of a Dapr component to retrieve component secrets from. </param>
        /// <param name="metadata"> Component metadata. </param>
        /// <param name="scopes"> Names of container apps that can use this Dapr component. </param>
        /// <param name="serviceComponentBind"> List of container app services that are bound to the Dapr component. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppDaprComponentData"/> instance for mocking. </returns>
        public static ContainerAppDaprComponentData ContainerAppDaprComponentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string componentType = null, string version = null, bool? ignoreErrors = null, string initTimeout = null, IEnumerable<ContainerAppWritableSecret> secrets = null, string secretStoreComponent = null, IEnumerable<ContainerAppDaprMetadata> metadata = null, IEnumerable<string> scopes = null, IEnumerable<DaprComponentServiceBinding> serviceComponentBind = null)
        {
            secrets ??= new List<ContainerAppWritableSecret>();
            metadata ??= new List<ContainerAppDaprMetadata>();
            scopes ??= new List<string>();
            serviceComponentBind ??= new List<DaprComponentServiceBinding>();

            return new ContainerAppDaprComponentData(
                id,
                name,
                resourceType,
                systemData,
                componentType,
                version,
                ignoreErrors,
                initTimeout,
                secrets?.ToList(),
                secretStoreComponent,
                metadata?.ToList(),
                scopes?.ToList(),
                serviceComponentBind?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.DaprSubscriptionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="pubsubName"> Dapr PubSub component name. </param>
        /// <param name="topic"> Topic name. </param>
        /// <param name="deadLetterTopic"> Deadletter topic name. </param>
        /// <param name="routes"> Subscription routes. </param>
        /// <param name="scopes"> Application scopes to restrict the subscription to specific apps. </param>
        /// <param name="metadata"> Subscription metadata. </param>
        /// <param name="bulkSubscribe"> Bulk subscription options. </param>
        /// <returns> A new <see cref="AppContainers.DaprSubscriptionData"/> instance for mocking. </returns>
        public static DaprSubscriptionData DaprSubscriptionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string pubsubName = null, string topic = null, string deadLetterTopic = null, DaprSubscriptionRoutes routes = null, IEnumerable<string> scopes = null, IDictionary<string, string> metadata = null, DaprSubscriptionBulkSubscribeConfig bulkSubscribe = null)
        {
            scopes ??= new List<string>();
            metadata ??= new Dictionary<string, string>();

            return new DaprSubscriptionData(
                id,
                name,
                resourceType,
                systemData,
                pubsubName,
                topic,
                deadLetterTopic,
                routes,
                scopes?.ToList(),
                metadata,
                bulkSubscribe,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.HttpRouteConfigData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Http Route Config properties. </param>
        /// <returns> A new <see cref="AppContainers.HttpRouteConfigData"/> instance for mocking. </returns>
        public static HttpRouteConfigData HttpRouteConfigData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, HttpRouteConfigProperties properties = null)
        {
            return new HttpRouteConfigData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HttpRouteConfigProperties"/>. </summary>
        /// <param name="provisioningState"> The provisioning state of the Http Route Config in cluster. </param>
        /// <param name="provisioningErrors"> List of errors when trying to reconcile http routes. </param>
        /// <param name="fqdn"> FQDN of the route resource. </param>
        /// <param name="customDomains"> Custom domain bindings for http Routes' hostnames. </param>
        /// <param name="rules"> Routing Rules for http route resource. </param>
        /// <returns> A new <see cref="Models.HttpRouteConfigProperties"/> instance for mocking. </returns>
        public static HttpRouteConfigProperties HttpRouteConfigProperties(HttpRouteProvisioningState? provisioningState = null, IEnumerable<HttpRouteProvisioningErrors> provisioningErrors = null, string fqdn = null, IEnumerable<ContainerAppCustomDomain> customDomains = null, IEnumerable<HttpRouteRule> rules = null)
        {
            provisioningErrors ??= new List<HttpRouteProvisioningErrors>();
            customDomains ??= new List<ContainerAppCustomDomain>();
            rules ??= new List<HttpRouteRule>();

            return new HttpRouteConfigProperties(
                provisioningState,
                provisioningErrors?.ToList(),
                fqdn,
                customDomains?.ToList(),
                rules?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HttpRouteProvisioningErrors"/>. </summary>
        /// <param name="timestamp"> Timestamp error occured at. </param>
        /// <param name="message"> Description or error message. </param>
        /// <returns> A new <see cref="Models.HttpRouteProvisioningErrors"/> instance for mocking. </returns>
        public static HttpRouteProvisioningErrors HttpRouteProvisioningErrors(DateTimeOffset? timestamp = null, string message = null)
        {
            return new HttpRouteProvisioningErrors(timestamp, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.MaintenanceConfigurationResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="scheduledEntries"> List of maintenance schedules for a managed environment. </param>
        /// <returns> A new <see cref="AppContainers.MaintenanceConfigurationResourceData"/> instance for mocking. </returns>
        public static MaintenanceConfigurationResourceData MaintenanceConfigurationResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<ScheduledEntry> scheduledEntries = null)
        {
            scheduledEntries ??= new List<ScheduledEntry>();

            return new MaintenanceConfigurationResourceData(
                id,
                name,
                resourceType,
                systemData,
                scheduledEntries?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppManagedEnvironmentStorageData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Storage properties. </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppManagedEnvironmentStorageData"/> instance for mocking. </returns>
        public static ContainerAppManagedEnvironmentStorageData ContainerAppManagedEnvironmentStorageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedEnvironmentStorageProperties properties = null)
        {
            return new ContainerAppManagedEnvironmentStorageData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.SessionPoolData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed identities needed by a session pool to interact with other Azure services to not maintain any secrets or credentials in code. </param>
        /// <param name="environmentId"> Resource ID of the session pool's environment. </param>
        /// <param name="containerType"> The container type of the sessions. </param>
        /// <param name="poolManagementType"> The pool management type of the session pool. </param>
        /// <param name="nodeCount"> The number of nodes the session pool is using. </param>
        /// <param name="scaleConfiguration"> The scale configuration of the session pool. </param>
        /// <param name="secrets"> The secrets of the session pool. </param>
        /// <param name="dynamicPoolConfiguration"> The pool configuration if the poolManagementType is dynamic. </param>
        /// <param name="customContainerTemplate"> The custom container configuration if the containerType is CustomContainer. </param>
        /// <param name="sessionNetworkStatus"> The network configuration of the sessions in the session pool. </param>
        /// <param name="poolManagementEndpoint"> The endpoint to manage the pool. </param>
        /// <param name="provisioningState"> Provisioning state of the session pool. </param>
        /// <param name="managedIdentitySettings"> Optional settings for a Managed Identity that is assigned to the Session pool. </param>
        /// <returns> A new <see cref="AppContainers.SessionPoolData"/> instance for mocking. </returns>
        public static SessionPoolData SessionPoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, ResourceIdentifier environmentId = null, ContainerType? containerType = null, PoolManagementType? poolManagementType = null, int? nodeCount = null, ScaleConfiguration scaleConfiguration = null, IEnumerable<SessionPoolSecret> secrets = null, DynamicPoolConfiguration dynamicPoolConfiguration = null, CustomContainerTemplate customContainerTemplate = null, SessionNetworkStatus? sessionNetworkStatus = null, Uri poolManagementEndpoint = null, SessionPoolProvisioningState? provisioningState = null, IEnumerable<ManagedIdentitySetting> managedIdentitySettings = null)
        {
            tags ??= new Dictionary<string, string>();
            secrets ??= new List<SessionPoolSecret>();
            managedIdentitySettings ??= new List<ManagedIdentitySetting>();

            return new SessionPoolData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                identity,
                environmentId,
                containerType,
                poolManagementType,
                nodeCount,
                scaleConfiguration,
                secrets?.ToList(),
                dynamicPoolConfiguration,
                customContainerTemplate,
                sessionNetworkStatus != null ? new SessionNetworkConfiguration(sessionNetworkStatus, serializedAdditionalRawData: null) : null,
                poolManagementEndpoint,
                provisioningState,
                managedIdentitySettings?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AppContainers.ContainerAppSourceControlData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="operationState"> Current provisioning State of the operation. </param>
        /// <param name="repoUri"> The repo url which will be integrated to ContainerApp. </param>
        /// <param name="branch"> The branch which will trigger the auto deployment. </param>
        /// <param name="gitHubActionConfiguration">
        /// Container App Revision Template with all possible settings and the
        /// defaults if user did not provide them. The defaults are populated
        /// as they were at the creation time
        /// </param>
        /// <returns> A new <see cref="AppContainers.ContainerAppSourceControlData"/> instance for mocking. </returns>
        public static ContainerAppSourceControlData ContainerAppSourceControlData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ContainerAppSourceControlOperationState? operationState = null, Uri repoUri = null, string branch = null, ContainerAppGitHubActionConfiguration gitHubActionConfiguration = null)
        {
            return new ContainerAppSourceControlData(
                id,
                name,
                resourceType,
                systemData,
                operationState,
                repoUri,
                branch,
                gitHubActionConfiguration,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppUsage"/>. </summary>
        /// <param name="unit"> An enum describing the unit of usage measurement. </param>
        /// <param name="currentValue"> The current usage of the resource. </param>
        /// <param name="limit"> The maximum permitted usage of the resource. </param>
        /// <param name="name"> The name of the type of usage. </param>
        /// <returns> A new <see cref="Models.ContainerAppUsage"/> instance for mocking. </returns>
        public static ContainerAppUsage ContainerAppUsage(ContainerAppUsageUnit unit = default, float currentValue = default, float limit = default, ContainerAppUsageName name = null)
        {
            return new ContainerAppUsage(unit, currentValue, limit, name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAppUsageName"/>. </summary>
        /// <param name="value"> The name of the resource. </param>
        /// <param name="localizedValue"> The localized name of the resource. </param>
        /// <returns> A new <see cref="Models.ContainerAppUsageName"/> instance for mocking. </returns>
        public static ContainerAppUsageName ContainerAppUsageName(string value = null, string localizedValue = null)
        {
            return new ContainerAppUsageName(value, localizedValue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SpringCloudGatewayComponent"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the Java Component. </param>
        /// <param name="configurations"> List of Java Components configuration properties. </param>
        /// <param name="scale"> Java component scaling configurations. </param>
        /// <param name="serviceBinds"> List of Java Components that are bound to the Java component. </param>
        /// <param name="ingressFqdn"> Java Component Ingress configurations. </param>
        /// <param name="springCloudGatewayRoutes"> Gateway route definition. </param>
        /// <returns> A new <see cref="Models.SpringCloudGatewayComponent"/> instance for mocking. </returns>
        public static SpringCloudGatewayComponent SpringCloudGatewayComponent(JavaComponentProvisioningState? provisioningState = null, IEnumerable<JavaComponentConfigurationProperty> configurations = null, JavaComponentPropertiesScale scale = null, IEnumerable<JavaComponentServiceBind> serviceBinds = null, string ingressFqdn = null, IEnumerable<ScgRoute> springCloudGatewayRoutes = null)
        {
            configurations ??= new List<JavaComponentConfigurationProperty>();
            serviceBinds ??= new List<JavaComponentServiceBind>();
            springCloudGatewayRoutes ??= new List<ScgRoute>();

            return new SpringCloudGatewayComponent(
                JavaComponentType.SpringCloudGateway,
                provisioningState,
                configurations?.ToList(),
                scale,
                serviceBinds?.ToList(),
                serializedAdditionalRawData: null,
                ingressFqdn != null ? new JavaComponentIngress(ingressFqdn, serializedAdditionalRawData: null) : null,
                springCloudGatewayRoutes?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.SpringBootAdminComponent"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the Java Component. </param>
        /// <param name="configurations"> List of Java Components configuration properties. </param>
        /// <param name="scale"> Java component scaling configurations. </param>
        /// <param name="serviceBinds"> List of Java Components that are bound to the Java component. </param>
        /// <param name="ingressFqdn"> Java Component Ingress configurations. </param>
        /// <returns> A new <see cref="Models.SpringBootAdminComponent"/> instance for mocking. </returns>
        public static SpringBootAdminComponent SpringBootAdminComponent(JavaComponentProvisioningState? provisioningState = null, IEnumerable<JavaComponentConfigurationProperty> configurations = null, JavaComponentPropertiesScale scale = null, IEnumerable<JavaComponentServiceBind> serviceBinds = null, string ingressFqdn = null)
        {
            configurations ??= new List<JavaComponentConfigurationProperty>();
            serviceBinds ??= new List<JavaComponentServiceBind>();

            return new SpringBootAdminComponent(
                JavaComponentType.SpringBootAdmin,
                provisioningState,
                configurations?.ToList(),
                scale,
                serviceBinds?.ToList(),
                serializedAdditionalRawData: null,
                ingressFqdn != null ? new JavaComponentIngress(ingressFqdn, serializedAdditionalRawData: null) : null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NacosComponent"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the Java Component. </param>
        /// <param name="configurations"> List of Java Components configuration properties. </param>
        /// <param name="scale"> Java component scaling configurations. </param>
        /// <param name="serviceBinds"> List of Java Components that are bound to the Java component. </param>
        /// <param name="ingressFqdn"> Java Component Ingress configurations. </param>
        /// <returns> A new <see cref="Models.NacosComponent"/> instance for mocking. </returns>
        public static NacosComponent NacosComponent(JavaComponentProvisioningState? provisioningState = null, IEnumerable<JavaComponentConfigurationProperty> configurations = null, JavaComponentPropertiesScale scale = null, IEnumerable<JavaComponentServiceBind> serviceBinds = null, string ingressFqdn = null)
        {
            configurations ??= new List<JavaComponentConfigurationProperty>();
            serviceBinds ??= new List<JavaComponentServiceBind>();

            return new NacosComponent(
                JavaComponentType.Nacos,
                provisioningState,
                configurations?.ToList(),
                scale,
                serviceBinds?.ToList(),
                serializedAdditionalRawData: null,
                ingressFqdn != null ? new JavaComponentIngress(ingressFqdn, serializedAdditionalRawData: null) : null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SpringCloudEurekaComponent"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the Java Component. </param>
        /// <param name="configurations"> List of Java Components configuration properties. </param>
        /// <param name="scale"> Java component scaling configurations. </param>
        /// <param name="serviceBinds"> List of Java Components that are bound to the Java component. </param>
        /// <param name="ingressFqdn"> Java Component Ingress configurations. </param>
        /// <returns> A new <see cref="Models.SpringCloudEurekaComponent"/> instance for mocking. </returns>
        public static SpringCloudEurekaComponent SpringCloudEurekaComponent(JavaComponentProvisioningState? provisioningState = null, IEnumerable<JavaComponentConfigurationProperty> configurations = null, JavaComponentPropertiesScale scale = null, IEnumerable<JavaComponentServiceBind> serviceBinds = null, string ingressFqdn = null)
        {
            configurations ??= new List<JavaComponentConfigurationProperty>();
            serviceBinds ??= new List<JavaComponentServiceBind>();

            return new SpringCloudEurekaComponent(
                JavaComponentType.SpringCloudEureka,
                provisioningState,
                configurations?.ToList(),
                scale,
                serviceBinds?.ToList(),
                serializedAdditionalRawData: null,
                ingressFqdn != null ? new JavaComponentIngress(ingressFqdn, serializedAdditionalRawData: null) : null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SpringCloudConfigComponent"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the Java Component. </param>
        /// <param name="configurations"> List of Java Components configuration properties. </param>
        /// <param name="scale"> Java component scaling configurations. </param>
        /// <param name="serviceBinds"> List of Java Components that are bound to the Java component. </param>
        /// <returns> A new <see cref="Models.SpringCloudConfigComponent"/> instance for mocking. </returns>
        public static SpringCloudConfigComponent SpringCloudConfigComponent(JavaComponentProvisioningState? provisioningState = null, IEnumerable<JavaComponentConfigurationProperty> configurations = null, JavaComponentPropertiesScale scale = null, IEnumerable<JavaComponentServiceBind> serviceBinds = null)
        {
            configurations ??= new List<JavaComponentConfigurationProperty>();
            serviceBinds ??= new List<JavaComponentServiceBind>();

            return new SpringCloudConfigComponent(
                JavaComponentType.SpringCloudConfig,
                provisioningState,
                configurations?.ToList(),
                scale,
                serviceBinds?.ToList(),
                serializedAdditionalRawData: null);
        }
    }
}
