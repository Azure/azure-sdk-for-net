// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.AppContainers
{
    /// <summary>
    /// A class representing a collection of <see cref="LogicAppWorkflowEnvelopeResource"/> and their operations.
    /// Each <see cref="LogicAppWorkflowEnvelopeResource"/> in the collection will belong to the same instance of <see cref="LogicAppResource"/>.
    /// To get a <see cref="LogicAppWorkflowEnvelopeCollection"/> instance call the GetLogicAppWorkflowEnvelopes method from an instance of <see cref="LogicAppResource"/>.
    /// </summary>
    public partial class LogicAppWorkflowEnvelopeCollection : ArmCollection, IEnumerable<LogicAppWorkflowEnvelopeResource>, IAsyncEnumerable<LogicAppWorkflowEnvelopeResource>
    {
        private readonly ClientDiagnostics _logicAppWorkflowEnvelopeLogicAppsClientDiagnostics;
        private readonly LogicAppsRestOperations _logicAppWorkflowEnvelopeLogicAppsRestClient;

        /// <summary> Initializes a new instance of the <see cref="LogicAppWorkflowEnvelopeCollection"/> class for mocking. </summary>
        protected LogicAppWorkflowEnvelopeCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="LogicAppWorkflowEnvelopeCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal LogicAppWorkflowEnvelopeCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _logicAppWorkflowEnvelopeLogicAppsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AppContainers", LogicAppWorkflowEnvelopeResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(LogicAppWorkflowEnvelopeResource.ResourceType, out string logicAppWorkflowEnvelopeLogicAppsApiVersion);
            _logicAppWorkflowEnvelopeLogicAppsRestClient = new LogicAppsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, logicAppWorkflowEnvelopeLogicAppsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != LogicAppResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, LogicAppResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get workflow information by its name
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LogicApps_GetWorkflow</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LogicAppWorkflowEnvelopeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Workflow name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual async Task<Response<LogicAppWorkflowEnvelopeResource>> GetAsync(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _logicAppWorkflowEnvelopeLogicAppsClientDiagnostics.CreateScope("LogicAppWorkflowEnvelopeCollection.Get");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowEnvelopeLogicAppsRestClient.GetWorkflowAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, workflowName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LogicAppWorkflowEnvelopeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get workflow information by its name
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LogicApps_GetWorkflow</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LogicAppWorkflowEnvelopeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Workflow name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual Response<LogicAppWorkflowEnvelopeResource> Get(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _logicAppWorkflowEnvelopeLogicAppsClientDiagnostics.CreateScope("LogicAppWorkflowEnvelopeCollection.Get");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowEnvelopeLogicAppsRestClient.GetWorkflow(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, workflowName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LogicAppWorkflowEnvelopeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List the workflows for a logic app.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}/workflows</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LogicApps_ListWorkflows</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LogicAppWorkflowEnvelopeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LogicAppWorkflowEnvelopeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<LogicAppWorkflowEnvelopeResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _logicAppWorkflowEnvelopeLogicAppsRestClient.CreateListWorkflowsRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _logicAppWorkflowEnvelopeLogicAppsRestClient.CreateListWorkflowsNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new LogicAppWorkflowEnvelopeResource(Client, LogicAppWorkflowEnvelopeData.DeserializeLogicAppWorkflowEnvelopeData(e)), _logicAppWorkflowEnvelopeLogicAppsClientDiagnostics, Pipeline, "LogicAppWorkflowEnvelopeCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List the workflows for a logic app.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}/workflows</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LogicApps_ListWorkflows</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LogicAppWorkflowEnvelopeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LogicAppWorkflowEnvelopeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<LogicAppWorkflowEnvelopeResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _logicAppWorkflowEnvelopeLogicAppsRestClient.CreateListWorkflowsRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _logicAppWorkflowEnvelopeLogicAppsRestClient.CreateListWorkflowsNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new LogicAppWorkflowEnvelopeResource(Client, LogicAppWorkflowEnvelopeData.DeserializeLogicAppWorkflowEnvelopeData(e)), _logicAppWorkflowEnvelopeLogicAppsClientDiagnostics, Pipeline, "LogicAppWorkflowEnvelopeCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LogicApps_GetWorkflow</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LogicAppWorkflowEnvelopeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Workflow name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _logicAppWorkflowEnvelopeLogicAppsClientDiagnostics.CreateScope("LogicAppWorkflowEnvelopeCollection.Exists");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowEnvelopeLogicAppsRestClient.GetWorkflowAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, workflowName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LogicApps_GetWorkflow</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LogicAppWorkflowEnvelopeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Workflow name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual Response<bool> Exists(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _logicAppWorkflowEnvelopeLogicAppsClientDiagnostics.CreateScope("LogicAppWorkflowEnvelopeCollection.Exists");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowEnvelopeLogicAppsRestClient.GetWorkflow(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, workflowName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LogicApps_GetWorkflow</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LogicAppWorkflowEnvelopeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Workflow name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual async Task<NullableResponse<LogicAppWorkflowEnvelopeResource>> GetIfExistsAsync(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _logicAppWorkflowEnvelopeLogicAppsClientDiagnostics.CreateScope("LogicAppWorkflowEnvelopeCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowEnvelopeLogicAppsRestClient.GetWorkflowAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, workflowName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<LogicAppWorkflowEnvelopeResource>(response.GetRawResponse());
                return Response.FromValue(new LogicAppWorkflowEnvelopeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}/workflows/{workflowName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LogicApps_GetWorkflow</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LogicAppWorkflowEnvelopeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workflowName"> Workflow name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workflowName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workflowName"/> is null. </exception>
        public virtual NullableResponse<LogicAppWorkflowEnvelopeResource> GetIfExists(string workflowName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workflowName, nameof(workflowName));

            using var scope = _logicAppWorkflowEnvelopeLogicAppsClientDiagnostics.CreateScope("LogicAppWorkflowEnvelopeCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowEnvelopeLogicAppsRestClient.GetWorkflow(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, workflowName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<LogicAppWorkflowEnvelopeResource>(response.GetRawResponse());
                return Response.FromValue(new LogicAppWorkflowEnvelopeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<LogicAppWorkflowEnvelopeResource> IEnumerable<LogicAppWorkflowEnvelopeResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<LogicAppWorkflowEnvelopeResource> IAsyncEnumerable<LogicAppWorkflowEnvelopeResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
