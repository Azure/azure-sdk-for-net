// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AppContainers.Models;

namespace Azure.ResourceManager.AppContainers
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _availableWorkloadProfilesClientDiagnostics;
        private AvailableWorkloadProfilesRestOperations _availableWorkloadProfilesRestClient;
        private ClientDiagnostics _billingMetersClientDiagnostics;
        private BillingMetersRestOperations _billingMetersRestClient;
        private ClientDiagnostics _containerAppConnectedEnvironmentConnectedEnvironmentsClientDiagnostics;
        private ConnectedEnvironmentsRestOperations _containerAppConnectedEnvironmentConnectedEnvironmentsRestClient;
        private ClientDiagnostics _containerAppClientDiagnostics;
        private ContainerAppsRestOperations _containerAppRestClient;
        private ClientDiagnostics _containerAppManagedEnvironmentManagedEnvironmentsClientDiagnostics;
        private ManagedEnvironmentsRestOperations _containerAppManagedEnvironmentManagedEnvironmentsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics AvailableWorkloadProfilesClientDiagnostics => _availableWorkloadProfilesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppContainers", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AvailableWorkloadProfilesRestOperations AvailableWorkloadProfilesRestClient => _availableWorkloadProfilesRestClient ??= new AvailableWorkloadProfilesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics BillingMetersClientDiagnostics => _billingMetersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppContainers", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private BillingMetersRestOperations BillingMetersRestClient => _billingMetersRestClient ??= new BillingMetersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ContainerAppConnectedEnvironmentConnectedEnvironmentsClientDiagnostics => _containerAppConnectedEnvironmentConnectedEnvironmentsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppContainers", ContainerAppConnectedEnvironmentResource.ResourceType.Namespace, Diagnostics);
        private ConnectedEnvironmentsRestOperations ContainerAppConnectedEnvironmentConnectedEnvironmentsRestClient => _containerAppConnectedEnvironmentConnectedEnvironmentsRestClient ??= new ConnectedEnvironmentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ContainerAppConnectedEnvironmentResource.ResourceType));
        private ClientDiagnostics ContainerAppClientDiagnostics => _containerAppClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppContainers", ContainerAppResource.ResourceType.Namespace, Diagnostics);
        private ContainerAppsRestOperations ContainerAppRestClient => _containerAppRestClient ??= new ContainerAppsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ContainerAppResource.ResourceType));
        private ClientDiagnostics ContainerAppManagedEnvironmentManagedEnvironmentsClientDiagnostics => _containerAppManagedEnvironmentManagedEnvironmentsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppContainers", ContainerAppManagedEnvironmentResource.ResourceType.Namespace, Diagnostics);
        private ManagedEnvironmentsRestOperations ContainerAppManagedEnvironmentManagedEnvironmentsRestClient => _containerAppManagedEnvironmentManagedEnvironmentsRestClient ??= new ManagedEnvironmentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ContainerAppManagedEnvironmentResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Get all available workload profiles for a location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.App/locations/{location}/availableManagedEnvironmentsWorkloadProfileTypes
        /// Operation Id: AvailableWorkloadProfiles_Get
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContainerAppAvailableWorkloadProfile" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContainerAppAvailableWorkloadProfile> GetAvailableWorkloadProfilesAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            async Task<Page<ContainerAppAvailableWorkloadProfile>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailableWorkloadProfilesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAvailableWorkloadProfiles");
                scope.Start();
                try
                {
                    var response = await AvailableWorkloadProfilesRestClient.GetAsync(Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ContainerAppAvailableWorkloadProfile>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailableWorkloadProfilesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAvailableWorkloadProfiles");
                scope.Start();
                try
                {
                    var response = await AvailableWorkloadProfilesRestClient.GetNextPageAsync(nextLink, Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all available workload profiles for a location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.App/locations/{location}/availableManagedEnvironmentsWorkloadProfileTypes
        /// Operation Id: AvailableWorkloadProfiles_Get
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContainerAppAvailableWorkloadProfile" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContainerAppAvailableWorkloadProfile> GetAvailableWorkloadProfiles(AzureLocation location, CancellationToken cancellationToken = default)
        {
            Page<ContainerAppAvailableWorkloadProfile> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailableWorkloadProfilesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAvailableWorkloadProfiles");
                scope.Start();
                try
                {
                    var response = AvailableWorkloadProfilesRestClient.Get(Id.SubscriptionId, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ContainerAppAvailableWorkloadProfile> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailableWorkloadProfilesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAvailableWorkloadProfiles");
                scope.Start();
                try
                {
                    var response = AvailableWorkloadProfilesRestClient.GetNextPage(nextLink, Id.SubscriptionId, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all billingMeters for a location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.App/locations/{location}/billingMeters
        /// Operation Id: BillingMeters_Get
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContainerAppBillingMeter" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContainerAppBillingMeter> GetBillingMetersAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            async Task<Page<ContainerAppBillingMeter>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = BillingMetersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetBillingMeters");
                scope.Start();
                try
                {
                    var response = await BillingMetersRestClient.GetAsync(Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get all billingMeters for a location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.App/locations/{location}/billingMeters
        /// Operation Id: BillingMeters_Get
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContainerAppBillingMeter" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContainerAppBillingMeter> GetBillingMeters(AzureLocation location, CancellationToken cancellationToken = default)
        {
            Page<ContainerAppBillingMeter> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = BillingMetersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetBillingMeters");
                scope.Start();
                try
                {
                    var response = BillingMetersRestClient.Get(Id.SubscriptionId, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get all connectedEnvironments for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.App/connectedEnvironments
        /// Operation Id: ConnectedEnvironments_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContainerAppConnectedEnvironmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContainerAppConnectedEnvironmentResource> GetContainerAppConnectedEnvironmentsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ContainerAppConnectedEnvironmentResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ContainerAppConnectedEnvironmentConnectedEnvironmentsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerAppConnectedEnvironments");
                scope.Start();
                try
                {
                    var response = await ContainerAppConnectedEnvironmentConnectedEnvironmentsRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppConnectedEnvironmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ContainerAppConnectedEnvironmentResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ContainerAppConnectedEnvironmentConnectedEnvironmentsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerAppConnectedEnvironments");
                scope.Start();
                try
                {
                    var response = await ContainerAppConnectedEnvironmentConnectedEnvironmentsRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppConnectedEnvironmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all connectedEnvironments for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.App/connectedEnvironments
        /// Operation Id: ConnectedEnvironments_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContainerAppConnectedEnvironmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContainerAppConnectedEnvironmentResource> GetContainerAppConnectedEnvironments(CancellationToken cancellationToken = default)
        {
            Page<ContainerAppConnectedEnvironmentResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ContainerAppConnectedEnvironmentConnectedEnvironmentsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerAppConnectedEnvironments");
                scope.Start();
                try
                {
                    var response = ContainerAppConnectedEnvironmentConnectedEnvironmentsRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppConnectedEnvironmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ContainerAppConnectedEnvironmentResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ContainerAppConnectedEnvironmentConnectedEnvironmentsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerAppConnectedEnvironments");
                scope.Start();
                try
                {
                    var response = ContainerAppConnectedEnvironmentConnectedEnvironmentsRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppConnectedEnvironmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get the Container Apps in a given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.App/containerApps
        /// Operation Id: ContainerApps_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContainerAppResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContainerAppResource> GetContainerAppsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ContainerAppResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ContainerAppClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerApps");
                scope.Start();
                try
                {
                    var response = await ContainerAppRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ContainerAppResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ContainerAppClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerApps");
                scope.Start();
                try
                {
                    var response = await ContainerAppRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get the Container Apps in a given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.App/containerApps
        /// Operation Id: ContainerApps_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContainerAppResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContainerAppResource> GetContainerApps(CancellationToken cancellationToken = default)
        {
            Page<ContainerAppResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ContainerAppClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerApps");
                scope.Start();
                try
                {
                    var response = ContainerAppRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ContainerAppResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ContainerAppClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerApps");
                scope.Start();
                try
                {
                    var response = ContainerAppRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all Managed Environments for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.App/managedEnvironments
        /// Operation Id: ManagedEnvironments_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContainerAppManagedEnvironmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContainerAppManagedEnvironmentResource> GetContainerAppManagedEnvironmentsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ContainerAppManagedEnvironmentResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ContainerAppManagedEnvironmentManagedEnvironmentsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerAppManagedEnvironments");
                scope.Start();
                try
                {
                    var response = await ContainerAppManagedEnvironmentManagedEnvironmentsRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppManagedEnvironmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ContainerAppManagedEnvironmentResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ContainerAppManagedEnvironmentManagedEnvironmentsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerAppManagedEnvironments");
                scope.Start();
                try
                {
                    var response = await ContainerAppManagedEnvironmentManagedEnvironmentsRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppManagedEnvironmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all Managed Environments for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.App/managedEnvironments
        /// Operation Id: ManagedEnvironments_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContainerAppManagedEnvironmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContainerAppManagedEnvironmentResource> GetContainerAppManagedEnvironments(CancellationToken cancellationToken = default)
        {
            Page<ContainerAppManagedEnvironmentResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ContainerAppManagedEnvironmentManagedEnvironmentsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerAppManagedEnvironments");
                scope.Start();
                try
                {
                    var response = ContainerAppManagedEnvironmentManagedEnvironmentsRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppManagedEnvironmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ContainerAppManagedEnvironmentResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ContainerAppManagedEnvironmentManagedEnvironmentsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerAppManagedEnvironments");
                scope.Start();
                try
                {
                    var response = ContainerAppManagedEnvironmentManagedEnvironmentsRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerAppManagedEnvironmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
