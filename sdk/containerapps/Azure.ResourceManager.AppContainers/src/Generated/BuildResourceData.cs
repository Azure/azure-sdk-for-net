// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager.AppContainers.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppContainers
{
    /// <summary>
    /// A class representing the BuildResource data model.
    /// Information pertaining to an individual build.
    /// </summary>
    public partial class BuildResourceData : ResourceData
    {
        /// <summary> Initializes a new instance of BuildResourceData. </summary>
        public BuildResourceData()
        {
        }

        /// <summary> Initializes a new instance of BuildResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Build provisioning state. </param>
        /// <param name="buildStatus"> Status of the build once it has been provisioned. </param>
        /// <param name="destinationContainerRegistry"> Container registry that the final image will be uploaded to. </param>
        /// <param name="configuration"> Configuration of the build. </param>
        /// <param name="uploadEndpoint"> Endpoint to which the source code should be uploaded. </param>
        /// <param name="logStreamEndpoint"> Endpoint from which the build logs can be streamed. </param>
        /// <param name="tokenEndpoint"> Endpoint to use to retrieve an authentication token for log streaming and uploading source code. </param>
        internal BuildResourceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, BuildProvisioningState? provisioningState, BuildStatus? buildStatus, ContainerRegistryWithCustomImage destinationContainerRegistry, BuildConfiguration configuration, string uploadEndpoint, string logStreamEndpoint, string tokenEndpoint) : base(id, name, resourceType, systemData)
        {
            ProvisioningState = provisioningState;
            BuildStatus = buildStatus;
            DestinationContainerRegistry = destinationContainerRegistry;
            Configuration = configuration;
            UploadEndpoint = uploadEndpoint;
            LogStreamEndpoint = logStreamEndpoint;
            TokenEndpoint = tokenEndpoint;
        }

        /// <summary> Build provisioning state. </summary>
        public BuildProvisioningState? ProvisioningState { get; }
        /// <summary> Status of the build once it has been provisioned. </summary>
        public BuildStatus? BuildStatus { get; }
        /// <summary> Container registry that the final image will be uploaded to. </summary>
        public ContainerRegistryWithCustomImage DestinationContainerRegistry { get; set; }
        /// <summary> Configuration of the build. </summary>
        public BuildConfiguration Configuration { get; set; }
        /// <summary> Endpoint to which the source code should be uploaded. </summary>
        public string UploadEndpoint { get; }
        /// <summary> Endpoint from which the build logs can be streamed. </summary>
        public string LogStreamEndpoint { get; }
        /// <summary> Endpoint to use to retrieve an authentication token for log streaming and uploading source code. </summary>
        public string TokenEndpoint { get; }
    }
}
