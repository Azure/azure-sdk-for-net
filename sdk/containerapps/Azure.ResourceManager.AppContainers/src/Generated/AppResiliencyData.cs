// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager.AppContainers.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppContainers
{
    /// <summary>
    /// A class representing the AppResiliency data model.
    /// Configuration to setup App Resiliency
    /// </summary>
    public partial class AppResiliencyData : ResourceData
    {
        /// <summary> Initializes a new instance of AppResiliencyData. </summary>
        public AppResiliencyData()
        {
        }

        /// <summary> Initializes a new instance of AppResiliencyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="timeoutPolicy"> Policy to set request timeouts. </param>
        /// <param name="httpRetryPolicy"> Policy that defines http request retry conditions. </param>
        /// <param name="tcpRetryPolicy"> Policy that defines tcp request retry conditions. </param>
        /// <param name="circuitBreakerPolicy"> Policy that defines circuit breaker conditions. </param>
        /// <param name="httpConnectionPool"> Defines parameters for http connection pooling. </param>
        /// <param name="tcpConnectionPool"> Defines parameters for tcp connection pooling. </param>
        internal AppResiliencyData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, TimeoutPolicy timeoutPolicy, HttpRetryPolicy httpRetryPolicy, TcpRetryPolicy tcpRetryPolicy, CircuitBreakerPolicy circuitBreakerPolicy, HttpConnectionPool httpConnectionPool, TcpConnectionPool tcpConnectionPool) : base(id, name, resourceType, systemData)
        {
            TimeoutPolicy = timeoutPolicy;
            HttpRetryPolicy = httpRetryPolicy;
            TcpRetryPolicy = tcpRetryPolicy;
            CircuitBreakerPolicy = circuitBreakerPolicy;
            HttpConnectionPool = httpConnectionPool;
            TcpConnectionPool = tcpConnectionPool;
        }

        /// <summary> Policy to set request timeouts. </summary>
        public TimeoutPolicy TimeoutPolicy { get; set; }
        /// <summary> Policy that defines http request retry conditions. </summary>
        public HttpRetryPolicy HttpRetryPolicy { get; set; }
        /// <summary> Policy that defines tcp request retry conditions. </summary>
        internal TcpRetryPolicy TcpRetryPolicy { get; set; }
        /// <summary> Maximum number of attempts to connect to the tcp service. </summary>
        public int? TcpRetryMaxConnectAttempts
        {
            get => TcpRetryPolicy is null ? default : TcpRetryPolicy.MaxConnectAttempts;
            set
            {
                if (TcpRetryPolicy is null)
                    TcpRetryPolicy = new TcpRetryPolicy();
                TcpRetryPolicy.MaxConnectAttempts = value;
            }
        }

        /// <summary> Policy that defines circuit breaker conditions. </summary>
        public CircuitBreakerPolicy CircuitBreakerPolicy { get; set; }
        /// <summary> Defines parameters for http connection pooling. </summary>
        public HttpConnectionPool HttpConnectionPool { get; set; }
        /// <summary> Defines parameters for tcp connection pooling. </summary>
        internal TcpConnectionPool TcpConnectionPool { get; set; }
        /// <summary> Maximum number of tcp connections allowed. </summary>
        public int? MaxConnections
        {
            get => TcpConnectionPool is null ? default : TcpConnectionPool.MaxConnections;
            set
            {
                if (TcpConnectionPool is null)
                    TcpConnectionPool = new TcpConnectionPool();
                TcpConnectionPool.MaxConnections = value;
            }
        }
    }
}
