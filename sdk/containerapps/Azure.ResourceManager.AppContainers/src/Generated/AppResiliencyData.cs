// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.AppContainers.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppContainers
{
    /// <summary>
    /// A class representing the AppResiliency data model.
    /// Configuration to setup App Resiliency
    /// </summary>
    public partial class AppResiliencyData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AppResiliencyData"/>. </summary>
        public AppResiliencyData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AppResiliencyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="timeoutPolicy"> Policy to set request timeouts. </param>
        /// <param name="httpRetryPolicy"> Policy that defines http request retry conditions. </param>
        /// <param name="tcpRetryPolicy"> Policy that defines tcp request retry conditions. </param>
        /// <param name="circuitBreakerPolicy"> Policy that defines circuit breaker conditions. </param>
        /// <param name="httpConnectionPool"> Defines parameters for http connection pooling. </param>
        /// <param name="tcpConnectionPool"> Defines parameters for tcp connection pooling. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AppResiliencyData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, TimeoutPolicy timeoutPolicy, HttpRetryPolicy httpRetryPolicy, TcpRetryPolicy tcpRetryPolicy, CircuitBreakerPolicy circuitBreakerPolicy, HttpConnectionPool httpConnectionPool, TcpConnectionPool tcpConnectionPool, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            TimeoutPolicy = timeoutPolicy;
            HttpRetryPolicy = httpRetryPolicy;
            TcpRetryPolicy = tcpRetryPolicy;
            CircuitBreakerPolicy = circuitBreakerPolicy;
            HttpConnectionPool = httpConnectionPool;
            TcpConnectionPool = tcpConnectionPool;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Policy to set request timeouts. </summary>
        [WirePath("properties.timeoutPolicy")]
        public TimeoutPolicy TimeoutPolicy { get; set; }
        /// <summary> Policy that defines http request retry conditions. </summary>
        [WirePath("properties.httpRetryPolicy")]
        public HttpRetryPolicy HttpRetryPolicy { get; set; }
        /// <summary> Policy that defines tcp request retry conditions. </summary>
        internal TcpRetryPolicy TcpRetryPolicy { get; set; }
        /// <summary> Maximum number of attempts to connect to the tcp service. </summary>
        [WirePath("properties.tcpRetryPolicy.maxConnectAttempts")]
        public int? TcpRetryMaxConnectAttempts
        {
            get => TcpRetryPolicy is null ? default : TcpRetryPolicy.MaxConnectAttempts;
            set
            {
                if (TcpRetryPolicy is null)
                    TcpRetryPolicy = new TcpRetryPolicy();
                TcpRetryPolicy.MaxConnectAttempts = value;
            }
        }

        /// <summary> Policy that defines circuit breaker conditions. </summary>
        [WirePath("properties.circuitBreakerPolicy")]
        public CircuitBreakerPolicy CircuitBreakerPolicy { get; set; }
        /// <summary> Defines parameters for http connection pooling. </summary>
        [WirePath("properties.httpConnectionPool")]
        public HttpConnectionPool HttpConnectionPool { get; set; }
        /// <summary> Defines parameters for tcp connection pooling. </summary>
        internal TcpConnectionPool TcpConnectionPool { get; set; }
        /// <summary> Maximum number of tcp connections allowed. </summary>
        [WirePath("properties.tcpConnectionPool.maxConnections")]
        public int? MaxConnections
        {
            get => TcpConnectionPool is null ? default : TcpConnectionPool.MaxConnections;
            set
            {
                if (TcpConnectionPool is null)
                    TcpConnectionPool = new TcpConnectionPool();
                TcpConnectionPool.MaxConnections = value;
            }
        }
    }
}
