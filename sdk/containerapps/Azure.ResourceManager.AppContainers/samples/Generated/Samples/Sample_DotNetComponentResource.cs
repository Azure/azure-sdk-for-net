// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.AppContainers.Models;

namespace Azure.ResourceManager.AppContainers.Samples
{
    public partial class Sample_DotNetComponentResource
    {
        // Get .NET Component
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetNETComponent()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/DotNetComponents_Get.json
            // this example is just showing the usage of "DotNetComponents_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DotNetComponentResource created on azure
            // for more information of creating DotNetComponentResource, please refer to the document of DotNetComponentResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string environmentName = "myenvironment";
            string name = "mydotnetcomponent";
            ResourceIdentifier dotNetComponentResourceId = DotNetComponentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName, name);
            DotNetComponentResource dotNetComponent = client.GetDotNetComponentResource(dotNetComponentResourceId);

            // invoke the operation
            DotNetComponentResource result = await dotNetComponent.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DotNetComponentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get .NET Component with ServiceBinds
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetNETComponentWithServiceBinds()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/DotNetComponents_Get_ServiceBind.json
            // this example is just showing the usage of "DotNetComponents_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DotNetComponentResource created on azure
            // for more information of creating DotNetComponentResource, please refer to the document of DotNetComponentResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string environmentName = "myenvironment";
            string name = "mydotnetcomponent";
            ResourceIdentifier dotNetComponentResourceId = DotNetComponentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName, name);
            DotNetComponentResource dotNetComponent = client.GetDotNetComponentResource(dotNetComponentResourceId);

            // invoke the operation
            DotNetComponentResource result = await dotNetComponent.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DotNetComponentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch .NET Component
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchNETComponent()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/DotNetComponents_Patch.json
            // this example is just showing the usage of "DotNetComponents_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DotNetComponentResource created on azure
            // for more information of creating DotNetComponentResource, please refer to the document of DotNetComponentResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string environmentName = "myenvironment";
            string name = "mydotnetcomponent";
            ResourceIdentifier dotNetComponentResourceId = DotNetComponentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName, name);
            DotNetComponentResource dotNetComponent = client.GetDotNetComponentResource(dotNetComponentResourceId);

            // invoke the operation
            DotNetComponentData data = new DotNetComponentData()
            {
                ComponentType = DotNetComponentType.AspireDashboard,
                Configurations =
{
new DotNetComponentConfigurationProperty()
{
PropertyName = "dashboard-theme",
Value = "dark",
}
},
            };
            ArmOperation<DotNetComponentResource> lro = await dotNetComponent.UpdateAsync(WaitUntil.Completed, data);
            DotNetComponentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DotNetComponentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch .NET Component with ServiceBinds
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchNETComponentWithServiceBinds()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/DotNetComponents_Patch_ServiceBind.json
            // this example is just showing the usage of "DotNetComponents_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DotNetComponentResource created on azure
            // for more information of creating DotNetComponentResource, please refer to the document of DotNetComponentResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string environmentName = "myenvironment";
            string name = "mydotnetcomponent";
            ResourceIdentifier dotNetComponentResourceId = DotNetComponentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName, name);
            DotNetComponentResource dotNetComponent = client.GetDotNetComponentResource(dotNetComponentResourceId);

            // invoke the operation
            DotNetComponentData data = new DotNetComponentData()
            {
                ComponentType = DotNetComponentType.AspireDashboard,
                Configurations =
{
new DotNetComponentConfigurationProperty()
{
PropertyName = "dashboard-theme",
Value = "dark",
}
},
                ServiceBinds =
{
new DotNetComponentServiceBind()
{
Name = "yellowcat",
ServiceId = new ResourceIdentifier("/subscriptions/8efdecc5-919e-44eb-b179-915dca89ebf9/resourceGroups/examplerg/providers/Microsoft.App/managedEnvironments/myenvironment/dotNetComponents/yellowcat"),
}
},
            };
            ArmOperation<DotNetComponentResource> lro = await dotNetComponent.UpdateAsync(WaitUntil.Completed, data);
            DotNetComponentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DotNetComponentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete .NET Component
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteNETComponent()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/DotNetComponents_Delete.json
            // this example is just showing the usage of "DotNetComponents_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DotNetComponentResource created on azure
            // for more information of creating DotNetComponentResource, please refer to the document of DotNetComponentResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string environmentName = "myenvironment";
            string name = "mydotnetcomponent";
            ResourceIdentifier dotNetComponentResourceId = DotNetComponentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, environmentName, name);
            DotNetComponentResource dotNetComponent = client.GetDotNetComponentResource(dotNetComponentResourceId);

            // invoke the operation
            await dotNetComponent.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
