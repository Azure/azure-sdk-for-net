// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.AppContainers.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.AppContainers.Samples
{
    public partial class Sample_SessionPoolResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetSessionPool()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/stable/2025-01-01/examples/SessionPools_Get.json
            // this example is just showing the usage of "ContainerAppsSessionPools_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionPoolResource created on azure
            // for more information of creating SessionPoolResource, please refer to the document of SessionPoolResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "rg";
            string sessionPoolName = "testsessionpool";
            ResourceIdentifier sessionPoolResourceId = SessionPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sessionPoolName);
            SessionPoolResource sessionPool = client.GetSessionPoolResource(sessionPoolResourceId);

            // invoke the operation
            SessionPoolResource result = await sessionPool.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SessionPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteSessionPool()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/stable/2025-01-01/examples/SessionPools_Delete.json
            // this example is just showing the usage of "ContainerAppsSessionPools_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionPoolResource created on azure
            // for more information of creating SessionPoolResource, please refer to the document of SessionPoolResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "rg";
            string sessionPoolName = "testsessionpool";
            ResourceIdentifier sessionPoolResourceId = SessionPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sessionPoolName);
            SessionPoolResource sessionPool = client.GetSessionPoolResource(sessionPoolResourceId);

            // invoke the operation
            await sessionPool.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateSessionPool()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/stable/2025-01-01/examples/SessionPools_Patch.json
            // this example is just showing the usage of "ContainerAppsSessionPools_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionPoolResource created on azure
            // for more information of creating SessionPoolResource, please refer to the document of SessionPoolResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "rg";
            string sessionPoolName = "testsessionpool";
            ResourceIdentifier sessionPoolResourceId = SessionPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sessionPoolName);
            SessionPoolResource sessionPool = client.GetSessionPoolResource(sessionPoolResourceId);

            // invoke the operation
            SessionPoolPatch patch = new SessionPoolPatch
            {
                ScaleConfiguration = new SessionPoolScaleConfiguration
                {
                    MaxConcurrentSessions = 500,
                    ReadySessionInstances = 100,
                },
                CustomContainerTemplate = new CustomContainerTemplate
                {
                    Containers = {new SessionContainer
{
Image = "repo/testcontainer:v4",
Name = "testinitcontainer",
Command = {"/bin/sh"},
Args = {"-c", "while true; do echo hello; sleep 10;done"},
Resources = new SessionContainerResources
{
Cpu = 0.25,
Memory = "0.5Gi",
},
}},
                    IngressTargetPort = 80,
                },
                SessionNetworkStatus = SessionNetworkStatus.EgressEnabled,
            };
            ArmOperation<SessionPoolResource> lro = await sessionPool.UpdateAsync(WaitUntil.Completed, patch);
            SessionPoolResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SessionPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
