// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.AppContainers.Models;

namespace Azure.ResourceManager.AppContainers.Samples
{
    public partial class Sample_ContainerAppsPatchResource
    {
        // ContainerAppsPatches_Get_0
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ContainerAppsPatchesGet0()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/ContainerAppsPatches_Get.json
            // this example is just showing the usage of "ContainerAppsPatches_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ContainerAppsPatchResource created on azure
            // for more information of creating ContainerAppsPatchResource, please refer to the document of ContainerAppsPatchResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg";
            string containerAppName = "test-app";
            string patchName = "testPatch-25fe4b";
            ResourceIdentifier containerAppsPatchResourceId = ContainerAppsPatchResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, containerAppName, patchName);
            ContainerAppsPatchResource containerAppsPatchResource = client.GetContainerAppsPatchResource(containerAppsPatchResourceId);

            // invoke the operation
            ContainerAppsPatchResource result = await containerAppsPatchResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ContainerAppsPatchResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ContainerAppsPatches_Delete_0
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_ContainerAppsPatchesDelete0()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/ContainerAppsPatches_Delete.json
            // this example is just showing the usage of "ContainerAppsPatches_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ContainerAppsPatchResource created on azure
            // for more information of creating ContainerAppsPatchResource, please refer to the document of ContainerAppsPatchResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg";
            string containerAppName = "test-app";
            string patchName = "testPatch-25fe4b";
            ResourceIdentifier containerAppsPatchResourceId = ContainerAppsPatchResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, containerAppName, patchName);
            ContainerAppsPatchResource containerAppsPatchResource = client.GetContainerAppsPatchResource(containerAppsPatchResourceId);

            // invoke the operation
            await containerAppsPatchResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // ContainerAppsPatches_Skip_Configure_0
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task SkipConfigure_ContainerAppsPatchesSkipConfigure0()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/ContainerAppsPatches_Skip_Configure.json
            // this example is just showing the usage of "ContainerAppsPatches_SkipConfigure" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ContainerAppsPatchResource created on azure
            // for more information of creating ContainerAppsPatchResource, please refer to the document of ContainerAppsPatchResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg";
            string containerAppName = "test-app";
            string patchName = "testPatch-25fe4b";
            ResourceIdentifier containerAppsPatchResourceId = ContainerAppsPatchResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, containerAppName, patchName);
            ContainerAppsPatchResource containerAppsPatchResource = client.GetContainerAppsPatchResource(containerAppsPatchResourceId);

            // invoke the operation
            PatchSkipConfig patchSkipConfig = new PatchSkipConfig()
            {
                Skip = true,
            };
            await containerAppsPatchResource.SkipConfigureAsync(WaitUntil.Completed, patchSkipConfig);

            Console.WriteLine($"Succeeded");
        }

        // ContainerAppsPatches_Apply_0
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Apply_ContainerAppsPatchesApply0()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/ContainerAppsPatches_Apply.json
            // this example is just showing the usage of "ContainerAppsPatches_Apply" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ContainerAppsPatchResource created on azure
            // for more information of creating ContainerAppsPatchResource, please refer to the document of ContainerAppsPatchResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg";
            string containerAppName = "test-app";
            string patchName = "testPatch-25fe4b";
            ResourceIdentifier containerAppsPatchResourceId = ContainerAppsPatchResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, containerAppName, patchName);
            ContainerAppsPatchResource containerAppsPatchResource = client.GetContainerAppsPatchResource(containerAppsPatchResourceId);

            // invoke the operation
            ArmOperation<ContainerAppsPatchResource> lro = await containerAppsPatchResource.ApplyAsync(WaitUntil.Completed);
            ContainerAppsPatchResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ContainerAppsPatchResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
