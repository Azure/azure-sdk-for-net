// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.AppContainers.Models;

namespace Azure.ResourceManager.AppContainers.Samples
{
    public partial class Sample_LogicAppResource
    {
        // Get logic app extension by name
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetLogicAppExtensionByName()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/LogicApps_Get.json
            // this example is just showing the usage of "LogicApps_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LogicAppResource created on azure
            // for more information of creating LogicAppResource, please refer to the document of LogicAppResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string containerAppName = "testcontainerApp0";
            string logicAppName = "testcontainerApp0";
            ResourceIdentifier logicAppResourceId = LogicAppResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, containerAppName, logicAppName);
            LogicAppResource logicApp = client.GetLogicAppResource(logicAppResourceId);

            // invoke the operation
            LogicAppResource result = await logicApp.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            LogicAppData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create logic app extension
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateLogicAppExtension()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/LogicApps_Create.json
            // this example is just showing the usage of "LogicApps_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LogicAppResource created on azure
            // for more information of creating LogicAppResource, please refer to the document of LogicAppResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string containerAppName = "testcontainerApp0";
            string logicAppName = "testcontainerApp0";
            ResourceIdentifier logicAppResourceId = LogicAppResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, containerAppName, logicAppName);
            LogicAppResource logicApp = client.GetLogicAppResource(logicAppResourceId);

            // invoke the operation
            LogicAppData data = new LogicAppData()
            {
                Properties = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
                {
                }),
            };
            ArmOperation<LogicAppResource> lro = await logicApp.UpdateAsync(WaitUntil.Completed, data);
            LogicAppResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            LogicAppData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create logic app extension
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_CreateLogicAppExtension()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/LogicApps_Delete.json
            // this example is just showing the usage of "LogicApps_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LogicAppResource created on azure
            // for more information of creating LogicAppResource, please refer to the document of LogicAppResource
            string subscriptionId = "8efdecc5-919e-44eb-b179-915dca89ebf9";
            string resourceGroupName = "examplerg";
            string containerAppName = "testcontainerApp0";
            string logicAppName = "testcontainerApp0";
            ResourceIdentifier logicAppResourceId = LogicAppResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, containerAppName, logicAppName);
            LogicAppResource logicApp = client.GetLogicAppResource(logicAppResourceId);

            // invoke the operation
            await logicApp.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Delete workflow artifacts
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DeployWorkflowArtifacts_DeleteWorkflowArtifacts()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/LogicApps_DeleteDeployWorkflowArtifacts.json
            // this example is just showing the usage of "LogicApps_DeployWorkflowArtifacts" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LogicAppResource created on azure
            // for more information of creating LogicAppResource, please refer to the document of LogicAppResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string containerAppName = "testapp2";
            string logicAppName = "testapp2";
            ResourceIdentifier logicAppResourceId = LogicAppResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, containerAppName, logicAppName);
            LogicAppResource logicApp = client.GetLogicAppResource(logicAppResourceId);

            // invoke the operation
            WorkflowArtifacts workflowArtifacts = new WorkflowArtifacts()
            {
                FilesToDelete =
{
"test/workflow.json","test/"
},
            };
            await logicApp.DeployWorkflowArtifactsAsync(workflowArtifacts: workflowArtifacts);

            Console.WriteLine($"Succeeded");
        }

        // Deploys workflow artifacts
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DeployWorkflowArtifacts_DeploysWorkflowArtifacts()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/LogicApps_PostDeployWorkflowArtifacts.json
            // this example is just showing the usage of "LogicApps_DeployWorkflowArtifacts" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LogicAppResource created on azure
            // for more information of creating LogicAppResource, please refer to the document of LogicAppResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string containerAppName = "testapp2";
            string logicAppName = "testapp2";
            ResourceIdentifier logicAppResourceId = LogicAppResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, containerAppName, logicAppName);
            LogicAppResource logicApp = client.GetLogicAppResource(logicAppResourceId);

            // invoke the operation
            WorkflowArtifacts workflowArtifacts = new WorkflowArtifacts()
            {
                AppSettings = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
                {
                    ["eventHub_connectionString"] = "Endpoint=sb://example.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=EXAMPLE1a2b3c4d5e6fEXAMPLE="
                }),
                Files = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
                {
                    ["connections.json"] = new Dictionary<string, object>()
                    {
                        ["managedApiConnections"] = new Dictionary<string, object>()
                        {
                        },
                        ["serviceProviderConnections"] = new Dictionary<string, object>()
                        {
                            ["eventHub"] = new Dictionary<string, object>()
                            {
                                ["displayName"] = "example1",
                                ["parameterValues"] = new Dictionary<string, object>()
                                {
                                    ["connectionString"] = "@appsetting('eventHub_connectionString')"
                                },
                                ["serviceProvider"] = new Dictionary<string, object>()
                                {
                                    ["id"] = "/serviceProviders/eventHub"
                                }
                            }
                        }
                    },
                    ["test1/workflow.json"] = new Dictionary<string, object>()
                    {
                        ["definition"] = new Dictionary<string, object>()
                        {
                            ["$schema"] = "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                            ["actions"] = new Dictionary<string, object>()
                            {
                            },
                            ["contentVersion"] = "1.0.0.0",
                            ["outputs"] = new Dictionary<string, object>()
                            {
                            },
                            ["triggers"] = new Dictionary<string, object>()
                            {
                                ["When_events_are_available_in_Event_hub"] = new Dictionary<string, object>()
                                {
                                    ["type"] = "ServiceProvider",
                                    ["inputs"] = new Dictionary<string, object>()
                                    {
                                        ["parameters"] = new Dictionary<string, object>()
                                        {
                                            ["eventHubName"] = "test123"
                                        },
                                        ["serviceProviderConfiguration"] = new Dictionary<string, object>()
                                        {
                                            ["operationId"] = "receiveEvents",
                                            ["connectionName"] = "eventHub",
                                            ["serviceProviderId"] = "/serviceProviders/eventHub"
                                        }
                                    },
                                    ["splitOn"] = "@triggerOutputs()?['body']"
                                }
                            }
                        },
                        ["kind"] = "Stateful"
                    }
                }),
            };
            await logicApp.DeployWorkflowArtifactsAsync(workflowArtifacts: workflowArtifacts);

            Console.WriteLine($"Succeeded");
        }

        // List the Workflows Configuration Connections
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetWorkflowsConnections_ListTheWorkflowsConfigurationConnections()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/LogicApps_ListConnections.json
            // this example is just showing the usage of "LogicApps_ListWorkflowsConnections" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LogicAppResource created on azure
            // for more information of creating LogicAppResource, please refer to the document of LogicAppResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string containerAppName = "testapp2";
            string logicAppName = "testapp2";
            ResourceIdentifier logicAppResourceId = LogicAppResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, containerAppName, logicAppName);
            LogicAppResource logicApp = client.GetLogicAppResource(logicAppResourceId);

            // invoke the operation
            WorkflowEnvelopeResource result = await logicApp.GetWorkflowsConnectionsAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkflowEnvelopeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get workflow list call back URL
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Invoke_GetWorkflowListCallBackURL()
        {
            // Generated from example definition: specification/app/resource-manager/Microsoft.App/preview/2024-10-02-preview/examples/LogicApps_ListCallbackURL.json
            // this example is just showing the usage of "LogicApps_Invoke" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LogicAppResource created on azure
            // for more information of creating LogicAppResource, please refer to the document of LogicAppResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string containerAppName = "testapp2";
            string logicAppName = "testapp2";
            ResourceIdentifier logicAppResourceId = LogicAppResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, containerAppName, logicAppName);
            LogicAppResource logicApp = client.GetLogicAppResource(logicAppResourceId);

            // invoke the operation
            string xMsLogicAppsProxyPath = default /* Warning: No value is provided for xMsLogicAppsProxyPath in example 'Get workflow list call back URL'. Please consider adding a proper example value for it in swagger*/;
            LogicAppsProxyMethod xMsLogicAppsProxyMethod = default /* Warning: No value is provided for xMsLogicAppsProxyMethod in example 'Get workflow list call back URL'. Please consider adding a proper example value for it in swagger*/;
            BinaryData result = await logicApp.InvokeAsync(xMsLogicAppsProxyPath, xMsLogicAppsProxyMethod);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
