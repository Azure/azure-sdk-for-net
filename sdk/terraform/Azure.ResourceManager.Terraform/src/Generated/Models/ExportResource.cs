// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.Terraform.Models
{
    /// <summary> Export parameter for individual resources. </summary>
    public partial class ExportResource : BaseExportModel
    {
        /// <summary> Initializes a new instance of <see cref="ExportResource"/>. </summary>
        /// <param name="resourceIds"> The id of the resource to be exported. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceIds"/> is null. </exception>
        public ExportResource(IEnumerable<string> resourceIds)
        {
            Argument.AssertNotNull(resourceIds, nameof(resourceIds));

            ResourceIds = resourceIds.ToList();
            Type = Type.ExportResource;
        }

        /// <summary> Initializes a new instance of <see cref="ExportResource"/>. </summary>
        /// <param name="type"> The parameter type. </param>
        /// <param name="targetProvider"> The target Azure Terraform Provider. </param>
        /// <param name="fullProperties"> Whether to output all non-computed properties in the generated Terraform configuration? This probably needs manual modifications to make it valid. </param>
        /// <param name="maskSensitive"> Mask sensitive attributes in the Terraform configuration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="resourceIds"> The id of the resource to be exported. </param>
        /// <param name="resourceName"> The Terraform resource name. Only works when `resourceIds` contains only one item. </param>
        /// <param name="resourceType"> The Terraform resource type. Only works when `resourceIds` contains only one item. </param>
        /// <param name="namePattern"> The name pattern of the Terraform resources. </param>
        internal ExportResource(Type type, TargetProvider? targetProvider, bool? fullProperties, bool? maskSensitive, IDictionary<string, BinaryData> serializedAdditionalRawData, IList<string> resourceIds, string resourceName, string resourceType, string namePattern) : base(type, targetProvider, fullProperties, maskSensitive, serializedAdditionalRawData)
        {
            ResourceIds = resourceIds;
            ResourceName = resourceName;
            ResourceType = resourceType;
            NamePattern = namePattern;
            Type = type;
        }

        /// <summary> Initializes a new instance of <see cref="ExportResource"/> for deserialization. </summary>
        internal ExportResource()
        {
        }

        /// <summary> The id of the resource to be exported. </summary>
        public IList<string> ResourceIds { get; }
        /// <summary> The Terraform resource name. Only works when `resourceIds` contains only one item. </summary>
        public string ResourceName { get; set; }
        /// <summary> The Terraform resource type. Only works when `resourceIds` contains only one item. </summary>
        public string ResourceType { get; set; }
        /// <summary> The name pattern of the Terraform resources. </summary>
        public string NamePattern { get; set; }
    }
}
