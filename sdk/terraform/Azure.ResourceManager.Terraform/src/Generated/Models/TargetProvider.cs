// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Terraform.Models
{
    /// <summary> The target Azure Terraform Provider. </summary>
    public readonly partial struct TargetProvider : IEquatable<TargetProvider>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TargetProvider"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TargetProvider(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AzurermValue = "azurerm";
        private const string AzapiValue = "azapi";

        /// <summary> https://registry.terraform.io/providers/hashicorp/azurerm/latest. </summary>
        public static TargetProvider Azurerm { get; } = new TargetProvider(AzurermValue);
        /// <summary> https://registry.terraform.io/providers/Azure/azapi/latest. </summary>
        public static TargetProvider Azapi { get; } = new TargetProvider(AzapiValue);
        /// <summary> Determines if two <see cref="TargetProvider"/> values are the same. </summary>
        public static bool operator ==(TargetProvider left, TargetProvider right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TargetProvider"/> values are not the same. </summary>
        public static bool operator !=(TargetProvider left, TargetProvider right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TargetProvider"/>. </summary>
        public static implicit operator TargetProvider(string value) => new TargetProvider(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TargetProvider other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TargetProvider other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
