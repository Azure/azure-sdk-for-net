// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Terraform.Models
{
    public partial class ExportResource : IUtf8JsonSerializable, IJsonModel<ExportResource>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ExportResource>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ExportResource>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportResource>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExportResource)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("resourceIds"u8);
            writer.WriteStartArray();
            foreach (var item in ResourceIds)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(ResourceName))
            {
                writer.WritePropertyName("resourceName"u8);
                writer.WriteStringValue(ResourceName);
            }
            if (Optional.IsDefined(ResourceType))
            {
                writer.WritePropertyName("resourceType"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (Optional.IsDefined(NamePattern))
            {
                writer.WritePropertyName("namePattern"u8);
                writer.WriteStringValue(NamePattern);
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            if (Optional.IsDefined(TargetProvider))
            {
                writer.WritePropertyName("targetProvider"u8);
                writer.WriteStringValue(TargetProvider.Value.ToString());
            }
            if (Optional.IsDefined(FullProperties))
            {
                writer.WritePropertyName("fullProperties"u8);
                writer.WriteBooleanValue(FullProperties.Value);
            }
            if (Optional.IsDefined(MaskSensitive))
            {
                writer.WritePropertyName("maskSensitive"u8);
                writer.WriteBooleanValue(MaskSensitive.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ExportResource IJsonModel<ExportResource>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportResource>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExportResource)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeExportResource(document.RootElement, options);
        }

        internal static ExportResource DeserializeExportResource(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<string> resourceIds = default;
            string resourceName = default;
            string resourceType = default;
            string namePattern = default;
            Type type = default;
            TargetProvider? targetProvider = default;
            bool? fullProperties = default;
            bool? maskSensitive = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceIds"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    resourceIds = array;
                    continue;
                }
                if (property.NameEquals("resourceName"u8))
                {
                    resourceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("namePattern"u8))
                {
                    namePattern = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new Type(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetProvider"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetProvider = new TargetProvider(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fullProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fullProperties = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("maskSensitive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maskSensitive = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ExportResource(
                type,
                targetProvider,
                fullProperties,
                maskSensitive,
                serializedAdditionalRawData,
                resourceIds,
                resourceName,
                resourceType,
                namePattern);
        }

        BinaryData IPersistableModel<ExportResource>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportResource>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ExportResource)} does not support writing '{options.Format}' format.");
            }
        }

        ExportResource IPersistableModel<ExportResource>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportResource>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeExportResource(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ExportResource)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ExportResource>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
