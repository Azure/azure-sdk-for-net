// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DeviceRegistry.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DeviceRegistry.Samples
{
    public partial class Sample_NamespaceAssetCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateOrReplaceNamespaceAsset()
        {
            // Generated from example definition: 2025-10-01/CreateOrReplace_NamespaceAsset.json
            // this example is just showing the usage of "NamespaceAsset_CreateOrReplace" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceResource created on azure
            // for more information of creating NamespaceResource, please refer to the document of NamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier namespaceResourceId = NamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NamespaceResource @namespace = client.GetNamespaceResource(namespaceResourceId);

            // get the collection of this NamespaceAssetResource
            NamespaceAssetCollection collection = @namespace.GetNamespaceAssets();

            // invoke the operation
            string assetName = "my-asset-1";
            NamespaceAssetData data = new NamespaceAssetData(new AzureLocation("West Europe"), new DeviceRegistryExtendedLocation("CustomLocation", "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.extendedlocation/customlocations/location1"))
            {
                Properties = new NamespaceAssetProperties(new DeviceRef("device1", "opcuaendpointname"))
                {
                    Enabled = true,
                    ExternalAssetId = "8ZBA6LRHU0A458969",
                    DisplayName = "AssetDisplayName",
                    Description = "This is a sample Asset",
                    AssetTypeRefs = { "myAssetTypeRef1", "myAssetTypeRef2" },
                    Manufacturer = "Contoso",
                    ManufacturerUri = "https://www.contoso.com/manufacturerUri",
                    Model = "ContosoModel",
                    ProductCode = "SA34VDG",
                    HardwareRevision = "1.0",
                    SoftwareRevision = "2.0",
                    DocumentationUri = "https://www.example.com/manual",
                    SerialNumber = "64-103816-519918-8",
                    Attributes =
{
["floor"] = BinaryData.FromObjectAsJson("1")
},
                    DiscoveredAssetRefs = { "discoveredAsset1" },
                    DefaultDatasetsConfiguration = "{\"publishingInterval\":10,\"samplingInterval\":15,\"queueSize\":20}",
                    DefaultEventsConfiguration = "{\"publishingInterval\":10,\"samplingInterval\":15,\"queueSize\":20}",
                    DefaultStreamsConfiguration = "{\"publishingInterval\":10,\"samplingInterval\":15,\"queueSize\":20}",
                    DefaultManagementGroupsConfiguration = "{\"retryCount\":10,\"retryBackoffInterval\":15}",
                    DefaultDatasetsDestinations = { new DatasetBrokerStateStoreDestination(new BrokerStateStoreDestinationConfiguration("defaultValue")) },
                    DefaultEventsDestinations = { new EventStorageDestination(new StorageDestinationConfiguration("/tmp")) },
                    DefaultStreamsDestinations = {new StreamMqttDestination(new MqttDestinationConfiguration("/contoso/test")
{
Retain = DeviceRegistryTopicRetainType.Never,
Qos = MqttDestinationQo.Qos0,
Ttl = 3600L,
})},
                    Datasets = {new NamespaceDataset("dataset1")
{
DataSource = "nsu=http://microsoft.com/Opc/OpcPlc/Oven;i=5",
TypeRef = "dataset1TypeRef",
DatasetConfiguration = "{\"publishingInterval\":10,\"samplingInterval\":15,\"queueSize\":20}",
Destinations = {new DatasetBrokerStateStoreDestination(new BrokerStateStoreDestinationConfiguration("dataset1"))},
DataPoints = {new NamespaceDatasetDataPoint("dataset1DataPoint1", "nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt3")
{
DataPointConfiguration = "{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}",
TypeRef = "dataset1DataPoint1TypeRef",
}, new NamespaceDatasetDataPoint("dataset1DataPoint2", "nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt4")
{
DataPointConfiguration = "{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}",
TypeRef = "dataset1DataPoint2TypeRef",
}},
}},
                    EventGroups = {new NamespaceEventGroup("default")
{
Events = {new NamespaceEvent("event1")
{
DataSource = "nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt5",
EventConfiguration = "{\"publishingInterval\":7,\"samplingInterval\":1,\"queueSize\":8}",
Destinations = {new EventMqttDestination(new MqttDestinationConfiguration("/contoso/testEvent1")
{
Retain = DeviceRegistryTopicRetainType.Keep,
Qos = MqttDestinationQo.Qos0,
Ttl = 7200L,
})},
TypeRef = "event1Ref",
}, new NamespaceEvent("event2")
{
DataSource = "nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt8",
EventConfiguration = "{\"publishingInterval\":7,\"samplingInterval\":1,\"queueSize\":8}",
Destinations = {new EventStorageDestination(new StorageDestinationConfiguration("/tmp/event2"))},
TypeRef = "event2Ref",
}},
}},
                    Streams = {new NamespaceStream("stream1")
{
StreamConfiguration = "{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}",
TypeRef = "stream1TypeRef",
Destinations = {new StreamStorageDestination(new StorageDestinationConfiguration("/tmp/stream1"))},
}, new NamespaceStream("stream2")
{
StreamConfiguration = "{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}",
TypeRef = "stream2TypeRef",
Destinations = {new StreamMqttDestination(new MqttDestinationConfiguration("/contoso/testStream2")
{
Retain = DeviceRegistryTopicRetainType.Never,
Qos = MqttDestinationQo.Qos0,
Ttl = 7200L,
})},
}},
                    ManagementGroups = {new ManagementGroup("managementGroup1")
{
ManagementGroupConfiguration = "{\"retryCount\":10,\"retryBackoffInterval\":15}",
TypeRef = "managementGroup1TypeRef",
DefaultTopic = "/contoso/managementGroup1",
DefaultTimeoutInSeconds = 100,
Actions = {new ManagementAction("action1", "/onvif/device_service?ONVIFProfile=Profile1")
{
ActionConfiguration = "{\"retryCount\":5,\"retryBackoffInterval\":5}",
TypeRef = "action1TypeRef",
Topic = "/contoso/managementGroup1/action1",
ActionType = ManagementActionType.Call,
TimeoutInSeconds = 60,
}, new ManagementAction("action2", "/onvif/device_service?ONVIFProfile=Profile2")
{
ActionConfiguration = "{\"retryCount\":5,\"retryBackoffInterval\":5}",
TypeRef = "action2TypeRef",
Topic = "/contoso/managementGroup1/action2",
ActionType = ManagementActionType.Call,
TimeoutInSeconds = 60,
}},
}},
                },
                Tags =
{
["site"] = "building-1"
},
            };
            ArmOperation<NamespaceAssetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, assetName, data);
            NamespaceAssetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NamespaceAssetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetNamespaceAsset()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceAsset.json
            // this example is just showing the usage of "NamespaceAsset_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceResource created on azure
            // for more information of creating NamespaceResource, please refer to the document of NamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier namespaceResourceId = NamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NamespaceResource @namespace = client.GetNamespaceResource(namespaceResourceId);

            // get the collection of this NamespaceAssetResource
            NamespaceAssetCollection collection = @namespace.GetNamespaceAssets();

            // invoke the operation
            string assetName = "my-asset-1";
            NamespaceAssetResource result = await collection.GetAsync(assetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NamespaceAssetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListNamespaceAssetsByResourceGroup()
        {
            // Generated from example definition: 2025-10-01/List_NamespaceAssets_ByResourceGroup.json
            // this example is just showing the usage of "NamespaceAsset_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceResource created on azure
            // for more information of creating NamespaceResource, please refer to the document of NamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "adr-namespace-gbk0925-n01";
            ResourceIdentifier namespaceResourceId = NamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NamespaceResource @namespace = client.GetNamespaceResource(namespaceResourceId);

            // get the collection of this NamespaceAssetResource
            NamespaceAssetCollection collection = @namespace.GetNamespaceAssets();

            // invoke the operation and iterate over the result
            await foreach (NamespaceAssetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                NamespaceAssetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetNamespaceAsset()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceAsset.json
            // this example is just showing the usage of "NamespaceAsset_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceResource created on azure
            // for more information of creating NamespaceResource, please refer to the document of NamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier namespaceResourceId = NamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NamespaceResource @namespace = client.GetNamespaceResource(namespaceResourceId);

            // get the collection of this NamespaceAssetResource
            NamespaceAssetCollection collection = @namespace.GetNamespaceAssets();

            // invoke the operation
            string assetName = "my-asset-1";
            bool result = await collection.ExistsAsync(assetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetNamespaceAsset()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceAsset.json
            // this example is just showing the usage of "NamespaceAsset_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceResource created on azure
            // for more information of creating NamespaceResource, please refer to the document of NamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier namespaceResourceId = NamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NamespaceResource @namespace = client.GetNamespaceResource(namespaceResourceId);

            // get the collection of this NamespaceAssetResource
            NamespaceAssetCollection collection = @namespace.GetNamespaceAssets();

            // invoke the operation
            string assetName = "my-asset-1";
            NullableResponse<NamespaceAssetResource> response = await collection.GetIfExistsAsync(assetName);
            NamespaceAssetResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                NamespaceAssetData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
