// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DeviceRegistry.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DeviceRegistry.Samples
{
    public partial class Sample_DeviceRegistryNamespaceDeviceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateOrReplaceNamespaceDevices()
        {
            // Generated from example definition: 2025-10-01/CreateOrReplace_NamespaceDevice.json
            // this example is just showing the usage of "NamespaceDevice_CreateOrReplace" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeviceRegistryNamespaceResource created on azure
            // for more information of creating DeviceRegistryNamespaceResource, please refer to the document of DeviceRegistryNamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "adr-namespace-gbk0925-n01";
            ResourceIdentifier deviceRegistryNamespaceResourceId = DeviceRegistryNamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            DeviceRegistryNamespaceResource deviceRegistryNamespace = client.GetDeviceRegistryNamespaceResource(deviceRegistryNamespaceResourceId);

            // get the collection of this DeviceRegistryNamespaceDeviceResource
            DeviceRegistryNamespaceDeviceCollection collection = deviceRegistryNamespace.GetDeviceRegistryNamespaceDevices();

            // invoke the operation
            string deviceName = "dev-namespace-gbk0925-n01";
            DeviceRegistryNamespaceDeviceData data = new DeviceRegistryNamespaceDeviceData(new AzureLocation("West Europe"))
            {
                Properties = new DeviceRegistryNamespaceDeviceProperties
                {
                    Enabled = true,
                    ExternalDeviceId = "adr-smart-device3-7a848b15-af47-40a7-8c06-a3f43314d44f",
                    Endpoints = new MessagingEndpoints
                    {
                        Outbound = new OutboundEndpoints(new Dictionary<string, DeviceMessagingEndpoint>
                        {
                            ["eventGridEndpoint"] = new DeviceMessagingEndpoint("https://myeventgridtopic.westeurope-1.eventgrid.azure.net/api/events")
                            {
                                EndpointType = "Microsoft.Devices/IoTHubs",
                            }
                        }),
                    },
                    Attributes =
{
["deviceType"] = BinaryData.FromObjectAsJson("sensor"),
["deviceOwner"] = BinaryData.FromObjectAsJson("IT"),
["deviceCategory"] = BinaryData.FromObjectAsJson(16)
},
                },
            };
            ArmOperation<DeviceRegistryNamespaceDeviceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, deviceName, data);
            DeviceRegistryNamespaceDeviceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DeviceRegistryNamespaceDeviceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateEdgeEnabledDeviceWithAnonymousHostAuthentication()
        {
            // Generated from example definition: 2025-10-01/CreateOrReplace_NamespaceDevice_Edge_Anonymous.json
            // this example is just showing the usage of "NamespaceDevice_CreateOrReplace" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeviceRegistryNamespaceResource created on azure
            // for more information of creating DeviceRegistryNamespaceResource, please refer to the document of DeviceRegistryNamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "adr-namespace-gbk0925-n01";
            ResourceIdentifier deviceRegistryNamespaceResourceId = DeviceRegistryNamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            DeviceRegistryNamespaceResource deviceRegistryNamespace = client.GetDeviceRegistryNamespaceResource(deviceRegistryNamespaceResourceId);

            // get the collection of this DeviceRegistryNamespaceDeviceResource
            DeviceRegistryNamespaceDeviceCollection collection = deviceRegistryNamespace.GetDeviceRegistryNamespaceDevices();

            // invoke the operation
            string deviceName = "namespace-device-on-edge";
            DeviceRegistryNamespaceDeviceData data = new DeviceRegistryNamespaceDeviceData(new AzureLocation("West Europe"))
            {
                Properties = new DeviceRegistryNamespaceDeviceProperties
                {
                    Enabled = true,
                    ExternalDeviceId = "unique-edge-device-identifier",
                    Endpoints = new MessagingEndpoints
                    {
                        Inbound =
{
["theOnlyOPCUABroker"] = new InboundEndpoints("microsoft.opcua", "opc.tcp://192.168.86.23:51211/UA/SampleServer")
{
Version = "2",
Authentication = new HostAuthentication(AuthenticationMethod.Anonymous),
}
},
                    },
                    Attributes =
{
["deviceType"] = BinaryData.FromObjectAsJson("dough-maker"),
["deviceOwner"] = BinaryData.FromObjectAsJson("OT"),
["deviceCategory"] = BinaryData.FromObjectAsJson(16)
},
                },
                ExtendedLocation = new DeviceRegistryExtendedLocation("CustomLocation", "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.extendedlocation/customlocations/location1"),
            };
            ArmOperation<DeviceRegistryNamespaceDeviceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, deviceName, data);
            DeviceRegistryNamespaceDeviceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DeviceRegistryNamespaceDeviceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateEdgeEnabledDeviceWithUsernamesPasswordInboundAuthentication()
        {
            // Generated from example definition: 2025-10-01/CreateOrReplace_NamespaceDevice_Edge_UsernamePass.json
            // this example is just showing the usage of "NamespaceDevice_CreateOrReplace" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeviceRegistryNamespaceResource created on azure
            // for more information of creating DeviceRegistryNamespaceResource, please refer to the document of DeviceRegistryNamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "adr-namespace-gbk0925-n01";
            ResourceIdentifier deviceRegistryNamespaceResourceId = DeviceRegistryNamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            DeviceRegistryNamespaceResource deviceRegistryNamespace = client.GetDeviceRegistryNamespaceResource(deviceRegistryNamespaceResourceId);

            // get the collection of this DeviceRegistryNamespaceDeviceResource
            DeviceRegistryNamespaceDeviceCollection collection = deviceRegistryNamespace.GetDeviceRegistryNamespaceDevices();

            // invoke the operation
            string deviceName = "namespace-device-on-edge";
            DeviceRegistryNamespaceDeviceData data = new DeviceRegistryNamespaceDeviceData(new AzureLocation("West Europe"))
            {
                Properties = new DeviceRegistryNamespaceDeviceProperties
                {
                    Enabled = true,
                    ExternalDeviceId = "unique-edge-device-identifier",
                    Endpoints = new MessagingEndpoints
                    {
                        Inbound =
{
["theOnlyOPCUABroker"] = new InboundEndpoints("microsoft.opcua", "opc.tcp://192.168.86.23:51211/UA/SampleServer")
{
Version = "2",
Authentication = new HostAuthentication(AuthenticationMethod.UsernamePassword)
{
UsernamePasswordCredentials = new DeviceRegistryUsernamePasswordCredentials("user-ref", "pwd-ref"),
},
}
},
                    },
                    Attributes =
{
["deviceType"] = BinaryData.FromObjectAsJson("sensor"),
["deviceOwner"] = BinaryData.FromObjectAsJson("IT"),
["deviceCategory"] = BinaryData.FromObjectAsJson(16)
},
                },
                ExtendedLocation = new DeviceRegistryExtendedLocation("CustomLocation", "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.extendedlocation/customlocations/location1"),
            };
            ArmOperation<DeviceRegistryNamespaceDeviceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, deviceName, data);
            DeviceRegistryNamespaceDeviceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DeviceRegistryNamespaceDeviceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateEdgeEnabledDeviceWithX509InboundAuthentication()
        {
            // Generated from example definition: 2025-10-01/CreateOrReplace_NamespaceDevice_Edge_x509.json
            // this example is just showing the usage of "NamespaceDevice_CreateOrReplace" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeviceRegistryNamespaceResource created on azure
            // for more information of creating DeviceRegistryNamespaceResource, please refer to the document of DeviceRegistryNamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "adr-namespace-gbk0925-n01";
            ResourceIdentifier deviceRegistryNamespaceResourceId = DeviceRegistryNamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            DeviceRegistryNamespaceResource deviceRegistryNamespace = client.GetDeviceRegistryNamespaceResource(deviceRegistryNamespaceResourceId);

            // get the collection of this DeviceRegistryNamespaceDeviceResource
            DeviceRegistryNamespaceDeviceCollection collection = deviceRegistryNamespace.GetDeviceRegistryNamespaceDevices();

            // invoke the operation
            string deviceName = "namespace-device-on-edge";
            DeviceRegistryNamespaceDeviceData data = new DeviceRegistryNamespaceDeviceData(new AzureLocation("West Europe"))
            {
                Properties = new DeviceRegistryNamespaceDeviceProperties
                {
                    Enabled = true,
                    ExternalDeviceId = "unique-edge-device-identifier",
                    Endpoints = new MessagingEndpoints
                    {
                        Inbound =
{
["theV1OPCUAEndpoint"] = new InboundEndpoints("microsoft.opcua", "opc.tcp://192.168.86.23:51211/UA/SampleServer")
{
Version = "2",
Authentication = new HostAuthentication(AuthenticationMethod.Certificate)
{
X509Credentials = new X509CertificateCredentials("cert-secret")
{
KeySecretName = "key-secret",
IntermediateCertificatesSecretName = "intermediate-certs-secret",
},
},
},
["theV2OPCUAEndpoint"] = new InboundEndpoints("microsoft.opcua", "opc.tcp://192.168.86.23:51211/UA/SampleServer")
{
Version = "2",
Authentication = new HostAuthentication(AuthenticationMethod.Certificate)
{
X509Credentials = new X509CertificateCredentials("cert-secret"),
},
TrustList = "trust-secret-reference",
}
},
                    },
                    Attributes =
{
["deviceType"] = BinaryData.FromObjectAsJson("OPCUAServers"),
["deviceOwner"] = BinaryData.FromObjectAsJson("OT"),
["deviceCategory"] = BinaryData.FromObjectAsJson(16)
},
                },
                ExtendedLocation = new DeviceRegistryExtendedLocation("CustomLocation", "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.extendedlocation/customlocations/location1"),
            };
            ArmOperation<DeviceRegistryNamespaceDeviceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, deviceName, data);
            DeviceRegistryNamespaceDeviceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DeviceRegistryNamespaceDeviceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetNamespaceDevice()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceDevice.json
            // this example is just showing the usage of "NamespaceDevice_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeviceRegistryNamespaceResource created on azure
            // for more information of creating DeviceRegistryNamespaceResource, please refer to the document of DeviceRegistryNamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier deviceRegistryNamespaceResourceId = DeviceRegistryNamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            DeviceRegistryNamespaceResource deviceRegistryNamespace = client.GetDeviceRegistryNamespaceResource(deviceRegistryNamespaceResourceId);

            // get the collection of this DeviceRegistryNamespaceDeviceResource
            DeviceRegistryNamespaceDeviceCollection collection = deviceRegistryNamespace.GetDeviceRegistryNamespaceDevices();

            // invoke the operation
            string deviceName = "my-device-name";
            DeviceRegistryNamespaceDeviceResource result = await collection.GetAsync(deviceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DeviceRegistryNamespaceDeviceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetNamespaceDeviceWithEndpointErrorStatus()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceDeviceWithEndpointErrorStatus.json
            // this example is just showing the usage of "NamespaceDevice_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeviceRegistryNamespaceResource created on azure
            // for more information of creating DeviceRegistryNamespaceResource, please refer to the document of DeviceRegistryNamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier deviceRegistryNamespaceResourceId = DeviceRegistryNamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            DeviceRegistryNamespaceResource deviceRegistryNamespace = client.GetDeviceRegistryNamespaceResource(deviceRegistryNamespaceResourceId);

            // get the collection of this DeviceRegistryNamespaceDeviceResource
            DeviceRegistryNamespaceDeviceCollection collection = deviceRegistryNamespace.GetDeviceRegistryNamespaceDevices();

            // invoke the operation
            string deviceName = "my-device-name";
            DeviceRegistryNamespaceDeviceResource result = await collection.GetAsync(deviceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DeviceRegistryNamespaceDeviceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListNamespaceDevicesByResourceGroup()
        {
            // Generated from example definition: 2025-10-01/List_NamespaceDevices_ByResourceGroup.json
            // this example is just showing the usage of "NamespaceDevice_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeviceRegistryNamespaceResource created on azure
            // for more information of creating DeviceRegistryNamespaceResource, please refer to the document of DeviceRegistryNamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "adr-namespace-gbk0925-n01";
            ResourceIdentifier deviceRegistryNamespaceResourceId = DeviceRegistryNamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            DeviceRegistryNamespaceResource deviceRegistryNamespace = client.GetDeviceRegistryNamespaceResource(deviceRegistryNamespaceResourceId);

            // get the collection of this DeviceRegistryNamespaceDeviceResource
            DeviceRegistryNamespaceDeviceCollection collection = deviceRegistryNamespace.GetDeviceRegistryNamespaceDevices();

            // invoke the operation and iterate over the result
            await foreach (DeviceRegistryNamespaceDeviceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DeviceRegistryNamespaceDeviceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetNamespaceDevice()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceDevice.json
            // this example is just showing the usage of "NamespaceDevice_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeviceRegistryNamespaceResource created on azure
            // for more information of creating DeviceRegistryNamespaceResource, please refer to the document of DeviceRegistryNamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier deviceRegistryNamespaceResourceId = DeviceRegistryNamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            DeviceRegistryNamespaceResource deviceRegistryNamespace = client.GetDeviceRegistryNamespaceResource(deviceRegistryNamespaceResourceId);

            // get the collection of this DeviceRegistryNamespaceDeviceResource
            DeviceRegistryNamespaceDeviceCollection collection = deviceRegistryNamespace.GetDeviceRegistryNamespaceDevices();

            // invoke the operation
            string deviceName = "my-device-name";
            bool result = await collection.ExistsAsync(deviceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetNamespaceDeviceWithEndpointErrorStatus()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceDeviceWithEndpointErrorStatus.json
            // this example is just showing the usage of "NamespaceDevice_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeviceRegistryNamespaceResource created on azure
            // for more information of creating DeviceRegistryNamespaceResource, please refer to the document of DeviceRegistryNamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier deviceRegistryNamespaceResourceId = DeviceRegistryNamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            DeviceRegistryNamespaceResource deviceRegistryNamespace = client.GetDeviceRegistryNamespaceResource(deviceRegistryNamespaceResourceId);

            // get the collection of this DeviceRegistryNamespaceDeviceResource
            DeviceRegistryNamespaceDeviceCollection collection = deviceRegistryNamespace.GetDeviceRegistryNamespaceDevices();

            // invoke the operation
            string deviceName = "my-device-name";
            bool result = await collection.ExistsAsync(deviceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetNamespaceDevice()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceDevice.json
            // this example is just showing the usage of "NamespaceDevice_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeviceRegistryNamespaceResource created on azure
            // for more information of creating DeviceRegistryNamespaceResource, please refer to the document of DeviceRegistryNamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier deviceRegistryNamespaceResourceId = DeviceRegistryNamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            DeviceRegistryNamespaceResource deviceRegistryNamespace = client.GetDeviceRegistryNamespaceResource(deviceRegistryNamespaceResourceId);

            // get the collection of this DeviceRegistryNamespaceDeviceResource
            DeviceRegistryNamespaceDeviceCollection collection = deviceRegistryNamespace.GetDeviceRegistryNamespaceDevices();

            // invoke the operation
            string deviceName = "my-device-name";
            NullableResponse<DeviceRegistryNamespaceDeviceResource> response = await collection.GetIfExistsAsync(deviceName);
            DeviceRegistryNamespaceDeviceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DeviceRegistryNamespaceDeviceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetNamespaceDeviceWithEndpointErrorStatus()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceDeviceWithEndpointErrorStatus.json
            // this example is just showing the usage of "NamespaceDevice_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeviceRegistryNamespaceResource created on azure
            // for more information of creating DeviceRegistryNamespaceResource, please refer to the document of DeviceRegistryNamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier deviceRegistryNamespaceResourceId = DeviceRegistryNamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            DeviceRegistryNamespaceResource deviceRegistryNamespace = client.GetDeviceRegistryNamespaceResource(deviceRegistryNamespaceResourceId);

            // get the collection of this DeviceRegistryNamespaceDeviceResource
            DeviceRegistryNamespaceDeviceCollection collection = deviceRegistryNamespace.GetDeviceRegistryNamespaceDevices();

            // invoke the operation
            string deviceName = "my-device-name";
            NullableResponse<DeviceRegistryNamespaceDeviceResource> response = await collection.GetIfExistsAsync(deviceName);
            DeviceRegistryNamespaceDeviceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DeviceRegistryNamespaceDeviceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
