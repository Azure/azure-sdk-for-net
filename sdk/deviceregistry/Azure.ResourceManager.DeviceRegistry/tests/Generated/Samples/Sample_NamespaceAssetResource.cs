// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DeviceRegistry.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DeviceRegistry.Samples
{
    public partial class Sample_NamespaceAssetResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetNamespaceAsset()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceAsset.json
            // this example is just showing the usage of "NamespaceAsset_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceAssetResource created on azure
            // for more information of creating NamespaceAssetResource, please refer to the document of NamespaceAssetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            string assetName = "my-asset-1";
            ResourceIdentifier namespaceAssetResourceId = NamespaceAssetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName, assetName);
            NamespaceAssetResource namespaceAsset = client.GetNamespaceAssetResource(namespaceAssetResourceId);

            // invoke the operation
            NamespaceAssetResource result = await namespaceAsset.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NamespaceAssetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteNamespaceAsset()
        {
            // Generated from example definition: 2025-10-01/Delete_NamespaceAsset.json
            // this example is just showing the usage of "NamespaceAsset_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceAssetResource created on azure
            // for more information of creating NamespaceAssetResource, please refer to the document of NamespaceAssetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "adr-namespace-gbk0925-n01";
            string assetName = "adr-asset-gbk0925-n01";
            ResourceIdentifier namespaceAssetResourceId = NamespaceAssetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName, assetName);
            NamespaceAssetResource namespaceAsset = client.GetNamespaceAssetResource(namespaceAssetResourceId);

            // invoke the operation
            await namespaceAsset.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateNamespaceAssets()
        {
            // Generated from example definition: 2025-10-01/Update_NamespaceAsset.json
            // this example is just showing the usage of "NamespaceAsset_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceAssetResource created on azure
            // for more information of creating NamespaceAssetResource, please refer to the document of NamespaceAssetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            string assetName = "my-asset-1";
            ResourceIdentifier namespaceAssetResourceId = NamespaceAssetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName, assetName);
            NamespaceAssetResource namespaceAsset = client.GetNamespaceAssetResource(namespaceAssetResourceId);

            // invoke the operation
            NamespaceAssetPatch patch = new NamespaceAssetPatch
            {
                Properties = new NamespaceAssetUpdateProperties
                {
                    Enabled = true,
                    DisplayName = "AssetDisplayNameUpdate",
                    Description = "This is a sample updated Asset",
                },
            };
            ArmOperation<NamespaceAssetResource> lro = await namespaceAsset.UpdateAsync(WaitUntil.Completed, patch);
            NamespaceAssetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NamespaceAssetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
