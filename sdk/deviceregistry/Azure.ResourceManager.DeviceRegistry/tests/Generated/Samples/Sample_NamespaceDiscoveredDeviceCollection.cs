// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DeviceRegistry.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DeviceRegistry.Samples
{
    public partial class Sample_NamespaceDiscoveredDeviceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateOrReplaceNamespaceDiscoveredDevice()
        {
            // Generated from example definition: 2025-10-01/CreateOrReplace_NamespaceDiscoveredDevice.json
            // this example is just showing the usage of "NamespaceDiscoveredDevice_CreateOrReplace" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceResource created on azure
            // for more information of creating NamespaceResource, please refer to the document of NamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier namespaceResourceId = NamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NamespaceResource @namespace = client.GetNamespaceResource(namespaceResourceId);

            // get the collection of this NamespaceDiscoveredDeviceResource
            NamespaceDiscoveredDeviceCollection collection = @namespace.GetNamespaceDiscoveredDevices();

            // invoke the operation
            string discoveredDeviceName = "my-discovereddevice-1";
            NamespaceDiscoveredDeviceData data = new NamespaceDiscoveredDeviceData(new AzureLocation("West Europe"), new DeviceRegistryExtendedLocation("CustomLocation", "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.extendedlocation/customlocations/location1"))
            {
                Properties = new NamespaceDiscoveredDeviceProperties("discoveryId1", 1L)
                {
                    Endpoints = new DiscoveredMessagingEndpoints
                    {
                        OutboundAssigned =
{
["eventGridEndpoint"] = new DeviceMessagingEndpoint("https://myeventgridtopic.westeurope-1.eventgrid.azure.net/api/events")
{
EndpointType = "Microsoft.Devices/IoTHubs",
}
},
                    },
                },
                Tags =
{
["site"] = "building-1"
},
            };
            ArmOperation<NamespaceDiscoveredDeviceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, discoveredDeviceName, data);
            NamespaceDiscoveredDeviceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NamespaceDiscoveredDeviceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetNamespaceDiscoveredDevice()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceDiscoveredDevice.json
            // this example is just showing the usage of "NamespaceDiscoveredDevice_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceResource created on azure
            // for more information of creating NamespaceResource, please refer to the document of NamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier namespaceResourceId = NamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NamespaceResource @namespace = client.GetNamespaceResource(namespaceResourceId);

            // get the collection of this NamespaceDiscoveredDeviceResource
            NamespaceDiscoveredDeviceCollection collection = @namespace.GetNamespaceDiscoveredDevices();

            // invoke the operation
            string discoveredDeviceName = "my-discovereddevice-1";
            NamespaceDiscoveredDeviceResource result = await collection.GetAsync(discoveredDeviceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NamespaceDiscoveredDeviceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListNamespaceDiscoveredDevicesByResourceGroup()
        {
            // Generated from example definition: 2025-10-01/List_NamespaceDiscoveredDevices_ByResourceGroup.json
            // this example is just showing the usage of "NamespaceDiscoveredDevice_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceResource created on azure
            // for more information of creating NamespaceResource, please refer to the document of NamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier namespaceResourceId = NamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NamespaceResource @namespace = client.GetNamespaceResource(namespaceResourceId);

            // get the collection of this NamespaceDiscoveredDeviceResource
            NamespaceDiscoveredDeviceCollection collection = @namespace.GetNamespaceDiscoveredDevices();

            // invoke the operation and iterate over the result
            await foreach (NamespaceDiscoveredDeviceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                NamespaceDiscoveredDeviceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetNamespaceDiscoveredDevice()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceDiscoveredDevice.json
            // this example is just showing the usage of "NamespaceDiscoveredDevice_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceResource created on azure
            // for more information of creating NamespaceResource, please refer to the document of NamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier namespaceResourceId = NamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NamespaceResource @namespace = client.GetNamespaceResource(namespaceResourceId);

            // get the collection of this NamespaceDiscoveredDeviceResource
            NamespaceDiscoveredDeviceCollection collection = @namespace.GetNamespaceDiscoveredDevices();

            // invoke the operation
            string discoveredDeviceName = "my-discovereddevice-1";
            bool result = await collection.ExistsAsync(discoveredDeviceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetNamespaceDiscoveredDevice()
        {
            // Generated from example definition: 2025-10-01/Get_NamespaceDiscoveredDevice.json
            // this example is just showing the usage of "NamespaceDiscoveredDevice_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NamespaceResource created on azure
            // for more information of creating NamespaceResource, please refer to the document of NamespaceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string namespaceName = "my-namespace-1";
            ResourceIdentifier namespaceResourceId = NamespaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NamespaceResource @namespace = client.GetNamespaceResource(namespaceResourceId);

            // get the collection of this NamespaceDiscoveredDeviceResource
            NamespaceDiscoveredDeviceCollection collection = @namespace.GetNamespaceDiscoveredDevices();

            // invoke the operation
            string discoveredDeviceName = "my-discovereddevice-1";
            NullableResponse<NamespaceDiscoveredDeviceResource> response = await collection.GetIfExistsAsync(discoveredDeviceName);
            NamespaceDiscoveredDeviceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                NamespaceDiscoveredDeviceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
