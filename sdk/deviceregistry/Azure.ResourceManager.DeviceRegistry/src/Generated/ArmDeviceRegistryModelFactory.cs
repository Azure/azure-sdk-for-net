// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDeviceRegistryModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="DeviceRegistry.DeviceRegistryAssetData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extended location. </param>
        /// <returns> A new <see cref="DeviceRegistry.DeviceRegistryAssetData"/> instance for mocking. </returns>
        public static DeviceRegistryAssetData DeviceRegistryAssetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, AssetProperties properties = null, DeviceRegistryExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DeviceRegistryAssetData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssetProperties"/>. </summary>
        /// <param name="uuid"> Globally unique, immutable, non-reusable id. </param>
        /// <param name="isEnabled"> Enabled/Disabled status of the asset. </param>
        /// <param name="externalAssetId"> Asset id provided by the customer. </param>
        /// <param name="displayName"> Human-readable display name. </param>
        /// <param name="description"> Human-readable description of the asset. </param>
        /// <param name="assetEndpointProfileRef"> A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name. </param>
        /// <param name="version"> An integer that is incremented each time the resource is modified. </param>
        /// <param name="manufacturer"> Asset manufacturer name. </param>
        /// <param name="manufacturerUri"> Asset manufacturer URI. </param>
        /// <param name="model"> Asset model name. </param>
        /// <param name="productCode"> Asset product code. </param>
        /// <param name="hardwareRevision"> Revision number of the hardware. </param>
        /// <param name="softwareRevision"> Revision number of the software. </param>
        /// <param name="documentationUri"> Reference to the documentation. </param>
        /// <param name="serialNumber"> Asset serial number. </param>
        /// <param name="attributes"> A set of key-value pairs that contain custom attributes set by the customer. </param>
        /// <param name="discoveredAssetRefs"> Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided. </param>
        /// <param name="defaultDatasetsConfiguration"> Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here. </param>
        /// <param name="defaultEventsConfiguration"> Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here. </param>
        /// <param name="defaultTopic"> Object that describes the default topic information for the asset. </param>
        /// <param name="datasets"> Array of datasets that are part of the asset. Each dataset describes the data points that make up the set. </param>
        /// <param name="events"> Array of events that are part of the asset. Each event can have per-event configuration. </param>
        /// <param name="status"> Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.AssetProperties"/> instance for mocking. </returns>
        public static AssetProperties AssetProperties(string uuid = null, bool? isEnabled = null, string externalAssetId = null, string displayName = null, string description = null, string assetEndpointProfileRef = null, long? version = null, string manufacturer = null, Uri manufacturerUri = null, string model = null, string productCode = null, string hardwareRevision = null, string softwareRevision = null, Uri documentationUri = null, string serialNumber = null, IDictionary<string, BinaryData> attributes = null, IEnumerable<string> discoveredAssetRefs = null, string defaultDatasetsConfiguration = null, string defaultEventsConfiguration = null, DeviceRegistryTopic defaultTopic = null, IEnumerable<DeviceRegistryDataset> datasets = null, IEnumerable<DeviceRegistryEvent> events = null, DeviceRegistryAssetStatus status = null, DeviceRegistryProvisioningState? provisioningState = null)
        {
            attributes ??= new Dictionary<string, BinaryData>();
            discoveredAssetRefs ??= new List<string>();
            datasets ??= new List<DeviceRegistryDataset>();
            events ??= new List<DeviceRegistryEvent>();

            return new AssetProperties(
                uuid,
                isEnabled,
                externalAssetId,
                displayName,
                description,
                assetEndpointProfileRef,
                version,
                manufacturer,
                manufacturerUri,
                model,
                productCode,
                hardwareRevision,
                softwareRevision,
                documentationUri,
                serialNumber,
                attributes,
                discoveredAssetRefs?.ToList(),
                defaultDatasetsConfiguration,
                defaultEventsConfiguration,
                defaultTopic,
                datasets?.ToList(),
                events?.ToList(),
                status,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceRegistryAssetStatus"/>. </summary>
        /// <param name="errors"> Array object to transfer and persist errors that originate from the Edge. </param>
        /// <param name="version"> A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version. </param>
        /// <param name="datasets"> Array of dataset statuses that describe the status of each dataset. </param>
        /// <param name="events"> Array of event statuses that describe the status of each event. </param>
        /// <returns> A new <see cref="Models.DeviceRegistryAssetStatus"/> instance for mocking. </returns>
        public static DeviceRegistryAssetStatus DeviceRegistryAssetStatus(IEnumerable<DeviceRegistryAssetStatusError> errors = null, long? version = null, IEnumerable<DeviceRegistryAssetStatusDataset> datasets = null, IEnumerable<DeviceRegistryAssetStatusEvent> events = null)
        {
            errors ??= new List<DeviceRegistryAssetStatusError>();
            datasets ??= new List<DeviceRegistryAssetStatusDataset>();
            events ??= new List<DeviceRegistryAssetStatusEvent>();

            return new DeviceRegistryAssetStatus(errors?.ToList(), version, datasets?.ToList(), events?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceRegistryAssetStatusError"/>. </summary>
        /// <param name="code"> Error code for classification of errors (ex: 400, 404, 500, etc.). </param>
        /// <param name="message"> Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”). </param>
        /// <returns> A new <see cref="Models.DeviceRegistryAssetStatusError"/> instance for mocking. </returns>
        public static DeviceRegistryAssetStatusError DeviceRegistryAssetStatusError(int? code = null, string message = null)
        {
            return new DeviceRegistryAssetStatusError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceRegistryAssetStatusDataset"/>. </summary>
        /// <param name="name"> The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information. </param>
        /// <param name="messageSchemaReference"> The message schema reference object. </param>
        /// <returns> A new <see cref="Models.DeviceRegistryAssetStatusDataset"/> instance for mocking. </returns>
        public static DeviceRegistryAssetStatusDataset DeviceRegistryAssetStatusDataset(string name = null, MessageSchemaReference messageSchemaReference = null)
        {
            return new DeviceRegistryAssetStatusDataset(name, messageSchemaReference, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MessageSchemaReference"/>. </summary>
        /// <param name="schemaRegistryNamespace"> The message schema registry namespace. </param>
        /// <param name="schemaName"> The message schema name. </param>
        /// <param name="schemaVersion"> The message schema version. </param>
        /// <returns> A new <see cref="Models.MessageSchemaReference"/> instance for mocking. </returns>
        public static MessageSchemaReference MessageSchemaReference(string schemaRegistryNamespace = null, string schemaName = null, string schemaVersion = null)
        {
            return new MessageSchemaReference(schemaRegistryNamespace, schemaName, schemaVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceRegistryAssetStatusEvent"/>. </summary>
        /// <param name="name"> The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information. </param>
        /// <param name="messageSchemaReference"> The message schema reference object. </param>
        /// <returns> A new <see cref="Models.DeviceRegistryAssetStatusEvent"/> instance for mocking. </returns>
        public static DeviceRegistryAssetStatusEvent DeviceRegistryAssetStatusEvent(string name = null, MessageSchemaReference messageSchemaReference = null)
        {
            return new DeviceRegistryAssetStatusEvent(name, messageSchemaReference, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistry.DeviceRegistryAssetEndpointProfileData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extended location. </param>
        /// <returns> A new <see cref="DeviceRegistry.DeviceRegistryAssetEndpointProfileData"/> instance for mocking. </returns>
        public static DeviceRegistryAssetEndpointProfileData DeviceRegistryAssetEndpointProfileData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DeviceRegistryAssetEndpointProfileProperties properties = null, DeviceRegistryExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DeviceRegistryAssetEndpointProfileData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceRegistryAssetEndpointProfileProperties"/>. </summary>
        /// <param name="uuid"> Globally unique, immutable, non-reusable id. </param>
        /// <param name="targetAddress"> The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration. </param>
        /// <param name="endpointProfileType"> Defines the configuration for the connector type that is being used with the endpoint profile. </param>
        /// <param name="authentication"> Defines the client authentication mechanism to the server. </param>
        /// <param name="additionalConfiguration"> Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF). </param>
        /// <param name="discoveredAssetEndpointProfileRef"> Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery flow. Discovered asset endpoint profile name must be provided. </param>
        /// <param name="statusErrors"> Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.DeviceRegistryAssetEndpointProfileProperties"/> instance for mocking. </returns>
        public static DeviceRegistryAssetEndpointProfileProperties DeviceRegistryAssetEndpointProfileProperties(string uuid = null, Uri targetAddress = null, string endpointProfileType = null, DeviceRegistryAuthentication authentication = null, string additionalConfiguration = null, string discoveredAssetEndpointProfileRef = null, IEnumerable<AssetEndpointProfileStatusError> statusErrors = null, DeviceRegistryProvisioningState? provisioningState = null)
        {
            statusErrors ??= new List<AssetEndpointProfileStatusError>();

            return new DeviceRegistryAssetEndpointProfileProperties(
                uuid,
                targetAddress,
                endpointProfileType,
                authentication,
                additionalConfiguration,
                discoveredAssetEndpointProfileRef,
                statusErrors != null ? new AssetEndpointProfileStatus(statusErrors?.ToList(), serializedAdditionalRawData: null) : null,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssetEndpointProfileStatusError"/>. </summary>
        /// <param name="code"> Error code for classification of errors (ex: 400, 404, 500, etc.). </param>
        /// <param name="message"> Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”). </param>
        /// <returns> A new <see cref="Models.AssetEndpointProfileStatusError"/> instance for mocking. </returns>
        public static AssetEndpointProfileStatusError AssetEndpointProfileStatusError(int? code = null, string message = null)
        {
            return new AssetEndpointProfileStatusError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistry.DeviceRegistryBillingContainerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="billingContainerProvisioningState"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> Resource ETag. </param>
        /// <returns> A new <see cref="DeviceRegistry.DeviceRegistryBillingContainerData"/> instance for mocking. </returns>
        public static DeviceRegistryBillingContainerData DeviceRegistryBillingContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DeviceRegistryProvisioningState? billingContainerProvisioningState = null, ETag? etag = null)
        {
            return new DeviceRegistryBillingContainerData(
                id,
                name,
                resourceType,
                systemData,
                billingContainerProvisioningState != null ? new BillingContainerProperties(billingContainerProvisioningState, serializedAdditionalRawData: null) : null,
                etag,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistry.NamespaceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. Current supported identity types: None, SystemAssigned. </param>
        /// <returns> A new <see cref="DeviceRegistry.NamespaceData"/> instance for mocking. </returns>
        public static NamespaceData NamespaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NamespaceProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NamespaceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceProperties"/>. </summary>
        /// <param name="uuid"> Globally unique, immutable, non-reusable ID. </param>
        /// <param name="messagingEndpoints"> Assigned and unassigned messaging endpoints. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.NamespaceProperties"/> instance for mocking. </returns>
        public static NamespaceProperties NamespaceProperties(string uuid = null, IDictionary<string, MessagingEndpoint> messagingEndpoints = null, DeviceRegistryProvisioningState? provisioningState = null)
        {
            messagingEndpoints ??= new Dictionary<string, MessagingEndpoint>();

            return new NamespaceProperties(uuid, messagingEndpoints != null ? new Messaging(messagingEndpoints, serializedAdditionalRawData: null) : null, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ErrorDetails"/>. </summary>
        /// <param name="code"> Multi-part error code for classification and root causing of errors (ex: 400.200.100.432). </param>
        /// <param name="message"> Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”). </param>
        /// <param name="info"> Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”). </param>
        /// <param name="correlationId"> Unique identifier for the transaction to aid in debugging. </param>
        /// <returns> A new <see cref="Models.ErrorDetails"/> instance for mocking. </returns>
        public static ErrorDetails ErrorDetails(string code = null, string message = null, string info = null, string correlationId = null)
        {
            return new ErrorDetails(code, message, info, correlationId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistry.NamespaceAssetData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extended location. </param>
        /// <returns> A new <see cref="DeviceRegistry.NamespaceAssetData"/> instance for mocking. </returns>
        public static NamespaceAssetData NamespaceAssetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NamespaceAssetProperties properties = null, DeviceRegistryExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NamespaceAssetData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceAssetProperties"/>. </summary>
        /// <param name="uuid"> Globally unique, immutable, non-reusable ID. </param>
        /// <param name="enabled"> Enabled/disabled status of the asset. </param>
        /// <param name="externalAssetId"> Asset ID provided by the customer. </param>
        /// <param name="displayName"> Human-readable display name. </param>
        /// <param name="description"> Human-readable description of the asset. </param>
        /// <param name="deviceRef"> Reference to the device that provides data for this asset. Must provide device name &amp; endpoint on the device to use. </param>
        /// <param name="assetTypeRefs"> URIs or type definition IDs. </param>
        /// <param name="version"> An integer that is incremented each time the resource is modified. </param>
        /// <param name="lastTransitionOn"> A timestamp (in UTC) that is updated each time the resource is modified. </param>
        /// <param name="manufacturer"> Asset manufacturer. </param>
        /// <param name="manufacturerUri"> Asset manufacturer URI. </param>
        /// <param name="model"> Asset model. </param>
        /// <param name="productCode"> Asset product code. </param>
        /// <param name="hardwareRevision"> Asset hardware revision number. </param>
        /// <param name="softwareRevision"> Asset software revision number. </param>
        /// <param name="documentationUri"> Asset documentation reference. </param>
        /// <param name="serialNumber"> Asset serial number. </param>
        /// <param name="attributes"> A set of key-value pairs that contain custom attributes set by the customer. </param>
        /// <param name="discoveredAssetRefs"> Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided. </param>
        /// <param name="defaultDatasetsConfiguration"> Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here. </param>
        /// <param name="defaultEventsConfiguration"> Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here. </param>
        /// <param name="defaultStreamsConfiguration"> Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here. </param>
        /// <param name="defaultManagementGroupsConfiguration"> Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here. </param>
        /// <param name="defaultDatasetsDestinations">
        /// Default destinations for a dataset.
        /// Please note <see cref="DatasetDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DatasetBrokerStateStoreDestination"/>, <see cref="DatasetMqttDestination"/> and <see cref="DatasetStorageDestination"/>.
        /// </param>
        /// <param name="defaultEventsDestinations">
        /// Default destinations for an event.
        /// Please note <see cref="EventDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EventMqttDestination"/> and <see cref="EventStorageDestination"/>.
        /// </param>
        /// <param name="defaultStreamsDestinations">
        /// Default destinations for a stream.
        /// Please note <see cref="StreamDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="StreamMqttDestination"/> and <see cref="StreamStorageDestination"/>.
        /// </param>
        /// <param name="datasets"> Array of datasets that are part of the asset. Each dataset describes the data points that make up the set. </param>
        /// <param name="eventGroups"> Array of event groups that are part of the asset. Each event group can have per-event group configuration. </param>
        /// <param name="streams"> Array of streams that are part of the asset. Each stream can have a per-stream configuration. </param>
        /// <param name="managementGroups"> Array of management groups that are part of the asset. Each management group can have a per-group configuration. </param>
        /// <param name="status"> Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.NamespaceAssetProperties"/> instance for mocking. </returns>
        public static NamespaceAssetProperties NamespaceAssetProperties(string uuid = null, bool? enabled = null, string externalAssetId = null, string displayName = null, string description = null, DeviceRef deviceRef = null, IEnumerable<string> assetTypeRefs = null, long? version = null, DateTimeOffset? lastTransitionOn = null, string manufacturer = null, string manufacturerUri = null, string model = null, string productCode = null, string hardwareRevision = null, string softwareRevision = null, string documentationUri = null, string serialNumber = null, IDictionary<string, BinaryData> attributes = null, IEnumerable<string> discoveredAssetRefs = null, string defaultDatasetsConfiguration = null, string defaultEventsConfiguration = null, string defaultStreamsConfiguration = null, string defaultManagementGroupsConfiguration = null, IEnumerable<DatasetDestination> defaultDatasetsDestinations = null, IEnumerable<EventDestination> defaultEventsDestinations = null, IEnumerable<StreamDestination> defaultStreamsDestinations = null, IEnumerable<NamespaceDataset> datasets = null, IEnumerable<NamespaceEventGroup> eventGroups = null, IEnumerable<NamespaceStream> streams = null, IEnumerable<ManagementGroup> managementGroups = null, NamespaceAssetStatus status = null, DeviceRegistryProvisioningState? provisioningState = null)
        {
            assetTypeRefs ??= new List<string>();
            attributes ??= new Dictionary<string, BinaryData>();
            discoveredAssetRefs ??= new List<string>();
            defaultDatasetsDestinations ??= new List<DatasetDestination>();
            defaultEventsDestinations ??= new List<EventDestination>();
            defaultStreamsDestinations ??= new List<StreamDestination>();
            datasets ??= new List<NamespaceDataset>();
            eventGroups ??= new List<NamespaceEventGroup>();
            streams ??= new List<NamespaceStream>();
            managementGroups ??= new List<ManagementGroup>();

            return new NamespaceAssetProperties(
                uuid,
                enabled,
                externalAssetId,
                displayName,
                description,
                deviceRef,
                assetTypeRefs?.ToList(),
                version,
                lastTransitionOn,
                manufacturer,
                manufacturerUri,
                model,
                productCode,
                hardwareRevision,
                softwareRevision,
                documentationUri,
                serialNumber,
                attributes,
                discoveredAssetRefs?.ToList(),
                defaultDatasetsConfiguration,
                defaultEventsConfiguration,
                defaultStreamsConfiguration,
                defaultManagementGroupsConfiguration,
                defaultDatasetsDestinations?.ToList(),
                defaultEventsDestinations?.ToList(),
                defaultStreamsDestinations?.ToList(),
                datasets?.ToList(),
                eventGroups?.ToList(),
                streams?.ToList(),
                managementGroups?.ToList(),
                status,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceAssetStatus"/>. </summary>
        /// <param name="config"> Defines the asset status config properties. </param>
        /// <param name="datasets"> Array of dataset statuses that describe the status of each dataset. </param>
        /// <param name="eventGroups"> Array of event group statuses that describe the status of each event group. </param>
        /// <param name="streams"> Array of stream statuses that describe the status of each stream. </param>
        /// <param name="managementGroups"> Array of management group statuses that describe the status of each management group. </param>
        /// <returns> A new <see cref="Models.NamespaceAssetStatus"/> instance for mocking. </returns>
        public static NamespaceAssetStatus NamespaceAssetStatus(StatusConfig config = null, IEnumerable<NamespaceAssetStatusDataset> datasets = null, IEnumerable<NamespaceAssetStatusEventGroup> eventGroups = null, IEnumerable<NamespaceAssetStatusStream> streams = null, IEnumerable<NamespaceAssetStatusManagementGroup> managementGroups = null)
        {
            datasets ??= new List<NamespaceAssetStatusDataset>();
            eventGroups ??= new List<NamespaceAssetStatusEventGroup>();
            streams ??= new List<NamespaceAssetStatusStream>();
            managementGroups ??= new List<NamespaceAssetStatusManagementGroup>();

            return new NamespaceAssetStatus(
                config,
                datasets?.ToList(),
                eventGroups?.ToList(),
                streams?.ToList(),
                managementGroups?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StatusConfig"/>. </summary>
        /// <param name="version"> A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version. </param>
        /// <param name="lastTransitionOn"> A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. </param>
        /// <param name="error"> Object to transfer and persist errors that originate from the edge. </param>
        /// <returns> A new <see cref="Models.StatusConfig"/> instance for mocking. </returns>
        public static StatusConfig StatusConfig(long? version = null, DateTimeOffset? lastTransitionOn = null, StatusError error = null)
        {
            return new StatusConfig(version, lastTransitionOn, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StatusError"/>. </summary>
        /// <param name="code"> Error code for classification of errors (ex: '400', '404', '500', etc.). </param>
        /// <param name="message"> Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”). </param>
        /// <param name="details"> Array of error details that describe the status of each error. </param>
        /// <returns> A new <see cref="Models.StatusError"/> instance for mocking. </returns>
        public static StatusError StatusError(string code = null, string message = null, IEnumerable<ErrorDetails> details = null)
        {
            details ??= new List<ErrorDetails>();

            return new StatusError(code, message, details?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceAssetStatusDataset"/>. </summary>
        /// <param name="name"> The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information. </param>
        /// <param name="messageSchemaReference"> The message schema reference object. </param>
        /// <param name="error"> Object to transfer and persist errors that originate from the edge. </param>
        /// <returns> A new <see cref="Models.NamespaceAssetStatusDataset"/> instance for mocking. </returns>
        public static NamespaceAssetStatusDataset NamespaceAssetStatusDataset(string name = null, NamespaceMessageSchemaReference messageSchemaReference = null, StatusError error = null)
        {
            return new NamespaceAssetStatusDataset(name, messageSchemaReference, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceMessageSchemaReference"/>. </summary>
        /// <param name="schemaRegistryNamespace"> The message schema registry namespace. </param>
        /// <param name="schemaName"> The message schema name. </param>
        /// <param name="schemaVersion"> The message schema version. </param>
        /// <returns> A new <see cref="Models.NamespaceMessageSchemaReference"/> instance for mocking. </returns>
        public static NamespaceMessageSchemaReference NamespaceMessageSchemaReference(string schemaRegistryNamespace = null, string schemaName = null, string schemaVersion = null)
        {
            return new NamespaceMessageSchemaReference(schemaRegistryNamespace, schemaName, schemaVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceAssetStatusEventGroup"/>. </summary>
        /// <param name="name"> The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information. </param>
        /// <param name="events"> Array of event statuses that describe the status of each event in the event group. </param>
        /// <returns> A new <see cref="Models.NamespaceAssetStatusEventGroup"/> instance for mocking. </returns>
        public static NamespaceAssetStatusEventGroup NamespaceAssetStatusEventGroup(string name = null, IEnumerable<NamespaceAssetStatusEvent> events = null)
        {
            events ??= new List<NamespaceAssetStatusEvent>();

            return new NamespaceAssetStatusEventGroup(name, events?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceAssetStatusEvent"/>. </summary>
        /// <param name="name"> The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information. </param>
        /// <param name="messageSchemaReference"> The message schema reference object. </param>
        /// <param name="error"> Object to transfer and persist errors that originate from the edge. </param>
        /// <returns> A new <see cref="Models.NamespaceAssetStatusEvent"/> instance for mocking. </returns>
        public static NamespaceAssetStatusEvent NamespaceAssetStatusEvent(string name = null, NamespaceMessageSchemaReference messageSchemaReference = null, StatusError error = null)
        {
            return new NamespaceAssetStatusEvent(name, messageSchemaReference, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceAssetStatusStream"/>. </summary>
        /// <param name="name"> The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information. </param>
        /// <param name="messageSchemaReference"> The message schema reference object. </param>
        /// <param name="error"> Object to transfer and persist errors that originate from the edge. </param>
        /// <returns> A new <see cref="Models.NamespaceAssetStatusStream"/> instance for mocking. </returns>
        public static NamespaceAssetStatusStream NamespaceAssetStatusStream(string name = null, NamespaceMessageSchemaReference messageSchemaReference = null, StatusError error = null)
        {
            return new NamespaceAssetStatusStream(name, messageSchemaReference, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceAssetStatusManagementGroup"/>. </summary>
        /// <param name="name"> The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information. </param>
        /// <param name="actions"> Array of action statuses that describe the status of each action. </param>
        /// <returns> A new <see cref="Models.NamespaceAssetStatusManagementGroup"/> instance for mocking. </returns>
        public static NamespaceAssetStatusManagementGroup NamespaceAssetStatusManagementGroup(string name = null, IEnumerable<NamespaceAssetStatusManagementAction> actions = null)
        {
            actions ??= new List<NamespaceAssetStatusManagementAction>();

            return new NamespaceAssetStatusManagementGroup(name, actions?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceAssetStatusManagementAction"/>. </summary>
        /// <param name="name"> The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information. </param>
        /// <param name="requestMessageSchemaReference"> The request message schema reference object for the action. </param>
        /// <param name="responseMessageSchemaReference"> The response message schema reference object for the action. </param>
        /// <param name="error"> Object to transfer and persist errors that originate from the edge. </param>
        /// <returns> A new <see cref="Models.NamespaceAssetStatusManagementAction"/> instance for mocking. </returns>
        public static NamespaceAssetStatusManagementAction NamespaceAssetStatusManagementAction(string name = null, NamespaceMessageSchemaReference requestMessageSchemaReference = null, NamespaceMessageSchemaReference responseMessageSchemaReference = null, StatusError error = null)
        {
            return new NamespaceAssetStatusManagementAction(name, requestMessageSchemaReference, responseMessageSchemaReference, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistry.NamespaceDeviceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> Resource Tag. </param>
        /// <param name="extendedLocation"> The extended location. </param>
        /// <returns> A new <see cref="DeviceRegistry.NamespaceDeviceData"/> instance for mocking. </returns>
        public static NamespaceDeviceData NamespaceDeviceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NamespaceDeviceProperties properties = null, string etag = null, DeviceRegistryExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NamespaceDeviceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                etag,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceDeviceProperties"/>. </summary>
        /// <param name="uuid"> A unique identifier for the device. </param>
        /// <param name="enabled"> Indicates if the resource is enabled or not. </param>
        /// <param name="externalDeviceId"> The Device ID provided by the customer. </param>
        /// <param name="discoveredDeviceRef"> Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided. </param>
        /// <param name="manufacturer"> Device manufacturer. </param>
        /// <param name="model"> Device model. </param>
        /// <param name="operatingSystem"> Device operating system. </param>
        /// <param name="operatingSystemVersion"> Device operating system version. </param>
        /// <param name="endpoints"> Property bag containing the device's unassigned and assigned endpoints. </param>
        /// <param name="attributes"> A set of key-value pairs that contain custom attributes set by the customer. </param>
        /// <param name="status"> Device status updates. </param>
        /// <param name="version"> An integer that is incremented each time the resource is modified. </param>
        /// <param name="lastTransitionOn"> A timestamp (in UTC) that is updated each time the resource is modified. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.NamespaceDeviceProperties"/> instance for mocking. </returns>
        public static NamespaceDeviceProperties NamespaceDeviceProperties(string uuid = null, bool? enabled = null, string externalDeviceId = null, string discoveredDeviceRef = null, string manufacturer = null, string model = null, string operatingSystem = null, string operatingSystemVersion = null, MessagingEndpoints endpoints = null, IDictionary<string, BinaryData> attributes = null, DeviceStatus status = null, long? version = null, DateTimeOffset? lastTransitionOn = null, DeviceRegistryProvisioningState? provisioningState = null)
        {
            attributes ??= new Dictionary<string, BinaryData>();

            return new NamespaceDeviceProperties(
                uuid,
                enabled,
                externalDeviceId,
                discoveredDeviceRef,
                manufacturer,
                model,
                operatingSystem,
                operatingSystemVersion,
                endpoints,
                attributes,
                status,
                version,
                lastTransitionOn,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceStatus"/>. </summary>
        /// <param name="config"> Defines the device status config properties. </param>
        /// <param name="endpointsInbound"> Defines the device status for inbound/outbound endpoints. </param>
        /// <returns> A new <see cref="Models.DeviceStatus"/> instance for mocking. </returns>
        public static DeviceStatus DeviceStatus(StatusConfig config = null, IReadOnlyDictionary<string, DeviceStatusEndpoint> endpointsInbound = null)
        {
            endpointsInbound ??= new Dictionary<string, DeviceStatusEndpoint>();

            return new DeviceStatus(config, endpointsInbound != null ? new DeviceStatusEndpoints(endpointsInbound, serializedAdditionalRawData: null) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceStatusEndpoint"/>. </summary>
        /// <param name="error"> Defines the error related to this endpoint. </param>
        /// <returns> A new <see cref="Models.DeviceStatusEndpoint"/> instance for mocking. </returns>
        public static DeviceStatusEndpoint DeviceStatusEndpoint(StatusError error = null)
        {
            return new DeviceStatusEndpoint(error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistry.NamespaceDiscoveredAssetData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extended location. </param>
        /// <returns> A new <see cref="DeviceRegistry.NamespaceDiscoveredAssetData"/> instance for mocking. </returns>
        public static NamespaceDiscoveredAssetData NamespaceDiscoveredAssetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NamespaceDiscoveredAssetProperties properties = null, DeviceRegistryExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NamespaceDiscoveredAssetData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceDiscoveredAssetProperties"/>. </summary>
        /// <param name="deviceRef"> Reference to the device that provides data for this asset. Must provide device name &amp; endpoint on the device to use. </param>
        /// <param name="displayName"> Human-readable display name. </param>
        /// <param name="assetTypeRefs"> URIs or type definition IDs. </param>
        /// <param name="description"> Human-readable description of the asset. </param>
        /// <param name="discoveryId"> Identifier used to detect changes in the asset. </param>
        /// <param name="externalAssetId"> Asset ID provided by the customer. </param>
        /// <param name="version"> An integer that is incremented each time the resource is modified. </param>
        /// <param name="manufacturer"> Asset manufacturer. </param>
        /// <param name="manufacturerUri"> Asset manufacturer URI. </param>
        /// <param name="model"> Asset model. </param>
        /// <param name="productCode"> Asset product code. </param>
        /// <param name="hardwareRevision"> Asset hardware revision number. </param>
        /// <param name="softwareRevision"> Asset software revision number. </param>
        /// <param name="documentationUri"> Asset documentation reference. </param>
        /// <param name="serialNumber"> Asset serial number. </param>
        /// <param name="attributes"> A set of key-value pairs that contain custom attributes. </param>
        /// <param name="defaultDatasetsConfiguration"> Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here. </param>
        /// <param name="defaultEventsConfiguration"> Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here. </param>
        /// <param name="defaultStreamsConfiguration"> Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here. </param>
        /// <param name="defaultManagementGroupsConfiguration"> Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here. </param>
        /// <param name="defaultDatasetsDestinations">
        /// Default destinations for a dataset.
        /// Please note <see cref="DatasetDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DatasetBrokerStateStoreDestination"/>, <see cref="DatasetMqttDestination"/> and <see cref="DatasetStorageDestination"/>.
        /// </param>
        /// <param name="defaultEventsDestinations">
        /// Default destinations for an event.
        /// Please note <see cref="EventDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EventMqttDestination"/> and <see cref="EventStorageDestination"/>.
        /// </param>
        /// <param name="defaultStreamsDestinations">
        /// Default destinations for a stream.
        /// Please note <see cref="StreamDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="StreamMqttDestination"/> and <see cref="StreamStorageDestination"/>.
        /// </param>
        /// <param name="datasets"> Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set. </param>
        /// <param name="eventGroups"> Array of event groups that are part of the asset. Each event group can have per-event group configuration. </param>
        /// <param name="streams"> Array of streams that are part of the asset. Each stream can have a per-stream configuration. </param>
        /// <param name="managementGroups"> Array of management groups that are part of the asset. Each management group can have a per-group configuration. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.NamespaceDiscoveredAssetProperties"/> instance for mocking. </returns>
        public static NamespaceDiscoveredAssetProperties NamespaceDiscoveredAssetProperties(DeviceRef deviceRef = null, string displayName = null, IEnumerable<string> assetTypeRefs = null, string description = null, string discoveryId = null, string externalAssetId = null, long version = default, string manufacturer = null, string manufacturerUri = null, string model = null, string productCode = null, string hardwareRevision = null, string softwareRevision = null, string documentationUri = null, string serialNumber = null, IDictionary<string, BinaryData> attributes = null, string defaultDatasetsConfiguration = null, string defaultEventsConfiguration = null, string defaultStreamsConfiguration = null, string defaultManagementGroupsConfiguration = null, IEnumerable<DatasetDestination> defaultDatasetsDestinations = null, IEnumerable<EventDestination> defaultEventsDestinations = null, IEnumerable<StreamDestination> defaultStreamsDestinations = null, IEnumerable<NamespaceDiscoveredDataset> datasets = null, IEnumerable<NamespaceDiscoveredEventGroup> eventGroups = null, IEnumerable<NamespaceDiscoveredStream> streams = null, IEnumerable<NamespaceDiscoveredManagementGroup> managementGroups = null, DeviceRegistryProvisioningState? provisioningState = null)
        {
            assetTypeRefs ??= new List<string>();
            attributes ??= new Dictionary<string, BinaryData>();
            defaultDatasetsDestinations ??= new List<DatasetDestination>();
            defaultEventsDestinations ??= new List<EventDestination>();
            defaultStreamsDestinations ??= new List<StreamDestination>();
            datasets ??= new List<NamespaceDiscoveredDataset>();
            eventGroups ??= new List<NamespaceDiscoveredEventGroup>();
            streams ??= new List<NamespaceDiscoveredStream>();
            managementGroups ??= new List<NamespaceDiscoveredManagementGroup>();

            return new NamespaceDiscoveredAssetProperties(
                deviceRef,
                displayName,
                assetTypeRefs?.ToList(),
                description,
                discoveryId,
                externalAssetId,
                version,
                manufacturer,
                manufacturerUri,
                model,
                productCode,
                hardwareRevision,
                softwareRevision,
                documentationUri,
                serialNumber,
                attributes,
                defaultDatasetsConfiguration,
                defaultEventsConfiguration,
                defaultStreamsConfiguration,
                defaultManagementGroupsConfiguration,
                defaultDatasetsDestinations?.ToList(),
                defaultEventsDestinations?.ToList(),
                defaultStreamsDestinations?.ToList(),
                datasets?.ToList(),
                eventGroups?.ToList(),
                streams?.ToList(),
                managementGroups?.ToList(),
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistry.NamespaceDiscoveredDeviceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extended location. </param>
        /// <returns> A new <see cref="DeviceRegistry.NamespaceDiscoveredDeviceData"/> instance for mocking. </returns>
        public static NamespaceDiscoveredDeviceData NamespaceDiscoveredDeviceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NamespaceDiscoveredDeviceProperties properties = null, DeviceRegistryExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NamespaceDiscoveredDeviceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceDiscoveredDeviceProperties"/>. </summary>
        /// <param name="externalDeviceId"> A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant. </param>
        /// <param name="endpoints"> Endpoints for discovered devices. </param>
        /// <param name="manufacturer"> Device manufacturer. </param>
        /// <param name="model"> Device model. </param>
        /// <param name="operatingSystem"> Device operating system name. </param>
        /// <param name="operatingSystemVersion"> Device operating system version. </param>
        /// <param name="attributes"> A set of key-value pairs that contain custom attributes. </param>
        /// <param name="discoveryId"> Identifier used to detect changes in the discovered device. </param>
        /// <param name="version"> An integer that is incremented each time the resource is modified. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.NamespaceDiscoveredDeviceProperties"/> instance for mocking. </returns>
        public static NamespaceDiscoveredDeviceProperties NamespaceDiscoveredDeviceProperties(string externalDeviceId = null, DiscoveredMessagingEndpoints endpoints = null, string manufacturer = null, string model = null, string operatingSystem = null, string operatingSystemVersion = null, IDictionary<string, BinaryData> attributes = null, string discoveryId = null, long version = default, DeviceRegistryProvisioningState? provisioningState = null)
        {
            attributes ??= new Dictionary<string, BinaryData>();

            return new NamespaceDiscoveredDeviceProperties(
                externalDeviceId,
                endpoints,
                manufacturer,
                model,
                operatingSystem,
                operatingSystemVersion,
                attributes,
                discoveryId,
                version,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistry.DeviceRegistrySchemaRegistryData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. Current supported identity types: None, SystemAssigned. </param>
        /// <returns> A new <see cref="DeviceRegistry.DeviceRegistrySchemaRegistryData"/> instance for mocking. </returns>
        public static DeviceRegistrySchemaRegistryData DeviceRegistrySchemaRegistryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DeviceRegistrySchemaRegistryProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DeviceRegistrySchemaRegistryData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceRegistrySchemaRegistryProperties"/>. </summary>
        /// <param name="uuid"> Globally unique, immutable, non-reusable id. </param>
        /// <param name="namespace"> Schema registry namespace. Uniquely identifies a schema registry within a tenant. </param>
        /// <param name="displayName"> Human-readable display name. </param>
        /// <param name="description"> Human-readable description of the schema registry. </param>
        /// <param name="storageAccountContainerUri"> The Storage Account's Container URL where schemas will be stored. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.DeviceRegistrySchemaRegistryProperties"/> instance for mocking. </returns>
        public static DeviceRegistrySchemaRegistryProperties DeviceRegistrySchemaRegistryProperties(string uuid = null, string @namespace = null, string displayName = null, string description = null, Uri storageAccountContainerUri = null, DeviceRegistryProvisioningState? provisioningState = null)
        {
            return new DeviceRegistrySchemaRegistryProperties(
                uuid,
                @namespace,
                displayName,
                description,
                storageAccountContainerUri,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistry.DeviceRegistrySchemaData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DeviceRegistry.DeviceRegistrySchemaData"/> instance for mocking. </returns>
        public static DeviceRegistrySchemaData DeviceRegistrySchemaData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DeviceRegistrySchemaProperties properties = null)
        {
            return new DeviceRegistrySchemaData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceRegistrySchemaProperties"/>. </summary>
        /// <param name="uuid"> Globally unique, immutable, non-reusable id. </param>
        /// <param name="displayName"> Human-readable display name. </param>
        /// <param name="description"> Human-readable description of the schema. </param>
        /// <param name="format"> Format of the schema. </param>
        /// <param name="schemaType"> Type of the schema. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="tags"> Schema tags. </param>
        /// <returns> A new <see cref="Models.DeviceRegistrySchemaProperties"/> instance for mocking. </returns>
        public static DeviceRegistrySchemaProperties DeviceRegistrySchemaProperties(string uuid = null, string displayName = null, string description = null, DeviceRegistrySchemaFormat format = default, DeviceRegistrySchemaType schemaType = default, DeviceRegistryProvisioningState? provisioningState = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DeviceRegistrySchemaProperties(
                uuid,
                displayName,
                description,
                format,
                schemaType,
                provisioningState,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistry.DeviceRegistrySchemaVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DeviceRegistry.DeviceRegistrySchemaVersionData"/> instance for mocking. </returns>
        public static DeviceRegistrySchemaVersionData DeviceRegistrySchemaVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DeviceRegistrySchemaVersionProperties properties = null)
        {
            return new DeviceRegistrySchemaVersionData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceRegistrySchemaVersionProperties"/>. </summary>
        /// <param name="uuid"> Globally unique, immutable, non-reusable id. </param>
        /// <param name="description"> Human-readable description of the schema. </param>
        /// <param name="schemaContent"> Schema content. </param>
        /// <param name="hash"> Hash of the schema content. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.DeviceRegistrySchemaVersionProperties"/> instance for mocking. </returns>
        public static DeviceRegistrySchemaVersionProperties DeviceRegistrySchemaVersionProperties(string uuid = null, string description = null, string schemaContent = null, string hash = null, DeviceRegistryProvisioningState? provisioningState = null)
        {
            return new DeviceRegistrySchemaVersionProperties(
                uuid,
                description,
                schemaContent,
                hash,
                provisioningState,
                serializedAdditionalRawData: null);
        }
    }
}
