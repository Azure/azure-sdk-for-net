// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/VirtualNetworkAddressSpace.Serialization.cs
namespace Azure.ResourceManager.Network.Models
{
    public partial class VirtualNetworkAddressSpace : IUtf8JsonSerializable, IJsonModel<VirtualNetworkAddressSpace>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<VirtualNetworkAddressSpace>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<VirtualNetworkAddressSpace>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
========
namespace Azure.ResourceManager.DeviceRegistry.Models
{
    internal partial class AssetEndpointProfileStatus : IUtf8JsonSerializable, IJsonModel<AssetEndpointProfileStatus>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AssetEndpointProfileStatus>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AssetEndpointProfileStatus>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
>>>>>>>> main:sdk/deviceregistry/Azure.ResourceManager.DeviceRegistry/src/Generated/Models/AssetEndpointProfileStatus.Serialization.cs
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/VirtualNetworkAddressSpace.Serialization.cs
            var format = options.Format == "W" ? ((IPersistableModel<VirtualNetworkAddressSpace>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VirtualNetworkAddressSpace)} does not support writing '{format}' format.");
            }

            if (Optional.IsCollectionDefined(AddressPrefixes))
            {
                writer.WritePropertyName("addressPrefixes"u8);
                writer.WriteStartArray();
                foreach (var item in AddressPrefixes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(IpamPoolPrefixAllocations))
            {
                writer.WritePropertyName("ipamPoolPrefixAllocations"u8);
                writer.WriteStartArray();
                foreach (var item in IpamPoolPrefixAllocations)
========
            var format = options.Format == "W" ? ((IPersistableModel<AssetEndpointProfileStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssetEndpointProfileStatus)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsCollectionDefined(Errors))
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteStartArray();
                foreach (var item in Errors)
>>>>>>>> main:sdk/deviceregistry/Azure.ResourceManager.DeviceRegistry/src/Generated/Models/AssetEndpointProfileStatus.Serialization.cs
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/VirtualNetworkAddressSpace.Serialization.cs
        VirtualNetworkAddressSpace IJsonModel<VirtualNetworkAddressSpace>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualNetworkAddressSpace>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VirtualNetworkAddressSpace)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVirtualNetworkAddressSpace(document.RootElement, options);
        }

        internal static VirtualNetworkAddressSpace DeserializeVirtualNetworkAddressSpace(JsonElement element, ModelReaderWriterOptions options = null)
========
        AssetEndpointProfileStatus IJsonModel<AssetEndpointProfileStatus>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssetEndpointProfileStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssetEndpointProfileStatus)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAssetEndpointProfileStatus(document.RootElement, options);
        }

        internal static AssetEndpointProfileStatus DeserializeAssetEndpointProfileStatus(JsonElement element, ModelReaderWriterOptions options = null)
>>>>>>>> main:sdk/deviceregistry/Azure.ResourceManager.DeviceRegistry/src/Generated/Models/AssetEndpointProfileStatus.Serialization.cs
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/VirtualNetworkAddressSpace.Serialization.cs
            IList<string> addressPrefixes = default;
            IList<IpamPoolPrefixAllocation> ipamPoolPrefixAllocations = default;
========
            IReadOnlyList<AssetEndpointProfileStatusError> errors = default;
>>>>>>>> main:sdk/deviceregistry/Azure.ResourceManager.DeviceRegistry/src/Generated/Models/AssetEndpointProfileStatus.Serialization.cs
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/VirtualNetworkAddressSpace.Serialization.cs
                if (property.NameEquals("addressPrefixes"u8))
========
                if (property.NameEquals("errors"u8))
>>>>>>>> main:sdk/deviceregistry/Azure.ResourceManager.DeviceRegistry/src/Generated/Models/AssetEndpointProfileStatus.Serialization.cs
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/VirtualNetworkAddressSpace.Serialization.cs
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    addressPrefixes = array;
                    continue;
                }
                if (property.NameEquals("ipamPoolPrefixAllocations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IpamPoolPrefixAllocation> array = new List<IpamPoolPrefixAllocation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(IpamPoolPrefixAllocation.DeserializeIpamPoolPrefixAllocation(item, options));
                    }
                    ipamPoolPrefixAllocations = array;
========
                    List<AssetEndpointProfileStatusError> array = new List<AssetEndpointProfileStatusError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AssetEndpointProfileStatusError.DeserializeAssetEndpointProfileStatusError(item, options));
                    }
                    errors = array;
>>>>>>>> main:sdk/deviceregistry/Azure.ResourceManager.DeviceRegistry/src/Generated/Models/AssetEndpointProfileStatus.Serialization.cs
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/VirtualNetworkAddressSpace.Serialization.cs
            return new VirtualNetworkAddressSpace(addressPrefixes ?? new ChangeTrackingList<string>(), ipamPoolPrefixAllocations ?? new ChangeTrackingList<IpamPoolPrefixAllocation>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<VirtualNetworkAddressSpace>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualNetworkAddressSpace>)this).GetFormatFromOptions(options) : options.Format;
========
            return new AssetEndpointProfileStatus(errors ?? new ChangeTrackingList<AssetEndpointProfileStatusError>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AssetEndpointProfileStatus>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssetEndpointProfileStatus>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/deviceregistry/Azure.ResourceManager.DeviceRegistry/src/Generated/Models/AssetEndpointProfileStatus.Serialization.cs

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/VirtualNetworkAddressSpace.Serialization.cs
                    throw new FormatException($"The model {nameof(VirtualNetworkAddressSpace)} does not support writing '{options.Format}' format.");
            }
        }

        VirtualNetworkAddressSpace IPersistableModel<VirtualNetworkAddressSpace>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualNetworkAddressSpace>)this).GetFormatFromOptions(options) : options.Format;
========
                    throw new FormatException($"The model {nameof(AssetEndpointProfileStatus)} does not support writing '{options.Format}' format.");
            }
        }

        AssetEndpointProfileStatus IPersistableModel<AssetEndpointProfileStatus>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssetEndpointProfileStatus>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/deviceregistry/Azure.ResourceManager.DeviceRegistry/src/Generated/Models/AssetEndpointProfileStatus.Serialization.cs

            switch (format)
            {
                case "J":
                    {
<<<<<<<< HEAD:sdk/network/Azure.ResourceManager.Network/src/Generated/Models/VirtualNetworkAddressSpace.Serialization.cs
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeVirtualNetworkAddressSpace(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(VirtualNetworkAddressSpace)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<VirtualNetworkAddressSpace>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
========
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAssetEndpointProfileStatus(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AssetEndpointProfileStatus)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AssetEndpointProfileStatus>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
>>>>>>>> main:sdk/deviceregistry/Azure.ResourceManager.DeviceRegistry/src/Generated/Models/AssetEndpointProfileStatus.Serialization.cs
    }
}
