// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> Defines the dataset properties. </summary>
    public partial class DeviceRegistryDataset
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DeviceRegistryDataset"/>. </summary>
        /// <param name="name"> Name of the dataset. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public DeviceRegistryDataset(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            DataPoints = new ChangeTrackingList<DeviceRegistryDataPoint>();
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistryDataset"/>. </summary>
        /// <param name="name"> Name of the dataset. </param>
        /// <param name="datasetConfiguration"> Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset. </param>
        /// <param name="topic"> Object that describes the topic information for the specific dataset. </param>
        /// <param name="dataPoints"> Array of data points that are part of the dataset. Each data point can have per-data point configuration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DeviceRegistryDataset(string name, string datasetConfiguration, DeviceRegistryTopic topic, IList<DeviceRegistryDataPoint> dataPoints, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            DatasetConfiguration = datasetConfiguration;
            Topic = topic;
            DataPoints = dataPoints;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistryDataset"/> for deserialization. </summary>
        internal DeviceRegistryDataset()
        {
        }

        /// <summary> Name of the dataset. </summary>
        public string Name { get; set; }
        /// <summary> Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset. </summary>
        public string DatasetConfiguration { get; set; }
        /// <summary> Object that describes the topic information for the specific dataset. </summary>
        public DeviceRegistryTopic Topic { get; set; }
        /// <summary> Array of data points that are part of the dataset. Each data point can have per-data point configuration. </summary>
        public IList<DeviceRegistryDataPoint> DataPoints { get; }
    }
}
