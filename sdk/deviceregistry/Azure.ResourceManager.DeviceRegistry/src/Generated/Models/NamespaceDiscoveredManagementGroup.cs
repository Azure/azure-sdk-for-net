// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> Defines the management group properties. </summary>
    public partial class NamespaceDiscoveredManagementGroup
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NamespaceDiscoveredManagementGroup"/>. </summary>
        /// <param name="name"> Name of the management group. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public NamespaceDiscoveredManagementGroup(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            Actions = new ChangeTrackingList<NamespaceDiscoveredManagementAction>();
        }

        /// <summary> Initializes a new instance of <see cref="NamespaceDiscoveredManagementGroup"/>. </summary>
        /// <param name="name"> Name of the management group. </param>
        /// <param name="managementGroupConfiguration"> Stringified JSON that contains connector-specific configuration for the management group. </param>
        /// <param name="typeRef"> URI or type definition ID. </param>
        /// <param name="dataSource"> Reference to a data source for a given management group. </param>
        /// <param name="defaultTopic"> Default MQTT topic path on which a client will receive the request for all actions that are part of the management group. </param>
        /// <param name="defaultTimeoutInSeconds"> Default response timeout for all actions that are part of the management group. </param>
        /// <param name="actions"> Array of actions that are part of the management group. Each action can have an individual configuration. </param>
        /// <param name="lastUpdatedOn"> Timestamp (in UTC) indicating when the management group was added or modified. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NamespaceDiscoveredManagementGroup(string name, string managementGroupConfiguration, string typeRef, string dataSource, string defaultTopic, int? defaultTimeoutInSeconds, IList<NamespaceDiscoveredManagementAction> actions, DateTimeOffset? lastUpdatedOn, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            ManagementGroupConfiguration = managementGroupConfiguration;
            TypeRef = typeRef;
            DataSource = dataSource;
            DefaultTopic = defaultTopic;
            DefaultTimeoutInSeconds = defaultTimeoutInSeconds;
            Actions = actions;
            LastUpdatedOn = lastUpdatedOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NamespaceDiscoveredManagementGroup"/> for deserialization. </summary>
        internal NamespaceDiscoveredManagementGroup()
        {
        }

        /// <summary> Name of the management group. </summary>
        public string Name { get; set; }
        /// <summary> Stringified JSON that contains connector-specific configuration for the management group. </summary>
        public string ManagementGroupConfiguration { get; set; }
        /// <summary> URI or type definition ID. </summary>
        public string TypeRef { get; set; }
        /// <summary> Reference to a data source for a given management group. </summary>
        public string DataSource { get; set; }
        /// <summary> Default MQTT topic path on which a client will receive the request for all actions that are part of the management group. </summary>
        public string DefaultTopic { get; set; }
        /// <summary> Default response timeout for all actions that are part of the management group. </summary>
        public int? DefaultTimeoutInSeconds { get; set; }
        /// <summary> Array of actions that are part of the management group. Each action can have an individual configuration. </summary>
        public IList<NamespaceDiscoveredManagementAction> Actions { get; }
        /// <summary> Timestamp (in UTC) indicating when the management group was added or modified. </summary>
        public DateTimeOffset? LastUpdatedOn { get; set; }
    }
}
