// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> The type for a MQTT destination. </summary>
    public partial class StreamMqttDestination : StreamDestination
    {
        /// <summary> Initializes a new instance of <see cref="StreamMqttDestination"/>. </summary>
        /// <param name="configuration"> The MQTT destination configuration. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configuration"/> is null. </exception>
        public StreamMqttDestination(MqttDestinationConfiguration configuration)
        {
            Argument.AssertNotNull(configuration, nameof(configuration));

            Configuration = configuration;
            Target = StreamDestinationTarget.Mqtt;
        }

        /// <summary> Initializes a new instance of <see cref="StreamMqttDestination"/>. </summary>
        /// <param name="target"> Target destination. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="configuration"> The MQTT destination configuration. </param>
        internal StreamMqttDestination(StreamDestinationTarget? target, IDictionary<string, BinaryData> serializedAdditionalRawData, MqttDestinationConfiguration configuration) : base(target, serializedAdditionalRawData)
        {
            Configuration = configuration;
            Target = target;
        }

        /// <summary> Initializes a new instance of <see cref="StreamMqttDestination"/> for deserialization. </summary>
        internal StreamMqttDestination()
        {
        }

        /// <summary> The MQTT destination configuration. </summary>
        public MqttDestinationConfiguration Configuration { get; set; }
    }
}
