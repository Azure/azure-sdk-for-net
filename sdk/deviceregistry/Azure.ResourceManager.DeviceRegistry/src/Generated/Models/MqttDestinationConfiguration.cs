// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> The configuration for a MQTT destination. </summary>
    public partial class MqttDestinationConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MqttDestinationConfiguration"/>. </summary>
        /// <param name="topic"> The MQTT topic. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="topic"/> is null. </exception>
        public MqttDestinationConfiguration(string topic)
        {
            Argument.AssertNotNull(topic, nameof(topic));

            Topic = topic;
        }

        /// <summary> Initializes a new instance of <see cref="MqttDestinationConfiguration"/>. </summary>
        /// <param name="topic"> The MQTT topic. </param>
        /// <param name="retain"> When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'. </param>
        /// <param name="qos"> The MQTT QoS setting. Defaults to QoS 1. </param>
        /// <param name="ttl"> The MQTT TTL setting. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MqttDestinationConfiguration(string topic, DeviceRegistryTopicRetainType? retain, MqttDestinationQo? qos, long? ttl, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Topic = topic;
            Retain = retain;
            Qos = qos;
            Ttl = ttl;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MqttDestinationConfiguration"/> for deserialization. </summary>
        internal MqttDestinationConfiguration()
        {
        }

        /// <summary> The MQTT topic. </summary>
        public string Topic { get; set; }
        /// <summary> When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'. </summary>
        public DeviceRegistryTopicRetainType? Retain { get; set; }
        /// <summary> The MQTT QoS setting. Defaults to QoS 1. </summary>
        public MqttDestinationQo? Qos { get; set; }
        /// <summary> The MQTT TTL setting. </summary>
        public long? Ttl { get; set; }
    }
}
