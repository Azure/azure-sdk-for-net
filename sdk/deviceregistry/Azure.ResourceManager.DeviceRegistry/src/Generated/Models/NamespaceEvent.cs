// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> Defines the event properties. </summary>
    public partial class NamespaceEvent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NamespaceEvent"/>. </summary>
        /// <param name="name"> The name of the event. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public NamespaceEvent(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            Destinations = new ChangeTrackingList<EventDestination>();
        }

        /// <summary> Initializes a new instance of <see cref="NamespaceEvent"/>. </summary>
        /// <param name="name"> The name of the event. </param>
        /// <param name="dataSource"> Reference to a data source for a given event. </param>
        /// <param name="eventConfiguration"> Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize. </param>
        /// <param name="destinations">
        /// Destinations for an event.
        /// Please note <see cref="EventDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EventMqttDestination"/> and <see cref="EventStorageDestination"/>.
        /// </param>
        /// <param name="typeRef"> URI or type definition ID. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NamespaceEvent(string name, string dataSource, string eventConfiguration, IList<EventDestination> destinations, string typeRef, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            DataSource = dataSource;
            EventConfiguration = eventConfiguration;
            Destinations = destinations;
            TypeRef = typeRef;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NamespaceEvent"/> for deserialization. </summary>
        internal NamespaceEvent()
        {
        }

        /// <summary> The name of the event. </summary>
        public string Name { get; set; }
        /// <summary> Reference to a data source for a given event. </summary>
        public string DataSource { get; set; }
        /// <summary> Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize. </summary>
        public string EventConfiguration { get; set; }
        /// <summary>
        /// Destinations for an event.
        /// Please note <see cref="EventDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EventMqttDestination"/> and <see cref="EventStorageDestination"/>.
        /// </summary>
        public IList<EventDestination> Destinations { get; }
        /// <summary> URI or type definition ID. </summary>
        public string TypeRef { get; set; }
    }
}
