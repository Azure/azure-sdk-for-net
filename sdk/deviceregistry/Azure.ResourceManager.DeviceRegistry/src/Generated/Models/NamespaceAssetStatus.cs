// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> Defines the asset status properties. </summary>
    public partial class NamespaceAssetStatus
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NamespaceAssetStatus"/>. </summary>
        internal NamespaceAssetStatus()
        {
            Datasets = new ChangeTrackingList<NamespaceAssetStatusDataset>();
            EventGroups = new ChangeTrackingList<NamespaceAssetStatusEventGroup>();
            Streams = new ChangeTrackingList<NamespaceAssetStatusStream>();
            ManagementGroups = new ChangeTrackingList<NamespaceAssetStatusManagementGroup>();
        }

        /// <summary> Initializes a new instance of <see cref="NamespaceAssetStatus"/>. </summary>
        /// <param name="config"> Defines the asset status config properties. </param>
        /// <param name="datasets"> Array of dataset statuses that describe the status of each dataset. </param>
        /// <param name="eventGroups"> Array of event group statuses that describe the status of each event group. </param>
        /// <param name="streams"> Array of stream statuses that describe the status of each stream. </param>
        /// <param name="managementGroups"> Array of management group statuses that describe the status of each management group. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NamespaceAssetStatus(StatusConfig config, IReadOnlyList<NamespaceAssetStatusDataset> datasets, IReadOnlyList<NamespaceAssetStatusEventGroup> eventGroups, IReadOnlyList<NamespaceAssetStatusStream> streams, IReadOnlyList<NamespaceAssetStatusManagementGroup> managementGroups, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Config = config;
            Datasets = datasets;
            EventGroups = eventGroups;
            Streams = streams;
            ManagementGroups = managementGroups;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Defines the asset status config properties. </summary>
        public StatusConfig Config { get; }
        /// <summary> Array of dataset statuses that describe the status of each dataset. </summary>
        public IReadOnlyList<NamespaceAssetStatusDataset> Datasets { get; }
        /// <summary> Array of event group statuses that describe the status of each event group. </summary>
        public IReadOnlyList<NamespaceAssetStatusEventGroup> EventGroups { get; }
        /// <summary> Array of stream statuses that describe the status of each stream. </summary>
        public IReadOnlyList<NamespaceAssetStatusStream> Streams { get; }
        /// <summary> Array of management group statuses that describe the status of each management group. </summary>
        public IReadOnlyList<NamespaceAssetStatusManagementGroup> ManagementGroups { get; }
    }
}
