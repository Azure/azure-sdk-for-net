// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> Defines the data point properties. </summary>
    public partial class DeviceRegistryDataPoint : DeviceRegistryDataPointBase
    {
        /// <summary> Initializes a new instance of <see cref="DeviceRegistryDataPoint"/>. </summary>
        /// <param name="name"> The name of the data point. </param>
        /// <param name="dataSource"> The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="dataSource"/> is null. </exception>
        public DeviceRegistryDataPoint(string name, string dataSource) : base(name, dataSource)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(dataSource, nameof(dataSource));
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistryDataPoint"/>. </summary>
        /// <param name="name"> The name of the data point. </param>
        /// <param name="dataSource"> The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset. </param>
        /// <param name="dataPointConfiguration"> Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="observabilityMode"> An indication of how the data point should be mapped to OpenTelemetry. </param>
        internal DeviceRegistryDataPoint(string name, string dataSource, string dataPointConfiguration, IDictionary<string, BinaryData> serializedAdditionalRawData, DataPointObservabilityMode? observabilityMode) : base(name, dataSource, dataPointConfiguration, serializedAdditionalRawData)
        {
            ObservabilityMode = observabilityMode;
        }

        /// <summary> Initializes a new instance of <see cref="DeviceRegistryDataPoint"/> for deserialization. </summary>
        internal DeviceRegistryDataPoint()
        {
        }

        /// <summary> An indication of how the data point should be mapped to OpenTelemetry. </summary>
        public DataPointObservabilityMode? ObservabilityMode { get; set; }
    }
}
