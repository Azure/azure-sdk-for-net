// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> An endpoint to connect to the device. </summary>
    public partial class InboundEndpoints
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InboundEndpoints"/>. </summary>
        /// <param name="endpointType"> Type of connection endpoint. </param>
        /// <param name="address"> The endpoint address &amp; port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpointType"/> or <paramref name="address"/> is null. </exception>
        public InboundEndpoints(string endpointType, string address)
        {
            Argument.AssertNotNull(endpointType, nameof(endpointType));
            Argument.AssertNotNull(address, nameof(address));

            EndpointType = endpointType;
            Address = address;
        }

        /// <summary> Initializes a new instance of <see cref="InboundEndpoints"/>. </summary>
        /// <param name="endpointType"> Type of connection endpoint. </param>
        /// <param name="address"> The endpoint address &amp; port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com). </param>
        /// <param name="version"> Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc. </param>
        /// <param name="authentication"> Defines the client authentication mechanism to the server. </param>
        /// <param name="trustSettings"> Defines server trust settings for the endpoint. </param>
        /// <param name="additionalConfiguration"> Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF). </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InboundEndpoints(string endpointType, string address, string version, HostAuthentication authentication, TrustSettings trustSettings, string additionalConfiguration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EndpointType = endpointType;
            Address = address;
            Version = version;
            Authentication = authentication;
            TrustSettings = trustSettings;
            AdditionalConfiguration = additionalConfiguration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InboundEndpoints"/> for deserialization. </summary>
        internal InboundEndpoints()
        {
        }

        /// <summary> Type of connection endpoint. </summary>
        public string EndpointType { get; set; }
        /// <summary> The endpoint address &amp; port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com). </summary>
        public string Address { get; set; }
        /// <summary> Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc. </summary>
        public string Version { get; set; }
        /// <summary> Defines the client authentication mechanism to the server. </summary>
        public HostAuthentication Authentication { get; set; }
        /// <summary> Defines server trust settings for the endpoint. </summary>
        internal TrustSettings TrustSettings { get; set; }
        /// <summary> Defines a secret reference for certificates to trust. </summary>
        public string TrustList
        {
            get => TrustSettings is null ? default : TrustSettings.TrustList;
            set
            {
                if (TrustSettings is null)
                    TrustSettings = new TrustSettings();
                TrustSettings.TrustList = value;
            }
        }

        /// <summary> Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF). </summary>
        public string AdditionalConfiguration { get; set; }
    }
}
