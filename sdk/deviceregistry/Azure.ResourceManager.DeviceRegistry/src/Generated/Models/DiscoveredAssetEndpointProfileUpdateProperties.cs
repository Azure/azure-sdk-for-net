// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceRegistry.Models
{
    /// <summary> The updatable properties of the DiscoveredAssetEndpointProfile. </summary>
    public partial class DiscoveredAssetEndpointProfileUpdateProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DiscoveredAssetEndpointProfileUpdateProperties"/>. </summary>
        public DiscoveredAssetEndpointProfileUpdateProperties()
        {
            SupportedAuthenticationMethods = new ChangeTrackingList<AuthenticationMethod>();
        }

        /// <summary> Initializes a new instance of <see cref="DiscoveredAssetEndpointProfileUpdateProperties"/>. </summary>
        /// <param name="targetAddress"> The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration. </param>
        /// <param name="additionalConfiguration"> Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF). </param>
        /// <param name="supportedAuthenticationMethods"> List of supported authentication methods supported by the target server. </param>
        /// <param name="endpointProfileType"> Defines the configuration for the connector type that is being used with the endpoint profile. </param>
        /// <param name="discoveryId"> Identifier used to detect changes in the asset endpoint profile. </param>
        /// <param name="version"> An integer that is incremented each time the resource is modified. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DiscoveredAssetEndpointProfileUpdateProperties(Uri targetAddress, string additionalConfiguration, IList<AuthenticationMethod> supportedAuthenticationMethods, string endpointProfileType, string discoveryId, long? version, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TargetAddress = targetAddress;
            AdditionalConfiguration = additionalConfiguration;
            SupportedAuthenticationMethods = supportedAuthenticationMethods;
            EndpointProfileType = endpointProfileType;
            DiscoveryId = discoveryId;
            Version = version;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration. </summary>
        public Uri TargetAddress { get; set; }
        /// <summary> Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF). </summary>
        public string AdditionalConfiguration { get; set; }
        /// <summary> List of supported authentication methods supported by the target server. </summary>
        public IList<AuthenticationMethod> SupportedAuthenticationMethods { get; }
        /// <summary> Defines the configuration for the connector type that is being used with the endpoint profile. </summary>
        public string EndpointProfileType { get; set; }
        /// <summary> Identifier used to detect changes in the asset endpoint profile. </summary>
        public string DiscoveryId { get; set; }
        /// <summary> An integer that is incremented each time the resource is modified. </summary>
        public long? Version { get; set; }
    }
}
