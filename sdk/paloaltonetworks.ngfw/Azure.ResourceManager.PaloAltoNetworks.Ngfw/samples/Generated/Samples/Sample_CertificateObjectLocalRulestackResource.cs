// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.PaloAltoNetworks.Ngfw;
using Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw.Samples
{
    public partial class Sample_CertificateObjectLocalRulestackResource
    {
        // CertificateObjectLocalRulestack_Get_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_CertificateObjectLocalRulestackGetMaximumSetGen()
        {
            // Generated from example definition: specification/paloaltonetworks/resource-manager/PaloAltoNetworks.Cloudngfw/preview/2022-08-29-preview/examples/CertificateObjectLocalRulestack_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "CertificateObjectLocalRulestack_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CertificateObjectLocalRulestackResource created on azure
            // for more information of creating CertificateObjectLocalRulestackResource, please refer to the document of CertificateObjectLocalRulestackResource
            string subscriptionId = "2bf4a339-294d-4c25-b0b2-ef649e9f5c27";
            string resourceGroupName = "rgopenapi";
            string localRulestackName = "lrs1";
            string name = "armid1";
            ResourceIdentifier certificateObjectLocalRulestackResourceId = CertificateObjectLocalRulestackResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, localRulestackName, name);
            CertificateObjectLocalRulestackResource certificateObjectLocalRulestackResource = client.GetCertificateObjectLocalRulestackResource(certificateObjectLocalRulestackResourceId);

            // invoke the operation
            CertificateObjectLocalRulestackResource result = await certificateObjectLocalRulestackResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CertificateObjectLocalRulestackResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CertificateObjectLocalRulestack_Get_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_CertificateObjectLocalRulestackGetMinimumSetGen()
        {
            // Generated from example definition: specification/paloaltonetworks/resource-manager/PaloAltoNetworks.Cloudngfw/preview/2022-08-29-preview/examples/CertificateObjectLocalRulestack_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "CertificateObjectLocalRulestack_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CertificateObjectLocalRulestackResource created on azure
            // for more information of creating CertificateObjectLocalRulestackResource, please refer to the document of CertificateObjectLocalRulestackResource
            string subscriptionId = "2bf4a339-294d-4c25-b0b2-ef649e9f5c27";
            string resourceGroupName = "rgopenapi";
            string localRulestackName = "lrs1";
            string name = "armid1";
            ResourceIdentifier certificateObjectLocalRulestackResourceId = CertificateObjectLocalRulestackResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, localRulestackName, name);
            CertificateObjectLocalRulestackResource certificateObjectLocalRulestackResource = client.GetCertificateObjectLocalRulestackResource(certificateObjectLocalRulestackResourceId);

            // invoke the operation
            CertificateObjectLocalRulestackResource result = await certificateObjectLocalRulestackResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CertificateObjectLocalRulestackResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CertificateObjectLocalRulestack_CreateOrUpdate_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CertificateObjectLocalRulestackCreateOrUpdateMaximumSetGen()
        {
            // Generated from example definition: specification/paloaltonetworks/resource-manager/PaloAltoNetworks.Cloudngfw/preview/2022-08-29-preview/examples/CertificateObjectLocalRulestack_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "CertificateObjectLocalRulestack_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CertificateObjectLocalRulestackResource created on azure
            // for more information of creating CertificateObjectLocalRulestackResource, please refer to the document of CertificateObjectLocalRulestackResource
            string subscriptionId = "2bf4a339-294d-4c25-b0b2-ef649e9f5c27";
            string resourceGroupName = "rgopenapi";
            string localRulestackName = "lrs1";
            string name = "armid1";
            ResourceIdentifier certificateObjectLocalRulestackResourceId = CertificateObjectLocalRulestackResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, localRulestackName, name);
            CertificateObjectLocalRulestackResource certificateObjectLocalRulestackResource = client.GetCertificateObjectLocalRulestackResource(certificateObjectLocalRulestackResourceId);

            // invoke the operation
            CertificateObjectLocalRulestackResourceData data = new CertificateObjectLocalRulestackResourceData(BooleanEnum.True)
            {
                CertificateSignerResourceId = "",
                AuditComment = "comment",
                Description = "description",
                ETag = new ETag("2bf4a339-294d-4c25-b0b2-ef649e9f5c27"),
            };
            ArmOperation<CertificateObjectLocalRulestackResource> lro = await certificateObjectLocalRulestackResource.UpdateAsync(WaitUntil.Completed, data);
            CertificateObjectLocalRulestackResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CertificateObjectLocalRulestackResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CertificateObjectLocalRulestack_CreateOrUpdate_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CertificateObjectLocalRulestackCreateOrUpdateMinimumSetGen()
        {
            // Generated from example definition: specification/paloaltonetworks/resource-manager/PaloAltoNetworks.Cloudngfw/preview/2022-08-29-preview/examples/CertificateObjectLocalRulestack_CreateOrUpdate_MinimumSet_Gen.json
            // this example is just showing the usage of "CertificateObjectLocalRulestack_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CertificateObjectLocalRulestackResource created on azure
            // for more information of creating CertificateObjectLocalRulestackResource, please refer to the document of CertificateObjectLocalRulestackResource
            string subscriptionId = "2bf4a339-294d-4c25-b0b2-ef649e9f5c27";
            string resourceGroupName = "rgopenapi";
            string localRulestackName = "lrs1";
            string name = "armid1";
            ResourceIdentifier certificateObjectLocalRulestackResourceId = CertificateObjectLocalRulestackResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, localRulestackName, name);
            CertificateObjectLocalRulestackResource certificateObjectLocalRulestackResource = client.GetCertificateObjectLocalRulestackResource(certificateObjectLocalRulestackResourceId);

            // invoke the operation
            CertificateObjectLocalRulestackResourceData data = new CertificateObjectLocalRulestackResourceData(BooleanEnum.True);
            ArmOperation<CertificateObjectLocalRulestackResource> lro = await certificateObjectLocalRulestackResource.UpdateAsync(WaitUntil.Completed, data);
            CertificateObjectLocalRulestackResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CertificateObjectLocalRulestackResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CertificateObjectLocalRulestack_Delete_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_CertificateObjectLocalRulestackDeleteMaximumSetGen()
        {
            // Generated from example definition: specification/paloaltonetworks/resource-manager/PaloAltoNetworks.Cloudngfw/preview/2022-08-29-preview/examples/CertificateObjectLocalRulestack_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "CertificateObjectLocalRulestack_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CertificateObjectLocalRulestackResource created on azure
            // for more information of creating CertificateObjectLocalRulestackResource, please refer to the document of CertificateObjectLocalRulestackResource
            string subscriptionId = "2bf4a339-294d-4c25-b0b2-ef649e9f5c27";
            string resourceGroupName = "rgopenapi";
            string localRulestackName = "lrs1";
            string name = "armid1";
            ResourceIdentifier certificateObjectLocalRulestackResourceId = CertificateObjectLocalRulestackResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, localRulestackName, name);
            CertificateObjectLocalRulestackResource certificateObjectLocalRulestackResource = client.GetCertificateObjectLocalRulestackResource(certificateObjectLocalRulestackResourceId);

            // invoke the operation
            await certificateObjectLocalRulestackResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // CertificateObjectLocalRulestack_Delete_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_CertificateObjectLocalRulestackDeleteMinimumSetGen()
        {
            // Generated from example definition: specification/paloaltonetworks/resource-manager/PaloAltoNetworks.Cloudngfw/preview/2022-08-29-preview/examples/CertificateObjectLocalRulestack_Delete_MinimumSet_Gen.json
            // this example is just showing the usage of "CertificateObjectLocalRulestack_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CertificateObjectLocalRulestackResource created on azure
            // for more information of creating CertificateObjectLocalRulestackResource, please refer to the document of CertificateObjectLocalRulestackResource
            string subscriptionId = "2bf4a339-294d-4c25-b0b2-ef649e9f5c27";
            string resourceGroupName = "rgopenapi";
            string localRulestackName = "lrs1";
            string name = "armid1";
            ResourceIdentifier certificateObjectLocalRulestackResourceId = CertificateObjectLocalRulestackResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, localRulestackName, name);
            CertificateObjectLocalRulestackResource certificateObjectLocalRulestackResource = client.GetCertificateObjectLocalRulestackResource(certificateObjectLocalRulestackResourceId);

            // invoke the operation
            await certificateObjectLocalRulestackResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
