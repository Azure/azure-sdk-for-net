// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw
{
    /// <summary>
    /// A class representing a collection of <see cref="PostRulestackRuleListResource" /> and their operations.
    /// Each <see cref="PostRulestackRuleListResource" /> in the collection will belong to the same instance of <see cref="GlobalRulestackResource" />.
    /// To get a <see cref="PostRulestackRuleListCollection" /> instance call the GetPostRulestackRuleLists method from an instance of <see cref="GlobalRulestackResource" />.
    /// </summary>
    public partial class PostRulestackRuleListCollection : ArmCollection, IEnumerable<PostRulestackRuleListResource>, IAsyncEnumerable<PostRulestackRuleListResource>
    {
        private readonly ClientDiagnostics _postRulestackRuleListPostRulesClientDiagnostics;
        private readonly PostRulesRestOperations _postRulestackRuleListPostRulesRestClient;

        /// <summary> Initializes a new instance of the <see cref="PostRulestackRuleListCollection"/> class for mocking. </summary>
        protected PostRulestackRuleListCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PostRulestackRuleListCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal PostRulestackRuleListCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _postRulestackRuleListPostRulesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.PaloAltoNetworks.Ngfw", PostRulestackRuleListResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(PostRulestackRuleListResource.ResourceType, out string postRulestackRuleListPostRulesApiVersion);
            _postRulestackRuleListPostRulesRestClient = new PostRulesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, postRulestackRuleListPostRulesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != GlobalRulestackResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, GlobalRulestackResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a PostRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PostRules_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="priority"> Post Rule priority. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<PostRulestackRuleListResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string priority, PostRulestackRuleListData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _postRulestackRuleListPostRulesClientDiagnostics.CreateScope("PostRulestackRuleListCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _postRulestackRuleListPostRulesRestClient.CreateOrUpdateAsync(Id.Name, priority, data, cancellationToken).ConfigureAwait(false);
                var operation = new NgfwArmOperation<PostRulestackRuleListResource>(new PostRulestackRuleListOperationSource(Client), _postRulestackRuleListPostRulesClientDiagnostics, Pipeline, _postRulestackRuleListPostRulesRestClient.CreateCreateOrUpdateRequest(Id.Name, priority, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a PostRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PostRules_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="priority"> Post Rule priority. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<PostRulestackRuleListResource> CreateOrUpdate(WaitUntil waitUntil, string priority, PostRulestackRuleListData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _postRulestackRuleListPostRulesClientDiagnostics.CreateScope("PostRulestackRuleListCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _postRulestackRuleListPostRulesRestClient.CreateOrUpdate(Id.Name, priority, data, cancellationToken);
                var operation = new NgfwArmOperation<PostRulestackRuleListResource>(new PostRulestackRuleListOperationSource(Client), _postRulestackRuleListPostRulesClientDiagnostics, Pipeline, _postRulestackRuleListPostRulesRestClient.CreateCreateOrUpdateRequest(Id.Name, priority, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a PostRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PostRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Post Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        public virtual async Task<Response<PostRulestackRuleListResource>> GetAsync(string priority, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));

            using var scope = _postRulestackRuleListPostRulesClientDiagnostics.CreateScope("PostRulestackRuleListCollection.Get");
            scope.Start();
            try
            {
                var response = await _postRulestackRuleListPostRulesRestClient.GetAsync(Id.Name, priority, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PostRulestackRuleListResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a PostRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PostRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Post Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        public virtual Response<PostRulestackRuleListResource> Get(string priority, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));

            using var scope = _postRulestackRuleListPostRulesClientDiagnostics.CreateScope("PostRulestackRuleListCollection.Get");
            scope.Start();
            try
            {
                var response = _postRulestackRuleListPostRulesRestClient.Get(Id.Name, priority, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PostRulestackRuleListResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List PostRulesResource resources by Tenant
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PostRules_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PostRulestackRuleListResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PostRulestackRuleListResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _postRulestackRuleListPostRulesRestClient.CreateListRequest(Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _postRulestackRuleListPostRulesRestClient.CreateListNextPageRequest(nextLink, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new PostRulestackRuleListResource(Client, PostRulestackRuleListData.DeserializePostRulestackRuleListData(e)), _postRulestackRuleListPostRulesClientDiagnostics, Pipeline, "PostRulestackRuleListCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List PostRulesResource resources by Tenant
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PostRules_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PostRulestackRuleListResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PostRulestackRuleListResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _postRulestackRuleListPostRulesRestClient.CreateListRequest(Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _postRulestackRuleListPostRulesRestClient.CreateListNextPageRequest(nextLink, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new PostRulestackRuleListResource(Client, PostRulestackRuleListData.DeserializePostRulestackRuleListData(e)), _postRulestackRuleListPostRulesClientDiagnostics, Pipeline, "PostRulestackRuleListCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PostRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Post Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string priority, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));

            using var scope = _postRulestackRuleListPostRulesClientDiagnostics.CreateScope("PostRulestackRuleListCollection.Exists");
            scope.Start();
            try
            {
                var response = await _postRulestackRuleListPostRulesRestClient.GetAsync(Id.Name, priority, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PostRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Post Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        public virtual Response<bool> Exists(string priority, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));

            using var scope = _postRulestackRuleListPostRulesClientDiagnostics.CreateScope("PostRulestackRuleListCollection.Exists");
            scope.Start();
            try
            {
                var response = _postRulestackRuleListPostRulesRestClient.Get(Id.Name, priority, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PostRulestackRuleListResource> IEnumerable<PostRulestackRuleListResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<PostRulestackRuleListResource> IAsyncEnumerable<PostRulestackRuleListResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
