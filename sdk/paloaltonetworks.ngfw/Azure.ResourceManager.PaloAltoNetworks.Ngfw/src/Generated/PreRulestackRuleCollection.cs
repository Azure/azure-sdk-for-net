// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw
{
    /// <summary>
    /// A class representing a collection of <see cref="PreRulestackRuleResource"/> and their operations.
    /// Each <see cref="PreRulestackRuleResource"/> in the collection will belong to the same instance of <see cref="GlobalRulestackResource"/>.
    /// To get a <see cref="PreRulestackRuleCollection"/> instance call the GetPreRulestackRules method from an instance of <see cref="GlobalRulestackResource"/>.
    /// </summary>
    public partial class PreRulestackRuleCollection : ArmCollection, IEnumerable<PreRulestackRuleResource>, IAsyncEnumerable<PreRulestackRuleResource>
    {
        private readonly ClientDiagnostics _preRulestackRulePreRulesClientDiagnostics;
        private readonly PreRulesRestOperations _preRulestackRulePreRulesRestClient;

        /// <summary> Initializes a new instance of the <see cref="PreRulestackRuleCollection"/> class for mocking. </summary>
        protected PreRulestackRuleCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PreRulestackRuleCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal PreRulestackRuleCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _preRulestackRulePreRulesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.PaloAltoNetworks.Ngfw", PreRulestackRuleResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(PreRulestackRuleResource.ResourceType, out string preRulestackRulePreRulesApiVersion);
            _preRulestackRulePreRulesRestClient = new PreRulesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, preRulestackRulePreRulesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != GlobalRulestackResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, GlobalRulestackResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a PreRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="priority"> Pre Rule priority. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<PreRulestackRuleResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string priority, PreRulestackRuleData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _preRulestackRulePreRulesClientDiagnostics.CreateScope("PreRulestackRuleCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _preRulestackRulePreRulesRestClient.CreateOrUpdateAsync(Id.Name, priority, data, cancellationToken).ConfigureAwait(false);
                var operation = new NgfwArmOperation<PreRulestackRuleResource>(new PreRulestackRuleOperationSource(Client), _preRulestackRulePreRulesClientDiagnostics, Pipeline, _preRulestackRulePreRulesRestClient.CreateCreateOrUpdateRequest(Id.Name, priority, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a PreRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="priority"> Pre Rule priority. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<PreRulestackRuleResource> CreateOrUpdate(WaitUntil waitUntil, string priority, PreRulestackRuleData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _preRulestackRulePreRulesClientDiagnostics.CreateScope("PreRulestackRuleCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _preRulestackRulePreRulesRestClient.CreateOrUpdate(Id.Name, priority, data, cancellationToken);
                var operation = new NgfwArmOperation<PreRulestackRuleResource>(new PreRulestackRuleOperationSource(Client), _preRulestackRulePreRulesClientDiagnostics, Pipeline, _preRulestackRulePreRulesRestClient.CreateCreateOrUpdateRequest(Id.Name, priority, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a PreRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Pre Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        public virtual async Task<Response<PreRulestackRuleResource>> GetAsync(string priority, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));

            using var scope = _preRulestackRulePreRulesClientDiagnostics.CreateScope("PreRulestackRuleCollection.Get");
            scope.Start();
            try
            {
                var response = await _preRulestackRulePreRulesRestClient.GetAsync(Id.Name, priority, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PreRulestackRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a PreRulesResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Pre Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        public virtual Response<PreRulestackRuleResource> Get(string priority, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));

            using var scope = _preRulestackRulePreRulesClientDiagnostics.CreateScope("PreRulestackRuleCollection.Get");
            scope.Start();
            try
            {
                var response = _preRulestackRulePreRulesRestClient.Get(Id.Name, priority, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PreRulestackRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List PreRulesResource resources by Tenant
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PreRulestackRuleResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PreRulestackRuleResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _preRulestackRulePreRulesRestClient.CreateListRequest(Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _preRulestackRulePreRulesRestClient.CreateListNextPageRequest(nextLink, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new PreRulestackRuleResource(Client, PreRulestackRuleData.DeserializePreRulestackRuleData(e)), _preRulestackRulePreRulesClientDiagnostics, Pipeline, "PreRulestackRuleCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List PreRulesResource resources by Tenant
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PreRulestackRuleResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PreRulestackRuleResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _preRulestackRulePreRulesRestClient.CreateListRequest(Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _preRulestackRulePreRulesRestClient.CreateListNextPageRequest(nextLink, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new PreRulestackRuleResource(Client, PreRulestackRuleData.DeserializePreRulestackRuleData(e)), _preRulestackRulePreRulesClientDiagnostics, Pipeline, "PreRulestackRuleCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Pre Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string priority, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));

            using var scope = _preRulestackRulePreRulesClientDiagnostics.CreateScope("PreRulestackRuleCollection.Exists");
            scope.Start();
            try
            {
                var response = await _preRulestackRulePreRulesRestClient.GetAsync(Id.Name, priority, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Pre Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        public virtual Response<bool> Exists(string priority, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));

            using var scope = _preRulestackRulePreRulesClientDiagnostics.CreateScope("PreRulestackRuleCollection.Exists");
            scope.Start();
            try
            {
                var response = _preRulestackRulePreRulesRestClient.Get(Id.Name, priority, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Pre Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        public virtual async Task<NullableResponse<PreRulestackRuleResource>> GetIfExistsAsync(string priority, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));

            using var scope = _preRulestackRulePreRulesClientDiagnostics.CreateScope("PreRulestackRuleCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _preRulestackRulePreRulesRestClient.GetAsync(Id.Name, priority, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<PreRulestackRuleResource>(response.GetRawResponse());
                return Response.FromValue(new PreRulestackRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PreRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="priority"> Pre Rule priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="priority"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="priority"/> is null. </exception>
        public virtual NullableResponse<PreRulestackRuleResource> GetIfExists(string priority, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(priority, nameof(priority));

            using var scope = _preRulestackRulePreRulesClientDiagnostics.CreateScope("PreRulestackRuleCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _preRulestackRulePreRulesRestClient.Get(Id.Name, priority, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<PreRulestackRuleResource>(response.GetRawResponse());
                return Response.FromValue(new PreRulestackRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PreRulestackRuleResource> IEnumerable<PreRulestackRuleResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<PreRulestackRuleResource> IAsyncEnumerable<PreRulestackRuleResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
