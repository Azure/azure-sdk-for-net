// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.PaloAltoNetworks.Ngfw;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmNgfwModelFactory
    {
        /// <summary> Initializes a new instance of GlobalRulestackResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Global Location. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="panETag"> PanEtag info. </param>
        /// <param name="panLocation"> Rulestack Location, Required for GlobalRulestacks, Not for LocalRulestacks. </param>
        /// <param name="scope"> Rulestack Type. </param>
        /// <param name="associatedSubscriptions"> subscription scope of global rulestack. </param>
        /// <param name="description"> rulestack description. </param>
        /// <param name="defaultMode"> Mode for default rules creation. </param>
        /// <param name="minAppIdVersion"> minimum version. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="securityServices"> Security Profile. </param>
        /// <returns> A new <see cref="Ngfw.GlobalRulestackResourceData"/> instance for mocking. </returns>
        public static GlobalRulestackResourceData GlobalRulestackResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation location = default, AzureResourceManagerManagedIdentityProperties identity = null, string panETag = null, string panLocation = null, ScopeType? scope = null, IEnumerable<string> associatedSubscriptions = null, string description = null, DefaultMode? defaultMode = null, string minAppIdVersion = null, ProvisioningState? provisioningState = null, SecurityServices securityServices = null)
        {
            associatedSubscriptions ??= new List<string>();

            return new GlobalRulestackResourceData(id, name, resourceType, systemData, location, identity, panETag, panLocation, scope, associatedSubscriptions?.ToList(), description, defaultMode, minAppIdVersion, provisioningState, securityServices);
        }

        /// <summary> Initializes a new instance of AzureResourceManagerManagedIdentityProperties. </summary>
        /// <param name="tenantId"> The Active Directory tenant id of the principal. </param>
        /// <param name="principalId"> The active directory identifier of this principal. </param>
        /// <param name="managedIdentityType"> The type of managed identity assigned to this resource. </param>
        /// <param name="userAssignedIdentities"> The identities assigned to this resource by the user. </param>
        /// <returns> A new <see cref="Models.AzureResourceManagerManagedIdentityProperties"/> instance for mocking. </returns>
        public static AzureResourceManagerManagedIdentityProperties AzureResourceManagerManagedIdentityProperties(Guid? tenantId = null, string principalId = null, ManagedIdentityType managedIdentityType = default, IDictionary<string, UserAssignedIdentity> userAssignedIdentities = null)
        {
            userAssignedIdentities ??= new Dictionary<string, UserAssignedIdentity>();

            return new AzureResourceManagerManagedIdentityProperties(tenantId, principalId, managedIdentityType, userAssignedIdentities);
        }

        /// <summary> Initializes a new instance of CertificateObjectGlobalRulestackResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="certificateSignerResourceId"> Resource Id of certificate signer, to be populated only when certificateSelfSigned is false. </param>
        /// <param name="certificateSelfSigned"> use certificate self signed. </param>
        /// <param name="auditComment"> comment for this object. </param>
        /// <param name="description"> user description for this object. </param>
        /// <param name="etag"> read only string representing last create or update. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Ngfw.CertificateObjectGlobalRulestackResourceData"/> instance for mocking. </returns>
        public static CertificateObjectGlobalRulestackResourceData CertificateObjectGlobalRulestackResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string certificateSignerResourceId = null, BooleanEnum certificateSelfSigned = default, string auditComment = null, string description = null, ETag? etag = null, ProvisioningState? provisioningState = null)
        {
            return new CertificateObjectGlobalRulestackResourceData(id, name, resourceType, systemData, certificateSignerResourceId, certificateSelfSigned, auditComment, description, etag, provisioningState);
        }

        /// <summary> Initializes a new instance of FqdnListGlobalRulestackResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> fqdn object description. </param>
        /// <param name="fqdnList"> fqdn list. </param>
        /// <param name="etag"> etag info. </param>
        /// <param name="auditComment"> comment for this object. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Ngfw.FqdnListGlobalRulestackResourceData"/> instance for mocking. </returns>
        public static FqdnListGlobalRulestackResourceData FqdnListGlobalRulestackResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, IEnumerable<string> fqdnList = null, ETag? etag = null, string auditComment = null, ProvisioningState? provisioningState = null)
        {
            fqdnList ??= new List<string>();

            return new FqdnListGlobalRulestackResourceData(id, name, resourceType, systemData, description, fqdnList?.ToList(), etag, auditComment, provisioningState);
        }

        /// <summary> Initializes a new instance of Changelog. </summary>
        /// <param name="changes"> list of changes. </param>
        /// <param name="lastCommitted"> lastCommitted timestamp. </param>
        /// <param name="lastModified"> lastModified timestamp. </param>
        /// <returns> A new <see cref="Models.Changelog"/> instance for mocking. </returns>
        public static Changelog Changelog(IEnumerable<string> changes = null, DateTimeOffset? lastCommitted = null, DateTimeOffset? lastModified = null)
        {
            changes ??= new List<string>();

            return new Changelog(changes?.ToList(), lastCommitted, lastModified);
        }

        /// <summary> Initializes a new instance of AdvSecurityObjectListResponse. </summary>
        /// <param name="value"> response value. </param>
        /// <param name="nextLink"> next link. </param>
        /// <returns> A new <see cref="Models.AdvSecurityObjectListResponse"/> instance for mocking. </returns>
        public static AdvSecurityObjectListResponse AdvSecurityObjectListResponse(AdvSecurityObjectModel value = null, string nextLink = null)
        {
            return new AdvSecurityObjectListResponse(value, nextLink);
        }

        /// <summary> Initializes a new instance of AdvSecurityObjectModel. </summary>
        /// <param name="advSecurityObjectModelType"> type of object. </param>
        /// <param name="entry"> URL entry. </param>
        /// <returns> A new <see cref="Models.AdvSecurityObjectModel"/> instance for mocking. </returns>
        public static AdvSecurityObjectModel AdvSecurityObjectModel(string advSecurityObjectModelType = null, IEnumerable<NameDescriptionObject> entry = null)
        {
            entry ??= new List<NameDescriptionObject>();

            return new AdvSecurityObjectModel(advSecurityObjectModelType, entry?.ToList());
        }

        /// <summary> Initializes a new instance of NameDescriptionObject. </summary>
        /// <param name="name"> name value. </param>
        /// <param name="description"> description value. </param>
        /// <returns> A new <see cref="Models.NameDescriptionObject"/> instance for mocking. </returns>
        public static NameDescriptionObject NameDescriptionObject(string name = null, string description = null)
        {
            return new NameDescriptionObject(name, description);
        }

        /// <summary> Initializes a new instance of Country. </summary>
        /// <param name="code"> country code. </param>
        /// <param name="description"> code description. </param>
        /// <returns> A new <see cref="Models.Country"/> instance for mocking. </returns>
        public static Country Country(string code = null, string description = null)
        {
            return new Country(code, description);
        }

        /// <summary> Initializes a new instance of PredefinedUrlCategory. </summary>
        /// <param name="action"></param>
        /// <param name="name"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> or <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="Models.PredefinedUrlCategory"/> instance for mocking. </returns>
        public static PredefinedUrlCategory PredefinedUrlCategory(string action = null, string name = null)
        {
            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new PredefinedUrlCategory(action, name);
        }

        /// <summary> Initializes a new instance of SecurityServicesResponse. </summary>
        /// <param name="value"> response value. </param>
        /// <param name="nextLink"> next link. </param>
        /// <returns> A new <see cref="Models.SecurityServicesResponse"/> instance for mocking. </returns>
        public static SecurityServicesResponse SecurityServicesResponse(SecurityServicesTypeList value = null, string nextLink = null)
        {
            return new SecurityServicesResponse(value, nextLink);
        }

        /// <summary> Initializes a new instance of SecurityServicesTypeList. </summary>
        /// <param name="securityServicesTypeListType"> security services type. </param>
        /// <param name="entry"> list. </param>
        /// <returns> A new <see cref="Models.SecurityServicesTypeList"/> instance for mocking. </returns>
        public static SecurityServicesTypeList SecurityServicesTypeList(string securityServicesTypeListType = null, IEnumerable<NameDescriptionObject> entry = null)
        {
            entry ??= new List<NameDescriptionObject>();

            return new SecurityServicesTypeList(securityServicesTypeListType, entry?.ToList());
        }

        /// <summary> Initializes a new instance of PostRulesResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="etag"> etag info. </param>
        /// <param name="ruleName"> rule name. </param>
        /// <param name="priority"></param>
        /// <param name="description"> rule description. </param>
        /// <param name="ruleState"> state of this rule. </param>
        /// <param name="source"> source address. </param>
        /// <param name="negateSource"> cidr should not be &apos;any&apos;. </param>
        /// <param name="destination"> destination address. </param>
        /// <param name="negateDestination"> cidr should not be &apos;any&apos;. </param>
        /// <param name="applications"> array of rule applications. </param>
        /// <param name="category"> rule category. </param>
        /// <param name="protocol"> any, application-default, TCP:number, UDP:number. </param>
        /// <param name="protocolPortList"> prot port list. </param>
        /// <param name="inboundInspectionCertificate"> inbound Inspection Certificate. </param>
        /// <param name="auditComment"> rule comment. </param>
        /// <param name="actionType"> rule action. </param>
        /// <param name="enableLogging"> enable or disable logging. </param>
        /// <param name="decryptionRuleType"> enable or disable decryption. </param>
        /// <param name="tags"> tag for rule. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Ngfw.PostRulesResourceData"/> instance for mocking. </returns>
        public static PostRulesResourceData PostRulesResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? etag = null, string ruleName = null, int? priority = null, string description = null, StateEnum? ruleState = null, SourceAddr source = null, BooleanEnum? negateSource = null, DestinationAddr destination = null, BooleanEnum? negateDestination = null, IEnumerable<string> applications = null, Category category = null, string protocol = null, IEnumerable<string> protocolPortList = null, string inboundInspectionCertificate = null, string auditComment = null, ActionEnum? actionType = null, StateEnum? enableLogging = null, DecryptionRuleTypeEnum? decryptionRuleType = null, IEnumerable<TagInfo> tags = null, ProvisioningState? provisioningState = null)
        {
            applications ??= new List<string>();
            protocolPortList ??= new List<string>();
            tags ??= new List<TagInfo>();

            return new PostRulesResourceData(id, name, resourceType, systemData, etag, ruleName, priority, description, ruleState, source, negateSource, destination, negateDestination, applications?.ToList(), category, protocol, protocolPortList?.ToList(), inboundInspectionCertificate, auditComment, actionType, enableLogging, decryptionRuleType, tags?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of RuleCounter. </summary>
        /// <param name="priority"> priority number. </param>
        /// <param name="ruleStackName"> rule Stack Name. </param>
        /// <param name="ruleListName"> rule list name. </param>
        /// <param name="firewallName"> firewall name. </param>
        /// <param name="ruleName"> rule name. </param>
        /// <param name="hitCount"> hit count. </param>
        /// <param name="appSeen"> apps seen. </param>
        /// <param name="timestamp"> timestamp of response. </param>
        /// <param name="requestTimestamp"> timestamp of request. </param>
        /// <param name="lastUpdatedTimestamp"> last updated timestamp. </param>
        /// <returns> A new <see cref="Models.RuleCounter"/> instance for mocking. </returns>
        public static RuleCounter RuleCounter(string priority = null, string ruleStackName = null, string ruleListName = null, string firewallName = null, string ruleName = null, int? hitCount = null, AppSeenData appSeen = null, DateTimeOffset? timestamp = null, DateTimeOffset? requestTimestamp = null, DateTimeOffset? lastUpdatedTimestamp = null)
        {
            return new RuleCounter(priority, ruleStackName, ruleListName, firewallName, ruleName, hitCount, appSeen, timestamp, requestTimestamp, lastUpdatedTimestamp);
        }

        /// <summary> Initializes a new instance of AppSeenData. </summary>
        /// <param name="count"> number of rows. </param>
        /// <param name="appSeenList"> array of appSeen. </param>
        /// <returns> A new <see cref="Models.AppSeenData"/> instance for mocking. </returns>
        public static AppSeenData AppSeenData(int count = default, IEnumerable<AppSeenInfo> appSeenList = null)
        {
            appSeenList ??= new List<AppSeenInfo>();

            return new AppSeenData(count, appSeenList?.ToList());
        }

        /// <summary> Initializes a new instance of AppSeenInfo. </summary>
        /// <param name="title"> title. </param>
        /// <param name="category"> category. </param>
        /// <param name="subCategory"> subCategory. </param>
        /// <param name="risk"> risk. </param>
        /// <param name="tag"> tag. </param>
        /// <param name="technology"> technology. </param>
        /// <param name="standardPorts"> standardPorts. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="title"/>, <paramref name="category"/>, <paramref name="subCategory"/>, <paramref name="risk"/>, <paramref name="tag"/>, <paramref name="technology"/> or <paramref name="standardPorts"/> is null. </exception>
        /// <returns> A new <see cref="Models.AppSeenInfo"/> instance for mocking. </returns>
        public static AppSeenInfo AppSeenInfo(string title = null, string category = null, string subCategory = null, string risk = null, string tag = null, string technology = null, string standardPorts = null)
        {
            if (title == null)
            {
                throw new ArgumentNullException(nameof(title));
            }
            if (category == null)
            {
                throw new ArgumentNullException(nameof(category));
            }
            if (subCategory == null)
            {
                throw new ArgumentNullException(nameof(subCategory));
            }
            if (risk == null)
            {
                throw new ArgumentNullException(nameof(risk));
            }
            if (tag == null)
            {
                throw new ArgumentNullException(nameof(tag));
            }
            if (technology == null)
            {
                throw new ArgumentNullException(nameof(technology));
            }
            if (standardPorts == null)
            {
                throw new ArgumentNullException(nameof(standardPorts));
            }

            return new AppSeenInfo(title, category, subCategory, risk, tag, technology, standardPorts);
        }

        /// <summary> Initializes a new instance of RuleCounterReset. </summary>
        /// <param name="priority"> priority number. </param>
        /// <param name="ruleStackName"> rule Stack Name. </param>
        /// <param name="ruleListName"> rule list name. </param>
        /// <param name="firewallName"> firewall name. </param>
        /// <param name="ruleName"> rule name. </param>
        /// <returns> A new <see cref="Models.RuleCounterReset"/> instance for mocking. </returns>
        public static RuleCounterReset RuleCounterReset(string priority = null, string ruleStackName = null, string ruleListName = null, string firewallName = null, string ruleName = null)
        {
            return new RuleCounterReset(priority, ruleStackName, ruleListName, firewallName, ruleName);
        }

        /// <summary> Initializes a new instance of PrefixListGlobalRulestackResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> prefix description. </param>
        /// <param name="prefixList"> prefix list. </param>
        /// <param name="etag"> etag info. </param>
        /// <param name="auditComment"> comment for this object. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Ngfw.PrefixListGlobalRulestackResourceData"/> instance for mocking. </returns>
        public static PrefixListGlobalRulestackResourceData PrefixListGlobalRulestackResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, IEnumerable<string> prefixList = null, ETag? etag = null, string auditComment = null, ProvisioningState? provisioningState = null)
        {
            prefixList ??= new List<string>();

            return new PrefixListGlobalRulestackResourceData(id, name, resourceType, systemData, description, prefixList?.ToList(), etag, auditComment, provisioningState);
        }

        /// <summary> Initializes a new instance of PreRulesResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="etag"> etag info. </param>
        /// <param name="ruleName"> rule name. </param>
        /// <param name="priority"></param>
        /// <param name="description"> rule description. </param>
        /// <param name="ruleState"> state of this rule. </param>
        /// <param name="source"> source address. </param>
        /// <param name="negateSource"> cidr should not be &apos;any&apos;. </param>
        /// <param name="destination"> destination address. </param>
        /// <param name="negateDestination"> cidr should not be &apos;any&apos;. </param>
        /// <param name="applications"> array of rule applications. </param>
        /// <param name="category"> rule category. </param>
        /// <param name="protocol"> any, application-default, TCP:number, UDP:number. </param>
        /// <param name="protocolPortList"> prot port list. </param>
        /// <param name="inboundInspectionCertificate"> inbound Inspection Certificate. </param>
        /// <param name="auditComment"> rule comment. </param>
        /// <param name="actionType"> rule action. </param>
        /// <param name="enableLogging"> enable or disable logging. </param>
        /// <param name="decryptionRuleType"> enable or disable decryption. </param>
        /// <param name="tags"> tag for rule. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Ngfw.PreRulesResourceData"/> instance for mocking. </returns>
        public static PreRulesResourceData PreRulesResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? etag = null, string ruleName = null, int? priority = null, string description = null, StateEnum? ruleState = null, SourceAddr source = null, BooleanEnum? negateSource = null, DestinationAddr destination = null, BooleanEnum? negateDestination = null, IEnumerable<string> applications = null, Category category = null, string protocol = null, IEnumerable<string> protocolPortList = null, string inboundInspectionCertificate = null, string auditComment = null, ActionEnum? actionType = null, StateEnum? enableLogging = null, DecryptionRuleTypeEnum? decryptionRuleType = null, IEnumerable<TagInfo> tags = null, ProvisioningState? provisioningState = null)
        {
            applications ??= new List<string>();
            protocolPortList ??= new List<string>();
            tags ??= new List<TagInfo>();

            return new PreRulesResourceData(id, name, resourceType, systemData, etag, ruleName, priority, description, ruleState, source, negateSource, destination, negateDestination, applications?.ToList(), category, protocol, protocolPortList?.ToList(), inboundInspectionCertificate, auditComment, actionType, enableLogging, decryptionRuleType, tags?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of FirewallResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="panETag"> panEtag info. </param>
        /// <param name="networkProfile"> Network settings. </param>
        /// <param name="isPanoramaManaged"> Panorama Managed: Default is False. Default will be CloudSec managed. </param>
        /// <param name="panoramaConfig"> Panorama Configuration. </param>
        /// <param name="associatedRulestack"> Associated Rulestack. </param>
        /// <param name="dnsSettings"> DNS settings for Firewall. </param>
        /// <param name="frontEndSettings"> Frontend settings for Firewall. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="planData"> Billing plan information. </param>
        /// <param name="marketplaceDetails"> Marketplace details. </param>
        /// <returns> A new <see cref="Ngfw.FirewallResourceData"/> instance for mocking. </returns>
        public static FirewallResourceData FirewallResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, AzureResourceManagerManagedIdentityProperties identity = null, string panETag = null, NetworkProfile networkProfile = null, BooleanEnum? isPanoramaManaged = null, PanoramaConfig panoramaConfig = null, RulestackDetails associatedRulestack = null, DnsSettings dnsSettings = null, IEnumerable<FrontendSetting> frontEndSettings = null, ProvisioningState? provisioningState = null, PlanData planData = null, MarketplaceDetails marketplaceDetails = null)
        {
            tags ??= new Dictionary<string, string>();
            frontEndSettings ??= new List<FrontendSetting>();

            return new FirewallResourceData(id, name, resourceType, systemData, tags, location, identity, panETag, networkProfile, isPanoramaManaged, panoramaConfig, associatedRulestack, dnsSettings, frontEndSettings?.ToList(), provisioningState, planData, marketplaceDetails);
        }

        /// <summary> Initializes a new instance of PanoramaConfig. </summary>
        /// <param name="configString"> Base64 encoded string representing Panorama parameters to be used by Firewall to connect to Panorama. This string is generated via azure plugin in Panorama. </param>
        /// <param name="vmAuthKey"> VM auth key for panorama connectivity. </param>
        /// <param name="panoramaServer"> Primary Panorama Server IP address value in dotted format for IPv4. </param>
        /// <param name="panoramaServer2"> Secondary Panorama Server IP address value in dotted format for IPv4. </param>
        /// <param name="dgName"> Panorama Device Group to join. </param>
        /// <param name="tplName"> Panorama Template Stack to join - (Once configured we can not edit the value). </param>
        /// <param name="cgName"> Panorama Collector Group to join - (Once configured we can not edit the value). </param>
        /// <param name="hostName"> Resource name(may be unique) for PN admin. </param>
        /// <returns> A new <see cref="Models.PanoramaConfig"/> instance for mocking. </returns>
        public static PanoramaConfig PanoramaConfig(string configString = null, string vmAuthKey = null, string panoramaServer = null, string panoramaServer2 = null, string dgName = null, string tplName = null, string cgName = null, string hostName = null)
        {
            return new PanoramaConfig(configString, vmAuthKey, panoramaServer, panoramaServer2, dgName, tplName, cgName, hostName);
        }

        /// <summary> Initializes a new instance of PlanData. </summary>
        /// <param name="usageType"> different usage type like PAYG/COMMITTED. </param>
        /// <param name="billingCycle"> different billing cycles like MONTHLY/WEEKLY. </param>
        /// <param name="planId"> plan id as published by Liftr.PAN. </param>
        /// <param name="effectiveOn"> date when plan was applied. </param>
        /// <returns> A new <see cref="Models.PlanData"/> instance for mocking. </returns>
        public static PlanData PlanData(UsageType? usageType = null, BillingCycle billingCycle = default, string planId = null, DateTimeOffset? effectiveOn = null)
        {
            return new PlanData(usageType, billingCycle, planId, effectiveOn);
        }

        /// <summary> Initializes a new instance of MarketplaceDetails. </summary>
        /// <param name="marketplaceSubscriptionId"> Marketplace Subscription Id. </param>
        /// <param name="offerId"> Offer Id. </param>
        /// <param name="publisherId"> Publisher Id. </param>
        /// <param name="marketplaceSubscriptionStatus"> Marketplace Subscription Status. </param>
        /// <returns> A new <see cref="Models.MarketplaceDetails"/> instance for mocking. </returns>
        public static MarketplaceDetails MarketplaceDetails(string marketplaceSubscriptionId = null, string offerId = null, string publisherId = null, MarketplaceSubscriptionStatus? marketplaceSubscriptionStatus = null)
        {
            return new MarketplaceDetails(marketplaceSubscriptionId, offerId, publisherId, marketplaceSubscriptionStatus);
        }

        /// <summary> Initializes a new instance of LocalRulestackResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="panETag"> PanEtag info. </param>
        /// <param name="panLocation"> Rulestack Location, Required for GlobalRulestacks, Not for LocalRulestacks. </param>
        /// <param name="scope"> Rulestack Type. </param>
        /// <param name="associatedSubscriptions"> subscription scope of global rulestack. </param>
        /// <param name="description"> rulestack description. </param>
        /// <param name="defaultMode"> Mode for default rules creation. </param>
        /// <param name="minAppIdVersion"> minimum version. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="securityServices"> Security Profile. </param>
        /// <returns> A new <see cref="Ngfw.LocalRulestackResourceData"/> instance for mocking. </returns>
        public static LocalRulestackResourceData LocalRulestackResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, AzureResourceManagerManagedIdentityProperties identity = null, string panETag = null, string panLocation = null, ScopeType? scope = null, IEnumerable<string> associatedSubscriptions = null, string description = null, DefaultMode? defaultMode = null, string minAppIdVersion = null, ProvisioningState? provisioningState = null, SecurityServices securityServices = null)
        {
            tags ??= new Dictionary<string, string>();
            associatedSubscriptions ??= new List<string>();

            return new LocalRulestackResourceData(id, name, resourceType, systemData, tags, location, identity, panETag, panLocation, scope, associatedSubscriptions?.ToList(), description, defaultMode, minAppIdVersion, provisioningState, securityServices);
        }

        /// <summary> Initializes a new instance of GlobalRulestackInfo. </summary>
        /// <param name="azureId"> rulestack description. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="azureId"/> is null. </exception>
        /// <returns> A new <see cref="Models.GlobalRulestackInfo"/> instance for mocking. </returns>
        public static GlobalRulestackInfo GlobalRulestackInfo(string azureId = null)
        {
            if (azureId == null)
            {
                throw new ArgumentNullException(nameof(azureId));
            }

            return new GlobalRulestackInfo(azureId);
        }

        /// <summary> Initializes a new instance of SupportInfo. </summary>
        /// <param name="productSku"> product SKU associated with given resource. </param>
        /// <param name="productSerial"> product Serial associated with given resource. </param>
        /// <param name="accountRegistered"> account registered in Customer Support Portal. </param>
        /// <param name="accountId"> Support account associated with given resource. </param>
        /// <param name="userDomainSupported"> user domain is supported in Customer Support Portal. </param>
        /// <param name="userRegistered"> user registered in Customer Support Portal. </param>
        /// <param name="freeTrial"> Product usage is in free trial period. </param>
        /// <param name="freeTrialDaysLeft"> Free trial days remaining. </param>
        /// <param name="freeTrialCreditLeft"> Free trial credit remaining. </param>
        /// <param name="helpURL"> URL for paloaltonetworks live community. </param>
        /// <param name="supportURL"> URL for paloaltonetworks Customer Service Portal. </param>
        /// <param name="registerURL"> URL for registering product in paloaltonetworks Customer Service Portal. </param>
        /// <returns> A new <see cref="Models.SupportInfo"/> instance for mocking. </returns>
        public static SupportInfo SupportInfo(string productSku = null, string productSerial = null, BooleanEnum? accountRegistered = null, string accountId = null, BooleanEnum? userDomainSupported = null, BooleanEnum? userRegistered = null, BooleanEnum? freeTrial = null, int? freeTrialDaysLeft = null, int? freeTrialCreditLeft = null, string helpURL = null, string supportURL = null, string registerURL = null)
        {
            return new SupportInfo(productSku, productSerial, accountRegistered, accountId, userDomainSupported, userRegistered, freeTrial, freeTrialDaysLeft, freeTrialCreditLeft, helpURL, supportURL, registerURL);
        }

        /// <summary> Initializes a new instance of CertificateObjectLocalRulestackResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="certificateSignerResourceId"> Resource Id of certificate signer, to be populated only when certificateSelfSigned is false. </param>
        /// <param name="certificateSelfSigned"> use certificate self signed. </param>
        /// <param name="auditComment"> comment for this object. </param>
        /// <param name="description"> user description for this object. </param>
        /// <param name="etag"> read only string representing last create or update. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Ngfw.CertificateObjectLocalRulestackResourceData"/> instance for mocking. </returns>
        public static CertificateObjectLocalRulestackResourceData CertificateObjectLocalRulestackResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string certificateSignerResourceId = null, BooleanEnum certificateSelfSigned = default, string auditComment = null, string description = null, ETag? etag = null, ProvisioningState? provisioningState = null)
        {
            return new CertificateObjectLocalRulestackResourceData(id, name, resourceType, systemData, certificateSignerResourceId, certificateSelfSigned, auditComment, description, etag, provisioningState);
        }

        /// <summary> Initializes a new instance of FqdnListLocalRulestackResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> fqdn object description. </param>
        /// <param name="fqdnList"> fqdn list. </param>
        /// <param name="etag"> etag info. </param>
        /// <param name="auditComment"> comment for this object. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Ngfw.FqdnListLocalRulestackResourceData"/> instance for mocking. </returns>
        public static FqdnListLocalRulestackResourceData FqdnListLocalRulestackResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, IEnumerable<string> fqdnList = null, ETag? etag = null, string auditComment = null, ProvisioningState? provisioningState = null)
        {
            fqdnList ??= new List<string>();

            return new FqdnListLocalRulestackResourceData(id, name, resourceType, systemData, description, fqdnList?.ToList(), etag, auditComment, provisioningState);
        }

        /// <summary> Initializes a new instance of LocalRulesResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="etag"> etag info. </param>
        /// <param name="ruleName"> rule name. </param>
        /// <param name="priority"></param>
        /// <param name="description"> rule description. </param>
        /// <param name="ruleState"> state of this rule. </param>
        /// <param name="source"> source address. </param>
        /// <param name="negateSource"> cidr should not be &apos;any&apos;. </param>
        /// <param name="destination"> destination address. </param>
        /// <param name="negateDestination"> cidr should not be &apos;any&apos;. </param>
        /// <param name="applications"> array of rule applications. </param>
        /// <param name="category"> rule category. </param>
        /// <param name="protocol"> any, application-default, TCP:number, UDP:number. </param>
        /// <param name="protocolPortList"> prot port list. </param>
        /// <param name="inboundInspectionCertificate"> inbound Inspection Certificate. </param>
        /// <param name="auditComment"> rule comment. </param>
        /// <param name="actionType"> rule action. </param>
        /// <param name="enableLogging"> enable or disable logging. </param>
        /// <param name="decryptionRuleType"> enable or disable decryption. </param>
        /// <param name="tags"> tag for rule. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Ngfw.LocalRulesResourceData"/> instance for mocking. </returns>
        public static LocalRulesResourceData LocalRulesResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? etag = null, string ruleName = null, int? priority = null, string description = null, StateEnum? ruleState = null, SourceAddr source = null, BooleanEnum? negateSource = null, DestinationAddr destination = null, BooleanEnum? negateDestination = null, IEnumerable<string> applications = null, Category category = null, string protocol = null, IEnumerable<string> protocolPortList = null, string inboundInspectionCertificate = null, string auditComment = null, ActionEnum? actionType = null, StateEnum? enableLogging = null, DecryptionRuleTypeEnum? decryptionRuleType = null, IEnumerable<TagInfo> tags = null, ProvisioningState? provisioningState = null)
        {
            applications ??= new List<string>();
            protocolPortList ??= new List<string>();
            tags ??= new List<TagInfo>();

            return new LocalRulesResourceData(id, name, resourceType, systemData, etag, ruleName, priority, description, ruleState, source, negateSource, destination, negateDestination, applications?.ToList(), category, protocol, protocolPortList?.ToList(), inboundInspectionCertificate, auditComment, actionType, enableLogging, decryptionRuleType, tags?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of PrefixListResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> prefix description. </param>
        /// <param name="prefixList"> prefix list. </param>
        /// <param name="etag"> etag info. </param>
        /// <param name="auditComment"> comment for this object. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Ngfw.PrefixListResourceData"/> instance for mocking. </returns>
        public static PrefixListResourceData PrefixListResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, IEnumerable<string> prefixList = null, ETag? etag = null, string auditComment = null, ProvisioningState? provisioningState = null)
        {
            prefixList ??= new List<string>();

            return new PrefixListResourceData(id, name, resourceType, systemData, description, prefixList?.ToList(), etag, auditComment, provisioningState);
        }
    }
}
