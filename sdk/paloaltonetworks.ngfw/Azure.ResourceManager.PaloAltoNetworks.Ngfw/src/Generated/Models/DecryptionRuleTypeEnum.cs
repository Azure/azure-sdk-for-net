// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models
{
    /// <summary> The DecryptionRuleTypeEnum. </summary>
    public readonly partial struct DecryptionRuleTypeEnum : IEquatable<DecryptionRuleTypeEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DecryptionRuleTypeEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DecryptionRuleTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SSLOutboundInspectionValue = "SSLOutboundInspection";
        private const string SSLInboundInspectionValue = "SSLInboundInspection";
        private const string NoneValue = "None";

        /// <summary> SSLOutboundInspection. </summary>
        public static DecryptionRuleTypeEnum SSLOutboundInspection { get; } = new DecryptionRuleTypeEnum(SSLOutboundInspectionValue);
        /// <summary> SSLInboundInspection. </summary>
        public static DecryptionRuleTypeEnum SSLInboundInspection { get; } = new DecryptionRuleTypeEnum(SSLInboundInspectionValue);
        /// <summary> None. </summary>
        public static DecryptionRuleTypeEnum None { get; } = new DecryptionRuleTypeEnum(NoneValue);
        /// <summary> Determines if two <see cref="DecryptionRuleTypeEnum"/> values are the same. </summary>
        public static bool operator ==(DecryptionRuleTypeEnum left, DecryptionRuleTypeEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DecryptionRuleTypeEnum"/> values are not the same. </summary>
        public static bool operator !=(DecryptionRuleTypeEnum left, DecryptionRuleTypeEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DecryptionRuleTypeEnum"/>. </summary>
        public static implicit operator DecryptionRuleTypeEnum(string value) => new DecryptionRuleTypeEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DecryptionRuleTypeEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DecryptionRuleTypeEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
