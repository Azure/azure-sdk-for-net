// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models
{
    public partial class FirewallVwanConfiguration : IUtf8JsonSerializable, IModelJsonSerializable<FirewallVwanConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<FirewallVwanConfiguration>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<FirewallVwanConfiguration>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(NetworkVirtualApplianceId))
            {
                writer.WritePropertyName("networkVirtualApplianceId"u8);
                writer.WriteStringValue(NetworkVirtualApplianceId);
            }
            writer.WritePropertyName("vHub"u8);
            writer.WriteObjectValue(Vhub);
            if (Optional.IsDefined(TrustSubnet))
            {
                writer.WritePropertyName("trustSubnet"u8);
                writer.WriteObjectValue(TrustSubnet);
            }
            if (Optional.IsDefined(UnTrustSubnet))
            {
                writer.WritePropertyName("unTrustSubnet"u8);
                writer.WriteObjectValue(UnTrustSubnet);
            }
            if (Optional.IsDefined(IPOfTrustSubnetForUdr))
            {
                writer.WritePropertyName("ipOfTrustSubnetForUdr"u8);
                writer.WriteObjectValue(IPOfTrustSubnetForUdr);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static FirewallVwanConfiguration DeserializeFirewallVwanConfiguration(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> networkVirtualApplianceId = default;
            IPAddressSpaceInfo vHub = default;
            Optional<IPAddressSpaceInfo> trustSubnet = default;
            Optional<IPAddressSpaceInfo> unTrustSubnet = default;
            Optional<IPAddressInfo> ipOfTrustSubnetForUdr = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("networkVirtualApplianceId"u8))
                {
                    networkVirtualApplianceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vHub"u8))
                {
                    vHub = IPAddressSpaceInfo.DeserializeIPAddressSpaceInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("trustSubnet"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    trustSubnet = IPAddressSpaceInfo.DeserializeIPAddressSpaceInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("unTrustSubnet"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    unTrustSubnet = IPAddressSpaceInfo.DeserializeIPAddressSpaceInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("ipOfTrustSubnetForUdr"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ipOfTrustSubnetForUdr = IPAddressInfo.DeserializeIPAddressInfo(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new FirewallVwanConfiguration(networkVirtualApplianceId.Value, vHub, trustSubnet.Value, unTrustSubnet.Value, ipOfTrustSubnetForUdr.Value, rawData);
        }

        FirewallVwanConfiguration IModelJsonSerializable<FirewallVwanConfiguration>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeFirewallVwanConfiguration(doc.RootElement, options);
        }

        BinaryData IModelSerializable<FirewallVwanConfiguration>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        FirewallVwanConfiguration IModelSerializable<FirewallVwanConfiguration>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeFirewallVwanConfiguration(doc.RootElement, options);
        }

        public static implicit operator RequestContent(FirewallVwanConfiguration model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator FirewallVwanConfiguration(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeFirewallVwanConfiguration(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
