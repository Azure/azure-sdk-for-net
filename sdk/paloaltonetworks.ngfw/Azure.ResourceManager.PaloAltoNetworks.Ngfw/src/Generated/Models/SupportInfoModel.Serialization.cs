// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models
{
    public partial class SupportInfoModel : IUtf8JsonSerializable, IJsonModel<SupportInfoModel>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SupportInfoModel>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SupportInfoModel>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SupportInfoModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SupportInfoModel)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(ProductSku))
            {
                writer.WritePropertyName("productSku"u8);
                writer.WriteStringValue(ProductSku);
            }
            if (Optional.IsDefined(ProductSerial))
            {
                writer.WritePropertyName("productSerial"u8);
                writer.WriteStringValue(ProductSerial);
            }
            if (Optional.IsDefined(AccountRegistrationStatus))
            {
                writer.WritePropertyName("accountRegistrationStatus"u8);
                writer.WriteStringValue(AccountRegistrationStatus.Value.ToString());
            }
            if (Optional.IsDefined(AccountId))
            {
                writer.WritePropertyName("accountId"u8);
                writer.WriteStringValue(AccountId);
            }
            if (Optional.IsDefined(FreeTrial))
            {
                writer.WritePropertyName("freeTrial"u8);
                writer.WriteStringValue(FreeTrial.Value.ToString());
            }
            if (Optional.IsDefined(FreeTrialDaysLeft))
            {
                writer.WritePropertyName("freeTrialDaysLeft"u8);
                writer.WriteNumberValue(FreeTrialDaysLeft.Value);
            }
            if (Optional.IsDefined(FreeTrialCreditLeft))
            {
                writer.WritePropertyName("freeTrialCreditLeft"u8);
                writer.WriteNumberValue(FreeTrialCreditLeft.Value);
            }
            if (Optional.IsDefined(HelpURL))
            {
                writer.WritePropertyName("helpURL"u8);
                writer.WriteStringValue(HelpURL);
            }
            if (Optional.IsDefined(SupportURL))
            {
                writer.WritePropertyName("supportURL"u8);
                writer.WriteStringValue(SupportURL);
            }
            if (Optional.IsDefined(RegisterURL))
            {
                writer.WritePropertyName("registerURL"u8);
                writer.WriteStringValue(RegisterURL);
            }
            if (Optional.IsDefined(HubUri))
            {
                writer.WritePropertyName("hubUrl"u8);
                writer.WriteStringValue(HubUri.AbsoluteUri);
            }
            if (Optional.IsDefined(Credits))
            {
                writer.WritePropertyName("credits"u8);
                writer.WriteNumberValue(Credits.Value);
            }
            if (Optional.IsDefined(MonthlyCreditLeft))
            {
                writer.WritePropertyName("monthlyCreditLeft"u8);
                writer.WriteNumberValue(MonthlyCreditLeft.Value);
            }
            if (Optional.IsDefined(StartDateForCredits))
            {
                writer.WritePropertyName("startDateForCredits"u8);
                writer.WriteStringValue(StartDateForCredits);
            }
            if (Optional.IsDefined(EndDateForCredits))
            {
                writer.WritePropertyName("endDateForCredits"u8);
                writer.WriteStringValue(EndDateForCredits);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SupportInfoModel IJsonModel<SupportInfoModel>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SupportInfoModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SupportInfoModel)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSupportInfoModel(document.RootElement, options);
        }

        internal static SupportInfoModel DeserializeSupportInfoModel(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string productSku = default;
            string productSerial = default;
            AccountRegistrationStatus? accountRegistrationStatus = default;
            string accountId = default;
            FreeTrialEnableStatus? freeTrial = default;
            int? freeTrialDaysLeft = default;
            int? freeTrialCreditLeft = default;
            string helpURL = default;
            string supportURL = default;
            string registerURL = default;
            Uri hubUrl = default;
            int? credits = default;
            int? monthlyCreditLeft = default;
            string startDateForCredits = default;
            string endDateForCredits = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("productSku"u8))
                {
                    productSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("productSerial"u8))
                {
                    productSerial = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("accountRegistrationStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    accountRegistrationStatus = new AccountRegistrationStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("accountId"u8))
                {
                    accountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("freeTrial"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    freeTrial = new FreeTrialEnableStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("freeTrialDaysLeft"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    freeTrialDaysLeft = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("freeTrialCreditLeft"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    freeTrialCreditLeft = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("helpURL"u8))
                {
                    helpURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportURL"u8))
                {
                    supportURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("registerURL"u8))
                {
                    registerURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hubUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hubUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("credits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    credits = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("monthlyCreditLeft"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monthlyCreditLeft = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("startDateForCredits"u8))
                {
                    startDateForCredits = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("endDateForCredits"u8))
                {
                    endDateForCredits = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SupportInfoModel(
                productSku,
                productSerial,
                accountRegistrationStatus,
                accountId,
                freeTrial,
                freeTrialDaysLeft,
                freeTrialCreditLeft,
                helpURL,
                supportURL,
                registerURL,
                hubUrl,
                credits,
                monthlyCreditLeft,
                startDateForCredits,
                endDateForCredits,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SupportInfoModel>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SupportInfoModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerPaloAltoNetworksNgfwContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SupportInfoModel)} does not support writing '{options.Format}' format.");
            }
        }

        SupportInfoModel IPersistableModel<SupportInfoModel>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SupportInfoModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSupportInfoModel(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SupportInfoModel)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SupportInfoModel>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
