// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models
{
    /// <summary> Possible log types. </summary>
    public readonly partial struct LogType : IEquatable<LogType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LogType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TrafficValue = "TRAFFIC";
        private const string ThreatValue = "THREAT";
        private const string DecryptionValue = "DECRYPTION";
        private const string WildfireValue = "WILDFIRE";
        private const string DLPValue = "DLP";
        private const string AuditValue = "AUDIT";

        /// <summary> TRAFFIC. </summary>
        public static LogType Traffic { get; } = new LogType(TrafficValue);
        /// <summary> THREAT. </summary>
        public static LogType Threat { get; } = new LogType(ThreatValue);
        /// <summary> DECRYPTION. </summary>
        public static LogType Decryption { get; } = new LogType(DecryptionValue);
        /// <summary> WILDFIRE. </summary>
        public static LogType Wildfire { get; } = new LogType(WildfireValue);
        /// <summary> DLP. </summary>
        public static LogType DLP { get; } = new LogType(DLPValue);
        /// <summary> AUDIT. </summary>
        public static LogType Audit { get; } = new LogType(AuditValue);
        /// <summary> Determines if two <see cref="LogType"/> values are the same. </summary>
        public static bool operator ==(LogType left, LogType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LogType"/> values are not the same. </summary>
        public static bool operator !=(LogType left, LogType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LogType"/>. </summary>
        public static implicit operator LogType(string value) => new LogType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LogType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LogType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
