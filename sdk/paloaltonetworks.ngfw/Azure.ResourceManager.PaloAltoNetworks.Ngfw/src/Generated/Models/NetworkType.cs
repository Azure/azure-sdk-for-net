// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models
{
    /// <summary> NetworkType Enum. </summary>
    public readonly partial struct NetworkType : IEquatable<NetworkType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NetworkType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VnetValue = "VNET";
        private const string VwanValue = "VWAN";

        /// <summary> VNET. </summary>
        public static NetworkType Vnet { get; } = new NetworkType(VnetValue);
        /// <summary> VWAN. </summary>
        public static NetworkType Vwan { get; } = new NetworkType(VwanValue);
        /// <summary> Determines if two <see cref="NetworkType"/> values are the same. </summary>
        public static bool operator ==(NetworkType left, NetworkType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NetworkType"/> values are not the same. </summary>
        public static bool operator !=(NetworkType left, NetworkType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NetworkType"/>. </summary>
        public static implicit operator NetworkType(string value) => new NetworkType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NetworkType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NetworkType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
