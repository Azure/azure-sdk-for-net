// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models
{
    public partial class FirewallSupportInfo : IUtf8JsonSerializable, IModelJsonSerializable<FirewallSupportInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<FirewallSupportInfo>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<FirewallSupportInfo>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(ProductSku))
            {
                writer.WritePropertyName("productSku"u8);
                writer.WriteStringValue(ProductSku);
            }
            if (Optional.IsDefined(ProductSerial))
            {
                writer.WritePropertyName("productSerial"u8);
                writer.WriteStringValue(ProductSerial);
            }
            if (Optional.IsDefined(AccountRegistered))
            {
                writer.WritePropertyName("accountRegistered"u8);
                writer.WriteStringValue(AccountRegistered.Value.ToString());
            }
            if (Optional.IsDefined(AccountId))
            {
                writer.WritePropertyName("accountId"u8);
                writer.WriteStringValue(AccountId);
            }
            if (Optional.IsDefined(UserDomainSupported))
            {
                writer.WritePropertyName("userDomainSupported"u8);
                writer.WriteStringValue(UserDomainSupported.Value.ToString());
            }
            if (Optional.IsDefined(UserRegistered))
            {
                writer.WritePropertyName("userRegistered"u8);
                writer.WriteStringValue(UserRegistered.Value.ToString());
            }
            if (Optional.IsDefined(FreeTrial))
            {
                writer.WritePropertyName("freeTrial"u8);
                writer.WriteStringValue(FreeTrial.Value.ToString());
            }
            if (Optional.IsDefined(FreeTrialDaysLeft))
            {
                writer.WritePropertyName("freeTrialDaysLeft"u8);
                writer.WriteNumberValue(FreeTrialDaysLeft.Value);
            }
            if (Optional.IsDefined(FreeTrialCreditLeft))
            {
                writer.WritePropertyName("freeTrialCreditLeft"u8);
                writer.WriteNumberValue(FreeTrialCreditLeft.Value);
            }
            if (Optional.IsDefined(HelpURL))
            {
                writer.WritePropertyName("helpURL"u8);
                writer.WriteStringValue(HelpURL);
            }
            if (Optional.IsDefined(SupportURL))
            {
                writer.WritePropertyName("supportURL"u8);
                writer.WriteStringValue(SupportURL);
            }
            if (Optional.IsDefined(RegisterURL))
            {
                writer.WritePropertyName("registerURL"u8);
                writer.WriteStringValue(RegisterURL);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static FirewallSupportInfo DeserializeFirewallSupportInfo(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> productSku = default;
            Optional<string> productSerial = default;
            Optional<FirewallBooleanType> accountRegistered = default;
            Optional<string> accountId = default;
            Optional<FirewallBooleanType> userDomainSupported = default;
            Optional<FirewallBooleanType> userRegistered = default;
            Optional<FirewallBooleanType> freeTrial = default;
            Optional<int> freeTrialDaysLeft = default;
            Optional<int> freeTrialCreditLeft = default;
            Optional<string> helpURL = default;
            Optional<string> supportURL = default;
            Optional<string> registerURL = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("productSku"u8))
                {
                    productSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("productSerial"u8))
                {
                    productSerial = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("accountRegistered"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    accountRegistered = new FirewallBooleanType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("accountId"u8))
                {
                    accountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userDomainSupported"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    userDomainSupported = new FirewallBooleanType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("userRegistered"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    userRegistered = new FirewallBooleanType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("freeTrial"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    freeTrial = new FirewallBooleanType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("freeTrialDaysLeft"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    freeTrialDaysLeft = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("freeTrialCreditLeft"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    freeTrialCreditLeft = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("helpURL"u8))
                {
                    helpURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportURL"u8))
                {
                    supportURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("registerURL"u8))
                {
                    registerURL = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new FirewallSupportInfo(productSku.Value, productSerial.Value, Optional.ToNullable(accountRegistered), accountId.Value, Optional.ToNullable(userDomainSupported), Optional.ToNullable(userRegistered), Optional.ToNullable(freeTrial), Optional.ToNullable(freeTrialDaysLeft), Optional.ToNullable(freeTrialCreditLeft), helpURL.Value, supportURL.Value, registerURL.Value, rawData);
        }

        FirewallSupportInfo IModelJsonSerializable<FirewallSupportInfo>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeFirewallSupportInfo(doc.RootElement, options);
        }

        BinaryData IModelSerializable<FirewallSupportInfo>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        FirewallSupportInfo IModelSerializable<FirewallSupportInfo>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeFirewallSupportInfo(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="FirewallSupportInfo"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="FirewallSupportInfo"/> to convert. </param>
        public static implicit operator RequestContent(FirewallSupportInfo model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="FirewallSupportInfo"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator FirewallSupportInfo(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeFirewallSupportInfo(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
