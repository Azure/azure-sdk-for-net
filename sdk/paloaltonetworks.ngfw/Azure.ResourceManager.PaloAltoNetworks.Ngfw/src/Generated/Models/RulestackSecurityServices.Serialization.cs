// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models
{
    public partial class RulestackSecurityServices : IUtf8JsonSerializable, IJsonModel<RulestackSecurityServices>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RulestackSecurityServices>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<RulestackSecurityServices>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<RulestackSecurityServices>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<RulestackSecurityServices>)} interface");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(VulnerabilityProfile))
            {
                writer.WritePropertyName("vulnerabilityProfile"u8);
                writer.WriteStringValue(VulnerabilityProfile);
            }
            if (Optional.IsDefined(AntiSpywareProfile))
            {
                writer.WritePropertyName("antiSpywareProfile"u8);
                writer.WriteStringValue(AntiSpywareProfile);
            }
            if (Optional.IsDefined(AntiVirusProfile))
            {
                writer.WritePropertyName("antiVirusProfile"u8);
                writer.WriteStringValue(AntiVirusProfile);
            }
            if (Optional.IsDefined(UrlFilteringProfile))
            {
                writer.WritePropertyName("urlFilteringProfile"u8);
                writer.WriteStringValue(UrlFilteringProfile);
            }
            if (Optional.IsDefined(FileBlockingProfile))
            {
                writer.WritePropertyName("fileBlockingProfile"u8);
                writer.WriteStringValue(FileBlockingProfile);
            }
            if (Optional.IsDefined(DnsSubscription))
            {
                writer.WritePropertyName("dnsSubscription"u8);
                writer.WriteStringValue(DnsSubscription);
            }
            if (Optional.IsDefined(OutboundUnTrustCertificate))
            {
                writer.WritePropertyName("outboundUnTrustCertificate"u8);
                writer.WriteStringValue(OutboundUnTrustCertificate);
            }
            if (Optional.IsDefined(OutboundTrustCertificate))
            {
                writer.WritePropertyName("outboundTrustCertificate"u8);
                writer.WriteStringValue(OutboundTrustCertificate);
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RulestackSecurityServices IJsonModel<RulestackSecurityServices>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RulestackSecurityServices)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRulestackSecurityServices(document.RootElement, options);
        }

        internal static RulestackSecurityServices DeserializeRulestackSecurityServices(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> vulnerabilityProfile = default;
            Optional<string> antiSpywareProfile = default;
            Optional<string> antiVirusProfile = default;
            Optional<string> urlFilteringProfile = default;
            Optional<string> fileBlockingProfile = default;
            Optional<string> dnsSubscription = default;
            Optional<string> outboundUnTrustCertificate = default;
            Optional<string> outboundTrustCertificate = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("vulnerabilityProfile"u8))
                {
                    vulnerabilityProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("antiSpywareProfile"u8))
                {
                    antiSpywareProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("antiVirusProfile"u8))
                {
                    antiVirusProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("urlFilteringProfile"u8))
                {
                    urlFilteringProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileBlockingProfile"u8))
                {
                    fileBlockingProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dnsSubscription"u8))
                {
                    dnsSubscription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outboundUnTrustCertificate"u8))
                {
                    outboundUnTrustCertificate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outboundTrustCertificate"u8))
                {
                    outboundTrustCertificate = property.Value.GetString();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RulestackSecurityServices(vulnerabilityProfile.Value, antiSpywareProfile.Value, antiVirusProfile.Value, urlFilteringProfile.Value, fileBlockingProfile.Value, dnsSubscription.Value, outboundUnTrustCertificate.Value, outboundTrustCertificate.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<RulestackSecurityServices>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RulestackSecurityServices)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        RulestackSecurityServices IPersistableModel<RulestackSecurityServices>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RulestackSecurityServices)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeRulestackSecurityServices(document.RootElement, options);
        }

        string IPersistableModel<RulestackSecurityServices>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
