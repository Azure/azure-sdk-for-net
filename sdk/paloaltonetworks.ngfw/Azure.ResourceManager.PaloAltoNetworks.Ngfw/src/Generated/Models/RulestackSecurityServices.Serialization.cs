// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.PaloAltoNetworks.Ngfw.Models
{
    public partial class RulestackSecurityServices : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(VulnerabilityProfile))
            {
                writer.WritePropertyName("vulnerabilityProfile"u8);
                writer.WriteStringValue(VulnerabilityProfile);
            }
            if (Optional.IsDefined(AntiSpywareProfile))
            {
                writer.WritePropertyName("antiSpywareProfile"u8);
                writer.WriteStringValue(AntiSpywareProfile);
            }
            if (Optional.IsDefined(AntiVirusProfile))
            {
                writer.WritePropertyName("antiVirusProfile"u8);
                writer.WriteStringValue(AntiVirusProfile);
            }
            if (Optional.IsDefined(UrlFilteringProfile))
            {
                writer.WritePropertyName("urlFilteringProfile"u8);
                writer.WriteStringValue(UrlFilteringProfile);
            }
            if (Optional.IsDefined(FileBlockingProfile))
            {
                writer.WritePropertyName("fileBlockingProfile"u8);
                writer.WriteStringValue(FileBlockingProfile);
            }
            if (Optional.IsDefined(DnsSubscription))
            {
                writer.WritePropertyName("dnsSubscription"u8);
                writer.WriteStringValue(DnsSubscription);
            }
            if (Optional.IsDefined(OutboundUnTrustCertificate))
            {
                writer.WritePropertyName("outboundUnTrustCertificate"u8);
                writer.WriteStringValue(OutboundUnTrustCertificate);
            }
            if (Optional.IsDefined(OutboundTrustCertificate))
            {
                writer.WritePropertyName("outboundTrustCertificate"u8);
                writer.WriteStringValue(OutboundTrustCertificate);
            }
            writer.WriteEndObject();
        }

        internal static RulestackSecurityServices DeserializeRulestackSecurityServices(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> vulnerabilityProfile = default;
            Optional<string> antiSpywareProfile = default;
            Optional<string> antiVirusProfile = default;
            Optional<string> urlFilteringProfile = default;
            Optional<string> fileBlockingProfile = default;
            Optional<string> dnsSubscription = default;
            Optional<string> outboundUnTrustCertificate = default;
            Optional<string> outboundTrustCertificate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("vulnerabilityProfile"u8))
                {
                    vulnerabilityProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("antiSpywareProfile"u8))
                {
                    antiSpywareProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("antiVirusProfile"u8))
                {
                    antiVirusProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("urlFilteringProfile"u8))
                {
                    urlFilteringProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileBlockingProfile"u8))
                {
                    fileBlockingProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dnsSubscription"u8))
                {
                    dnsSubscription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outboundUnTrustCertificate"u8))
                {
                    outboundUnTrustCertificate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outboundTrustCertificate"u8))
                {
                    outboundTrustCertificate = property.Value.GetString();
                    continue;
                }
            }
            return new RulestackSecurityServices(vulnerabilityProfile.Value, antiSpywareProfile.Value, antiVirusProfile.Value, urlFilteringProfile.Value, fileBlockingProfile.Value, dnsSubscription.Value, outboundUnTrustCertificate.Value, outboundTrustCertificate.Value);
        }
    }
}
