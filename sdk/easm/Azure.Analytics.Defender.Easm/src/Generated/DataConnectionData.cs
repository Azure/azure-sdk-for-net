// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Analytics.Defender.Easm
{
    /// <summary>
    /// The DataConnectionData.
    /// Please note <see cref="DataConnectionData"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="LogAnalyticsDataConnectionData"/> and <see cref="AzureDataExplorerDataConnectionData"/>.
    /// </summary>
    public abstract partial class DataConnectionData
    {
        /// <summary> Initializes a new instance of DataConnectionData. </summary>
        protected DataConnectionData()
        {
        }

        /// <summary> Initializes a new instance of DataConnectionData. </summary>
        /// <param name="kind"> Discriminator. </param>
        /// <param name="name"> The name of data connection. </param>
        /// <param name="content"> The type of data the data connection will transfer. </param>
        /// <param name="frequency"> The rate at which the data connection will receive updates. </param>
        /// <param name="frequencyOffset"> The day to update the data connection on. (1-7 for weekly, 1-31 for monthly). </param>
        internal DataConnectionData(string kind, string name, DataConnectionContent? content, DataConnectionFrequency? frequency, int? frequencyOffset)
        {
            Kind = kind;
            Name = name;
            Content = content;
            Frequency = frequency;
            FrequencyOffset = frequencyOffset;
        }

        /// <summary> Discriminator. </summary>
        internal string Kind { get; set; }
        /// <summary> The name of data connection. </summary>
        public string Name { get; set; }
        /// <summary> The type of data the data connection will transfer. </summary>
        public DataConnectionContent? Content { get; set; }
        /// <summary> The rate at which the data connection will receive updates. </summary>
        public DataConnectionFrequency? Frequency { get; set; }
        /// <summary> The day to update the data connection on. (1-7 for weekly, 1-31 for monthly). </summary>
        public int? FrequencyOffset { get; set; }
    }
}
