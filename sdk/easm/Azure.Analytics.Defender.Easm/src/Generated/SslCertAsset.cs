// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> The SslCertAsset. </summary>
    public partial class SslCertAsset : InventoryAsset
    {
        /// <summary> Initializes a new instance of SslCertAsset. </summary>
        public SslCertAsset()
        {
            SubjectCommonNames = new ChangeTrackingList<string>();
            Organizations = new ChangeTrackingList<string>();
            OrganizationalUnits = new ChangeTrackingList<string>();
            IssuerCommonNames = new ChangeTrackingList<string>();
            SubjectAlternativeNames = new ChangeTrackingList<string>();
            IssuerAlternativeNames = new ChangeTrackingList<string>();
            Sources = new ChangeTrackingList<Source>();
            SubjectLocality = new ChangeTrackingList<string>();
            SubjectState = new ChangeTrackingList<string>();
            SubjectCountry = new ChangeTrackingList<string>();
            IssuerLocality = new ChangeTrackingList<string>();
            IssuerState = new ChangeTrackingList<string>();
            IssuerCountry = new ChangeTrackingList<string>();
            SubjectOrganizations = new ChangeTrackingList<string>();
            SubjectOrganizationalUnits = new ChangeTrackingList<string>();
            IssuerOrganizations = new ChangeTrackingList<string>();
            IssuerOrganizationalUnits = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of SslCertAsset. </summary>
        /// <param name="sha1"></param>
        /// <param name="subjectCommonNames"></param>
        /// <param name="organizations"></param>
        /// <param name="organizationalUnits"></param>
        /// <param name="issuerCommonNames"></param>
        /// <param name="sigAlgName"></param>
        /// <param name="invalidAfter"></param>
        /// <param name="serialNumber"></param>
        /// <param name="subjectAlternativeNames"></param>
        /// <param name="issuerAlternativeNames"></param>
        /// <param name="sources"></param>
        /// <param name="firstSeen"></param>
        /// <param name="lastSeen"></param>
        /// <param name="count"></param>
        /// <param name="invalidBefore"></param>
        /// <param name="keySize"></param>
        /// <param name="keyAlgorithm"></param>
        /// <param name="subjectLocality"></param>
        /// <param name="subjectState"></param>
        /// <param name="subjectCountry"></param>
        /// <param name="issuerLocality"></param>
        /// <param name="issuerState"></param>
        /// <param name="issuerCountry"></param>
        /// <param name="subjectOrganizations"></param>
        /// <param name="subjectOrganizationalUnits"></param>
        /// <param name="issuerOrganizations"></param>
        /// <param name="issuerOrganizationalUnits"></param>
        /// <param name="version"></param>
        /// <param name="certificateAuthority"></param>
        /// <param name="selfSigned"></param>
        /// <param name="sigAlgOid"></param>
        /// <param name="recent"></param>
        /// <param name="validationType"></param>
        internal SslCertAsset(string sha1, IList<string> subjectCommonNames, IList<string> organizations, IList<string> organizationalUnits, IList<string> issuerCommonNames, string sigAlgName, DateTimeOffset? invalidAfter, string serialNumber, IList<string> subjectAlternativeNames, IList<string> issuerAlternativeNames, IList<Source> sources, DateTimeOffset? firstSeen, DateTimeOffset? lastSeen, long? count, DateTimeOffset? invalidBefore, int? keySize, string keyAlgorithm, IList<string> subjectLocality, IList<string> subjectState, IList<string> subjectCountry, IList<string> issuerLocality, IList<string> issuerState, IList<string> issuerCountry, IList<string> subjectOrganizations, IList<string> subjectOrganizationalUnits, IList<string> issuerOrganizations, IList<string> issuerOrganizationalUnits, int? version, bool? certificateAuthority, bool? selfSigned, string sigAlgOid, bool? recent, SslCertAssetValidationType? validationType)
        {
            Sha1 = sha1;
            SubjectCommonNames = subjectCommonNames;
            Organizations = organizations;
            OrganizationalUnits = organizationalUnits;
            IssuerCommonNames = issuerCommonNames;
            SigAlgName = sigAlgName;
            InvalidAfter = invalidAfter;
            SerialNumber = serialNumber;
            SubjectAlternativeNames = subjectAlternativeNames;
            IssuerAlternativeNames = issuerAlternativeNames;
            Sources = sources;
            FirstSeen = firstSeen;
            LastSeen = lastSeen;
            Count = count;
            InvalidBefore = invalidBefore;
            KeySize = keySize;
            KeyAlgorithm = keyAlgorithm;
            SubjectLocality = subjectLocality;
            SubjectState = subjectState;
            SubjectCountry = subjectCountry;
            IssuerLocality = issuerLocality;
            IssuerState = issuerState;
            IssuerCountry = issuerCountry;
            SubjectOrganizations = subjectOrganizations;
            SubjectOrganizationalUnits = subjectOrganizationalUnits;
            IssuerOrganizations = issuerOrganizations;
            IssuerOrganizationalUnits = issuerOrganizationalUnits;
            Version = version;
            CertificateAuthority = certificateAuthority;
            SelfSigned = selfSigned;
            SigAlgOid = sigAlgOid;
            Recent = recent;
            ValidationType = validationType;
        }

        /// <summary> Gets or sets the sha 1. </summary>
        public string Sha1 { get; set; }
        /// <summary> Gets the subject common names. </summary>
        public IList<string> SubjectCommonNames { get; }
        /// <summary> Gets the organizations. </summary>
        public IList<string> Organizations { get; }
        /// <summary> Gets the organizational units. </summary>
        public IList<string> OrganizationalUnits { get; }
        /// <summary> Gets the issuer common names. </summary>
        public IList<string> IssuerCommonNames { get; }
        /// <summary> Gets or sets the sig alg name. </summary>
        public string SigAlgName { get; set; }
        /// <summary> Gets or sets the invalid after. </summary>
        public DateTimeOffset? InvalidAfter { get; set; }
        /// <summary> Gets or sets the serial number. </summary>
        public string SerialNumber { get; set; }
        /// <summary> Gets the subject alternative names. </summary>
        public IList<string> SubjectAlternativeNames { get; }
        /// <summary> Gets the issuer alternative names. </summary>
        public IList<string> IssuerAlternativeNames { get; }
        /// <summary> Gets the sources. </summary>
        public IList<Source> Sources { get; }
        /// <summary> Gets or sets the first seen. </summary>
        public DateTimeOffset? FirstSeen { get; set; }
        /// <summary> Gets or sets the last seen. </summary>
        public DateTimeOffset? LastSeen { get; set; }
        /// <summary> Gets or sets the count. </summary>
        public long? Count { get; set; }
        /// <summary> Gets or sets the invalid before. </summary>
        public DateTimeOffset? InvalidBefore { get; set; }
        /// <summary> Gets or sets the key size. </summary>
        public int? KeySize { get; set; }
        /// <summary> Gets or sets the key algorithm. </summary>
        public string KeyAlgorithm { get; set; }
        /// <summary> Gets the subject locality. </summary>
        public IList<string> SubjectLocality { get; }
        /// <summary> Gets the subject state. </summary>
        public IList<string> SubjectState { get; }
        /// <summary> Gets the subject country. </summary>
        public IList<string> SubjectCountry { get; }
        /// <summary> Gets the issuer locality. </summary>
        public IList<string> IssuerLocality { get; }
        /// <summary> Gets the issuer state. </summary>
        public IList<string> IssuerState { get; }
        /// <summary> Gets the issuer country. </summary>
        public IList<string> IssuerCountry { get; }
        /// <summary> Gets the subject organizations. </summary>
        public IList<string> SubjectOrganizations { get; }
        /// <summary> Gets the subject organizational units. </summary>
        public IList<string> SubjectOrganizationalUnits { get; }
        /// <summary> Gets the issuer organizations. </summary>
        public IList<string> IssuerOrganizations { get; }
        /// <summary> Gets the issuer organizational units. </summary>
        public IList<string> IssuerOrganizationalUnits { get; }
        /// <summary> Gets or sets the version. </summary>
        public int? Version { get; set; }
        /// <summary> Gets or sets the certificate authority. </summary>
        public bool? CertificateAuthority { get; set; }
        /// <summary> Gets or sets the self signed. </summary>
        public bool? SelfSigned { get; set; }
        /// <summary> Gets or sets the sig alg oid. </summary>
        public string SigAlgOid { get; set; }
        /// <summary> Gets or sets the recent. </summary>
        public bool? Recent { get; set; }
        /// <summary> Gets or sets the validation type. </summary>
        public SslCertAssetValidationType? ValidationType { get; set; }
    }
}
