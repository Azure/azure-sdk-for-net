// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> The latest run of this disco group with some limited information, null if the group has never been run. </summary>
    public partial class DiscoRunResult
    {
        /// <summary> Initializes a new instance of <see cref="DiscoRunResult"/>. </summary>
        internal DiscoRunResult()
        {
            Seeds = new ChangeTrackingList<DiscoSource>();
            Excludes = new ChangeTrackingList<DiscoSource>();
            Names = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="DiscoRunResult"/>. </summary>
        /// <param name="submittedDate"> The date for when the disco run was created in the system. </param>
        /// <param name="startedDate"> The date for when the disco run was actually started by the system. </param>
        /// <param name="completedDate"> The date for when the disco run was completed by the system. </param>
        /// <param name="tier"> The tier which will affect the algorithm used for the disco run. </param>
        /// <param name="state"> The State of the disco run. </param>
        /// <param name="totalAssetsFoundCount"> The total count of assets that were found this disco run. </param>
        /// <param name="seeds"> The list of seeds used for the disco run. </param>
        /// <param name="excludes"> The list of excludes used for the disco run, aka assets to exclude from the discovery algorithm. </param>
        /// <param name="names"> The list of names used for the disco run. </param>
        internal DiscoRunResult(DateTimeOffset? submittedDate, DateTimeOffset? startedDate, DateTimeOffset? completedDate, string tier, DiscoRunState? state, long? totalAssetsFoundCount, IReadOnlyList<DiscoSource> seeds, IReadOnlyList<DiscoSource> excludes, IReadOnlyList<string> names)
        {
            SubmittedDate = submittedDate;
            StartedDate = startedDate;
            CompletedDate = completedDate;
            Tier = tier;
            State = state;
            TotalAssetsFoundCount = totalAssetsFoundCount;
            Seeds = seeds;
            Excludes = excludes;
            Names = names;
        }

        /// <summary> The date for when the disco run was created in the system. </summary>
        public DateTimeOffset? SubmittedDate { get; }
        /// <summary> The date for when the disco run was actually started by the system. </summary>
        public DateTimeOffset? StartedDate { get; }
        /// <summary> The date for when the disco run was completed by the system. </summary>
        public DateTimeOffset? CompletedDate { get; }
        /// <summary> The tier which will affect the algorithm used for the disco run. </summary>
        public string Tier { get; }
        /// <summary> The State of the disco run. </summary>
        public DiscoRunState? State { get; }
        /// <summary> The total count of assets that were found this disco run. </summary>
        public long? TotalAssetsFoundCount { get; }
        /// <summary> The list of seeds used for the disco run. </summary>
        public IReadOnlyList<DiscoSource> Seeds { get; }
        /// <summary> The list of excludes used for the disco run, aka assets to exclude from the discovery algorithm. </summary>
        public IReadOnlyList<DiscoSource> Excludes { get; }
        /// <summary> The list of names used for the disco run. </summary>
        public IReadOnlyList<string> Names { get; }
    }
}
