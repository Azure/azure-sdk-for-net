// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> This is an object that exists to provide a common schema definition for the policy response. </summary>
    public partial class EasmPolicy
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EasmPolicy"/>. </summary>
        /// <param name="filterName"> Name of the saved filter query to be used to select assets that are to be updated by a given policy. </param>
        /// <param name="action"> Action specifying what the policy should do. </param>
        /// <param name="actionParameters"> Additional parameters needed to perform the policy action. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filterName"/> or <paramref name="actionParameters"/> is null. </exception>
        public EasmPolicy(string filterName, PolicyAction action, EasmActionParametersContent actionParameters)
        {
            Argument.AssertNotNull(filterName, nameof(filterName));
            Argument.AssertNotNull(actionParameters, nameof(actionParameters));

            FilterName = filterName;
            Action = action;
            ActionParameters = actionParameters;
        }

        /// <summary> Initializes a new instance of <see cref="EasmPolicy"/>. </summary>
        /// <param name="id"> This is typically the same as the name but might be different for different models. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="description"> A human readable description of what the policy should do. </param>
        /// <param name="filterName"> Name of the saved filter query to be used to select assets that are to be updated by a given policy. </param>
        /// <param name="action"> Action specifying what the policy should do. </param>
        /// <param name="updatedAssetsCount"> Number of assets in inventory that have been updated by this policy. </param>
        /// <param name="user"> The unique name of the user that created the policy user@gmail.com. </param>
        /// <param name="createdDate"> The date this policy was created, in RFC3339 format. </param>
        /// <param name="updatedDate"> The date this policy was last updated, in RFC3339 format. </param>
        /// <param name="actionParameters"> Additional parameters needed to perform the policy action. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EasmPolicy(string id, string name, string displayName, string description, string filterName, PolicyAction action, long? updatedAssetsCount, string user, DateTimeOffset? createdDate, DateTimeOffset? updatedDate, EasmActionParametersContent actionParameters, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Name = name;
            DisplayName = displayName;
            Description = description;
            FilterName = filterName;
            Action = action;
            UpdatedAssetsCount = updatedAssetsCount;
            User = user;
            CreatedDate = createdDate;
            UpdatedDate = updatedDate;
            ActionParameters = actionParameters;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EasmPolicy"/> for deserialization. </summary>
        internal EasmPolicy()
        {
        }

        /// <summary> This is typically the same as the name but might be different for different models. </summary>
        public string Id { get; }
        /// <summary> The caller provided unique name for the resource. </summary>
        public string Name { get; }
        /// <summary> The name that can be used for display purposes. </summary>
        public string DisplayName { get; }
        /// <summary> A human readable description of what the policy should do. </summary>
        public string Description { get; set; }
        /// <summary> Name of the saved filter query to be used to select assets that are to be updated by a given policy. </summary>
        public string FilterName { get; set; }
        /// <summary> Action specifying what the policy should do. </summary>
        public PolicyAction Action { get; set; }
        /// <summary> Number of assets in inventory that have been updated by this policy. </summary>
        public long? UpdatedAssetsCount { get; }
        /// <summary> The unique name of the user that created the policy user@gmail.com. </summary>
        public string User { get; }
        /// <summary> The date this policy was created, in RFC3339 format. </summary>
        public DateTimeOffset? CreatedDate { get; }
        /// <summary> The date this policy was last updated, in RFC3339 format. </summary>
        public DateTimeOffset? UpdatedDate { get; }
        /// <summary> Additional parameters needed to perform the policy action. </summary>
        public EasmActionParametersContent ActionParameters { get; set; }
    }
}
