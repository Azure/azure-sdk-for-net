// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Defender.Easm
{
    public partial class DiscoRunResult : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SubmittedDate))
            {
                writer.WritePropertyName("submittedDate"u8);
                writer.WriteStringValue(SubmittedDate.Value, "O");
            }
            if (Optional.IsDefined(StartedDate))
            {
                writer.WritePropertyName("startedDate"u8);
                writer.WriteStringValue(StartedDate.Value, "O");
            }
            if (Optional.IsDefined(CompletedDate))
            {
                writer.WritePropertyName("completedDate"u8);
                writer.WriteStringValue(CompletedDate.Value, "O");
            }
            if (Optional.IsDefined(Tier))
            {
                writer.WritePropertyName("tier"u8);
                writer.WriteStringValue(Tier);
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsDefined(TotalAssetsFoundCount))
            {
                writer.WritePropertyName("totalAssetsFoundCount"u8);
                writer.WriteNumberValue(TotalAssetsFoundCount.Value);
            }
            if (Optional.IsCollectionDefined(Seeds))
            {
                writer.WritePropertyName("seeds"u8);
                writer.WriteStartArray();
                foreach (var item in Seeds)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Excludes))
            {
                writer.WritePropertyName("excludes"u8);
                writer.WriteStartArray();
                foreach (var item in Excludes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Names))
            {
                writer.WritePropertyName("names"u8);
                writer.WriteStartArray();
                foreach (var item in Names)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static DiscoRunResult DeserializeDiscoRunResult(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DateTimeOffset> submittedDate = default;
            Optional<DateTimeOffset> startedDate = default;
            Optional<DateTimeOffset> completedDate = default;
            Optional<string> tier = default;
            Optional<DiscoRunState> state = default;
            Optional<long> totalAssetsFoundCount = default;
            Optional<IList<DiscoSource>> seeds = default;
            Optional<IList<DiscoSource>> excludes = default;
            Optional<IList<string>> names = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("submittedDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    submittedDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("startedDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startedDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("completedDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    completedDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("tier"u8))
                {
                    tier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new DiscoRunState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("totalAssetsFoundCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalAssetsFoundCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("seeds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DiscoSource> array = new List<DiscoSource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DiscoSource.DeserializeDiscoSource(item));
                    }
                    seeds = array;
                    continue;
                }
                if (property.NameEquals("excludes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DiscoSource> array = new List<DiscoSource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DiscoSource.DeserializeDiscoSource(item));
                    }
                    excludes = array;
                    continue;
                }
                if (property.NameEquals("names"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    names = array;
                    continue;
                }
            }
            return new DiscoRunResult(Optional.ToNullable(submittedDate), Optional.ToNullable(startedDate), Optional.ToNullable(completedDate), tier.Value, Optional.ToNullable(state), Optional.ToNullable(totalAssetsFoundCount), Optional.ToList(seeds), Optional.ToList(excludes), Optional.ToList(names));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static DiscoRunResult FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeDiscoRunResult(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
