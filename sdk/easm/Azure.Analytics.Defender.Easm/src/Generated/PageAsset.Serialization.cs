// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Defender.Easm
{
    public partial class PageAsset : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Url))
            {
                writer.WritePropertyName("url"u8);
                writer.WriteStringValue(Url.AbsoluteUri);
            }
            if (Optional.IsDefined(HttpMethod))
            {
                writer.WritePropertyName("httpMethod"u8);
                writer.WriteStringValue(HttpMethod);
            }
            if (Optional.IsDefined(Service))
            {
                writer.WritePropertyName("service"u8);
                writer.WriteStringValue(Service);
            }
            if (Optional.IsCollectionDefined(IpAddresses))
            {
                writer.WritePropertyName("ipAddresses"u8);
                writer.WriteStartArray();
                foreach (var item in IpAddresses)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Successful))
            {
                writer.WritePropertyName("successful"u8);
                writer.WriteStartArray();
                foreach (var item in Successful)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(HttpResponseCodes))
            {
                writer.WritePropertyName("httpResponseCodes"u8);
                writer.WriteStartArray();
                foreach (var item in HttpResponseCodes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(HttpResponseMessages))
            {
                writer.WritePropertyName("httpResponseMessages"u8);
                writer.WriteStartArray();
                foreach (var item in HttpResponseMessages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ResponseTimes))
            {
                writer.WritePropertyName("responseTimes"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseTimes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Frames))
            {
                writer.WritePropertyName("frames"u8);
                writer.WriteStartArray();
                foreach (var item in Frames)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Windows))
            {
                writer.WritePropertyName("windows"u8);
                writer.WriteStartArray();
                foreach (var item in Windows)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(NonHtmlFrames))
            {
                writer.WritePropertyName("nonHtmlFrames"u8);
                writer.WriteStartArray();
                foreach (var item in NonHtmlFrames)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(UndirectedContent))
            {
                writer.WritePropertyName("undirectedContent"u8);
                writer.WriteStartArray();
                foreach (var item in UndirectedContent)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ContentTypes))
            {
                writer.WritePropertyName("contentTypes"u8);
                writer.WriteStartArray();
                foreach (var item in ContentTypes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ContentLengths))
            {
                writer.WritePropertyName("contentLengths"u8);
                writer.WriteStartArray();
                foreach (var item in ContentLengths)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(WindowNames))
            {
                writer.WritePropertyName("windowNames"u8);
                writer.WriteStartArray();
                foreach (var item in WindowNames)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Charsets))
            {
                writer.WritePropertyName("charsets"u8);
                writer.WriteStartArray();
                foreach (var item in Charsets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Titles))
            {
                writer.WritePropertyName("titles"u8);
                writer.WriteStartArray();
                foreach (var item in Titles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Languages))
            {
                writer.WritePropertyName("languages"u8);
                writer.WriteStartArray();
                foreach (var item in Languages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ResponseHeaders))
            {
                writer.WritePropertyName("responseHeaders"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseHeaders)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Cookies))
            {
                writer.WritePropertyName("cookies"u8);
                writer.WriteStartArray();
                foreach (var item in Cookies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(WebComponents))
            {
                writer.WritePropertyName("webComponents"u8);
                writer.WriteStartArray();
                foreach (var item in WebComponents)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Attributes))
            {
                writer.WritePropertyName("attributes"u8);
                writer.WriteStartArray();
                foreach (var item in Attributes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AssetSecurityPolicies))
            {
                writer.WritePropertyName("assetSecurityPolicies"u8);
                writer.WriteStartArray();
                foreach (var item in AssetSecurityPolicies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ResponseBodyMinhashSignatures))
            {
                writer.WritePropertyName("responseBodyMinhashSignatures"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseBodyMinhashSignatures)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(FullDomMinhashSignatures))
            {
                writer.WritePropertyName("fullDomMinhashSignatures"u8);
                writer.WriteStartArray();
                foreach (var item in FullDomMinhashSignatures)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ResponseBodyHashSignatures))
            {
                writer.WritePropertyName("responseBodyHashSignatures"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseBodyHashSignatures)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Errors))
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteStartArray();
                foreach (var item in Errors)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SslCerts))
            {
                writer.WritePropertyName("sslCerts"u8);
                writer.WriteStartArray();
                foreach (var item in SslCerts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Sources))
            {
                writer.WritePropertyName("sources"u8);
                writer.WriteStartArray();
                foreach (var item in Sources)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(FirstSeen))
            {
                writer.WritePropertyName("firstSeen"u8);
                writer.WriteStringValue(FirstSeen.Value, "O");
            }
            if (Optional.IsDefined(LastSeen))
            {
                writer.WritePropertyName("lastSeen"u8);
                writer.WriteStringValue(LastSeen.Value, "O");
            }
            if (Optional.IsDefined(Count))
            {
                writer.WritePropertyName("count"u8);
                writer.WriteNumberValue(Count.Value);
            }
            if (Optional.IsDefined(Cause))
            {
                writer.WritePropertyName("cause"u8);
                writer.WriteObjectValue(Cause);
            }
            if (Optional.IsDefined(Referrer))
            {
                writer.WritePropertyName("referrer"u8);
                writer.WriteStringValue(Referrer);
            }
            if (Optional.IsCollectionDefined(RedirectUrls))
            {
                writer.WritePropertyName("redirectUrls"u8);
                writer.WriteStartArray();
                foreach (var item in RedirectUrls)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(RedirectType))
            {
                writer.WritePropertyName("redirectType"u8);
                writer.WriteStringValue(RedirectType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(FinalUrls))
            {
                writer.WritePropertyName("finalUrls"u8);
                writer.WriteStartArray();
                foreach (var item in FinalUrls)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(FinalResponseCodes))
            {
                writer.WritePropertyName("finalResponseCodes"u8);
                writer.WriteStartArray();
                foreach (var item in FinalResponseCodes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ParkedPage))
            {
                writer.WritePropertyName("parkedPage"u8);
                writer.WriteStartArray();
                foreach (var item in ParkedPage)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ResourceUrls))
            {
                writer.WritePropertyName("resourceUrls"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceUrls)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Guids))
            {
                writer.WritePropertyName("guids"u8);
                writer.WriteStartArray();
                foreach (var item in Guids)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(FinalIpAddresses))
            {
                writer.WritePropertyName("finalIpAddresses"u8);
                writer.WriteStartArray();
                foreach (var item in FinalIpAddresses)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Asns))
            {
                writer.WritePropertyName("asns"u8);
                writer.WriteStartArray();
                foreach (var item in Asns)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(IpBlocks))
            {
                writer.WritePropertyName("ipBlocks"u8);
                writer.WriteStartArray();
                foreach (var item in IpBlocks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(FinalAsns))
            {
                writer.WritePropertyName("finalAsns"u8);
                writer.WriteStartArray();
                foreach (var item in FinalAsns)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(FinalIpBlocks))
            {
                writer.WritePropertyName("finalIpBlocks"u8);
                writer.WriteStartArray();
                foreach (var item in FinalIpBlocks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ResponseBodies))
            {
                writer.WritePropertyName("responseBodies"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseBodies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DomainAsset))
            {
                writer.WritePropertyName("domainAsset"u8);
                writer.WriteObjectValue(DomainAsset);
            }
            if (Optional.IsDefined(RootUrl))
            {
                writer.WritePropertyName("rootUrl"u8);
                writer.WriteObjectValue(RootUrl);
            }
            if (Optional.IsDefined(IsRootUrl))
            {
                writer.WritePropertyName("isRootUrl"u8);
                writer.WriteBooleanValue(IsRootUrl.Value);
            }
            if (Optional.IsCollectionDefined(Location))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStartArray();
                foreach (var item in Location)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Services))
            {
                writer.WritePropertyName("services"u8);
                writer.WriteStartArray();
                foreach (var item in Services)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SiteStatus))
            {
                writer.WritePropertyName("siteStatus"u8);
                writer.WriteStringValue(SiteStatus);
            }
            if (Optional.IsCollectionDefined(Cnames))
            {
                writer.WritePropertyName("cnames"u8);
                writer.WriteStartArray();
                foreach (var item in Cnames)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Cdns))
            {
                writer.WritePropertyName("cdns"u8);
                writer.WriteStartArray();
                foreach (var item in Cdns)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Host))
            {
                writer.WritePropertyName("host"u8);
                writer.WriteStringValue(Host);
            }
            if (Optional.IsDefined(Domain))
            {
                writer.WritePropertyName("domain"u8);
                writer.WriteStringValue(Domain);
            }
            if (Optional.IsCollectionDefined(SslServerConfig))
            {
                writer.WritePropertyName("sslServerConfig"u8);
                writer.WriteStartArray();
                foreach (var item in SslServerConfig)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(GdprAssetSecurityPolicies))
            {
                writer.WritePropertyName("gdprAssetSecurityPolicies"u8);
                writer.WriteStartArray();
                foreach (var item in GdprAssetSecurityPolicies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Ipv4))
            {
                writer.WritePropertyName("ipv4"u8);
                writer.WriteStartArray();
                foreach (var item in Ipv4)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Ipv6))
            {
                writer.WritePropertyName("ipv6"u8);
                writer.WriteStartArray();
                foreach (var item in Ipv6)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static PageAsset DeserializePageAsset(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<Uri> url = default;
            Optional<string> httpMethod = default;
            Optional<string> service = default;
            Optional<IList<ObservedString>> ipAddresses = default;
            Optional<IList<ObservedBoolean>> successful = default;
            Optional<IList<ObservedInteger>> httpResponseCodes = default;
            Optional<IList<ObservedString>> httpResponseMessages = default;
            Optional<IList<ObservedLong>> responseTimes = default;
            Optional<IList<ObservedBoolean>> frames = default;
            Optional<IList<ObservedBoolean>> windows = default;
            Optional<IList<ObservedBoolean>> nonHtmlFrames = default;
            Optional<IList<ObservedBoolean>> undirectedContent = default;
            Optional<IList<ObservedString>> contentTypes = default;
            Optional<IList<ObservedLong>> contentLengths = default;
            Optional<IList<ObservedString>> windowNames = default;
            Optional<IList<ObservedString>> charsets = default;
            Optional<IList<ObservedString>> titles = default;
            Optional<IList<ObservedString>> languages = default;
            Optional<IList<ObservedHeader>> responseHeaders = default;
            Optional<IList<Cookie>> cookies = default;
            Optional<IList<WebComponent>> webComponents = default;
            Optional<IList<Attribute>> attributes = default;
            Optional<IList<AssetSecurityPolicy>> assetSecurityPolicies = default;
            Optional<IList<ObservedIntegers>> responseBodyMinhashSignatures = default;
            Optional<IList<ObservedIntegers>> fullDomMinhashSignatures = default;
            Optional<IList<ObservedString>> responseBodyHashSignatures = default;
            Optional<IList<ObservedString>> errors = default;
            Optional<IList<SslCertAsset>> sslCerts = default;
            Optional<IList<Source>> sources = default;
            Optional<DateTimeOffset> firstSeen = default;
            Optional<DateTimeOffset> lastSeen = default;
            Optional<long> count = default;
            Optional<PageCause> cause = default;
            Optional<string> referrer = default;
            Optional<IList<ObservedString>> redirectUrls = default;
            Optional<PageAssetRedirectType> redirectType = default;
            Optional<IList<ObservedString>> finalUrls = default;
            Optional<IList<ObservedInteger>> finalResponseCodes = default;
            Optional<IList<ObservedBoolean>> parkedPage = default;
            Optional<IList<ResourceUrl>> resourceUrls = default;
            Optional<IList<GuidPair>> guids = default;
            Optional<IList<ObservedString>> finalIpAddresses = default;
            Optional<IList<ObservedLong>> asns = default;
            Optional<IList<IpBlock>> ipBlocks = default;
            Optional<IList<ObservedLong>> finalAsns = default;
            Optional<IList<IpBlock>> finalIpBlocks = default;
            Optional<IList<ObservedString>> responseBodies = default;
            Optional<DomainAsset> domainAsset = default;
            Optional<ObservedBoolean> rootUrl = default;
            Optional<bool> isRootUrl = default;
            Optional<IList<ObservedLocation>> location = default;
            Optional<IList<Service>> services = default;
            Optional<string> siteStatus = default;
            Optional<IList<ObservedString>> cnames = default;
            Optional<IList<ObservedString>> cdns = default;
            Optional<string> host = default;
            Optional<string> domain = default;
            Optional<IList<SslServerConfig>> sslServerConfig = default;
            Optional<IList<AssetSecurityPolicy>> gdprAssetSecurityPolicies = default;
            Optional<IList<ObservedBoolean>> ipv4 = default;
            Optional<IList<ObservedBoolean>> ipv6 = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("url"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    url = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("httpMethod"u8))
                {
                    httpMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("service"u8))
                {
                    service = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddresses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    ipAddresses = array;
                    continue;
                }
                if (property.NameEquals("successful"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item));
                    }
                    successful = array;
                    continue;
                }
                if (property.NameEquals("httpResponseCodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedInteger> array = new List<ObservedInteger>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedInteger.DeserializeObservedInteger(item));
                    }
                    httpResponseCodes = array;
                    continue;
                }
                if (property.NameEquals("httpResponseMessages"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    httpResponseMessages = array;
                    continue;
                }
                if (property.NameEquals("responseTimes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLong> array = new List<ObservedLong>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLong.DeserializeObservedLong(item));
                    }
                    responseTimes = array;
                    continue;
                }
                if (property.NameEquals("frames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item));
                    }
                    frames = array;
                    continue;
                }
                if (property.NameEquals("windows"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item));
                    }
                    windows = array;
                    continue;
                }
                if (property.NameEquals("nonHtmlFrames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item));
                    }
                    nonHtmlFrames = array;
                    continue;
                }
                if (property.NameEquals("undirectedContent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item));
                    }
                    undirectedContent = array;
                    continue;
                }
                if (property.NameEquals("contentTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    contentTypes = array;
                    continue;
                }
                if (property.NameEquals("contentLengths"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLong> array = new List<ObservedLong>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLong.DeserializeObservedLong(item));
                    }
                    contentLengths = array;
                    continue;
                }
                if (property.NameEquals("windowNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    windowNames = array;
                    continue;
                }
                if (property.NameEquals("charsets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    charsets = array;
                    continue;
                }
                if (property.NameEquals("titles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    titles = array;
                    continue;
                }
                if (property.NameEquals("languages"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    languages = array;
                    continue;
                }
                if (property.NameEquals("responseHeaders"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedHeader> array = new List<ObservedHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedHeader.DeserializeObservedHeader(item));
                    }
                    responseHeaders = array;
                    continue;
                }
                if (property.NameEquals("cookies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Cookie> array = new List<Cookie>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Cookie.DeserializeCookie(item));
                    }
                    cookies = array;
                    continue;
                }
                if (property.NameEquals("webComponents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<WebComponent> array = new List<WebComponent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WebComponent.DeserializeWebComponent(item));
                    }
                    webComponents = array;
                    continue;
                }
                if (property.NameEquals("attributes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Attribute> array = new List<Attribute>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Attribute.DeserializeAttribute(item));
                    }
                    attributes = array;
                    continue;
                }
                if (property.NameEquals("assetSecurityPolicies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AssetSecurityPolicy> array = new List<AssetSecurityPolicy>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AssetSecurityPolicy.DeserializeAssetSecurityPolicy(item));
                    }
                    assetSecurityPolicies = array;
                    continue;
                }
                if (property.NameEquals("responseBodyMinhashSignatures"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedIntegers> array = new List<ObservedIntegers>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedIntegers.DeserializeObservedIntegers(item));
                    }
                    responseBodyMinhashSignatures = array;
                    continue;
                }
                if (property.NameEquals("fullDomMinhashSignatures"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedIntegers> array = new List<ObservedIntegers>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedIntegers.DeserializeObservedIntegers(item));
                    }
                    fullDomMinhashSignatures = array;
                    continue;
                }
                if (property.NameEquals("responseBodyHashSignatures"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    responseBodyHashSignatures = array;
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("sslCerts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SslCertAsset> array = new List<SslCertAsset>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SslCertAsset.DeserializeSslCertAsset(item));
                    }
                    sslCerts = array;
                    continue;
                }
                if (property.NameEquals("sources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Source> array = new List<Source>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Source.DeserializeSource(item));
                    }
                    sources = array;
                    continue;
                }
                if (property.NameEquals("firstSeen"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    firstSeen = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastSeen"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSeen = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("count"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    count = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("cause"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cause = PageCause.DeserializePageCause(property.Value);
                    continue;
                }
                if (property.NameEquals("referrer"u8))
                {
                    referrer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("redirectUrls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    redirectUrls = array;
                    continue;
                }
                if (property.NameEquals("redirectType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    redirectType = new PageAssetRedirectType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("finalUrls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    finalUrls = array;
                    continue;
                }
                if (property.NameEquals("finalResponseCodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedInteger> array = new List<ObservedInteger>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedInteger.DeserializeObservedInteger(item));
                    }
                    finalResponseCodes = array;
                    continue;
                }
                if (property.NameEquals("parkedPage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item));
                    }
                    parkedPage = array;
                    continue;
                }
                if (property.NameEquals("resourceUrls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceUrl> array = new List<ResourceUrl>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResourceUrl.DeserializeResourceUrl(item));
                    }
                    resourceUrls = array;
                    continue;
                }
                if (property.NameEquals("guids"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<GuidPair> array = new List<GuidPair>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(GuidPair.DeserializeGuidPair(item));
                    }
                    guids = array;
                    continue;
                }
                if (property.NameEquals("finalIpAddresses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    finalIpAddresses = array;
                    continue;
                }
                if (property.NameEquals("asns"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLong> array = new List<ObservedLong>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLong.DeserializeObservedLong(item));
                    }
                    asns = array;
                    continue;
                }
                if (property.NameEquals("ipBlocks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IpBlock> array = new List<IpBlock>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(IpBlock.DeserializeIpBlock(item));
                    }
                    ipBlocks = array;
                    continue;
                }
                if (property.NameEquals("finalAsns"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLong> array = new List<ObservedLong>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLong.DeserializeObservedLong(item));
                    }
                    finalAsns = array;
                    continue;
                }
                if (property.NameEquals("finalIpBlocks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IpBlock> array = new List<IpBlock>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(IpBlock.DeserializeIpBlock(item));
                    }
                    finalIpBlocks = array;
                    continue;
                }
                if (property.NameEquals("responseBodies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    responseBodies = array;
                    continue;
                }
                if (property.NameEquals("domainAsset"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    domainAsset = DomainAsset.DeserializeDomainAsset(property.Value);
                    continue;
                }
                if (property.NameEquals("rootUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rootUrl = ObservedBoolean.DeserializeObservedBoolean(property.Value);
                    continue;
                }
                if (property.NameEquals("isRootUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isRootUrl = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLocation> array = new List<ObservedLocation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLocation.DeserializeObservedLocation(item));
                    }
                    location = array;
                    continue;
                }
                if (property.NameEquals("services"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Service> array = new List<Service>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Easm.Service.DeserializeService(item));
                    }
                    services = array;
                    continue;
                }
                if (property.NameEquals("siteStatus"u8))
                {
                    siteStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cnames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    cnames = array;
                    continue;
                }
                if (property.NameEquals("cdns"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item));
                    }
                    cdns = array;
                    continue;
                }
                if (property.NameEquals("host"u8))
                {
                    host = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("domain"u8))
                {
                    domain = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sslServerConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SslServerConfig> array = new List<SslServerConfig>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Easm.SslServerConfig.DeserializeSslServerConfig(item));
                    }
                    sslServerConfig = array;
                    continue;
                }
                if (property.NameEquals("gdprAssetSecurityPolicies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AssetSecurityPolicy> array = new List<AssetSecurityPolicy>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AssetSecurityPolicy.DeserializeAssetSecurityPolicy(item));
                    }
                    gdprAssetSecurityPolicies = array;
                    continue;
                }
                if (property.NameEquals("ipv4"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item));
                    }
                    ipv4 = array;
                    continue;
                }
                if (property.NameEquals("ipv6"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item));
                    }
                    ipv6 = array;
                    continue;
                }
            }
            return new PageAsset(url.Value, httpMethod.Value, service.Value, Optional.ToList(ipAddresses), Optional.ToList(successful), Optional.ToList(httpResponseCodes), Optional.ToList(httpResponseMessages), Optional.ToList(responseTimes), Optional.ToList(frames), Optional.ToList(windows), Optional.ToList(nonHtmlFrames), Optional.ToList(undirectedContent), Optional.ToList(contentTypes), Optional.ToList(contentLengths), Optional.ToList(windowNames), Optional.ToList(charsets), Optional.ToList(titles), Optional.ToList(languages), Optional.ToList(responseHeaders), Optional.ToList(cookies), Optional.ToList(webComponents), Optional.ToList(attributes), Optional.ToList(assetSecurityPolicies), Optional.ToList(responseBodyMinhashSignatures), Optional.ToList(fullDomMinhashSignatures), Optional.ToList(responseBodyHashSignatures), Optional.ToList(errors), Optional.ToList(sslCerts), Optional.ToList(sources), Optional.ToNullable(firstSeen), Optional.ToNullable(lastSeen), Optional.ToNullable(count), cause.Value, referrer.Value, Optional.ToList(redirectUrls), Optional.ToNullable(redirectType), Optional.ToList(finalUrls), Optional.ToList(finalResponseCodes), Optional.ToList(parkedPage), Optional.ToList(resourceUrls), Optional.ToList(guids), Optional.ToList(finalIpAddresses), Optional.ToList(asns), Optional.ToList(ipBlocks), Optional.ToList(finalAsns), Optional.ToList(finalIpBlocks), Optional.ToList(responseBodies), domainAsset.Value, rootUrl.Value, Optional.ToNullable(isRootUrl), Optional.ToList(location), Optional.ToList(services), siteStatus.Value, Optional.ToList(cnames), Optional.ToList(cdns), host.Value, domain.Value, Optional.ToList(sslServerConfig), Optional.ToList(gdprAssetSecurityPolicies), Optional.ToList(ipv4), Optional.ToList(ipv6));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static PageAsset FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializePageAsset(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
