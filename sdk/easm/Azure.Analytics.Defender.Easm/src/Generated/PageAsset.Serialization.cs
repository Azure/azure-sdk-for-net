// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Defender.Easm
{
    public partial class PageAsset : IUtf8JsonSerializable, IJsonModel<PageAsset>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PageAsset>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<PageAsset>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PageAsset>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PageAsset)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Url != null)
            {
                writer.WritePropertyName("url"u8);
                writer.WriteStringValue(Url.AbsoluteUri);
            }
            if (HttpMethod != null)
            {
                writer.WritePropertyName("httpMethod"u8);
                writer.WriteStringValue(HttpMethod);
            }
            if (Service != null)
            {
                writer.WritePropertyName("service"u8);
                writer.WriteStringValue(Service);
            }
            if (!(IpAddresses is ChangeTrackingList<ObservedString> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("ipAddresses"u8);
                writer.WriteStartArray();
                foreach (var item in IpAddresses)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Successful is ChangeTrackingList<ObservedBoolean> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("successful"u8);
                writer.WriteStartArray();
                foreach (var item in Successful)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(HttpResponseCodes is ChangeTrackingList<ObservedInteger> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("httpResponseCodes"u8);
                writer.WriteStartArray();
                foreach (var item in HttpResponseCodes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(HttpResponseMessages is ChangeTrackingList<ObservedString> collection2 && collection2.IsUndefined))
            {
                writer.WritePropertyName("httpResponseMessages"u8);
                writer.WriteStartArray();
                foreach (var item in HttpResponseMessages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ResponseTimes is ChangeTrackingList<ObservedLong> collection3 && collection3.IsUndefined))
            {
                writer.WritePropertyName("responseTimes"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseTimes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Frames is ChangeTrackingList<ObservedBoolean> collection4 && collection4.IsUndefined))
            {
                writer.WritePropertyName("frames"u8);
                writer.WriteStartArray();
                foreach (var item in Frames)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Windows is ChangeTrackingList<ObservedBoolean> collection5 && collection5.IsUndefined))
            {
                writer.WritePropertyName("windows"u8);
                writer.WriteStartArray();
                foreach (var item in Windows)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(NonHtmlFrames is ChangeTrackingList<ObservedBoolean> collection6 && collection6.IsUndefined))
            {
                writer.WritePropertyName("nonHtmlFrames"u8);
                writer.WriteStartArray();
                foreach (var item in NonHtmlFrames)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(UndirectedContent is ChangeTrackingList<ObservedBoolean> collection7 && collection7.IsUndefined))
            {
                writer.WritePropertyName("undirectedContent"u8);
                writer.WriteStartArray();
                foreach (var item in UndirectedContent)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ContentTypes is ChangeTrackingList<ObservedString> collection8 && collection8.IsUndefined))
            {
                writer.WritePropertyName("contentTypes"u8);
                writer.WriteStartArray();
                foreach (var item in ContentTypes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ContentLengths is ChangeTrackingList<ObservedLong> collection9 && collection9.IsUndefined))
            {
                writer.WritePropertyName("contentLengths"u8);
                writer.WriteStartArray();
                foreach (var item in ContentLengths)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(WindowNames is ChangeTrackingList<ObservedString> collection10 && collection10.IsUndefined))
            {
                writer.WritePropertyName("windowNames"u8);
                writer.WriteStartArray();
                foreach (var item in WindowNames)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Charsets is ChangeTrackingList<ObservedString> collection11 && collection11.IsUndefined))
            {
                writer.WritePropertyName("charsets"u8);
                writer.WriteStartArray();
                foreach (var item in Charsets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Titles is ChangeTrackingList<ObservedString> collection12 && collection12.IsUndefined))
            {
                writer.WritePropertyName("titles"u8);
                writer.WriteStartArray();
                foreach (var item in Titles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Languages is ChangeTrackingList<ObservedString> collection13 && collection13.IsUndefined))
            {
                writer.WritePropertyName("languages"u8);
                writer.WriteStartArray();
                foreach (var item in Languages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ResponseHeaders is ChangeTrackingList<ObservedHeader> collection14 && collection14.IsUndefined))
            {
                writer.WritePropertyName("responseHeaders"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseHeaders)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Cookies is ChangeTrackingList<CookieDetails> collection15 && collection15.IsUndefined))
            {
                writer.WritePropertyName("cookies"u8);
                writer.WriteStartArray();
                foreach (var item in Cookies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(WebComponents is ChangeTrackingList<WebComponent> collection16 && collection16.IsUndefined))
            {
                writer.WritePropertyName("webComponents"u8);
                writer.WriteStartArray();
                foreach (var item in WebComponents)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Attributes is ChangeTrackingList<AttributeDetails> collection17 && collection17.IsUndefined))
            {
                writer.WritePropertyName("attributes"u8);
                writer.WriteStartArray();
                foreach (var item in Attributes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(AssetSecurityPolicies is ChangeTrackingList<AssetSecurityPolicy> collection18 && collection18.IsUndefined))
            {
                writer.WritePropertyName("assetSecurityPolicies"u8);
                writer.WriteStartArray();
                foreach (var item in AssetSecurityPolicies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ResponseBodyMinhashSignatures is ChangeTrackingList<ObservedIntegers> collection19 && collection19.IsUndefined))
            {
                writer.WritePropertyName("responseBodyMinhashSignatures"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseBodyMinhashSignatures)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(FullDomMinhashSignatures is ChangeTrackingList<ObservedIntegers> collection20 && collection20.IsUndefined))
            {
                writer.WritePropertyName("fullDomMinhashSignatures"u8);
                writer.WriteStartArray();
                foreach (var item in FullDomMinhashSignatures)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ResponseBodyHashSignatures is ChangeTrackingList<ObservedString> collection21 && collection21.IsUndefined))
            {
                writer.WritePropertyName("responseBodyHashSignatures"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseBodyHashSignatures)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Errors is ChangeTrackingList<ObservedString> collection22 && collection22.IsUndefined))
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteStartArray();
                foreach (var item in Errors)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(SslCerts is ChangeTrackingList<SslCertAsset> collection23 && collection23.IsUndefined))
            {
                writer.WritePropertyName("sslCerts"u8);
                writer.WriteStartArray();
                foreach (var item in SslCerts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Sources is ChangeTrackingList<SourceDetails> collection24 && collection24.IsUndefined))
            {
                writer.WritePropertyName("sources"u8);
                writer.WriteStartArray();
                foreach (var item in Sources)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (FirstSeen.HasValue)
            {
                writer.WritePropertyName("firstSeen"u8);
                writer.WriteStringValue(FirstSeen.Value, "O");
            }
            if (LastSeen.HasValue)
            {
                writer.WritePropertyName("lastSeen"u8);
                writer.WriteStringValue(LastSeen.Value, "O");
            }
            if (Count.HasValue)
            {
                writer.WritePropertyName("count"u8);
                writer.WriteNumberValue(Count.Value);
            }
            if (Cause != null)
            {
                writer.WritePropertyName("cause"u8);
                writer.WriteObjectValue(Cause);
            }
            if (Referrer != null)
            {
                writer.WritePropertyName("referrer"u8);
                writer.WriteStringValue(Referrer);
            }
            if (!(RedirectUrls is ChangeTrackingList<ObservedString> collection25 && collection25.IsUndefined))
            {
                writer.WritePropertyName("redirectUrls"u8);
                writer.WriteStartArray();
                foreach (var item in RedirectUrls)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (RedirectType.HasValue)
            {
                writer.WritePropertyName("redirectType"u8);
                writer.WriteStringValue(RedirectType.Value.ToString());
            }
            if (!(FinalUrls is ChangeTrackingList<ObservedString> collection26 && collection26.IsUndefined))
            {
                writer.WritePropertyName("finalUrls"u8);
                writer.WriteStartArray();
                foreach (var item in FinalUrls)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(FinalResponseCodes is ChangeTrackingList<ObservedInteger> collection27 && collection27.IsUndefined))
            {
                writer.WritePropertyName("finalResponseCodes"u8);
                writer.WriteStartArray();
                foreach (var item in FinalResponseCodes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ParkedPage is ChangeTrackingList<ObservedBoolean> collection28 && collection28.IsUndefined))
            {
                writer.WritePropertyName("parkedPage"u8);
                writer.WriteStartArray();
                foreach (var item in ParkedPage)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ResourceUrls is ChangeTrackingList<ResourceUri> collection29 && collection29.IsUndefined))
            {
                writer.WritePropertyName("resourceUrls"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceUrls)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Guids is ChangeTrackingList<GuidPair> collection30 && collection30.IsUndefined))
            {
                writer.WritePropertyName("guids"u8);
                writer.WriteStartArray();
                foreach (var item in Guids)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(FinalIpAddresses is ChangeTrackingList<ObservedString> collection31 && collection31.IsUndefined))
            {
                writer.WritePropertyName("finalIpAddresses"u8);
                writer.WriteStartArray();
                foreach (var item in FinalIpAddresses)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Asns is ChangeTrackingList<ObservedLong> collection32 && collection32.IsUndefined))
            {
                writer.WritePropertyName("asns"u8);
                writer.WriteStartArray();
                foreach (var item in Asns)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(IpBlocks is ChangeTrackingList<IpBlock> collection33 && collection33.IsUndefined))
            {
                writer.WritePropertyName("ipBlocks"u8);
                writer.WriteStartArray();
                foreach (var item in IpBlocks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(FinalAsns is ChangeTrackingList<ObservedLong> collection34 && collection34.IsUndefined))
            {
                writer.WritePropertyName("finalAsns"u8);
                writer.WriteStartArray();
                foreach (var item in FinalAsns)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(FinalIpBlocks is ChangeTrackingList<IpBlock> collection35 && collection35.IsUndefined))
            {
                writer.WritePropertyName("finalIpBlocks"u8);
                writer.WriteStartArray();
                foreach (var item in FinalIpBlocks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ResponseBodies is ChangeTrackingList<ObservedString> collection36 && collection36.IsUndefined))
            {
                writer.WritePropertyName("responseBodies"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseBodies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (DomainAsset != null)
            {
                writer.WritePropertyName("domainAsset"u8);
                writer.WriteObjectValue(DomainAsset);
            }
            if (RootUrl != null)
            {
                writer.WritePropertyName("rootUrl"u8);
                writer.WriteObjectValue(RootUrl);
            }
            if (IsRootUrl.HasValue)
            {
                writer.WritePropertyName("isRootUrl"u8);
                writer.WriteBooleanValue(IsRootUrl.Value);
            }
            if (!(Location is ChangeTrackingList<ObservedLocation> collection37 && collection37.IsUndefined))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStartArray();
                foreach (var item in Location)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Services is ChangeTrackingList<AssetService> collection38 && collection38.IsUndefined))
            {
                writer.WritePropertyName("services"u8);
                writer.WriteStartArray();
                foreach (var item in Services)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (SiteStatus != null)
            {
                writer.WritePropertyName("siteStatus"u8);
                writer.WriteStringValue(SiteStatus);
            }
            if (!(Cnames is ChangeTrackingList<ObservedString> collection39 && collection39.IsUndefined))
            {
                writer.WritePropertyName("cnames"u8);
                writer.WriteStartArray();
                foreach (var item in Cnames)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Cdns is ChangeTrackingList<ObservedString> collection40 && collection40.IsUndefined))
            {
                writer.WritePropertyName("cdns"u8);
                writer.WriteStartArray();
                foreach (var item in Cdns)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Host != null)
            {
                writer.WritePropertyName("host"u8);
                writer.WriteStringValue(Host);
            }
            if (Domain != null)
            {
                writer.WritePropertyName("domain"u8);
                writer.WriteStringValue(Domain);
            }
            if (!(SslServerConfig is ChangeTrackingList<SslServerConfig> collection41 && collection41.IsUndefined))
            {
                writer.WritePropertyName("sslServerConfig"u8);
                writer.WriteStartArray();
                foreach (var item in SslServerConfig)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(GdprAssetSecurityPolicies is ChangeTrackingList<AssetSecurityPolicy> collection42 && collection42.IsUndefined))
            {
                writer.WritePropertyName("gdprAssetSecurityPolicies"u8);
                writer.WriteStartArray();
                foreach (var item in GdprAssetSecurityPolicies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Ipv4 is ChangeTrackingList<ObservedBoolean> collection43 && collection43.IsUndefined))
            {
                writer.WritePropertyName("ipv4"u8);
                writer.WriteStartArray();
                foreach (var item in Ipv4)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Ipv6 is ChangeTrackingList<ObservedBoolean> collection44 && collection44.IsUndefined))
            {
                writer.WritePropertyName("ipv6"u8);
                writer.WriteStartArray();
                foreach (var item in Ipv6)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        PageAsset IJsonModel<PageAsset>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PageAsset>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PageAsset)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePageAsset(document.RootElement, options);
        }

        internal static PageAsset DeserializePageAsset(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Uri url = default;
            string httpMethod = default;
            string service = default;
            IReadOnlyList<ObservedString> ipAddresses = default;
            IReadOnlyList<ObservedBoolean> successful = default;
            IReadOnlyList<ObservedInteger> httpResponseCodes = default;
            IReadOnlyList<ObservedString> httpResponseMessages = default;
            IReadOnlyList<ObservedLong> responseTimes = default;
            IReadOnlyList<ObservedBoolean> frames = default;
            IReadOnlyList<ObservedBoolean> windows = default;
            IReadOnlyList<ObservedBoolean> nonHtmlFrames = default;
            IReadOnlyList<ObservedBoolean> undirectedContent = default;
            IReadOnlyList<ObservedString> contentTypes = default;
            IReadOnlyList<ObservedLong> contentLengths = default;
            IReadOnlyList<ObservedString> windowNames = default;
            IReadOnlyList<ObservedString> charsets = default;
            IReadOnlyList<ObservedString> titles = default;
            IReadOnlyList<ObservedString> languages = default;
            IReadOnlyList<ObservedHeader> responseHeaders = default;
            IReadOnlyList<CookieDetails> cookies = default;
            IReadOnlyList<WebComponent> webComponents = default;
            IReadOnlyList<AttributeDetails> attributes = default;
            IReadOnlyList<AssetSecurityPolicy> assetSecurityPolicies = default;
            IReadOnlyList<ObservedIntegers> responseBodyMinhashSignatures = default;
            IReadOnlyList<ObservedIntegers> fullDomMinhashSignatures = default;
            IReadOnlyList<ObservedString> responseBodyHashSignatures = default;
            IReadOnlyList<ObservedString> errors = default;
            IReadOnlyList<SslCertAsset> sslCerts = default;
            IReadOnlyList<SourceDetails> sources = default;
            DateTimeOffset? firstSeen = default;
            DateTimeOffset? lastSeen = default;
            long? count = default;
            PageCause cause = default;
            string referrer = default;
            IReadOnlyList<ObservedString> redirectUrls = default;
            PageAssetRedirectType? redirectType = default;
            IReadOnlyList<ObservedString> finalUrls = default;
            IReadOnlyList<ObservedInteger> finalResponseCodes = default;
            IReadOnlyList<ObservedBoolean> parkedPage = default;
            IReadOnlyList<ResourceUri> resourceUrls = default;
            IReadOnlyList<GuidPair> guids = default;
            IReadOnlyList<ObservedString> finalIpAddresses = default;
            IReadOnlyList<ObservedLong> asns = default;
            IReadOnlyList<IpBlock> ipBlocks = default;
            IReadOnlyList<ObservedLong> finalAsns = default;
            IReadOnlyList<IpBlock> finalIpBlocks = default;
            IReadOnlyList<ObservedString> responseBodies = default;
            DomainAsset domainAsset = default;
            ObservedBoolean rootUrl = default;
            bool? isRootUrl = default;
            IReadOnlyList<ObservedLocation> location = default;
            IReadOnlyList<AssetService> services = default;
            string siteStatus = default;
            IReadOnlyList<ObservedString> cnames = default;
            IReadOnlyList<ObservedString> cdns = default;
            string host = default;
            string domain = default;
            IReadOnlyList<SslServerConfig> sslServerConfig = default;
            IReadOnlyList<AssetSecurityPolicy> gdprAssetSecurityPolicies = default;
            IReadOnlyList<ObservedBoolean> ipv4 = default;
            IReadOnlyList<ObservedBoolean> ipv6 = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("url"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    url = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("httpMethod"u8))
                {
                    httpMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("service"u8))
                {
                    service = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddresses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    ipAddresses = array;
                    continue;
                }
                if (property.NameEquals("successful"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    successful = array;
                    continue;
                }
                if (property.NameEquals("httpResponseCodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedInteger> array = new List<ObservedInteger>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedInteger.DeserializeObservedInteger(item, options));
                    }
                    httpResponseCodes = array;
                    continue;
                }
                if (property.NameEquals("httpResponseMessages"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    httpResponseMessages = array;
                    continue;
                }
                if (property.NameEquals("responseTimes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLong> array = new List<ObservedLong>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLong.DeserializeObservedLong(item, options));
                    }
                    responseTimes = array;
                    continue;
                }
                if (property.NameEquals("frames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    frames = array;
                    continue;
                }
                if (property.NameEquals("windows"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    windows = array;
                    continue;
                }
                if (property.NameEquals("nonHtmlFrames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    nonHtmlFrames = array;
                    continue;
                }
                if (property.NameEquals("undirectedContent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    undirectedContent = array;
                    continue;
                }
                if (property.NameEquals("contentTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    contentTypes = array;
                    continue;
                }
                if (property.NameEquals("contentLengths"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLong> array = new List<ObservedLong>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLong.DeserializeObservedLong(item, options));
                    }
                    contentLengths = array;
                    continue;
                }
                if (property.NameEquals("windowNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    windowNames = array;
                    continue;
                }
                if (property.NameEquals("charsets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    charsets = array;
                    continue;
                }
                if (property.NameEquals("titles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    titles = array;
                    continue;
                }
                if (property.NameEquals("languages"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    languages = array;
                    continue;
                }
                if (property.NameEquals("responseHeaders"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedHeader> array = new List<ObservedHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedHeader.DeserializeObservedHeader(item, options));
                    }
                    responseHeaders = array;
                    continue;
                }
                if (property.NameEquals("cookies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CookieDetails> array = new List<CookieDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CookieDetails.DeserializeCookieDetails(item, options));
                    }
                    cookies = array;
                    continue;
                }
                if (property.NameEquals("webComponents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<WebComponent> array = new List<WebComponent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WebComponent.DeserializeWebComponent(item, options));
                    }
                    webComponents = array;
                    continue;
                }
                if (property.NameEquals("attributes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AttributeDetails> array = new List<AttributeDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AttributeDetails.DeserializeAttributeDetails(item, options));
                    }
                    attributes = array;
                    continue;
                }
                if (property.NameEquals("assetSecurityPolicies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AssetSecurityPolicy> array = new List<AssetSecurityPolicy>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AssetSecurityPolicy.DeserializeAssetSecurityPolicy(item, options));
                    }
                    assetSecurityPolicies = array;
                    continue;
                }
                if (property.NameEquals("responseBodyMinhashSignatures"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedIntegers> array = new List<ObservedIntegers>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedIntegers.DeserializeObservedIntegers(item, options));
                    }
                    responseBodyMinhashSignatures = array;
                    continue;
                }
                if (property.NameEquals("fullDomMinhashSignatures"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedIntegers> array = new List<ObservedIntegers>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedIntegers.DeserializeObservedIntegers(item, options));
                    }
                    fullDomMinhashSignatures = array;
                    continue;
                }
                if (property.NameEquals("responseBodyHashSignatures"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    responseBodyHashSignatures = array;
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("sslCerts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SslCertAsset> array = new List<SslCertAsset>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SslCertAsset.DeserializeSslCertAsset(item, options));
                    }
                    sslCerts = array;
                    continue;
                }
                if (property.NameEquals("sources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SourceDetails> array = new List<SourceDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SourceDetails.DeserializeSourceDetails(item, options));
                    }
                    sources = array;
                    continue;
                }
                if (property.NameEquals("firstSeen"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    firstSeen = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastSeen"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSeen = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("count"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    count = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("cause"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cause = PageCause.DeserializePageCause(property.Value, options);
                    continue;
                }
                if (property.NameEquals("referrer"u8))
                {
                    referrer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("redirectUrls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    redirectUrls = array;
                    continue;
                }
                if (property.NameEquals("redirectType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    redirectType = new PageAssetRedirectType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("finalUrls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    finalUrls = array;
                    continue;
                }
                if (property.NameEquals("finalResponseCodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedInteger> array = new List<ObservedInteger>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedInteger.DeserializeObservedInteger(item, options));
                    }
                    finalResponseCodes = array;
                    continue;
                }
                if (property.NameEquals("parkedPage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    parkedPage = array;
                    continue;
                }
                if (property.NameEquals("resourceUrls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceUri> array = new List<ResourceUri>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResourceUri.DeserializeResourceUri(item, options));
                    }
                    resourceUrls = array;
                    continue;
                }
                if (property.NameEquals("guids"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<GuidPair> array = new List<GuidPair>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(GuidPair.DeserializeGuidPair(item, options));
                    }
                    guids = array;
                    continue;
                }
                if (property.NameEquals("finalIpAddresses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    finalIpAddresses = array;
                    continue;
                }
                if (property.NameEquals("asns"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLong> array = new List<ObservedLong>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLong.DeserializeObservedLong(item, options));
                    }
                    asns = array;
                    continue;
                }
                if (property.NameEquals("ipBlocks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IpBlock> array = new List<IpBlock>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(IpBlock.DeserializeIpBlock(item, options));
                    }
                    ipBlocks = array;
                    continue;
                }
                if (property.NameEquals("finalAsns"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLong> array = new List<ObservedLong>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLong.DeserializeObservedLong(item, options));
                    }
                    finalAsns = array;
                    continue;
                }
                if (property.NameEquals("finalIpBlocks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IpBlock> array = new List<IpBlock>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(IpBlock.DeserializeIpBlock(item, options));
                    }
                    finalIpBlocks = array;
                    continue;
                }
                if (property.NameEquals("responseBodies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    responseBodies = array;
                    continue;
                }
                if (property.NameEquals("domainAsset"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    domainAsset = DomainAsset.DeserializeDomainAsset(property.Value, options);
                    continue;
                }
                if (property.NameEquals("rootUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rootUrl = ObservedBoolean.DeserializeObservedBoolean(property.Value, options);
                    continue;
                }
                if (property.NameEquals("isRootUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isRootUrl = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLocation> array = new List<ObservedLocation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLocation.DeserializeObservedLocation(item, options));
                    }
                    location = array;
                    continue;
                }
                if (property.NameEquals("services"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AssetService> array = new List<AssetService>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AssetService.DeserializeAssetService(item, options));
                    }
                    services = array;
                    continue;
                }
                if (property.NameEquals("siteStatus"u8))
                {
                    siteStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cnames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    cnames = array;
                    continue;
                }
                if (property.NameEquals("cdns"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    cdns = array;
                    continue;
                }
                if (property.NameEquals("host"u8))
                {
                    host = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("domain"u8))
                {
                    domain = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sslServerConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SslServerConfig> array = new List<SslServerConfig>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Easm.SslServerConfig.DeserializeSslServerConfig(item, options));
                    }
                    sslServerConfig = array;
                    continue;
                }
                if (property.NameEquals("gdprAssetSecurityPolicies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AssetSecurityPolicy> array = new List<AssetSecurityPolicy>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AssetSecurityPolicy.DeserializeAssetSecurityPolicy(item, options));
                    }
                    gdprAssetSecurityPolicies = array;
                    continue;
                }
                if (property.NameEquals("ipv4"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    ipv4 = array;
                    continue;
                }
                if (property.NameEquals("ipv6"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    ipv6 = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new PageAsset(
                serializedAdditionalRawData,
                url,
                httpMethod,
                service,
                ipAddresses ?? new ChangeTrackingList<ObservedString>(),
                successful ?? new ChangeTrackingList<ObservedBoolean>(),
                httpResponseCodes ?? new ChangeTrackingList<ObservedInteger>(),
                httpResponseMessages ?? new ChangeTrackingList<ObservedString>(),
                responseTimes ?? new ChangeTrackingList<ObservedLong>(),
                frames ?? new ChangeTrackingList<ObservedBoolean>(),
                windows ?? new ChangeTrackingList<ObservedBoolean>(),
                nonHtmlFrames ?? new ChangeTrackingList<ObservedBoolean>(),
                undirectedContent ?? new ChangeTrackingList<ObservedBoolean>(),
                contentTypes ?? new ChangeTrackingList<ObservedString>(),
                contentLengths ?? new ChangeTrackingList<ObservedLong>(),
                windowNames ?? new ChangeTrackingList<ObservedString>(),
                charsets ?? new ChangeTrackingList<ObservedString>(),
                titles ?? new ChangeTrackingList<ObservedString>(),
                languages ?? new ChangeTrackingList<ObservedString>(),
                responseHeaders ?? new ChangeTrackingList<ObservedHeader>(),
                cookies ?? new ChangeTrackingList<CookieDetails>(),
                webComponents ?? new ChangeTrackingList<WebComponent>(),
                attributes ?? new ChangeTrackingList<AttributeDetails>(),
                assetSecurityPolicies ?? new ChangeTrackingList<AssetSecurityPolicy>(),
                responseBodyMinhashSignatures ?? new ChangeTrackingList<ObservedIntegers>(),
                fullDomMinhashSignatures ?? new ChangeTrackingList<ObservedIntegers>(),
                responseBodyHashSignatures ?? new ChangeTrackingList<ObservedString>(),
                errors ?? new ChangeTrackingList<ObservedString>(),
                sslCerts ?? new ChangeTrackingList<SslCertAsset>(),
                sources ?? new ChangeTrackingList<SourceDetails>(),
                firstSeen,
                lastSeen,
                count,
                cause,
                referrer,
                redirectUrls ?? new ChangeTrackingList<ObservedString>(),
                redirectType,
                finalUrls ?? new ChangeTrackingList<ObservedString>(),
                finalResponseCodes ?? new ChangeTrackingList<ObservedInteger>(),
                parkedPage ?? new ChangeTrackingList<ObservedBoolean>(),
                resourceUrls ?? new ChangeTrackingList<ResourceUri>(),
                guids ?? new ChangeTrackingList<GuidPair>(),
                finalIpAddresses ?? new ChangeTrackingList<ObservedString>(),
                asns ?? new ChangeTrackingList<ObservedLong>(),
                ipBlocks ?? new ChangeTrackingList<IpBlock>(),
                finalAsns ?? new ChangeTrackingList<ObservedLong>(),
                finalIpBlocks ?? new ChangeTrackingList<IpBlock>(),
                responseBodies ?? new ChangeTrackingList<ObservedString>(),
                domainAsset,
                rootUrl,
                isRootUrl,
                location ?? new ChangeTrackingList<ObservedLocation>(),
                services ?? new ChangeTrackingList<AssetService>(),
                siteStatus,
                cnames ?? new ChangeTrackingList<ObservedString>(),
                cdns ?? new ChangeTrackingList<ObservedString>(),
                host,
                domain,
                sslServerConfig ?? new ChangeTrackingList<SslServerConfig>(),
                gdprAssetSecurityPolicies ?? new ChangeTrackingList<AssetSecurityPolicy>(),
                ipv4 ?? new ChangeTrackingList<ObservedBoolean>(),
                ipv6 ?? new ChangeTrackingList<ObservedBoolean>());
        }

        BinaryData IPersistableModel<PageAsset>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PageAsset>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(PageAsset)} does not support '{options.Format}' format.");
            }
        }

        PageAsset IPersistableModel<PageAsset>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PageAsset>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializePageAsset(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(PageAsset)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<PageAsset>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new PageAsset FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializePageAsset(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
