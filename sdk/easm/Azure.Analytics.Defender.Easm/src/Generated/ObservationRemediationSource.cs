// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> A list of observation remediation sources. </summary>
    public readonly partial struct ObservationRemediationSource : IEquatable<ObservationRemediationSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ObservationRemediationSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ObservationRemediationSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UserValue = "user";
        private const string SystemValue = "system";

        /// <summary> The source of the observation state is a user. </summary>
        public static ObservationRemediationSource User { get; } = new ObservationRemediationSource(UserValue);
        /// <summary> The source of the observation state is the system. </summary>
        public static ObservationRemediationSource System { get; } = new ObservationRemediationSource(SystemValue);
        /// <summary> Determines if two <see cref="ObservationRemediationSource"/> values are the same. </summary>
        public static bool operator ==(ObservationRemediationSource left, ObservationRemediationSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ObservationRemediationSource"/> values are not the same. </summary>
        public static bool operator !=(ObservationRemediationSource left, ObservationRemediationSource right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ObservationRemediationSource"/>. </summary>
        public static implicit operator ObservationRemediationSource(string value) => new ObservationRemediationSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ObservationRemediationSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ObservationRemediationSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
