// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> A list of policy actions. </summary>
    public readonly partial struct PolicyAction : IEquatable<PolicyAction>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PolicyAction"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PolicyAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AddResourceValue = "addResource";
        private const string RemoveResourceValue = "removeResource";
        private const string SetStateValue = "setState";
        private const string SetExternalIDValue = "setExternalID";
        private const string RemoveFromInventoryValue = "removeFromInventory";

        /// <summary> Add a resource label with a given name. </summary>
        public static PolicyAction AddResource { get; } = new PolicyAction(AddResourceValue);
        /// <summary> Remove a resource label with a given name. </summary>
        public static PolicyAction RemoveResource { get; } = new PolicyAction(RemoveResourceValue);
        /// <summary> Set inventory state to a given supported state value. </summary>
        public static PolicyAction SetState { get; } = new PolicyAction(SetStateValue);
        /// <summary> Set an external id. </summary>
        public static PolicyAction SetExternalID { get; } = new PolicyAction(SetExternalIDValue);
        /// <summary> Remove from inventory. </summary>
        public static PolicyAction RemoveFromInventory { get; } = new PolicyAction(RemoveFromInventoryValue);
        /// <summary> Determines if two <see cref="PolicyAction"/> values are the same. </summary>
        public static bool operator ==(PolicyAction left, PolicyAction right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PolicyAction"/> values are not the same. </summary>
        public static bool operator !=(PolicyAction left, PolicyAction right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PolicyAction"/>. </summary>
        public static implicit operator PolicyAction(string value) => new PolicyAction(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PolicyAction other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PolicyAction other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
