// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> A list of global inventory states. </summary>
    public readonly partial struct GlobalInventoryState : IEquatable<GlobalInventoryState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="GlobalInventoryState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public GlobalInventoryState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CandidateValue = "candidate";
        private const string CandidateInvestigateValue = "candidateInvestigate";
        private const string ConfirmedValue = "confirmed";
        private const string AssociatedValue = "associated";
        private const string AssociatedPartnerValue = "associatedPartner";
        private const string AssociatedThirdPartyValue = "associatedThirdParty";
        private const string ArchivedValue = "archived";
        private const string DismissedValue = "dismissed";
        private const string AutoconfirmedValue = "autoconfirmed";

        /// <summary> candidate. </summary>
        public static GlobalInventoryState Candidate { get; } = new GlobalInventoryState(CandidateValue);
        /// <summary> candidate investigate. </summary>
        public static GlobalInventoryState CandidateInvestigate { get; } = new GlobalInventoryState(CandidateInvestigateValue);
        /// <summary> confirmed. </summary>
        public static GlobalInventoryState Confirmed { get; } = new GlobalInventoryState(ConfirmedValue);
        /// <summary> associated. </summary>
        public static GlobalInventoryState Associated { get; } = new GlobalInventoryState(AssociatedValue);
        /// <summary> associated partner. </summary>
        public static GlobalInventoryState AssociatedPartner { get; } = new GlobalInventoryState(AssociatedPartnerValue);
        /// <summary> associated third party. </summary>
        public static GlobalInventoryState AssociatedThirdParty { get; } = new GlobalInventoryState(AssociatedThirdPartyValue);
        /// <summary> archived. </summary>
        public static GlobalInventoryState Archived { get; } = new GlobalInventoryState(ArchivedValue);
        /// <summary> dismissed. </summary>
        public static GlobalInventoryState Dismissed { get; } = new GlobalInventoryState(DismissedValue);
        /// <summary> auto confirmed. </summary>
        public static GlobalInventoryState Autoconfirmed { get; } = new GlobalInventoryState(AutoconfirmedValue);
        /// <summary> Determines if two <see cref="GlobalInventoryState"/> values are the same. </summary>
        public static bool operator ==(GlobalInventoryState left, GlobalInventoryState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="GlobalInventoryState"/> values are not the same. </summary>
        public static bool operator !=(GlobalInventoryState left, GlobalInventoryState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="GlobalInventoryState"/>. </summary>
        public static implicit operator GlobalInventoryState(string value) => new GlobalInventoryState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is GlobalInventoryState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(GlobalInventoryState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
