// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> Define response body for getting delta summary. </summary>
    public partial class DeltaSummaryResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DeltaSummaryResult"/>. </summary>
        /// <param name="summary"> Contains added, removed, and difference values for the whole range either 7 or 30 days. </param>
        /// <param name="daily"> Contains added, removed, count, and difference values for each day. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="summary"/> or <paramref name="daily"/> is null. </exception>
        internal DeltaSummaryResult(DeltaRangeResult summary, IEnumerable<DeltaDateResult> daily)
        {
            Argument.AssertNotNull(summary, nameof(summary));
            Argument.AssertNotNull(daily, nameof(daily));

            Summary = summary;
            Daily = daily.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DeltaSummaryResult"/>. </summary>
        /// <param name="summary"> Contains added, removed, and difference values for the whole range either 7 or 30 days. </param>
        /// <param name="daily"> Contains added, removed, count, and difference values for each day. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DeltaSummaryResult(DeltaRangeResult summary, IReadOnlyList<DeltaDateResult> daily, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Summary = summary;
            Daily = daily;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DeltaSummaryResult"/> for deserialization. </summary>
        internal DeltaSummaryResult()
        {
        }

        /// <summary> Contains added, removed, and difference values for the whole range either 7 or 30 days. </summary>
        public DeltaRangeResult Summary { get; }
        /// <summary> Contains added, removed, count, and difference values for each day. </summary>
        public IReadOnlyList<DeltaDateResult> Daily { get; }
    }
}
