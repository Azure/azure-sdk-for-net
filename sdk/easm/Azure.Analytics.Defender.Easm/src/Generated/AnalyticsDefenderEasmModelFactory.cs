// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> Model factory for models. </summary>
    public static partial class AnalyticsDefenderEasmModelFactory
    {
        /// <summary> Initializes a new instance of AssetResource. </summary>
        /// <param name="kind"> Discriminator. </param>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="uuid"> Global UUID for the asset. </param>
        /// <param name="createdDate"> The date this asset was first added to this workspace. </param>
        /// <param name="updatedDate"> The date this asset was last updated for this workspace. </param>
        /// <param name="state"></param>
        /// <param name="externalId"> An optional customer provided identifier for this asset. </param>
        /// <param name="labels"> Customer labels assigned to this asset. </param>
        /// <param name="wildcard"> An indicator of whether this asset represents a wildcard rollup of assets on this domain. </param>
        /// <param name="discoGroupName"> The name of the DiscoGroup that brought added this asset to the workspace. </param>
        /// <param name="auditTrail"> The history of how this asset was pulled into the workspace through the discovery process. </param>
        /// <param name="reason"></param>
        /// <returns> A new <see cref="Easm.AssetResource"/> instance for mocking. </returns>
        public static AssetResource AssetResource(string kind = null, string id = null, string name = null, string displayName = null, Guid? uuid = null, DateTimeOffset? createdDate = null, DateTimeOffset? updatedDate = null, AssetState? state = null, string externalId = null, IEnumerable<string> labels = null, bool? wildcard = null, string discoGroupName = null, IEnumerable<AuditTrailItem> auditTrail = null, string reason = null)
        {
            labels ??= new List<string>();
            auditTrail ??= new List<AuditTrailItem>();

            return new UnknownAssetResource(kind, id, name, displayName, uuid, createdDate, updatedDate, state, externalId, labels?.ToList(), wildcard, discoGroupName, auditTrail?.ToList(), reason);
        }

        /// <summary> Initializes a new instance of AsAssetResource. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="uuid"> Global UUID for the asset. </param>
        /// <param name="createdDate"> The date this asset was first added to this workspace. </param>
        /// <param name="updatedDate"> The date this asset was last updated for this workspace. </param>
        /// <param name="state"></param>
        /// <param name="externalId"> An optional customer provided identifier for this asset. </param>
        /// <param name="labels"> Customer labels assigned to this asset. </param>
        /// <param name="wildcard"> An indicator of whether this asset represents a wildcard rollup of assets on this domain. </param>
        /// <param name="discoGroupName"> The name of the DiscoGroup that brought added this asset to the workspace. </param>
        /// <param name="auditTrail"> The history of how this asset was pulled into the workspace through the discovery process. </param>
        /// <param name="reason"></param>
        /// <param name="asset"> asset. </param>
        /// <returns> A new <see cref="Easm.AsAssetResource"/> instance for mocking. </returns>
        public static AsAssetResource AsAssetResource(string id = null, string name = null, string displayName = null, Guid? uuid = null, DateTimeOffset? createdDate = null, DateTimeOffset? updatedDate = null, AssetState? state = null, string externalId = null, IEnumerable<string> labels = null, bool? wildcard = null, string discoGroupName = null, IEnumerable<AuditTrailItem> auditTrail = null, string reason = null, AsAsset asset = null)
        {
            labels ??= new List<string>();
            auditTrail ??= new List<AuditTrailItem>();

            return new AsAssetResource("as", id, name, displayName, uuid, createdDate, updatedDate, state, externalId, labels?.ToList(), wildcard, discoGroupName, auditTrail?.ToList(), reason, asset);
        }

        /// <summary> Initializes a new instance of ObservedString. </summary>
        /// <param name="firstSeen"></param>
        /// <param name="lastSeen"></param>
        /// <param name="count"></param>
        /// <param name="recent"></param>
        /// <param name="value"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Easm.ObservedString"/> instance for mocking. </returns>
        public static ObservedString ObservedString(DateTimeOffset? firstSeen = null, DateTimeOffset? lastSeen = null, long? count = null, bool? recent = null, string value = null, IEnumerable<Source> sources = null)
        {
            sources ??= new List<Source>();

            return new ObservedString(firstSeen, lastSeen, count, recent, value, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ObservedLong. </summary>
        /// <param name="firstSeen"></param>
        /// <param name="lastSeen"></param>
        /// <param name="count"></param>
        /// <param name="recent"></param>
        /// <param name="value"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Easm.ObservedLong"/> instance for mocking. </returns>
        public static ObservedLong ObservedLong(DateTimeOffset? firstSeen = null, DateTimeOffset? lastSeen = null, long? count = null, bool? recent = null, long? value = null, IEnumerable<Source> sources = null)
        {
            sources ??= new List<Source>();

            return new ObservedLong(firstSeen, lastSeen, count, recent, value, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ObservedInteger. </summary>
        /// <param name="firstSeen"></param>
        /// <param name="lastSeen"></param>
        /// <param name="count"></param>
        /// <param name="recent"></param>
        /// <param name="value"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Easm.ObservedInteger"/> instance for mocking. </returns>
        public static ObservedInteger ObservedInteger(DateTimeOffset? firstSeen = null, DateTimeOffset? lastSeen = null, long? count = null, bool? recent = null, int? value = null, IEnumerable<Source> sources = null)
        {
            sources ??= new List<Source>();

            return new ObservedInteger(firstSeen, lastSeen, count, recent, value, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ObservedBoolean. </summary>
        /// <param name="firstSeen"></param>
        /// <param name="lastSeen"></param>
        /// <param name="count"></param>
        /// <param name="recent"></param>
        /// <param name="value"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Easm.ObservedBoolean"/> instance for mocking. </returns>
        public static ObservedBoolean ObservedBoolean(DateTimeOffset? firstSeen = null, DateTimeOffset? lastSeen = null, long? count = null, bool? recent = null, bool? value = null, IEnumerable<Source> sources = null)
        {
            sources ??= new List<Source>();

            return new ObservedBoolean(firstSeen, lastSeen, count, recent, value, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ObservedHeader. </summary>
        /// <param name="firstSeen"></param>
        /// <param name="lastSeen"></param>
        /// <param name="count"></param>
        /// <param name="recent"></param>
        /// <param name="headerName"></param>
        /// <param name="headerValue"></param>
        /// <returns> A new <see cref="Easm.ObservedHeader"/> instance for mocking. </returns>
        public static ObservedHeader ObservedHeader(DateTimeOffset? firstSeen = null, DateTimeOffset? lastSeen = null, long? count = null, bool? recent = null, string headerName = null, string headerValue = null)
        {
            return new ObservedHeader(firstSeen, lastSeen, count, recent, headerName, headerValue);
        }

        /// <summary> Initializes a new instance of ObservedPortState. </summary>
        /// <param name="firstSeen"></param>
        /// <param name="lastSeen"></param>
        /// <param name="count"></param>
        /// <param name="recent"></param>
        /// <param name="value"></param>
        /// <param name="port"></param>
        /// <returns> A new <see cref="Easm.ObservedPortState"/> instance for mocking. </returns>
        public static ObservedPortState ObservedPortState(DateTimeOffset? firstSeen = null, DateTimeOffset? lastSeen = null, long? count = null, bool? recent = null, ObservedPortStateValue? value = null, int? port = null)
        {
            return new ObservedPortState(firstSeen, lastSeen, count, recent, value, port);
        }

        /// <summary> Initializes a new instance of ObservedLocation. </summary>
        /// <param name="firstSeen"></param>
        /// <param name="lastSeen"></param>
        /// <param name="count"></param>
        /// <param name="recent"></param>
        /// <param name="value"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Easm.ObservedLocation"/> instance for mocking. </returns>
        public static ObservedLocation ObservedLocation(DateTimeOffset? firstSeen = null, DateTimeOffset? lastSeen = null, long? count = null, bool? recent = null, Location value = null, IEnumerable<Source> sources = null)
        {
            sources ??= new List<Source>();

            return new ObservedLocation(firstSeen, lastSeen, count, recent, value, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ObservedIntegers. </summary>
        /// <param name="firstSeen"></param>
        /// <param name="lastSeen"></param>
        /// <param name="count"></param>
        /// <param name="recent"></param>
        /// <param name="values"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Easm.ObservedIntegers"/> instance for mocking. </returns>
        public static ObservedIntegers ObservedIntegers(DateTimeOffset? firstSeen = null, DateTimeOffset? lastSeen = null, long? count = null, bool? recent = null, IEnumerable<int> values = null, IEnumerable<Source> sources = null)
        {
            values ??= new List<int>();
            sources ??= new List<Source>();

            return new ObservedIntegers(firstSeen, lastSeen, count, recent, values?.ToList(), sources?.ToList());
        }

        /// <summary> Initializes a new instance of ContactAssetResource. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="uuid"> Global UUID for the asset. </param>
        /// <param name="createdDate"> The date this asset was first added to this workspace. </param>
        /// <param name="updatedDate"> The date this asset was last updated for this workspace. </param>
        /// <param name="state"></param>
        /// <param name="externalId"> An optional customer provided identifier for this asset. </param>
        /// <param name="labels"> Customer labels assigned to this asset. </param>
        /// <param name="wildcard"> An indicator of whether this asset represents a wildcard rollup of assets on this domain. </param>
        /// <param name="discoGroupName"> The name of the DiscoGroup that brought added this asset to the workspace. </param>
        /// <param name="auditTrail"> The history of how this asset was pulled into the workspace through the discovery process. </param>
        /// <param name="reason"></param>
        /// <param name="asset"> asset. </param>
        /// <returns> A new <see cref="Easm.ContactAssetResource"/> instance for mocking. </returns>
        public static ContactAssetResource ContactAssetResource(string id = null, string name = null, string displayName = null, Guid? uuid = null, DateTimeOffset? createdDate = null, DateTimeOffset? updatedDate = null, AssetState? state = null, string externalId = null, IEnumerable<string> labels = null, bool? wildcard = null, string discoGroupName = null, IEnumerable<AuditTrailItem> auditTrail = null, string reason = null, ContactAsset asset = null)
        {
            labels ??= new List<string>();
            auditTrail ??= new List<AuditTrailItem>();

            return new ContactAssetResource("contact", id, name, displayName, uuid, createdDate, updatedDate, state, externalId, labels?.ToList(), wildcard, discoGroupName, auditTrail?.ToList(), reason, asset);
        }

        /// <summary> Initializes a new instance of DomainAssetResource. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="uuid"> Global UUID for the asset. </param>
        /// <param name="createdDate"> The date this asset was first added to this workspace. </param>
        /// <param name="updatedDate"> The date this asset was last updated for this workspace. </param>
        /// <param name="state"></param>
        /// <param name="externalId"> An optional customer provided identifier for this asset. </param>
        /// <param name="labels"> Customer labels assigned to this asset. </param>
        /// <param name="wildcard"> An indicator of whether this asset represents a wildcard rollup of assets on this domain. </param>
        /// <param name="discoGroupName"> The name of the DiscoGroup that brought added this asset to the workspace. </param>
        /// <param name="auditTrail"> The history of how this asset was pulled into the workspace through the discovery process. </param>
        /// <param name="reason"></param>
        /// <param name="asset"> asset. </param>
        /// <returns> A new <see cref="Easm.DomainAssetResource"/> instance for mocking. </returns>
        public static DomainAssetResource DomainAssetResource(string id = null, string name = null, string displayName = null, Guid? uuid = null, DateTimeOffset? createdDate = null, DateTimeOffset? updatedDate = null, AssetState? state = null, string externalId = null, IEnumerable<string> labels = null, bool? wildcard = null, string discoGroupName = null, IEnumerable<AuditTrailItem> auditTrail = null, string reason = null, DomainAsset asset = null)
        {
            labels ??= new List<string>();
            auditTrail ??= new List<AuditTrailItem>();

            return new DomainAssetResource("domain", id, name, displayName, uuid, createdDate, updatedDate, state, externalId, labels?.ToList(), wildcard, discoGroupName, auditTrail?.ToList(), reason, asset);
        }

        /// <summary> Initializes a new instance of HostAssetResource. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="uuid"> Global UUID for the asset. </param>
        /// <param name="createdDate"> The date this asset was first added to this workspace. </param>
        /// <param name="updatedDate"> The date this asset was last updated for this workspace. </param>
        /// <param name="state"></param>
        /// <param name="externalId"> An optional customer provided identifier for this asset. </param>
        /// <param name="labels"> Customer labels assigned to this asset. </param>
        /// <param name="wildcard"> An indicator of whether this asset represents a wildcard rollup of assets on this domain. </param>
        /// <param name="discoGroupName"> The name of the DiscoGroup that brought added this asset to the workspace. </param>
        /// <param name="auditTrail"> The history of how this asset was pulled into the workspace through the discovery process. </param>
        /// <param name="reason"></param>
        /// <param name="asset"> asset. </param>
        /// <returns> A new <see cref="Easm.HostAssetResource"/> instance for mocking. </returns>
        public static HostAssetResource HostAssetResource(string id = null, string name = null, string displayName = null, Guid? uuid = null, DateTimeOffset? createdDate = null, DateTimeOffset? updatedDate = null, AssetState? state = null, string externalId = null, IEnumerable<string> labels = null, bool? wildcard = null, string discoGroupName = null, IEnumerable<AuditTrailItem> auditTrail = null, string reason = null, HostAsset asset = null)
        {
            labels ??= new List<string>();
            auditTrail ??= new List<AuditTrailItem>();

            return new HostAssetResource("host", id, name, displayName, uuid, createdDate, updatedDate, state, externalId, labels?.ToList(), wildcard, discoGroupName, auditTrail?.ToList(), reason, asset);
        }

        /// <summary> Initializes a new instance of IpAddressAssetResource. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="uuid"> Global UUID for the asset. </param>
        /// <param name="createdDate"> The date this asset was first added to this workspace. </param>
        /// <param name="updatedDate"> The date this asset was last updated for this workspace. </param>
        /// <param name="state"></param>
        /// <param name="externalId"> An optional customer provided identifier for this asset. </param>
        /// <param name="labels"> Customer labels assigned to this asset. </param>
        /// <param name="wildcard"> An indicator of whether this asset represents a wildcard rollup of assets on this domain. </param>
        /// <param name="discoGroupName"> The name of the DiscoGroup that brought added this asset to the workspace. </param>
        /// <param name="auditTrail"> The history of how this asset was pulled into the workspace through the discovery process. </param>
        /// <param name="reason"></param>
        /// <param name="asset"> asset. </param>
        /// <returns> A new <see cref="Easm.IpAddressAssetResource"/> instance for mocking. </returns>
        public static IpAddressAssetResource IpAddressAssetResource(string id = null, string name = null, string displayName = null, Guid? uuid = null, DateTimeOffset? createdDate = null, DateTimeOffset? updatedDate = null, AssetState? state = null, string externalId = null, IEnumerable<string> labels = null, bool? wildcard = null, string discoGroupName = null, IEnumerable<AuditTrailItem> auditTrail = null, string reason = null, IpAddressAsset asset = null)
        {
            labels ??= new List<string>();
            auditTrail ??= new List<AuditTrailItem>();

            return new IpAddressAssetResource("ipAddress", id, name, displayName, uuid, createdDate, updatedDate, state, externalId, labels?.ToList(), wildcard, discoGroupName, auditTrail?.ToList(), reason, asset);
        }

        /// <summary> Initializes a new instance of IpBlockAssetResource. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="uuid"> Global UUID for the asset. </param>
        /// <param name="createdDate"> The date this asset was first added to this workspace. </param>
        /// <param name="updatedDate"> The date this asset was last updated for this workspace. </param>
        /// <param name="state"></param>
        /// <param name="externalId"> An optional customer provided identifier for this asset. </param>
        /// <param name="labels"> Customer labels assigned to this asset. </param>
        /// <param name="wildcard"> An indicator of whether this asset represents a wildcard rollup of assets on this domain. </param>
        /// <param name="discoGroupName"> The name of the DiscoGroup that brought added this asset to the workspace. </param>
        /// <param name="auditTrail"> The history of how this asset was pulled into the workspace through the discovery process. </param>
        /// <param name="reason"></param>
        /// <param name="asset"> asset. </param>
        /// <returns> A new <see cref="Easm.IpBlockAssetResource"/> instance for mocking. </returns>
        public static IpBlockAssetResource IpBlockAssetResource(string id = null, string name = null, string displayName = null, Guid? uuid = null, DateTimeOffset? createdDate = null, DateTimeOffset? updatedDate = null, AssetState? state = null, string externalId = null, IEnumerable<string> labels = null, bool? wildcard = null, string discoGroupName = null, IEnumerable<AuditTrailItem> auditTrail = null, string reason = null, IpBlockAsset asset = null)
        {
            labels ??= new List<string>();
            auditTrail ??= new List<AuditTrailItem>();

            return new IpBlockAssetResource("ipBlock", id, name, displayName, uuid, createdDate, updatedDate, state, externalId, labels?.ToList(), wildcard, discoGroupName, auditTrail?.ToList(), reason, asset);
        }

        /// <summary> Initializes a new instance of PageAssetResource. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="uuid"> Global UUID for the asset. </param>
        /// <param name="createdDate"> The date this asset was first added to this workspace. </param>
        /// <param name="updatedDate"> The date this asset was last updated for this workspace. </param>
        /// <param name="state"></param>
        /// <param name="externalId"> An optional customer provided identifier for this asset. </param>
        /// <param name="labels"> Customer labels assigned to this asset. </param>
        /// <param name="wildcard"> An indicator of whether this asset represents a wildcard rollup of assets on this domain. </param>
        /// <param name="discoGroupName"> The name of the DiscoGroup that brought added this asset to the workspace. </param>
        /// <param name="auditTrail"> The history of how this asset was pulled into the workspace through the discovery process. </param>
        /// <param name="reason"></param>
        /// <param name="asset"> asset. </param>
        /// <returns> A new <see cref="Easm.PageAssetResource"/> instance for mocking. </returns>
        public static PageAssetResource PageAssetResource(string id = null, string name = null, string displayName = null, Guid? uuid = null, DateTimeOffset? createdDate = null, DateTimeOffset? updatedDate = null, AssetState? state = null, string externalId = null, IEnumerable<string> labels = null, bool? wildcard = null, string discoGroupName = null, IEnumerable<AuditTrailItem> auditTrail = null, string reason = null, PageAsset asset = null)
        {
            labels ??= new List<string>();
            auditTrail ??= new List<AuditTrailItem>();

            return new PageAssetResource("page", id, name, displayName, uuid, createdDate, updatedDate, state, externalId, labels?.ToList(), wildcard, discoGroupName, auditTrail?.ToList(), reason, asset);
        }

        /// <summary> Initializes a new instance of SslCertAssetResource. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="uuid"> Global UUID for the asset. </param>
        /// <param name="createdDate"> The date this asset was first added to this workspace. </param>
        /// <param name="updatedDate"> The date this asset was last updated for this workspace. </param>
        /// <param name="state"></param>
        /// <param name="externalId"> An optional customer provided identifier for this asset. </param>
        /// <param name="labels"> Customer labels assigned to this asset. </param>
        /// <param name="wildcard"> An indicator of whether this asset represents a wildcard rollup of assets on this domain. </param>
        /// <param name="discoGroupName"> The name of the DiscoGroup that brought added this asset to the workspace. </param>
        /// <param name="auditTrail"> The history of how this asset was pulled into the workspace through the discovery process. </param>
        /// <param name="reason"></param>
        /// <param name="asset"> asset. </param>
        /// <returns> A new <see cref="Easm.SslCertAssetResource"/> instance for mocking. </returns>
        public static SslCertAssetResource SslCertAssetResource(string id = null, string name = null, string displayName = null, Guid? uuid = null, DateTimeOffset? createdDate = null, DateTimeOffset? updatedDate = null, AssetState? state = null, string externalId = null, IEnumerable<string> labels = null, bool? wildcard = null, string discoGroupName = null, IEnumerable<AuditTrailItem> auditTrail = null, string reason = null, SslCertAsset asset = null)
        {
            labels ??= new List<string>();
            auditTrail ??= new List<AuditTrailItem>();

            return new SslCertAssetResource("sslCert", id, name, displayName, uuid, createdDate, updatedDate, state, externalId, labels?.ToList(), wildcard, discoGroupName, auditTrail?.ToList(), reason, asset);
        }

        /// <summary> Initializes a new instance of DataConnection. </summary>
        /// <param name="kind"> Discriminator. </param>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="content"> The type of data the data connection will transfer. </param>
        /// <param name="createdDate"> The date the data connection was created. </param>
        /// <param name="frequency"> The rate at which the data connection will receive updates. </param>
        /// <param name="frequencyOffset"> The day to update the data connection on. </param>
        /// <param name="updatedDate"> The date the data connection was last updated. </param>
        /// <param name="userUpdatedAt"> The date the data connection was last updated by user. </param>
        /// <param name="active"> An indicator of whether the data connection is active. </param>
        /// <param name="inactiveMessage"> A message that specifies details about data connection if inactive. </param>
        /// <returns> A new <see cref="Easm.DataConnection"/> instance for mocking. </returns>
        public static DataConnection DataConnection(string kind = null, string id = null, string name = null, string displayName = null, DataConnectionContent? content = null, DateTimeOffset? createdDate = null, DataConnectionFrequency? frequency = null, int? frequencyOffset = null, DateTimeOffset? updatedDate = null, DateTimeOffset? userUpdatedAt = null, bool? active = null, string inactiveMessage = null)
        {
            return new UnknownDataConnection(kind, id, name, displayName, content, createdDate, frequency, frequencyOffset, updatedDate, userUpdatedAt, active, inactiveMessage);
        }

        /// <summary> Initializes a new instance of LogAnalyticsDataConnection. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="content"> The type of data the data connection will transfer. </param>
        /// <param name="createdDate"> The date the data connection was created. </param>
        /// <param name="frequency"> The rate at which the data connection will receive updates. </param>
        /// <param name="frequencyOffset"> The day to update the data connection on. </param>
        /// <param name="updatedDate"> The date the data connection was last updated. </param>
        /// <param name="userUpdatedAt"> The date the data connection was last updated by user. </param>
        /// <param name="active"> An indicator of whether the data connection is active. </param>
        /// <param name="inactiveMessage"> A message that specifies details about data connection if inactive. </param>
        /// <param name="properties"> properties. </param>
        /// <returns> A new <see cref="Easm.LogAnalyticsDataConnection"/> instance for mocking. </returns>
        public static LogAnalyticsDataConnection LogAnalyticsDataConnection(string id = null, string name = null, string displayName = null, DataConnectionContent? content = null, DateTimeOffset? createdDate = null, DataConnectionFrequency? frequency = null, int? frequencyOffset = null, DateTimeOffset? updatedDate = null, DateTimeOffset? userUpdatedAt = null, bool? active = null, string inactiveMessage = null, LogAnalyticsDataConnectionProperties properties = null)
        {
            return new LogAnalyticsDataConnection("logAnalytics", id, name, displayName, content, createdDate, frequency, frequencyOffset, updatedDate, userUpdatedAt, active, inactiveMessage, properties);
        }

        /// <summary> Initializes a new instance of AzureDataExplorerDataConnection. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="content"> The type of data the data connection will transfer. </param>
        /// <param name="createdDate"> The date the data connection was created. </param>
        /// <param name="frequency"> The rate at which the data connection will receive updates. </param>
        /// <param name="frequencyOffset"> The day to update the data connection on. </param>
        /// <param name="updatedDate"> The date the data connection was last updated. </param>
        /// <param name="userUpdatedAt"> The date the data connection was last updated by user. </param>
        /// <param name="active"> An indicator of whether the data connection is active. </param>
        /// <param name="inactiveMessage"> A message that specifies details about data connection if inactive. </param>
        /// <param name="properties"> properties. </param>
        /// <returns> A new <see cref="Easm.AzureDataExplorerDataConnection"/> instance for mocking. </returns>
        public static AzureDataExplorerDataConnection AzureDataExplorerDataConnection(string id = null, string name = null, string displayName = null, DataConnectionContent? content = null, DateTimeOffset? createdDate = null, DataConnectionFrequency? frequency = null, int? frequencyOffset = null, DateTimeOffset? updatedDate = null, DateTimeOffset? userUpdatedAt = null, bool? active = null, string inactiveMessage = null, AzureDataExplorerDataConnectionProperties properties = null)
        {
            return new AzureDataExplorerDataConnection("azureDataExplorer", id, name, displayName, content, createdDate, frequency, frequencyOffset, updatedDate, userUpdatedAt, active, inactiveMessage, properties);
        }

        /// <summary> Initializes a new instance of ValidateResult. </summary>
        /// <param name="error"> This is the top-level error object whose code matches the x-ms-error-code response header. </param>
        /// <returns> A new <see cref="Easm.ValidateResult"/> instance for mocking. </returns>
        public static ValidateResult ValidateResult(ErrorDetail error = null)
        {
            return new ValidateResult(error);
        }

        /// <summary> Initializes a new instance of ErrorDetail. </summary>
        /// <param name="code"> This is one of a server-defined set of error codes. </param>
        /// <param name="message"> This is a human-readable representation of the error. </param>
        /// <param name="target"> This is the error target. </param>
        /// <param name="details"> This is an array of details about specific errors that led to this reported error. </param>
        /// <param name="innererror"> This is an object containing more specific information than the current object about the error. </param>
        /// <returns> A new <see cref="Easm.ErrorDetail"/> instance for mocking. </returns>
        public static ErrorDetail ErrorDetail(string code = null, string message = null, string target = null, IEnumerable<ErrorDetail> details = null, InnerError innererror = null)
        {
            details ??= new List<ErrorDetail>();

            return new ErrorDetail(code, message, target, details?.ToList(), innererror);
        }

        /// <summary> Initializes a new instance of InnerError. </summary>
        /// <param name="code"> This is a more specific error code than was provided by the containing error. </param>
        /// <param name="value"> This is an additional field representing the value that caused the error to help with debugging. </param>
        /// <returns> A new <see cref="Easm.InnerError"/> instance for mocking. </returns>
        public static InnerError InnerError(string code = null, BinaryData value = null)
        {
            return new InnerError(code, value);
        }

        /// <summary> Initializes a new instance of DiscoGroup. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="description"> The description for a disco group. </param>
        /// <param name="tier"> The tier for the disco group which will affect the algorithm used for the disco runs in this group. </param>
        /// <param name="frequencyMilliseconds"> The frequency at which the disco group is supposed to be rerun in milliseconds. </param>
        /// <param name="seeds"> The list of seeds used for the disco group runs. </param>
        /// <param name="names"> The list of names used for the disco group runs. </param>
        /// <param name="excludes"> The list of excludes used for the disco group runs, aka assets to exclude from the discovery algorithm. </param>
        /// <param name="latestRun"> The latest run of this disco group with some limited information, null if the group has never been run. </param>
        /// <param name="createdDate"> The date for the disco group was created. </param>
        /// <param name="templateId"> The unique identifier for the disco template used for the disco group creation. </param>
        /// <returns> A new <see cref="Easm.DiscoGroup"/> instance for mocking. </returns>
        public static DiscoGroup DiscoGroup(string id = null, string name = null, string displayName = null, string description = null, string tier = null, long? frequencyMilliseconds = null, IEnumerable<DiscoSource> seeds = null, IEnumerable<string> names = null, IEnumerable<DiscoSource> excludes = null, DiscoRunResult latestRun = null, DateTimeOffset? createdDate = null, string templateId = null)
        {
            seeds ??= new List<DiscoSource>();
            names ??= new List<string>();
            excludes ??= new List<DiscoSource>();

            return new DiscoGroup(id, name, displayName, description, tier, frequencyMilliseconds, seeds?.ToList(), names?.ToList(), excludes?.ToList(), latestRun, createdDate, templateId);
        }

        /// <summary> Initializes a new instance of DiscoTemplate. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="industry"> The name of the industry. </param>
        /// <param name="region"> The name of the region. </param>
        /// <param name="countryCode"> The country code. </param>
        /// <param name="stateCode"> The state code. </param>
        /// <param name="city"> The name of the city. </param>
        /// <param name="seeds"> The list of disco template seeds. </param>
        /// <param name="names"> The list of disco template names. </param>
        /// <returns> A new <see cref="Easm.DiscoTemplate"/> instance for mocking. </returns>
        public static DiscoTemplate DiscoTemplate(string id = null, string name = null, string displayName = null, string industry = null, string region = null, string countryCode = null, string stateCode = null, string city = null, IEnumerable<DiscoSource> seeds = null, IEnumerable<string> names = null)
        {
            seeds ??= new List<DiscoSource>();
            names ??= new List<string>();

            return new DiscoTemplate(id, name, displayName, industry, region, countryCode, stateCode, city, seeds?.ToList(), names?.ToList());
        }

        /// <summary> Initializes a new instance of ReportBillableAssetSummaryResult. </summary>
        /// <param name="assetSummaries"></param>
        /// <returns> A new <see cref="Easm.ReportBillableAssetSummaryResult"/> instance for mocking. </returns>
        public static ReportBillableAssetSummaryResult ReportBillableAssetSummaryResult(IEnumerable<ReportBillableAssetSnapshotResult> assetSummaries = null)
        {
            assetSummaries ??= new List<ReportBillableAssetSnapshotResult>();

            return new ReportBillableAssetSummaryResult(assetSummaries?.ToList());
        }

        /// <summary> Initializes a new instance of ReportBillableAssetSnapshotResult. </summary>
        /// <param name="date"> The date these assets were billed on. </param>
        /// <param name="total"> The total number of billable assets for this date. </param>
        /// <param name="assetBreakdown"> The breakdown of billable asset counts for each asset type. </param>
        /// <returns> A new <see cref="Easm.ReportBillableAssetSnapshotResult"/> instance for mocking. </returns>
        public static ReportBillableAssetSnapshotResult ReportBillableAssetSnapshotResult(DateTimeOffset? date = null, long? total = null, IEnumerable<ReportBillableAssetBreakdown> assetBreakdown = null)
        {
            assetBreakdown ??= new List<ReportBillableAssetBreakdown>();

            return new ReportBillableAssetSnapshotResult(date, total, assetBreakdown?.ToList());
        }

        /// <summary> Initializes a new instance of ReportBillableAssetBreakdown. </summary>
        /// <param name="kind"> The kind of billable asset. </param>
        /// <param name="count"> The number of assets of this type. </param>
        /// <returns> A new <see cref="Easm.ReportBillableAssetBreakdown"/> instance for mocking. </returns>
        public static ReportBillableAssetBreakdown ReportBillableAssetBreakdown(ReportBillableAssetBreakdownKind? kind = null, long? count = null)
        {
            return new ReportBillableAssetBreakdown(kind, count);
        }

        /// <summary> Initializes a new instance of ReportAssetSnapshotResult. </summary>
        /// <param name="displayName"> The name of the metric. </param>
        /// <param name="metric"> The unique metric name. </param>
        /// <param name="labelName"> The customer label that was filtered on, if one was provided. </param>
        /// <param name="updatedAt"> The last time this asset data was updated on this metric. </param>
        /// <param name="description"> A description of what the metric represents. </param>
        /// <param name="assets"> The page of assets that match the provided metric. </param>
        /// <returns> A new <see cref="Easm.ReportAssetSnapshotResult"/> instance for mocking. </returns>
        public static ReportAssetSnapshotResult ReportAssetSnapshotResult(string displayName = null, string metric = null, string labelName = null, DateTimeOffset? updatedAt = null, string description = null, AssetPageResult assets = null)
        {
            return new ReportAssetSnapshotResult(displayName, metric, labelName, updatedAt, description, assets);
        }

        /// <summary> Initializes a new instance of AssetPageResult. </summary>
        /// <param name="totalElements"> The total number of items available in the full result set. </param>
        /// <param name="mark"> The cursor mark to be used on the next request.  Not set if using paging. </param>
        /// <param name="nextLink"> The link to access the next page of results.  Not set if at the end of the result set. </param>
        /// <param name="value"> The items in the current page of results. </param>
        /// <returns> A new <see cref="Easm.AssetPageResult"/> instance for mocking. </returns>
        public static AssetPageResult AssetPageResult(long? totalElements = null, string mark = null, string nextLink = null, IEnumerable<AssetResource> value = null)
        {
            value ??= new List<AssetResource>();

            return new AssetPageResult(totalElements, mark, nextLink, value?.ToList());
        }

        /// <summary> Initializes a new instance of ReportAssetSummaryResult. </summary>
        /// <param name="assetSummaries"> The collection of asset summaries. </param>
        /// <returns> A new <see cref="Easm.ReportAssetSummaryResult"/> instance for mocking. </returns>
        public static ReportAssetSummaryResult ReportAssetSummaryResult(IEnumerable<AssetSummaryResult> assetSummaries = null)
        {
            assetSummaries ??= new List<AssetSummaryResult>();

            return new ReportAssetSummaryResult(assetSummaries?.ToList());
        }

        /// <summary> Initializes a new instance of AssetSummaryResult. </summary>
        /// <param name="displayName"> The name of the summary response.  Depending on the request time this will either be the asset filter, risk category, or risk metric. </param>
        /// <param name="description"> The description of the summary response.  Filters don't have a description. </param>
        /// <param name="updatedAt"> The last time risk categories or risk metrics were captured. Set to the current time for asset filter requests, which always pull the live asset data. </param>
        /// <param name="metricCategory"> If the request is for a metric category, this will contain the requested unique category name. </param>
        /// <param name="metric"> If the request is for a metric, this will contain the requested unique metric name. </param>
        /// <param name="filter"> If the request is for an asset filter, this will contain the corresponding filter. </param>
        /// <param name="labelName"> An optional label used to filter requests results. </param>
        /// <param name="count"> The count of assets matching the request parameters. </param>
        /// <param name="link"> The link to the corresponding asset details. </param>
        /// <param name="children"> The corresponding child entities.  For metric categories this will contain metrics.  For filters with groupBy and segmentBy this will contain facets. </param>
        /// <returns> A new <see cref="Easm.AssetSummaryResult"/> instance for mocking. </returns>
        public static AssetSummaryResult AssetSummaryResult(string displayName = null, string description = null, DateTimeOffset? updatedAt = null, string metricCategory = null, string metric = null, string filter = null, string labelName = null, long? count = null, string link = null, IEnumerable<AssetSummaryResult> children = null)
        {
            children ??= new List<AssetSummaryResult>();

            return new AssetSummaryResult(displayName, description, updatedAt, metricCategory, metric, filter, labelName, count, link, children?.ToList());
        }

        /// <summary> Initializes a new instance of SavedFilter. </summary>
        /// <param name="id"> The system generated unique id for the resource. </param>
        /// <param name="name"> The caller provided unique name for the resource. </param>
        /// <param name="displayName"> The name that can be used for display purposes. </param>
        /// <param name="filter"></param>
        /// <param name="description"></param>
        /// <returns> A new <see cref="Easm.SavedFilter"/> instance for mocking. </returns>
        public static SavedFilter SavedFilter(string id = null, string name = null, string displayName = null, string filter = null, string description = null)
        {
            return new SavedFilter(id, name, displayName, filter, description);
        }

        /// <summary> Initializes a new instance of Task. </summary>
        /// <param name="id"> The unique identifier of the task. </param>
        /// <param name="startedAt"> The time the task started. </param>
        /// <param name="completedAt"> The time the task completed. </param>
        /// <param name="lastPolledAt"> The last time the status of the task was updated. </param>
        /// <param name="state"> The state the task is in. </param>
        /// <param name="phase"> The phase the task is in. </param>
        /// <param name="reason"> The reason the task was moved into its current state, if the task wasn't completed. </param>
        /// <param name="metadata"> Attributes unique to the task.  This differs by task type. </param>
        /// <returns> A new <see cref="Easm.Task"/> instance for mocking. </returns>
        public static Task Task(string id = null, DateTimeOffset? startedAt = null, DateTimeOffset? completedAt = null, DateTimeOffset? lastPolledAt = null, TaskState? state = null, TaskPhase? phase = null, string reason = null, IReadOnlyDictionary<string, BinaryData> metadata = null)
        {
            metadata ??= new Dictionary<string, BinaryData>();

            return new Task(id, startedAt, completedAt, lastPolledAt, state, phase, reason, metadata);
        }
    }
}
