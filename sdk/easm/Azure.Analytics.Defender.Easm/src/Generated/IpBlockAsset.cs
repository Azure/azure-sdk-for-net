// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> The IpBlockAsset. </summary>
    public partial class IpBlockAsset : InventoryAsset
    {
        /// <summary> Initializes a new instance of IpBlockAsset. </summary>
        public IpBlockAsset()
        {
            Asns = new ChangeTrackingList<ObservedLong>();
            BgpPrefixes = new ChangeTrackingList<ObservedString>();
            NetNames = new ChangeTrackingList<ObservedString>();
            RegistrantContacts = new ChangeTrackingList<ObservedString>();
            RegistrantOrgs = new ChangeTrackingList<ObservedString>();
            AdminContacts = new ChangeTrackingList<ObservedString>();
            TechnicalContacts = new ChangeTrackingList<ObservedString>();
            RegistrarCreatedAt = new ChangeTrackingList<ObservedLong>();
            RegistrarUpdatedAt = new ChangeTrackingList<ObservedLong>();
            NetRanges = new ChangeTrackingList<ObservedString>();
            Reputations = new ChangeTrackingList<Reputation>();
            Sources = new ChangeTrackingList<Source>();
            Location = new ChangeTrackingList<ObservedLocation>();
            RegistrarExpiresAt = new ChangeTrackingList<ObservedLong>();
            RegistrantNames = new ChangeTrackingList<ObservedString>();
            AdminNames = new ChangeTrackingList<ObservedString>();
            TechnicalNames = new ChangeTrackingList<ObservedString>();
            AdminOrgs = new ChangeTrackingList<ObservedString>();
            TechnicalOrgs = new ChangeTrackingList<ObservedString>();
            RegistrantPhones = new ChangeTrackingList<ObservedString>();
            AdminPhones = new ChangeTrackingList<ObservedString>();
            TechnicalPhones = new ChangeTrackingList<ObservedString>();
        }

        /// <summary> Initializes a new instance of IpBlockAsset. </summary>
        /// <param name="ipBlock"></param>
        /// <param name="asns"></param>
        /// <param name="bgpPrefixes"></param>
        /// <param name="netNames"></param>
        /// <param name="registrantContacts"></param>
        /// <param name="registrantOrgs"></param>
        /// <param name="adminContacts"></param>
        /// <param name="technicalContacts"></param>
        /// <param name="registrarCreatedAt"></param>
        /// <param name="registrarUpdatedAt"></param>
        /// <param name="netRanges"></param>
        /// <param name="startIp"></param>
        /// <param name="endIp"></param>
        /// <param name="reputations"></param>
        /// <param name="detailedFromWhoisAt"></param>
        /// <param name="sources"></param>
        /// <param name="firstSeen"></param>
        /// <param name="lastSeen"></param>
        /// <param name="count"></param>
        /// <param name="location"></param>
        /// <param name="registrarExpiresAt"></param>
        /// <param name="registrantNames"></param>
        /// <param name="adminNames"></param>
        /// <param name="technicalNames"></param>
        /// <param name="adminOrgs"></param>
        /// <param name="technicalOrgs"></param>
        /// <param name="registrantPhones"></param>
        /// <param name="adminPhones"></param>
        /// <param name="technicalPhones"></param>
        /// <param name="ipv4"></param>
        /// <param name="ipv6"></param>
        internal IpBlockAsset(string ipBlock, IList<ObservedLong> asns, IList<ObservedString> bgpPrefixes, IList<ObservedString> netNames, IList<ObservedString> registrantContacts, IList<ObservedString> registrantOrgs, IList<ObservedString> adminContacts, IList<ObservedString> technicalContacts, IList<ObservedLong> registrarCreatedAt, IList<ObservedLong> registrarUpdatedAt, IList<ObservedString> netRanges, string startIp, string endIp, IList<Reputation> reputations, DateTimeOffset? detailedFromWhoisAt, IList<Source> sources, DateTimeOffset? firstSeen, DateTimeOffset? lastSeen, long? count, IList<ObservedLocation> location, IList<ObservedLong> registrarExpiresAt, IList<ObservedString> registrantNames, IList<ObservedString> adminNames, IList<ObservedString> technicalNames, IList<ObservedString> adminOrgs, IList<ObservedString> technicalOrgs, IList<ObservedString> registrantPhones, IList<ObservedString> adminPhones, IList<ObservedString> technicalPhones, bool? ipv4, bool? ipv6)
        {
            IpBlock = ipBlock;
            Asns = asns;
            BgpPrefixes = bgpPrefixes;
            NetNames = netNames;
            RegistrantContacts = registrantContacts;
            RegistrantOrgs = registrantOrgs;
            AdminContacts = adminContacts;
            TechnicalContacts = technicalContacts;
            RegistrarCreatedAt = registrarCreatedAt;
            RegistrarUpdatedAt = registrarUpdatedAt;
            NetRanges = netRanges;
            StartIp = startIp;
            EndIp = endIp;
            Reputations = reputations;
            DetailedFromWhoisAt = detailedFromWhoisAt;
            Sources = sources;
            FirstSeen = firstSeen;
            LastSeen = lastSeen;
            Count = count;
            Location = location;
            RegistrarExpiresAt = registrarExpiresAt;
            RegistrantNames = registrantNames;
            AdminNames = adminNames;
            TechnicalNames = technicalNames;
            AdminOrgs = adminOrgs;
            TechnicalOrgs = technicalOrgs;
            RegistrantPhones = registrantPhones;
            AdminPhones = adminPhones;
            TechnicalPhones = technicalPhones;
            Ipv4 = ipv4;
            Ipv6 = ipv6;
        }

        /// <summary> Gets or sets the ip block. </summary>
        public string IpBlock { get; set; }
        /// <summary> Gets the asns. </summary>
        public IList<ObservedLong> Asns { get; }
        /// <summary> Gets the bgp prefixes. </summary>
        public IList<ObservedString> BgpPrefixes { get; }
        /// <summary> Gets the net names. </summary>
        public IList<ObservedString> NetNames { get; }
        /// <summary> Gets the registrant contacts. </summary>
        public IList<ObservedString> RegistrantContacts { get; }
        /// <summary> Gets the registrant orgs. </summary>
        public IList<ObservedString> RegistrantOrgs { get; }
        /// <summary> Gets the admin contacts. </summary>
        public IList<ObservedString> AdminContacts { get; }
        /// <summary> Gets the technical contacts. </summary>
        public IList<ObservedString> TechnicalContacts { get; }
        /// <summary> Gets the registrar created at. </summary>
        public IList<ObservedLong> RegistrarCreatedAt { get; }
        /// <summary> Gets the registrar updated at. </summary>
        public IList<ObservedLong> RegistrarUpdatedAt { get; }
        /// <summary> Gets the net ranges. </summary>
        public IList<ObservedString> NetRanges { get; }
        /// <summary> Gets or sets the start ip. </summary>
        public string StartIp { get; set; }
        /// <summary> Gets or sets the end ip. </summary>
        public string EndIp { get; set; }
        /// <summary> Gets the reputations. </summary>
        public IList<Reputation> Reputations { get; }
        /// <summary> Gets or sets the detailed from whois at. </summary>
        public DateTimeOffset? DetailedFromWhoisAt { get; set; }
        /// <summary> Gets the sources. </summary>
        public IList<Source> Sources { get; }
        /// <summary> Gets or sets the first seen. </summary>
        public DateTimeOffset? FirstSeen { get; set; }
        /// <summary> Gets or sets the last seen. </summary>
        public DateTimeOffset? LastSeen { get; set; }
        /// <summary> Gets or sets the count. </summary>
        public long? Count { get; set; }
        /// <summary> Gets the location. </summary>
        public IList<ObservedLocation> Location { get; }
        /// <summary> Gets the registrar expires at. </summary>
        public IList<ObservedLong> RegistrarExpiresAt { get; }
        /// <summary> Gets the registrant names. </summary>
        public IList<ObservedString> RegistrantNames { get; }
        /// <summary> Gets the admin names. </summary>
        public IList<ObservedString> AdminNames { get; }
        /// <summary> Gets the technical names. </summary>
        public IList<ObservedString> TechnicalNames { get; }
        /// <summary> Gets the admin orgs. </summary>
        public IList<ObservedString> AdminOrgs { get; }
        /// <summary> Gets the technical orgs. </summary>
        public IList<ObservedString> TechnicalOrgs { get; }
        /// <summary> Gets the registrant phones. </summary>
        public IList<ObservedString> RegistrantPhones { get; }
        /// <summary> Gets the admin phones. </summary>
        public IList<ObservedString> AdminPhones { get; }
        /// <summary> Gets the technical phones. </summary>
        public IList<ObservedString> TechnicalPhones { get; }
        /// <summary> Gets or sets the ipv 4. </summary>
        public bool? Ipv4 { get; set; }
        /// <summary> Gets or sets the ipv 6. </summary>
        public bool? Ipv6 { get; set; }
    }
}
