// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> A list of global asset type. </summary>
    public readonly partial struct GlobalAssetType : IEquatable<GlobalAssetType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="GlobalAssetType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public GlobalAssetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PageValue = "page";
        private const string ResourceValue = "resource";
        private const string MailServerValue = "mailServer";
        private const string NameServerValue = "nameServer";
        private const string HostValue = "host";
        private const string DomainValue = "domain";
        private const string IpAddressValue = "ipAddress";
        private const string IpBlockValue = "ipBlock";
        private const string AsValue = "as";
        private const string ContactValue = "contact";
        private const string SslCertValue = "sslCert";

        /// <summary> page. </summary>
        public static GlobalAssetType Page { get; } = new GlobalAssetType(PageValue);
        /// <summary> resource. </summary>
        public static GlobalAssetType Resource { get; } = new GlobalAssetType(ResourceValue);
        /// <summary> mail server. </summary>
        public static GlobalAssetType MailServer { get; } = new GlobalAssetType(MailServerValue);
        /// <summary> name server. </summary>
        public static GlobalAssetType NameServer { get; } = new GlobalAssetType(NameServerValue);
        /// <summary> host. </summary>
        public static GlobalAssetType Host { get; } = new GlobalAssetType(HostValue);
        /// <summary> domain. </summary>
        public static GlobalAssetType Domain { get; } = new GlobalAssetType(DomainValue);
        /// <summary> ip address. </summary>
        public static GlobalAssetType IpAddress { get; } = new GlobalAssetType(IpAddressValue);
        /// <summary> ip block. </summary>
        public static GlobalAssetType IpBlock { get; } = new GlobalAssetType(IpBlockValue);
        /// <summary> autonomous system number. </summary>
        public static GlobalAssetType As { get; } = new GlobalAssetType(AsValue);
        /// <summary> contact. </summary>
        public static GlobalAssetType Contact { get; } = new GlobalAssetType(ContactValue);
        /// <summary> ssl certificate. </summary>
        public static GlobalAssetType SslCert { get; } = new GlobalAssetType(SslCertValue);
        /// <summary> Determines if two <see cref="GlobalAssetType"/> values are the same. </summary>
        public static bool operator ==(GlobalAssetType left, GlobalAssetType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="GlobalAssetType"/> values are not the same. </summary>
        public static bool operator !=(GlobalAssetType left, GlobalAssetType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="GlobalAssetType"/>. </summary>
        public static implicit operator GlobalAssetType(string value) => new GlobalAssetType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is GlobalAssetType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(GlobalAssetType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
