// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Defender.Easm
{
    public partial class HostAsset : IUtf8JsonSerializable, IJsonModel<HostAsset>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<HostAsset>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<HostAsset>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HostAsset>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HostAsset)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Host != null)
            {
                writer.WritePropertyName("host"u8);
                writer.WriteStringValue(Host);
            }
            if (Domain != null)
            {
                writer.WritePropertyName("domain"u8);
                writer.WriteStringValue(Domain);
            }
            if (!(IpAddresses is ChangeTrackingList<ObservedString> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("ipAddresses"u8);
                writer.WriteStartArray();
                foreach (var item in IpAddresses)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(WebComponents is ChangeTrackingList<WebComponent> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("webComponents"u8);
                writer.WriteStartArray();
                foreach (var item in WebComponents)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Headers is ChangeTrackingList<ObservedHeader> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("headers"u8);
                writer.WriteStartArray();
                foreach (var item in Headers)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Attributes is ChangeTrackingList<AttributeDetails> collection2 && collection2.IsUndefined))
            {
                writer.WritePropertyName("attributes"u8);
                writer.WriteStartArray();
                foreach (var item in Attributes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Cookies is ChangeTrackingList<CookieDetails> collection3 && collection3.IsUndefined))
            {
                writer.WritePropertyName("cookies"u8);
                writer.WriteStartArray();
                foreach (var item in Cookies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(SslCerts is ChangeTrackingList<SslCertAsset> collection4 && collection4.IsUndefined))
            {
                writer.WritePropertyName("sslCerts"u8);
                writer.WriteStartArray();
                foreach (var item in SslCerts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ParentHosts is ChangeTrackingList<ObservedString> collection5 && collection5.IsUndefined))
            {
                writer.WritePropertyName("parentHosts"u8);
                writer.WriteStartArray();
                foreach (var item in ParentHosts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ChildHosts is ChangeTrackingList<ObservedString> collection6 && collection6.IsUndefined))
            {
                writer.WritePropertyName("childHosts"u8);
                writer.WriteStartArray();
                foreach (var item in ChildHosts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (HostCore != null)
            {
                writer.WritePropertyName("hostCore"u8);
                writer.WriteObjectValue(HostCore);
            }
            if (!(Services is ChangeTrackingList<AssetService> collection7 && collection7.IsUndefined))
            {
                writer.WritePropertyName("services"u8);
                writer.WriteStartArray();
                foreach (var item in Services)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Cnames is ChangeTrackingList<ObservedString> collection8 && collection8.IsUndefined))
            {
                writer.WritePropertyName("cnames"u8);
                writer.WriteStartArray();
                foreach (var item in Cnames)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Sources is ChangeTrackingList<SourceDetails> collection9 && collection9.IsUndefined))
            {
                writer.WritePropertyName("sources"u8);
                writer.WriteStartArray();
                foreach (var item in Sources)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (FirstSeen.HasValue)
            {
                writer.WritePropertyName("firstSeen"u8);
                writer.WriteStringValue(FirstSeen.Value, "O");
            }
            if (LastSeen.HasValue)
            {
                writer.WritePropertyName("lastSeen"u8);
                writer.WriteStringValue(LastSeen.Value, "O");
            }
            if (Count.HasValue)
            {
                writer.WritePropertyName("count"u8);
                writer.WriteNumberValue(Count.Value);
            }
            if (!(ResourceUrls is ChangeTrackingList<ResourceUri> collection10 && collection10.IsUndefined))
            {
                writer.WritePropertyName("resourceUrls"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceUrls)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ScanMetadata is ChangeTrackingList<ScanMetadata> collection11 && collection11.IsUndefined))
            {
                writer.WritePropertyName("scanMetadata"u8);
                writer.WriteStartArray();
                foreach (var item in ScanMetadata)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Asns is ChangeTrackingList<ObservedLong> collection12 && collection12.IsUndefined))
            {
                writer.WritePropertyName("asns"u8);
                writer.WriteStartArray();
                foreach (var item in Asns)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(IpBlocks is ChangeTrackingList<IpBlock> collection13 && collection13.IsUndefined))
            {
                writer.WritePropertyName("ipBlocks"u8);
                writer.WriteStartArray();
                foreach (var item in IpBlocks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ResponseBodies is ChangeTrackingList<ObservedString> collection14 && collection14.IsUndefined))
            {
                writer.WritePropertyName("responseBodies"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseBodies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (DomainAsset != null)
            {
                writer.WritePropertyName("domainAsset"u8);
                writer.WriteObjectValue(DomainAsset);
            }
            if (!(NsRecord is ChangeTrackingList<ObservedBoolean> collection15 && collection15.IsUndefined))
            {
                writer.WritePropertyName("nsRecord"u8);
                writer.WriteStartArray();
                foreach (var item in NsRecord)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(MxRecord is ChangeTrackingList<ObservedBoolean> collection16 && collection16.IsUndefined))
            {
                writer.WritePropertyName("mxRecord"u8);
                writer.WriteStartArray();
                foreach (var item in MxRecord)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Webserver is ChangeTrackingList<ObservedBoolean> collection17 && collection17.IsUndefined))
            {
                writer.WritePropertyName("webserver"u8);
                writer.WriteStartArray();
                foreach (var item in Webserver)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Location is ChangeTrackingList<ObservedLocation> collection18 && collection18.IsUndefined))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStartArray();
                foreach (var item in Location)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Nxdomain is ChangeTrackingList<ObservedBoolean> collection19 && collection19.IsUndefined))
            {
                writer.WritePropertyName("nxdomain"u8);
                writer.WriteStartArray();
                foreach (var item in Nxdomain)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(SslServerConfig is ChangeTrackingList<SslServerConfig> collection20 && collection20.IsUndefined))
            {
                writer.WritePropertyName("sslServerConfig"u8);
                writer.WriteStartArray();
                foreach (var item in SslServerConfig)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(IsWildcard is ChangeTrackingList<ObservedBoolean> collection21 && collection21.IsUndefined))
            {
                writer.WritePropertyName("isWildcard"u8);
                writer.WriteStartArray();
                foreach (var item in IsWildcard)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Banners is ChangeTrackingList<BannerDetails> collection22 && collection22.IsUndefined))
            {
                writer.WritePropertyName("banners"u8);
                writer.WriteStartArray();
                foreach (var item in Banners)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Ipv4 is ChangeTrackingList<ObservedBoolean> collection23 && collection23.IsUndefined))
            {
                writer.WritePropertyName("ipv4"u8);
                writer.WriteStartArray();
                foreach (var item in Ipv4)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Ipv6 is ChangeTrackingList<ObservedBoolean> collection24 && collection24.IsUndefined))
            {
                writer.WritePropertyName("ipv6"u8);
                writer.WriteStartArray();
                foreach (var item in Ipv6)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        HostAsset IJsonModel<HostAsset>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HostAsset>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HostAsset)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHostAsset(document.RootElement, options);
        }

        internal static HostAsset DeserializeHostAsset(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string host = default;
            string domain = default;
            IReadOnlyList<ObservedString> ipAddresses = default;
            IReadOnlyList<WebComponent> webComponents = default;
            IReadOnlyList<ObservedHeader> headers = default;
            IReadOnlyList<AttributeDetails> attributes = default;
            IReadOnlyList<CookieDetails> cookies = default;
            IReadOnlyList<SslCertAsset> sslCerts = default;
            IReadOnlyList<ObservedString> parentHosts = default;
            IReadOnlyList<ObservedString> childHosts = default;
            HostCore hostCore = default;
            IReadOnlyList<AssetService> services = default;
            IReadOnlyList<ObservedString> cnames = default;
            IReadOnlyList<SourceDetails> sources = default;
            DateTimeOffset? firstSeen = default;
            DateTimeOffset? lastSeen = default;
            long? count = default;
            IReadOnlyList<ResourceUri> resourceUrls = default;
            IReadOnlyList<ScanMetadata> scanMetadata = default;
            IReadOnlyList<ObservedLong> asns = default;
            IReadOnlyList<IpBlock> ipBlocks = default;
            IReadOnlyList<ObservedString> responseBodies = default;
            DomainAsset domainAsset = default;
            IReadOnlyList<ObservedBoolean> nsRecord = default;
            IReadOnlyList<ObservedBoolean> mxRecord = default;
            IReadOnlyList<ObservedBoolean> webserver = default;
            IReadOnlyList<ObservedLocation> location = default;
            IReadOnlyList<ObservedBoolean> nxdomain = default;
            IReadOnlyList<SslServerConfig> sslServerConfig = default;
            IReadOnlyList<ObservedBoolean> isWildcard = default;
            IReadOnlyList<BannerDetails> banners = default;
            IReadOnlyList<ObservedBoolean> ipv4 = default;
            IReadOnlyList<ObservedBoolean> ipv6 = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("host"u8))
                {
                    host = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("domain"u8))
                {
                    domain = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddresses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    ipAddresses = array;
                    continue;
                }
                if (property.NameEquals("webComponents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<WebComponent> array = new List<WebComponent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WebComponent.DeserializeWebComponent(item, options));
                    }
                    webComponents = array;
                    continue;
                }
                if (property.NameEquals("headers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedHeader> array = new List<ObservedHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedHeader.DeserializeObservedHeader(item, options));
                    }
                    headers = array;
                    continue;
                }
                if (property.NameEquals("attributes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AttributeDetails> array = new List<AttributeDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AttributeDetails.DeserializeAttributeDetails(item, options));
                    }
                    attributes = array;
                    continue;
                }
                if (property.NameEquals("cookies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CookieDetails> array = new List<CookieDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CookieDetails.DeserializeCookieDetails(item, options));
                    }
                    cookies = array;
                    continue;
                }
                if (property.NameEquals("sslCerts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SslCertAsset> array = new List<SslCertAsset>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SslCertAsset.DeserializeSslCertAsset(item, options));
                    }
                    sslCerts = array;
                    continue;
                }
                if (property.NameEquals("parentHosts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    parentHosts = array;
                    continue;
                }
                if (property.NameEquals("childHosts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    childHosts = array;
                    continue;
                }
                if (property.NameEquals("hostCore"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hostCore = HostCore.DeserializeHostCore(property.Value, options);
                    continue;
                }
                if (property.NameEquals("services"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AssetService> array = new List<AssetService>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AssetService.DeserializeAssetService(item, options));
                    }
                    services = array;
                    continue;
                }
                if (property.NameEquals("cnames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    cnames = array;
                    continue;
                }
                if (property.NameEquals("sources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SourceDetails> array = new List<SourceDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SourceDetails.DeserializeSourceDetails(item, options));
                    }
                    sources = array;
                    continue;
                }
                if (property.NameEquals("firstSeen"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    firstSeen = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastSeen"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSeen = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("count"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    count = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("resourceUrls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceUri> array = new List<ResourceUri>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResourceUri.DeserializeResourceUri(item, options));
                    }
                    resourceUrls = array;
                    continue;
                }
                if (property.NameEquals("scanMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ScanMetadata> array = new List<ScanMetadata>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Easm.ScanMetadata.DeserializeScanMetadata(item, options));
                    }
                    scanMetadata = array;
                    continue;
                }
                if (property.NameEquals("asns"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLong> array = new List<ObservedLong>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLong.DeserializeObservedLong(item, options));
                    }
                    asns = array;
                    continue;
                }
                if (property.NameEquals("ipBlocks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IpBlock> array = new List<IpBlock>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(IpBlock.DeserializeIpBlock(item, options));
                    }
                    ipBlocks = array;
                    continue;
                }
                if (property.NameEquals("responseBodies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedString> array = new List<ObservedString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedString.DeserializeObservedString(item, options));
                    }
                    responseBodies = array;
                    continue;
                }
                if (property.NameEquals("domainAsset"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    domainAsset = DomainAsset.DeserializeDomainAsset(property.Value, options);
                    continue;
                }
                if (property.NameEquals("nsRecord"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    nsRecord = array;
                    continue;
                }
                if (property.NameEquals("mxRecord"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    mxRecord = array;
                    continue;
                }
                if (property.NameEquals("webserver"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    webserver = array;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedLocation> array = new List<ObservedLocation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedLocation.DeserializeObservedLocation(item, options));
                    }
                    location = array;
                    continue;
                }
                if (property.NameEquals("nxdomain"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    nxdomain = array;
                    continue;
                }
                if (property.NameEquals("sslServerConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SslServerConfig> array = new List<SslServerConfig>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Easm.SslServerConfig.DeserializeSslServerConfig(item, options));
                    }
                    sslServerConfig = array;
                    continue;
                }
                if (property.NameEquals("isWildcard"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    isWildcard = array;
                    continue;
                }
                if (property.NameEquals("banners"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BannerDetails> array = new List<BannerDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BannerDetails.DeserializeBannerDetails(item, options));
                    }
                    banners = array;
                    continue;
                }
                if (property.NameEquals("ipv4"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    ipv4 = array;
                    continue;
                }
                if (property.NameEquals("ipv6"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservedBoolean> array = new List<ObservedBoolean>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservedBoolean.DeserializeObservedBoolean(item, options));
                    }
                    ipv6 = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new HostAsset(
                serializedAdditionalRawData,
                host,
                domain,
                ipAddresses ?? new ChangeTrackingList<ObservedString>(),
                webComponents ?? new ChangeTrackingList<WebComponent>(),
                headers ?? new ChangeTrackingList<ObservedHeader>(),
                attributes ?? new ChangeTrackingList<AttributeDetails>(),
                cookies ?? new ChangeTrackingList<CookieDetails>(),
                sslCerts ?? new ChangeTrackingList<SslCertAsset>(),
                parentHosts ?? new ChangeTrackingList<ObservedString>(),
                childHosts ?? new ChangeTrackingList<ObservedString>(),
                hostCore,
                services ?? new ChangeTrackingList<AssetService>(),
                cnames ?? new ChangeTrackingList<ObservedString>(),
                sources ?? new ChangeTrackingList<SourceDetails>(),
                firstSeen,
                lastSeen,
                count,
                resourceUrls ?? new ChangeTrackingList<ResourceUri>(),
                scanMetadata ?? new ChangeTrackingList<ScanMetadata>(),
                asns ?? new ChangeTrackingList<ObservedLong>(),
                ipBlocks ?? new ChangeTrackingList<IpBlock>(),
                responseBodies ?? new ChangeTrackingList<ObservedString>(),
                domainAsset,
                nsRecord ?? new ChangeTrackingList<ObservedBoolean>(),
                mxRecord ?? new ChangeTrackingList<ObservedBoolean>(),
                webserver ?? new ChangeTrackingList<ObservedBoolean>(),
                location ?? new ChangeTrackingList<ObservedLocation>(),
                nxdomain ?? new ChangeTrackingList<ObservedBoolean>(),
                sslServerConfig ?? new ChangeTrackingList<SslServerConfig>(),
                isWildcard ?? new ChangeTrackingList<ObservedBoolean>(),
                banners ?? new ChangeTrackingList<BannerDetails>(),
                ipv4 ?? new ChangeTrackingList<ObservedBoolean>(),
                ipv6 ?? new ChangeTrackingList<ObservedBoolean>());
        }

        BinaryData IPersistableModel<HostAsset>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HostAsset>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(HostAsset)} does not support '{options.Format}' format.");
            }
        }

        HostAsset IPersistableModel<HostAsset>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HostAsset>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeHostAsset(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HostAsset)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<HostAsset>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new HostAsset FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeHostAsset(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
