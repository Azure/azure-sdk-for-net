// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> The Cvss3Summary. </summary>
    public partial class Cvss3Summary
    {
        /// <summary> Initializes a new instance of Cvss3Summary. </summary>
        public Cvss3Summary()
        {
        }

        /// <summary> Initializes a new instance of Cvss3Summary. </summary>
        /// <param name="version"></param>
        /// <param name="vectorString"></param>
        /// <param name="attackVector"></param>
        /// <param name="attackComplexity"></param>
        /// <param name="privilegesRequired"></param>
        /// <param name="userInteraction"></param>
        /// <param name="scope"></param>
        /// <param name="confidentialityImpact"></param>
        /// <param name="integrityImpact"></param>
        /// <param name="availabilityImpact"></param>
        /// <param name="baseScore"></param>
        /// <param name="baseSeverity"></param>
        /// <param name="exploitCodeMaturity"></param>
        /// <param name="remediationLevel"></param>
        /// <param name="reportConfidence"></param>
        /// <param name="exploitabilityScore"></param>
        /// <param name="impactScore"></param>
        internal Cvss3Summary(string version, string vectorString, string attackVector, string attackComplexity, string privilegesRequired, string userInteraction, string scope, string confidentialityImpact, string integrityImpact, string availabilityImpact, float? baseScore, string baseSeverity, string exploitCodeMaturity, string remediationLevel, string reportConfidence, float? exploitabilityScore, float? impactScore)
        {
            Version = version;
            VectorString = vectorString;
            AttackVector = attackVector;
            AttackComplexity = attackComplexity;
            PrivilegesRequired = privilegesRequired;
            UserInteraction = userInteraction;
            Scope = scope;
            ConfidentialityImpact = confidentialityImpact;
            IntegrityImpact = integrityImpact;
            AvailabilityImpact = availabilityImpact;
            BaseScore = baseScore;
            BaseSeverity = baseSeverity;
            ExploitCodeMaturity = exploitCodeMaturity;
            RemediationLevel = remediationLevel;
            ReportConfidence = reportConfidence;
            ExploitabilityScore = exploitabilityScore;
            ImpactScore = impactScore;
        }

        /// <summary> Gets or sets the version. </summary>
        public string Version { get; set; }
        /// <summary> Gets or sets the vector string. </summary>
        public string VectorString { get; set; }
        /// <summary> Gets or sets the attack vector. </summary>
        public string AttackVector { get; set; }
        /// <summary> Gets or sets the attack complexity. </summary>
        public string AttackComplexity { get; set; }
        /// <summary> Gets or sets the privileges required. </summary>
        public string PrivilegesRequired { get; set; }
        /// <summary> Gets or sets the user interaction. </summary>
        public string UserInteraction { get; set; }
        /// <summary> Gets or sets the scope. </summary>
        public string Scope { get; set; }
        /// <summary> Gets or sets the confidentiality impact. </summary>
        public string ConfidentialityImpact { get; set; }
        /// <summary> Gets or sets the integrity impact. </summary>
        public string IntegrityImpact { get; set; }
        /// <summary> Gets or sets the availability impact. </summary>
        public string AvailabilityImpact { get; set; }
        /// <summary> Gets or sets the base score. </summary>
        public float? BaseScore { get; set; }
        /// <summary> Gets or sets the base severity. </summary>
        public string BaseSeverity { get; set; }
        /// <summary> Gets or sets the exploit code maturity. </summary>
        public string ExploitCodeMaturity { get; set; }
        /// <summary> Gets or sets the remediation level. </summary>
        public string RemediationLevel { get; set; }
        /// <summary> Gets or sets the report confidence. </summary>
        public string ReportConfidence { get; set; }
        /// <summary> Gets or sets the exploitability score. </summary>
        public float? ExploitabilityScore { get; set; }
        /// <summary> Gets or sets the impact score. </summary>
        public float? ImpactScore { get; set; }
    }
}
