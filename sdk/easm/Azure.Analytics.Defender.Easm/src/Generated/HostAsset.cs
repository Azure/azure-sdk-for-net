// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> The HostAsset. </summary>
    public partial class HostAsset
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="HostAsset"/>. </summary>
        internal HostAsset()
        {
            IpAddresses = new ChangeTrackingList<ObservedString>();
            WebComponents = new ChangeTrackingList<WebComponent>();
            Headers = new ChangeTrackingList<ObservedHeader>();
            Attributes = new ChangeTrackingList<Attribute>();
            Cookies = new ChangeTrackingList<Cookie>();
            SslCerts = new ChangeTrackingList<SslCertAsset>();
            ParentHosts = new ChangeTrackingList<ObservedString>();
            ChildHosts = new ChangeTrackingList<ObservedString>();
            Services = new ChangeTrackingList<Service>();
            Cnames = new ChangeTrackingList<ObservedString>();
            Sources = new ChangeTrackingList<Source>();
            ResourceUrls = new ChangeTrackingList<ResourceUrl>();
            ScanMetadata = new ChangeTrackingList<ScanMetadata>();
            Asns = new ChangeTrackingList<ObservedLong>();
            IpBlocks = new ChangeTrackingList<IpBlock>();
            ResponseBodies = new ChangeTrackingList<ObservedString>();
            NsRecord = new ChangeTrackingList<ObservedBoolean>();
            MxRecord = new ChangeTrackingList<ObservedBoolean>();
            Webserver = new ChangeTrackingList<ObservedBoolean>();
            Location = new ChangeTrackingList<ObservedLocation>();
            Nxdomain = new ChangeTrackingList<ObservedBoolean>();
            SslServerConfig = new ChangeTrackingList<SslServerConfig>();
            IsWildcard = new ChangeTrackingList<ObservedBoolean>();
            Banners = new ChangeTrackingList<Banner>();
            Ipv4 = new ChangeTrackingList<ObservedBoolean>();
            Ipv6 = new ChangeTrackingList<ObservedBoolean>();
        }

        /// <summary> Initializes a new instance of <see cref="HostAsset"/>. </summary>
        /// <param name="host"></param>
        /// <param name="domain"></param>
        /// <param name="ipAddresses"></param>
        /// <param name="webComponents"></param>
        /// <param name="headers"></param>
        /// <param name="attributes"></param>
        /// <param name="cookies"></param>
        /// <param name="sslCerts"></param>
        /// <param name="parentHosts"></param>
        /// <param name="childHosts"></param>
        /// <param name="hostCore"></param>
        /// <param name="services"></param>
        /// <param name="cnames"></param>
        /// <param name="sources"></param>
        /// <param name="firstSeen"></param>
        /// <param name="lastSeen"></param>
        /// <param name="count"></param>
        /// <param name="resourceUrls"></param>
        /// <param name="scanMetadata"></param>
        /// <param name="asns"></param>
        /// <param name="ipBlocks"></param>
        /// <param name="responseBodies"></param>
        /// <param name="domainAsset"></param>
        /// <param name="nsRecord"></param>
        /// <param name="mxRecord"></param>
        /// <param name="webserver"></param>
        /// <param name="location"></param>
        /// <param name="nxdomain"></param>
        /// <param name="sslServerConfig"></param>
        /// <param name="isWildcard"></param>
        /// <param name="banners"></param>
        /// <param name="ipv4"></param>
        /// <param name="ipv6"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal HostAsset(string host, string domain, IReadOnlyList<ObservedString> ipAddresses, IReadOnlyList<WebComponent> webComponents, IReadOnlyList<ObservedHeader> headers, IReadOnlyList<Attribute> attributes, IReadOnlyList<Cookie> cookies, IReadOnlyList<SslCertAsset> sslCerts, IReadOnlyList<ObservedString> parentHosts, IReadOnlyList<ObservedString> childHosts, HostCore hostCore, IReadOnlyList<Service> services, IReadOnlyList<ObservedString> cnames, IReadOnlyList<Source> sources, DateTimeOffset? firstSeen, DateTimeOffset? lastSeen, long? count, IReadOnlyList<ResourceUrl> resourceUrls, IReadOnlyList<ScanMetadata> scanMetadata, IReadOnlyList<ObservedLong> asns, IReadOnlyList<IpBlock> ipBlocks, IReadOnlyList<ObservedString> responseBodies, DomainAsset domainAsset, IReadOnlyList<ObservedBoolean> nsRecord, IReadOnlyList<ObservedBoolean> mxRecord, IReadOnlyList<ObservedBoolean> webserver, IReadOnlyList<ObservedLocation> location, IReadOnlyList<ObservedBoolean> nxdomain, IReadOnlyList<SslServerConfig> sslServerConfig, IReadOnlyList<ObservedBoolean> isWildcard, IReadOnlyList<Banner> banners, IReadOnlyList<ObservedBoolean> ipv4, IReadOnlyList<ObservedBoolean> ipv6, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Host = host;
            Domain = domain;
            IpAddresses = ipAddresses;
            WebComponents = webComponents;
            Headers = headers;
            Attributes = attributes;
            Cookies = cookies;
            SslCerts = sslCerts;
            ParentHosts = parentHosts;
            ChildHosts = childHosts;
            HostCore = hostCore;
            Services = services;
            Cnames = cnames;
            Sources = sources;
            FirstSeen = firstSeen;
            LastSeen = lastSeen;
            Count = count;
            ResourceUrls = resourceUrls;
            ScanMetadata = scanMetadata;
            Asns = asns;
            IpBlocks = ipBlocks;
            ResponseBodies = responseBodies;
            DomainAsset = domainAsset;
            NsRecord = nsRecord;
            MxRecord = mxRecord;
            Webserver = webserver;
            Location = location;
            Nxdomain = nxdomain;
            SslServerConfig = sslServerConfig;
            IsWildcard = isWildcard;
            Banners = banners;
            Ipv4 = ipv4;
            Ipv6 = ipv6;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the host. </summary>
        public string Host { get; }
        /// <summary> Gets the domain. </summary>
        public string Domain { get; }
        /// <summary> Gets the ip addresses. </summary>
        public IReadOnlyList<ObservedString> IpAddresses { get; }
        /// <summary> Gets the web components. </summary>
        public IReadOnlyList<WebComponent> WebComponents { get; }
        /// <summary> Gets the headers. </summary>
        public IReadOnlyList<ObservedHeader> Headers { get; }
        /// <summary> Gets the attributes. </summary>
        public IReadOnlyList<Attribute> Attributes { get; }
        /// <summary> Gets the cookies. </summary>
        public IReadOnlyList<Cookie> Cookies { get; }
        /// <summary> Gets the ssl certs. </summary>
        public IReadOnlyList<SslCertAsset> SslCerts { get; }
        /// <summary> Gets the parent hosts. </summary>
        public IReadOnlyList<ObservedString> ParentHosts { get; }
        /// <summary> Gets the child hosts. </summary>
        public IReadOnlyList<ObservedString> ChildHosts { get; }
        /// <summary> Gets the host core. </summary>
        public HostCore HostCore { get; }
        /// <summary> Gets the services. </summary>
        public IReadOnlyList<Service> Services { get; }
        /// <summary> Gets the cnames. </summary>
        public IReadOnlyList<ObservedString> Cnames { get; }
        /// <summary> Gets the sources. </summary>
        public IReadOnlyList<Source> Sources { get; }
        /// <summary> Gets the first seen. </summary>
        public DateTimeOffset? FirstSeen { get; }
        /// <summary> Gets the last seen. </summary>
        public DateTimeOffset? LastSeen { get; }
        /// <summary> Gets the count. </summary>
        public long? Count { get; }
        /// <summary> Gets the resource urls. </summary>
        public IReadOnlyList<ResourceUrl> ResourceUrls { get; }
        /// <summary> Gets the scan metadata. </summary>
        public IReadOnlyList<ScanMetadata> ScanMetadata { get; }
        /// <summary> Gets the asns. </summary>
        public IReadOnlyList<ObservedLong> Asns { get; }
        /// <summary> Gets the ip blocks. </summary>
        public IReadOnlyList<IpBlock> IpBlocks { get; }
        /// <summary> Gets the response bodies. </summary>
        public IReadOnlyList<ObservedString> ResponseBodies { get; }
        /// <summary> Gets the domain asset. </summary>
        public DomainAsset DomainAsset { get; }
        /// <summary> Gets the ns record. </summary>
        public IReadOnlyList<ObservedBoolean> NsRecord { get; }
        /// <summary> Gets the mx record. </summary>
        public IReadOnlyList<ObservedBoolean> MxRecord { get; }
        /// <summary> Gets the webserver. </summary>
        public IReadOnlyList<ObservedBoolean> Webserver { get; }
        /// <summary> Gets the location. </summary>
        public IReadOnlyList<ObservedLocation> Location { get; }
        /// <summary> Gets the nxdomain. </summary>
        public IReadOnlyList<ObservedBoolean> Nxdomain { get; }
        /// <summary> Gets the ssl server config. </summary>
        public IReadOnlyList<SslServerConfig> SslServerConfig { get; }
        /// <summary> Gets the is wildcard. </summary>
        public IReadOnlyList<ObservedBoolean> IsWildcard { get; }
        /// <summary> Gets the banners. </summary>
        public IReadOnlyList<Banner> Banners { get; }
        /// <summary> Gets the ipv 4. </summary>
        public IReadOnlyList<ObservedBoolean> Ipv4 { get; }
        /// <summary> Gets the ipv 6. </summary>
        public IReadOnlyList<ObservedBoolean> Ipv6 { get; }
    }
}
