// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> A list of asset chain sources. </summary>
    public readonly partial struct AssetChainSource : IEquatable<AssetChainSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssetChainSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssetChainSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DISCOGROUPValue = "DISCO_GROUP";
        private const string ASSETValue = "ASSET";

        /// <summary> discovery group. </summary>
        public static AssetChainSource DISCOGROUP { get; } = new AssetChainSource(DISCOGROUPValue);
        /// <summary> asset. </summary>
        public static AssetChainSource ASSET { get; } = new AssetChainSource(ASSETValue);
        /// <summary> Determines if two <see cref="AssetChainSource"/> values are the same. </summary>
        public static bool operator ==(AssetChainSource left, AssetChainSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssetChainSource"/> values are not the same. </summary>
        public static bool operator !=(AssetChainSource left, AssetChainSource right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AssetChainSource"/>. </summary>
        public static implicit operator AssetChainSource(string value) => new AssetChainSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssetChainSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssetChainSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
