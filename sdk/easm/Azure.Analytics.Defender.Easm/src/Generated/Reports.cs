// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Defender.Easm
{
    // Data plane generated sub-client.
    /// <summary> Provides access to reporting data. </summary>
    public partial class Reports
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://easm.defender.microsoft.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _subscriptionId;
        private readonly string _resourceGroupName;
        private readonly string _workspaceName;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Reports for mocking. </summary>
        protected Reports()
        {
        }

        /// <summary> Initializes a new instance of Reports. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> The endpoint hosting the requested resource. For example, https://{region}.easm.defender.microsoft.com. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="resourceGroupName"> The name of the Resource Group. </param>
        /// <param name="workspaceName"> The name of the Workspace. </param>
        /// <param name="apiVersion"> The <see cref="string"/> to use. </param>
        internal Reports(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string subscriptionId, string resourceGroupName, string workspaceName, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _subscriptionId = subscriptionId;
            _resourceGroupName = resourceGroupName;
            _workspaceName = workspaceName;
            _apiVersion = apiVersion;
        }

        /// <summary> Get billable assets summary for the workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetBillableAsync(CancellationToken)']/*" />
        public virtual async Task<Response<ReportBillableAssetSummaryResult>> GetBillableAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetBillableAsync(context).ConfigureAwait(false);
            return Response.FromValue(ReportBillableAssetSummaryResult.FromResponse(response), response);
        }

        /// <summary> Get billable assets summary for the workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetBillable(CancellationToken)']/*" />
        public virtual Response<ReportBillableAssetSummaryResult> GetBillable(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetBillable(context);
            return Response.FromValue(ReportBillableAssetSummaryResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get billable assets summary for the workspace.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBillableAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetBillableAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetBillableAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("Reports.GetBillable");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBillableRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get billable assets summary for the workspace.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBillable(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetBillable(RequestContext)']/*" />
        public virtual Response GetBillable(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("Reports.GetBillable");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBillableRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the most recent snapshot of asset summary values for the snapshot request. </summary>
        /// <param name="reportAssetSnapshotRequest"> A request body used to retrieve an asset report snapshot. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reportAssetSnapshotRequest"/> is null. </exception>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetSnapshotAsync(ReportAssetSnapshotRequest,CancellationToken)']/*" />
        public virtual async Task<Response<ReportAssetSnapshotResult>> GetSnapshotAsync(ReportAssetSnapshotRequest reportAssetSnapshotRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(reportAssetSnapshotRequest, nameof(reportAssetSnapshotRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = reportAssetSnapshotRequest.ToRequestContent();
            Response response = await GetSnapshotAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(ReportAssetSnapshotResult.FromResponse(response), response);
        }

        /// <summary> Get the most recent snapshot of asset summary values for the snapshot request. </summary>
        /// <param name="reportAssetSnapshotRequest"> A request body used to retrieve an asset report snapshot. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reportAssetSnapshotRequest"/> is null. </exception>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetSnapshot(ReportAssetSnapshotRequest,CancellationToken)']/*" />
        public virtual Response<ReportAssetSnapshotResult> GetSnapshot(ReportAssetSnapshotRequest reportAssetSnapshotRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(reportAssetSnapshotRequest, nameof(reportAssetSnapshotRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = reportAssetSnapshotRequest.ToRequestContent();
            Response response = GetSnapshot(content, context);
            return Response.FromValue(ReportAssetSnapshotResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get the most recent snapshot of asset summary values for the snapshot request.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSnapshotAsync(ReportAssetSnapshotRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetSnapshotAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> GetSnapshotAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Reports.GetSnapshot");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSnapshotRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the most recent snapshot of asset summary values for the snapshot request.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSnapshot(ReportAssetSnapshotRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetSnapshot(RequestContent,RequestContext)']/*" />
        public virtual Response GetSnapshot(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Reports.GetSnapshot");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSnapshotRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get asset summary details for the summary request. </summary>
        /// <param name="reportAssetSummaryRequest"> A request body used to retrieve summary asset information. One and only one collection of summary identifiers must be provided: filters, metrics, or metricCategories. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reportAssetSummaryRequest"/> is null. </exception>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetSummaryAsync(ReportAssetSummaryRequest,CancellationToken)']/*" />
        public virtual async Task<Response<ReportAssetSummaryResult>> GetSummaryAsync(ReportAssetSummaryRequest reportAssetSummaryRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(reportAssetSummaryRequest, nameof(reportAssetSummaryRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = reportAssetSummaryRequest.ToRequestContent();
            Response response = await GetSummaryAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(ReportAssetSummaryResult.FromResponse(response), response);
        }

        /// <summary> Get asset summary details for the summary request. </summary>
        /// <param name="reportAssetSummaryRequest"> A request body used to retrieve summary asset information. One and only one collection of summary identifiers must be provided: filters, metrics, or metricCategories. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reportAssetSummaryRequest"/> is null. </exception>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetSummary(ReportAssetSummaryRequest,CancellationToken)']/*" />
        public virtual Response<ReportAssetSummaryResult> GetSummary(ReportAssetSummaryRequest reportAssetSummaryRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(reportAssetSummaryRequest, nameof(reportAssetSummaryRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = reportAssetSummaryRequest.ToRequestContent();
            Response response = GetSummary(content, context);
            return Response.FromValue(ReportAssetSummaryResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get asset summary details for the summary request.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSummaryAsync(ReportAssetSummaryRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetSummaryAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> GetSummaryAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Reports.GetSummary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSummaryRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get asset summary details for the summary request.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSummary(ReportAssetSummaryRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Reports.xml" path="doc/members/member[@name='GetSummary(RequestContent,RequestContext)']/*" />
        public virtual Response GetSummary(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Reports.GetSummary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSummaryRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetBillableRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/subscriptions/", false);
            uri.AppendRaw(_subscriptionId, true);
            uri.AppendRaw("/resourceGroups/", false);
            uri.AppendRaw(_resourceGroupName, true);
            uri.AppendRaw("/workspaces/", false);
            uri.AppendRaw(_workspaceName, true);
            uri.AppendPath("/reports/assets:getBillable", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSnapshotRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/subscriptions/", false);
            uri.AppendRaw(_subscriptionId, true);
            uri.AppendRaw("/resourceGroups/", false);
            uri.AppendRaw(_resourceGroupName, true);
            uri.AppendRaw("/workspaces/", false);
            uri.AppendRaw(_workspaceName, true);
            uri.AppendPath("/reports/assets:getSnapshot", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSummaryRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/subscriptions/", false);
            uri.AppendRaw(_subscriptionId, true);
            uri.AppendRaw("/resourceGroups/", false);
            uri.AppendRaw(_resourceGroupName, true);
            uri.AppendRaw("/workspaces/", false);
            uri.AppendRaw(_workspaceName, true);
            uri.AppendPath("/reports/assets:getSummary", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
