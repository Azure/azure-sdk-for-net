// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> A list of observation priorities. </summary>
    public readonly partial struct ObservationPriority : IEquatable<ObservationPriority>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ObservationPriority"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ObservationPriority(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HighValue = "high";
        private const string MediumValue = "medium";
        private const string LowValue = "low";
        private const string NoneValue = "none";

        /// <summary> high. </summary>
        public static ObservationPriority High { get; } = new ObservationPriority(HighValue);
        /// <summary> medium. </summary>
        public static ObservationPriority Medium { get; } = new ObservationPriority(MediumValue);
        /// <summary> low. </summary>
        public static ObservationPriority Low { get; } = new ObservationPriority(LowValue);
        /// <summary> none. </summary>
        public static ObservationPriority None { get; } = new ObservationPriority(NoneValue);
        /// <summary> Determines if two <see cref="ObservationPriority"/> values are the same. </summary>
        public static bool operator ==(ObservationPriority left, ObservationPriority right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ObservationPriority"/> values are not the same. </summary>
        public static bool operator !=(ObservationPriority left, ObservationPriority right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ObservationPriority"/>. </summary>
        public static implicit operator ObservationPriority(string value) => new ObservationPriority(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ObservationPriority other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ObservationPriority other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
