// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> A list of delta detail type. </summary>
    public readonly partial struct DeltaDetailType : IEquatable<DeltaDetailType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DeltaDetailType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeltaDetailType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AddedValue = "added";
        private const string RemovedValue = "removed";

        /// <summary> added. </summary>
        public static DeltaDetailType Added { get; } = new DeltaDetailType(AddedValue);
        /// <summary> removed. </summary>
        public static DeltaDetailType Removed { get; } = new DeltaDetailType(RemovedValue);
        /// <summary> Determines if two <see cref="DeltaDetailType"/> values are the same. </summary>
        public static bool operator ==(DeltaDetailType left, DeltaDetailType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeltaDetailType"/> values are not the same. </summary>
        public static bool operator !=(DeltaDetailType left, DeltaDetailType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DeltaDetailType"/>. </summary>
        public static implicit operator DeltaDetailType(string value) => new DeltaDetailType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeltaDetailType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeltaDetailType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
