// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.Defender.Easm
{
    public partial class SslCertAsset
    {
        internal static SslCertAsset DeserializeSslCertAsset(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> sha1 = default;
            Optional<IReadOnlyList<string>> subjectCommonNames = default;
            Optional<IReadOnlyList<string>> organizations = default;
            Optional<IReadOnlyList<string>> organizationalUnits = default;
            Optional<IReadOnlyList<string>> issuerCommonNames = default;
            Optional<string> sigAlgName = default;
            Optional<DateTimeOffset> invalidAfter = default;
            Optional<string> serialNumber = default;
            Optional<IReadOnlyList<string>> subjectAlternativeNames = default;
            Optional<IReadOnlyList<string>> issuerAlternativeNames = default;
            Optional<IReadOnlyList<Source>> sources = default;
            Optional<DateTimeOffset> firstSeen = default;
            Optional<DateTimeOffset> lastSeen = default;
            Optional<long> count = default;
            Optional<DateTimeOffset> invalidBefore = default;
            Optional<int> keySize = default;
            Optional<string> keyAlgorithm = default;
            Optional<IReadOnlyList<string>> subjectLocality = default;
            Optional<IReadOnlyList<string>> subjectState = default;
            Optional<IReadOnlyList<string>> subjectCountry = default;
            Optional<IReadOnlyList<string>> issuerLocality = default;
            Optional<IReadOnlyList<string>> issuerState = default;
            Optional<IReadOnlyList<string>> issuerCountry = default;
            Optional<IReadOnlyList<string>> subjectOrganizations = default;
            Optional<IReadOnlyList<string>> subjectOrganizationalUnits = default;
            Optional<IReadOnlyList<string>> issuerOrganizations = default;
            Optional<IReadOnlyList<string>> issuerOrganizationalUnits = default;
            Optional<int> version = default;
            Optional<bool> certificateAuthority = default;
            Optional<bool> selfSigned = default;
            Optional<string> sigAlgOid = default;
            Optional<bool> recent = default;
            Optional<SslCertAssetValidationType> validationType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sha1"u8))
                {
                    sha1 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subjectCommonNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    subjectCommonNames = array;
                    continue;
                }
                if (property.NameEquals("organizations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    organizations = array;
                    continue;
                }
                if (property.NameEquals("organizationalUnits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    organizationalUnits = array;
                    continue;
                }
                if (property.NameEquals("issuerCommonNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    issuerCommonNames = array;
                    continue;
                }
                if (property.NameEquals("sigAlgName"u8))
                {
                    sigAlgName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("invalidAfter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    invalidAfter = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("serialNumber"u8))
                {
                    serialNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subjectAlternativeNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    subjectAlternativeNames = array;
                    continue;
                }
                if (property.NameEquals("issuerAlternativeNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    issuerAlternativeNames = array;
                    continue;
                }
                if (property.NameEquals("sources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Source> array = new List<Source>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Source.DeserializeSource(item));
                    }
                    sources = array;
                    continue;
                }
                if (property.NameEquals("firstSeen"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    firstSeen = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastSeen"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSeen = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("count"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    count = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("invalidBefore"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    invalidBefore = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("keySize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keySize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("keyAlgorithm"u8))
                {
                    keyAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subjectLocality"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    subjectLocality = array;
                    continue;
                }
                if (property.NameEquals("subjectState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    subjectState = array;
                    continue;
                }
                if (property.NameEquals("subjectCountry"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    subjectCountry = array;
                    continue;
                }
                if (property.NameEquals("issuerLocality"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    issuerLocality = array;
                    continue;
                }
                if (property.NameEquals("issuerState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    issuerState = array;
                    continue;
                }
                if (property.NameEquals("issuerCountry"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    issuerCountry = array;
                    continue;
                }
                if (property.NameEquals("subjectOrganizations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    subjectOrganizations = array;
                    continue;
                }
                if (property.NameEquals("subjectOrganizationalUnits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    subjectOrganizationalUnits = array;
                    continue;
                }
                if (property.NameEquals("issuerOrganizations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    issuerOrganizations = array;
                    continue;
                }
                if (property.NameEquals("issuerOrganizationalUnits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    issuerOrganizationalUnits = array;
                    continue;
                }
                if (property.NameEquals("version"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    version = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("certificateAuthority"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    certificateAuthority = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("selfSigned"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    selfSigned = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sigAlgOid"u8))
                {
                    sigAlgOid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recent = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("validationType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validationType = new SslCertAssetValidationType(property.Value.GetString());
                    continue;
                }
            }
            return new SslCertAsset(sha1.Value, Optional.ToList(subjectCommonNames), Optional.ToList(organizations), Optional.ToList(organizationalUnits), Optional.ToList(issuerCommonNames), sigAlgName.Value, Optional.ToNullable(invalidAfter), serialNumber.Value, Optional.ToList(subjectAlternativeNames), Optional.ToList(issuerAlternativeNames), Optional.ToList(sources), Optional.ToNullable(firstSeen), Optional.ToNullable(lastSeen), Optional.ToNullable(count), Optional.ToNullable(invalidBefore), Optional.ToNullable(keySize), keyAlgorithm.Value, Optional.ToList(subjectLocality), Optional.ToList(subjectState), Optional.ToList(subjectCountry), Optional.ToList(issuerLocality), Optional.ToList(issuerState), Optional.ToList(issuerCountry), Optional.ToList(subjectOrganizations), Optional.ToList(subjectOrganizationalUnits), Optional.ToList(issuerOrganizations), Optional.ToList(issuerOrganizationalUnits), Optional.ToNullable(version), Optional.ToNullable(certificateAuthority), Optional.ToNullable(selfSigned), sigAlgOid.Value, Optional.ToNullable(recent), Optional.ToNullable(validationType));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static SslCertAsset FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeSslCertAsset(document.RootElement);
        }
    }
}
