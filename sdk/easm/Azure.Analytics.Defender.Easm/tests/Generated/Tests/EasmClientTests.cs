// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Defender.Easm.Tests
{
    public partial class EasmClientTests : AnalyticsDefenderEasmTestBase
    {
        public EasmClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AssetResource_UpdateAssets_AssetsUpdateAssets()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                state = "confirmed",
                externalId = "contosoInternalId",
                labels = new
                {
                    contosoLabel = true,
                },
            });
            Response response = await client.UpdateAssetsAsync("state%20%3D%20%22confirmed%22%20AND%20name%20%5E%3D%20%22contoso.com%22", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AssetResource_UpdateAssets_AssetsUpdateAssets_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            AssetUpdatePayload body = new AssetUpdatePayload
            {
                State = AssetUpdateState.Confirmed,
                ExternalId = "contosoInternalId",
                Labels =
{
["contosoLabel"] = true
},
            };
            Response<TaskResource> response = await client.UpdateAssetsAsync("state%20%3D%20%22confirmed%22%20AND%20name%20%5E%3D%20%22contoso.com%22", body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AssetResource_GetAssetResource_AssetsGetAssetResource()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response response = await client.GetAssetResourceAsync("aG9zdCQkY29udG9zby5jb20", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AssetResource_GetAssetResource_AssetsGetAssetResource_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response<AssetResource> response = await client.GetAssetResourceAsync("aG9zdCQkY29udG9zby5jb20");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_ValidateDataConnection_DataConnectionsValidateDataConnection()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "logAnalytics",
                properties = new
                {
                    apiKey = "ThisisApiKey",
                    workspaceId = "ThisisWorkspaceId",
                },
                frequency = "weekly",
                frequencyOffset = 1,
                name = "ThisisaDataConnection",
            });
            Response response = await client.ValidateDataConnectionAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_ValidateDataConnection_DataConnectionsValidateDataConnection_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            DataConnectionPayload body = new LogAnalyticsDataConnectionPayload(new LogAnalyticsDataConnectionProperties
            {
                ApiKey = "ThisisApiKey",
                WorkspaceId = "ThisisWorkspaceId",
            })
            {
                Name = "ThisisaDataConnection",
                Frequency = DataConnectionFrequency.Weekly,
                FrequencyOffset = 1,
            };
            Response<ValidateResult> response = await client.ValidateDataConnectionAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DataConnection_GetDataConnection_DataConnectionsGetDataConnection()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response response = await client.GetDataConnectionAsync("ThisisaDataConnection", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DataConnection_GetDataConnection_DataConnectionsGetDataConnection_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response<DataConnection> response = await client.GetDataConnectionAsync("ThisisaDataConnection");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DataConnection_CreateOrReplaceDataConnection_DataConnectionsCreateOrReplaceDataConnection()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "logAnalytics",
                properties = new
                {
                    apiKey = "ThisisApiKey",
                    workspaceId = "ThisisWorkspaceId",
                },
                frequency = "weekly",
                frequencyOffset = 1,
            });
            Response response = await client.CreateOrReplaceDataConnectionAsync("ThisisaDataConnection", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DataConnection_CreateOrReplaceDataConnection_DataConnectionsCreateOrReplaceDataConnection_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            DataConnectionPayload body = new LogAnalyticsDataConnectionPayload(new LogAnalyticsDataConnectionProperties
            {
                ApiKey = "ThisisApiKey",
                WorkspaceId = "ThisisWorkspaceId",
            })
            {
                Frequency = DataConnectionFrequency.Weekly,
                FrequencyOffset = 1,
            };
            Response<DataConnection> response = await client.CreateOrReplaceDataConnectionAsync("ThisisaDataConnection", body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DataConnection_DeleteDataConnection_DataConnectionsDeleteDataConnection()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response response = await client.DeleteDataConnectionAsync("ThisisaDataConnection");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_ValidateDiscoveryGroup_DiscoveryGroupsValidateDiscoGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                description = "This is a disco group",
                frequencyMilliseconds = 604800000L,
                tier = "advanced",
                seeds = new object[]
            {
new
{
name = "thisisatest.microsoft.com",
kind = "host",
}
            },
            });
            Response response = await client.ValidateDiscoveryGroupAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_ValidateDiscoveryGroup_DiscoveryGroupsValidateDiscoGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            DiscoveryGroupPayload body = new DiscoveryGroupPayload
            {
                Description = "This is a disco group",
                Tier = "advanced",
                FrequencyMilliseconds = 604800000L,
                Seeds = {new DiscoverySource
{
Kind = DiscoverySourceKind.Host,
Name = "thisisatest.microsoft.com",
}},
            };
            Response<ValidateResult> response = await client.ValidateDiscoveryGroupAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DiscoGroup_GetDiscoveryGroup_DiscoveryGroupsGetDiscoGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response response = await client.GetDiscoveryGroupAsync("ThisisaDiscoGroup", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DiscoGroup_GetDiscoveryGroup_DiscoveryGroupsGetDiscoGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response<DiscoveryGroup> response = await client.GetDiscoveryGroupAsync("ThisisaDiscoGroup");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DiscoGroup_CreateOrReplaceDiscoveryGroup_DiscoveryGroupsCreateOrReplaceDiscoGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                description = "This is a disco group",
                frequencyMilliseconds = 604800000L,
                tier = "advanced",
                seeds = new object[]
            {
new
{
name = "thisisatest.microsoft.com",
kind = "host",
}
            },
            });
            Response response = await client.CreateOrReplaceDiscoveryGroupAsync("ThisisaDiscoGroup", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DiscoGroup_CreateOrReplaceDiscoveryGroup_DiscoveryGroupsCreateOrReplaceDiscoGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            DiscoveryGroupPayload body = new DiscoveryGroupPayload
            {
                Description = "This is a disco group",
                Tier = "advanced",
                FrequencyMilliseconds = 604800000L,
                Seeds = {new DiscoverySource
{
Kind = DiscoverySourceKind.Host,
Name = "thisisatest.microsoft.com",
}},
            };
            Response<DiscoveryGroup> response = await client.CreateOrReplaceDiscoveryGroupAsync("ThisisaDiscoGroup", body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_RunDiscoveryGroup_DiscoveryGroupsRunDiscoGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response response = await client.RunDiscoveryGroupAsync("ThisisaDiscoGroup");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DiscoTemplate_GetDiscoveryTemplate_DiscoveryTemplatesGetDiscoTemplate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response response = await client.GetDiscoveryTemplateAsync("12345", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DiscoTemplate_GetDiscoveryTemplate_DiscoveryTemplatesGetDiscoTemplate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response<DiscoveryTemplate> response = await client.GetDiscoveryTemplateAsync("12345");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_GetBillable_ReportsGetBillable()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response response = await client.GetBillableAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_GetBillable_ReportsGetBillable_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response<ReportBillableAssetSummaryResult> response = await client.GetBillableAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_GetSnapshot_ReportsGetSnapshot()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metric = "site_status_active",
                page = 0,
                size = 5,
            });
            Response response = await client.GetSnapshotAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_GetSnapshot_ReportsGetSnapshot_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            ReportAssetSnapshotPayload body = new ReportAssetSnapshotPayload
            {
                Metric = "site_status_active",
                Size = 5,
                Page = 0,
            };
            Response<ReportAssetSnapshotResult> response = await client.GetSnapshotAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_GetSummary_ReportsGetSummary()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                filters = new object[]
            {
"state = \"confirmed\" AND kind = \"domain\"",
"state = \"confirmed\" AND kind = \"host\"",
"state = \"confirmed\" AND kind = \"page\""
            },
            });
            Response response = await client.GetSummaryAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_GetSummary_ReportsGetSummary_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            ReportAssetSummaryPayload body = new ReportAssetSummaryPayload
            {
                Filters = { "state = \"confirmed\" AND kind = \"domain\"", "state = \"confirmed\" AND kind = \"host\"", "state = \"confirmed\" AND kind = \"page\"" },
            };
            Response<ReportAssetSummaryResult> response = await client.GetSummaryAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SavedFilter_GetSavedFilter_SavedFiltersGetSavedFilter()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response response = await client.GetSavedFilterAsync("ThisisaSavedFilter", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SavedFilter_GetSavedFilter_SavedFiltersGetSavedFilter_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response<SavedFilter> response = await client.GetSavedFilterAsync("ThisisaSavedFilter");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SavedFilter_CreateOrReplaceSavedFilter_SavedFiltersCreateOrReplaceSavedFilter()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                filter = "state IN (\"confirmed\")",
                description = "This is a saved filter",
            });
            Response response = await client.CreateOrReplaceSavedFilterAsync("ThisisaSavedFilter", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SavedFilter_CreateOrReplaceSavedFilter_SavedFiltersCreateOrReplaceSavedFilter_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            SavedFilterPayload body = new SavedFilterPayload("state IN (\"confirmed\")", "This is a saved filter");
            Response<SavedFilter> response = await client.CreateOrReplaceSavedFilterAsync("ThisisaSavedFilter", body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SavedFilter_DeleteSavedFilter_SavedFiltersDeleteSavedFilter()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response response = await client.DeleteSavedFilterAsync("ThisisaSavedFilter");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Task_GetTask_TasksGetTask()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response response = await client.GetTaskAsync("ThisisaTaskId", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Task_GetTask_TasksGetTask_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response<TaskResource> response = await client.GetTaskAsync("ThisisaTaskId");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_CancelTask_TasksCancelTask()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response response = await client.CancelTaskAsync("ThisisaTaskId", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_CancelTask_TasksCancelTask_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            Response<TaskResource> response = await client.CancelTaskAsync("ThisisaTaskId");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AssetResource_GetAssetResources_AssetsListAssetResource()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAssetResourcesAsync("state%20%3D%20%22confirmed%22", null, 0, 5, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AssetResource_GetAssetResources_AssetsListAssetResource_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (AssetResource item in client.GetAssetResourcesAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DataConnection_GetDataConnections_DataConnectionsListDataConnection()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDataConnectionsAsync(null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DataConnection_GetDataConnections_DataConnectionsListDataConnection_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (DataConnection item in client.GetDataConnectionsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DiscoGroup_GetDiscoveryGroups_DiscoveryGroupsListDiscoGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDiscoveryGroupsAsync(null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DiscoGroup_GetDiscoveryGroups_DiscoveryGroupsListDiscoGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (DiscoveryGroup item in client.GetDiscoveryGroupsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_GetDiscoveryGroupRuns_DiscoveryGroupsListRuns()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDiscoveryGroupRunsAsync("ThisisaDiscoGroup", null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EasmClient_GetDiscoveryGroupRuns_DiscoveryGroupsListRuns_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (DiscoveryRunResult item in client.GetDiscoveryGroupRunsAsync("ThisisaDiscoGroup"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DiscoTemplate_GetDiscoveryTemplates_DiscoveryTemplatesListDiscoTemplate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDiscoveryTemplatesAsync(null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DiscoTemplate_GetDiscoveryTemplates_DiscoveryTemplatesListDiscoTemplate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (DiscoveryTemplate item in client.GetDiscoveryTemplatesAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SavedFilter_GetSavedFilters_SavedFiltersListSavedFilter()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSavedFiltersAsync(null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SavedFilter_GetSavedFilters_SavedFiltersListSavedFilter_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (SavedFilter item in client.GetSavedFiltersAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Task_GetTasks_TasksListTask()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTasksAsync(null, null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Task_GetTasks_TasksListTask_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = CreateEasmClient(endpoint, credential);

            await foreach (TaskResource item in client.GetTasksAsync())
            {
            }
        }
    }
}
