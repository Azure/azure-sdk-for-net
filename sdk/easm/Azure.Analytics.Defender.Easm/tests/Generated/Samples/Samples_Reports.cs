// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Defender.Easm;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Defender.Easm.Samples
{
    public partial class Samples_Reports
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetBillable_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = client.GetBillable(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetBillable_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = await client.GetBillableAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetBillable_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response<ReportBillableAssetSummaryResult> response = client.GetBillable();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetBillable_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response<ReportBillableAssetSummaryResult> response = await client.GetBillableAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetBillable_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = client.GetBillable(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("count").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetBillable_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = await client.GetBillableAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("count").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetBillable_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response<ReportBillableAssetSummaryResult> response = client.GetBillable();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetBillable_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response<ReportBillableAssetSummaryResult> response = await client.GetBillableAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetSnapshot_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.GetSnapshot(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetSnapshot_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.GetSnapshotAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetSnapshot_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            ReportAssetSnapshotRequest reportAssetSnapshotRequest = new ReportAssetSnapshotRequest();
            Response<ReportAssetSnapshotResult> response = client.GetSnapshot(reportAssetSnapshotRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetSnapshot_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            ReportAssetSnapshotRequest reportAssetSnapshotRequest = new ReportAssetSnapshotRequest();
            Response<ReportAssetSnapshotResult> response = await client.GetSnapshotAsync(reportAssetSnapshotRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetSnapshot_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metric = "<metric>",
                labelName = "<labelName>",
                size = 1234,
                page = 1234,
            });
            Response response = client.GetSnapshot(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("totalElements").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("mark").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("uuid").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("externalId").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("wildcard").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("discoGroupName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetSnapshot_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metric = "<metric>",
                labelName = "<labelName>",
                size = 1234,
                page = 1234,
            });
            Response response = await client.GetSnapshotAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("totalElements").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("mark").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("uuid").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("externalId").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("wildcard").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("discoGroupName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetSnapshot_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            ReportAssetSnapshotRequest reportAssetSnapshotRequest = new ReportAssetSnapshotRequest
            {
                Metric = "<metric>",
                LabelName = "<labelName>",
                Size = 1234,
                Page = 1234,
            };
            Response<ReportAssetSnapshotResult> response = client.GetSnapshot(reportAssetSnapshotRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetSnapshot_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            ReportAssetSnapshotRequest reportAssetSnapshotRequest = new ReportAssetSnapshotRequest
            {
                Metric = "<metric>",
                LabelName = "<labelName>",
                Size = 1234,
                Page = 1234,
            };
            Response<ReportAssetSnapshotResult> response = await client.GetSnapshotAsync(reportAssetSnapshotRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetSummary_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.GetSummary(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetSummary_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.GetSummaryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetSummary_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            ReportAssetSummaryRequest reportAssetSummaryRequest = new ReportAssetSummaryRequest();
            Response<ReportAssetSummaryResult> response = client.GetSummary(reportAssetSummaryRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetSummary_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            ReportAssetSummaryRequest reportAssetSummaryRequest = new ReportAssetSummaryRequest();
            Response<ReportAssetSummaryResult> response = await client.GetSummaryAsync(reportAssetSummaryRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetSummary_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metricCategories = new object[]
            {
"<metricCategories>"
            },
                metrics = new object[]
            {
"<metrics>"
            },
                filters = new object[]
            {
"<filters>"
            },
                groupBy = "<groupBy>",
                segmentBy = "<segmentBy>",
                labelName = "<labelName>",
            });
            Response response = client.GetSummary(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metricCategory").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("link").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetSummary_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metricCategories = new object[]
            {
"<metricCategories>"
            },
                metrics = new object[]
            {
"<metrics>"
            },
                filters = new object[]
            {
"<filters>"
            },
                groupBy = "<groupBy>",
                segmentBy = "<segmentBy>",
                labelName = "<labelName>",
            });
            Response response = await client.GetSummaryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metricCategory").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("link").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reports_GetSummary_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            ReportAssetSummaryRequest reportAssetSummaryRequest = new ReportAssetSummaryRequest
            {
                MetricCategories = { "<metricCategories>" },
                Metrics = { "<metrics>" },
                Filters = { "<filters>" },
                GroupBy = "<groupBy>",
                SegmentBy = "<segmentBy>",
                LabelName = "<labelName>",
            };
            Response<ReportAssetSummaryResult> response = client.GetSummary(reportAssetSummaryRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Reports_GetSummary_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Reports client = new EasmClient(endpoint, credential).GetReportsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            ReportAssetSummaryRequest reportAssetSummaryRequest = new ReportAssetSummaryRequest
            {
                MetricCategories = { "<metricCategories>" },
                Metrics = { "<metrics>" },
                Filters = { "<filters>" },
                GroupBy = "<groupBy>",
                SegmentBy = "<segmentBy>",
                LabelName = "<labelName>",
            };
            Response<ReportAssetSummaryResult> response = await client.GetSummaryAsync(reportAssetSummaryRequest);
        }
    }
}
