// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Defender.Easm;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Defender.Easm.Samples
{
    public partial class Samples_DiscoveryGroups
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoveryGroups_ValidateDiscoGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ValidateDiscoGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoveryGroups_ValidateDiscoGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ValidateDiscoGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoveryGroups_ValidateDiscoGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            DiscoGroupData discoGroupData = new DiscoGroupData();
            Response<ValidateResult> response = client.ValidateDiscoGroup(discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoveryGroups_ValidateDiscoGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            DiscoGroupData discoGroupData = new DiscoGroupData();
            Response<ValidateResult> response = await client.ValidateDiscoGroupAsync(discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoveryGroups_ValidateDiscoGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new object[]
            {
new
{
kind = "as",
name = "<name>",
}
            },
                names = new object[]
            {
"<names>"
            },
                excludes = new object[]
            {
null
            },
                templateId = "<templateId>",
            });
            Response response = client.ValidateDiscoGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoveryGroups_ValidateDiscoGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new object[]
            {
new
{
kind = "as",
name = "<name>",
}
            },
                names = new object[]
            {
"<names>"
            },
                excludes = new object[]
            {
null
            },
                templateId = "<templateId>",
            });
            Response response = await client.ValidateDiscoGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoveryGroups_ValidateDiscoGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            DiscoGroupData discoGroupData = new DiscoGroupData
            {
                Name = "<name>",
                Description = "<description>",
                Tier = "<tier>",
                FrequencyMilliseconds = 1234L,
                Seeds = {new DiscoSource
{
Kind = DiscoSourceKind.As,
Name = "<name>",
}},
                Names = { "<names>" },
                Excludes = { default },
                TemplateId = "<templateId>",
            };
            Response<ValidateResult> response = client.ValidateDiscoGroup(discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoveryGroups_ValidateDiscoGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            DiscoGroupData discoGroupData = new DiscoGroupData
            {
                Name = "<name>",
                Description = "<description>",
                Tier = "<tier>",
                FrequencyMilliseconds = 1234L,
                Seeds = {new DiscoSource
{
Kind = DiscoSourceKind.As,
Name = "<name>",
}},
                Names = { "<names>" },
                Excludes = { default },
                TemplateId = "<templateId>",
            };
            Response<ValidateResult> response = await client.ValidateDiscoGroupAsync(discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = client.GetDiscoGroup("<groupName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = await client.GetDiscoGroupAsync("<groupName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response<DiscoGroup> response = client.GetDiscoGroup("<groupName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response<DiscoGroup> response = await client.GetDiscoGroupAsync("<groupName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = client.GetDiscoGroup("<groupName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = await client.GetDiscoGroupAsync("<groupName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response<DiscoGroup> response = client.GetDiscoGroup("<groupName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response<DiscoGroup> response = await client.GetDiscoGroupAsync("<groupName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_CreateOrReplaceDiscoGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateOrReplaceDiscoGroup("<groupName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_CreateOrReplaceDiscoGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrReplaceDiscoGroupAsync("<groupName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_CreateOrReplaceDiscoGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            DiscoGroupData discoGroupData = new DiscoGroupData();
            Response<DiscoGroup> response = client.CreateOrReplaceDiscoGroup("<groupName>", discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_CreateOrReplaceDiscoGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            DiscoGroupData discoGroupData = new DiscoGroupData();
            Response<DiscoGroup> response = await client.CreateOrReplaceDiscoGroupAsync("<groupName>", discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_CreateOrReplaceDiscoGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new object[]
            {
new
{
kind = "as",
name = "<name>",
}
            },
                names = new object[]
            {
"<names>"
            },
                excludes = new object[]
            {
null
            },
                templateId = "<templateId>",
            });
            Response response = client.CreateOrReplaceDiscoGroup("<groupName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_CreateOrReplaceDiscoGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new object[]
            {
new
{
kind = "as",
name = "<name>",
}
            },
                names = new object[]
            {
"<names>"
            },
                excludes = new object[]
            {
null
            },
                templateId = "<templateId>",
            });
            Response response = await client.CreateOrReplaceDiscoGroupAsync("<groupName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_CreateOrReplaceDiscoGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            DiscoGroupData discoGroupData = new DiscoGroupData
            {
                Name = "<name>",
                Description = "<description>",
                Tier = "<tier>",
                FrequencyMilliseconds = 1234L,
                Seeds = {new DiscoSource
{
Kind = DiscoSourceKind.As,
Name = "<name>",
}},
                Names = { "<names>" },
                Excludes = { default },
                TemplateId = "<templateId>",
            };
            Response<DiscoGroup> response = client.CreateOrReplaceDiscoGroup("<groupName>", discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_CreateOrReplaceDiscoGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            DiscoGroupData discoGroupData = new DiscoGroupData
            {
                Name = "<name>",
                Description = "<description>",
                Tier = "<tier>",
                FrequencyMilliseconds = 1234L,
                Seeds = {new DiscoSource
{
Kind = DiscoSourceKind.As,
Name = "<name>",
}},
                Names = { "<names>" },
                Excludes = { default },
                TemplateId = "<templateId>",
            };
            Response<DiscoGroup> response = await client.CreateOrReplaceDiscoGroupAsync("<groupName>", discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoveryGroups_RunDiscoGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = client.RunDiscoGroup("<groupName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoveryGroups_RunDiscoGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = await client.RunDiscoGroupAsync("<groupName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoveryGroups_RunDiscoGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = client.RunDiscoGroup("<groupName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoveryGroups_RunDiscoGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            Response response = await client.RunDiscoGroupAsync("<groupName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            foreach (BinaryData item in client.GetDiscoGroups(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            await foreach (BinaryData item in client.GetDiscoGroupsAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            foreach (DiscoGroup item in client.GetDiscoGroups())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            await foreach (DiscoGroup item in client.GetDiscoGroupsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            foreach (BinaryData item in client.GetDiscoGroups("<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("templateId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            await foreach (BinaryData item in client.GetDiscoGroupsAsync("<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("templateId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            foreach (DiscoGroup item in client.GetDiscoGroups(filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            await foreach (DiscoGroup item in client.GetDiscoGroupsAsync(filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoveryGroups_GetRuns_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            foreach (BinaryData item in client.GetRuns("<groupName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoveryGroups_GetRuns_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            await foreach (BinaryData item in client.GetRunsAsync("<groupName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoveryGroups_GetRuns_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            foreach (DiscoRunResult item in client.GetRuns("<groupName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoveryGroups_GetRuns_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            await foreach (DiscoRunResult item in client.GetRunsAsync("<groupName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoveryGroups_GetRuns_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            foreach (BinaryData item in client.GetRuns("<groupName>", "<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("submittedDate").ToString());
                Console.WriteLine(result.GetProperty("startedDate").ToString());
                Console.WriteLine(result.GetProperty("completedDate").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("totalAssetsFoundCount").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoveryGroups_GetRuns_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            await foreach (BinaryData item in client.GetRunsAsync("<groupName>", "<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("submittedDate").ToString());
                Console.WriteLine(result.GetProperty("startedDate").ToString());
                Console.WriteLine(result.GetProperty("completedDate").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("totalAssetsFoundCount").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoveryGroups_GetRuns_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            foreach (DiscoRunResult item in client.GetRuns("<groupName>", filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoveryGroups_GetRuns_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DiscoveryGroups client = new EasmClient(endpoint, credential).GetDiscoveryGroupsClient("<subscriptionId>", "<resourceGroupName>", "<workspaceName>", apiVersion: "2023-03-01-preview");

            await foreach (DiscoRunResult item in client.GetRunsAsync("<groupName>", filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }
    }
}
