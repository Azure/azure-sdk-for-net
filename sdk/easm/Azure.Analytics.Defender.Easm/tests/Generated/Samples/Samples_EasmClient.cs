// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Defender.Easm;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Defender.Easm.Samples
{
    public partial class Samples_EasmClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_UpdateAssets_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateAssets("<filter>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_UpdateAssets_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAssetsAsync("<filter>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_UpdateAssets_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            AssetUpdateData assetUpdateData = new AssetUpdateData();
            Response<Task> response = client.UpdateAssets("<filter>", assetUpdateData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_UpdateAssets_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            AssetUpdateData assetUpdateData = new AssetUpdateData();
            Response<Task> response = await client.UpdateAssetsAsync("<filter>", assetUpdateData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_UpdateAssets_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                state = "candidate",
                externalId = "<externalId>",
                labels = new
                {
                    key = true,
                },
                transfers = "as",
            });
            Response response = client.UpdateAssets("<filter>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_UpdateAssets_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                state = "candidate",
                externalId = "<externalId>",
                labels = new
                {
                    key = true,
                },
                transfers = "as",
            });
            Response response = await client.UpdateAssetsAsync("<filter>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_UpdateAssets_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            AssetUpdateData assetUpdateData = new AssetUpdateData
            {
                State = AssetUpdateState.Candidate,
                ExternalId = "<externalId>",
                Labels =
{
["key"] = true
},
                Transfers = AssetUpdateTransfers.As,
            };
            Response<Task> response = client.UpdateAssets("<filter>", assetUpdateData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_UpdateAssets_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            AssetUpdateData assetUpdateData = new AssetUpdateData
            {
                State = AssetUpdateState.Candidate,
                ExternalId = "<externalId>",
                Labels =
{
["key"] = true
},
                Transfers = AssetUpdateTransfers.As,
            };
            Response<Task> response = await client.UpdateAssetsAsync("<filter>", assetUpdateData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_GetAssetResource_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetAssetResource("<assetId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_GetAssetResource_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetAssetResourceAsync("<assetId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_GetAssetResource_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<AssetResource> response = client.GetAssetResource("<assetId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_GetAssetResource_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<AssetResource> response = await client.GetAssetResourceAsync("<assetId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_GetAssetResource_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetAssetResource("<assetId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("uuid").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("externalId").ToString());
            Console.WriteLine(result.GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("wildcard").ToString());
            Console.WriteLine(result.GetProperty("discoGroupName").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_GetAssetResource_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetAssetResourceAsync("<assetId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("uuid").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("externalId").ToString());
            Console.WriteLine(result.GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("wildcard").ToString());
            Console.WriteLine(result.GetProperty("discoGroupName").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_GetAssetResource_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<AssetResource> response = client.GetAssetResource("<assetId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_GetAssetResource_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<AssetResource> response = await client.GetAssetResourceAsync("<assetId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_ValidateDataConnection_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new object(),
                kind = "logAnalytics",
            });
            Response response = client.ValidateDataConnection(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_ValidateDataConnection_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new object(),
                kind = "logAnalytics",
            });
            Response response = await client.ValidateDataConnectionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_ValidateDataConnection_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DataConnectionData dataConnectionData = new LogAnalyticsDataConnectionData(new LogAnalyticsDataConnectionProperties());
            Response<ValidateResult> response = client.ValidateDataConnection(dataConnectionData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_ValidateDataConnection_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DataConnectionData dataConnectionData = new LogAnalyticsDataConnectionData(new LogAnalyticsDataConnectionProperties());
            Response<ValidateResult> response = await client.ValidateDataConnectionAsync(dataConnectionData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_ValidateDataConnection_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    apiKey = "<apiKey>",
                    workspaceId = "<workspaceId>",
                },
                kind = "logAnalytics",
                name = "<name>",
                content = "assets",
                frequency = "daily",
                frequencyOffset = 1234,
            });
            Response response = client.ValidateDataConnection(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_ValidateDataConnection_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    apiKey = "<apiKey>",
                    workspaceId = "<workspaceId>",
                },
                kind = "logAnalytics",
                name = "<name>",
                content = "assets",
                frequency = "daily",
                frequencyOffset = 1234,
            });
            Response response = await client.ValidateDataConnectionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_ValidateDataConnection_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DataConnectionData dataConnectionData = new LogAnalyticsDataConnectionData(new LogAnalyticsDataConnectionProperties
            {
                ApiKey = "<apiKey>",
                WorkspaceId = "<workspaceId>",
            })
            {
                Name = "<name>",
                Content = DataConnectionContent.Assets,
                Frequency = DataConnectionFrequency.Daily,
                FrequencyOffset = 1234,
            };
            Response<ValidateResult> response = client.ValidateDataConnection(dataConnectionData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_ValidateDataConnection_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DataConnectionData dataConnectionData = new LogAnalyticsDataConnectionData(new LogAnalyticsDataConnectionProperties
            {
                ApiKey = "<apiKey>",
                WorkspaceId = "<workspaceId>",
            })
            {
                Name = "<name>",
                Content = DataConnectionContent.Assets,
                Frequency = DataConnectionFrequency.Daily,
                FrequencyOffset = 1234,
            };
            Response<ValidateResult> response = await client.ValidateDataConnectionAsync(dataConnectionData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_GetDataConnection_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDataConnection("<dataConnectionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_GetDataConnection_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDataConnectionAsync("<dataConnectionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_GetDataConnection_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DataConnection> response = client.GetDataConnection("<dataConnectionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_GetDataConnection_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DataConnection> response = await client.GetDataConnectionAsync("<dataConnectionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_GetDataConnection_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDataConnection("<dataConnectionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_GetDataConnection_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDataConnectionAsync("<dataConnectionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_GetDataConnection_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DataConnection> response = client.GetDataConnection("<dataConnectionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_GetDataConnection_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DataConnection> response = await client.GetDataConnectionAsync("<dataConnectionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_CreateOrReplaceDataConnection_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new object(),
                kind = "logAnalytics",
            });
            Response response = client.CreateOrReplaceDataConnection("<dataConnectionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_CreateOrReplaceDataConnection_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new object(),
                kind = "logAnalytics",
            });
            Response response = await client.CreateOrReplaceDataConnectionAsync("<dataConnectionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_CreateOrReplaceDataConnection_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DataConnectionData dataConnectionData = new LogAnalyticsDataConnectionData(new LogAnalyticsDataConnectionProperties());
            Response<DataConnection> response = client.CreateOrReplaceDataConnection("<dataConnectionName>", dataConnectionData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_CreateOrReplaceDataConnection_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DataConnectionData dataConnectionData = new LogAnalyticsDataConnectionData(new LogAnalyticsDataConnectionProperties());
            Response<DataConnection> response = await client.CreateOrReplaceDataConnectionAsync("<dataConnectionName>", dataConnectionData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_CreateOrReplaceDataConnection_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    apiKey = "<apiKey>",
                    workspaceId = "<workspaceId>",
                },
                kind = "logAnalytics",
                name = "<name>",
                content = "assets",
                frequency = "daily",
                frequencyOffset = 1234,
            });
            Response response = client.CreateOrReplaceDataConnection("<dataConnectionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_CreateOrReplaceDataConnection_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    apiKey = "<apiKey>",
                    workspaceId = "<workspaceId>",
                },
                kind = "logAnalytics",
                name = "<name>",
                content = "assets",
                frequency = "daily",
                frequencyOffset = 1234,
            });
            Response response = await client.CreateOrReplaceDataConnectionAsync("<dataConnectionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_CreateOrReplaceDataConnection_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DataConnectionData dataConnectionData = new LogAnalyticsDataConnectionData(new LogAnalyticsDataConnectionProperties
            {
                ApiKey = "<apiKey>",
                WorkspaceId = "<workspaceId>",
            })
            {
                Name = "<name>",
                Content = DataConnectionContent.Assets,
                Frequency = DataConnectionFrequency.Daily,
                FrequencyOffset = 1234,
            };
            Response<DataConnection> response = client.CreateOrReplaceDataConnection("<dataConnectionName>", dataConnectionData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_CreateOrReplaceDataConnection_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DataConnectionData dataConnectionData = new LogAnalyticsDataConnectionData(new LogAnalyticsDataConnectionProperties
            {
                ApiKey = "<apiKey>",
                WorkspaceId = "<workspaceId>",
            })
            {
                Name = "<name>",
                Content = DataConnectionContent.Assets,
                Frequency = DataConnectionFrequency.Daily,
                FrequencyOffset = 1234,
            };
            Response<DataConnection> response = await client.CreateOrReplaceDataConnectionAsync("<dataConnectionName>", dataConnectionData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_DeleteDataConnection_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.DeleteDataConnection("<dataConnectionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_DeleteDataConnection_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.DeleteDataConnectionAsync("<dataConnectionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_DeleteDataConnection_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.DeleteDataConnection("<dataConnectionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_DeleteDataConnection_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.DeleteDataConnectionAsync("<dataConnectionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_ValidateDiscoGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ValidateDiscoGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_ValidateDiscoGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ValidateDiscoGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_ValidateDiscoGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DiscoGroupData discoGroupData = new DiscoGroupData();
            Response<ValidateResult> response = client.ValidateDiscoGroup(discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_ValidateDiscoGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DiscoGroupData discoGroupData = new DiscoGroupData();
            Response<ValidateResult> response = await client.ValidateDiscoGroupAsync(discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_ValidateDiscoGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new object[]
            {
new
{
kind = "as",
name = "<name>",
}
            },
                names = new object[]
            {
"<names>"
            },
                excludes = new object[]
            {
null
            },
                templateId = "<templateId>",
            });
            Response response = client.ValidateDiscoGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_ValidateDiscoGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new object[]
            {
new
{
kind = "as",
name = "<name>",
}
            },
                names = new object[]
            {
"<names>"
            },
                excludes = new object[]
            {
null
            },
                templateId = "<templateId>",
            });
            Response response = await client.ValidateDiscoGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_ValidateDiscoGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DiscoGroupData discoGroupData = new DiscoGroupData
            {
                Name = "<name>",
                Description = "<description>",
                Tier = "<tier>",
                FrequencyMilliseconds = 1234L,
                Seeds = {new DiscoSource
{
Kind = DiscoSourceKind.As,
Name = "<name>",
}},
                Names = { "<names>" },
                Excludes = { default },
                TemplateId = "<templateId>",
            };
            Response<ValidateResult> response = client.ValidateDiscoGroup(discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_ValidateDiscoGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DiscoGroupData discoGroupData = new DiscoGroupData
            {
                Name = "<name>",
                Description = "<description>",
                Tier = "<tier>",
                FrequencyMilliseconds = 1234L,
                Seeds = {new DiscoSource
{
Kind = DiscoSourceKind.As,
Name = "<name>",
}},
                Names = { "<names>" },
                Excludes = { default },
                TemplateId = "<templateId>",
            };
            Response<ValidateResult> response = await client.ValidateDiscoGroupAsync(discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDiscoGroup("<groupName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDiscoGroupAsync("<groupName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DiscoGroup> response = client.GetDiscoGroup("<groupName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DiscoGroup> response = await client.GetDiscoGroupAsync("<groupName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDiscoGroup("<groupName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDiscoGroupAsync("<groupName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DiscoGroup> response = client.GetDiscoGroup("<groupName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DiscoGroup> response = await client.GetDiscoGroupAsync("<groupName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_CreateOrReplaceDiscoGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateOrReplaceDiscoGroup("<groupName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_CreateOrReplaceDiscoGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrReplaceDiscoGroupAsync("<groupName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_CreateOrReplaceDiscoGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DiscoGroupData discoGroupData = new DiscoGroupData();
            Response<DiscoGroup> response = client.CreateOrReplaceDiscoGroup("<groupName>", discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_CreateOrReplaceDiscoGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DiscoGroupData discoGroupData = new DiscoGroupData();
            Response<DiscoGroup> response = await client.CreateOrReplaceDiscoGroupAsync("<groupName>", discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_CreateOrReplaceDiscoGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new object[]
            {
new
{
kind = "as",
name = "<name>",
}
            },
                names = new object[]
            {
"<names>"
            },
                excludes = new object[]
            {
null
            },
                templateId = "<templateId>",
            });
            Response response = client.CreateOrReplaceDiscoGroup("<groupName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_CreateOrReplaceDiscoGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new object[]
            {
new
{
kind = "as",
name = "<name>",
}
            },
                names = new object[]
            {
"<names>"
            },
                excludes = new object[]
            {
null
            },
                templateId = "<templateId>",
            });
            Response response = await client.CreateOrReplaceDiscoGroupAsync("<groupName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_CreateOrReplaceDiscoGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DiscoGroupData discoGroupData = new DiscoGroupData
            {
                Name = "<name>",
                Description = "<description>",
                Tier = "<tier>",
                FrequencyMilliseconds = 1234L,
                Seeds = {new DiscoSource
{
Kind = DiscoSourceKind.As,
Name = "<name>",
}},
                Names = { "<names>" },
                Excludes = { default },
                TemplateId = "<templateId>",
            };
            Response<DiscoGroup> response = client.CreateOrReplaceDiscoGroup("<groupName>", discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_CreateOrReplaceDiscoGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            DiscoGroupData discoGroupData = new DiscoGroupData
            {
                Name = "<name>",
                Description = "<description>",
                Tier = "<tier>",
                FrequencyMilliseconds = 1234L,
                Seeds = {new DiscoSource
{
Kind = DiscoSourceKind.As,
Name = "<name>",
}},
                Names = { "<names>" },
                Excludes = { default },
                TemplateId = "<templateId>",
            };
            Response<DiscoGroup> response = await client.CreateOrReplaceDiscoGroupAsync("<groupName>", discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_RunDiscoGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.RunDiscoGroup("<groupName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_RunDiscoGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.RunDiscoGroupAsync("<groupName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_RunDiscoGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.RunDiscoGroup("<groupName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_RunDiscoGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.RunDiscoGroupAsync("<groupName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoTemplate_GetDiscoTemplate_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDiscoTemplate("<templateId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoTemplate_GetDiscoTemplate_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDiscoTemplateAsync("<templateId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoTemplate_GetDiscoTemplate_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DiscoTemplate> response = client.GetDiscoTemplate("<templateId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoTemplate_GetDiscoTemplate_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DiscoTemplate> response = await client.GetDiscoTemplateAsync("<templateId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoTemplate_GetDiscoTemplate_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDiscoTemplate("<templateId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("industry").ToString());
            Console.WriteLine(result.GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("countryCode").ToString());
            Console.WriteLine(result.GetProperty("stateCode").ToString());
            Console.WriteLine(result.GetProperty("city").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoTemplate_GetDiscoTemplate_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDiscoTemplateAsync("<templateId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("industry").ToString());
            Console.WriteLine(result.GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("countryCode").ToString());
            Console.WriteLine(result.GetProperty("stateCode").ToString());
            Console.WriteLine(result.GetProperty("city").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoTemplate_GetDiscoTemplate_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DiscoTemplate> response = client.GetDiscoTemplate("<templateId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoTemplate_GetDiscoTemplate_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<DiscoTemplate> response = await client.GetDiscoTemplateAsync("<templateId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetBillable_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetBillable(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetBillable_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetBillableAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetBillable_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<ReportBillableAssetSummaryResult> response = client.GetBillable();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetBillable_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<ReportBillableAssetSummaryResult> response = await client.GetBillableAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetBillable_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetBillable(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("count").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetBillable_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetBillableAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("count").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetBillable_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<ReportBillableAssetSummaryResult> response = client.GetBillable();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetBillable_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<ReportBillableAssetSummaryResult> response = await client.GetBillableAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetSnapshot_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.GetSnapshot(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetSnapshot_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.GetSnapshotAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetSnapshot_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            ReportAssetSnapshotRequest reportAssetSnapshotRequest = new ReportAssetSnapshotRequest();
            Response<ReportAssetSnapshotResult> response = client.GetSnapshot(reportAssetSnapshotRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetSnapshot_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            ReportAssetSnapshotRequest reportAssetSnapshotRequest = new ReportAssetSnapshotRequest();
            Response<ReportAssetSnapshotResult> response = await client.GetSnapshotAsync(reportAssetSnapshotRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetSnapshot_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                metric = "<metric>",
                labelName = "<labelName>",
                size = 1234,
                page = 1234,
            });
            Response response = client.GetSnapshot(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("totalElements").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("mark").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("uuid").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("externalId").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("wildcard").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("discoGroupName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetSnapshot_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                metric = "<metric>",
                labelName = "<labelName>",
                size = 1234,
                page = 1234,
            });
            Response response = await client.GetSnapshotAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("totalElements").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("mark").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("uuid").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("externalId").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("wildcard").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("discoGroupName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetSnapshot_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            ReportAssetSnapshotRequest reportAssetSnapshotRequest = new ReportAssetSnapshotRequest
            {
                Metric = "<metric>",
                LabelName = "<labelName>",
                Size = 1234,
                Page = 1234,
            };
            Response<ReportAssetSnapshotResult> response = client.GetSnapshot(reportAssetSnapshotRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetSnapshot_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            ReportAssetSnapshotRequest reportAssetSnapshotRequest = new ReportAssetSnapshotRequest
            {
                Metric = "<metric>",
                LabelName = "<labelName>",
                Size = 1234,
                Page = 1234,
            };
            Response<ReportAssetSnapshotResult> response = await client.GetSnapshotAsync(reportAssetSnapshotRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetSummary_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.GetSummary(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetSummary_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.GetSummaryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetSummary_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            ReportAssetSummaryRequest reportAssetSummaryRequest = new ReportAssetSummaryRequest();
            Response<ReportAssetSummaryResult> response = client.GetSummary(reportAssetSummaryRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetSummary_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            ReportAssetSummaryRequest reportAssetSummaryRequest = new ReportAssetSummaryRequest();
            Response<ReportAssetSummaryResult> response = await client.GetSummaryAsync(reportAssetSummaryRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetSummary_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                metricCategories = new object[]
            {
"<metricCategories>"
            },
                metrics = new object[]
            {
"<metrics>"
            },
                filters = new object[]
            {
"<filters>"
            },
                groupBy = "<groupBy>",
                segmentBy = "<segmentBy>",
                labelName = "<labelName>",
            });
            Response response = client.GetSummary(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metricCategory").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("link").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetSummary_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                metricCategories = new object[]
            {
"<metricCategories>"
            },
                metrics = new object[]
            {
"<metrics>"
            },
                filters = new object[]
            {
"<filters>"
            },
                groupBy = "<groupBy>",
                segmentBy = "<segmentBy>",
                labelName = "<labelName>",
            });
            Response response = await client.GetSummaryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metricCategory").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("link").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetSummary_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            ReportAssetSummaryRequest reportAssetSummaryRequest = new ReportAssetSummaryRequest
            {
                MetricCategories = { "<metricCategories>" },
                Metrics = { "<metrics>" },
                Filters = { "<filters>" },
                GroupBy = "<groupBy>",
                SegmentBy = "<segmentBy>",
                LabelName = "<labelName>",
            };
            Response<ReportAssetSummaryResult> response = client.GetSummary(reportAssetSummaryRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetSummary_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            ReportAssetSummaryRequest reportAssetSummaryRequest = new ReportAssetSummaryRequest
            {
                MetricCategories = { "<metricCategories>" },
                Metrics = { "<metrics>" },
                Filters = { "<filters>" },
                GroupBy = "<groupBy>",
                SegmentBy = "<segmentBy>",
                LabelName = "<labelName>",
            };
            Response<ReportAssetSummaryResult> response = await client.GetSummaryAsync(reportAssetSummaryRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_GetSavedFilter_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetSavedFilter("<filterName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_GetSavedFilter_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetSavedFilterAsync("<filterName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_GetSavedFilter_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<SavedFilter> response = client.GetSavedFilter("<filterName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_GetSavedFilter_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<SavedFilter> response = await client.GetSavedFilterAsync("<filterName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_GetSavedFilter_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetSavedFilter("<filterName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_GetSavedFilter_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetSavedFilterAsync("<filterName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_GetSavedFilter_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<SavedFilter> response = client.GetSavedFilter("<filterName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_GetSavedFilter_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<SavedFilter> response = await client.GetSavedFilterAsync("<filterName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_CreateOrReplaceSavedFilter_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                filter = "<filter>",
                description = "<description>",
            });
            Response response = client.CreateOrReplaceSavedFilter("<filterName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_CreateOrReplaceSavedFilter_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                filter = "<filter>",
                description = "<description>",
            });
            Response response = await client.CreateOrReplaceSavedFilterAsync("<filterName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_CreateOrReplaceSavedFilter_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            SavedFilterData savedFilterData = new SavedFilterData("<filter>", "<description>");
            Response<SavedFilter> response = client.CreateOrReplaceSavedFilter("<filterName>", savedFilterData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_CreateOrReplaceSavedFilter_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            SavedFilterData savedFilterData = new SavedFilterData("<filter>", "<description>");
            Response<SavedFilter> response = await client.CreateOrReplaceSavedFilterAsync("<filterName>", savedFilterData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_CreateOrReplaceSavedFilter_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                filter = "<filter>",
                description = "<description>",
            });
            Response response = client.CreateOrReplaceSavedFilter("<filterName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_CreateOrReplaceSavedFilter_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                filter = "<filter>",
                description = "<description>",
            });
            Response response = await client.CreateOrReplaceSavedFilterAsync("<filterName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_CreateOrReplaceSavedFilter_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            SavedFilterData savedFilterData = new SavedFilterData("<filter>", "<description>");
            Response<SavedFilter> response = client.CreateOrReplaceSavedFilter("<filterName>", savedFilterData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_CreateOrReplaceSavedFilter_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            SavedFilterData savedFilterData = new SavedFilterData("<filter>", "<description>");
            Response<SavedFilter> response = await client.CreateOrReplaceSavedFilterAsync("<filterName>", savedFilterData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_DeleteSavedFilter_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.DeleteSavedFilter("<filterName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_DeleteSavedFilter_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.DeleteSavedFilterAsync("<filterName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_DeleteSavedFilter_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.DeleteSavedFilter("<filterName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_DeleteSavedFilter_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.DeleteSavedFilterAsync("<filterName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Task_GetTask_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetTask("<taskId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Task_GetTask_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetTaskAsync("<taskId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Task_GetTask_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<Task> response = client.GetTask("<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Task_GetTask_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<Task> response = await client.GetTaskAsync("<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Task_GetTask_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetTask("<taskId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Task_GetTask_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetTaskAsync("<taskId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Task_GetTask_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<Task> response = client.GetTask("<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Task_GetTask_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<Task> response = await client.GetTaskAsync("<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_CancelTask_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.CancelTask("<taskId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_CancelTask_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.CancelTaskAsync("<taskId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_CancelTask_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<Task> response = client.CancelTask("<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_CancelTask_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<Task> response = await client.CancelTaskAsync("<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_CancelTask_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.CancelTask("<taskId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_CancelTask_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.CancelTaskAsync("<taskId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_CancelTask_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<Task> response = client.CancelTask("<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_CancelTask_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response<Task> response = await client.CancelTaskAsync("<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_GetAssetResources_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetAssetResources(null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_GetAssetResources_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetAssetResourcesAsync(null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_GetAssetResources_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (AssetResource item in client.GetAssetResources())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_GetAssetResources_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (AssetResource item in client.GetAssetResourcesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_GetAssetResources_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetAssetResources("<filter>", "<orderby>", 1234, 1234, "<mark>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("uuid").ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("updatedDate").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("externalId").ToString());
                Console.WriteLine(result.GetProperty("labels")[0].ToString());
                Console.WriteLine(result.GetProperty("wildcard").ToString());
                Console.WriteLine(result.GetProperty("discoGroupName").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("reason").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_GetAssetResources_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetAssetResourcesAsync("<filter>", "<orderby>", 1234, 1234, "<mark>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("uuid").ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("updatedDate").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("externalId").ToString());
                Console.WriteLine(result.GetProperty("labels")[0].ToString());
                Console.WriteLine(result.GetProperty("wildcard").ToString());
                Console.WriteLine(result.GetProperty("discoGroupName").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("reason").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssetResource_GetAssetResources_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (AssetResource item in client.GetAssetResources(filter: "<filter>", orderby: "<orderby>", skip: 1234, maxpagesize: 1234, mark: "<mark>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_AssetResource_GetAssetResources_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (AssetResource item in client.GetAssetResourcesAsync(filter: "<filter>", orderby: "<orderby>", skip: 1234, maxpagesize: 1234, mark: "<mark>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_GetDataConnections_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetDataConnections(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_GetDataConnections_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetDataConnectionsAsync(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_GetDataConnections_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (DataConnection item in client.GetDataConnections())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_GetDataConnections_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (DataConnection item in client.GetDataConnectionsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_GetDataConnections_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetDataConnections(1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("content").ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
                Console.WriteLine(result.GetProperty("updatedDate").ToString());
                Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("active").ToString());
                Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_GetDataConnections_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetDataConnectionsAsync(1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("content").ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
                Console.WriteLine(result.GetProperty("updatedDate").ToString());
                Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("active").ToString());
                Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataConnection_GetDataConnections_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (DataConnection item in client.GetDataConnections(skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DataConnection_GetDataConnections_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (DataConnection item in client.GetDataConnectionsAsync(skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetDiscoGroups(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetDiscoGroupsAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (DiscoGroup item in client.GetDiscoGroups())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (DiscoGroup item in client.GetDiscoGroupsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetDiscoGroups("<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("templateId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetDiscoGroupsAsync("<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("templateId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoGroup_GetDiscoGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (DiscoGroup item in client.GetDiscoGroups(filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoGroup_GetDiscoGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (DiscoGroup item in client.GetDiscoGroupsAsync(filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetRuns_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetRuns("<groupName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetRuns_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetRunsAsync("<groupName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetRuns_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (DiscoRunResult item in client.GetRuns("<groupName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetRuns_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (DiscoRunResult item in client.GetRunsAsync("<groupName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetRuns_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetRuns("<groupName>", "<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("submittedDate").ToString());
                Console.WriteLine(result.GetProperty("startedDate").ToString());
                Console.WriteLine(result.GetProperty("completedDate").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("totalAssetsFoundCount").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetRuns_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetRunsAsync("<groupName>", "<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("submittedDate").ToString());
                Console.WriteLine(result.GetProperty("startedDate").ToString());
                Console.WriteLine(result.GetProperty("completedDate").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("totalAssetsFoundCount").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EasmClient_GetRuns_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (DiscoRunResult item in client.GetRuns("<groupName>", filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_EasmClient_GetRuns_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (DiscoRunResult item in client.GetRunsAsync("<groupName>", filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoTemplate_GetDiscoTemplates_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetDiscoTemplates(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoTemplate_GetDiscoTemplates_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetDiscoTemplatesAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoTemplate_GetDiscoTemplates_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (DiscoTemplate item in client.GetDiscoTemplates())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoTemplate_GetDiscoTemplates_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (DiscoTemplate item in client.GetDiscoTemplatesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoTemplate_GetDiscoTemplates_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetDiscoTemplates("<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("industry").ToString());
                Console.WriteLine(result.GetProperty("region").ToString());
                Console.WriteLine(result.GetProperty("countryCode").ToString());
                Console.WriteLine(result.GetProperty("stateCode").ToString());
                Console.WriteLine(result.GetProperty("city").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoTemplate_GetDiscoTemplates_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetDiscoTemplatesAsync("<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("industry").ToString());
                Console.WriteLine(result.GetProperty("region").ToString());
                Console.WriteLine(result.GetProperty("countryCode").ToString());
                Console.WriteLine(result.GetProperty("stateCode").ToString());
                Console.WriteLine(result.GetProperty("city").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DiscoTemplate_GetDiscoTemplates_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (DiscoTemplate item in client.GetDiscoTemplates(filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DiscoTemplate_GetDiscoTemplates_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (DiscoTemplate item in client.GetDiscoTemplatesAsync(filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_GetSavedFilters_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetSavedFilters(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_GetSavedFilters_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetSavedFiltersAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_GetSavedFilters_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (SavedFilter item in client.GetSavedFilters())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_GetSavedFilters_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (SavedFilter item in client.GetSavedFiltersAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_GetSavedFilters_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetSavedFilters("<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("filter").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_GetSavedFilters_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetSavedFiltersAsync("<filter>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("filter").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SavedFilter_GetSavedFilters_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (SavedFilter item in client.GetSavedFilters(filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_SavedFilter_GetSavedFilters_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (SavedFilter item in client.GetSavedFiltersAsync(filter: "<filter>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Task_GetTasks_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetTasks(null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Task_GetTasks_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetTasksAsync(null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Task_GetTasks_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (Task item in client.GetTasks())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Task_GetTasks_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (Task item in client.GetTasksAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Task_GetTasks_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (BinaryData item in client.GetTasks("<filter>", "<orderby>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("startedAt").ToString());
                Console.WriteLine(result.GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("phase").ToString());
                Console.WriteLine(result.GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Task_GetTasks_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (BinaryData item in client.GetTasksAsync("<filter>", "<orderby>", 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("startedAt").ToString());
                Console.WriteLine(result.GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("phase").ToString());
                Console.WriteLine(result.GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Task_GetTasks_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (Task item in client.GetTasks(filter: "<filter>", orderby: "<orderby>", skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_Task_GetTasks_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EasmClient client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (Task item in client.GetTasksAsync(filter: "<filter>", orderby: "<orderby>", skip: 1234, maxpagesize: 1234))
            {
            }
        }
    }
}
