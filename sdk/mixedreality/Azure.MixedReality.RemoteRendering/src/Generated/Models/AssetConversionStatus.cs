// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.MixedReality.RemoteRendering
{
    /// <summary> The status of the conversion. Terminal states are &apos;Cancelled&apos;, &apos;Failed&apos;, &apos;Succeeded&apos;. </summary>
    public readonly partial struct AssetConversionStatus : IEquatable<AssetConversionStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="AssetConversionStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssetConversionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string RunningValue = "Running";
        private const string CancelledValue = "Cancelled";
        private const string FailedValue = "Failed";
        private const string SucceededValue = "Succeeded";

        /// <summary> NotStarted. </summary>
        public static AssetConversionStatus NotStarted { get; } = new AssetConversionStatus(NotStartedValue);
        /// <summary> Running. </summary>
        public static AssetConversionStatus Running { get; } = new AssetConversionStatus(RunningValue);
        /// <summary> Cancelled. </summary>
        public static AssetConversionStatus Cancelled { get; } = new AssetConversionStatus(CancelledValue);
        /// <summary> Failed. </summary>
        public static AssetConversionStatus Failed { get; } = new AssetConversionStatus(FailedValue);
        /// <summary> Succeeded. </summary>
        public static AssetConversionStatus Succeeded { get; } = new AssetConversionStatus(SucceededValue);
        /// <summary> Determines if two <see cref="AssetConversionStatus"/> values are the same. </summary>
        public static bool operator ==(AssetConversionStatus left, AssetConversionStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssetConversionStatus"/> values are not the same. </summary>
        public static bool operator !=(AssetConversionStatus left, AssetConversionStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AssetConversionStatus"/>. </summary>
        public static implicit operator AssetConversionStatus(string value) => new AssetConversionStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssetConversionStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssetConversionStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
