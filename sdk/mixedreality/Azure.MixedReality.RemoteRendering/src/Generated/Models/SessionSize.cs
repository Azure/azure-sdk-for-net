// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.MixedReality.RemoteRendering.Models
{
    /// <summary> The SessionSize. </summary>
    public readonly partial struct SessionSize : IEquatable<SessionSize>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="SessionSize"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SessionSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StandardValue = "Standard";
        private const string PremiumValue = "Premium";

        /// <summary> Standard. </summary>
        public static SessionSize Standard { get; } = new SessionSize(StandardValue);
        /// <summary> Premium. </summary>
        public static SessionSize Premium { get; } = new SessionSize(PremiumValue);
        /// <summary> Determines if two <see cref="SessionSize"/> values are the same. </summary>
        public static bool operator ==(SessionSize left, SessionSize right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SessionSize"/> values are not the same. </summary>
        public static bool operator !=(SessionSize left, SessionSize right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SessionSize"/>. </summary>
        public static implicit operator SessionSize(string value) => new SessionSize(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SessionSize other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SessionSize other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
