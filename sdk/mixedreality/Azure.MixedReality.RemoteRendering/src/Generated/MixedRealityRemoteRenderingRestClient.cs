// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.MixedReality.RemoteRendering.Models;

namespace Azure.MixedReality.RemoteRendering
{
    internal partial class MixedRealityRemoteRenderingRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of MixedRealityRemoteRenderingRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public MixedRealityRemoteRenderingRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://remoterendering.westus2.mixedreality.azure.com");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateCreateConversionRequest(Guid accountId, string conversionId, ConversionRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/conversions/", false);
            uri.AppendPath(conversionId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Headers.Add("Accept", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Creates a conversion using an asset stored in an Azure Blob Storage account.
        /// If the remote rendering account has been linked with the storage account no Shared Access Signatures (storageContainerReadListSas, storageContainerWriteSas) for storage access need to be provided.
        /// Documentation how to link your Azure Remote Rendering account with the Azure Blob Storage account can be found in the [documentation](https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account#link-storage-accounts).
        /// 
        /// All files in the input container starting with the blobPrefix will be retrieved to perform the conversion. To cut down on conversion times only necessary files should be available under the blobPrefix.
        /// .
        /// </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="conversionId"> An ID uniquely identifying the conversion for the given account. The ID is case sensitive, can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 256 characters. </param>
        /// <param name="body"> Request body configuring the settings for an asset conversion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversionId"/> or <paramref name="body"/> is null. </exception>
        public async Task<ResponseWithHeaders<ConversionInformation, MixedRealityRemoteRenderingCreateConversionHeaders>> CreateConversionAsync(Guid accountId, string conversionId, ConversionRequest body, CancellationToken cancellationToken = default)
        {
            if (conversionId == null)
            {
                throw new ArgumentNullException(nameof(conversionId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateConversionRequest(accountId, conversionId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new MixedRealityRemoteRenderingCreateConversionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        ConversionInformation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ConversionInformation.DeserializeConversionInformation(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<ConversionInformation, MixedRealityRemoteRenderingCreateConversionHeaders>(null, headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Creates a conversion using an asset stored in an Azure Blob Storage account.
        /// If the remote rendering account has been linked with the storage account no Shared Access Signatures (storageContainerReadListSas, storageContainerWriteSas) for storage access need to be provided.
        /// Documentation how to link your Azure Remote Rendering account with the Azure Blob Storage account can be found in the [documentation](https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account#link-storage-accounts).
        /// 
        /// All files in the input container starting with the blobPrefix will be retrieved to perform the conversion. To cut down on conversion times only necessary files should be available under the blobPrefix.
        /// .
        /// </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="conversionId"> An ID uniquely identifying the conversion for the given account. The ID is case sensitive, can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 256 characters. </param>
        /// <param name="body"> Request body configuring the settings for an asset conversion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversionId"/> or <paramref name="body"/> is null. </exception>
        public ResponseWithHeaders<ConversionInformation, MixedRealityRemoteRenderingCreateConversionHeaders> CreateConversion(Guid accountId, string conversionId, ConversionRequest body, CancellationToken cancellationToken = default)
        {
            if (conversionId == null)
            {
                throw new ArgumentNullException(nameof(conversionId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateConversionRequest(accountId, conversionId, body);
            _pipeline.Send(message, cancellationToken);
            var headers = new MixedRealityRemoteRenderingCreateConversionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        ConversionInformation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ConversionInformation.DeserializeConversionInformation(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<ConversionInformation, MixedRealityRemoteRenderingCreateConversionHeaders>(null, headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetConversionRequest(Guid accountId, string conversionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/conversions/", false);
            uri.AppendPath(conversionId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the status of a previously created asset conversion. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="conversionId"> the conversion id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversionId"/> is null. </exception>
        public async Task<ResponseWithHeaders<ConversionInformation, MixedRealityRemoteRenderingGetConversionHeaders>> GetConversionAsync(Guid accountId, string conversionId, CancellationToken cancellationToken = default)
        {
            if (conversionId == null)
            {
                throw new ArgumentNullException(nameof(conversionId));
            }

            using var message = CreateGetConversionRequest(accountId, conversionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new MixedRealityRemoteRenderingGetConversionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConversionInformation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ConversionInformation.DeserializeConversionInformation(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 404:
                case 429:
                    return ResponseWithHeaders.FromValue<ConversionInformation, MixedRealityRemoteRenderingGetConversionHeaders>(null, headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the status of a previously created asset conversion. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="conversionId"> the conversion id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversionId"/> is null. </exception>
        public ResponseWithHeaders<ConversionInformation, MixedRealityRemoteRenderingGetConversionHeaders> GetConversion(Guid accountId, string conversionId, CancellationToken cancellationToken = default)
        {
            if (conversionId == null)
            {
                throw new ArgumentNullException(nameof(conversionId));
            }

            using var message = CreateGetConversionRequest(accountId, conversionId);
            _pipeline.Send(message, cancellationToken);
            var headers = new MixedRealityRemoteRenderingGetConversionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConversionInformation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ConversionInformation.DeserializeConversionInformation(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 404:
                case 429:
                    return ResponseWithHeaders.FromValue<ConversionInformation, MixedRealityRemoteRenderingGetConversionHeaders>(null, headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListConversionsRequest(Guid accountId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/conversions", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of all conversions. Returns a batch of conversions- if more conversions are available the @nextLink property contains the a URL where the next batch of conversions can be requested. This URL will need the same authentication as all calls to the Azure Remote Rendering API. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<ConversionList, MixedRealityRemoteRenderingListConversionsHeaders>> ListConversionsAsync(Guid accountId, CancellationToken cancellationToken = default)
        {
            using var message = CreateListConversionsRequest(accountId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new MixedRealityRemoteRenderingListConversionsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConversionList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ConversionList.DeserializeConversionList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<ConversionList, MixedRealityRemoteRenderingListConversionsHeaders>(null, headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of all conversions. Returns a batch of conversions- if more conversions are available the @nextLink property contains the a URL where the next batch of conversions can be requested. This URL will need the same authentication as all calls to the Azure Remote Rendering API. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<ConversionList, MixedRealityRemoteRenderingListConversionsHeaders> ListConversions(Guid accountId, CancellationToken cancellationToken = default)
        {
            using var message = CreateListConversionsRequest(accountId);
            _pipeline.Send(message, cancellationToken);
            var headers = new MixedRealityRemoteRenderingListConversionsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConversionList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ConversionList.DeserializeConversionList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<ConversionList, MixedRealityRemoteRenderingListConversionsHeaders>(null, headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateSessionRequest(Guid accountId, string sessionId, CreateSessionBody body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/sessions/", false);
            uri.AppendPath(sessionId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Headers.Add("Accept", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new rendering session. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="sessionId"> An ID uniquely identifying the rendering session for the given account. The ID is case sensitive, can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 256 characters. </param>
        /// <param name="body"> Settings of the session to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> or <paramref name="body"/> is null. </exception>
        public async Task<ResponseWithHeaders<SessionProperties, MixedRealityRemoteRenderingCreateSessionHeaders>> CreateSessionAsync(Guid accountId, string sessionId, CreateSessionBody body, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateSessionRequest(accountId, sessionId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new MixedRealityRemoteRenderingCreateSessionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        SessionProperties value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SessionProperties.DeserializeSessionProperties(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<SessionProperties, MixedRealityRemoteRenderingCreateSessionHeaders>(null, headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new rendering session. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="sessionId"> An ID uniquely identifying the rendering session for the given account. The ID is case sensitive, can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 256 characters. </param>
        /// <param name="body"> Settings of the session to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> or <paramref name="body"/> is null. </exception>
        public ResponseWithHeaders<SessionProperties, MixedRealityRemoteRenderingCreateSessionHeaders> CreateSession(Guid accountId, string sessionId, CreateSessionBody body, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateSessionRequest(accountId, sessionId, body);
            _pipeline.Send(message, cancellationToken);
            var headers = new MixedRealityRemoteRenderingCreateSessionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        SessionProperties value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SessionProperties.DeserializeSessionProperties(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<SessionProperties, MixedRealityRemoteRenderingCreateSessionHeaders>(null, headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSessionRequest(Guid accountId, string sessionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/sessions/", false);
            uri.AppendPath(sessionId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets properties of a particular rendering session. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="sessionId"> ID of a previously created session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        public async Task<ResponseWithHeaders<SessionProperties, MixedRealityRemoteRenderingGetSessionHeaders>> GetSessionAsync(Guid accountId, string sessionId, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }

            using var message = CreateGetSessionRequest(accountId, sessionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new MixedRealityRemoteRenderingGetSessionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionProperties value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SessionProperties.DeserializeSessionProperties(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 404:
                case 429:
                    return ResponseWithHeaders.FromValue<SessionProperties, MixedRealityRemoteRenderingGetSessionHeaders>(null, headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets properties of a particular rendering session. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="sessionId"> ID of a previously created session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        public ResponseWithHeaders<SessionProperties, MixedRealityRemoteRenderingGetSessionHeaders> GetSession(Guid accountId, string sessionId, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }

            using var message = CreateGetSessionRequest(accountId, sessionId);
            _pipeline.Send(message, cancellationToken);
            var headers = new MixedRealityRemoteRenderingGetSessionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionProperties value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SessionProperties.DeserializeSessionProperties(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 404:
                case 429:
                    return ResponseWithHeaders.FromValue<SessionProperties, MixedRealityRemoteRenderingGetSessionHeaders>(null, headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateSessionRequest(Guid accountId, string sessionId, UpdateSessionBody body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/sessions/", false);
            uri.AppendPath(sessionId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Headers.Add("Accept", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Updates a particular rendering session. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account ID. </param>
        /// <param name="sessionId"> ID of a previously created session. </param>
        /// <param name="body"> Settings of the session to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> or <paramref name="body"/> is null. </exception>
        public async Task<ResponseWithHeaders<SessionProperties, MixedRealityRemoteRenderingUpdateSessionHeaders>> UpdateSessionAsync(Guid accountId, string sessionId, UpdateSessionBody body, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateSessionRequest(accountId, sessionId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new MixedRealityRemoteRenderingUpdateSessionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionProperties value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SessionProperties.DeserializeSessionProperties(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 404:
                case 429:
                    return ResponseWithHeaders.FromValue<SessionProperties, MixedRealityRemoteRenderingUpdateSessionHeaders>(null, headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates a particular rendering session. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account ID. </param>
        /// <param name="sessionId"> ID of a previously created session. </param>
        /// <param name="body"> Settings of the session to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> or <paramref name="body"/> is null. </exception>
        public ResponseWithHeaders<SessionProperties, MixedRealityRemoteRenderingUpdateSessionHeaders> UpdateSession(Guid accountId, string sessionId, UpdateSessionBody body, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateSessionRequest(accountId, sessionId, body);
            _pipeline.Send(message, cancellationToken);
            var headers = new MixedRealityRemoteRenderingUpdateSessionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionProperties value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SessionProperties.DeserializeSessionProperties(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 404:
                case 429:
                    return ResponseWithHeaders.FromValue<SessionProperties, MixedRealityRemoteRenderingUpdateSessionHeaders>(null, headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStopSessionRequest(Guid accountId, string sessionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/sessions/", false);
            uri.AppendPath(sessionId, true);
            uri.AppendPath("/:stop", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Stops a particular rendering session. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="sessionId"> ID of the session to stop. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        public async Task<ResponseWithHeaders<MixedRealityRemoteRenderingStopSessionHeaders>> StopSessionAsync(Guid accountId, string sessionId, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }

            using var message = CreateStopSessionRequest(accountId, sessionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new MixedRealityRemoteRenderingStopSessionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 204:
                case 401:
                case 403:
                case 404:
                case 429:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Stops a particular rendering session. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="sessionId"> ID of the session to stop. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        public ResponseWithHeaders<MixedRealityRemoteRenderingStopSessionHeaders> StopSession(Guid accountId, string sessionId, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }

            using var message = CreateStopSessionRequest(accountId, sessionId);
            _pipeline.Send(message, cancellationToken);
            var headers = new MixedRealityRemoteRenderingStopSessionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 204:
                case 401:
                case 403:
                case 404:
                case 429:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSessionsRequest(Guid accountId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/sessions", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a list of all rendering sessions. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<SessionsList, MixedRealityRemoteRenderingListSessionsHeaders>> ListSessionsAsync(Guid accountId, CancellationToken cancellationToken = default)
        {
            using var message = CreateListSessionsRequest(accountId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new MixedRealityRemoteRenderingListSessionsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionsList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SessionsList.DeserializeSessionsList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<SessionsList, MixedRealityRemoteRenderingListSessionsHeaders>(null, headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a list of all rendering sessions. </summary>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<SessionsList, MixedRealityRemoteRenderingListSessionsHeaders> ListSessions(Guid accountId, CancellationToken cancellationToken = default)
        {
            using var message = CreateListSessionsRequest(accountId);
            _pipeline.Send(message, cancellationToken);
            var headers = new MixedRealityRemoteRenderingListSessionsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionsList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SessionsList.DeserializeSessionsList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<SessionsList, MixedRealityRemoteRenderingListSessionsHeaders>(null, headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListConversionsNextPageRequest(string nextLink, Guid accountId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of all conversions. Returns a batch of conversions- if more conversions are available the @nextLink property contains the a URL where the next batch of conversions can be requested. This URL will need the same authentication as all calls to the Azure Remote Rendering API. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<ResponseWithHeaders<ConversionList, MixedRealityRemoteRenderingListConversionsHeaders>> ListConversionsNextPageAsync(string nextLink, Guid accountId, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListConversionsNextPageRequest(nextLink, accountId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new MixedRealityRemoteRenderingListConversionsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConversionList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ConversionList.DeserializeConversionList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<ConversionList, MixedRealityRemoteRenderingListConversionsHeaders>(null, headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of all conversions. Returns a batch of conversions- if more conversions are available the @nextLink property contains the a URL where the next batch of conversions can be requested. This URL will need the same authentication as all calls to the Azure Remote Rendering API. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public ResponseWithHeaders<ConversionList, MixedRealityRemoteRenderingListConversionsHeaders> ListConversionsNextPage(string nextLink, Guid accountId, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListConversionsNextPageRequest(nextLink, accountId);
            _pipeline.Send(message, cancellationToken);
            var headers = new MixedRealityRemoteRenderingListConversionsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ConversionList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ConversionList.DeserializeConversionList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<ConversionList, MixedRealityRemoteRenderingListConversionsHeaders>(null, headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSessionsNextPageRequest(string nextLink, Guid accountId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a list of all rendering sessions. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<ResponseWithHeaders<SessionsList, MixedRealityRemoteRenderingListSessionsHeaders>> ListSessionsNextPageAsync(string nextLink, Guid accountId, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListSessionsNextPageRequest(nextLink, accountId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new MixedRealityRemoteRenderingListSessionsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionsList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SessionsList.DeserializeSessionsList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<SessionsList, MixedRealityRemoteRenderingListSessionsHeaders>(null, headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a list of all rendering sessions. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountId"> the Azure Remote Rendering account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public ResponseWithHeaders<SessionsList, MixedRealityRemoteRenderingListSessionsHeaders> ListSessionsNextPage(string nextLink, Guid accountId, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListSessionsNextPageRequest(nextLink, accountId);
            _pipeline.Send(message, cancellationToken);
            var headers = new MixedRealityRemoteRenderingListSessionsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionsList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SessionsList.DeserializeSessionsList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                case 401:
                case 403:
                case 429:
                    return ResponseWithHeaders.FromValue<SessionsList, MixedRealityRemoteRenderingListSessionsHeaders>(null, headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
