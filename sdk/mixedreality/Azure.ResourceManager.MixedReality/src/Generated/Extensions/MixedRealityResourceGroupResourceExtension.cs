// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.MixedReality;

namespace Azure.ResourceManager.MixedReality.Mock
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    public partial class MixedRealityResourceGroupResourceExtension : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MixedRealityResourceGroupResourceExtension"/> class for mocking. </summary>
        protected MixedRealityResourceGroupResourceExtension()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MixedRealityResourceGroupResourceExtension"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MixedRealityResourceGroupResourceExtension(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of SpatialAnchorsAccountResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of SpatialAnchorsAccountResources and their operations over a SpatialAnchorsAccountResource. </returns>
        public virtual SpatialAnchorsAccountCollection GetSpatialAnchorsAccounts()
        {
            return GetCachedClient(Client => new SpatialAnchorsAccountCollection(Client, Id));
        }

        /// <summary> Gets a collection of RemoteRenderingAccountResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of RemoteRenderingAccountResources and their operations over a RemoteRenderingAccountResource. </returns>
        public virtual RemoteRenderingAccountCollection GetRemoteRenderingAccounts()
        {
            return GetCachedClient(Client => new RemoteRenderingAccountCollection(Client, Id));
        }
    }
}
