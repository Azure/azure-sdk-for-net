// <auto-generated/>

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using Azure.ResourceManager.MixedReality;
using Azure.ResourceManager.MixedReality.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.MixedReality;

[ModelReaderWriterBuildable(typeof(RemoteRenderingAccountData))]
[ModelReaderWriterBuildable(typeof(RemoteRenderingAccountResource))]
[ModelReaderWriterBuildable(typeof(SpatialAnchorsAccountData))]
[ModelReaderWriterBuildable(typeof(SpatialAnchorsAccountResource))]
[ModelReaderWriterBuildable(typeof(MixedRealityAccountKeyRegenerateContent))]
[ModelReaderWriterBuildable(typeof(MixedRealityAccountKeys))]
[ModelReaderWriterBuildable(typeof(MixedRealityNameAvailabilityContent))]
[ModelReaderWriterBuildable(typeof(MixedRealityNameAvailabilityResult))]
[ModelReaderWriterBuildable(typeof(MixedRealitySku))]
[ModelReaderWriterBuildable(typeof(RemoteRenderingAccountListResult))]
[ModelReaderWriterBuildable(typeof(SpatialAnchorsAccountListResult))]
public partial class AzureResourceManagerMixedRealityContext
{
    // TODO: This is workaround to get AzureResourceManagerContext, we will remove this when we fix the dependency context generation issue in System.ClientModel.
    private static AzureResourceManagerContext s_managerContext;
    private AzureResourceManagerContext ArmContext => s_managerContext ??= AzureResourceManagerContext.Default;

    partial void AddAdditionalFactories(Dictionary<Type, Func<ModelReaderWriterTypeBuilder>> factories)
    {
        factories.Add(typeof(ManagedServiceIdentity), () => ArmContext.GetTypeBuilder(typeof(ManagedServiceIdentity)));
    }
}
