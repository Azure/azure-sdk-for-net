// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceBus;
using Azure.ResourceManager.ServiceBus.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceBus.Tests.Mock
{
    /// <summary> Test for ServiceBusQueueAuthorizationRuleResource. </summary>
    public partial class ServiceBusQueueAuthorizationRuleResourceMockTests : MockTestBase
    {
        public ServiceBusQueueAuthorizationRuleResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: QueueAuthorizationRuleDelete

            var serviceBusQueueAuthorizationRuleResourceId = ServiceBus.ServiceBusQueueAuthorizationRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-namespace-7982", "sdk-Queues-2317", "sdk-AuthRules-5800");
            var serviceBusQueueAuthorizationRuleResource = GetArmClient().GetServiceBusQueueAuthorizationRuleResource(serviceBusQueueAuthorizationRuleResourceId);
            await serviceBusQueueAuthorizationRuleResource.DeleteAsync(WaitUntil.Completed);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: QueueAuthorizationRuleGet

            var serviceBusQueueAuthorizationRuleResourceId = ServiceBus.ServiceBusQueueAuthorizationRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-Namespace-7982", "sdk-Queues-2317", "sdk-AuthRules-5800");
            var serviceBusQueueAuthorizationRuleResource = GetArmClient().GetServiceBusQueueAuthorizationRuleResource(serviceBusQueueAuthorizationRuleResourceId);
            await serviceBusQueueAuthorizationRuleResource.GetAsync();
        }

        [RecordedTest]
        public async Task GetKeys()
        {
            // Example: QueueAuthorizationRuleListKey

            var serviceBusQueueAuthorizationRuleResourceId = ServiceBus.ServiceBusQueueAuthorizationRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-namespace-7982", "sdk-Queues-2317", "sdk-AuthRules-5800");
            var serviceBusQueueAuthorizationRuleResource = GetArmClient().GetServiceBusQueueAuthorizationRuleResource(serviceBusQueueAuthorizationRuleResourceId);
            await serviceBusQueueAuthorizationRuleResource.GetKeysAsync();
        }

        [RecordedTest]
        public async Task RegenerateKeys()
        {
            // Example: QueueAuthorizationRuleRegenerateKey

            var serviceBusQueueAuthorizationRuleResourceId = ServiceBus.ServiceBusQueueAuthorizationRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-namespace-7982", "sdk-Queues-2317", "sdk-AuthRules-5800");
            var serviceBusQueueAuthorizationRuleResource = GetArmClient().GetServiceBusQueueAuthorizationRuleResource(serviceBusQueueAuthorizationRuleResourceId);
            await serviceBusQueueAuthorizationRuleResource.RegenerateKeysAsync(new ServiceBusRegenerateAccessKeyContent(ServiceBusAccessKeyType.PrimaryKey));
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: QueueAuthorizationRuleCreate

            var serviceBusQueueAuthorizationRuleResourceId = ServiceBus.ServiceBusQueueAuthorizationRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-Namespace-7982", "sdk-Queues-2317", "sdk-AuthRules-5800");
            var serviceBusQueueAuthorizationRuleResource = GetArmClient().GetServiceBusQueueAuthorizationRuleResource(serviceBusQueueAuthorizationRuleResourceId);
            await serviceBusQueueAuthorizationRuleResource.UpdateAsync(WaitUntil.Completed, new ServiceBusAuthorizationRuleData()
            {
                Rights =
{
ServiceBusAccessRight.Listen,ServiceBusAccessRight.Send
},
            });
        }
    }
}
