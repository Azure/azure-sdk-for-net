// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceBus;
using Azure.ResourceManager.ServiceBus.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceBus.Tests.Mock
{
    /// <summary> Test for ServiceBusPrivateEndpointConnectionResource. </summary>
    public partial class ServiceBusPrivateEndpointConnectionResourceMockTests : MockTestBase
    {
        public ServiceBusPrivateEndpointConnectionResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: NameSpacePrivateEndPointConnectionDelete

            var serviceBusPrivateEndpointConnectionResourceId = ServiceBus.ServiceBusPrivateEndpointConnectionResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-Namespace-3285", "928c44d5-b7c6-423b-b6fa-811e0c27b3e0");
            var serviceBusPrivateEndpointConnectionResource = GetArmClient().GetServiceBusPrivateEndpointConnectionResource(serviceBusPrivateEndpointConnectionResourceId);
            await serviceBusPrivateEndpointConnectionResource.DeleteAsync(WaitUntil.Completed);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: NameSpacePrivateEndPointConnectionGet

            var serviceBusPrivateEndpointConnectionResourceId = ServiceBus.ServiceBusPrivateEndpointConnectionResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "SDK-ServiceBus-4794", "sdk-Namespace-5828", "privateEndpointConnectionName");
            var serviceBusPrivateEndpointConnectionResource = GetArmClient().GetServiceBusPrivateEndpointConnectionResource(serviceBusPrivateEndpointConnectionResourceId);
            await serviceBusPrivateEndpointConnectionResource.GetAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: NameSpacePrivateEndPointConnectionCreate

            var serviceBusPrivateEndpointConnectionResourceId = ServiceBus.ServiceBusPrivateEndpointConnectionResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-Namespace-2924", "privateEndpointConnectionName");
            var serviceBusPrivateEndpointConnectionResource = GetArmClient().GetServiceBusPrivateEndpointConnectionResource(serviceBusPrivateEndpointConnectionResourceId);
            await serviceBusPrivateEndpointConnectionResource.UpdateAsync(WaitUntil.Completed, new ServiceBusPrivateEndpointConnectionData()
            {
                PrivateEndpointId = new ResourceIdentifier("/subscriptions/dbedb4e0-40e6-4145-81f3-f1314c150774/resourceGroups/SDK-ServiceBus-8396/providers/Microsoft.Network/privateEndpoints/sdk-Namespace-2847"),
                ConnectionState = new ServiceBusPrivateLinkServiceConnectionState()
                {
                    Status = ServiceBusPrivateLinkConnectionStatus.Rejected,
                    Description = "testing",
                },
                ProvisioningState = ServiceBusPrivateEndpointConnectionProvisioningState.Succeeded,
            });
        }
    }
}
