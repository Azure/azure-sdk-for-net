// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceBus;
using Azure.ResourceManager.ServiceBus.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceBus.Tests.Mock
{
    /// <summary> Test for ServiceBusNetworkRuleSetResource. </summary>
    public partial class ServiceBusNetworkRuleSetResourceMockTests : MockTestBase
    {
        public ServiceBusNetworkRuleSetResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: NameSpaceNetworkRuleSetCreate

            var serviceBusNetworkRuleSetResourceId = ServiceBus.ServiceBusNetworkRuleSetResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroup", "sdk-Namespace-6019");
            var serviceBusNetworkRuleSetResource = GetArmClient().GetServiceBusNetworkRuleSetResource(serviceBusNetworkRuleSetResourceId);
            await serviceBusNetworkRuleSetResource.CreateOrUpdateAsync(WaitUntil.Completed, new ServiceBusNetworkRuleSetData()
            {
                DefaultAction = ServiceBusNetworkRuleSetDefaultAction.Deny,
                VirtualNetworkRules =
{
new ServiceBusNetworkRuleSetVirtualNetworkRules()
{
SubnetId = new ResourceIdentifier("/subscriptions/854d368f-1828-428f-8f3c-f2affa9b2f7d/resourcegroups/alitest/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet2"),
IgnoreMissingVnetServiceEndpoint = true,
},new ServiceBusNetworkRuleSetVirtualNetworkRules()
{
SubnetId = new ResourceIdentifier("/subscriptions/854d368f-1828-428f-8f3c-f2affa9b2f7d/resourcegroups/alitest/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet3"),
IgnoreMissingVnetServiceEndpoint = false,
},new ServiceBusNetworkRuleSetVirtualNetworkRules()
{
SubnetId = new ResourceIdentifier("/subscriptions/854d368f-1828-428f-8f3c-f2affa9b2f7d/resourcegroups/alitest/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet6"),
IgnoreMissingVnetServiceEndpoint = false,
}
},
                IPRules =
{
new ServiceBusNetworkRuleSetIPRules()
{
IPMask = "1.1.1.1",
Action = ServiceBusNetworkRuleIPAction.Allow,
},new ServiceBusNetworkRuleSetIPRules()
{
IPMask = "1.1.1.2",
Action = ServiceBusNetworkRuleIPAction.Allow,
},new ServiceBusNetworkRuleSetIPRules()
{
IPMask = "1.1.1.3",
Action = ServiceBusNetworkRuleIPAction.Allow,
},new ServiceBusNetworkRuleSetIPRules()
{
IPMask = "1.1.1.4",
Action = ServiceBusNetworkRuleIPAction.Allow,
},new ServiceBusNetworkRuleSetIPRules()
{
IPMask = "1.1.1.5",
Action = ServiceBusNetworkRuleIPAction.Allow,
}
},
            });
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: NameSpaceNetworkRuleSetGet

            var serviceBusNetworkRuleSetResourceId = ServiceBus.ServiceBusNetworkRuleSetResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroup", "sdk-Namespace-6019");
            var serviceBusNetworkRuleSetResource = GetArmClient().GetServiceBusNetworkRuleSetResource(serviceBusNetworkRuleSetResourceId);
            await serviceBusNetworkRuleSetResource.GetAsync();
        }
    }
}
