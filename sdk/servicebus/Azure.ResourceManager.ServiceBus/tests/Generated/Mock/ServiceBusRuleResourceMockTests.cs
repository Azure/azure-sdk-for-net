// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceBus;
using Azure.ResourceManager.ServiceBus.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceBus.Tests.Mock
{
    /// <summary> Test for ServiceBusRuleResource. </summary>
    public partial class ServiceBusRuleResourceMockTests : MockTestBase
    {
        public ServiceBusRuleResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: RulesDelete

            var serviceBusRuleResourceId = ServiceBus.ServiceBusRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-Namespace-1319", "sdk-Topics-2081", "sdk-Subscriptions-8691", "sdk-Rules-6571");
            var serviceBusRuleResource = GetArmClient().GetServiceBusRuleResource(serviceBusRuleResourceId);
            await serviceBusRuleResource.DeleteAsync(WaitUntil.Completed);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: RulesGet

            var serviceBusRuleResourceId = ServiceBus.ServiceBusRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-Namespace-1319", "sdk-Topics-2081", "sdk-Subscriptions-8691", "sdk-Rules-6571");
            var serviceBusRuleResource = GetArmClient().GetServiceBusRuleResource(serviceBusRuleResourceId);
            await serviceBusRuleResource.GetAsync();
        }

        [RecordedTest]
        public async Task Update_RulesCreateCorrelationFilter()
        {
            // Example: RulesCreateCorrelationFilter

            var serviceBusRuleResourceId = ServiceBus.ServiceBusRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroupName", "sdk-Namespace-1319", "sdk-Topics-2081", "sdk-Subscriptions-8691", "sdk-Rules-6571");
            var serviceBusRuleResource = GetArmClient().GetServiceBusRuleResource(serviceBusRuleResourceId);
            await serviceBusRuleResource.UpdateAsync(WaitUntil.Completed, new ServiceBusRuleData()
            {
                FilterType = FilterType.CorrelationFilter,
                CorrelationFilter = new CorrelationFilter()
                {
                    Properties =
{
["topicHint"] = "Crop",
},
                },
            });
        }

        [RecordedTest]
        public async Task Update_RulesCreateOrUpdate()
        {
            // Example: RulesCreateOrUpdate

            var serviceBusRuleResourceId = ServiceBus.ServiceBusRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroupName", "sdk-Namespace-1319", "sdk-Topics-2081", "sdk-Subscriptions-8691", "sdk-Rules-6571");
            var serviceBusRuleResource = GetArmClient().GetServiceBusRuleResource(serviceBusRuleResourceId);
            await serviceBusRuleResource.UpdateAsync(WaitUntil.Completed, new ServiceBusRuleData());
        }

        [RecordedTest]
        public async Task Update_RulesCreateSqlFilter()
        {
            // Example: RulesCreateSqlFilter

            var serviceBusRuleResourceId = ServiceBus.ServiceBusRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroupName", "sdk-Namespace-1319", "sdk-Topics-2081", "sdk-Subscriptions-8691", "sdk-Rules-6571");
            var serviceBusRuleResource = GetArmClient().GetServiceBusRuleResource(serviceBusRuleResourceId);
            await serviceBusRuleResource.UpdateAsync(WaitUntil.Completed, new ServiceBusRuleData()
            {
                FilterType = FilterType.SqlFilter,
                SqlFilter = new SqlFilter()
                {
                    SqlExpression = "myproperty=test",
                },
            });
        }
    }
}
