// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ServiceBus.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ServiceBus.Samples
{
    public partial class Sample_NetworkRuleSetResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_NameSpaceNetworkRuleSetGet()
        {
            // Generated from example definition: specification/servicebus/resource-manager/Microsoft.ServiceBus/stable/2024-01-01/examples/NameSpaces/VirtualNetworkRule/SBNetworkRuleSetGet.json
            // this example is just showing the usage of "Namespaces_GetNetworkRuleSet" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkRuleSetResource created on azure
            // for more information of creating NetworkRuleSetResource, please refer to the document of NetworkRuleSetResource
            string subscriptionId = "5f750a97-50d9-4e36-8081-c9ee4c0210d4";
            string resourceGroupName = "ResourceGroup";
            string namespaceName = "sdk-Namespace-6019";
            ResourceIdentifier networkRuleSetResourceId = NetworkRuleSetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NetworkRuleSetResource networkRuleSet = client.GetNetworkRuleSetResource(networkRuleSetResourceId);

            // invoke the operation
            NetworkRuleSetResource result = await networkRuleSet.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkRuleSetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_NameSpaceNetworkRuleSetCreate()
        {
            // Generated from example definition: specification/servicebus/resource-manager/Microsoft.ServiceBus/stable/2024-01-01/examples/NameSpaces/VirtualNetworkRule/SBNetworkRuleSetCreate.json
            // this example is just showing the usage of "Namespaces_CreateOrUpdateNetworkRuleSet" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkRuleSetResource created on azure
            // for more information of creating NetworkRuleSetResource, please refer to the document of NetworkRuleSetResource
            string subscriptionId = "5f750a97-50d9-4e36-8081-c9ee4c0210d4";
            string resourceGroupName = "ResourceGroup";
            string namespaceName = "sdk-Namespace-6019";
            ResourceIdentifier networkRuleSetResourceId = NetworkRuleSetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, namespaceName);
            NetworkRuleSetResource networkRuleSet = client.GetNetworkRuleSetResource(networkRuleSetResourceId);

            // invoke the operation
            NetworkRuleSetData data = new NetworkRuleSetData
            {
                DefaultAction = DefaultAction.Deny,
                VirtualNetworkRules = {new NWRuleSetVirtualNetworkRules
{
SubnetId = new ResourceIdentifier("/subscriptions/854d368f-1828-428f-8f3c-f2affa9b2f7d/resourcegroups/alitest/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet2"),
IgnoreMissingVnetServiceEndpoint = true,
}, new NWRuleSetVirtualNetworkRules
{
SubnetId = new ResourceIdentifier("/subscriptions/854d368f-1828-428f-8f3c-f2affa9b2f7d/resourcegroups/alitest/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet3"),
IgnoreMissingVnetServiceEndpoint = false,
}, new NWRuleSetVirtualNetworkRules
{
SubnetId = new ResourceIdentifier("/subscriptions/854d368f-1828-428f-8f3c-f2affa9b2f7d/resourcegroups/alitest/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet6"),
IgnoreMissingVnetServiceEndpoint = false,
}},
                IPRules = {new NWRuleSetIPRules
{
IPMask = "1.1.1.1",
Action = NetworkRuleIPAction.Allow,
}, new NWRuleSetIPRules
{
IPMask = "1.1.1.2",
Action = NetworkRuleIPAction.Allow,
}, new NWRuleSetIPRules
{
IPMask = "1.1.1.3",
Action = NetworkRuleIPAction.Allow,
}, new NWRuleSetIPRules
{
IPMask = "1.1.1.4",
Action = NetworkRuleIPAction.Allow,
}, new NWRuleSetIPRules
{
IPMask = "1.1.1.5",
Action = NetworkRuleIPAction.Allow,
}},
            };
            ArmOperation<NetworkRuleSetResource> lro = await networkRuleSet.CreateOrUpdateAsync(WaitUntil.Completed, data);
            NetworkRuleSetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkRuleSetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
