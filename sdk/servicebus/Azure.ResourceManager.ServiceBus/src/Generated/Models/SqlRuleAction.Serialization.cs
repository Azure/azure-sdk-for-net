// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceBus.Models
{
    public partial class SqlRuleAction : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SqlExpression))
            {
                writer.WritePropertyName("sqlExpression");
                writer.WriteStringValue(SqlExpression);
            }
            if (Optional.IsDefined(CompatibilityLevel))
            {
                writer.WritePropertyName("compatibilityLevel");
                writer.WriteNumberValue(CompatibilityLevel.Value);
            }
            if (Optional.IsDefined(RequiresPreprocessing))
            {
                writer.WritePropertyName("requiresPreprocessing");
                writer.WriteBooleanValue(RequiresPreprocessing.Value);
            }
            writer.WriteEndObject();
        }

        internal static SqlRuleAction DeserializeSqlRuleAction(JsonElement element)
        {
            Optional<string> sqlExpression = default;
            Optional<int> compatibilityLevel = default;
            Optional<bool> requiresPreprocessing = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sqlExpression"))
                {
                    sqlExpression = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("compatibilityLevel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    compatibilityLevel = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("requiresPreprocessing"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    requiresPreprocessing = property.Value.GetBoolean();
                    continue;
                }
            }
            return new SqlRuleAction(sqlExpression.Value, Optional.ToNullable(compatibilityLevel), Optional.ToNullable(requiresPreprocessing));
        }
    }
}
