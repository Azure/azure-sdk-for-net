// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ServiceBus.Models
{
    /// <summary> Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline. </summary>
    public partial class ServiceBusSqlFilter
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="ServiceBusSqlFilter"/>. </summary>
        public ServiceBusSqlFilter()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ServiceBusSqlFilter"/>. </summary>
        /// <param name="sqlExpression"> The SQL expression. e.g. MyProperty='ABC'. </param>
        /// <param name="compatibilityLevel"> This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20. </param>
        /// <param name="requiresPreprocessing"> Value that indicates whether the rule action requires preprocessing. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal ServiceBusSqlFilter(string sqlExpression, int? compatibilityLevel, bool? requiresPreprocessing, Dictionary<string, BinaryData> rawData)
        {
            SqlExpression = sqlExpression;
            CompatibilityLevel = compatibilityLevel;
            RequiresPreprocessing = requiresPreprocessing;
            _rawData = rawData;
        }

        /// <summary> The SQL expression. e.g. MyProperty='ABC'. </summary>
        public string SqlExpression { get; set; }
        /// <summary> This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20. </summary>
        public int? CompatibilityLevel { get; set; }
        /// <summary> Value that indicates whether the rule action requires preprocessing. </summary>
        public bool? RequiresPreprocessing { get; set; }
    }
}
