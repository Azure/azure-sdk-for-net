// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.ServiceBus.Models;

namespace Azure.ResourceManager.ServiceBus
{
    /// <summary> A class to add extension methods to Subscription. </summary>
    internal partial class SubscriptionExtensionClient : ArmResource
    {
        private ClientDiagnostics _serviceBusNamespaceNamespacesClientDiagnostics;
        private NamespacesRestOperations _serviceBusNamespaceNamespacesRestClient;
        private ClientDiagnostics _namespacesClientDiagnostics;
        private NamespacesRestOperations _namespacesRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionExtensionClient"/> class for mocking. </summary>
        protected SubscriptionExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ServiceBusNamespaceNamespacesClientDiagnostics => _serviceBusNamespaceNamespacesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ServiceBus", ServiceBusNamespace.ResourceType.Namespace, DiagnosticOptions);
        private NamespacesRestOperations ServiceBusNamespaceNamespacesRestClient => _serviceBusNamespaceNamespacesRestClient ??= new NamespacesRestOperations(ServiceBusNamespaceNamespacesClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(ServiceBusNamespace.ResourceType));
        private ClientDiagnostics NamespacesClientDiagnostics => _namespacesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ServiceBus", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private NamespacesRestOperations NamespacesRestClient => _namespacesRestClient ??= new NamespacesRestOperations(NamespacesClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            Client.TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/namespaces
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Namespaces_List
        /// <summary> Gets all the available namespaces within the subscription, irrespective of the resource groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServiceBusNamespace" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServiceBusNamespace> GetServiceBusNamespacesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ServiceBusNamespace>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ServiceBusNamespaceNamespacesClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetServiceBusNamespaces");
                scope.Start();
                try
                {
                    var response = await ServiceBusNamespaceNamespacesRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ServiceBusNamespace(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ServiceBusNamespace>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ServiceBusNamespaceNamespacesClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetServiceBusNamespaces");
                scope.Start();
                try
                {
                    var response = await ServiceBusNamespaceNamespacesRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ServiceBusNamespace(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/namespaces
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Namespaces_List
        /// <summary> Gets all the available namespaces within the subscription, irrespective of the resource groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServiceBusNamespace" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServiceBusNamespace> GetServiceBusNamespaces(CancellationToken cancellationToken = default)
        {
            Page<ServiceBusNamespace> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ServiceBusNamespaceNamespacesClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetServiceBusNamespaces");
                scope.Start();
                try
                {
                    var response = ServiceBusNamespaceNamespacesRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ServiceBusNamespace(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ServiceBusNamespace> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ServiceBusNamespaceNamespacesClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetServiceBusNamespaces");
                scope.Start();
                try
                {
                    var response = ServiceBusNamespaceNamespacesRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ServiceBusNamespace(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/CheckNameAvailability
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Namespaces_CheckNameAvailability
        /// <summary> Check the give namespace name availability. </summary>
        /// <param name="parameters"> Parameters to check availability of the given namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<CheckNameAvailabilityResult>> CheckServiceBusNameAvailabilityAsync(CheckNameAvailability parameters, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("SubscriptionExtensionClient.CheckServiceBusNameAvailability");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, parameters, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/CheckNameAvailability
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Namespaces_CheckNameAvailability
        /// <summary> Check the give namespace name availability. </summary>
        /// <param name="parameters"> Parameters to check availability of the given namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CheckNameAvailabilityResult> CheckServiceBusNameAvailability(CheckNameAvailability parameters, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("SubscriptionExtensionClient.CheckServiceBusNameAvailability");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.CheckNameAvailability(Id.SubscriptionId, parameters, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
