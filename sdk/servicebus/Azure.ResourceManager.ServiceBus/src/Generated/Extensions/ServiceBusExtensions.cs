// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.ServiceBus.Models;

namespace Azure.ResourceManager.ServiceBus
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.ServiceBus. </summary>
    public static partial class ServiceBusExtensions
    {
        private static SubscriptionExtensionClient GetExtensionClient(Subscription subscription)
        {
            return subscription.GetCachedClient((client) =>
            {
                return new SubscriptionExtensionClient(client, subscription.Id);
            }
            );
        }

        /// <summary>
        /// Gets all the available namespaces within the subscription, irrespective of the resource groups.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/namespaces
        /// Operation Id: Namespaces_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServiceBusNamespace" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ServiceBusNamespace> GetServiceBusNamespacesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetServiceBusNamespacesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the available namespaces within the subscription, irrespective of the resource groups.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/namespaces
        /// Operation Id: Namespaces_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServiceBusNamespace" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ServiceBusNamespace> GetServiceBusNamespaces(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetServiceBusNamespaces(cancellationToken);
        }

        /// <summary>
        /// Check the give namespace name availability.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/CheckNameAvailability
        /// Operation Id: Namespaces_CheckNameAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="parameters"> Parameters to check availability of the given namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public static async Task<Response<CheckNameAvailabilityResult>> CheckServiceBusNameAvailabilityAsync(this Subscription subscription, CheckNameAvailability parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(parameters, nameof(parameters));

            return await GetExtensionClient(subscription).CheckServiceBusNameAvailabilityAsync(parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check the give namespace name availability.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/CheckNameAvailability
        /// Operation Id: Namespaces_CheckNameAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="parameters"> Parameters to check availability of the given namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public static Response<CheckNameAvailabilityResult> CheckServiceBusNameAvailability(this Subscription subscription, CheckNameAvailability parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(parameters, nameof(parameters));

            return GetExtensionClient(subscription).CheckServiceBusNameAvailability(parameters, cancellationToken);
        }

        private static ResourceGroupExtensionClient GetExtensionClient(ResourceGroup resourceGroup)
        {
            return resourceGroup.GetCachedClient((client) =>
            {
                return new ResourceGroupExtensionClient(client, resourceGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of ServiceBusNamespaces in the ServiceBusNamespace. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ServiceBusNamespaces and their operations over a ServiceBusNamespace. </returns>
        public static ServiceBusNamespaceCollection GetServiceBusNamespaces(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetServiceBusNamespaces();
        }

        /// <summary>
        /// Gets a description for the specified namespace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}
        /// Operation Id: Namespaces_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="namespaceName"> The namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="namespaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="namespaceName"/> is null. </exception>
        public static async Task<Response<ServiceBusNamespace>> GetServiceBusNamespaceAsync(this ResourceGroup resourceGroup, string namespaceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetServiceBusNamespaces().GetAsync(namespaceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a description for the specified namespace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}
        /// Operation Id: Namespaces_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="namespaceName"> The namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="namespaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="namespaceName"/> is null. </exception>
        public static Response<ServiceBusNamespace> GetServiceBusNamespace(this ResourceGroup resourceGroup, string namespaceName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetServiceBusNamespaces().Get(namespaceName, cancellationToken);
        }

        #region ServiceBusNamespace
        /// <summary>
        /// Gets an object representing a <see cref="ServiceBusNamespace" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceBusNamespace.CreateResourceIdentifier" /> to create a <see cref="ServiceBusNamespace" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceBusNamespace" /> object. </returns>
        public static ServiceBusNamespace GetServiceBusNamespace(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceBusNamespace.ValidateResourceId(id);
                return new ServiceBusNamespace(client, id);
            }
            );
        }
        #endregion

        #region NetworkRuleSet
        /// <summary>
        /// Gets an object representing a <see cref="NetworkRuleSet" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NetworkRuleSet.CreateResourceIdentifier" /> to create a <see cref="NetworkRuleSet" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NetworkRuleSet" /> object. </returns>
        public static NetworkRuleSet GetNetworkRuleSet(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NetworkRuleSet.ValidateResourceId(id);
                return new NetworkRuleSet(client, id);
            }
            );
        }
        #endregion

        #region PrivateEndpointConnection
        /// <summary>
        /// Gets an object representing a <see cref="PrivateEndpointConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PrivateEndpointConnection.CreateResourceIdentifier" /> to create a <see cref="PrivateEndpointConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateEndpointConnection" /> object. </returns>
        public static PrivateEndpointConnection GetPrivateEndpointConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PrivateEndpointConnection.ValidateResourceId(id);
                return new PrivateEndpointConnection(client, id);
            }
            );
        }
        #endregion

        #region DisasterRecovery
        /// <summary>
        /// Gets an object representing a <see cref="DisasterRecovery" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DisasterRecovery.CreateResourceIdentifier" /> to create a <see cref="DisasterRecovery" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DisasterRecovery" /> object. </returns>
        public static DisasterRecovery GetDisasterRecovery(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DisasterRecovery.ValidateResourceId(id);
                return new DisasterRecovery(client, id);
            }
            );
        }
        #endregion

        #region NamespaceDisasterRecoveryAuthorizationRule
        /// <summary>
        /// Gets an object representing a <see cref="NamespaceDisasterRecoveryAuthorizationRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NamespaceDisasterRecoveryAuthorizationRule.CreateResourceIdentifier" /> to create a <see cref="NamespaceDisasterRecoveryAuthorizationRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NamespaceDisasterRecoveryAuthorizationRule" /> object. </returns>
        public static NamespaceDisasterRecoveryAuthorizationRule GetNamespaceDisasterRecoveryAuthorizationRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NamespaceDisasterRecoveryAuthorizationRule.ValidateResourceId(id);
                return new NamespaceDisasterRecoveryAuthorizationRule(client, id);
            }
            );
        }
        #endregion

        #region NamespaceAuthorizationRule
        /// <summary>
        /// Gets an object representing a <see cref="NamespaceAuthorizationRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NamespaceAuthorizationRule.CreateResourceIdentifier" /> to create a <see cref="NamespaceAuthorizationRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NamespaceAuthorizationRule" /> object. </returns>
        public static NamespaceAuthorizationRule GetNamespaceAuthorizationRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NamespaceAuthorizationRule.ValidateResourceId(id);
                return new NamespaceAuthorizationRule(client, id);
            }
            );
        }
        #endregion

        #region NamespaceQueueAuthorizationRule
        /// <summary>
        /// Gets an object representing a <see cref="NamespaceQueueAuthorizationRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NamespaceQueueAuthorizationRule.CreateResourceIdentifier" /> to create a <see cref="NamespaceQueueAuthorizationRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NamespaceQueueAuthorizationRule" /> object. </returns>
        public static NamespaceQueueAuthorizationRule GetNamespaceQueueAuthorizationRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NamespaceQueueAuthorizationRule.ValidateResourceId(id);
                return new NamespaceQueueAuthorizationRule(client, id);
            }
            );
        }
        #endregion

        #region NamespaceTopicAuthorizationRule
        /// <summary>
        /// Gets an object representing a <see cref="NamespaceTopicAuthorizationRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NamespaceTopicAuthorizationRule.CreateResourceIdentifier" /> to create a <see cref="NamespaceTopicAuthorizationRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NamespaceTopicAuthorizationRule" /> object. </returns>
        public static NamespaceTopicAuthorizationRule GetNamespaceTopicAuthorizationRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NamespaceTopicAuthorizationRule.ValidateResourceId(id);
                return new NamespaceTopicAuthorizationRule(client, id);
            }
            );
        }
        #endregion

        #region MigrationConfigProperties
        /// <summary>
        /// Gets an object representing a <see cref="MigrationConfigProperties" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MigrationConfigProperties.CreateResourceIdentifier" /> to create a <see cref="MigrationConfigProperties" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MigrationConfigProperties" /> object. </returns>
        public static MigrationConfigProperties GetMigrationConfigProperties(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MigrationConfigProperties.ValidateResourceId(id);
                return new MigrationConfigProperties(client, id);
            }
            );
        }
        #endregion

        #region ServiceBusQueue
        /// <summary>
        /// Gets an object representing a <see cref="ServiceBusQueue" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceBusQueue.CreateResourceIdentifier" /> to create a <see cref="ServiceBusQueue" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceBusQueue" /> object. </returns>
        public static ServiceBusQueue GetServiceBusQueue(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceBusQueue.ValidateResourceId(id);
                return new ServiceBusQueue(client, id);
            }
            );
        }
        #endregion

        #region ServiceBusTopic
        /// <summary>
        /// Gets an object representing a <see cref="ServiceBusTopic" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceBusTopic.CreateResourceIdentifier" /> to create a <see cref="ServiceBusTopic" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceBusTopic" /> object. </returns>
        public static ServiceBusTopic GetServiceBusTopic(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceBusTopic.ValidateResourceId(id);
                return new ServiceBusTopic(client, id);
            }
            );
        }
        #endregion

        #region ServiceBusRule
        /// <summary>
        /// Gets an object representing a <see cref="ServiceBusRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceBusRule.CreateResourceIdentifier" /> to create a <see cref="ServiceBusRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceBusRule" /> object. </returns>
        public static ServiceBusRule GetServiceBusRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceBusRule.ValidateResourceId(id);
                return new ServiceBusRule(client, id);
            }
            );
        }
        #endregion

        #region ServiceBusSubscription
        /// <summary>
        /// Gets an object representing a <see cref="ServiceBusSubscription" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceBusSubscription.CreateResourceIdentifier" /> to create a <see cref="ServiceBusSubscription" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceBusSubscription" /> object. </returns>
        public static ServiceBusSubscription GetServiceBusSubscription(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceBusSubscription.ValidateResourceId(id);
                return new ServiceBusSubscription(client, id);
            }
            );
        }
        #endregion
    }
}
