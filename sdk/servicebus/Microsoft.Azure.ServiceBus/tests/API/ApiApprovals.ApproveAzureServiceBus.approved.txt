[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Microsoft.Azure.ServiceBus.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100d15ddcb29688295338af4b7686603fe614abd555e09efba8fb88ee09e1f7b1ccaeed2e8f823fa9eef3fdd60217fc012ea67d2479751a0b8c087a4185541b851bd8b16f8d91b840e51b1cb0ba6fe647997e57429265e85ef62d565db50a69ae1647d54d7bd855e4db3d8a91510e5bcbd0edfbbecaa20a7bd9ae74593daa7b11b4")]
namespace Microsoft.Azure.ServiceBus
{
    public abstract class ClientEntity : Microsoft.Azure.ServiceBus.IClientEntity
    {
        protected ClientEntity(string clientTypeName, string postfix, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy) { }
        public string ClientId { get; }
        public bool IsClosedOrClosing { get; }
        public bool OwnsConnection { get; }
        public abstract string Path { get; }
        public abstract System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public Microsoft.Azure.ServiceBus.RetryPolicy RetryPolicy { get; }
        public abstract Microsoft.Azure.ServiceBus.ServiceBusConnection ServiceBusConnection { get; }
        public abstract System.TimeSpan OperationTimeout { get; set; }
        public System.Threading.Tasks.Task CloseAsync() { }
        protected abstract System.Threading.Tasks.Task OnClosingAsync();
        public abstract void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin);
        protected virtual void ThrowIfClosed() { }
        public abstract void UnregisterPlugin(string serviceBusPluginName);
        protected static string GenerateClientId(string clientTypeName, string postfix = "") { }
        protected static long GetNextId() { }
    }
    public sealed class CorrelationFilter : Microsoft.Azure.ServiceBus.Filter
    {
        public CorrelationFilter() { }
        public CorrelationFilter(string correlationId) { }
        public string ContentType { get; set; }
        public string CorrelationId { get; set; }
        public string Label { get; set; }
        public string MessageId { get; set; }
        public System.Collections.Generic.IDictionary<string, object> Properties { get; }
        public string ReplyTo { get; set; }
        public string ReplyToSessionId { get; set; }
        public string SessionId { get; set; }
        public string To { get; set; }
        public override bool Equals(Microsoft.Azure.ServiceBus.Filter other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool !=(Microsoft.Azure.ServiceBus.CorrelationFilter p1, Microsoft.Azure.ServiceBus.CorrelationFilter p2) { }
        public static bool ==(Microsoft.Azure.ServiceBus.CorrelationFilter o1, Microsoft.Azure.ServiceBus.CorrelationFilter o2) { }
    }
    public static class EntityNameHelper
    {
        public static string FormatDeadLetterPath(string entityPath) { }
        public static string FormatRulePath(string topicPath, string subscriptionName, string ruleName) { }
        public static string FormatSubQueuePath(string entityPath, string subQueueName) { }
        public static string FormatSubscriptionPath(string topicPath, string subscriptionName) { }
        public static string FormatTransferDeadLetterPath(string entityPath) { }
    }
    public class ExceptionReceivedContext
    {
        public ExceptionReceivedContext(string action, string endpoint, string entityPath, string clientId) { }
        public string Action { get; }
        public string ClientId { get; }
        public string Endpoint { get; }
        public string EntityPath { get; }
    }
    public sealed class ExceptionReceivedEventArgs : System.EventArgs
    {
        public ExceptionReceivedEventArgs(System.Exception exception, string action, string endpoint, string entityName, string clientId) { }
        public System.Exception Exception { get; }
        public Microsoft.Azure.ServiceBus.ExceptionReceivedContext ExceptionReceivedContext { get; }
    }
    public static class ExceptionReceivedEventArgsAction
    {
        public const string Abandon = "Abandon";
        public const string AcceptMessageSession = "AcceptMessageSession";
        public const string CloseMessageSession = "CloseMessageSession";
        public const string Complete = "Complete";
        public const string Receive = "Receive";
        public const string RenewLock = "RenewLock";
        public const string UserCallback = "UserCallback";
    }
    public sealed class FalseFilter : Microsoft.Azure.ServiceBus.SqlFilter
    {
        public FalseFilter() { }
        public override bool Equals(Microsoft.Azure.ServiceBus.Filter other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool !=(Microsoft.Azure.ServiceBus.FalseFilter o1, Microsoft.Azure.ServiceBus.FalseFilter o2) { }
        public static bool ==(Microsoft.Azure.ServiceBus.FalseFilter o1, Microsoft.Azure.ServiceBus.FalseFilter o2) { }
    }
    public abstract class Filter : System.IEquatable<Microsoft.Azure.ServiceBus.Filter>
    {
        public abstract bool Equals(Microsoft.Azure.ServiceBus.Filter other);
    }
    public interface IClientEntity
    {
        string ClientId { get; }
        bool IsClosedOrClosing { get; }
        System.TimeSpan OperationTimeout { get; set; }
        bool OwnsConnection { get; }
        string Path { get; }
        System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        Microsoft.Azure.ServiceBus.ServiceBusConnection ServiceBusConnection { get; }
        System.Threading.Tasks.Task CloseAsync();
        void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin);
        void UnregisterPlugin(string serviceBusPluginName);
    }
    public interface IMessageSession : Microsoft.Azure.ServiceBus.Core.IMessageReceiver, Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        System.DateTime LockedUntilUtc { get; }
        string SessionId { get; }
        System.Threading.Tasks.Task<byte[]> GetStateAsync();
        System.Threading.Tasks.Task RenewSessionLockAsync();
        System.Threading.Tasks.Task SetStateAsync(byte[] sessionState);
    }
    public interface IQueueClient : Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        string QueueName { get; }
        void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.SessionHandlerOptions sessionHandlerOptions);
        void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler);
        System.Threading.Tasks.Task UnregisterSessionHandlerAsync(System.TimeSpan inflightSessionHandlerTasksWaitTimeout);
    }
    public interface ISessionClient : Microsoft.Azure.ServiceBus.IClientEntity
    {
        string EntityPath { get; }
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync();
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(string sessionId);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(System.TimeSpan operationTimeout);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(string sessionId, System.TimeSpan operationTimeout);
    }
    public interface ISubscriptionClient : Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        string SubscriptionName { get; }
        string TopicPath { get; }
        System.Threading.Tasks.Task AddRuleAsync(Microsoft.Azure.ServiceBus.RuleDescription description);
        System.Threading.Tasks.Task AddRuleAsync(string ruleName, Microsoft.Azure.ServiceBus.Filter filter);
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.ServiceBus.RuleDescription>> GetRulesAsync();
        void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.SessionHandlerOptions sessionHandlerOptions);
        void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler);
        System.Threading.Tasks.Task RemoveRuleAsync(string ruleName);
        System.Threading.Tasks.Task UnregisterSessionHandlerAsync(System.TimeSpan inflightSessionHandlerTasksWaitTimeout);
    }
    public interface ITopicClient : Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        string TopicName { get; }
    }
    public class Message
    {
        public static string DeadLetterErrorDescriptionHeader;
        public static string DeadLetterReasonHeader;
        public Message() { }
        public Message(byte[] body) { }
        public byte[] Body { get; set; }
        public string ContentType { get; set; }
        public string CorrelationId { get; set; }
        public System.DateTime ExpiresAtUtc { get; }
        public string Label { get; set; }
        public string MessageId { get; set; }
        public string PartitionKey { get; set; }
        public string ReplyTo { get; set; }
        public string ReplyToSessionId { get; set; }
        public System.DateTime ScheduledEnqueueTimeUtc { get; set; }
        public string SessionId { get; set; }
        public long Size { get; }
        public Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection SystemProperties { get; }
        public System.TimeSpan TimeToLive { get; set; }
        public string To { get; set; }
        public System.Collections.Generic.IDictionary<string, object> UserProperties { get; }
        public string ViaPartitionKey { get; set; }
        public Microsoft.Azure.ServiceBus.Message Clone() { }
        public override string ToString() { }
        public sealed class SystemPropertiesCollection
        {
            public SystemPropertiesCollection() { }
            public string DeadLetterSource { get; }
            public int DeliveryCount { get; }
            public long EnqueuedSequenceNumber { get; }
            public System.DateTime EnqueuedTimeUtc { get; }
            public bool IsLockTokenSet { get; }
            public bool IsReceived { get; }
            public string LockToken { get; }
            public System.DateTime LockedUntilUtc { get; }
            public long SequenceNumber { get; }
        }
    }
    public sealed class MessageHandlerOptions
    {
        public MessageHandlerOptions(System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public bool AutoComplete { get; set; }
        public System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> ExceptionReceivedHandler { get; }
        public System.TimeSpan MaxAutoRenewDuration { get; set; }
        public int MaxConcurrentCalls { get; set; }
    }
    public sealed class MessageLockLostException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public MessageLockLostException(string message) { }
        public MessageLockLostException(string message, System.Exception innerException) { }
    }
    public sealed class MessageNotFoundException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public MessageNotFoundException(string message) { }
        public MessageNotFoundException(string message, System.Exception innerException) { }
    }
    public sealed class MessageSizeExceededException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public MessageSizeExceededException(string message) { }
        public MessageSizeExceededException(string message, System.Exception innerException) { }
    }
    public sealed class MessagingEntityDisabledException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public MessagingEntityDisabledException(string message) { }
        public MessagingEntityDisabledException(string message, System.Exception innerException) { }
    }
    public sealed class MessagingEntityNotFoundException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public MessagingEntityNotFoundException(string message) { }
        public MessagingEntityNotFoundException(string message, System.Exception innerException) { }
    }
    public sealed class NoRetry : Microsoft.Azure.ServiceBus.RetryPolicy
    {
        public NoRetry() { }
        protected override bool OnShouldRetry(System.TimeSpan remainingTime, int currentRetryCount, out System.TimeSpan retryInterval) { }
    }
    public class QueueClient : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity, Microsoft.Azure.ServiceBus.IQueueClient
    {
        public QueueClient(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public QueueClient(Microsoft.Azure.ServiceBus.ServiceBusConnection serviceBusConnection, string entityPath, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy) { }
        public QueueClient(string connectionString, string entityPath, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public QueueClient(string endpoint, string entityPath, Microsoft.Azure.ServiceBus.Primitives.ITokenProvider tokenProvider, Microsoft.Azure.ServiceBus.TransportType transportType = 0, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public override string Path { get; }
        public int PrefetchCount { get; set; }
        public string QueueName { get; }
        public Microsoft.Azure.ServiceBus.ReceiveMode ReceiveMode { get; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public override Microsoft.Azure.ServiceBus.ServiceBusConnection ServiceBusConnection { get; }
        public override System.TimeSpan OperationTimeout { get; set; }
        public System.Threading.Tasks.Task AbandonAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null) { }
        public System.Threading.Tasks.Task CancelScheduledMessageAsync(long sequenceNumber) { }
        public System.Threading.Tasks.Task CompleteAsync(string lockToken) { }
        public System.Threading.Tasks.Task DeadLetterAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null) { }
        public System.Threading.Tasks.Task DeadLetterAsync(string lockToken, string deadLetterReason, string deadLetterErrorDescription = null) { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.MessageHandlerOptions messageHandlerOptions) { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.SessionHandlerOptions sessionHandlerOptions) { }
        public void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public System.Threading.Tasks.Task<long> ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message message, System.DateTimeOffset scheduleEnqueueTimeUtc) { }
        public System.Threading.Tasks.Task SendAsync(Microsoft.Azure.ServiceBus.Message message) { }
        public System.Threading.Tasks.Task SendAsync(System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message> messageList) { }
        public System.Threading.Tasks.Task UnregisterMessageHandlerAsync(System.TimeSpan inflightMessageHandlerTasksWaitTimeout) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
        public System.Threading.Tasks.Task UnregisterSessionHandlerAsync(System.TimeSpan inflightSessionHandlerTasksWaitTimeout) { }
    }
    public sealed class QuotaExceededException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public QuotaExceededException(string message) { }
        public QuotaExceededException(string message, System.Exception innerException) { }
    }
    public enum ReceiveMode
    {
        PeekLock = 0,
        ReceiveAndDelete = 1,
    }
    public sealed class RetryExponential : Microsoft.Azure.ServiceBus.RetryPolicy
    {
        public RetryExponential(System.TimeSpan minimumBackoff, System.TimeSpan maximumBackoff, int maximumRetryCount) { }
        public RetryExponential(System.TimeSpan minimumBackoff, System.TimeSpan maximumBackoff, System.TimeSpan deltaBackoff, int maxRetryCount) { }
        public System.TimeSpan DeltaBackoff { get; }
        public int MaxRetryCount { get; }
        public System.TimeSpan MaximumBackoff { get; }
        public System.TimeSpan MinimalBackoff { get; }
        protected override bool OnShouldRetry(System.TimeSpan remainingTime, int currentRetryCount, out System.TimeSpan retryInterval) { }
    }
    public abstract class RetryPolicy
    {
        protected RetryPolicy() { }
        public bool IsServerBusy { get; set; }
        public string ServerBusyExceptionMessage { get; set; }
        public static Microsoft.Azure.ServiceBus.RetryPolicy Default { get; }
        public static Microsoft.Azure.ServiceBus.RetryPolicy NoRetry { get; }
        public virtual bool IsRetryableException(System.Exception exception) { }
        protected abstract bool OnShouldRetry(System.TimeSpan remainingTime, int currentRetryCount, out System.TimeSpan retryInterval);
        public System.Threading.Tasks.Task RunOperation(System.Func<System.Threading.Tasks.Task> operation, System.TimeSpan operationTimeout) { }
    }
    public abstract class RuleAction : System.IEquatable<Microsoft.Azure.ServiceBus.RuleAction>
    {
        public abstract bool Equals(Microsoft.Azure.ServiceBus.RuleAction other);
    }
    public sealed class RuleDescription : System.IEquatable<Microsoft.Azure.ServiceBus.RuleDescription>
    {
        public const string DefaultRuleName = "$Default";
        public RuleDescription() { }
        [System.Obsolete("This constructor will be removed in next version, please use RuleDescription(stri" +
            "ng, Filter) instead.")]
        public RuleDescription(Microsoft.Azure.ServiceBus.Filter filter) { }
        public RuleDescription(string name) { }
        public RuleDescription(string name, Microsoft.Azure.ServiceBus.Filter filter) { }
        public Microsoft.Azure.ServiceBus.RuleAction Action { get; set; }
        public Microsoft.Azure.ServiceBus.Filter Filter { get; set; }
        public string Name { get; set; }
        public bool Equals(Microsoft.Azure.ServiceBus.RuleDescription otherRule) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool !=(Microsoft.Azure.ServiceBus.RuleDescription o1, Microsoft.Azure.ServiceBus.RuleDescription o2) { }
        public static bool ==(Microsoft.Azure.ServiceBus.RuleDescription o1, Microsoft.Azure.ServiceBus.RuleDescription o2) { }
    }
    public sealed class ServerBusyException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public ServerBusyException(string message) { }
        public ServerBusyException(string message, System.Exception innerException) { }
    }
    public class ServiceBusCommunicationException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public ServiceBusCommunicationException(string message) { }
        public ServiceBusCommunicationException(string message, System.Exception innerException) { }
    }
    public class ServiceBusConnection
    {
        public ServiceBusConnection(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder) { }
        public ServiceBusConnection(string namespaceConnectionString) { }
        public ServiceBusConnection(string namespaceConnectionString, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public ServiceBusConnection(string endpoint, Microsoft.Azure.ServiceBus.TransportType transportType, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        [System.Obsolete("This constructor is obsolete. Use ServiceBusConnection(string namespaceConnection" +
            "String, RetryPolicy retryPolicy) constructor instead, providing operationTimeout" +
            " in the connection string.")]
        public ServiceBusConnection(string namespaceConnectionString, System.TimeSpan operationTimeout, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public System.TimeSpan? ConnectionIdleTimeout { get; set; }
        public System.Uri Endpoint { get; set; }
        public bool IsClosedOrClosing { get; }
        public System.TimeSpan OperationTimeout { get; set; }
        public Microsoft.Azure.ServiceBus.RetryPolicy RetryPolicy { get; set; }
        public Microsoft.Azure.ServiceBus.Primitives.ITokenProvider TokenProvider { get; set; }
        public Microsoft.Azure.ServiceBus.TransportType TransportType { get; set; }
        public System.Threading.Tasks.Task CloseAsync() { }
    }
    public class ServiceBusConnectionStringBuilder
    {
        public ServiceBusConnectionStringBuilder() { }
        public ServiceBusConnectionStringBuilder(string connectionString) { }
        public ServiceBusConnectionStringBuilder(string endpoint, string entityPath, string sharedAccessSignature) { }
        public ServiceBusConnectionStringBuilder(string endpoint, string entityPath, string sharedAccessKeyName, string sharedAccessKey) { }
        public ServiceBusConnectionStringBuilder(string endpoint, string entityPath, string sharedAccessSignature, Microsoft.Azure.ServiceBus.TransportType transportType) { }
        public ServiceBusConnectionStringBuilder(string endpoint, string entityPath, string sharedAccessKeyName, string sharedAccessKey, Microsoft.Azure.ServiceBus.TransportType transportType) { }
        public Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.AuthenticationType Authentication { get; set; }
        public System.TimeSpan? ConnectionIdleTimeout { get; set; }
        public string Endpoint { get; set; }
        public string EntityPath { get; set; }
        public System.TimeSpan OperationTimeout { get; set; }
        public string SasKey { get; set; }
        public string SasKeyName { get; set; }
        public string SasToken { get; set; }
        public Microsoft.Azure.ServiceBus.TransportType TransportType { get; set; }
        public string GetEntityConnectionString() { }
        public string GetNamespaceConnectionString() { }
        public override string ToString() { }
        public enum AuthenticationType
        {
            Other = 0,
            ManagedIdentity = 1,
        }
    }
    public class ServiceBusException : System.Exception
    {
        public ServiceBusException(bool isTransient) { }
        public ServiceBusException(bool isTransient, System.Exception innerException) { }
        public ServiceBusException(bool isTransient, string message) { }
        public ServiceBusException(bool isTransient, string message, System.Exception innerException) { }
        public new bool IsTransient { get; }
        public override string Message { get; }
        public string ServiceBusNamespace { get; }
    }
    public class ServiceBusTimeoutException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public ServiceBusTimeoutException(string message) { }
        public ServiceBusTimeoutException(string message, System.Exception innerException) { }
    }
    public sealed class SessionCannotBeLockedException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public SessionCannotBeLockedException(string message) { }
        public SessionCannotBeLockedException(string message, System.Exception innerException) { }
    }
    public sealed class SessionClient : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.IClientEntity, Microsoft.Azure.ServiceBus.ISessionClient
    {
        public SessionClient(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        public SessionClient(Microsoft.Azure.ServiceBus.ServiceBusConnection serviceBusConnection, string entityPath, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        public SessionClient(string connectionString, string entityPath, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        public SessionClient(string endpoint, string entityPath, Microsoft.Azure.ServiceBus.Primitives.ITokenProvider tokenProvider, Microsoft.Azure.ServiceBus.TransportType transportType = 0, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        public string EntityPath { get; }
        public override string Path { get; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public override Microsoft.Azure.ServiceBus.ServiceBusConnection ServiceBusConnection { get; }
        public override System.TimeSpan OperationTimeout { get; set; }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync() { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(string sessionId) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(System.TimeSpan operationTimeout) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.IMessageSession> AcceptMessageSessionAsync(string sessionId, System.TimeSpan operationTimeout) { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
    }
    public sealed class SessionHandlerOptions
    {
        public SessionHandlerOptions(System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public bool AutoComplete { get; set; }
        public System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> ExceptionReceivedHandler { get; }
        public System.TimeSpan MaxAutoRenewDuration { get; set; }
        public int MaxConcurrentSessions { get; set; }
        public System.TimeSpan MessageWaitTimeout { get; set; }
    }
    public sealed class SessionLockLostException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public SessionLockLostException(string message) { }
        public SessionLockLostException(string message, System.Exception innerException) { }
    }
    public class SqlFilter : Microsoft.Azure.ServiceBus.Filter
    {
        public SqlFilter(string sqlExpression) { }
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; }
        public string SqlExpression { get; }
        public override bool Equals(Microsoft.Azure.ServiceBus.Filter other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool !=(Microsoft.Azure.ServiceBus.SqlFilter o1, Microsoft.Azure.ServiceBus.SqlFilter o2) { }
        public static bool ==(Microsoft.Azure.ServiceBus.SqlFilter o1, Microsoft.Azure.ServiceBus.SqlFilter o2) { }
    }
    public sealed class SqlRuleAction : Microsoft.Azure.ServiceBus.RuleAction
    {
        public SqlRuleAction(string sqlExpression) { }
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; }
        public string SqlExpression { get; }
        public override bool Equals(Microsoft.Azure.ServiceBus.RuleAction other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool !=(Microsoft.Azure.ServiceBus.SqlRuleAction o1, Microsoft.Azure.ServiceBus.SqlRuleAction o2) { }
        public static bool ==(Microsoft.Azure.ServiceBus.SqlRuleAction o1, Microsoft.Azure.ServiceBus.SqlRuleAction o2) { }
    }
    public class SubscriptionClient : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.IClientEntity, Microsoft.Azure.ServiceBus.ISubscriptionClient
    {
        public SubscriptionClient(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, string subscriptionName, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public SubscriptionClient(Microsoft.Azure.ServiceBus.ServiceBusConnection serviceBusConnection, string topicPath, string subscriptionName, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy) { }
        public SubscriptionClient(string connectionString, string topicPath, string subscriptionName, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public SubscriptionClient(string endpoint, string topicPath, string subscriptionName, Microsoft.Azure.ServiceBus.Primitives.ITokenProvider tokenProvider, Microsoft.Azure.ServiceBus.TransportType transportType = 0, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public override string Path { get; }
        public int PrefetchCount { get; set; }
        public Microsoft.Azure.ServiceBus.ReceiveMode ReceiveMode { get; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public override Microsoft.Azure.ServiceBus.ServiceBusConnection ServiceBusConnection { get; }
        public string SubscriptionName { get; }
        public string TopicPath { get; }
        public override System.TimeSpan OperationTimeout { get; set; }
        public System.Threading.Tasks.Task AbandonAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null) { }
        public System.Threading.Tasks.Task AddRuleAsync(Microsoft.Azure.ServiceBus.RuleDescription description) { }
        public System.Threading.Tasks.Task AddRuleAsync(string ruleName, Microsoft.Azure.ServiceBus.Filter filter) { }
        public System.Threading.Tasks.Task CompleteAsync(string lockToken) { }
        public System.Threading.Tasks.Task DeadLetterAsync(string lockToken) { }
        public System.Threading.Tasks.Task DeadLetterAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify) { }
        public System.Threading.Tasks.Task DeadLetterAsync(string lockToken, string deadLetterReason, string deadLetterErrorDescription = null) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.ServiceBus.RuleDescription>> GetRulesAsync() { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.MessageHandlerOptions messageHandlerOptions) { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.SessionHandlerOptions sessionHandlerOptions) { }
        public void RegisterSessionHandler(System.Func<Microsoft.Azure.ServiceBus.IMessageSession, Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public System.Threading.Tasks.Task RemoveRuleAsync(string ruleName) { }
        public System.Threading.Tasks.Task UnregisterMessageHandlerAsync(System.TimeSpan inflightMessageHandlerTasksWaitTimeout) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
        public System.Threading.Tasks.Task UnregisterSessionHandlerAsync(System.TimeSpan inflightSessionHandlerTasksWaitTimeout) { }
    }
    public class TopicClient : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity, Microsoft.Azure.ServiceBus.ITopicClient
    {
        public TopicClient(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public TopicClient(Microsoft.Azure.ServiceBus.ServiceBusConnection serviceBusConnection, string entityPath, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy) { }
        public TopicClient(string connectionString, string entityPath, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public TopicClient(string endpoint, string entityPath, Microsoft.Azure.ServiceBus.Primitives.ITokenProvider tokenProvider, Microsoft.Azure.ServiceBus.TransportType transportType = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public override string Path { get; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public override Microsoft.Azure.ServiceBus.ServiceBusConnection ServiceBusConnection { get; }
        public string TopicName { get; }
        public override System.TimeSpan OperationTimeout { get; set; }
        public System.Threading.Tasks.Task CancelScheduledMessageAsync(long sequenceNumber) { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public System.Threading.Tasks.Task<long> ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message message, System.DateTimeOffset scheduleEnqueueTimeUtc) { }
        public System.Threading.Tasks.Task SendAsync(Microsoft.Azure.ServiceBus.Message message) { }
        public System.Threading.Tasks.Task SendAsync(System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message> messageList) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
    }
    public enum TransportType
    {
        Amqp = 0,
        AmqpWebSockets = 1,
    }
    public sealed class TrueFilter : Microsoft.Azure.ServiceBus.SqlFilter
    {
        public TrueFilter() { }
        public override bool Equals(Microsoft.Azure.ServiceBus.Filter other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool !=(Microsoft.Azure.ServiceBus.TrueFilter o1, Microsoft.Azure.ServiceBus.TrueFilter o2) { }
        public static bool ==(Microsoft.Azure.ServiceBus.TrueFilter o1, Microsoft.Azure.ServiceBus.TrueFilter o2) { }
    }
    public sealed class UnauthorizedException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public UnauthorizedException(string message) { }
        public UnauthorizedException(string message, System.Exception innerException) { }
    }
}
namespace Microsoft.Azure.ServiceBus.Core
{
    public interface IMessageReceiver : Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        long LastPeekedSequenceNumber { get; }
        System.Threading.Tasks.Task CompleteAsync(System.Collections.Generic.IEnumerable<string> lockTokens);
        System.Threading.Tasks.Task DeferAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> PeekAsync();
        System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> PeekAsync(int maxMessageCount);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> PeekBySequenceNumberAsync(long fromSequenceNumber);
        System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> PeekBySequenceNumberAsync(long fromSequenceNumber, int messageCount);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveAsync();
        System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveAsync(int maxMessageCount);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveAsync(System.TimeSpan operationTimeout);
        System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveAsync(int maxMessageCount, System.TimeSpan operationTimeout);
        System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveDeferredMessageAsync(System.Collections.Generic.IEnumerable<long> sequenceNumbers);
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveDeferredMessageAsync(long sequenceNumber);
        System.Threading.Tasks.Task RenewLockAsync(Microsoft.Azure.ServiceBus.Message message);
        System.Threading.Tasks.Task<System.DateTime> RenewLockAsync(string lockToken);
    }
    public interface IMessageSender : Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity { }
    public interface IReceiverClient : Microsoft.Azure.ServiceBus.IClientEntity
    {
        int PrefetchCount { get; set; }
        Microsoft.Azure.ServiceBus.ReceiveMode ReceiveMode { get; }
        System.Threading.Tasks.Task AbandonAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null);
        System.Threading.Tasks.Task CompleteAsync(string lockToken);
        System.Threading.Tasks.Task DeadLetterAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null);
        System.Threading.Tasks.Task DeadLetterAsync(string lockToken, string deadLetterReason, string deadLetterErrorDescription = null);
        void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.MessageHandlerOptions messageHandlerOptions);
        void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler);
        System.Threading.Tasks.Task UnregisterMessageHandlerAsync(System.TimeSpan inflightMessageHandlerTasksWaitTimeout);
    }
    public interface ISenderClient : Microsoft.Azure.ServiceBus.IClientEntity
    {
        System.Threading.Tasks.Task CancelScheduledMessageAsync(long sequenceNumber);
        System.Threading.Tasks.Task<long> ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message message, System.DateTimeOffset scheduleEnqueueTimeUtc);
        System.Threading.Tasks.Task SendAsync(Microsoft.Azure.ServiceBus.Message message);
        System.Threading.Tasks.Task SendAsync(System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message> messageList);
    }
    public class MessageReceiver : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.Core.IMessageReceiver, Microsoft.Azure.ServiceBus.Core.IReceiverClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        public MessageReceiver(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        public MessageReceiver(Microsoft.Azure.ServiceBus.ServiceBusConnection serviceBusConnection, string entityPath, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        public MessageReceiver(string connectionString, string entityPath, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        public MessageReceiver(string endpoint, string entityPath, Microsoft.Azure.ServiceBus.Primitives.ITokenProvider tokenProvider, Microsoft.Azure.ServiceBus.TransportType transportType = 0, Microsoft.Azure.ServiceBus.ReceiveMode receiveMode = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null, int prefetchCount = 0) { }
        public long LastPeekedSequenceNumber { get; }
        public override string Path { get; }
        public int PrefetchCount { get; set; }
        public Microsoft.Azure.ServiceBus.ReceiveMode ReceiveMode { get; set; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public override Microsoft.Azure.ServiceBus.ServiceBusConnection ServiceBusConnection { get; }
        public override System.TimeSpan OperationTimeout { get; set; }
        public System.Threading.Tasks.Task AbandonAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null) { }
        public System.Threading.Tasks.Task CompleteAsync(System.Collections.Generic.IEnumerable<string> lockTokens) { }
        public System.Threading.Tasks.Task CompleteAsync(string lockToken) { }
        public System.Threading.Tasks.Task DeadLetterAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null) { }
        public System.Threading.Tasks.Task DeadLetterAsync(string lockToken, string deadLetterReason, string deadLetterErrorDescription = null) { }
        public System.Threading.Tasks.Task DeferAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null) { }
        protected virtual System.Threading.Tasks.Task OnAbandonAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null) { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        protected virtual System.Threading.Tasks.Task OnCompleteAsync(System.Collections.Generic.IEnumerable<string> lockTokens) { }
        protected virtual System.Threading.Tasks.Task OnDeadLetterAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null, string deadLetterReason = null, string deadLetterErrorDescription = null) { }
        protected virtual System.Threading.Tasks.Task OnDeferAsync(string lockToken, System.Collections.Generic.IDictionary<string, object> propertiesToModify = null) { }
        protected virtual void OnMessageHandler(Microsoft.Azure.ServiceBus.MessageHandlerOptions registerHandlerOptions, System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback) { }
        protected virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> OnPeekAsync(long fromSequenceNumber, int messageCount = 1) { }
        protected virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> OnReceiveAsync(int maxMessageCount, System.TimeSpan serverWaitTime) { }
        protected virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> OnReceiveDeferredMessageAsync(long[] sequenceNumbers) { }
        protected virtual System.Threading.Tasks.Task<System.DateTime> OnRenewLockAsync(string lockToken) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> PeekAsync() { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> PeekAsync(int maxMessageCount) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> PeekBySequenceNumberAsync(long fromSequenceNumber) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> PeekBySequenceNumberAsync(long fromSequenceNumber, int messageCount) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveAsync() { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveAsync(int maxMessageCount) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveAsync(System.TimeSpan operationTimeout) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveAsync(int maxMessageCount, System.TimeSpan operationTimeout) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message>> ReceiveDeferredMessageAsync(System.Collections.Generic.IEnumerable<long> sequenceNumbers) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> ReceiveDeferredMessageAsync(long sequenceNumber) { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, Microsoft.Azure.ServiceBus.MessageHandlerOptions messageHandlerOptions) { }
        public void RegisterMessageHandler(System.Func<Microsoft.Azure.ServiceBus.Message, System.Threading.CancellationToken, System.Threading.Tasks.Task> handler, System.Func<Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs, System.Threading.Tasks.Task> exceptionReceivedHandler) { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public System.Threading.Tasks.Task RenewLockAsync(Microsoft.Azure.ServiceBus.Message message) { }
        public System.Threading.Tasks.Task<System.DateTime> RenewLockAsync(string lockToken) { }
        public System.Threading.Tasks.Task UnregisterMessageHandlerAsync(System.TimeSpan inflightMessageHandlerTasksWaitTimeout) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
    }
    public class MessageSender : Microsoft.Azure.ServiceBus.ClientEntity, Microsoft.Azure.ServiceBus.Core.IMessageSender, Microsoft.Azure.ServiceBus.Core.ISenderClient, Microsoft.Azure.ServiceBus.IClientEntity
    {
        public MessageSender(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public MessageSender(Microsoft.Azure.ServiceBus.ServiceBusConnection serviceBusConnection, string entityPath, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public MessageSender(string connectionString, string entityPath, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public MessageSender(Microsoft.Azure.ServiceBus.ServiceBusConnection serviceBusConnection, string entityPath, string viaEntityPath, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public MessageSender(string endpoint, string entityPath, Microsoft.Azure.ServiceBus.Primitives.ITokenProvider tokenProvider, Microsoft.Azure.ServiceBus.TransportType transportType = 0, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy = null) { }
        public override string Path { get; }
        public override System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin> RegisteredPlugins { get; }
        public override Microsoft.Azure.ServiceBus.ServiceBusConnection ServiceBusConnection { get; }
        public string TransferDestinationPath { get; }
        public string ViaEntityPath { get; }
        public override System.TimeSpan OperationTimeout { get; set; }
        public System.Threading.Tasks.Task CancelScheduledMessageAsync(long sequenceNumber) { }
        protected override System.Threading.Tasks.Task OnClosingAsync() { }
        public override void RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin serviceBusPlugin) { }
        public System.Threading.Tasks.Task<long> ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message message, System.DateTimeOffset scheduleEnqueueTimeUtc) { }
        public System.Threading.Tasks.Task SendAsync(Microsoft.Azure.ServiceBus.Message message) { }
        public System.Threading.Tasks.Task SendAsync(System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Message> messageList) { }
        public override void UnregisterPlugin(string serviceBusPluginName) { }
    }
    public abstract class ServiceBusPlugin
    {
        protected ServiceBusPlugin() { }
        public abstract string Name { get; }
        public virtual bool ShouldContinueOnException { get; }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> AfterMessageReceive(Microsoft.Azure.ServiceBus.Message message) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Message> BeforeMessageSend(Microsoft.Azure.ServiceBus.Message message) { }
    }
}
namespace Microsoft.Azure.ServiceBus.Diagnostics
{
    public static class MessageExtensions
    {
        public static System.Diagnostics.Activity ExtractActivity(this Microsoft.Azure.ServiceBus.Message message, string activityName = null) { }
    }
}
namespace Microsoft.Azure.ServiceBus.InteropExtensions
{
    public static class DataContractBinarySerializer<T>
    {
        public static readonly System.Runtime.Serialization.XmlObjectSerializer Instance;
    }
    public static class MessageInteropExtensions
    {
        public static T GetBody<T>(this Microsoft.Azure.ServiceBus.Message message, System.Runtime.Serialization.XmlObjectSerializer serializer = null) { }
    }
}
namespace Microsoft.Azure.ServiceBus.Management
{
    public enum AccessRights
    {
        Manage = 0,
        Send = 1,
        Listen = 2,
    }
    public abstract class AuthorizationRule : System.IEquatable<Microsoft.Azure.ServiceBus.Management.AuthorizationRule>
    {
        public abstract string ClaimType { get; }
        public System.DateTime CreatedTime { get; }
        public System.DateTime ModifiedTime { get; }
        public abstract string KeyName { get; set; }
        public abstract System.Collections.Generic.List<Microsoft.Azure.ServiceBus.Management.AccessRights> Rights { get; set; }
        public abstract bool Equals(Microsoft.Azure.ServiceBus.Management.AuthorizationRule comparand);
    }
    public class AuthorizationRules : System.Collections.Generic.List<Microsoft.Azure.ServiceBus.Management.AuthorizationRule>, System.IEquatable<Microsoft.Azure.ServiceBus.Management.AuthorizationRules>
    {
        public AuthorizationRules() { }
        public bool Equals(Microsoft.Azure.ServiceBus.Management.AuthorizationRules other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool !=(Microsoft.Azure.ServiceBus.Management.AuthorizationRules o1, Microsoft.Azure.ServiceBus.Management.AuthorizationRules o2) { }
        public static bool ==(Microsoft.Azure.ServiceBus.Management.AuthorizationRules o1, Microsoft.Azure.ServiceBus.Management.AuthorizationRules o2) { }
    }
    public enum EntityStatus
    {
        [System.Runtime.Serialization.EnumMember]
        Active = 0,
        [System.Runtime.Serialization.EnumMember]
        Disabled = 1,
        [System.Runtime.Serialization.EnumMember]
        SendDisabled = 3,
        [System.Runtime.Serialization.EnumMember]
        ReceiveDisabled = 4,
        [System.Runtime.Serialization.EnumMember]
        Unknown = 99,
    }
    public class ManagementClient
    {
        public ManagementClient(string connectionString) { }
        public ManagementClient(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder connectionStringBuilder, Microsoft.Azure.ServiceBus.Primitives.ITokenProvider tokenProvider = null) { }
        public ManagementClient(string endpoint, Microsoft.Azure.ServiceBus.Primitives.ITokenProvider tokenProvider) { }
        public System.Threading.Tasks.Task CloseAsync() { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.QueueDescription> CreateQueueAsync(Microsoft.Azure.ServiceBus.Management.QueueDescription queueDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.QueueDescription> CreateQueueAsync(string queuePath, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.RuleDescription> CreateRuleAsync(string topicPath, string subscriptionName, Microsoft.Azure.ServiceBus.RuleDescription ruleDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.SubscriptionDescription> CreateSubscriptionAsync(Microsoft.Azure.ServiceBus.Management.SubscriptionDescription subscriptionDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.SubscriptionDescription> CreateSubscriptionAsync(Microsoft.Azure.ServiceBus.Management.SubscriptionDescription subscriptionDescription, Microsoft.Azure.ServiceBus.RuleDescription defaultRule, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.SubscriptionDescription> CreateSubscriptionAsync(string topicPath, string subscriptionName, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.TopicDescription> CreateTopicAsync(Microsoft.Azure.ServiceBus.Management.TopicDescription topicDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.TopicDescription> CreateTopicAsync(string topicPath, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task DeleteQueueAsync(string queuePath, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task DeleteRuleAsync(string topicPath, string subscriptionName, string ruleName, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task DeleteSubscriptionAsync(string topicPath, string subscriptionName, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task DeleteTopicAsync(string topicPath, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.NamespaceInfo> GetNamespaceInfoAsync(System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.QueueDescription> GetQueueAsync(string queuePath, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.QueueRuntimeInfo> GetQueueRuntimeInfoAsync(string queuePath, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Management.QueueDescription>> GetQueuesAsync(int count = 100, int skip = 0, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Management.QueueRuntimeInfo>> GetQueuesRuntimeInfoAsync(int count = 100, int skip = 0, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.RuleDescription> GetRuleAsync(string topicPath, string subscriptionName, string ruleName, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.RuleDescription>> GetRulesAsync(string topicPath, string subscriptionName, int count = 100, int skip = 0, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.SubscriptionDescription> GetSubscriptionAsync(string topicPath, string subscriptionName, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.SubscriptionRuntimeInfo> GetSubscriptionRuntimeInfoAsync(string topicPath, string subscriptionName, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Management.SubscriptionDescription>> GetSubscriptionsAsync(string topicPath, int count = 100, int skip = 0, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Management.SubscriptionRuntimeInfo>> GetSubscriptionsRuntimeInfoAsync(string topicPath, int count = 100, int skip = 0, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.TopicDescription> GetTopicAsync(string topicPath, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.TopicRuntimeInfo> GetTopicRuntimeInfoAsync(string topicPath, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Management.TopicDescription>> GetTopicsAsync(int count = 100, int skip = 0, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.ServiceBus.Management.TopicRuntimeInfo>> GetTopicsRuntimeInfoAsync(int count = 100, int skip = 0, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<bool> QueueExistsAsync(string queuePath, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<bool> SubscriptionExistsAsync(string topicPath, string subscriptionName, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<bool> TopicExistsAsync(string topicPath, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.QueueDescription> UpdateQueueAsync(Microsoft.Azure.ServiceBus.Management.QueueDescription queueDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.RuleDescription> UpdateRuleAsync(string topicPath, string subscriptionName, Microsoft.Azure.ServiceBus.RuleDescription ruleDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.SubscriptionDescription> UpdateSubscriptionAsync(Microsoft.Azure.ServiceBus.Management.SubscriptionDescription subscriptionDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Management.TopicDescription> UpdateTopicAsync(Microsoft.Azure.ServiceBus.Management.TopicDescription topicDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Net.Http.HttpRequestMessage CloneRequest(System.Net.Http.HttpRequestMessage req) { }
    }
    public class MessageCountDetails
    {
        public MessageCountDetails() { }
        public long ActiveMessageCount { get; }
        public long DeadLetterMessageCount { get; }
        public long ScheduledMessageCount { get; }
        public long TransferDeadLetterMessageCount { get; }
        public long TransferMessageCount { get; }
    }
    public class MessagingEntityAlreadyExistsException : Microsoft.Azure.ServiceBus.ServiceBusException
    {
        public MessagingEntityAlreadyExistsException(string message) { }
        public MessagingEntityAlreadyExistsException(string message, System.Exception innerException) { }
    }
    public enum MessagingSku
    {
        Basic = 1,
        Standard = 2,
        Premium = 3,
        Others = 99,
    }
    public class NamespaceInfo
    {
        public NamespaceInfo() { }
        public string Alias { get; set; }
        public System.DateTime CreatedTime { get; set; }
        public Microsoft.Azure.ServiceBus.Management.MessagingSku MessagingSku { get; set; }
        public int MessagingUnits { get; set; }
        public System.DateTime ModifiedTime { get; set; }
        public string Name { get; set; }
        public Microsoft.Azure.ServiceBus.Management.NamespaceType NamespaceType { get; set; }
    }
    public enum NamespaceType
    {
        ServiceBus = 0,
        Mixed = 2,
        Others = 99,
    }
    public class QueueDescription : System.IEquatable<Microsoft.Azure.ServiceBus.Management.QueueDescription>
    {
        public QueueDescription(string path) { }
        public Microsoft.Azure.ServiceBus.Management.AuthorizationRules AuthorizationRules { get; }
        public System.TimeSpan AutoDeleteOnIdle { get; set; }
        public System.TimeSpan DefaultMessageTimeToLive { get; set; }
        public System.TimeSpan DuplicateDetectionHistoryTimeWindow { get; set; }
        public bool EnableBatchedOperations { get; set; }
        public bool EnableDeadLetteringOnMessageExpiration { get; set; }
        public bool EnablePartitioning { get; set; }
        public string ForwardDeadLetteredMessagesTo { get; set; }
        public string ForwardTo { get; set; }
        public System.TimeSpan LockDuration { get; set; }
        public int MaxDeliveryCount { get; set; }
        public long MaxSizeInMB { get; set; }
        public string Path { get; set; }
        public bool RequiresDuplicateDetection { get; set; }
        public bool RequiresSession { get; set; }
        public Microsoft.Azure.ServiceBus.Management.EntityStatus Status { get; set; }
        public string UserMetadata { get; set; }
        public bool Equals(Microsoft.Azure.ServiceBus.Management.QueueDescription otherDescription) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool !=(Microsoft.Azure.ServiceBus.Management.QueueDescription o1, Microsoft.Azure.ServiceBus.Management.QueueDescription o2) { }
        public static bool ==(Microsoft.Azure.ServiceBus.Management.QueueDescription o1, Microsoft.Azure.ServiceBus.Management.QueueDescription o2) { }
    }
    public class QueueRuntimeInfo
    {
        public System.DateTime AccessedAt { get; }
        public System.DateTime CreatedAt { get; }
        public long MessageCount { get; }
        public Microsoft.Azure.ServiceBus.Management.MessageCountDetails MessageCountDetails { get; }
        public string Path { get; }
        public long SizeInBytes { get; }
        public System.DateTime UpdatedAt { get; }
    }
    public class SharedAccessAuthorizationRule : Microsoft.Azure.ServiceBus.Management.AuthorizationRule
    {
        public SharedAccessAuthorizationRule(string keyName, System.Collections.Generic.IEnumerable<Microsoft.Azure.ServiceBus.Management.AccessRights> rights) { }
        public SharedAccessAuthorizationRule(string keyName, string primaryKey, System.Collections.Generic.IEnumerable<Microsoft.Azure.ServiceBus.Management.AccessRights> rights) { }
        public SharedAccessAuthorizationRule(string keyName, string primaryKey, string secondaryKey, System.Collections.Generic.IEnumerable<Microsoft.Azure.ServiceBus.Management.AccessRights> rights) { }
        public override string ClaimType { get; }
        public string PrimaryKey { get; set; }
        public string SecondaryKey { get; set; }
        public override System.Collections.Generic.List<Microsoft.Azure.ServiceBus.Management.AccessRights> Rights { get; set; }
        public override sealed string KeyName { get; set; }
        public override bool Equals(Microsoft.Azure.ServiceBus.Management.AuthorizationRule other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool !=(Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule o1, Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule o2) { }
        public static bool ==(Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule o1, Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule o2) { }
    }
    public class SubscriptionDescription : System.IEquatable<Microsoft.Azure.ServiceBus.Management.SubscriptionDescription>
    {
        public SubscriptionDescription(string topicPath, string subscriptionName) { }
        public System.TimeSpan AutoDeleteOnIdle { get; set; }
        public System.TimeSpan DefaultMessageTimeToLive { get; set; }
        public bool EnableBatchedOperations { get; set; }
        public bool EnableDeadLetteringOnFilterEvaluationExceptions { get; set; }
        public bool EnableDeadLetteringOnMessageExpiration { get; set; }
        public string ForwardDeadLetteredMessagesTo { get; set; }
        public string ForwardTo { get; set; }
        public System.TimeSpan LockDuration { get; set; }
        public int MaxDeliveryCount { get; set; }
        public bool RequiresSession { get; set; }
        public Microsoft.Azure.ServiceBus.Management.EntityStatus Status { get; set; }
        public string SubscriptionName { get; set; }
        public string TopicPath { get; set; }
        public string UserMetadata { get; set; }
        public bool Equals(Microsoft.Azure.ServiceBus.Management.SubscriptionDescription otherDescription) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool !=(Microsoft.Azure.ServiceBus.Management.SubscriptionDescription o1, Microsoft.Azure.ServiceBus.Management.SubscriptionDescription o2) { }
        public static bool ==(Microsoft.Azure.ServiceBus.Management.SubscriptionDescription o1, Microsoft.Azure.ServiceBus.Management.SubscriptionDescription o2) { }
    }
    public class SubscriptionRuntimeInfo
    {
        public System.DateTime AccessedAt { get; }
        public System.DateTime CreatedAt { get; }
        public long MessageCount { get; }
        public Microsoft.Azure.ServiceBus.Management.MessageCountDetails MessageCountDetails { get; }
        public string SubscriptionName { get; }
        public string TopicPath { get; }
        public System.DateTime UpdatedAt { get; }
    }
    public class TopicDescription : System.IEquatable<Microsoft.Azure.ServiceBus.Management.TopicDescription>
    {
        public TopicDescription(string path) { }
        public Microsoft.Azure.ServiceBus.Management.AuthorizationRules AuthorizationRules { get; }
        public System.TimeSpan AutoDeleteOnIdle { get; set; }
        public System.TimeSpan DefaultMessageTimeToLive { get; set; }
        public System.TimeSpan DuplicateDetectionHistoryTimeWindow { get; set; }
        public bool EnableBatchedOperations { get; set; }
        public bool EnablePartitioning { get; set; }
        public long MaxSizeInMB { get; set; }
        public string Path { get; set; }
        public bool RequiresDuplicateDetection { get; set; }
        public Microsoft.Azure.ServiceBus.Management.EntityStatus Status { get; set; }
        public bool SupportOrdering { get; set; }
        public string UserMetadata { get; set; }
        public bool Equals(Microsoft.Azure.ServiceBus.Management.TopicDescription otherDescription) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool !=(Microsoft.Azure.ServiceBus.Management.TopicDescription o1, Microsoft.Azure.ServiceBus.Management.TopicDescription o2) { }
        public static bool ==(Microsoft.Azure.ServiceBus.Management.TopicDescription o1, Microsoft.Azure.ServiceBus.Management.TopicDescription o2) { }
    }
    public class TopicRuntimeInfo
    {
        public System.DateTime AccessedAt { get; }
        public System.DateTime CreatedAt { get; }
        public Microsoft.Azure.ServiceBus.Management.MessageCountDetails MessageCountDetails { get; }
        public string Path { get; }
        public long SizeInBytes { get; }
        public int SubscriptionCount { get; }
        public System.DateTime UpdatedAt { get; }
    }
}
namespace Microsoft.Azure.ServiceBus.Primitives
{
    public class AzureActiveDirectoryTokenProvider : Microsoft.Azure.ServiceBus.Primitives.TokenProvider
    {
        public AzureActiveDirectoryTokenProvider(Microsoft.Azure.ServiceBus.Primitives.AzureActiveDirectoryTokenProvider.AuthenticationCallback authenticationCallback, string authority, object state) { }
        public override System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Primitives.SecurityToken> GetTokenAsync(string appliesTo, System.TimeSpan timeout) { }
        public delegate System.Threading.Tasks.Task<string> AuthenticationCallback(string audience, string authority, object state);
    }
    public interface ITokenProvider
    {
        System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Primitives.SecurityToken> GetTokenAsync(string appliesTo, System.TimeSpan timeout);
    }
    public class JsonSecurityToken : Microsoft.Azure.ServiceBus.Primitives.SecurityToken
    {
        public JsonSecurityToken(string rawToken, string audience) { }
    }
    public class ManagedIdentityTokenProvider : Microsoft.Azure.ServiceBus.Primitives.TokenProvider
    {
        public ManagedIdentityTokenProvider() { }
        public ManagedIdentityTokenProvider(Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider azureServiceTokenProvider) { }
        public override System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Primitives.SecurityToken> GetTokenAsync(string appliesTo, System.TimeSpan timeout) { }
    }
    public class SecurityToken
    {
        public SecurityToken(string tokenString, System.DateTime expiresAtUtc, string audience, string tokenType) { }
        public string Audience { get; }
        public System.DateTime ExpiresAtUtc { get; }
        public virtual string TokenType { get; }
        public virtual string TokenValue { get; }
    }
    public class SharedAccessSignatureTokenProvider : Microsoft.Azure.ServiceBus.Primitives.TokenProvider
    {
        protected SharedAccessSignatureTokenProvider(string keyName, string sharedAccessKey, System.Func<string, byte[]> customKeyEncoder, System.TimeSpan tokenTimeToLive, Microsoft.Azure.ServiceBus.Primitives.TokenScope tokenScope) { }
        protected virtual string BuildSignature(string targetUri) { }
        public override System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Primitives.SecurityToken> GetTokenAsync(string appliesTo, System.TimeSpan timeout) { }
    }
    public abstract class TokenProvider : Microsoft.Azure.ServiceBus.Primitives.ITokenProvider
    {
        protected TokenProvider() { }
        public abstract System.Threading.Tasks.Task<Microsoft.Azure.ServiceBus.Primitives.SecurityToken> GetTokenAsync(string appliesTo, System.TimeSpan timeout);
        public static Microsoft.Azure.ServiceBus.Primitives.TokenProvider CreateAzureActiveDirectoryTokenProvider(Microsoft.Azure.ServiceBus.Primitives.AzureActiveDirectoryTokenProvider.AuthenticationCallback authCallback, string authority, object state = null) { }
        public static Microsoft.Azure.ServiceBus.Primitives.TokenProvider CreateManagedIdentityTokenProvider() { }
        public static Microsoft.Azure.ServiceBus.Primitives.TokenProvider CreateSharedAccessSignatureTokenProvider(string sharedAccessSignature) { }
        public static Microsoft.Azure.ServiceBus.Primitives.TokenProvider CreateSharedAccessSignatureTokenProvider(string keyName, string sharedAccessKey) { }
        public static Microsoft.Azure.ServiceBus.Primitives.TokenProvider CreateSharedAccessSignatureTokenProvider(string keyName, string sharedAccessKey, Microsoft.Azure.ServiceBus.Primitives.TokenScope tokenScope) { }
        public static Microsoft.Azure.ServiceBus.Primitives.TokenProvider CreateSharedAccessSignatureTokenProvider(string keyName, string sharedAccessKey, System.TimeSpan tokenTimeToLive) { }
        public static Microsoft.Azure.ServiceBus.Primitives.TokenProvider CreateSharedAccessSignatureTokenProvider(string keyName, string sharedAccessKey, System.TimeSpan tokenTimeToLive, Microsoft.Azure.ServiceBus.Primitives.TokenScope tokenScope) { }
    }
    public enum TokenScope
    {
        Namespace = 0,
        Entity = 1,
    }
}