// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WorkloadNetworksOperations.
    /// </summary>
    public static partial class WorkloadNetworksOperationsExtensions
    {
            /// <summary>
            /// List of segments in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IPage<WorkloadNetworkSegment> ListSegments(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.ListSegmentsAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of segments in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkSegment>> ListSegmentsAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSegmentsWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            public static WorkloadNetworkSegment GetSegment(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId)
            {
                return operations.GetSegmentAsync(resourceGroupName, privateCloudName, segmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkSegment> GetSegmentAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSegmentWithHttpMessagesAsync(resourceGroupName, privateCloudName, segmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            /// <param name='workloadNetworkSegment'>
            /// NSX Segment
            /// </param>
            public static WorkloadNetworkSegment CreateSegments(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId, WorkloadNetworkSegment workloadNetworkSegment)
            {
                return operations.CreateSegmentsAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            /// <param name='workloadNetworkSegment'>
            /// NSX Segment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkSegment> CreateSegmentsAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId, WorkloadNetworkSegment workloadNetworkSegment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSegmentsWithHttpMessagesAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            /// <param name='workloadNetworkSegment'>
            /// NSX Segment
            /// </param>
            public static WorkloadNetworkSegment UpdateSegments(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId, WorkloadNetworkSegment workloadNetworkSegment)
            {
                return operations.UpdateSegmentsAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            /// <param name='workloadNetworkSegment'>
            /// NSX Segment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkSegment> UpdateSegmentsAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId, WorkloadNetworkSegment workloadNetworkSegment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSegmentsWithHttpMessagesAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            public static void DeleteSegment(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId)
            {
                operations.DeleteSegmentAsync(resourceGroupName, privateCloudName, segmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSegmentAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSegmentWithHttpMessagesAsync(resourceGroupName, privateCloudName, segmentId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List dhcp in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IPage<WorkloadNetworkDhcp> ListDhcp(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.ListDhcpAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List dhcp in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkDhcp>> ListDhcpAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDhcpWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static WorkloadNetworkDhcp GetDhcp(this IWorkloadNetworksOperations operations, string resourceGroupName, string dhcpId, string privateCloudName)
            {
                return operations.GetDhcpAsync(resourceGroupName, dhcpId, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDhcp> GetDhcpAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string dhcpId, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDhcpWithHttpMessagesAsync(resourceGroupName, dhcpId, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='workloadNetworkDhcp'>
            /// NSX DHCP
            /// </param>
            public static WorkloadNetworkDhcp CreateDhcp(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp)
            {
                return operations.CreateDhcpAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='workloadNetworkDhcp'>
            /// NSX DHCP
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDhcp> CreateDhcpAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDhcpWithHttpMessagesAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='workloadNetworkDhcp'>
            /// NSX DHCP
            /// </param>
            public static WorkloadNetworkDhcp UpdateDhcp(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp)
            {
                return operations.UpdateDhcpAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='workloadNetworkDhcp'>
            /// NSX DHCP
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDhcp> UpdateDhcpAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDhcpWithHttpMessagesAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            public static void DeleteDhcp(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId)
            {
                operations.DeleteDhcpAsync(resourceGroupName, privateCloudName, dhcpId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDhcpAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDhcpWithHttpMessagesAsync(resourceGroupName, privateCloudName, dhcpId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List of gateways in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IPage<WorkloadNetworkGateway> ListGateways(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.ListGatewaysAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of gateways in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkGateway>> ListGatewaysAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGatewaysWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a gateway by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='gatewayId'>
            /// NSX Gateway identifier. Generally the same as the Gateway's display name
            /// </param>
            public static WorkloadNetworkGateway GetGateway(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string gatewayId)
            {
                return operations.GetGatewayAsync(resourceGroupName, privateCloudName, gatewayId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a gateway by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='gatewayId'>
            /// NSX Gateway identifier. Generally the same as the Gateway's display name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkGateway> GetGatewayAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string gatewayId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayWithHttpMessagesAsync(resourceGroupName, privateCloudName, gatewayId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of port mirroring profiles in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IPage<WorkloadNetworkPortMirroring> ListPortMirroring(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.ListPortMirroringAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of port mirroring profiles in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkPortMirroring>> ListPortMirroringAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPortMirroringWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a port mirroring profile by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            public static WorkloadNetworkPortMirroring GetPortMirroring(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string portMirroringId)
            {
                return operations.GetPortMirroringAsync(resourceGroupName, privateCloudName, portMirroringId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a port mirroring profile by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkPortMirroring> GetPortMirroringAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string portMirroringId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortMirroringWithHttpMessagesAsync(resourceGroupName, privateCloudName, portMirroringId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a port mirroring profile by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='workloadNetworkPortMirroring'>
            /// NSX port mirroring
            /// </param>
            public static WorkloadNetworkPortMirroring CreatePortMirroring(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring)
            {
                return operations.CreatePortMirroringAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a port mirroring profile by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='workloadNetworkPortMirroring'>
            /// NSX port mirroring
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkPortMirroring> CreatePortMirroringAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePortMirroringWithHttpMessagesAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a port mirroring profile by id in a private cloud workload
            /// network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='workloadNetworkPortMirroring'>
            /// NSX port mirroring
            /// </param>
            public static WorkloadNetworkPortMirroring UpdatePortMirroring(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring)
            {
                return operations.UpdatePortMirroringAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a port mirroring profile by id in a private cloud workload
            /// network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='workloadNetworkPortMirroring'>
            /// NSX port mirroring
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkPortMirroring> UpdatePortMirroringAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePortMirroringWithHttpMessagesAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a port mirroring profile by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static void DeletePortMirroring(this IWorkloadNetworksOperations operations, string resourceGroupName, string portMirroringId, string privateCloudName)
            {
                operations.DeletePortMirroringAsync(resourceGroupName, portMirroringId, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a port mirroring profile by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePortMirroringAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string portMirroringId, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePortMirroringWithHttpMessagesAsync(resourceGroupName, portMirroringId, privateCloudName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List of vm groups in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IPage<WorkloadNetworkVMGroup> ListVMGroups(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.ListVMGroupsAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of vm groups in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkVMGroup>> ListVMGroupsAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVMGroupsWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            public static WorkloadNetworkVMGroup GetVMGroup(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string vmGroupId)
            {
                return operations.GetVMGroupAsync(resourceGroupName, privateCloudName, vmGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkVMGroup> GetVMGroupAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string vmGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVMGroupWithHttpMessagesAsync(resourceGroupName, privateCloudName, vmGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='workloadNetworkVMGroup'>
            /// NSX VM Group
            /// </param>
            public static WorkloadNetworkVMGroup CreateVMGroup(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup)
            {
                return operations.CreateVMGroupAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='workloadNetworkVMGroup'>
            /// NSX VM Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkVMGroup> CreateVMGroupAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVMGroupWithHttpMessagesAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='workloadNetworkVMGroup'>
            /// NSX VM Group
            /// </param>
            public static WorkloadNetworkVMGroup UpdateVMGroup(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup)
            {
                return operations.UpdateVMGroupAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='workloadNetworkVMGroup'>
            /// NSX VM Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkVMGroup> UpdateVMGroupAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVMGroupWithHttpMessagesAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static void DeleteVMGroup(this IWorkloadNetworksOperations operations, string resourceGroupName, string vmGroupId, string privateCloudName)
            {
                operations.DeleteVMGroupAsync(resourceGroupName, vmGroupId, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteVMGroupAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string vmGroupId, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteVMGroupWithHttpMessagesAsync(resourceGroupName, vmGroupId, privateCloudName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List of virtual machines in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IPage<WorkloadNetworkVirtualMachine> ListVirtualMachines(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.ListVirtualMachinesAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of virtual machines in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkVirtualMachine>> ListVirtualMachinesAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVirtualMachinesWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a virtual machine by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='virtualMachineId'>
            /// Virtual Machine identifier
            /// </param>
            public static WorkloadNetworkVirtualMachine GetVirtualMachine(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string virtualMachineId)
            {
                return operations.GetVirtualMachineAsync(resourceGroupName, privateCloudName, virtualMachineId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a virtual machine by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='virtualMachineId'>
            /// Virtual Machine identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkVirtualMachine> GetVirtualMachineAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string virtualMachineId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVirtualMachineWithHttpMessagesAsync(resourceGroupName, privateCloudName, virtualMachineId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of DNS services in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IPage<WorkloadNetworkDnsService> ListDnsServices(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.ListDnsServicesAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of DNS services in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkDnsService>> ListDnsServicesAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDnsServicesWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            public static WorkloadNetworkDnsService GetDnsService(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsServiceId)
            {
                return operations.GetDnsServiceAsync(resourceGroupName, privateCloudName, dnsServiceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDnsService> GetDnsServiceAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsServiceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDnsServiceWithHttpMessagesAsync(resourceGroupName, privateCloudName, dnsServiceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='workloadNetworkDnsService'>
            /// NSX DNS Service
            /// </param>
            public static WorkloadNetworkDnsService CreateDnsService(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsServiceId, WorkloadNetworkDnsService workloadNetworkDnsService)
            {
                return operations.CreateDnsServiceAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='workloadNetworkDnsService'>
            /// NSX DNS Service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDnsService> CreateDnsServiceAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsServiceId, WorkloadNetworkDnsService workloadNetworkDnsService, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDnsServiceWithHttpMessagesAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='workloadNetworkDnsService'>
            /// NSX DNS Service
            /// </param>
            public static WorkloadNetworkDnsService UpdateDnsService(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsServiceId, WorkloadNetworkDnsService workloadNetworkDnsService)
            {
                return operations.UpdateDnsServiceAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='workloadNetworkDnsService'>
            /// NSX DNS Service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDnsService> UpdateDnsServiceAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsServiceId, WorkloadNetworkDnsService workloadNetworkDnsService, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDnsServiceWithHttpMessagesAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static void DeleteDnsService(this IWorkloadNetworksOperations operations, string resourceGroupName, string dnsServiceId, string privateCloudName)
            {
                operations.DeleteDnsServiceAsync(resourceGroupName, dnsServiceId, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDnsServiceAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string dnsServiceId, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDnsServiceWithHttpMessagesAsync(resourceGroupName, dnsServiceId, privateCloudName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List of DNS zones in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IPage<WorkloadNetworkDnsZone> ListDnsZones(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.ListDnsZonesAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of DNS zones in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkDnsZone>> ListDnsZonesAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDnsZonesWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            public static WorkloadNetworkDnsZone GetDnsZone(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsZoneId)
            {
                return operations.GetDnsZoneAsync(resourceGroupName, privateCloudName, dnsZoneId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDnsZone> GetDnsZoneAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsZoneId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDnsZoneWithHttpMessagesAsync(resourceGroupName, privateCloudName, dnsZoneId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='workloadNetworkDnsZone'>
            /// NSX DNS Zone
            /// </param>
            public static WorkloadNetworkDnsZone CreateDnsZone(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsZoneId, WorkloadNetworkDnsZone workloadNetworkDnsZone)
            {
                return operations.CreateDnsZoneAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='workloadNetworkDnsZone'>
            /// NSX DNS Zone
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDnsZone> CreateDnsZoneAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsZoneId, WorkloadNetworkDnsZone workloadNetworkDnsZone, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDnsZoneWithHttpMessagesAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='workloadNetworkDnsZone'>
            /// NSX DNS Zone
            /// </param>
            public static WorkloadNetworkDnsZone UpdateDnsZone(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsZoneId, WorkloadNetworkDnsZone workloadNetworkDnsZone)
            {
                return operations.UpdateDnsZoneAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='workloadNetworkDnsZone'>
            /// NSX DNS Zone
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDnsZone> UpdateDnsZoneAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsZoneId, WorkloadNetworkDnsZone workloadNetworkDnsZone, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDnsZoneWithHttpMessagesAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static void DeleteDnsZone(this IWorkloadNetworksOperations operations, string resourceGroupName, string dnsZoneId, string privateCloudName)
            {
                operations.DeleteDnsZoneAsync(resourceGroupName, dnsZoneId, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDnsZoneAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string dnsZoneId, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDnsZoneWithHttpMessagesAsync(resourceGroupName, dnsZoneId, privateCloudName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List of Public IP Blocks in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IPage<WorkloadNetworkPublicIP> ListPublicIPs(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.ListPublicIPsAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of Public IP Blocks in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkPublicIP>> ListPublicIPsAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublicIPsWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Public IP Block by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='publicIPId'>
            /// NSX Public IP Block identifier. Generally the same as the Public IP Block's
            /// display name
            /// </param>
            public static WorkloadNetworkPublicIP GetPublicIP(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string publicIPId)
            {
                return operations.GetPublicIPAsync(resourceGroupName, privateCloudName, publicIPId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Public IP Block by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='publicIPId'>
            /// NSX Public IP Block identifier. Generally the same as the Public IP Block's
            /// display name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkPublicIP> GetPublicIPAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string publicIPId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPublicIPWithHttpMessagesAsync(resourceGroupName, privateCloudName, publicIPId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Public IP Block by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='publicIPId'>
            /// NSX Public IP Block identifier. Generally the same as the Public IP Block's
            /// display name
            /// </param>
            /// <param name='workloadNetworkPublicIP'>
            /// NSX Public IP Block
            /// </param>
            public static WorkloadNetworkPublicIP CreatePublicIP(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string publicIPId, WorkloadNetworkPublicIP workloadNetworkPublicIP)
            {
                return operations.CreatePublicIPAsync(resourceGroupName, privateCloudName, publicIPId, workloadNetworkPublicIP).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Public IP Block by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='publicIPId'>
            /// NSX Public IP Block identifier. Generally the same as the Public IP Block's
            /// display name
            /// </param>
            /// <param name='workloadNetworkPublicIP'>
            /// NSX Public IP Block
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkPublicIP> CreatePublicIPAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string publicIPId, WorkloadNetworkPublicIP workloadNetworkPublicIP, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePublicIPWithHttpMessagesAsync(resourceGroupName, privateCloudName, publicIPId, workloadNetworkPublicIP, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Public IP Block by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='publicIPId'>
            /// NSX Public IP Block identifier. Generally the same as the Public IP Block's
            /// display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static void DeletePublicIP(this IWorkloadNetworksOperations operations, string resourceGroupName, string publicIPId, string privateCloudName)
            {
                operations.DeletePublicIPAsync(resourceGroupName, publicIPId, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Public IP Block by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='publicIPId'>
            /// NSX Public IP Block identifier. Generally the same as the Public IP Block's
            /// display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePublicIPAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string publicIPId, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePublicIPWithHttpMessagesAsync(resourceGroupName, publicIPId, privateCloudName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            /// <param name='workloadNetworkSegment'>
            /// NSX Segment
            /// </param>
            public static WorkloadNetworkSegment BeginCreateSegments(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId, WorkloadNetworkSegment workloadNetworkSegment)
            {
                return operations.BeginCreateSegmentsAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            /// <param name='workloadNetworkSegment'>
            /// NSX Segment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkSegment> BeginCreateSegmentsAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId, WorkloadNetworkSegment workloadNetworkSegment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateSegmentsWithHttpMessagesAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            /// <param name='workloadNetworkSegment'>
            /// NSX Segment
            /// </param>
            public static WorkloadNetworkSegment BeginUpdateSegments(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId, WorkloadNetworkSegment workloadNetworkSegment)
            {
                return operations.BeginUpdateSegmentsAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            /// <param name='workloadNetworkSegment'>
            /// NSX Segment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkSegment> BeginUpdateSegmentsAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId, WorkloadNetworkSegment workloadNetworkSegment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateSegmentsWithHttpMessagesAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            public static void BeginDeleteSegment(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId)
            {
                operations.BeginDeleteSegmentAsync(resourceGroupName, privateCloudName, segmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a segment by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='segmentId'>
            /// NSX Segment identifier. Generally the same as the Segment's display name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteSegmentAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string segmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteSegmentWithHttpMessagesAsync(resourceGroupName, privateCloudName, segmentId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='workloadNetworkDhcp'>
            /// NSX DHCP
            /// </param>
            public static WorkloadNetworkDhcp BeginCreateDhcp(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp)
            {
                return operations.BeginCreateDhcpAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='workloadNetworkDhcp'>
            /// NSX DHCP
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDhcp> BeginCreateDhcpAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateDhcpWithHttpMessagesAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='workloadNetworkDhcp'>
            /// NSX DHCP
            /// </param>
            public static WorkloadNetworkDhcp BeginUpdateDhcp(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp)
            {
                return operations.BeginUpdateDhcpAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='workloadNetworkDhcp'>
            /// NSX DHCP
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDhcp> BeginUpdateDhcpAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateDhcpWithHttpMessagesAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            public static void BeginDeleteDhcp(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId)
            {
                operations.BeginDeleteDhcpAsync(resourceGroupName, privateCloudName, dhcpId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete dhcp by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dhcpId'>
            /// NSX DHCP identifier. Generally the same as the DHCP display name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteDhcpAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dhcpId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteDhcpWithHttpMessagesAsync(resourceGroupName, privateCloudName, dhcpId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create a port mirroring profile by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='workloadNetworkPortMirroring'>
            /// NSX port mirroring
            /// </param>
            public static WorkloadNetworkPortMirroring BeginCreatePortMirroring(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring)
            {
                return operations.BeginCreatePortMirroringAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a port mirroring profile by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='workloadNetworkPortMirroring'>
            /// NSX port mirroring
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkPortMirroring> BeginCreatePortMirroringAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreatePortMirroringWithHttpMessagesAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a port mirroring profile by id in a private cloud workload
            /// network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='workloadNetworkPortMirroring'>
            /// NSX port mirroring
            /// </param>
            public static WorkloadNetworkPortMirroring BeginUpdatePortMirroring(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring)
            {
                return operations.BeginUpdatePortMirroringAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a port mirroring profile by id in a private cloud workload
            /// network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='workloadNetworkPortMirroring'>
            /// NSX port mirroring
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkPortMirroring> BeginUpdatePortMirroringAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdatePortMirroringWithHttpMessagesAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a port mirroring profile by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static void BeginDeletePortMirroring(this IWorkloadNetworksOperations operations, string resourceGroupName, string portMirroringId, string privateCloudName)
            {
                operations.BeginDeletePortMirroringAsync(resourceGroupName, portMirroringId, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a port mirroring profile by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='portMirroringId'>
            /// NSX Port Mirroring identifier. Generally the same as the Port Mirroring
            /// display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeletePortMirroringAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string portMirroringId, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeletePortMirroringWithHttpMessagesAsync(resourceGroupName, portMirroringId, privateCloudName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='workloadNetworkVMGroup'>
            /// NSX VM Group
            /// </param>
            public static WorkloadNetworkVMGroup BeginCreateVMGroup(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup)
            {
                return operations.BeginCreateVMGroupAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='workloadNetworkVMGroup'>
            /// NSX VM Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkVMGroup> BeginCreateVMGroupAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateVMGroupWithHttpMessagesAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='workloadNetworkVMGroup'>
            /// NSX VM Group
            /// </param>
            public static WorkloadNetworkVMGroup BeginUpdateVMGroup(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup)
            {
                return operations.BeginUpdateVMGroupAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='workloadNetworkVMGroup'>
            /// NSX VM Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkVMGroup> BeginUpdateVMGroupAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateVMGroupWithHttpMessagesAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static void BeginDeleteVMGroup(this IWorkloadNetworksOperations operations, string resourceGroupName, string vmGroupId, string privateCloudName)
            {
                operations.BeginDeleteVMGroupAsync(resourceGroupName, vmGroupId, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a vm group by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='vmGroupId'>
            /// NSX VM Group identifier. Generally the same as the VM Group's display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteVMGroupAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string vmGroupId, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteVMGroupWithHttpMessagesAsync(resourceGroupName, vmGroupId, privateCloudName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='workloadNetworkDnsService'>
            /// NSX DNS Service
            /// </param>
            public static WorkloadNetworkDnsService BeginCreateDnsService(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsServiceId, WorkloadNetworkDnsService workloadNetworkDnsService)
            {
                return operations.BeginCreateDnsServiceAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='workloadNetworkDnsService'>
            /// NSX DNS Service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDnsService> BeginCreateDnsServiceAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsServiceId, WorkloadNetworkDnsService workloadNetworkDnsService, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateDnsServiceWithHttpMessagesAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='workloadNetworkDnsService'>
            /// NSX DNS Service
            /// </param>
            public static WorkloadNetworkDnsService BeginUpdateDnsService(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsServiceId, WorkloadNetworkDnsService workloadNetworkDnsService)
            {
                return operations.BeginUpdateDnsServiceAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='workloadNetworkDnsService'>
            /// NSX DNS Service
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDnsService> BeginUpdateDnsServiceAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsServiceId, WorkloadNetworkDnsService workloadNetworkDnsService, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateDnsServiceWithHttpMessagesAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static void BeginDeleteDnsService(this IWorkloadNetworksOperations operations, string resourceGroupName, string dnsServiceId, string privateCloudName)
            {
                operations.BeginDeleteDnsServiceAsync(resourceGroupName, dnsServiceId, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a DNS service by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsServiceId'>
            /// NSX DNS Service identifier. Generally the same as the DNS Service's display
            /// name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteDnsServiceAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string dnsServiceId, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteDnsServiceWithHttpMessagesAsync(resourceGroupName, dnsServiceId, privateCloudName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='workloadNetworkDnsZone'>
            /// NSX DNS Zone
            /// </param>
            public static WorkloadNetworkDnsZone BeginCreateDnsZone(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsZoneId, WorkloadNetworkDnsZone workloadNetworkDnsZone)
            {
                return operations.BeginCreateDnsZoneAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='workloadNetworkDnsZone'>
            /// NSX DNS Zone
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDnsZone> BeginCreateDnsZoneAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsZoneId, WorkloadNetworkDnsZone workloadNetworkDnsZone, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateDnsZoneWithHttpMessagesAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='workloadNetworkDnsZone'>
            /// NSX DNS Zone
            /// </param>
            public static WorkloadNetworkDnsZone BeginUpdateDnsZone(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsZoneId, WorkloadNetworkDnsZone workloadNetworkDnsZone)
            {
                return operations.BeginUpdateDnsZoneAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='workloadNetworkDnsZone'>
            /// NSX DNS Zone
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkDnsZone> BeginUpdateDnsZoneAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string dnsZoneId, WorkloadNetworkDnsZone workloadNetworkDnsZone, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateDnsZoneWithHttpMessagesAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static void BeginDeleteDnsZone(this IWorkloadNetworksOperations operations, string resourceGroupName, string dnsZoneId, string privateCloudName)
            {
                operations.BeginDeleteDnsZoneAsync(resourceGroupName, dnsZoneId, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a DNS zone by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsZoneId'>
            /// NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteDnsZoneAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string dnsZoneId, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteDnsZoneWithHttpMessagesAsync(resourceGroupName, dnsZoneId, privateCloudName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create a Public IP Block by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='publicIPId'>
            /// NSX Public IP Block identifier. Generally the same as the Public IP Block's
            /// display name
            /// </param>
            /// <param name='workloadNetworkPublicIP'>
            /// NSX Public IP Block
            /// </param>
            public static WorkloadNetworkPublicIP BeginCreatePublicIP(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string publicIPId, WorkloadNetworkPublicIP workloadNetworkPublicIP)
            {
                return operations.BeginCreatePublicIPAsync(resourceGroupName, privateCloudName, publicIPId, workloadNetworkPublicIP).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Public IP Block by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='publicIPId'>
            /// NSX Public IP Block identifier. Generally the same as the Public IP Block's
            /// display name
            /// </param>
            /// <param name='workloadNetworkPublicIP'>
            /// NSX Public IP Block
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadNetworkPublicIP> BeginCreatePublicIPAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string privateCloudName, string publicIPId, WorkloadNetworkPublicIP workloadNetworkPublicIP, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreatePublicIPWithHttpMessagesAsync(resourceGroupName, privateCloudName, publicIPId, workloadNetworkPublicIP, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Public IP Block by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='publicIPId'>
            /// NSX Public IP Block identifier. Generally the same as the Public IP Block's
            /// display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static void BeginDeletePublicIP(this IWorkloadNetworksOperations operations, string resourceGroupName, string publicIPId, string privateCloudName)
            {
                operations.BeginDeletePublicIPAsync(resourceGroupName, publicIPId, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Public IP Block by id in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='publicIPId'>
            /// NSX Public IP Block identifier. Generally the same as the Public IP Block's
            /// display name
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeletePublicIPAsync(this IWorkloadNetworksOperations operations, string resourceGroupName, string publicIPId, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeletePublicIPWithHttpMessagesAsync(resourceGroupName, publicIPId, privateCloudName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List of segments in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkloadNetworkSegment> ListSegmentsNext(this IWorkloadNetworksOperations operations, string nextPageLink)
            {
                return operations.ListSegmentsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of segments in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkSegment>> ListSegmentsNextAsync(this IWorkloadNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSegmentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List dhcp in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkloadNetworkDhcp> ListDhcpNext(this IWorkloadNetworksOperations operations, string nextPageLink)
            {
                return operations.ListDhcpNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List dhcp in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkDhcp>> ListDhcpNextAsync(this IWorkloadNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDhcpNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of gateways in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkloadNetworkGateway> ListGatewaysNext(this IWorkloadNetworksOperations operations, string nextPageLink)
            {
                return operations.ListGatewaysNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of gateways in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkGateway>> ListGatewaysNextAsync(this IWorkloadNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGatewaysNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of port mirroring profiles in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkloadNetworkPortMirroring> ListPortMirroringNext(this IWorkloadNetworksOperations operations, string nextPageLink)
            {
                return operations.ListPortMirroringNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of port mirroring profiles in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkPortMirroring>> ListPortMirroringNextAsync(this IWorkloadNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPortMirroringNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of vm groups in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkloadNetworkVMGroup> ListVMGroupsNext(this IWorkloadNetworksOperations operations, string nextPageLink)
            {
                return operations.ListVMGroupsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of vm groups in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkVMGroup>> ListVMGroupsNextAsync(this IWorkloadNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVMGroupsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of virtual machines in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkloadNetworkVirtualMachine> ListVirtualMachinesNext(this IWorkloadNetworksOperations operations, string nextPageLink)
            {
                return operations.ListVirtualMachinesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of virtual machines in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkVirtualMachine>> ListVirtualMachinesNextAsync(this IWorkloadNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVirtualMachinesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of DNS services in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkloadNetworkDnsService> ListDnsServicesNext(this IWorkloadNetworksOperations operations, string nextPageLink)
            {
                return operations.ListDnsServicesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of DNS services in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkDnsService>> ListDnsServicesNextAsync(this IWorkloadNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDnsServicesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of DNS zones in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkloadNetworkDnsZone> ListDnsZonesNext(this IWorkloadNetworksOperations operations, string nextPageLink)
            {
                return operations.ListDnsZonesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of DNS zones in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkDnsZone>> ListDnsZonesNextAsync(this IWorkloadNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDnsZonesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of Public IP Blocks in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkloadNetworkPublicIP> ListPublicIPsNext(this IWorkloadNetworksOperations operations, string nextPageLink)
            {
                return operations.ListPublicIPsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of Public IP Blocks in a private cloud workload network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadNetworkPublicIP>> ListPublicIPsNextAsync(this IWorkloadNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublicIPsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
