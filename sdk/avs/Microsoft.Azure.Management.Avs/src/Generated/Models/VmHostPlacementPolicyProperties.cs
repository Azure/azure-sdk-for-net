// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// VM-Host placement policy properties
    /// </summary>
    [Newtonsoft.Json.JsonObject("VmHost")]
    public partial class VmHostPlacementPolicyProperties : PlacementPolicyProperties
    {
        /// <summary>
        /// Initializes a new instance of the VmHostPlacementPolicyProperties
        /// class.
        /// </summary>
        public VmHostPlacementPolicyProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VmHostPlacementPolicyProperties
        /// class.
        /// </summary>
        /// <param name="vmMembers">Virtual machine members list</param>
        /// <param name="hostMembers">Host members list</param>
        /// <param name="affinityType">placement policy affinity type. Possible
        /// values include: 'Affinity', 'AntiAffinity'</param>
        /// <param name="state">Whether the placement policy is enabled or
        /// disabled. Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="displayName">Display name of the placement
        /// policy</param>
        /// <param name="provisioningState">The provisioning state. Possible
        /// values include: 'Succeeded', 'Failed', 'Building', 'Deleting',
        /// 'Updating'</param>
        public VmHostPlacementPolicyProperties(IList<string> vmMembers, IList<string> hostMembers, string affinityType, string state = default(string), string displayName = default(string), string provisioningState = default(string))
            : base(state, displayName, provisioningState)
        {
            VmMembers = vmMembers;
            HostMembers = hostMembers;
            AffinityType = affinityType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets virtual machine members list
        /// </summary>
        [JsonProperty(PropertyName = "vmMembers")]
        public IList<string> VmMembers { get; set; }

        /// <summary>
        /// Gets or sets host members list
        /// </summary>
        [JsonProperty(PropertyName = "hostMembers")]
        public IList<string> HostMembers { get; set; }

        /// <summary>
        /// Gets or sets placement policy affinity type. Possible values
        /// include: 'Affinity', 'AntiAffinity'
        /// </summary>
        [JsonProperty(PropertyName = "affinityType")]
        public string AffinityType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VmMembers == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VmMembers");
            }
            if (HostMembers == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HostMembers");
            }
            if (AffinityType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AffinityType");
            }
        }
    }
}
