// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// NSX Segment
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class WorkloadNetworkSegment : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the WorkloadNetworkSegment class.
        /// </summary>
        public WorkloadNetworkSegment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkloadNetworkSegment class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="displayName">Display name of the segment.</param>
        /// <param name="connectedGateway">Gateway which to connect segment
        /// to.</param>
        /// <param name="subnet">Subnet which to connect segment to.</param>
        /// <param name="portVif">Port Vif which segment is associated
        /// with.</param>
        /// <param name="status">Segment status. Possible values include:
        /// 'SUCCESS, FAILURE'</param>
        /// <param name="provisioningState">The provisioning state. Possible
        /// values include: 'Succeeded', 'Failed', 'Building', 'Deleting',
        /// 'Updating'</param>
        /// <param name="revision">NSX revision number.</param>
        public WorkloadNetworkSegment(string id = default(string), string name = default(string), string type = default(string), string displayName = default(string), string connectedGateway = default(string), WorkloadNetworkSegmentSubnet subnet = default(WorkloadNetworkSegmentSubnet), IList<WorkloadNetworkSegmentPortVif> portVif = default(IList<WorkloadNetworkSegmentPortVif>), string status = default(string), string provisioningState = default(string), long? revision = default(long?))
            : base(id, name, type)
        {
            DisplayName = displayName;
            ConnectedGateway = connectedGateway;
            Subnet = subnet;
            PortVif = portVif;
            Status = status;
            ProvisioningState = provisioningState;
            Revision = revision;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets display name of the segment.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets gateway which to connect segment to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.connectedGateway")]
        public string ConnectedGateway { get; set; }

        /// <summary>
        /// Gets or sets subnet which to connect segment to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subnet")]
        public WorkloadNetworkSegmentSubnet Subnet { get; set; }

        /// <summary>
        /// Gets port Vif which segment is associated with.
        /// </summary>
        [JsonProperty(PropertyName = "properties.portVif")]
        public IList<WorkloadNetworkSegmentPortVif> PortVif { get; private set; }

        /// <summary>
        /// Gets segment status. Possible values include: 'SUCCESS, FAILURE'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets the provisioning state. Possible values include: 'Succeeded',
        /// 'Failed', 'Building', 'Deleting', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets NSX revision number.
        /// </summary>
        [JsonProperty(PropertyName = "properties.revision")]
        public long? Revision { get; set; }

    }
}
