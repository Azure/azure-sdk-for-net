// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An instance of a script executed by a user - custom or AVS
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ScriptExecution : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ScriptExecution class.
        /// </summary>
        public ScriptExecution()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScriptExecution class.
        /// </summary>
        /// <param name="timeout">Time limit for execution</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="scriptCmdletId">A reference to the script cmdlet
        /// resource if user is running a AVS script</param>
        /// <param name="parameters">Parameters the script will accept</param>
        /// <param name="hiddenParameters">Parameters that will be hidden/not
        /// visible to ARM, such as passwords and credentials</param>
        /// <param name="failureReason">Error message if the script was able to
        /// run, but if the script itself had errors or powershell threw an
        /// exception</param>
        /// <param name="retention">Time to live for the resource. If not
        /// provided, will be available for 60 days</param>
        /// <param name="submittedAt">Time the script execution was
        /// submitted</param>
        /// <param name="startedAt">Time the script execution was
        /// started</param>
        /// <param name="finishedAt">Time the script execution was
        /// finished</param>
        /// <param name="provisioningState">The state of the script execution
        /// resource. Possible values include: 'Pending', 'Running',
        /// 'Succeeded', 'Failed', 'Cancelling', 'Cancelled',
        /// 'Deleting'</param>
        /// <param name="output">Standard output stream from the powershell
        /// execution</param>
        /// <param name="namedOutputs">User-defined dictionary.</param>
        /// <param name="information">Standard information out stream from the
        /// powershell execution</param>
        /// <param name="warnings">Standard warning out stream from the
        /// powershell execution</param>
        /// <param name="errors">Standard error output stream from the
        /// powershell execution</param>
        public ScriptExecution(string timeout, string id = default(string), string name = default(string), string type = default(string), string scriptCmdletId = default(string), IList<ScriptExecutionParameter> parameters = default(IList<ScriptExecutionParameter>), IList<ScriptExecutionParameter> hiddenParameters = default(IList<ScriptExecutionParameter>), string failureReason = default(string), string retention = default(string), System.DateTime? submittedAt = default(System.DateTime?), System.DateTime? startedAt = default(System.DateTime?), System.DateTime? finishedAt = default(System.DateTime?), string provisioningState = default(string), IList<string> output = default(IList<string>), IDictionary<string, object> namedOutputs = default(IDictionary<string, object>), IList<string> information = default(IList<string>), IList<string> warnings = default(IList<string>), IList<string> errors = default(IList<string>))
            : base(id, name, type)
        {
            ScriptCmdletId = scriptCmdletId;
            Parameters = parameters;
            HiddenParameters = hiddenParameters;
            FailureReason = failureReason;
            Timeout = timeout;
            Retention = retention;
            SubmittedAt = submittedAt;
            StartedAt = startedAt;
            FinishedAt = finishedAt;
            ProvisioningState = provisioningState;
            Output = output;
            NamedOutputs = namedOutputs;
            Information = information;
            Warnings = warnings;
            Errors = errors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a reference to the script cmdlet resource if user is
        /// running a AVS script
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptCmdletId")]
        public string ScriptCmdletId { get; set; }

        /// <summary>
        /// Gets or sets parameters the script will accept
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameters")]
        public IList<ScriptExecutionParameter> Parameters { get; set; }

        /// <summary>
        /// Gets or sets parameters that will be hidden/not visible to ARM,
        /// such as passwords and credentials
        /// </summary>
        [JsonProperty(PropertyName = "properties.hiddenParameters")]
        public IList<ScriptExecutionParameter> HiddenParameters { get; set; }

        /// <summary>
        /// Gets or sets error message if the script was able to run, but if
        /// the script itself had errors or powershell threw an exception
        /// </summary>
        [JsonProperty(PropertyName = "properties.failureReason")]
        public string FailureReason { get; set; }

        /// <summary>
        /// Gets or sets time limit for execution
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeout")]
        public string Timeout { get; set; }

        /// <summary>
        /// Gets or sets time to live for the resource. If not provided, will
        /// be available for 60 days
        /// </summary>
        [JsonProperty(PropertyName = "properties.retention")]
        public string Retention { get; set; }

        /// <summary>
        /// Gets time the script execution was submitted
        /// </summary>
        [JsonProperty(PropertyName = "properties.submittedAt")]
        public System.DateTime? SubmittedAt { get; private set; }

        /// <summary>
        /// Gets time the script execution was started
        /// </summary>
        [JsonProperty(PropertyName = "properties.startedAt")]
        public System.DateTime? StartedAt { get; private set; }

        /// <summary>
        /// Gets time the script execution was finished
        /// </summary>
        [JsonProperty(PropertyName = "properties.finishedAt")]
        public System.DateTime? FinishedAt { get; private set; }

        /// <summary>
        /// Gets the state of the script execution resource. Possible values
        /// include: 'Pending', 'Running', 'Succeeded', 'Failed', 'Cancelling',
        /// 'Cancelled', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets standard output stream from the powershell execution
        /// </summary>
        [JsonProperty(PropertyName = "properties.output")]
        public IList<string> Output { get; set; }

        /// <summary>
        /// Gets or sets user-defined dictionary.
        /// </summary>
        [JsonProperty(PropertyName = "properties.namedOutputs")]
        public IDictionary<string, object> NamedOutputs { get; set; }

        /// <summary>
        /// Gets standard information out stream from the powershell execution
        /// </summary>
        [JsonProperty(PropertyName = "properties.information")]
        public IList<string> Information { get; private set; }

        /// <summary>
        /// Gets standard warning out stream from the powershell execution
        /// </summary>
        [JsonProperty(PropertyName = "properties.warnings")]
        public IList<string> Warnings { get; private set; }

        /// <summary>
        /// Gets standard error output stream from the powershell execution
        /// </summary>
        [JsonProperty(PropertyName = "properties.errors")]
        public IList<string> Errors { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Timeout == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Timeout");
            }
            if (Parameters != null)
            {
                foreach (var element in Parameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (HiddenParameters != null)
            {
                foreach (var element1 in HiddenParameters)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
