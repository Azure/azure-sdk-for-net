// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The properties of a Site Recovery Manager (SRM) addon
    /// </summary>
    [Newtonsoft.Json.JsonObject("SRM")]
    public partial class AddonSrmProperties : AddonProperties
    {
        /// <summary>
        /// Initializes a new instance of the AddonSrmProperties class.
        /// </summary>
        public AddonSrmProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AddonSrmProperties class.
        /// </summary>
        /// <param name="licenseKey">The Site Recovery Manager (SRM)
        /// license</param>
        /// <param name="provisioningState">The state of the addon
        /// provisioning. Possible values include: 'Succeeded', 'Failed',
        /// 'Cancelled', 'Building', 'Deleting', 'Updating'</param>
        public AddonSrmProperties(string licenseKey, string provisioningState = default(string))
            : base(provisioningState)
        {
            LicenseKey = licenseKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Site Recovery Manager (SRM) license
        /// </summary>
        [JsonProperty(PropertyName = "licenseKey")]
        public string LicenseKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LicenseKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LicenseKey");
            }
        }
    }
}
