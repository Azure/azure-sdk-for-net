// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// NSX DNS Zone
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class WorkloadNetworkDnsZone : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the WorkloadNetworkDnsZone class.
        /// </summary>
        public WorkloadNetworkDnsZone()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkloadNetworkDnsZone class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="displayName">Display name of the DNS Zone.</param>
        /// <param name="domain">Domain names of the DNS Zone.</param>
        /// <param name="dnsServerIps">DNS Server IP array of the DNS
        /// Zone.</param>
        /// <param name="sourceIp">Source IP of the DNS Zone.</param>
        /// <param name="dnsServices">Number of DNS Services using the DNS
        /// zone.</param>
        /// <param name="provisioningState">The provisioning state. Possible
        /// values include: 'Succeeded', 'Failed', 'Building', 'Deleting',
        /// 'Updating'</param>
        /// <param name="revision">NSX revision number.</param>
        public WorkloadNetworkDnsZone(string id = default(string), string name = default(string), string type = default(string), string displayName = default(string), IList<string> domain = default(IList<string>), IList<string> dnsServerIps = default(IList<string>), string sourceIp = default(string), long? dnsServices = default(long?), string provisioningState = default(string), long? revision = default(long?))
            : base(id, name, type)
        {
            DisplayName = displayName;
            Domain = domain;
            DnsServerIps = dnsServerIps;
            SourceIp = sourceIp;
            DnsServices = dnsServices;
            ProvisioningState = provisioningState;
            Revision = revision;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets display name of the DNS Zone.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets domain names of the DNS Zone.
        /// </summary>
        [JsonProperty(PropertyName = "properties.domain")]
        public IList<string> Domain { get; set; }

        /// <summary>
        /// Gets or sets DNS Server IP array of the DNS Zone.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsServerIps")]
        public IList<string> DnsServerIps { get; set; }

        /// <summary>
        /// Gets or sets source IP of the DNS Zone.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceIp")]
        public string SourceIp { get; set; }

        /// <summary>
        /// Gets or sets number of DNS Services using the DNS zone.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsServices")]
        public long? DnsServices { get; set; }

        /// <summary>
        /// Gets the provisioning state. Possible values include: 'Succeeded',
        /// 'Failed', 'Building', 'Deleting', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets NSX revision number.
        /// </summary>
        [JsonProperty(PropertyName = "properties.revision")]
        public long? Revision { get; set; }

    }
}
