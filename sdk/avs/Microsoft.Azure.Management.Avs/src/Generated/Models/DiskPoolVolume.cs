// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An iSCSI volume from Microsoft.StoragePool provider
    /// </summary>
    public partial class DiskPoolVolume
    {
        /// <summary>
        /// Initializes a new instance of the DiskPoolVolume class.
        /// </summary>
        public DiskPoolVolume()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiskPoolVolume class.
        /// </summary>
        /// <param name="targetId">Azure resource ID of the iSCSI
        /// target</param>
        /// <param name="lunName">Name of the LUN to be used for
        /// datastore</param>
        /// <param name="mountOption">Mode that describes whether the LUN has
        /// to be mounted as a datastore or attached as a LUN. Possible values
        /// include: 'MOUNT', 'ATTACH'</param>
        /// <param name="path">Device path</param>
        public DiskPoolVolume(string targetId, string lunName, string mountOption = default(string), string path = default(string))
        {
            TargetId = targetId;
            LunName = lunName;
            MountOption = mountOption;
            Path = path;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets azure resource ID of the iSCSI target
        /// </summary>
        [JsonProperty(PropertyName = "targetId")]
        public string TargetId { get; set; }

        /// <summary>
        /// Gets or sets name of the LUN to be used for datastore
        /// </summary>
        [JsonProperty(PropertyName = "lunName")]
        public string LunName { get; set; }

        /// <summary>
        /// Gets or sets mode that describes whether the LUN has to be mounted
        /// as a datastore or attached as a LUN. Possible values include:
        /// 'MOUNT', 'ATTACH'
        /// </summary>
        [JsonProperty(PropertyName = "mountOption")]
        public string MountOption { get; set; }

        /// <summary>
        /// Gets device path
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TargetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetId");
            }
            if (LunName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LunName");
            }
        }
    }
}
