// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CloudLinksOperations.
    /// </summary>
    public static partial class CloudLinksOperationsExtensions
    {
            /// <summary>
            /// List cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IPage<CloudLink> List(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.ListAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CloudLink>> ListAsync(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an cloud link by name in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cloudLinkName'>
            /// Name of the cloud link resource
            /// </param>
            public static CloudLink Get(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName, string cloudLinkName)
            {
                return operations.GetAsync(resourceGroupName, privateCloudName, cloudLinkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an cloud link by name in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cloudLinkName'>
            /// Name of the cloud link resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloudLink> GetAsync(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName, string cloudLinkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, privateCloudName, cloudLinkName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// The name of the private cloud.
            /// </param>
            /// <param name='cloudLinkName'>
            /// Name of the cloud link resource
            /// </param>
            /// <param name='cloudLink'>
            /// A cloud link in the private cloud
            /// </param>
            public static CloudLink CreateOrUpdate(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName, string cloudLinkName, CloudLink cloudLink)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, privateCloudName, cloudLinkName, cloudLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// The name of the private cloud.
            /// </param>
            /// <param name='cloudLinkName'>
            /// Name of the cloud link resource
            /// </param>
            /// <param name='cloudLink'>
            /// A cloud link in the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloudLink> CreateOrUpdateAsync(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName, string cloudLinkName, CloudLink cloudLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, privateCloudName, cloudLinkName, cloudLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cloudLinkName'>
            /// Name of the cloud link resource
            /// </param>
            public static void Delete(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName, string cloudLinkName)
            {
                operations.DeleteAsync(resourceGroupName, privateCloudName, cloudLinkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cloudLinkName'>
            /// Name of the cloud link resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName, string cloudLinkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, privateCloudName, cloudLinkName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// The name of the private cloud.
            /// </param>
            /// <param name='cloudLinkName'>
            /// Name of the cloud link resource
            /// </param>
            /// <param name='cloudLink'>
            /// A cloud link in the private cloud
            /// </param>
            public static CloudLink BeginCreateOrUpdate(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName, string cloudLinkName, CloudLink cloudLink)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, privateCloudName, cloudLinkName, cloudLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// The name of the private cloud.
            /// </param>
            /// <param name='cloudLinkName'>
            /// Name of the cloud link resource
            /// </param>
            /// <param name='cloudLink'>
            /// A cloud link in the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloudLink> BeginCreateOrUpdateAsync(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName, string cloudLinkName, CloudLink cloudLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, privateCloudName, cloudLinkName, cloudLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cloudLinkName'>
            /// Name of the cloud link resource
            /// </param>
            public static void BeginDelete(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName, string cloudLinkName)
            {
                operations.BeginDeleteAsync(resourceGroupName, privateCloudName, cloudLinkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cloudLinkName'>
            /// Name of the cloud link resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ICloudLinksOperations operations, string resourceGroupName, string privateCloudName, string cloudLinkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, privateCloudName, cloudLinkName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CloudLink> ListNext(this ICloudLinksOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List cloud link in a private cloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CloudLink>> ListNextAsync(this ICloudLinksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
