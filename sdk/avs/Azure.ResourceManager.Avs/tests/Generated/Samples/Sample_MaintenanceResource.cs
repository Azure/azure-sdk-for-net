// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Avs.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Avs.Samples
{
    public partial class Sample_MaintenanceResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_MaintenancesGet()
        {
            // Generated from example definition: 2025-09-01/Maintenances_Get.json
            // this example is just showing the usage of "Maintenance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MaintenanceResource created on azure
            // for more information of creating MaintenanceResource, please refer to the document of MaintenanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            string maintenanceName = "maintenance1";
            ResourceIdentifier maintenanceResourceId = MaintenanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName, maintenanceName);
            MaintenanceResource maintenance = client.GetMaintenanceResource(maintenanceResourceId);

            // invoke the operation
            MaintenanceResource result = await maintenance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MaintenanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Reschedule_MaintenancesReschedule()
        {
            // Generated from example definition: 2025-09-01/Maintenances_Reschedule.json
            // this example is just showing the usage of "Maintenances_Reschedule" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MaintenanceResource created on azure
            // for more information of creating MaintenanceResource, please refer to the document of MaintenanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            string maintenanceName = "maintenance1";
            ResourceIdentifier maintenanceResourceId = MaintenanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName, maintenanceName);
            MaintenanceResource maintenance = client.GetMaintenanceResource(maintenanceResourceId);

            // invoke the operation
            MaintenanceReschedule body = new MaintenanceReschedule
            {
                RescheduleOn = DateTimeOffset.Parse("2023-01-12T16:17:55.237Z"),
                Message = "Rescheduled due to xyz",
            };
            MaintenanceResource result = await maintenance.RescheduleAsync(body);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MaintenanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Schedule_MaintenancesSchedule()
        {
            // Generated from example definition: 2025-09-01/Maintenances_Schedule.json
            // this example is just showing the usage of "Maintenances_Schedule" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MaintenanceResource created on azure
            // for more information of creating MaintenanceResource, please refer to the document of MaintenanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            string maintenanceName = "maintenance1";
            ResourceIdentifier maintenanceResourceId = MaintenanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName, maintenanceName);
            MaintenanceResource maintenance = client.GetMaintenanceResource(maintenanceResourceId);

            // invoke the operation
            MaintenanceSchedule body = new MaintenanceSchedule
            {
                ScheduleOn = DateTimeOffset.Parse("2025-09-12T16:17:55.237Z"),
                Message = "scheduled due to xyz",
            };
            MaintenanceResource result = await maintenance.ScheduleAsync(body);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MaintenanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task InitiateChecks_MaintenancesInitiateChecks()
        {
            // Generated from example definition: 2025-09-01/Maintenances_InitiateChecks.json
            // this example is just showing the usage of "Maintenances_InitiateChecks" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MaintenanceResource created on azure
            // for more information of creating MaintenanceResource, please refer to the document of MaintenanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            string maintenanceName = "maintenance1";
            ResourceIdentifier maintenanceResourceId = MaintenanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName, maintenanceName);
            MaintenanceResource maintenance = client.GetMaintenanceResource(maintenanceResourceId);

            // invoke the operation
            MaintenanceResource result = await maintenance.InitiateChecksAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MaintenanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
