// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Avs.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Avs
{
    /// <summary> A class representing collection of WorkloadNetworkDnsZone and their operations over its parent. </summary>
    public partial class WorkloadNetworkDnsZoneCollection : ArmCollection, IEnumerable<WorkloadNetworkDnsZone>, IAsyncEnumerable<WorkloadNetworkDnsZone>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly WorkloadNetworksRestOperations _workloadNetworksRestClient;

        /// <summary> Initializes a new instance of the <see cref="WorkloadNetworkDnsZoneCollection"/> class for mocking. </summary>
        protected WorkloadNetworkDnsZoneCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="WorkloadNetworkDnsZoneCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal WorkloadNetworkDnsZoneCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _workloadNetworksRestClient = new WorkloadNetworksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != PrivateCloud.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, PrivateCloud.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Create a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="dnsZoneId"> NSX DNS Zone identifier. Generally the same as the DNS Zone&apos;s display name. </param>
        /// <param name="workloadNetworkDnsZone"> NSX DNS Zone. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsZoneId"/> or <paramref name="workloadNetworkDnsZone"/> is null. </exception>
        public virtual WorkloadNetworkCreateDnsZoneOperation CreateOrUpdate(bool waitForCompletion, string dnsZoneId, WorkloadNetworkDnsZoneData workloadNetworkDnsZone, CancellationToken cancellationToken = default)
        {
            if (dnsZoneId == null)
            {
                throw new ArgumentNullException(nameof(dnsZoneId));
            }
            if (workloadNetworkDnsZone == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDnsZone));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _workloadNetworksRestClient.CreateDnsZone(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dnsZoneId, workloadNetworkDnsZone, cancellationToken);
                var operation = new WorkloadNetworkCreateDnsZoneOperation(Parent, _clientDiagnostics, Pipeline, _workloadNetworksRestClient.CreateCreateDnsZoneRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dnsZoneId, workloadNetworkDnsZone).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="dnsZoneId"> NSX DNS Zone identifier. Generally the same as the DNS Zone&apos;s display name. </param>
        /// <param name="workloadNetworkDnsZone"> NSX DNS Zone. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsZoneId"/> or <paramref name="workloadNetworkDnsZone"/> is null. </exception>
        public async virtual Task<WorkloadNetworkCreateDnsZoneOperation> CreateOrUpdateAsync(bool waitForCompletion, string dnsZoneId, WorkloadNetworkDnsZoneData workloadNetworkDnsZone, CancellationToken cancellationToken = default)
        {
            if (dnsZoneId == null)
            {
                throw new ArgumentNullException(nameof(dnsZoneId));
            }
            if (workloadNetworkDnsZone == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDnsZone));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _workloadNetworksRestClient.CreateDnsZoneAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dnsZoneId, workloadNetworkDnsZone, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkCreateDnsZoneOperation(Parent, _clientDiagnostics, Pipeline, _workloadNetworksRestClient.CreateCreateDnsZoneRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dnsZoneId, workloadNetworkDnsZone).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="dnsZoneId"> NSX DNS Zone identifier. Generally the same as the DNS Zone&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsZoneId"/> is null. </exception>
        public virtual Response<WorkloadNetworkDnsZone> Get(string dnsZoneId, CancellationToken cancellationToken = default)
        {
            if (dnsZoneId == null)
            {
                throw new ArgumentNullException(nameof(dnsZoneId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.Get");
            scope.Start();
            try
            {
                var response = _workloadNetworksRestClient.GetDnsZone(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dnsZoneId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkloadNetworkDnsZone(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="dnsZoneId"> NSX DNS Zone identifier. Generally the same as the DNS Zone&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsZoneId"/> is null. </exception>
        public async virtual Task<Response<WorkloadNetworkDnsZone>> GetAsync(string dnsZoneId, CancellationToken cancellationToken = default)
        {
            if (dnsZoneId == null)
            {
                throw new ArgumentNullException(nameof(dnsZoneId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.Get");
            scope.Start();
            try
            {
                var response = await _workloadNetworksRestClient.GetDnsZoneAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dnsZoneId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new WorkloadNetworkDnsZone(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dnsZoneId"> NSX DNS Zone identifier. Generally the same as the DNS Zone&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsZoneId"/> is null. </exception>
        public virtual Response<WorkloadNetworkDnsZone> GetIfExists(string dnsZoneId, CancellationToken cancellationToken = default)
        {
            if (dnsZoneId == null)
            {
                throw new ArgumentNullException(nameof(dnsZoneId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _workloadNetworksRestClient.GetDnsZone(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dnsZoneId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<WorkloadNetworkDnsZone>(null, response.GetRawResponse());
                return Response.FromValue(new WorkloadNetworkDnsZone(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dnsZoneId"> NSX DNS Zone identifier. Generally the same as the DNS Zone&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsZoneId"/> is null. </exception>
        public async virtual Task<Response<WorkloadNetworkDnsZone>> GetIfExistsAsync(string dnsZoneId, CancellationToken cancellationToken = default)
        {
            if (dnsZoneId == null)
            {
                throw new ArgumentNullException(nameof(dnsZoneId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _workloadNetworksRestClient.GetDnsZoneAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dnsZoneId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<WorkloadNetworkDnsZone>(null, response.GetRawResponse());
                return Response.FromValue(new WorkloadNetworkDnsZone(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dnsZoneId"> NSX DNS Zone identifier. Generally the same as the DNS Zone&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsZoneId"/> is null. </exception>
        public virtual Response<bool> Exists(string dnsZoneId, CancellationToken cancellationToken = default)
        {
            if (dnsZoneId == null)
            {
                throw new ArgumentNullException(nameof(dnsZoneId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(dnsZoneId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dnsZoneId"> NSX DNS Zone identifier. Generally the same as the DNS Zone&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsZoneId"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string dnsZoneId, CancellationToken cancellationToken = default)
        {
            if (dnsZoneId == null)
            {
                throw new ArgumentNullException(nameof(dnsZoneId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(dnsZoneId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List of DNS zones in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkloadNetworkDnsZone" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadNetworkDnsZone> GetAll(CancellationToken cancellationToken = default)
        {
            Page<WorkloadNetworkDnsZone> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _workloadNetworksRestClient.ListDnsZones(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkDnsZone(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkloadNetworkDnsZone> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _workloadNetworksRestClient.ListDnsZonesNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkDnsZone(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of DNS zones in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkloadNetworkDnsZone" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadNetworkDnsZone> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkloadNetworkDnsZone>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _workloadNetworksRestClient.ListDnsZonesAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkDnsZone(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkloadNetworkDnsZone>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDnsZoneCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _workloadNetworksRestClient.ListDnsZonesNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkDnsZone(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<WorkloadNetworkDnsZone> IEnumerable<WorkloadNetworkDnsZone>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<WorkloadNetworkDnsZone> IAsyncEnumerable<WorkloadNetworkDnsZone>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, WorkloadNetworkDnsZone, WorkloadNetworkDnsZoneData> Construct() { }
    }
}
