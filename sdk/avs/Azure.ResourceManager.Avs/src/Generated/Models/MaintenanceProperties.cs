// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> properties of a maintenance. </summary>
    public partial class MaintenanceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MaintenanceProperties"/>. </summary>
        internal MaintenanceProperties()
        {
            Operations = new ChangeTrackingList<MaintenanceManagementOperation>();
        }

        /// <summary> Initializes a new instance of <see cref="MaintenanceProperties"/>. </summary>
        /// <param name="component"> type of maintenance. </param>
        /// <param name="displayName"> Display name for maintenance. </param>
        /// <param name="clusterId"> Cluster ID for on which maintenance will be applied. Empty if maintenance is at private cloud level. </param>
        /// <param name="infoLink"> Link to maintenance info. </param>
        /// <param name="impact"> Impact on the resource during maintenance period. </param>
        /// <param name="scheduledByMicrosoft"> If maintenance is scheduled by Microsoft. </param>
        /// <param name="state"> The state of the maintenance. </param>
        /// <param name="scheduledStartOn"> Scheduled maintenance start time. </param>
        /// <param name="estimatedDurationInMinutes"> Estimated time maintenance will take in minutes. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="operations">
        /// Operations on  maintenance
        /// Please note <see cref="MaintenanceManagementOperation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MaintenanceReadinessRefreshOperation"/>, <see cref="RescheduleOperation"/> and <see cref="ScheduleOperation"/>.
        /// </param>
        /// <param name="maintenanceReadiness"> Indicates whether the maintenance is ready to proceed. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MaintenanceProperties(MaintenanceType? component, string displayName, int? clusterId, string infoLink, string impact, bool? scheduledByMicrosoft, MaintenanceState state, DateTimeOffset? scheduledStartOn, long? estimatedDurationInMinutes, MaintenanceProvisioningState? provisioningState, IReadOnlyList<MaintenanceManagementOperation> operations, MaintenanceReadiness maintenanceReadiness, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Component = component;
            DisplayName = displayName;
            ClusterId = clusterId;
            InfoLink = infoLink;
            Impact = impact;
            ScheduledByMicrosoft = scheduledByMicrosoft;
            State = state;
            ScheduledStartOn = scheduledStartOn;
            EstimatedDurationInMinutes = estimatedDurationInMinutes;
            ProvisioningState = provisioningState;
            Operations = operations;
            MaintenanceReadiness = maintenanceReadiness;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> type of maintenance. </summary>
        public MaintenanceType? Component { get; }
        /// <summary> Display name for maintenance. </summary>
        public string DisplayName { get; }
        /// <summary> Cluster ID for on which maintenance will be applied. Empty if maintenance is at private cloud level. </summary>
        public int? ClusterId { get; }
        /// <summary> Link to maintenance info. </summary>
        public string InfoLink { get; }
        /// <summary> Impact on the resource during maintenance period. </summary>
        public string Impact { get; }
        /// <summary> If maintenance is scheduled by Microsoft. </summary>
        public bool? ScheduledByMicrosoft { get; }
        /// <summary> The state of the maintenance. </summary>
        public MaintenanceState State { get; }
        /// <summary> Scheduled maintenance start time. </summary>
        public DateTimeOffset? ScheduledStartOn { get; }
        /// <summary> Estimated time maintenance will take in minutes. </summary>
        public long? EstimatedDurationInMinutes { get; }
        /// <summary> The provisioning state. </summary>
        public MaintenanceProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// Operations on  maintenance
        /// Please note <see cref="MaintenanceManagementOperation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MaintenanceReadinessRefreshOperation"/>, <see cref="RescheduleOperation"/> and <see cref="ScheduleOperation"/>.
        /// </summary>
        public IReadOnlyList<MaintenanceManagementOperation> Operations { get; }
        /// <summary> Indicates whether the maintenance is ready to proceed. </summary>
        public MaintenanceReadiness MaintenanceReadiness { get; }
    }
}
