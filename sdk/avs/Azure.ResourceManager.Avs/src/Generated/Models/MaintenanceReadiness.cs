// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> Maintenance readiness details. </summary>
    public partial class MaintenanceReadiness
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MaintenanceReadiness"/>. </summary>
        /// <param name="type"> The type of maintenance readiness check. </param>
        /// <param name="status"> The current readiness status of maintenance. </param>
        internal MaintenanceReadiness(MaintenanceCheckType type, MaintenanceReadinessStatus status)
        {
            Type = type;
            Status = status;
            FailedChecks = new ChangeTrackingList<MaintenanceFailedCheck>();
        }

        /// <summary> Initializes a new instance of <see cref="MaintenanceReadiness"/>. </summary>
        /// <param name="type"> The type of maintenance readiness check. </param>
        /// <param name="status"> The current readiness status of maintenance. </param>
        /// <param name="message"> A summary message of the readiness check result. </param>
        /// <param name="failedChecks"> A list of failed checks, if any. </param>
        /// <param name="lastUpdated"> The timestamp of the last readiness update. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MaintenanceReadiness(MaintenanceCheckType type, MaintenanceReadinessStatus status, string message, IReadOnlyList<MaintenanceFailedCheck> failedChecks, DateTimeOffset? lastUpdated, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            Status = status;
            Message = message;
            FailedChecks = failedChecks;
            LastUpdated = lastUpdated;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MaintenanceReadiness"/> for deserialization. </summary>
        internal MaintenanceReadiness()
        {
        }

        /// <summary> The type of maintenance readiness check. </summary>
        public MaintenanceCheckType Type { get; }
        /// <summary> The current readiness status of maintenance. </summary>
        public MaintenanceReadinessStatus Status { get; }
        /// <summary> A summary message of the readiness check result. </summary>
        public string Message { get; }
        /// <summary> A list of failed checks, if any. </summary>
        public IReadOnlyList<MaintenanceFailedCheck> FailedChecks { get; }
        /// <summary> The timestamp of the last readiness update. </summary>
        public DateTimeOffset? LastUpdated { get; }
    }
}
