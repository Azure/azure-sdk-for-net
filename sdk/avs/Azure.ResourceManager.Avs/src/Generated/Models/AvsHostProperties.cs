// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary>
    /// The properties of a host.
    /// Please note <see cref="AvsHostProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="GeneralAvsHostProperties"/> and <see cref="SpecializedAvsHostProperties"/>.
    /// </summary>
    public abstract partial class AvsHostProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AvsHostProperties"/>. </summary>
        protected AvsHostProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AvsHostProperties"/>. </summary>
        /// <param name="kind"> The kind of host. </param>
        /// <param name="provisioningState"> The state of the host provisioning. </param>
        /// <param name="displayName"> Display name of the host in VMware vCenter. </param>
        /// <param name="moRefId"> vCenter managed object reference ID of the host. </param>
        /// <param name="fqdn"> Fully qualified domain name of the host. </param>
        /// <param name="maintenance"> If provided, the host is in maintenance. The value is the reason for maintenance. </param>
        /// <param name="faultDomain"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AvsHostProperties(HostKind kind, AvsHostProvisioningState? provisioningState, string displayName, string moRefId, string fqdn, AvsHostMaintenance? maintenance, string faultDomain, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Kind = kind;
            ProvisioningState = provisioningState;
            DisplayName = displayName;
            MoRefId = moRefId;
            Fqdn = fqdn;
            Maintenance = maintenance;
            FaultDomain = faultDomain;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The kind of host. </summary>
        internal HostKind Kind { get; set; }
        /// <summary> The state of the host provisioning. </summary>
        public AvsHostProvisioningState? ProvisioningState { get; }
        /// <summary> Display name of the host in VMware vCenter. </summary>
        public string DisplayName { get; }
        /// <summary> vCenter managed object reference ID of the host. </summary>
        public string MoRefId { get; }
        /// <summary> Fully qualified domain name of the host. </summary>
        public string Fqdn { get; }
        /// <summary> If provided, the host is in maintenance. The value is the reason for maintenance. </summary>
        public AvsHostMaintenance? Maintenance { get; }
        /// <summary> Gets the fault domain. </summary>
        public string FaultDomain { get; }
    }
}
