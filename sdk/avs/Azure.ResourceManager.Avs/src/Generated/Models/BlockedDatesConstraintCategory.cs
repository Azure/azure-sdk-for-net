// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> Reason for blocking operation on maintenance. </summary>
    public readonly partial struct BlockedDatesConstraintCategory : IEquatable<BlockedDatesConstraintCategory>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BlockedDatesConstraintCategory"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BlockedDatesConstraintCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HiPriorityEventValue = "HiPriorityEvent";
        private const string QuotaExhaustedValue = "QuotaExhausted";
        private const string HolidayValue = "Holiday";

        /// <summary> Hi-Priority Event. </summary>
        public static BlockedDatesConstraintCategory HiPriorityEvent { get; } = new BlockedDatesConstraintCategory(HiPriorityEventValue);
        /// <summary> Quota Exhausted. </summary>
        public static BlockedDatesConstraintCategory QuotaExhausted { get; } = new BlockedDatesConstraintCategory(QuotaExhaustedValue);
        /// <summary> Holidays. </summary>
        public static BlockedDatesConstraintCategory Holiday { get; } = new BlockedDatesConstraintCategory(HolidayValue);
        /// <summary> Determines if two <see cref="BlockedDatesConstraintCategory"/> values are the same. </summary>
        public static bool operator ==(BlockedDatesConstraintCategory left, BlockedDatesConstraintCategory right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BlockedDatesConstraintCategory"/> values are not the same. </summary>
        public static bool operator !=(BlockedDatesConstraintCategory left, BlockedDatesConstraintCategory right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BlockedDatesConstraintCategory"/>. </summary>
        public static implicit operator BlockedDatesConstraintCategory(string value) => new BlockedDatesConstraintCategory(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BlockedDatesConstraintCategory other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BlockedDatesConstraintCategory other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
