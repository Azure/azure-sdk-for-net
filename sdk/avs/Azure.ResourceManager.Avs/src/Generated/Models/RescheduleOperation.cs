// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> Constraints for rescheduling maintenance. </summary>
    public partial class RescheduleOperation : MaintenanceManagementOperation
    {
        /// <summary> Initializes a new instance of <see cref="RescheduleOperation"/>. </summary>
        internal RescheduleOperation()
        {
            Constraints = new ChangeTrackingList<RescheduleOperationConstraint>();
            Kind = MaintenanceManagementOperationKind.Reschedule;
        }

        /// <summary> Initializes a new instance of <see cref="RescheduleOperation"/>. </summary>
        /// <param name="kind"> The kind of operation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="isDisabled"> If rescheduling is disabled. </param>
        /// <param name="disabledReason"> Reason for reschedule disabled. </param>
        /// <param name="constraints">
        /// Constraints for rescheduling maintenance
        /// Please note <see cref="RescheduleOperationConstraint"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvailableWindowForMaintenanceWhileRescheduleOperation"/> and <see cref="BlockedWhileRescheduleOperation"/>.
        /// </param>
        internal RescheduleOperation(MaintenanceManagementOperationKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, bool? isDisabled, string disabledReason, IReadOnlyList<RescheduleOperationConstraint> constraints) : base(kind, serializedAdditionalRawData)
        {
            IsDisabled = isDisabled;
            DisabledReason = disabledReason;
            Constraints = constraints;
            Kind = kind;
        }

        /// <summary> If rescheduling is disabled. </summary>
        public bool? IsDisabled { get; }
        /// <summary> Reason for reschedule disabled. </summary>
        public string DisabledReason { get; }
        /// <summary>
        /// Constraints for rescheduling maintenance
        /// Please note <see cref="RescheduleOperationConstraint"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvailableWindowForMaintenanceWhileRescheduleOperation"/> and <see cref="BlockedWhileRescheduleOperation"/>.
        /// </summary>
        public IReadOnlyList<RescheduleOperationConstraint> Constraints { get; }
    }
}
