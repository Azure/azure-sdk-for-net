// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> Constraints for scheduling of maintenance. </summary>
    internal readonly partial struct ScheduleOperationConstraintKind : IEquatable<ScheduleOperationConstraintKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ScheduleOperationConstraintKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScheduleOperationConstraintKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SchedulingWindowValue = "SchedulingWindow";
        private const string AvailableWindowForMaintenanceWhileScheduleOperationValue = "AvailableWindowForMaintenance";
        private const string BlockedWhileScheduleOperationValue = "Blocked";

        /// <summary> Time window in which Customer has option to schedule maintenance. </summary>
        public static ScheduleOperationConstraintKind SchedulingWindow { get; } = new ScheduleOperationConstraintKind(SchedulingWindowValue);
        /// <summary> Time window in which maintenance can be scheduled. </summary>
        public static ScheduleOperationConstraintKind AvailableWindowForMaintenanceWhileScheduleOperation { get; } = new ScheduleOperationConstraintKind(AvailableWindowForMaintenanceWhileScheduleOperationValue);
        /// <summary> Blocked time range constraint. </summary>
        public static ScheduleOperationConstraintKind BlockedWhileScheduleOperation { get; } = new ScheduleOperationConstraintKind(BlockedWhileScheduleOperationValue);
        /// <summary> Determines if two <see cref="ScheduleOperationConstraintKind"/> values are the same. </summary>
        public static bool operator ==(ScheduleOperationConstraintKind left, ScheduleOperationConstraintKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScheduleOperationConstraintKind"/> values are not the same. </summary>
        public static bool operator !=(ScheduleOperationConstraintKind left, ScheduleOperationConstraintKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ScheduleOperationConstraintKind"/>. </summary>
        public static implicit operator ScheduleOperationConstraintKind(string value) => new ScheduleOperationConstraintKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScheduleOperationConstraintKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScheduleOperationConstraintKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
