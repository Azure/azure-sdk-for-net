// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> Customer presentable maintenance state. </summary>
    public readonly partial struct MaintenanceStateName : IEquatable<MaintenanceStateName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MaintenanceStateName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MaintenanceStateName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotScheduledValue = "NotScheduled";
        private const string ScheduledValue = "Scheduled";
        private const string InProgressValue = "InProgress";
        private const string SuccessValue = "Success";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";

        /// <summary> Maintenance Not Scheduled. </summary>
        public static MaintenanceStateName NotScheduled { get; } = new MaintenanceStateName(NotScheduledValue);
        /// <summary> Maintenance Scheduled. </summary>
        public static MaintenanceStateName Scheduled { get; } = new MaintenanceStateName(ScheduledValue);
        /// <summary> Maintenance In Progress. </summary>
        public static MaintenanceStateName InProgress { get; } = new MaintenanceStateName(InProgressValue);
        /// <summary> Maintenance Succeeded. </summary>
        public static MaintenanceStateName Success { get; } = new MaintenanceStateName(SuccessValue);
        /// <summary> Maintenance Failed. </summary>
        public static MaintenanceStateName Failed { get; } = new MaintenanceStateName(FailedValue);
        /// <summary> Maintenance Cancelled. </summary>
        public static MaintenanceStateName Canceled { get; } = new MaintenanceStateName(CanceledValue);
        /// <summary> Determines if two <see cref="MaintenanceStateName"/> values are the same. </summary>
        public static bool operator ==(MaintenanceStateName left, MaintenanceStateName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MaintenanceStateName"/> values are not the same. </summary>
        public static bool operator !=(MaintenanceStateName left, MaintenanceStateName right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MaintenanceStateName"/>. </summary>
        public static implicit operator MaintenanceStateName(string value) => new MaintenanceStateName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MaintenanceStateName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MaintenanceStateName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
