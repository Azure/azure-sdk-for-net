// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> Defines the readiness status of maintenance. </summary>
    public readonly partial struct MaintenanceReadinessStatus : IEquatable<MaintenanceReadinessStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MaintenanceReadinessStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MaintenanceReadinessStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReadyValue = "Ready";
        private const string NotReadyValue = "NotReady";
        private const string DataNotAvailableValue = "DataNotAvailable";
        private const string NotApplicableValue = "NotApplicable";

        /// <summary> The system is ready for maintenance. </summary>
        public static MaintenanceReadinessStatus Ready { get; } = new MaintenanceReadinessStatus(ReadyValue);
        /// <summary> The system is not ready for maintenance. </summary>
        public static MaintenanceReadinessStatus NotReady { get; } = new MaintenanceReadinessStatus(NotReadyValue);
        /// <summary> Data is not available to determine readiness. </summary>
        public static MaintenanceReadinessStatus DataNotAvailable { get; } = new MaintenanceReadinessStatus(DataNotAvailableValue);
        /// <summary> Readiness check is not applicable. </summary>
        public static MaintenanceReadinessStatus NotApplicable { get; } = new MaintenanceReadinessStatus(NotApplicableValue);
        /// <summary> Determines if two <see cref="MaintenanceReadinessStatus"/> values are the same. </summary>
        public static bool operator ==(MaintenanceReadinessStatus left, MaintenanceReadinessStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MaintenanceReadinessStatus"/> values are not the same. </summary>
        public static bool operator !=(MaintenanceReadinessStatus left, MaintenanceReadinessStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MaintenanceReadinessStatus"/>. </summary>
        public static implicit operator MaintenanceReadinessStatus(string value) => new MaintenanceReadinessStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MaintenanceReadinessStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MaintenanceReadinessStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
