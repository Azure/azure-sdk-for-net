// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> Defines the type of operation. </summary>
    internal readonly partial struct MaintenanceManagementOperationKind : IEquatable<MaintenanceManagementOperationKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MaintenanceManagementOperationKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MaintenanceManagementOperationKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ScheduleValue = "Schedule";
        private const string RescheduleValue = "Reschedule";
        private const string MaintenanceReadinessRefreshValue = "MaintenanceReadinessRefresh";

        /// <summary> Represents a scheduling operation. </summary>
        public static MaintenanceManagementOperationKind Schedule { get; } = new MaintenanceManagementOperationKind(ScheduleValue);
        /// <summary> Represents a rescheduling operation. </summary>
        public static MaintenanceManagementOperationKind Reschedule { get; } = new MaintenanceManagementOperationKind(RescheduleValue);
        /// <summary> Represents a maintenance readiness refresh operation. </summary>
        public static MaintenanceManagementOperationKind MaintenanceReadinessRefresh { get; } = new MaintenanceManagementOperationKind(MaintenanceReadinessRefreshValue);
        /// <summary> Determines if two <see cref="MaintenanceManagementOperationKind"/> values are the same. </summary>
        public static bool operator ==(MaintenanceManagementOperationKind left, MaintenanceManagementOperationKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MaintenanceManagementOperationKind"/> values are not the same. </summary>
        public static bool operator !=(MaintenanceManagementOperationKind left, MaintenanceManagementOperationKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MaintenanceManagementOperationKind"/>. </summary>
        public static implicit operator MaintenanceManagementOperationKind(string value) => new MaintenanceManagementOperationKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MaintenanceManagementOperationKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MaintenanceManagementOperationKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
