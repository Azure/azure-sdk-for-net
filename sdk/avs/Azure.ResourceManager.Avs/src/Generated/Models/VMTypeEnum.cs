// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> Virtual machine type. </summary>
    public readonly partial struct VMTypeEnum : IEquatable<VMTypeEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VMTypeEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VMTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RegularValue = "REGULAR";
        private const string EdgeValue = "EDGE";
        private const string ServiceValue = "SERVICE";

        /// <summary> REGULAR. </summary>
        public static VMTypeEnum Regular { get; } = new VMTypeEnum(RegularValue);
        /// <summary> EDGE. </summary>
        public static VMTypeEnum Edge { get; } = new VMTypeEnum(EdgeValue);
        /// <summary> SERVICE. </summary>
        public static VMTypeEnum Service { get; } = new VMTypeEnum(ServiceValue);
        /// <summary> Determines if two <see cref="VMTypeEnum"/> values are the same. </summary>
        public static bool operator ==(VMTypeEnum left, VMTypeEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VMTypeEnum"/> values are not the same. </summary>
        public static bool operator !=(VMTypeEnum left, VMTypeEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VMTypeEnum"/>. </summary>
        public static implicit operator VMTypeEnum(string value) => new VMTypeEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VMTypeEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VMTypeEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
