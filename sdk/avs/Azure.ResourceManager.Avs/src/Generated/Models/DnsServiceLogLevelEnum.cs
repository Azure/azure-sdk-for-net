// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> DNS service log level. </summary>
    public readonly partial struct DnsServiceLogLevelEnum : IEquatable<DnsServiceLogLevelEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DnsServiceLogLevelEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DnsServiceLogLevelEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DEBUGValue = "DEBUG";
        private const string INFOValue = "INFO";
        private const string WARNINGValue = "WARNING";
        private const string ERRORValue = "ERROR";
        private const string FATALValue = "FATAL";

        /// <summary> is debug. </summary>
        public static DnsServiceLogLevelEnum DEBUG { get; } = new DnsServiceLogLevelEnum(DEBUGValue);
        /// <summary> is info. </summary>
        public static DnsServiceLogLevelEnum INFO { get; } = new DnsServiceLogLevelEnum(INFOValue);
        /// <summary> is warning. </summary>
        public static DnsServiceLogLevelEnum WARNING { get; } = new DnsServiceLogLevelEnum(WARNINGValue);
        /// <summary> is error. </summary>
        public static DnsServiceLogLevelEnum ERROR { get; } = new DnsServiceLogLevelEnum(ERRORValue);
        /// <summary> is fatal. </summary>
        public static DnsServiceLogLevelEnum FATAL { get; } = new DnsServiceLogLevelEnum(FATALValue);
        /// <summary> Determines if two <see cref="DnsServiceLogLevelEnum"/> values are the same. </summary>
        public static bool operator ==(DnsServiceLogLevelEnum left, DnsServiceLogLevelEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DnsServiceLogLevelEnum"/> values are not the same. </summary>
        public static bool operator !=(DnsServiceLogLevelEnum left, DnsServiceLogLevelEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DnsServiceLogLevelEnum"/>. </summary>
        public static implicit operator DnsServiceLogLevelEnum(string value) => new DnsServiceLogLevelEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DnsServiceLogLevelEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DnsServiceLogLevelEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
