// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> VM type. </summary>
    public readonly partial struct VmTypeEnum : IEquatable<VmTypeEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VmTypeEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VmTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string REGULARValue = "REGULAR";
        private const string EDGEValue = "EDGE";
        private const string SERVICEValue = "SERVICE";

        /// <summary> is regular. </summary>
        public static VmTypeEnum REGULAR { get; } = new VmTypeEnum(REGULARValue);
        /// <summary> is edge. </summary>
        public static VmTypeEnum EDGE { get; } = new VmTypeEnum(EDGEValue);
        /// <summary> is service. </summary>
        public static VmTypeEnum SERVICE { get; } = new VmTypeEnum(SERVICEValue);
        /// <summary> Determines if two <see cref="VmTypeEnum"/> values are the same. </summary>
        public static bool operator ==(VmTypeEnum left, VmTypeEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VmTypeEnum"/> values are not the same. </summary>
        public static bool operator !=(VmTypeEnum left, VmTypeEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VmTypeEnum"/>. </summary>
        public static implicit operator VmTypeEnum(string value) => new VmTypeEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VmTypeEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VmTypeEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
