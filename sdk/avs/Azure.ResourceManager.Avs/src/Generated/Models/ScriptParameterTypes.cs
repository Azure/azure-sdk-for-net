// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> The type of parameter the script is expecting. psCredential is a PSCredentialObject. </summary>
    public readonly partial struct ScriptParameterTypes : IEquatable<ScriptParameterTypes>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ScriptParameterTypes"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScriptParameterTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StringValue = "String";
        private const string SecureStringValue = "SecureString";
        private const string CredentialValue = "Credential";
        private const string IntValue = "Int";
        private const string BoolValue = "Bool";
        private const string FloatValue = "Float";

        /// <summary> String. </summary>
        public static ScriptParameterTypes String { get; } = new ScriptParameterTypes(StringValue);
        /// <summary> SecureString. </summary>
        public static ScriptParameterTypes SecureString { get; } = new ScriptParameterTypes(SecureStringValue);
        /// <summary> Credential. </summary>
        public static ScriptParameterTypes Credential { get; } = new ScriptParameterTypes(CredentialValue);
        /// <summary> Int. </summary>
        public static ScriptParameterTypes Int { get; } = new ScriptParameterTypes(IntValue);
        /// <summary> Bool. </summary>
        public static ScriptParameterTypes Bool { get; } = new ScriptParameterTypes(BoolValue);
        /// <summary> Float. </summary>
        public static ScriptParameterTypes Float { get; } = new ScriptParameterTypes(FloatValue);
        /// <summary> Determines if two <see cref="ScriptParameterTypes"/> values are the same. </summary>
        public static bool operator ==(ScriptParameterTypes left, ScriptParameterTypes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScriptParameterTypes"/> values are not the same. </summary>
        public static bool operator !=(ScriptParameterTypes left, ScriptParameterTypes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ScriptParameterTypes"/>. </summary>
        public static implicit operator ScriptParameterTypes(string value) => new ScriptParameterTypes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScriptParameterTypes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScriptParameterTypes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
