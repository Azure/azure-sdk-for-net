// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> The properties of a private cloud resource. </summary>
    public partial class PrivateCloudProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PrivateCloudProperties"/>. </summary>
        /// <param name="managementCluster"> The default cluster used for management. </param>
        /// <param name="networkBlock">
        /// The block of addresses should be unique across VNet in your subscription as
        /// well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where
        /// A,B,C,D are between 0 and 255, and X is between 0 and 22
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementCluster"/> or <paramref name="networkBlock"/> is null. </exception>
        public PrivateCloudProperties(AvsManagementCluster managementCluster, string networkBlock)
        {
            Argument.AssertNotNull(managementCluster, nameof(managementCluster));
            Argument.AssertNotNull(networkBlock, nameof(networkBlock));

            ManagementCluster = managementCluster;
            IdentitySources = new ChangeTrackingList<SingleSignOnIdentitySource>();
            ExtendedNetworkBlocks = new ChangeTrackingList<string>();
            NetworkBlock = networkBlock;
            ExternalCloudLinks = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="PrivateCloudProperties"/>. </summary>
        /// <param name="managementCluster"> The default cluster used for management. </param>
        /// <param name="internet"> Connectivity to internet is enabled or disabled. </param>
        /// <param name="identitySources"> vCenter Single Sign On Identity Sources. </param>
        /// <param name="availability"> Properties describing how the cloud is distributed across availability zones. </param>
        /// <param name="encryption"> Customer managed key encryption, can be enabled or disabled. </param>
        /// <param name="extendedNetworkBlocks">
        /// Array of additional networks noncontiguous with networkBlock. Networks must be
        /// unique and non-overlapping across VNet in your subscription, on-premise, and
        /// this privateCloud networkBlock attribute. Make sure the CIDR format conforms to
        /// (A.B.C.D/X).
        /// </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="circuit"> An ExpressRoute Circuit. </param>
        /// <param name="endpoints"> The endpoints. </param>
        /// <param name="networkBlock">
        /// The block of addresses should be unique across VNet in your subscription as
        /// well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where
        /// A,B,C,D are between 0 and 255, and X is between 0 and 22
        /// </param>
        /// <param name="managementNetwork"> Network used to access vCenter Server and NSX-T Manager. </param>
        /// <param name="provisioningNetwork"> Used for virtual machine cold migration, cloning, and snapshot migration. </param>
        /// <param name="vmotionNetwork"> Used for live migration of virtual machines. </param>
        /// <param name="vcenterPassword"> Optionally, set the vCenter admin password when the private cloud is created. </param>
        /// <param name="nsxtPassword"> Optionally, set the NSX-T Manager password when the private cloud is created. </param>
        /// <param name="vcenterCertificateThumbprint"> Thumbprint of the vCenter Server SSL certificate. </param>
        /// <param name="nsxtCertificateThumbprint"> Thumbprint of the NSX-T Manager SSL certificate. </param>
        /// <param name="externalCloudLinks"> Array of cloud link IDs from other clouds that connect to this one. </param>
        /// <param name="secondaryCircuit">
        /// A secondary expressRoute circuit from a separate AZ. Only present in a
        /// stretched private cloud
        /// </param>
        /// <param name="nsxPublicIPQuotaRaised">
        /// Flag to indicate whether the private cloud has the quota for provisioned NSX
        /// Public IP count raised from 64 to 1024
        /// </param>
        /// <param name="virtualNetworkId"> Azure resource ID of the virtual network. </param>
        /// <param name="dnsZoneType"> The type of DNS zone to use. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PrivateCloudProperties(AvsManagementCluster managementCluster, InternetConnectivityState? internet, IList<SingleSignOnIdentitySource> identitySources, PrivateCloudAvailabilityProperties availability, CustomerManagedEncryption encryption, IList<string> extendedNetworkBlocks, AvsPrivateCloudProvisioningState? provisioningState, ExpressRouteCircuit circuit, AvsPrivateCloudEndpoints endpoints, string networkBlock, string managementNetwork, string provisioningNetwork, string vmotionNetwork, string vcenterPassword, string nsxtPassword, string vcenterCertificateThumbprint, string nsxtCertificateThumbprint, IReadOnlyList<string> externalCloudLinks, ExpressRouteCircuit secondaryCircuit, NsxPublicIPQuotaRaisedEnum? nsxPublicIPQuotaRaised, ResourceIdentifier virtualNetworkId, DnsZoneType? dnsZoneType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ManagementCluster = managementCluster;
            Internet = internet;
            IdentitySources = identitySources;
            Availability = availability;
            Encryption = encryption;
            ExtendedNetworkBlocks = extendedNetworkBlocks;
            ProvisioningState = provisioningState;
            Circuit = circuit;
            Endpoints = endpoints;
            NetworkBlock = networkBlock;
            ManagementNetwork = managementNetwork;
            ProvisioningNetwork = provisioningNetwork;
            VmotionNetwork = vmotionNetwork;
            VcenterPassword = vcenterPassword;
            NsxtPassword = nsxtPassword;
            VcenterCertificateThumbprint = vcenterCertificateThumbprint;
            NsxtCertificateThumbprint = nsxtCertificateThumbprint;
            ExternalCloudLinks = externalCloudLinks;
            SecondaryCircuit = secondaryCircuit;
            NsxPublicIPQuotaRaised = nsxPublicIPQuotaRaised;
            VirtualNetworkId = virtualNetworkId;
            DnsZoneType = dnsZoneType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PrivateCloudProperties"/> for deserialization. </summary>
        internal PrivateCloudProperties()
        {
        }

        /// <summary> The default cluster used for management. </summary>
        public AvsManagementCluster ManagementCluster { get; set; }
        /// <summary> Connectivity to internet is enabled or disabled. </summary>
        public InternetConnectivityState? Internet { get; set; }
        /// <summary> vCenter Single Sign On Identity Sources. </summary>
        public IList<SingleSignOnIdentitySource> IdentitySources { get; }
        /// <summary> Properties describing how the cloud is distributed across availability zones. </summary>
        public PrivateCloudAvailabilityProperties Availability { get; set; }
        /// <summary> Customer managed key encryption, can be enabled or disabled. </summary>
        public CustomerManagedEncryption Encryption { get; set; }
        /// <summary>
        /// Array of additional networks noncontiguous with networkBlock. Networks must be
        /// unique and non-overlapping across VNet in your subscription, on-premise, and
        /// this privateCloud networkBlock attribute. Make sure the CIDR format conforms to
        /// (A.B.C.D/X).
        /// </summary>
        public IList<string> ExtendedNetworkBlocks { get; }
        /// <summary> The provisioning state. </summary>
        public AvsPrivateCloudProvisioningState? ProvisioningState { get; }
        /// <summary> An ExpressRoute Circuit. </summary>
        public ExpressRouteCircuit Circuit { get; set; }
        /// <summary> The endpoints. </summary>
        public AvsPrivateCloudEndpoints Endpoints { get; }
        /// <summary>
        /// The block of addresses should be unique across VNet in your subscription as
        /// well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where
        /// A,B,C,D are between 0 and 255, and X is between 0 and 22
        /// </summary>
        public string NetworkBlock { get; set; }
        /// <summary> Network used to access vCenter Server and NSX-T Manager. </summary>
        public string ManagementNetwork { get; }
        /// <summary> Used for virtual machine cold migration, cloning, and snapshot migration. </summary>
        public string ProvisioningNetwork { get; }
        /// <summary> Used for live migration of virtual machines. </summary>
        public string VmotionNetwork { get; }
        /// <summary> Optionally, set the vCenter admin password when the private cloud is created. </summary>
        public string VcenterPassword { get; set; }
        /// <summary> Optionally, set the NSX-T Manager password when the private cloud is created. </summary>
        public string NsxtPassword { get; set; }
        /// <summary> Thumbprint of the vCenter Server SSL certificate. </summary>
        public string VcenterCertificateThumbprint { get; }
        /// <summary> Thumbprint of the NSX-T Manager SSL certificate. </summary>
        public string NsxtCertificateThumbprint { get; }
        /// <summary> Array of cloud link IDs from other clouds that connect to this one. </summary>
        public IReadOnlyList<string> ExternalCloudLinks { get; }
        /// <summary>
        /// A secondary expressRoute circuit from a separate AZ. Only present in a
        /// stretched private cloud
        /// </summary>
        public ExpressRouteCircuit SecondaryCircuit { get; set; }
        /// <summary>
        /// Flag to indicate whether the private cloud has the quota for provisioned NSX
        /// Public IP count raised from 64 to 1024
        /// </summary>
        public NsxPublicIPQuotaRaisedEnum? NsxPublicIPQuotaRaised { get; }
        /// <summary> Azure resource ID of the virtual network. </summary>
        public ResourceIdentifier VirtualNetworkId { get; set; }
        /// <summary> The type of DNS zone to use. </summary>
        public DnsZoneType? DnsZoneType { get; set; }
    }
}
