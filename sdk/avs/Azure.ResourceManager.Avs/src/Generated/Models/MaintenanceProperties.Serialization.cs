// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Avs.Models
{
    public partial class MaintenanceProperties : IUtf8JsonSerializable, IJsonModel<MaintenanceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MaintenanceProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MaintenanceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MaintenanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MaintenanceProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(Component))
            {
                writer.WritePropertyName("component"u8);
                writer.WriteStringValue(Component.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(ClusterId))
            {
                writer.WritePropertyName("clusterId"u8);
                writer.WriteNumberValue(ClusterId.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(InfoLink))
            {
                writer.WritePropertyName("infoLink"u8);
                writer.WriteStringValue(InfoLink);
            }
            if (options.Format != "W" && Optional.IsDefined(Impact))
            {
                writer.WritePropertyName("impact"u8);
                writer.WriteStringValue(Impact);
            }
            if (options.Format != "W" && Optional.IsDefined(ScheduledByMicrosoft))
            {
                writer.WritePropertyName("scheduledByMicrosoft"u8);
                writer.WriteBooleanValue(ScheduledByMicrosoft.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteObjectValue(State, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ScheduledStartOn))
            {
                writer.WritePropertyName("scheduledStartTime"u8);
                writer.WriteStringValue(ScheduledStartOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(EstimatedDurationInMinutes))
            {
                writer.WritePropertyName("estimatedDurationInMinutes"u8);
                writer.WriteNumberValue(EstimatedDurationInMinutes.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Operations))
            {
                writer.WritePropertyName("operations"u8);
                writer.WriteStartArray();
                foreach (var item in Operations)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(MaintenanceReadiness))
            {
                writer.WritePropertyName("maintenanceReadiness"u8);
                writer.WriteObjectValue(MaintenanceReadiness, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        MaintenanceProperties IJsonModel<MaintenanceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MaintenanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MaintenanceProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMaintenanceProperties(document.RootElement, options);
        }

        internal static MaintenanceProperties DeserializeMaintenanceProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            MaintenanceType? component = default;
            string displayName = default;
            int? clusterId = default;
            string infoLink = default;
            string impact = default;
            bool? scheduledByMicrosoft = default;
            MaintenanceState state = default;
            DateTimeOffset? scheduledStartTime = default;
            long? estimatedDurationInMinutes = default;
            MaintenanceProvisioningState? provisioningState = default;
            IReadOnlyList<MaintenanceManagementOperation> operations = default;
            MaintenanceReadiness maintenanceReadiness = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("component"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    component = new MaintenanceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clusterId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("infoLink"u8))
                {
                    infoLink = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("impact"u8))
                {
                    impact = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scheduledByMicrosoft"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scheduledByMicrosoft = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = MaintenanceState.DeserializeMaintenanceState(property.Value, options);
                    continue;
                }
                if (property.NameEquals("scheduledStartTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scheduledStartTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("estimatedDurationInMinutes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    estimatedDurationInMinutes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new MaintenanceProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("operations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MaintenanceManagementOperation> array = new List<MaintenanceManagementOperation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MaintenanceManagementOperation.DeserializeMaintenanceManagementOperation(item, options));
                    }
                    operations = array;
                    continue;
                }
                if (property.NameEquals("maintenanceReadiness"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maintenanceReadiness = MaintenanceReadiness.DeserializeMaintenanceReadiness(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MaintenanceProperties(
                component,
                displayName,
                clusterId,
                infoLink,
                impact,
                scheduledByMicrosoft,
                state,
                scheduledStartTime,
                estimatedDurationInMinutes,
                provisioningState,
                operations ?? new ChangeTrackingList<MaintenanceManagementOperation>(),
                maintenanceReadiness,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MaintenanceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MaintenanceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerAvsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MaintenanceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        MaintenanceProperties IPersistableModel<MaintenanceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MaintenanceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMaintenanceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MaintenanceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MaintenanceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
