// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> The type of network provisioned. </summary>
    public readonly partial struct AvsProvisionedNetworkType : IEquatable<AvsProvisionedNetworkType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AvsProvisionedNetworkType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AvsProvisionedNetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EsxManagementValue = "esxManagement";
        private const string EsxReplicationValue = "esxReplication";
        private const string HcxManagementValue = "hcxManagement";
        private const string HcxUplinkValue = "hcxUplink";
        private const string VcenterManagementValue = "vcenterManagement";
        private const string VmotionValue = "vmotion";
        private const string VsanValue = "vsan";

        /// <summary> network for ESX management. </summary>
        public static AvsProvisionedNetworkType EsxManagement { get; } = new AvsProvisionedNetworkType(EsxManagementValue);
        /// <summary> network for ESX replication. </summary>
        public static AvsProvisionedNetworkType EsxReplication { get; } = new AvsProvisionedNetworkType(EsxReplicationValue);
        /// <summary> network for HCX management. </summary>
        public static AvsProvisionedNetworkType HcxManagement { get; } = new AvsProvisionedNetworkType(HcxManagementValue);
        /// <summary> network for HCX uplink. </summary>
        public static AvsProvisionedNetworkType HcxUplink { get; } = new AvsProvisionedNetworkType(HcxUplinkValue);
        /// <summary> network for vCenter management. </summary>
        public static AvsProvisionedNetworkType VcenterManagement { get; } = new AvsProvisionedNetworkType(VcenterManagementValue);
        /// <summary> network for vmotion. </summary>
        public static AvsProvisionedNetworkType Vmotion { get; } = new AvsProvisionedNetworkType(VmotionValue);
        /// <summary> network for vsan. </summary>
        public static AvsProvisionedNetworkType Vsan { get; } = new AvsProvisionedNetworkType(VsanValue);
        /// <summary> Determines if two <see cref="AvsProvisionedNetworkType"/> values are the same. </summary>
        public static bool operator ==(AvsProvisionedNetworkType left, AvsProvisionedNetworkType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AvsProvisionedNetworkType"/> values are not the same. </summary>
        public static bool operator !=(AvsProvisionedNetworkType left, AvsProvisionedNetworkType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AvsProvisionedNetworkType"/>. </summary>
        public static implicit operator AvsProvisionedNetworkType(string value) => new AvsProvisionedNetworkType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AvsProvisionedNetworkType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AvsProvisionedNetworkType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
