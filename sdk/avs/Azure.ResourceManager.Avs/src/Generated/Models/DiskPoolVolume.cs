// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.Avs.Models
{
    /// <summary> An iSCSI volume from Microsoft.StoragePool provider. </summary>
    public partial class DiskPoolVolume
    {
        /// <summary> Initializes a new instance of <see cref="DiskPoolVolume"/>. </summary>
        /// <param name="targetId"> Azure resource ID of the iSCSI target. </param>
        /// <param name="lunName"> Name of the LUN to be used for datastore. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetId"/> or <paramref name="lunName"/> is null. </exception>
        public DiskPoolVolume(ResourceIdentifier targetId, string lunName)
        {
            Argument.AssertNotNull(targetId, nameof(targetId));
            Argument.AssertNotNull(lunName, nameof(lunName));

            TargetId = targetId;
            LunName = lunName;
        }

        /// <summary> Initializes a new instance of <see cref="DiskPoolVolume"/>. </summary>
        /// <param name="targetId"> Azure resource ID of the iSCSI target. </param>
        /// <param name="lunName"> Name of the LUN to be used for datastore. </param>
        /// <param name="mountOption"> Mode that describes whether the LUN has to be mounted as a datastore or attached as a LUN. </param>
        /// <param name="path"> Device path. </param>
        internal DiskPoolVolume(ResourceIdentifier targetId, string lunName, LunMountMode? mountOption, string path)
        {
            TargetId = targetId;
            LunName = lunName;
            MountOption = mountOption;
            Path = path;
        }

        /// <summary> Azure resource ID of the iSCSI target. </summary>
        public ResourceIdentifier TargetId { get; set; }
        /// <summary> Name of the LUN to be used for datastore. </summary>
        public string LunName { get; set; }
        /// <summary> Mode that describes whether the LUN has to be mounted as a datastore or attached as a LUN. </summary>
        public LunMountMode? MountOption { get; set; }
        /// <summary> Device path. </summary>
        public string Path { get; }
    }
}
