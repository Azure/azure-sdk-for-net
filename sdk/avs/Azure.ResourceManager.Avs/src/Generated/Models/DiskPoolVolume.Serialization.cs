// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Avs.Models
{
    public partial class DiskPoolVolume : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("targetId");
            writer.WriteStringValue(TargetId);
            writer.WritePropertyName("lunName");
            writer.WriteStringValue(LunName);
            if (Optional.IsDefined(MountOption))
            {
                writer.WritePropertyName("mountOption");
                writer.WriteStringValue(MountOption.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static DiskPoolVolume DeserializeDiskPoolVolume(JsonElement element)
        {
            ResourceIdentifier targetId = default;
            string lunName = default;
            Optional<LunMountMode> mountOption = default;
            Optional<string> path = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetId"))
                {
                    targetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lunName"))
                {
                    lunName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mountOption"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    mountOption = new LunMountMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("path"))
                {
                    path = property.Value.GetString();
                    continue;
                }
            }
            return new DiskPoolVolume(targetId, lunName, Optional.ToNullable(mountOption), path.Value);
        }
    }
}
