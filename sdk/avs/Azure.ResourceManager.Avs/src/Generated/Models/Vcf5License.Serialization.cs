// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Avs.Models
{
    public partial class Vcf5License : IUtf8JsonSerializable, IJsonModel<Vcf5License>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<Vcf5License>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<Vcf5License>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Vcf5License>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Vcf5License)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(LicenseKey))
            {
                writer.WritePropertyName("licenseKey"u8);
                writer.WriteStringValue(LicenseKey);
            }
            writer.WritePropertyName("cores"u8);
            writer.WriteNumberValue(Cores);
            writer.WritePropertyName("endDate"u8);
            writer.WriteStringValue(EndOn, "O");
            if (Optional.IsDefined(BroadcomSiteId))
            {
                writer.WritePropertyName("broadcomSiteId"u8);
                writer.WriteStringValue(BroadcomSiteId);
            }
            if (Optional.IsDefined(BroadcomContractNumber))
            {
                writer.WritePropertyName("broadcomContractNumber"u8);
                writer.WriteStringValue(BroadcomContractNumber);
            }
            if (Optional.IsCollectionDefined(Labels))
            {
                writer.WritePropertyName("labels"u8);
                writer.WriteStartArray();
                foreach (var item in Labels)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
        }

        Vcf5License IJsonModel<Vcf5License>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Vcf5License>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Vcf5License)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVcf5License(document.RootElement, options);
        }

        internal static Vcf5License DeserializeVcf5License(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string licenseKey = default;
            int cores = default;
            DateTimeOffset endDate = default;
            string broadcomSiteId = default;
            string broadcomContractNumber = default;
            IList<Label> labels = default;
            VcfLicenseKind kind = default;
            LicenseProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("licenseKey"u8))
                {
                    licenseKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cores"u8))
                {
                    cores = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("endDate"u8))
                {
                    endDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("broadcomSiteId"u8))
                {
                    broadcomSiteId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("broadcomContractNumber"u8))
                {
                    broadcomContractNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("labels"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Label> array = new List<Label>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Label.DeserializeLabel(item, options));
                    }
                    labels = array;
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    kind = new VcfLicenseKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new LicenseProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new Vcf5License(
                kind,
                provisioningState,
                serializedAdditionalRawData,
                licenseKey,
                cores,
                endDate,
                broadcomSiteId,
                broadcomContractNumber,
                labels ?? new ChangeTrackingList<Label>());
        }

        BinaryData IPersistableModel<Vcf5License>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Vcf5License>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerAvsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(Vcf5License)} does not support writing '{options.Format}' format.");
            }
        }

        Vcf5License IPersistableModel<Vcf5License>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Vcf5License>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeVcf5License(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(Vcf5License)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<Vcf5License>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
