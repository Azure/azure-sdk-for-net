// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Avs
{
    /// <summary> A class representing collection of ScriptCmdlet and their operations over its parent. </summary>
    public partial class ScriptCmdletCollection : ArmCollection, IEnumerable<ScriptCmdlet>, IAsyncEnumerable<ScriptCmdlet>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ScriptCmdletsRestOperations _scriptCmdletsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ScriptCmdletCollection"/> class for mocking. </summary>
        protected ScriptCmdletCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ScriptCmdletCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ScriptCmdletCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _scriptCmdletsRestClient = new ScriptCmdletsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ScriptPackage.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ScriptPackage.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Return information about a script cmdlet resource in a specific package on a private cloud. </summary>
        /// <param name="scriptCmdletName"> Name of the script cmdlet resource in the script package in the private cloud. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scriptCmdletName"/> is null. </exception>
        public virtual Response<ScriptCmdlet> Get(string scriptCmdletName, CancellationToken cancellationToken = default)
        {
            if (scriptCmdletName == null)
            {
                throw new ArgumentNullException(nameof(scriptCmdletName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScriptCmdletCollection.Get");
            scope.Start();
            try
            {
                var response = _scriptCmdletsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, scriptCmdletName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ScriptCmdlet(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return information about a script cmdlet resource in a specific package on a private cloud. </summary>
        /// <param name="scriptCmdletName"> Name of the script cmdlet resource in the script package in the private cloud. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scriptCmdletName"/> is null. </exception>
        public async virtual Task<Response<ScriptCmdlet>> GetAsync(string scriptCmdletName, CancellationToken cancellationToken = default)
        {
            if (scriptCmdletName == null)
            {
                throw new ArgumentNullException(nameof(scriptCmdletName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScriptCmdletCollection.Get");
            scope.Start();
            try
            {
                var response = await _scriptCmdletsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, scriptCmdletName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ScriptCmdlet(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scriptCmdletName"> Name of the script cmdlet resource in the script package in the private cloud. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scriptCmdletName"/> is null. </exception>
        public virtual Response<ScriptCmdlet> GetIfExists(string scriptCmdletName, CancellationToken cancellationToken = default)
        {
            if (scriptCmdletName == null)
            {
                throw new ArgumentNullException(nameof(scriptCmdletName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScriptCmdletCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _scriptCmdletsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, scriptCmdletName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<ScriptCmdlet>(null, response.GetRawResponse());
                return Response.FromValue(new ScriptCmdlet(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scriptCmdletName"> Name of the script cmdlet resource in the script package in the private cloud. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scriptCmdletName"/> is null. </exception>
        public async virtual Task<Response<ScriptCmdlet>> GetIfExistsAsync(string scriptCmdletName, CancellationToken cancellationToken = default)
        {
            if (scriptCmdletName == null)
            {
                throw new ArgumentNullException(nameof(scriptCmdletName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScriptCmdletCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _scriptCmdletsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, scriptCmdletName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<ScriptCmdlet>(null, response.GetRawResponse());
                return Response.FromValue(new ScriptCmdlet(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scriptCmdletName"> Name of the script cmdlet resource in the script package in the private cloud. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scriptCmdletName"/> is null. </exception>
        public virtual Response<bool> Exists(string scriptCmdletName, CancellationToken cancellationToken = default)
        {
            if (scriptCmdletName == null)
            {
                throw new ArgumentNullException(nameof(scriptCmdletName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScriptCmdletCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(scriptCmdletName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scriptCmdletName"> Name of the script cmdlet resource in the script package in the private cloud. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scriptCmdletName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string scriptCmdletName, CancellationToken cancellationToken = default)
        {
            if (scriptCmdletName == null)
            {
                throw new ArgumentNullException(nameof(scriptCmdletName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScriptCmdletCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(scriptCmdletName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List script cmdlet resources available for a private cloud to create a script execution resource on a private cloud. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScriptCmdlet" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScriptCmdlet> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ScriptCmdlet> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScriptCmdletCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _scriptCmdletsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScriptCmdlet(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ScriptCmdlet> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScriptCmdletCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _scriptCmdletsRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScriptCmdlet(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List script cmdlet resources available for a private cloud to create a script execution resource on a private cloud. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScriptCmdlet" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScriptCmdlet> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ScriptCmdlet>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScriptCmdletCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _scriptCmdletsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScriptCmdlet(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ScriptCmdlet>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScriptCmdletCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _scriptCmdletsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScriptCmdlet(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<ScriptCmdlet> IEnumerable<ScriptCmdlet>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ScriptCmdlet> IAsyncEnumerable<ScriptCmdlet>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, ScriptCmdlet, ScriptCmdletData> Construct() { }
    }
}
