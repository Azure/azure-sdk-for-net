// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Avs.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Avs
{
    /// <summary> A class representing collection of ExpressRouteAuthorization and their operations over a PrivateCloud. </summary>
    public partial class ExpressRouteAuthorizationCollection : ArmCollection, IEnumerable<ExpressRouteAuthorization>, IAsyncEnumerable<ExpressRouteAuthorization>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly AuthorizationsRestOperations _restClient;

        /// <summary> Initializes a new instance of the <see cref="ExpressRouteAuthorizationCollection"/> class for mocking. </summary>
        protected ExpressRouteAuthorizationCollection()
        {
        }

        /// <summary> Initializes a new instance of ExpressRouteAuthorizationCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ExpressRouteAuthorizationCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new AuthorizationsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        IEnumerator<ExpressRouteAuthorization> IEnumerable<ExpressRouteAuthorization>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ExpressRouteAuthorization> IAsyncEnumerable<ExpressRouteAuthorization>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => PrivateCloud.ResourceType;

        // Collection level operations.

        /// <summary> Create or update an ExpressRoute Circuit Authorization in a private cloud. </summary>
        /// <param name="authorizationName"> Name of the ExpressRoute Circuit Authorization in the private cloud. </param>
        /// <param name="authorization"> An ExpressRoute Circuit Authorization. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="authorizationName"/> or <paramref name="authorization"/> is null. </exception>
        public virtual AuthorizationCreateOrUpdateOperation CreateOrUpdate(string authorizationName, ExpressRouteAuthorizationData authorization, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (authorizationName == null)
            {
                throw new ArgumentNullException(nameof(authorizationName));
            }
            if (authorization == null)
            {
                throw new ArgumentNullException(nameof(authorization));
            }

            using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _restClient.CreateOrUpdate(Id.ResourceGroupName, Id.Name, authorizationName, authorization, cancellationToken);
                var operation = new AuthorizationCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _restClient.CreateCreateOrUpdateRequest(Id.ResourceGroupName, Id.Name, authorizationName, authorization).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an ExpressRoute Circuit Authorization in a private cloud. </summary>
        /// <param name="authorizationName"> Name of the ExpressRoute Circuit Authorization in the private cloud. </param>
        /// <param name="authorization"> An ExpressRoute Circuit Authorization. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="authorizationName"/> or <paramref name="authorization"/> is null. </exception>
        public async virtual Task<AuthorizationCreateOrUpdateOperation> CreateOrUpdateAsync(string authorizationName, ExpressRouteAuthorizationData authorization, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (authorizationName == null)
            {
                throw new ArgumentNullException(nameof(authorizationName));
            }
            if (authorization == null)
            {
                throw new ArgumentNullException(nameof(authorization));
            }

            using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _restClient.CreateOrUpdateAsync(Id.ResourceGroupName, Id.Name, authorizationName, authorization, cancellationToken).ConfigureAwait(false);
                var operation = new AuthorizationCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _restClient.CreateCreateOrUpdateRequest(Id.ResourceGroupName, Id.Name, authorizationName, authorization).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="authorizationName"> Name of the ExpressRoute Circuit Authorization in the private cloud. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual Response<ExpressRouteAuthorization> Get(string authorizationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.Get");
            scope.Start();
            try
            {
                if (authorizationName == null)
                {
                    throw new ArgumentNullException(nameof(authorizationName));
                }

                var response = _restClient.Get(Id.ResourceGroupName, Id.Name, authorizationName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ExpressRouteAuthorization(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="authorizationName"> Name of the ExpressRoute Circuit Authorization in the private cloud. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<Response<ExpressRouteAuthorization>> GetAsync(string authorizationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.Get");
            scope.Start();
            try
            {
                if (authorizationName == null)
                {
                    throw new ArgumentNullException(nameof(authorizationName));
                }

                var response = await _restClient.GetAsync(Id.ResourceGroupName, Id.Name, authorizationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ExpressRouteAuthorization(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="authorizationName"> Name of the ExpressRoute Circuit Authorization in the private cloud. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual Response<ExpressRouteAuthorization> GetIfExists(string authorizationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.GetIfExists");
            scope.Start();
            try
            {
                if (authorizationName == null)
                {
                    throw new ArgumentNullException(nameof(authorizationName));
                }

                var response = _restClient.Get(Id.ResourceGroupName, Id.Name, authorizationName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<ExpressRouteAuthorization>(null, response.GetRawResponse())
                    : Response.FromValue(new ExpressRouteAuthorization(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="authorizationName"> Name of the ExpressRoute Circuit Authorization in the private cloud. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<Response<ExpressRouteAuthorization>> GetIfExistsAsync(string authorizationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.GetIfExists");
            scope.Start();
            try
            {
                if (authorizationName == null)
                {
                    throw new ArgumentNullException(nameof(authorizationName));
                }

                var response = await _restClient.GetAsync(Id.ResourceGroupName, Id.Name, authorizationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<ExpressRouteAuthorization>(null, response.GetRawResponse())
                    : Response.FromValue(new ExpressRouteAuthorization(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="authorizationName"> Name of the ExpressRoute Circuit Authorization in the private cloud. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual Response<bool> CheckIfExists(string authorizationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.CheckIfExists");
            scope.Start();
            try
            {
                if (authorizationName == null)
                {
                    throw new ArgumentNullException(nameof(authorizationName));
                }

                var response = GetIfExists(authorizationName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="authorizationName"> Name of the ExpressRoute Circuit Authorization in the private cloud. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string authorizationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.CheckIfExists");
            scope.Start();
            try
            {
                if (authorizationName == null)
                {
                    throw new ArgumentNullException(nameof(authorizationName));
                }

                var response = await GetIfExistsAsync(authorizationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List ExpressRoute Circuit Authorizations in a private cloud. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExpressRouteAuthorization" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExpressRouteAuthorization> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ExpressRouteAuthorization> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _restClient.GetAll(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ExpressRouteAuthorization(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ExpressRouteAuthorization> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _restClient.GetAllNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ExpressRouteAuthorization(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List ExpressRoute Circuit Authorizations in a private cloud. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExpressRouteAuthorization" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExpressRouteAuthorization> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ExpressRouteAuthorization>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _restClient.GetAllAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ExpressRouteAuthorization(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ExpressRouteAuthorization>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExpressRouteAuthorizationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _restClient.GetAllNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ExpressRouteAuthorization(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        // Builders.
        // public ArmBuilder<ResourceIdentifier, ExpressRouteAuthorization, ExpressRouteAuthorizationData> Construct() { }
    }
}
