// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Avs.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Avs
{
    /// <summary> A class representing collection of WorkloadNetworkDhcp and their operations over its parent. </summary>
    public partial class WorkloadNetworkDhcpCollection : ArmCollection, IEnumerable<WorkloadNetworkDhcp>, IAsyncEnumerable<WorkloadNetworkDhcp>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly WorkloadNetworksRestOperations _workloadNetworksRestClient;

        /// <summary> Initializes a new instance of the <see cref="WorkloadNetworkDhcpCollection"/> class for mocking. </summary>
        protected WorkloadNetworkDhcpCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="WorkloadNetworkDhcpCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal WorkloadNetworkDhcpCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _workloadNetworksRestClient = new WorkloadNetworksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != PrivateCloud.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, PrivateCloud.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Create dhcp by id in a private cloud workload network. </summary>
        /// <param name="dhcpId"> NSX DHCP identifier. Generally the same as the DHCP display name. </param>
        /// <param name="workloadNetworkDhcp"> NSX DHCP. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dhcpId"/> or <paramref name="workloadNetworkDhcp"/> is null. </exception>
        public virtual WorkloadNetworkCreateDhcpOperation CreateOrUpdate(bool waitForCompletion, string dhcpId, WorkloadNetworkDhcpData workloadNetworkDhcp, CancellationToken cancellationToken = default)
        {
            if (dhcpId == null)
            {
                throw new ArgumentNullException(nameof(dhcpId));
            }
            if (workloadNetworkDhcp == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDhcp));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _workloadNetworksRestClient.CreateDhcp(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dhcpId, workloadNetworkDhcp, cancellationToken);
                var operation = new WorkloadNetworkCreateDhcpOperation(Parent, _clientDiagnostics, Pipeline, _workloadNetworksRestClient.CreateCreateDhcpRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dhcpId, workloadNetworkDhcp).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create dhcp by id in a private cloud workload network. </summary>
        /// <param name="dhcpId"> NSX DHCP identifier. Generally the same as the DHCP display name. </param>
        /// <param name="workloadNetworkDhcp"> NSX DHCP. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dhcpId"/> or <paramref name="workloadNetworkDhcp"/> is null. </exception>
        public async virtual Task<WorkloadNetworkCreateDhcpOperation> CreateOrUpdateAsync(bool waitForCompletion, string dhcpId, WorkloadNetworkDhcpData workloadNetworkDhcp, CancellationToken cancellationToken = default)
        {
            if (dhcpId == null)
            {
                throw new ArgumentNullException(nameof(dhcpId));
            }
            if (workloadNetworkDhcp == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDhcp));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _workloadNetworksRestClient.CreateDhcpAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dhcpId, workloadNetworkDhcp, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkCreateDhcpOperation(Parent, _clientDiagnostics, Pipeline, _workloadNetworksRestClient.CreateCreateDhcpRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dhcpId, workloadNetworkDhcp).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get dhcp by id in a private cloud workload network. </summary>
        /// <param name="dhcpId"> NSX DHCP identifier. Generally the same as the DHCP display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dhcpId"/> is null. </exception>
        public virtual Response<WorkloadNetworkDhcp> Get(string dhcpId, CancellationToken cancellationToken = default)
        {
            if (dhcpId == null)
            {
                throw new ArgumentNullException(nameof(dhcpId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.Get");
            scope.Start();
            try
            {
                var response = _workloadNetworksRestClient.GetDhcp(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dhcpId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkloadNetworkDhcp(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get dhcp by id in a private cloud workload network. </summary>
        /// <param name="dhcpId"> NSX DHCP identifier. Generally the same as the DHCP display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dhcpId"/> is null. </exception>
        public async virtual Task<Response<WorkloadNetworkDhcp>> GetAsync(string dhcpId, CancellationToken cancellationToken = default)
        {
            if (dhcpId == null)
            {
                throw new ArgumentNullException(nameof(dhcpId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.Get");
            scope.Start();
            try
            {
                var response = await _workloadNetworksRestClient.GetDhcpAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dhcpId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new WorkloadNetworkDhcp(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dhcpId"> NSX DHCP identifier. Generally the same as the DHCP display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dhcpId"/> is null. </exception>
        public virtual Response<WorkloadNetworkDhcp> GetIfExists(string dhcpId, CancellationToken cancellationToken = default)
        {
            if (dhcpId == null)
            {
                throw new ArgumentNullException(nameof(dhcpId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _workloadNetworksRestClient.GetDhcp(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dhcpId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<WorkloadNetworkDhcp>(null, response.GetRawResponse());
                return Response.FromValue(new WorkloadNetworkDhcp(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dhcpId"> NSX DHCP identifier. Generally the same as the DHCP display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dhcpId"/> is null. </exception>
        public async virtual Task<Response<WorkloadNetworkDhcp>> GetIfExistsAsync(string dhcpId, CancellationToken cancellationToken = default)
        {
            if (dhcpId == null)
            {
                throw new ArgumentNullException(nameof(dhcpId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _workloadNetworksRestClient.GetDhcpAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dhcpId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<WorkloadNetworkDhcp>(null, response.GetRawResponse());
                return Response.FromValue(new WorkloadNetworkDhcp(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dhcpId"> NSX DHCP identifier. Generally the same as the DHCP display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dhcpId"/> is null. </exception>
        public virtual Response<bool> Exists(string dhcpId, CancellationToken cancellationToken = default)
        {
            if (dhcpId == null)
            {
                throw new ArgumentNullException(nameof(dhcpId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(dhcpId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dhcpId"> NSX DHCP identifier. Generally the same as the DHCP display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dhcpId"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string dhcpId, CancellationToken cancellationToken = default)
        {
            if (dhcpId == null)
            {
                throw new ArgumentNullException(nameof(dhcpId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(dhcpId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List dhcp in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkloadNetworkDhcp" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadNetworkDhcp> GetAll(CancellationToken cancellationToken = default)
        {
            Page<WorkloadNetworkDhcp> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _workloadNetworksRestClient.ListDhcp(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkDhcp(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkloadNetworkDhcp> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _workloadNetworksRestClient.ListDhcpNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkDhcp(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List dhcp in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkloadNetworkDhcp" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadNetworkDhcp> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkloadNetworkDhcp>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _workloadNetworksRestClient.ListDhcpAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkDhcp(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkloadNetworkDhcp>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkDhcpCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _workloadNetworksRestClient.ListDhcpNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkDhcp(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<WorkloadNetworkDhcp> IEnumerable<WorkloadNetworkDhcp>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<WorkloadNetworkDhcp> IAsyncEnumerable<WorkloadNetworkDhcp>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, WorkloadNetworkDhcp, WorkloadNetworkDhcpData> Construct() { }
    }
}
