// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Avs.Models;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Avs
{
    /// <summary> A Class representing a WorkloadNetworkSegment along with the instance operations that can be performed on it. </summary>
    public partial class WorkloadNetworkSegment : ArmResource
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly WorkloadNetworksRestOperations _restClient;
        private readonly WorkloadNetworkSegmentData _data;

        /// <summary> Initializes a new instance of the <see cref="WorkloadNetworkSegment"/> class for mocking. </summary>
        protected WorkloadNetworkSegment()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "WorkloadNetworkSegment"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="resource"> The resource that is the target of operations. </param>
        internal WorkloadNetworkSegment(ArmResource options, WorkloadNetworkSegmentData resource) : base(options, resource.Id)
        {
            HasData = true;
            _data = resource;
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new WorkloadNetworksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Initializes a new instance of the <see cref="WorkloadNetworkSegment"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal WorkloadNetworkSegment(ArmResource options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new WorkloadNetworksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Initializes a new instance of the <see cref="WorkloadNetworkSegment"/> class. </summary>
        /// <param name="clientOptions"> The client options to build client context. </param>
        /// <param name="credential"> The credential to build client context. </param>
        /// <param name="uri"> The uri to build client context. </param>
        /// <param name="pipeline"> The pipeline to build client context. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal WorkloadNetworkSegment(ArmClientOptions clientOptions, TokenCredential credential, Uri uri, HttpPipeline pipeline, ResourceIdentifier id) : base(clientOptions, credential, uri, pipeline, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new WorkloadNetworksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.AVS/privateClouds/workloadNetworks/default/segments";

        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual WorkloadNetworkSegmentData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        /// <summary> Get a segment by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<WorkloadNetworkSegment>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.Get");
            scope.Start();
            try
            {
                var response = await _restClient.GetSegmentAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new WorkloadNetworkSegment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a segment by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkloadNetworkSegment> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.Get");
            scope.Start();
            try
            {
                var response = _restClient.GetSegment(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkloadNetworkSegment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<Location>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<Location> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            return ListAvailableLocations(ResourceType, cancellationToken);
        }

        /// <summary> Delete dhcp by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<WorkloadNetworkDeleteDhcpOperation> DeleteAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.Delete");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteDhcpAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkDeleteDhcpOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteDhcpRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete dhcp by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual WorkloadNetworkDeleteDhcpOperation Delete(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.Delete");
            scope.Start();
            try
            {
                var response = _restClient.DeleteDhcp(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadNetworkDeleteDhcpOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteDhcpRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
        /// <summary> Get dhcp by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<WorkloadNetworkDhcp>> GetDhcpAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDhcp");
            scope.Start();
            try
            {
                var response = await _restClient.GetDhcpAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get dhcp by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkloadNetworkDhcp> GetDhcp(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDhcp");
            scope.Start();
            try
            {
                var response = _restClient.GetDhcp(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a gateway by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<WorkloadNetworkGateway>> GetGatewayAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetGateway");
            scope.Start();
            try
            {
                var response = await _restClient.GetGatewayAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a gateway by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkloadNetworkGateway> GetGateway(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetGateway");
            scope.Start();
            try
            {
                var response = _restClient.GetGateway(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a port mirroring profile by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<WorkloadNetworkPortMirroring>> GetPortMirroringAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPortMirroring");
            scope.Start();
            try
            {
                var response = await _restClient.GetPortMirroringAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a port mirroring profile by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkloadNetworkPortMirroring> GetPortMirroring(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPortMirroring");
            scope.Start();
            try
            {
                var response = _restClient.GetPortMirroring(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a vm group by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<WorkloadNetworkVMGroup>> GetVMGroupAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVMGroup");
            scope.Start();
            try
            {
                var response = await _restClient.GetVMGroupAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a vm group by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkloadNetworkVMGroup> GetVMGroup(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVMGroup");
            scope.Start();
            try
            {
                var response = _restClient.GetVMGroup(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a virtual machine by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<WorkloadNetworkVirtualMachine>> GetVirtualMachineAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVirtualMachine");
            scope.Start();
            try
            {
                var response = await _restClient.GetVirtualMachineAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a virtual machine by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkloadNetworkVirtualMachine> GetVirtualMachine(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVirtualMachine");
            scope.Start();
            try
            {
                var response = _restClient.GetVirtualMachine(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a DNS service by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<WorkloadNetworkDnsService>> GetDnsServiceAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsService");
            scope.Start();
            try
            {
                var response = await _restClient.GetDnsServiceAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a DNS service by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkloadNetworkDnsService> GetDnsService(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsService");
            scope.Start();
            try
            {
                var response = _restClient.GetDnsService(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<WorkloadNetworkDnsZone>> GetDnsZoneAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsZone");
            scope.Start();
            try
            {
                var response = await _restClient.GetDnsZoneAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkloadNetworkDnsZone> GetDnsZone(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsZone");
            scope.Start();
            try
            {
                var response = _restClient.GetDnsZone(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Public IP Block by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<WorkloadNetworkPublicIP>> GetPublicIPAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPublicIP");
            scope.Start();
            try
            {
                var response = await _restClient.GetPublicIPAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Public IP Block by id in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkloadNetworkPublicIP> GetPublicIP(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPublicIP");
            scope.Start();
            try
            {
                var response = _restClient.GetPublicIP(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List dhcp in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkloadNetworkDhcp" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadNetworkDhcp> GetDhcp(CancellationToken cancellationToken = default)
        {
            Page<WorkloadNetworkDhcp> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDhcp");
                scope.Start();
                try
                {
                    var response = _restClient.GetDhcp(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkloadNetworkDhcp> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDhcp");
                scope.Start();
                try
                {
                    var response = _restClient.GetDhcpNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List dhcp in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkloadNetworkDhcp" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadNetworkDhcp> GetDhcpAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkloadNetworkDhcp>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDhcp");
                scope.Start();
                try
                {
                    var response = await _restClient.GetDhcpAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkloadNetworkDhcp>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDhcp");
                scope.Start();
                try
                {
                    var response = await _restClient.GetDhcpNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of gateways in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkloadNetworkGateway" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadNetworkGateway> GetGateways(CancellationToken cancellationToken = default)
        {
            Page<WorkloadNetworkGateway> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetGateways");
                scope.Start();
                try
                {
                    var response = _restClient.GetGateways(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkloadNetworkGateway> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetGateways");
                scope.Start();
                try
                {
                    var response = _restClient.GetGatewaysNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of gateways in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkloadNetworkGateway" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadNetworkGateway> GetGatewaysAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkloadNetworkGateway>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetGateways");
                scope.Start();
                try
                {
                    var response = await _restClient.GetGatewaysAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkloadNetworkGateway>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetGateways");
                scope.Start();
                try
                {
                    var response = await _restClient.GetGatewaysNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of port mirroring profiles in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkloadNetworkPortMirroring" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadNetworkPortMirroring> GetPortMirroring(CancellationToken cancellationToken = default)
        {
            Page<WorkloadNetworkPortMirroring> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPortMirroring");
                scope.Start();
                try
                {
                    var response = _restClient.GetPortMirroring(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkloadNetworkPortMirroring> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPortMirroring");
                scope.Start();
                try
                {
                    var response = _restClient.GetPortMirroringNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of port mirroring profiles in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkloadNetworkPortMirroring" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadNetworkPortMirroring> GetPortMirroringAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkloadNetworkPortMirroring>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPortMirroring");
                scope.Start();
                try
                {
                    var response = await _restClient.GetPortMirroringAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkloadNetworkPortMirroring>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPortMirroring");
                scope.Start();
                try
                {
                    var response = await _restClient.GetPortMirroringNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of vm groups in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkloadNetworkVMGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadNetworkVMGroup> GetVMGroups(CancellationToken cancellationToken = default)
        {
            Page<WorkloadNetworkVMGroup> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVMGroups");
                scope.Start();
                try
                {
                    var response = _restClient.GetVMGroups(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkloadNetworkVMGroup> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVMGroups");
                scope.Start();
                try
                {
                    var response = _restClient.GetVMGroupsNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of vm groups in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkloadNetworkVMGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadNetworkVMGroup> GetVMGroupsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkloadNetworkVMGroup>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVMGroups");
                scope.Start();
                try
                {
                    var response = await _restClient.GetVMGroupsAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkloadNetworkVMGroup>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVMGroups");
                scope.Start();
                try
                {
                    var response = await _restClient.GetVMGroupsNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of virtual machines in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkloadNetworkVirtualMachine" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadNetworkVirtualMachine> GetVirtualMachines(CancellationToken cancellationToken = default)
        {
            Page<WorkloadNetworkVirtualMachine> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVirtualMachines");
                scope.Start();
                try
                {
                    var response = _restClient.GetVirtualMachines(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkloadNetworkVirtualMachine> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVirtualMachines");
                scope.Start();
                try
                {
                    var response = _restClient.GetVirtualMachinesNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of virtual machines in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkloadNetworkVirtualMachine" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadNetworkVirtualMachine> GetVirtualMachinesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkloadNetworkVirtualMachine>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVirtualMachines");
                scope.Start();
                try
                {
                    var response = await _restClient.GetVirtualMachinesAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkloadNetworkVirtualMachine>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetVirtualMachines");
                scope.Start();
                try
                {
                    var response = await _restClient.GetVirtualMachinesNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of DNS services in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkloadNetworkDnsService" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadNetworkDnsService> GetDnsServices(CancellationToken cancellationToken = default)
        {
            Page<WorkloadNetworkDnsService> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsServices");
                scope.Start();
                try
                {
                    var response = _restClient.GetDnsServices(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkloadNetworkDnsService> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsServices");
                scope.Start();
                try
                {
                    var response = _restClient.GetDnsServicesNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of DNS services in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkloadNetworkDnsService" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadNetworkDnsService> GetDnsServicesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkloadNetworkDnsService>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsServices");
                scope.Start();
                try
                {
                    var response = await _restClient.GetDnsServicesAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkloadNetworkDnsService>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsServices");
                scope.Start();
                try
                {
                    var response = await _restClient.GetDnsServicesNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of DNS zones in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkloadNetworkDnsZone" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadNetworkDnsZone> GetDnsZones(CancellationToken cancellationToken = default)
        {
            Page<WorkloadNetworkDnsZone> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsZones");
                scope.Start();
                try
                {
                    var response = _restClient.GetDnsZones(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkloadNetworkDnsZone> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsZones");
                scope.Start();
                try
                {
                    var response = _restClient.GetDnsZonesNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of DNS zones in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkloadNetworkDnsZone" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadNetworkDnsZone> GetDnsZonesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkloadNetworkDnsZone>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsZones");
                scope.Start();
                try
                {
                    var response = await _restClient.GetDnsZonesAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkloadNetworkDnsZone>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetDnsZones");
                scope.Start();
                try
                {
                    var response = await _restClient.GetDnsZonesNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of Public IP Blocks in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkloadNetworkPublicIP" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadNetworkPublicIP> GetPublicIPs(CancellationToken cancellationToken = default)
        {
            Page<WorkloadNetworkPublicIP> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPublicIPs");
                scope.Start();
                try
                {
                    var response = _restClient.GetPublicIPs(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkloadNetworkPublicIP> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPublicIPs");
                scope.Start();
                try
                {
                    var response = _restClient.GetPublicIPsNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of Public IP Blocks in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkloadNetworkPublicIP" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadNetworkPublicIP> GetPublicIPsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkloadNetworkPublicIP>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPublicIPs");
                scope.Start();
                try
                {
                    var response = await _restClient.GetPublicIPsAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkloadNetworkPublicIP>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.GetPublicIPs");
                scope.Start();
                try
                {
                    var response = await _restClient.GetPublicIPsNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Create a segment by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkSegment"> NSX Segment. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkSegment"/> is null. </exception>
        public async virtual Task<WorkloadNetworkCreateSegmentsOperation> CreateSegmentsAsync(WorkloadNetworkSegmentData workloadNetworkSegment, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkSegment == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkSegment));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreateSegments");
            scope.Start();
            try
            {
                var response = await _restClient.CreateSegmentsAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkSegment, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkCreateSegmentsOperation(this, _clientDiagnostics, Pipeline, _restClient.CreateCreateSegmentsRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkSegment).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a segment by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkSegment"> NSX Segment. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkSegment"/> is null. </exception>
        public virtual WorkloadNetworkCreateSegmentsOperation CreateSegments(WorkloadNetworkSegmentData workloadNetworkSegment, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkSegment == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkSegment));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreateSegments");
            scope.Start();
            try
            {
                var response = _restClient.CreateSegments(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkSegment, cancellationToken);
                var operation = new WorkloadNetworkCreateSegmentsOperation(this, _clientDiagnostics, Pipeline, _restClient.CreateCreateSegmentsRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkSegment).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a segment by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkSegment"> NSX Segment. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkSegment"/> is null. </exception>
        public async virtual Task<WorkloadNetworkUpdateSegmentsOperation> UpdateSegmentsAsync(WorkloadNetworkSegmentData workloadNetworkSegment, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkSegment == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkSegment));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdateSegments");
            scope.Start();
            try
            {
                var response = await _restClient.UpdateSegmentsAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkSegment, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkUpdateSegmentsOperation(this, _clientDiagnostics, Pipeline, _restClient.CreateUpdateSegmentsRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkSegment).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a segment by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkSegment"> NSX Segment. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkSegment"/> is null. </exception>
        public virtual WorkloadNetworkUpdateSegmentsOperation UpdateSegments(WorkloadNetworkSegmentData workloadNetworkSegment, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkSegment == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkSegment));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdateSegments");
            scope.Start();
            try
            {
                var response = _restClient.UpdateSegments(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkSegment, cancellationToken);
                var operation = new WorkloadNetworkUpdateSegmentsOperation(this, _clientDiagnostics, Pipeline, _restClient.CreateUpdateSegmentsRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkSegment).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a segment by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<WorkloadNetworkDeleteSegmentOperation> DeleteSegmentAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeleteSegment");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteSegmentAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkDeleteSegmentOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteSegmentRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a segment by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual WorkloadNetworkDeleteSegmentOperation DeleteSegment(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeleteSegment");
            scope.Start();
            try
            {
                var response = _restClient.DeleteSegment(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadNetworkDeleteSegmentOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteSegmentRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update dhcp by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkDhcp"> NSX DHCP. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkDhcp"/> is null. </exception>
        public async virtual Task<WorkloadNetworkUpdateDhcpOperation> UpdateDhcpAsync(WorkloadNetworkDhcp workloadNetworkDhcp, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkDhcp == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDhcp));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdateDhcp");
            scope.Start();
            try
            {
                var response = await _restClient.UpdateDhcpAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDhcp, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkUpdateDhcpOperation(_clientDiagnostics, Pipeline, _restClient.CreateUpdateDhcpRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDhcp).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update dhcp by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkDhcp"> NSX DHCP. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkDhcp"/> is null. </exception>
        public virtual WorkloadNetworkUpdateDhcpOperation UpdateDhcp(WorkloadNetworkDhcp workloadNetworkDhcp, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkDhcp == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDhcp));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdateDhcp");
            scope.Start();
            try
            {
                var response = _restClient.UpdateDhcp(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDhcp, cancellationToken);
                var operation = new WorkloadNetworkUpdateDhcpOperation(_clientDiagnostics, Pipeline, _restClient.CreateUpdateDhcpRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDhcp).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a port mirroring profile by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkPortMirroring"> NSX port mirroring. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkPortMirroring"/> is null. </exception>
        public async virtual Task<WorkloadNetworkCreatePortMirroringOperation> CreatePortMirroringAsync(WorkloadNetworkPortMirroring workloadNetworkPortMirroring, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkPortMirroring == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkPortMirroring));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreatePortMirroring");
            scope.Start();
            try
            {
                var response = await _restClient.CreatePortMirroringAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPortMirroring, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkCreatePortMirroringOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreatePortMirroringRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPortMirroring).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a port mirroring profile by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkPortMirroring"> NSX port mirroring. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkPortMirroring"/> is null. </exception>
        public virtual WorkloadNetworkCreatePortMirroringOperation CreatePortMirroring(WorkloadNetworkPortMirroring workloadNetworkPortMirroring, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkPortMirroring == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkPortMirroring));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreatePortMirroring");
            scope.Start();
            try
            {
                var response = _restClient.CreatePortMirroring(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPortMirroring, cancellationToken);
                var operation = new WorkloadNetworkCreatePortMirroringOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreatePortMirroringRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPortMirroring).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a port mirroring profile by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkPortMirroring"> NSX port mirroring. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkPortMirroring"/> is null. </exception>
        public async virtual Task<WorkloadNetworkUpdatePortMirroringOperation> UpdatePortMirroringAsync(WorkloadNetworkPortMirroring workloadNetworkPortMirroring, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkPortMirroring == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkPortMirroring));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdatePortMirroring");
            scope.Start();
            try
            {
                var response = await _restClient.UpdatePortMirroringAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPortMirroring, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkUpdatePortMirroringOperation(_clientDiagnostics, Pipeline, _restClient.CreateUpdatePortMirroringRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPortMirroring).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a port mirroring profile by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkPortMirroring"> NSX port mirroring. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkPortMirroring"/> is null. </exception>
        public virtual WorkloadNetworkUpdatePortMirroringOperation UpdatePortMirroring(WorkloadNetworkPortMirroring workloadNetworkPortMirroring, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkPortMirroring == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkPortMirroring));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdatePortMirroring");
            scope.Start();
            try
            {
                var response = _restClient.UpdatePortMirroring(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPortMirroring, cancellationToken);
                var operation = new WorkloadNetworkUpdatePortMirroringOperation(_clientDiagnostics, Pipeline, _restClient.CreateUpdatePortMirroringRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPortMirroring).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a port mirroring profile by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<WorkloadNetworkDeletePortMirroringOperation> DeletePortMirroringAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeletePortMirroring");
            scope.Start();
            try
            {
                var response = await _restClient.DeletePortMirroringAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkDeletePortMirroringOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeletePortMirroringRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a port mirroring profile by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual WorkloadNetworkDeletePortMirroringOperation DeletePortMirroring(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeletePortMirroring");
            scope.Start();
            try
            {
                var response = _restClient.DeletePortMirroring(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadNetworkDeletePortMirroringOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeletePortMirroringRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a vm group by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkVMGroup"> NSX VM Group. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkVMGroup"/> is null. </exception>
        public async virtual Task<WorkloadNetworkCreateVMGroupOperation> CreateVMGroupAsync(WorkloadNetworkVMGroup workloadNetworkVMGroup, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkVMGroup == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkVMGroup));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreateVMGroup");
            scope.Start();
            try
            {
                var response = await _restClient.CreateVMGroupAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkVMGroup, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkCreateVMGroupOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreateVMGroupRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkVMGroup).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a vm group by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkVMGroup"> NSX VM Group. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkVMGroup"/> is null. </exception>
        public virtual WorkloadNetworkCreateVMGroupOperation CreateVMGroup(WorkloadNetworkVMGroup workloadNetworkVMGroup, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkVMGroup == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkVMGroup));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreateVMGroup");
            scope.Start();
            try
            {
                var response = _restClient.CreateVMGroup(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkVMGroup, cancellationToken);
                var operation = new WorkloadNetworkCreateVMGroupOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreateVMGroupRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkVMGroup).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a vm group by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkVMGroup"> NSX VM Group. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkVMGroup"/> is null. </exception>
        public async virtual Task<WorkloadNetworkUpdateVMGroupOperation> UpdateVMGroupAsync(WorkloadNetworkVMGroup workloadNetworkVMGroup, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkVMGroup == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkVMGroup));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdateVMGroup");
            scope.Start();
            try
            {
                var response = await _restClient.UpdateVMGroupAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkVMGroup, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkUpdateVMGroupOperation(_clientDiagnostics, Pipeline, _restClient.CreateUpdateVMGroupRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkVMGroup).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a vm group by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkVMGroup"> NSX VM Group. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkVMGroup"/> is null. </exception>
        public virtual WorkloadNetworkUpdateVMGroupOperation UpdateVMGroup(WorkloadNetworkVMGroup workloadNetworkVMGroup, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkVMGroup == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkVMGroup));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdateVMGroup");
            scope.Start();
            try
            {
                var response = _restClient.UpdateVMGroup(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkVMGroup, cancellationToken);
                var operation = new WorkloadNetworkUpdateVMGroupOperation(_clientDiagnostics, Pipeline, _restClient.CreateUpdateVMGroupRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkVMGroup).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a vm group by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<WorkloadNetworkDeleteVMGroupOperation> DeleteVMGroupAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeleteVMGroup");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteVMGroupAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkDeleteVMGroupOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteVMGroupRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a vm group by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual WorkloadNetworkDeleteVMGroupOperation DeleteVMGroup(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeleteVMGroup");
            scope.Start();
            try
            {
                var response = _restClient.DeleteVMGroup(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadNetworkDeleteVMGroupOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteVMGroupRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a DNS service by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkDnsService"> NSX DNS Service. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkDnsService"/> is null. </exception>
        public async virtual Task<WorkloadNetworkCreateDnsServiceOperation> CreateDnsServiceAsync(WorkloadNetworkDnsService workloadNetworkDnsService, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkDnsService == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDnsService));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreateDnsService");
            scope.Start();
            try
            {
                var response = await _restClient.CreateDnsServiceAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsService, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkCreateDnsServiceOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreateDnsServiceRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsService).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a DNS service by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkDnsService"> NSX DNS Service. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkDnsService"/> is null. </exception>
        public virtual WorkloadNetworkCreateDnsServiceOperation CreateDnsService(WorkloadNetworkDnsService workloadNetworkDnsService, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkDnsService == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDnsService));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreateDnsService");
            scope.Start();
            try
            {
                var response = _restClient.CreateDnsService(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsService, cancellationToken);
                var operation = new WorkloadNetworkCreateDnsServiceOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreateDnsServiceRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsService).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a DNS service by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkDnsService"> NSX DNS Service. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkDnsService"/> is null. </exception>
        public async virtual Task<WorkloadNetworkUpdateDnsServiceOperation> UpdateDnsServiceAsync(WorkloadNetworkDnsService workloadNetworkDnsService, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkDnsService == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDnsService));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdateDnsService");
            scope.Start();
            try
            {
                var response = await _restClient.UpdateDnsServiceAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsService, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkUpdateDnsServiceOperation(_clientDiagnostics, Pipeline, _restClient.CreateUpdateDnsServiceRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsService).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a DNS service by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkDnsService"> NSX DNS Service. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkDnsService"/> is null. </exception>
        public virtual WorkloadNetworkUpdateDnsServiceOperation UpdateDnsService(WorkloadNetworkDnsService workloadNetworkDnsService, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkDnsService == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDnsService));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdateDnsService");
            scope.Start();
            try
            {
                var response = _restClient.UpdateDnsService(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsService, cancellationToken);
                var operation = new WorkloadNetworkUpdateDnsServiceOperation(_clientDiagnostics, Pipeline, _restClient.CreateUpdateDnsServiceRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsService).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a DNS service by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<WorkloadNetworkDeleteDnsServiceOperation> DeleteDnsServiceAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeleteDnsService");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteDnsServiceAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkDeleteDnsServiceOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteDnsServiceRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a DNS service by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual WorkloadNetworkDeleteDnsServiceOperation DeleteDnsService(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeleteDnsService");
            scope.Start();
            try
            {
                var response = _restClient.DeleteDnsService(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadNetworkDeleteDnsServiceOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteDnsServiceRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkDnsZone"> NSX DNS Zone. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkDnsZone"/> is null. </exception>
        public async virtual Task<WorkloadNetworkCreateDnsZoneOperation> CreateDnsZoneAsync(WorkloadNetworkDnsZone workloadNetworkDnsZone, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkDnsZone == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDnsZone));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreateDnsZone");
            scope.Start();
            try
            {
                var response = await _restClient.CreateDnsZoneAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsZone, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkCreateDnsZoneOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreateDnsZoneRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsZone).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkDnsZone"> NSX DNS Zone. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkDnsZone"/> is null. </exception>
        public virtual WorkloadNetworkCreateDnsZoneOperation CreateDnsZone(WorkloadNetworkDnsZone workloadNetworkDnsZone, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkDnsZone == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDnsZone));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreateDnsZone");
            scope.Start();
            try
            {
                var response = _restClient.CreateDnsZone(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsZone, cancellationToken);
                var operation = new WorkloadNetworkCreateDnsZoneOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreateDnsZoneRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsZone).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkDnsZone"> NSX DNS Zone. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkDnsZone"/> is null. </exception>
        public async virtual Task<WorkloadNetworkUpdateDnsZoneOperation> UpdateDnsZoneAsync(WorkloadNetworkDnsZone workloadNetworkDnsZone, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkDnsZone == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDnsZone));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdateDnsZone");
            scope.Start();
            try
            {
                var response = await _restClient.UpdateDnsZoneAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsZone, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkUpdateDnsZoneOperation(_clientDiagnostics, Pipeline, _restClient.CreateUpdateDnsZoneRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsZone).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkDnsZone"> NSX DNS Zone. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkDnsZone"/> is null. </exception>
        public virtual WorkloadNetworkUpdateDnsZoneOperation UpdateDnsZone(WorkloadNetworkDnsZone workloadNetworkDnsZone, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkDnsZone == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkDnsZone));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.UpdateDnsZone");
            scope.Start();
            try
            {
                var response = _restClient.UpdateDnsZone(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsZone, cancellationToken);
                var operation = new WorkloadNetworkUpdateDnsZoneOperation(_clientDiagnostics, Pipeline, _restClient.CreateUpdateDnsZoneRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkDnsZone).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<WorkloadNetworkDeleteDnsZoneOperation> DeleteDnsZoneAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeleteDnsZone");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteDnsZoneAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkDeleteDnsZoneOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteDnsZoneRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a DNS zone by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual WorkloadNetworkDeleteDnsZoneOperation DeleteDnsZone(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeleteDnsZone");
            scope.Start();
            try
            {
                var response = _restClient.DeleteDnsZone(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadNetworkDeleteDnsZoneOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteDnsZoneRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a Public IP Block by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkPublicIP"> NSX Public IP Block. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkPublicIP"/> is null. </exception>
        public async virtual Task<WorkloadNetworkCreatePublicIPOperation> CreatePublicIPAsync(WorkloadNetworkPublicIP workloadNetworkPublicIP, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkPublicIP == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkPublicIP));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreatePublicIP");
            scope.Start();
            try
            {
                var response = await _restClient.CreatePublicIPAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPublicIP, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkCreatePublicIPOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreatePublicIPRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPublicIP).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a Public IP Block by id in a private cloud workload network. </summary>
        /// <param name="workloadNetworkPublicIP"> NSX Public IP Block. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadNetworkPublicIP"/> is null. </exception>
        public virtual WorkloadNetworkCreatePublicIPOperation CreatePublicIP(WorkloadNetworkPublicIP workloadNetworkPublicIP, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (workloadNetworkPublicIP == null)
            {
                throw new ArgumentNullException(nameof(workloadNetworkPublicIP));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.CreatePublicIP");
            scope.Start();
            try
            {
                var response = _restClient.CreatePublicIP(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPublicIP, cancellationToken);
                var operation = new WorkloadNetworkCreatePublicIPOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreatePublicIPRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, workloadNetworkPublicIP).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a Public IP Block by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<WorkloadNetworkDeletePublicIPOperation> DeletePublicIPAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeletePublicIP");
            scope.Start();
            try
            {
                var response = await _restClient.DeletePublicIPAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new WorkloadNetworkDeletePublicIPOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeletePublicIPRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a Public IP Block by id in a private cloud workload network. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual WorkloadNetworkDeletePublicIPOperation DeletePublicIP(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkSegment.DeletePublicIP");
            scope.Start();
            try
            {
                var response = _restClient.DeletePublicIP(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new WorkloadNetworkDeletePublicIPOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeletePublicIPRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
