// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Avs.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Avs
{
    /// <summary> A Class representing a PrivateCloud along with the instance operations that can be performed on it. </summary>
    public partial class PrivateCloud : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="PrivateCloud"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string privateCloudName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}";
            return new ResourceIdentifier(resourceId);
        }
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly PrivateCloudsRestOperations _privateCloudsRestClient;
        private readonly PrivateCloudData _data;

        /// <summary> Initializes a new instance of the <see cref="PrivateCloud"/> class for mocking. </summary>
        protected PrivateCloud()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "PrivateCloud"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal PrivateCloud(ArmResource options, PrivateCloudData data) : base(options, data.Id)
        {
            HasData = true;
            _data = data;
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _privateCloudsRestClient = new PrivateCloudsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="PrivateCloud"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal PrivateCloud(ArmResource options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _privateCloudsRestClient = new PrivateCloudsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="PrivateCloud"/> class. </summary>
        /// <param name="clientOptions"> The client options to build client context. </param>
        /// <param name="credential"> The credential to build client context. </param>
        /// <param name="uri"> The uri to build client context. </param>
        /// <param name="pipeline"> The pipeline to build client context. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal PrivateCloud(ArmClientOptions clientOptions, TokenCredential credential, Uri uri, HttpPipeline pipeline, ResourceIdentifier id) : base(clientOptions, credential, uri, pipeline, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _privateCloudsRestClient = new PrivateCloudsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.AVS/privateClouds";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual PrivateCloudData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Get a private cloud. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<PrivateCloud>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.Get");
            scope.Start();
            try
            {
                var response = await _privateCloudsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new PrivateCloud(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a private cloud. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PrivateCloud> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.Get");
            scope.Start();
            try
            {
                var response = _privateCloudsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PrivateCloud(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<AzureLocation>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.GetAvailableLocations");
            scope.Start();
            try
            {
                return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<AzureLocation> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.GetAvailableLocations");
            scope.Start();
            try
            {
                return ListAvailableLocations(ResourceType, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a private cloud. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<PrivateCloudDeleteOperation> DeleteAsync(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.Delete");
            scope.Start();
            try
            {
                var response = await _privateCloudsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new PrivateCloudDeleteOperation(_clientDiagnostics, Pipeline, _privateCloudsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a private cloud. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual PrivateCloudDeleteOperation Delete(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.Delete");
            scope.Start();
            try
            {
                var response = _privateCloudsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new PrivateCloudDeleteOperation(_clientDiagnostics, Pipeline, _privateCloudsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a tag to the current resource. </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag added. </returns>
        public async virtual Task<Response<PrivateCloud>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException(nameof(key), $"{nameof(key)} provided cannot be null or a whitespace.");
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.AddTag");
            scope.Start();
            try
            {
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.Properties.TagsValue[key] = value;
                await TagResource.CreateOrUpdateAsync(originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _privateCloudsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new PrivateCloud(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a tag to the current resource. </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag added. </returns>
        public virtual Response<PrivateCloud> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException(nameof(key), $"{nameof(key)} provided cannot be null or a whitespace.");
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.AddTag");
            scope.Start();
            try
            {
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.Properties.TagsValue[key] = value;
                TagResource.CreateOrUpdate(originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _privateCloudsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new PrivateCloud(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace the tags on the resource with the given set. </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tags replaced. </returns>
        public async virtual Task<Response<PrivateCloud>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            if (tags == null)
            {
                throw new ArgumentNullException(nameof(tags), $"{nameof(tags)} provided cannot be null.");
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.SetTags");
            scope.Start();
            try
            {
                await TagResource.DeleteAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.Properties.TagsValue.ReplaceWith(tags);
                await TagResource.CreateOrUpdateAsync(originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _privateCloudsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new PrivateCloud(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace the tags on the resource with the given set. </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tags replaced. </returns>
        public virtual Response<PrivateCloud> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            if (tags == null)
            {
                throw new ArgumentNullException(nameof(tags), $"{nameof(tags)} provided cannot be null.");
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.SetTags");
            scope.Start();
            try
            {
                TagResource.Delete(cancellationToken: cancellationToken);
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.Properties.TagsValue.ReplaceWith(tags);
                TagResource.CreateOrUpdate(originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _privateCloudsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new PrivateCloud(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes a tag by key from the resource. </summary>
        /// <param name="key"> The key of the tag to remove. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag removed. </returns>
        public async virtual Task<Response<PrivateCloud>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException(nameof(key), $"{nameof(key)} provided cannot be null or a whitespace.");
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.Properties.TagsValue.Remove(key);
                await TagResource.CreateOrUpdateAsync(originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _privateCloudsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new PrivateCloud(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes a tag by key from the resource. </summary>
        /// <param name="key"> The key of the tag to remove. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag removed. </returns>
        public virtual Response<PrivateCloud> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException(nameof(key), $"{nameof(key)} provided cannot be null or a whitespace.");
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.Properties.TagsValue.Remove(key);
                TagResource.CreateOrUpdate(originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _privateCloudsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new PrivateCloud(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a private cloud. </summary>
        /// <param name="privateCloudUpdate"> The private cloud properties to be updated. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateCloudUpdate"/> is null. </exception>
        public async virtual Task<PrivateCloudUpdateOperation> UpdateAsync(bool waitForCompletion, PrivateCloudUpdate privateCloudUpdate, CancellationToken cancellationToken = default)
        {
            if (privateCloudUpdate == null)
            {
                throw new ArgumentNullException(nameof(privateCloudUpdate));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.Update");
            scope.Start();
            try
            {
                var response = await _privateCloudsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, privateCloudUpdate, cancellationToken).ConfigureAwait(false);
                var operation = new PrivateCloudUpdateOperation(this, _clientDiagnostics, Pipeline, _privateCloudsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, privateCloudUpdate).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a private cloud. </summary>
        /// <param name="privateCloudUpdate"> The private cloud properties to be updated. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateCloudUpdate"/> is null. </exception>
        public virtual PrivateCloudUpdateOperation Update(bool waitForCompletion, PrivateCloudUpdate privateCloudUpdate, CancellationToken cancellationToken = default)
        {
            if (privateCloudUpdate == null)
            {
                throw new ArgumentNullException(nameof(privateCloudUpdate));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.Update");
            scope.Start();
            try
            {
                var response = _privateCloudsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, privateCloudUpdate, cancellationToken);
                var operation = new PrivateCloudUpdateOperation(this, _clientDiagnostics, Pipeline, _privateCloudsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, privateCloudUpdate).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rotate the vCenter password. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<PrivateCloudRotateVcenterPasswordOperation> RotateVcenterPasswordAsync(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.RotateVcenterPassword");
            scope.Start();
            try
            {
                var response = await _privateCloudsRestClient.RotateVcenterPasswordAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new PrivateCloudRotateVcenterPasswordOperation(_clientDiagnostics, Pipeline, _privateCloudsRestClient.CreateRotateVcenterPasswordRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rotate the vCenter password. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual PrivateCloudRotateVcenterPasswordOperation RotateVcenterPassword(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.RotateVcenterPassword");
            scope.Start();
            try
            {
                var response = _privateCloudsRestClient.RotateVcenterPassword(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new PrivateCloudRotateVcenterPasswordOperation(_clientDiagnostics, Pipeline, _privateCloudsRestClient.CreateRotateVcenterPasswordRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rotate the NSX-T Manager password. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<PrivateCloudRotateNsxtPasswordOperation> RotateNsxtPasswordAsync(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.RotateNsxtPassword");
            scope.Start();
            try
            {
                var response = await _privateCloudsRestClient.RotateNsxtPasswordAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new PrivateCloudRotateNsxtPasswordOperation(_clientDiagnostics, Pipeline, _privateCloudsRestClient.CreateRotateNsxtPasswordRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rotate the NSX-T Manager password. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual PrivateCloudRotateNsxtPasswordOperation RotateNsxtPassword(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.RotateNsxtPassword");
            scope.Start();
            try
            {
                var response = _privateCloudsRestClient.RotateNsxtPassword(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new PrivateCloudRotateNsxtPasswordOperation(_clientDiagnostics, Pipeline, _privateCloudsRestClient.CreateRotateNsxtPasswordRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the admin credentials for the private cloud. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<AdminCredentials>> GetAdminCredentialsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.GetAdminCredentials");
            scope.Start();
            try
            {
                var response = await _privateCloudsRestClient.ListAdminCredentialsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the admin credentials for the private cloud. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AdminCredentials> GetAdminCredentials(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateCloud.GetAdminCredentials");
            scope.Start();
            try
            {
                var response = _privateCloudsRestClient.ListAdminCredentials(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        #region Cluster

        /// <summary> Gets a collection of Clusters in the PrivateCloud. </summary>
        /// <returns> An object representing collection of Clusters and their operations over a PrivateCloud. </returns>
        public virtual ClusterCollection GetClusters()
        {
            return new ClusterCollection(this);
        }
        #endregion

        #region HcxEnterpriseSite

        /// <summary> Gets a collection of HcxEnterpriseSites in the PrivateCloud. </summary>
        /// <returns> An object representing collection of HcxEnterpriseSites and their operations over a PrivateCloud. </returns>
        public virtual HcxEnterpriseSiteCollection GetHcxEnterpriseSites()
        {
            return new HcxEnterpriseSiteCollection(this);
        }
        #endregion

        #region ExpressRouteAuthorization

        /// <summary> Gets a collection of ExpressRouteAuthorizations in the PrivateCloud. </summary>
        /// <returns> An object representing collection of ExpressRouteAuthorizations and their operations over a PrivateCloud. </returns>
        public virtual ExpressRouteAuthorizationCollection GetExpressRouteAuthorizations()
        {
            return new ExpressRouteAuthorizationCollection(this);
        }
        #endregion

        #region GlobalReachConnection

        /// <summary> Gets a collection of GlobalReachConnections in the PrivateCloud. </summary>
        /// <returns> An object representing collection of GlobalReachConnections and their operations over a PrivateCloud. </returns>
        public virtual GlobalReachConnectionCollection GetGlobalReachConnections()
        {
            return new GlobalReachConnectionCollection(this);
        }
        #endregion

        #region WorkloadNetworkSegment

        /// <summary> Gets a collection of WorkloadNetworkSegments in the PrivateCloud. </summary>
        /// <returns> An object representing collection of WorkloadNetworkSegments and their operations over a PrivateCloud. </returns>
        public virtual WorkloadNetworkSegmentCollection GetWorkloadNetworkSegments()
        {
            return new WorkloadNetworkSegmentCollection(this);
        }
        #endregion

        #region WorkloadNetworkDhcp

        /// <summary> Gets a collection of WorkloadNetworkDhcps in the PrivateCloud. </summary>
        /// <returns> An object representing collection of WorkloadNetworkDhcps and their operations over a PrivateCloud. </returns>
        public virtual WorkloadNetworkDhcpCollection GetWorkloadNetworkDhcps()
        {
            return new WorkloadNetworkDhcpCollection(this);
        }
        #endregion

        #region WorkloadNetworkGateway

        /// <summary> Gets a collection of WorkloadNetworkGateways in the PrivateCloud. </summary>
        /// <returns> An object representing collection of WorkloadNetworkGateways and their operations over a PrivateCloud. </returns>
        public virtual WorkloadNetworkGatewayCollection GetWorkloadNetworkGateways()
        {
            return new WorkloadNetworkGatewayCollection(this);
        }
        #endregion

        #region WorkloadNetworkPortMirroring

        /// <summary> Gets a collection of WorkloadNetworkPortMirrorings in the PrivateCloud. </summary>
        /// <returns> An object representing collection of WorkloadNetworkPortMirrorings and their operations over a PrivateCloud. </returns>
        public virtual WorkloadNetworkPortMirroringCollection GetWorkloadNetworkPortMirrorings()
        {
            return new WorkloadNetworkPortMirroringCollection(this);
        }
        #endregion

        #region WorkloadNetworkVMGroup

        /// <summary> Gets a collection of WorkloadNetworkVMGroups in the PrivateCloud. </summary>
        /// <returns> An object representing collection of WorkloadNetworkVMGroups and their operations over a PrivateCloud. </returns>
        public virtual WorkloadNetworkVMGroupCollection GetWorkloadNetworkVMGroups()
        {
            return new WorkloadNetworkVMGroupCollection(this);
        }
        #endregion

        #region WorkloadNetworkVirtualMachine

        /// <summary> Gets a collection of WorkloadNetworkVirtualMachines in the PrivateCloud. </summary>
        /// <returns> An object representing collection of WorkloadNetworkVirtualMachines and their operations over a PrivateCloud. </returns>
        public virtual WorkloadNetworkVirtualMachineCollection GetWorkloadNetworkVirtualMachines()
        {
            return new WorkloadNetworkVirtualMachineCollection(this);
        }
        #endregion

        #region WorkloadNetworkDnsService

        /// <summary> Gets a collection of WorkloadNetworkDnsServices in the PrivateCloud. </summary>
        /// <returns> An object representing collection of WorkloadNetworkDnsServices and their operations over a PrivateCloud. </returns>
        public virtual WorkloadNetworkDnsServiceCollection GetWorkloadNetworkDnsServices()
        {
            return new WorkloadNetworkDnsServiceCollection(this);
        }
        #endregion

        #region WorkloadNetworkDnsZone

        /// <summary> Gets a collection of WorkloadNetworkDnsZones in the PrivateCloud. </summary>
        /// <returns> An object representing collection of WorkloadNetworkDnsZones and their operations over a PrivateCloud. </returns>
        public virtual WorkloadNetworkDnsZoneCollection GetWorkloadNetworkDnsZones()
        {
            return new WorkloadNetworkDnsZoneCollection(this);
        }
        #endregion

        #region WorkloadNetworkPublicIP

        /// <summary> Gets a collection of WorkloadNetworkPublicIPs in the PrivateCloud. </summary>
        /// <returns> An object representing collection of WorkloadNetworkPublicIPs and their operations over a PrivateCloud. </returns>
        public virtual WorkloadNetworkPublicIPCollection GetWorkloadNetworkPublicIPs()
        {
            return new WorkloadNetworkPublicIPCollection(this);
        }
        #endregion

        #region CloudLink

        /// <summary> Gets a collection of CloudLinks in the PrivateCloud. </summary>
        /// <returns> An object representing collection of CloudLinks and their operations over a PrivateCloud. </returns>
        public virtual CloudLinkCollection GetCloudLinks()
        {
            return new CloudLinkCollection(this);
        }
        #endregion

        #region Addon

        /// <summary> Gets a collection of Addons in the PrivateCloud. </summary>
        /// <returns> An object representing collection of Addons and their operations over a PrivateCloud. </returns>
        public virtual AddonCollection GetAddons()
        {
            return new AddonCollection(this);
        }
        #endregion

        #region ScriptPackage

        /// <summary> Gets a collection of ScriptPackages in the PrivateCloud. </summary>
        /// <returns> An object representing collection of ScriptPackages and their operations over a PrivateCloud. </returns>
        public virtual ScriptPackageCollection GetScriptPackages()
        {
            return new ScriptPackageCollection(this);
        }
        #endregion

        #region ScriptExecution

        /// <summary> Gets a collection of ScriptExecutions in the PrivateCloud. </summary>
        /// <returns> An object representing collection of ScriptExecutions and their operations over a PrivateCloud. </returns>
        public virtual ScriptExecutionCollection GetScriptExecutions()
        {
            return new ScriptExecutionCollection(this);
        }
        #endregion
    }
}
