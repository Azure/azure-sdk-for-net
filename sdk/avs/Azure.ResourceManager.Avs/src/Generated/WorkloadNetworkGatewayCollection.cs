// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Avs
{
    /// <summary> A class representing collection of WorkloadNetworkGateway and their operations over its parent. </summary>
    public partial class WorkloadNetworkGatewayCollection : ArmCollection, IEnumerable<WorkloadNetworkGateway>, IAsyncEnumerable<WorkloadNetworkGateway>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly WorkloadNetworksRestOperations _workloadNetworksRestClient;

        /// <summary> Initializes a new instance of the <see cref="WorkloadNetworkGatewayCollection"/> class for mocking. </summary>
        protected WorkloadNetworkGatewayCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="WorkloadNetworkGatewayCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal WorkloadNetworkGatewayCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _workloadNetworksRestClient = new WorkloadNetworksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != PrivateCloud.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, PrivateCloud.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Get a gateway by id in a private cloud workload network. </summary>
        /// <param name="gatewayId"> NSX Gateway identifier. Generally the same as the Gateway&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayId"/> is null. </exception>
        public virtual Response<WorkloadNetworkGateway> Get(string gatewayId, CancellationToken cancellationToken = default)
        {
            if (gatewayId == null)
            {
                throw new ArgumentNullException(nameof(gatewayId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkGatewayCollection.Get");
            scope.Start();
            try
            {
                var response = _workloadNetworksRestClient.GetGateway(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, gatewayId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkloadNetworkGateway(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a gateway by id in a private cloud workload network. </summary>
        /// <param name="gatewayId"> NSX Gateway identifier. Generally the same as the Gateway&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayId"/> is null. </exception>
        public async virtual Task<Response<WorkloadNetworkGateway>> GetAsync(string gatewayId, CancellationToken cancellationToken = default)
        {
            if (gatewayId == null)
            {
                throw new ArgumentNullException(nameof(gatewayId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkGatewayCollection.Get");
            scope.Start();
            try
            {
                var response = await _workloadNetworksRestClient.GetGatewayAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, gatewayId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new WorkloadNetworkGateway(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="gatewayId"> NSX Gateway identifier. Generally the same as the Gateway&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayId"/> is null. </exception>
        public virtual Response<WorkloadNetworkGateway> GetIfExists(string gatewayId, CancellationToken cancellationToken = default)
        {
            if (gatewayId == null)
            {
                throw new ArgumentNullException(nameof(gatewayId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkGatewayCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _workloadNetworksRestClient.GetGateway(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, gatewayId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<WorkloadNetworkGateway>(null, response.GetRawResponse());
                return Response.FromValue(new WorkloadNetworkGateway(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="gatewayId"> NSX Gateway identifier. Generally the same as the Gateway&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayId"/> is null. </exception>
        public async virtual Task<Response<WorkloadNetworkGateway>> GetIfExistsAsync(string gatewayId, CancellationToken cancellationToken = default)
        {
            if (gatewayId == null)
            {
                throw new ArgumentNullException(nameof(gatewayId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkGatewayCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _workloadNetworksRestClient.GetGatewayAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, gatewayId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<WorkloadNetworkGateway>(null, response.GetRawResponse());
                return Response.FromValue(new WorkloadNetworkGateway(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="gatewayId"> NSX Gateway identifier. Generally the same as the Gateway&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayId"/> is null. </exception>
        public virtual Response<bool> Exists(string gatewayId, CancellationToken cancellationToken = default)
        {
            if (gatewayId == null)
            {
                throw new ArgumentNullException(nameof(gatewayId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkGatewayCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(gatewayId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="gatewayId"> NSX Gateway identifier. Generally the same as the Gateway&apos;s display name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayId"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string gatewayId, CancellationToken cancellationToken = default)
        {
            if (gatewayId == null)
            {
                throw new ArgumentNullException(nameof(gatewayId));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkGatewayCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(gatewayId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List of gateways in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkloadNetworkGateway" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadNetworkGateway> GetAll(CancellationToken cancellationToken = default)
        {
            Page<WorkloadNetworkGateway> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkGatewayCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _workloadNetworksRestClient.ListGateways(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkGateway(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkloadNetworkGateway> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkGatewayCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _workloadNetworksRestClient.ListGatewaysNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkGateway(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List of gateways in a private cloud workload network. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkloadNetworkGateway" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadNetworkGateway> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkloadNetworkGateway>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkGatewayCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _workloadNetworksRestClient.ListGatewaysAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkGateway(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkloadNetworkGateway>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkloadNetworkGatewayCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _workloadNetworksRestClient.ListGatewaysNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkloadNetworkGateway(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<WorkloadNetworkGateway> IEnumerable<WorkloadNetworkGateway>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<WorkloadNetworkGateway> IAsyncEnumerable<WorkloadNetworkGateway>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, WorkloadNetworkGateway, WorkloadNetworkGatewayData> Construct() { }
    }
}
