// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Avs.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Avs.Samples
{
    public partial class Sample_ClusterCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_ClustersCreateOrUpdate()
        {
            // Generated from example definition: 2024-09-01/Clusters_CreateOrUpdate.json
            // this example is just showing the usage of "Cluster_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this ClusterResource
            ClusterCollection collection = privateCloud.GetClusters();

            // invoke the operation
            string clusterName = "cluster1";
            ClusterData data = new ClusterData(new AvsSku("AV20"))
            {
                Properties = new ClusterProperties
                {
                    ClusterSize = 3,
                },
            };
            ArmOperation<ClusterResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, clusterName, data);
            ClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ClustersGet()
        {
            // Generated from example definition: 2024-09-01/Clusters_Get.json
            // this example is just showing the usage of "Cluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this ClusterResource
            ClusterCollection collection = privateCloud.GetClusters();

            // invoke the operation
            string clusterName = "cluster1";
            ClusterResource result = await collection.GetAsync(clusterName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ClustersList()
        {
            // Generated from example definition: 2024-09-01/Clusters_List.json
            // this example is just showing the usage of "Cluster_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this ClusterResource
            ClusterCollection collection = privateCloud.GetClusters();

            // invoke the operation and iterate over the result
            await foreach (ClusterResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ClusterData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_ClustersGet()
        {
            // Generated from example definition: 2024-09-01/Clusters_Get.json
            // this example is just showing the usage of "Cluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this ClusterResource
            ClusterCollection collection = privateCloud.GetClusters();

            // invoke the operation
            string clusterName = "cluster1";
            bool result = await collection.ExistsAsync(clusterName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_ClustersGet()
        {
            // Generated from example definition: 2024-09-01/Clusters_Get.json
            // this example is just showing the usage of "Cluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this ClusterResource
            ClusterCollection collection = privateCloud.GetClusters();

            // invoke the operation
            string clusterName = "cluster1";
            NullableResponse<ClusterResource> response = await collection.GetIfExistsAsync(clusterName);
            ClusterResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ClusterData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
