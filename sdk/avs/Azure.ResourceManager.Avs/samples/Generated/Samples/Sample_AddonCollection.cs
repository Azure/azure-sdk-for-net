// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Avs.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Avs.Samples
{
    public partial class Sample_AddonCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AddonsCreateOrUpdateArcReg()
        {
            // Generated from example definition: 2024-09-01/Addons_CreateOrUpdate_ArcReg.json
            // this example is just showing the usage of "Addon_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "arc";
            AddonData data = new AddonData
            {
                Properties = new AddonArcProperties
                {
                    VCenter = "subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg_test/providers/Microsoft.ConnectedVMwarevSphere/VCenters/test-vcenter",
                },
            };
            ArmOperation<AddonResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, addonName, data);
            AddonResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AddonData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AddonsCreateOrUpdateHCX()
        {
            // Generated from example definition: 2024-09-01/Addons_CreateOrUpdate_HCX.json
            // this example is just showing the usage of "Addon_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "hcx";
            AddonData data = new AddonData
            {
                Properties = new AddonHcxProperties("VMware MaaS Cloud Provider (Enterprise)"),
            };
            ArmOperation<AddonResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, addonName, data);
            AddonResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AddonData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AddonsCreateOrUpdateHCXWithNetworks()
        {
            // Generated from example definition: 2024-09-01/Addons_CreateOrUpdate_HCX_With_Networks.json
            // this example is just showing the usage of "Addon_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "hcx";
            AddonData data = new AddonData
            {
                Properties = new AddonHcxProperties("VMware MaaS Cloud Provider (Enterprise)")
                {
                    ManagementNetwork = "10.3.1.0/24",
                    UplinkNetwork = "10.3.2.0/24",
                },
            };
            ArmOperation<AddonResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, addonName, data);
            AddonResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AddonData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AddonsCreateOrUpdateSRM()
        {
            // Generated from example definition: 2024-09-01/Addons_CreateOrUpdate_SRM.json
            // this example is just showing the usage of "Addon_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "srm";
            AddonData data = new AddonData
            {
                Properties = new AddonSrmProperties
                {
                    LicenseKey = "41915178-A8FF-4A4D-B683-6D735AF5E3F5",
                },
            };
            ArmOperation<AddonResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, addonName, data);
            AddonResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AddonData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AddonsCreateOrUpdateVR()
        {
            // Generated from example definition: 2024-09-01/Addons_CreateOrUpdate_VR.json
            // this example is just showing the usage of "Addon_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "vr";
            AddonData data = new AddonData
            {
                Properties = new AddonVrProperties(1),
            };
            ArmOperation<AddonResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, addonName, data);
            AddonResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AddonData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AddonsGetArcReg()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_ArcReg.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "arc";
            AddonResource result = await collection.GetAsync(addonName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AddonData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AddonsGetHCX()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_HCX.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "hcx";
            AddonResource result = await collection.GetAsync(addonName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AddonData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AddonsGetHCXWithNetworks()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_HCX_With_Networks.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "hcx";
            AddonResource result = await collection.GetAsync(addonName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AddonData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AddonsGetSRM()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_SRM.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "srm";
            AddonResource result = await collection.GetAsync(addonName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AddonData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AddonsGetVR()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_VR.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "vr";
            AddonResource result = await collection.GetAsync(addonName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AddonData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AddonsList()
        {
            // Generated from example definition: 2024-09-01/Addons_List.json
            // this example is just showing the usage of "Addon_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation and iterate over the result
            await foreach (AddonResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AddonData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AddonsGetArcReg()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_ArcReg.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "arc";
            bool result = await collection.ExistsAsync(addonName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AddonsGetHCX()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_HCX.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "hcx";
            bool result = await collection.ExistsAsync(addonName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AddonsGetHCXWithNetworks()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_HCX_With_Networks.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "hcx";
            bool result = await collection.ExistsAsync(addonName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AddonsGetSRM()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_SRM.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "srm";
            bool result = await collection.ExistsAsync(addonName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AddonsGetVR()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_VR.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "vr";
            bool result = await collection.ExistsAsync(addonName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AddonsGetArcReg()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_ArcReg.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "arc";
            NullableResponse<AddonResource> response = await collection.GetIfExistsAsync(addonName);
            AddonResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AddonData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AddonsGetHCX()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_HCX.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "hcx";
            NullableResponse<AddonResource> response = await collection.GetIfExistsAsync(addonName);
            AddonResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AddonData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AddonsGetHCXWithNetworks()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_HCX_With_Networks.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "hcx";
            NullableResponse<AddonResource> response = await collection.GetIfExistsAsync(addonName);
            AddonResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AddonData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AddonsGetSRM()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_SRM.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "srm";
            NullableResponse<AddonResource> response = await collection.GetIfExistsAsync(addonName);
            AddonResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AddonData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AddonsGetVR()
        {
            // Generated from example definition: 2024-09-01/Addons_Get_VR.json
            // this example is just showing the usage of "Addon_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // get the collection of this AddonResource
            AddonCollection collection = privateCloud.GetAddons();

            // invoke the operation
            string addonName = "vr";
            NullableResponse<AddonResource> response = await collection.GetIfExistsAsync(addonName);
            AddonResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AddonData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
