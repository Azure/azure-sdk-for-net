// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Avs.Models;
using Azure.ResourceManager.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Avs.Samples
{
    public partial class Sample_PrivateCloudResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_PrivateCloudsGet()
        {
            // Generated from example definition: 2024-09-01/PrivateClouds_Get.json
            // this example is just showing the usage of "PrivateCloud_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // invoke the operation
            PrivateCloudResource result = await privateCloud.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateCloudData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_PrivateCloudsGetStretched()
        {
            // Generated from example definition: 2024-09-01/PrivateClouds_Get_Stretched.json
            // this example is just showing the usage of "PrivateCloud_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // invoke the operation
            PrivateCloudResource result = await privateCloud.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateCloudData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_PrivateCloudsDelete()
        {
            // Generated from example definition: 2024-09-01/PrivateClouds_Delete.json
            // this example is just showing the usage of "PrivateCloud_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // invoke the operation
            await privateCloud.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_PrivateCloudsUpdate()
        {
            // Generated from example definition: 2024-09-01/PrivateClouds_Update.json
            // this example is just showing the usage of "PrivateCloud_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // invoke the operation
            PrivateCloudPatch patch = new PrivateCloudPatch
            {
                Identity = new ManagedServiceIdentity("None"),
            };
            ArmOperation<PrivateCloudResource> lro = await privateCloud.UpdateAsync(WaitUntil.Completed, patch);
            PrivateCloudResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateCloudData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_PrivateCloudsUpdateStretched()
        {
            // Generated from example definition: 2024-09-01/PrivateClouds_Update_Stretched.json
            // this example is just showing the usage of "PrivateCloud_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // invoke the operation
            PrivateCloudPatch patch = new PrivateCloudPatch();
            ArmOperation<PrivateCloudResource> lro = await privateCloud.UpdateAsync(WaitUntil.Completed, patch);
            PrivateCloudResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateCloudData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RotateVcenterPassword_PrivateCloudsRotateVcenterPassword()
        {
            // Generated from example definition: 2024-09-01/PrivateClouds_RotateVcenterPassword.json
            // this example is just showing the usage of "PrivateClouds_RotateVcenterPassword" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // invoke the operation
            await privateCloud.RotateVcenterPasswordAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RotateNsxtPassword_PrivateCloudsRotateNsxtPassword()
        {
            // Generated from example definition: 2024-09-01/PrivateClouds_RotateNsxtPassword.json
            // this example is just showing the usage of "PrivateClouds_RotateNsxtPassword" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // invoke the operation
            await privateCloud.RotateNsxtPasswordAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAdminCredentials_PrivateCloudsListAdminCredentials()
        {
            // Generated from example definition: 2024-09-01/PrivateClouds_ListAdminCredentials.json
            // this example is just showing the usage of "PrivateClouds_ListAdminCredentials" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateCloudResource created on azure
            // for more information of creating PrivateCloudResource, please refer to the document of PrivateCloudResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "group1";
            string privateCloudName = "cloud1";
            ResourceIdentifier privateCloudResourceId = PrivateCloudResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateCloudName);
            PrivateCloudResource privateCloud = client.GetPrivateCloudResource(privateCloudResourceId);

            // invoke the operation
            AdminCredentials result = await privateCloud.GetAdminCredentialsAsync();

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
