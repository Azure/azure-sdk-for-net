// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.TrustedSigning.Models;

namespace Azure.ResourceManager.TrustedSigning.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableTrustedSigningSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _trustedSigningAccountCodeSigningAccountsClientDiagnostics;
        private CodeSigningAccountsRestOperations _trustedSigningAccountCodeSigningAccountsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableTrustedSigningSubscriptionResource"/> class for mocking. </summary>
        protected MockableTrustedSigningSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableTrustedSigningSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableTrustedSigningSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics TrustedSigningAccountCodeSigningAccountsClientDiagnostics => _trustedSigningAccountCodeSigningAccountsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.TrustedSigning", TrustedSigningAccountResource.ResourceType.Namespace, Diagnostics);
        private CodeSigningAccountsRestOperations TrustedSigningAccountCodeSigningAccountsRestClient => _trustedSigningAccountCodeSigningAccountsRestClient ??= new CodeSigningAccountsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(TrustedSigningAccountResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Checks that the trusted signing account name is valid and is not already in use.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccounts_CheckNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-05-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TrustedSigningAccountResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<TrustedSigningAccountNameAvailabilityResult>> CheckTrustedSigningAccountNameAvailabilityAsync(TrustedSigningAccountNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = TrustedSigningAccountCodeSigningAccountsClientDiagnostics.CreateScope("MockableTrustedSigningSubscriptionResource.CheckTrustedSigningAccountNameAvailability");
            scope.Start();
            try
            {
                var response = await TrustedSigningAccountCodeSigningAccountsRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks that the trusted signing account name is valid and is not already in use.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccounts_CheckNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-05-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TrustedSigningAccountResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<TrustedSigningAccountNameAvailabilityResult> CheckTrustedSigningAccountNameAvailability(TrustedSigningAccountNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = TrustedSigningAccountCodeSigningAccountsClientDiagnostics.CreateScope("MockableTrustedSigningSubscriptionResource.CheckTrustedSigningAccountNameAvailability");
            scope.Start();
            try
            {
                var response = TrustedSigningAccountCodeSigningAccountsRestClient.CheckNameAvailability(Id.SubscriptionId, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists trusted signing accounts within a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/codeSigningAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccounts_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-05-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TrustedSigningAccountResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TrustedSigningAccountResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TrustedSigningAccountResource> GetTrustedSigningAccountsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => TrustedSigningAccountCodeSigningAccountsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TrustedSigningAccountCodeSigningAccountsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new TrustedSigningAccountResource(Client, TrustedSigningAccountData.DeserializeTrustedSigningAccountData(e)), TrustedSigningAccountCodeSigningAccountsClientDiagnostics, Pipeline, "MockableTrustedSigningSubscriptionResource.GetTrustedSigningAccounts", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists trusted signing accounts within a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/codeSigningAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccounts_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-05-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TrustedSigningAccountResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TrustedSigningAccountResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TrustedSigningAccountResource> GetTrustedSigningAccounts(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => TrustedSigningAccountCodeSigningAccountsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TrustedSigningAccountCodeSigningAccountsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new TrustedSigningAccountResource(Client, TrustedSigningAccountData.DeserializeTrustedSigningAccountData(e)), TrustedSigningAccountCodeSigningAccountsClientDiagnostics, Pipeline, "MockableTrustedSigningSubscriptionResource.GetTrustedSigningAccounts", "value", "nextLink", cancellationToken);
        }
    }
}
