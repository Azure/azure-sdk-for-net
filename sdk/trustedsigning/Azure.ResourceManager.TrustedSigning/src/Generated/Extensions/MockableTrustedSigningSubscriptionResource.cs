// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TrustedSigning;
using Azure.ResourceManager.TrustedSigning.Models;

namespace Azure.ResourceManager.TrustedSigning.Mocking
{
    /// <summary> A class to add extension methods to <see cref="SubscriptionResource"/>. </summary>
    public partial class MockableTrustedSigningSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _codeSigningAccountsClientDiagnostics;
        private CodeSigningAccounts _codeSigningAccountsRestClient;

        /// <summary> Initializes a new instance of MockableTrustedSigningSubscriptionResource for mocking. </summary>
        protected MockableTrustedSigningSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableTrustedSigningSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableTrustedSigningSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics CodeSigningAccountsClientDiagnostics => _codeSigningAccountsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.TrustedSigning.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private CodeSigningAccounts CodeSigningAccountsRestClient => _codeSigningAccountsRestClient ??= new CodeSigningAccounts(CodeSigningAccountsClientDiagnostics, Pipeline, Endpoint, "2025-10-13");

        /// <summary> Lists trusted signing accounts within a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TrustedSigningAccountResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TrustedSigningAccountResource> GetTrustedSigningAccountsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<TrustedSigningAccountData, TrustedSigningAccountResource>(new CodeSigningAccountsGetBySubscriptionAsyncCollectionResultOfT(CodeSigningAccountsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new TrustedSigningAccountResource(Client, data));
        }

        /// <summary> Lists trusted signing accounts within a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TrustedSigningAccountResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TrustedSigningAccountResource> GetTrustedSigningAccounts(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<TrustedSigningAccountData, TrustedSigningAccountResource>(new CodeSigningAccountsGetBySubscriptionCollectionResultOfT(CodeSigningAccountsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new TrustedSigningAccountResource(Client, data));
        }

        /// <summary> Checks that the trusted signing account name is valid and is not already in use. </summary>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<TrustedSigningAccountNameAvailabilityResult>> CheckTrustedSigningAccountNameAvailabilityAsync(TrustedSigningAccountNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using DiagnosticScope scope = CodeSigningAccountsClientDiagnostics.CreateScope("MockableTrustedSigningSubscriptionResource.CheckTrustedSigningAccountNameAvailability");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = CodeSigningAccountsRestClient.CreateCheckTrustedSigningAccountNameAvailabilityRequest(Guid.Parse(Id.SubscriptionId), TrustedSigningAccountNameAvailabilityContent.ToRequestContent(content), context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<TrustedSigningAccountNameAvailabilityResult> response = Response.FromValue(TrustedSigningAccountNameAvailabilityResult.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks that the trusted signing account name is valid and is not already in use. </summary>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<TrustedSigningAccountNameAvailabilityResult> CheckTrustedSigningAccountNameAvailability(TrustedSigningAccountNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using DiagnosticScope scope = CodeSigningAccountsClientDiagnostics.CreateScope("MockableTrustedSigningSubscriptionResource.CheckTrustedSigningAccountNameAvailability");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = CodeSigningAccountsRestClient.CreateCheckTrustedSigningAccountNameAvailabilityRequest(Guid.Parse(Id.SubscriptionId), TrustedSigningAccountNameAvailabilityContent.ToRequestContent(content), context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<TrustedSigningAccountNameAvailabilityResult> response = Response.FromValue(TrustedSigningAccountNameAvailabilityResult.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
