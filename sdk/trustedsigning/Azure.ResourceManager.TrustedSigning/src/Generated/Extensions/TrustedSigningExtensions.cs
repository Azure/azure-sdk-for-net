// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TrustedSigning.Mocking;
using Azure.ResourceManager.TrustedSigning.Models;

namespace Azure.ResourceManager.TrustedSigning
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.TrustedSigning. </summary>
    public static partial class TrustedSigningExtensions
    {
        /// <param name="client"></param>
        private static MockableTrustedSigningArmClient GetMockableTrustedSigningArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableTrustedSigningArmClient(client0, ResourceIdentifier.Root));
        }

        /// <param name="resourceGroupResource"></param>
        private static MockableTrustedSigningResourceGroupResource GetMockableTrustedSigningResourceGroupResource(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient(client => new MockableTrustedSigningResourceGroupResource(client, resourceGroupResource.Id));
        }

        /// <param name="subscriptionResource"></param>
        private static MockableTrustedSigningSubscriptionResource GetMockableTrustedSigningSubscriptionResource(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient(client => new MockableTrustedSigningSubscriptionResource(client, subscriptionResource.Id));
        }

        /// <summary> Gets an object representing a <see cref="TrustedSigningAccountResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="TrustedSigningAccountResource"/> object. </returns>
        public static TrustedSigningAccountResource GetTrustedSigningAccountResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableTrustedSigningArmClient(client).GetTrustedSigningAccountResource(id);
        }

        /// <summary> Gets an object representing a <see cref="TrustedSigningCertificateProfileResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="TrustedSigningCertificateProfileResource"/> object. </returns>
        public static TrustedSigningCertificateProfileResource GetTrustedSigningCertificateProfileResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableTrustedSigningArmClient(client).GetTrustedSigningCertificateProfileResource(id);
        }

        /// <summary> Gets a collection of TrustedSigningAccounts in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of TrustedSigningAccounts and their operations over a TrustedSigningAccountResource. </returns>
        public static TrustedSigningAccountCollection GetTrustedSigningAccounts(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableTrustedSigningResourceGroupResource(resourceGroupResource).GetTrustedSigningAccounts();
        }

        /// <summary> Get a trusted Signing Account. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="accountName"> Trusted Signing account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<TrustedSigningAccountResource>> GetTrustedSigningAccountAsync(this ResourceGroupResource resourceGroupResource, string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableTrustedSigningResourceGroupResource(resourceGroupResource).GetTrustedSigningAccountAsync(accountName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a trusted Signing Account. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="accountName"> Trusted Signing account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<TrustedSigningAccountResource> GetTrustedSigningAccount(this ResourceGroupResource resourceGroupResource, string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableTrustedSigningResourceGroupResource(resourceGroupResource).GetTrustedSigningAccount(accountName, cancellationToken);
        }

        /// <summary> Lists trusted signing accounts within a subscription. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="TrustedSigningAccountResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<TrustedSigningAccountResource> GetTrustedSigningAccountsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableTrustedSigningSubscriptionResource(subscriptionResource).GetTrustedSigningAccountsAsync(cancellationToken);
        }

        /// <summary> Lists trusted signing accounts within a subscription. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="TrustedSigningAccountResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<TrustedSigningAccountResource> GetTrustedSigningAccounts(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableTrustedSigningSubscriptionResource(subscriptionResource).GetTrustedSigningAccounts(cancellationToken);
        }

        /// <summary> Checks that the trusted signing account name is valid and is not already in use. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        public static async Task<Response<TrustedSigningAccountNameAvailabilityResult>> CheckTrustedSigningAccountNameAvailabilityAsync(this SubscriptionResource subscriptionResource, TrustedSigningAccountNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return await GetMockableTrustedSigningSubscriptionResource(subscriptionResource).CheckTrustedSigningAccountNameAvailabilityAsync(content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Checks that the trusted signing account name is valid and is not already in use. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        public static Response<TrustedSigningAccountNameAvailabilityResult> CheckTrustedSigningAccountNameAvailability(this SubscriptionResource subscriptionResource, TrustedSigningAccountNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableTrustedSigningSubscriptionResource(subscriptionResource).CheckTrustedSigningAccountNameAvailability(content, cancellationToken);
        }
    }
}
