// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TrustedSigning;

namespace Azure.ResourceManager.TrustedSigning.Mocking
{
    /// <summary> A class to add extension methods to <see cref="ResourceGroupResource"/>. </summary>
    public partial class MockableTrustedSigningResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableTrustedSigningResourceGroupResource for mocking. </summary>
        protected MockableTrustedSigningResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableTrustedSigningResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableTrustedSigningResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of TrustedSigningAccounts in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of TrustedSigningAccounts and their operations over a TrustedSigningAccountResource. </returns>
        public virtual TrustedSigningAccountCollection GetTrustedSigningAccounts()
        {
            return GetCachedClient(client => new TrustedSigningAccountCollection(client, Id));
        }

        /// <summary> Get a trusted Signing Account. </summary>
        /// <param name="accountName"> Trusted Signing account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<TrustedSigningAccountResource>> GetTrustedSigningAccountAsync(string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            return await GetTrustedSigningAccounts().GetAsync(accountName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a trusted Signing Account. </summary>
        /// <param name="accountName"> Trusted Signing account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<TrustedSigningAccountResource> GetTrustedSigningAccount(string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            return GetTrustedSigningAccounts().Get(accountName, cancellationToken);
        }
    }
}
