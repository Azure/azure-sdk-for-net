// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.TrustedSigning.Models;

namespace Azure.ResourceManager.TrustedSigning
{
    internal partial class CertificateProfilesGetByCodeSigningAccountCollectionResultOfT : Pageable<TrustedSigningCertificateProfileData>
    {
        private readonly CertificateProfiles _client;
        private readonly Guid _subscriptionId;
        private readonly string _resourceGroupName;
        private readonly string _accountName;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of CertificateProfilesGetByCodeSigningAccountCollectionResultOfT, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The CertificateProfiles client used to send requests. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Trusted Signing account name. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        public CertificateProfilesGetByCodeSigningAccountCollectionResultOfT(CertificateProfiles client, Guid subscriptionId, string resourceGroupName, string accountName, RequestContext context) : base(context?.CancellationToken ?? default)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            _client = client;
            _subscriptionId = subscriptionId;
            _resourceGroupName = resourceGroupName;
            _accountName = accountName;
            _context = context;
        }

        /// <summary> Gets the pages of CertificateProfilesGetByCodeSigningAccountCollectionResultOfT as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of CertificateProfilesGetByCodeSigningAccountCollectionResultOfT as an enumerable collection. </returns>
        public override IEnumerable<Page<TrustedSigningCertificateProfileData>> AsPages(string continuationToken, int? pageSizeHint)
        {
            Uri nextPage = continuationToken != null ? new Uri(continuationToken) : null;
            while (true)
            {
                Response response = GetNextResponse(pageSizeHint, nextPage);
                if (response is null)
                {
                    yield break;
                }
                CertificateProfileListResult result = CertificateProfileListResult.FromResponse(response);
                yield return Page<TrustedSigningCertificateProfileData>.FromValues((IReadOnlyList<TrustedSigningCertificateProfileData>)result.Value, nextPage?.AbsoluteUri, response);
                nextPage = result.NextLink;
                if (nextPage == null)
                {
                    yield break;
                }
            }
        }

        /// <summary> Get next page. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="nextLink"> The next link to use for the next page of results. </param>
        private Response GetNextResponse(int? pageSizeHint, Uri nextLink)
        {
            HttpMessage message = nextLink != null ? _client.CreateNextGetByCodeSigningAccountRequest(nextLink, _subscriptionId, _resourceGroupName, _accountName, _context) : _client.CreateGetByCodeSigningAccountRequest(_subscriptionId, _resourceGroupName, _accountName, _context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("TrustedSigningCertificateProfileCollection.GetAll");
            scope.Start();
            try
            {
                return _client.Pipeline.ProcessMessage(message, _context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
