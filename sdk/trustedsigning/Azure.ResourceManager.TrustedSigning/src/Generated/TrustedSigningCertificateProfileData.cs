// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.TrustedSigning.Models;

namespace Azure.ResourceManager.TrustedSigning
{
    /// <summary> Certificate profile resource. </summary>
    public partial class TrustedSigningCertificateProfileData : ResourceData
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="TrustedSigningCertificateProfileData"/>. </summary>
        public TrustedSigningCertificateProfileData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="TrustedSigningCertificateProfileData"/>. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        internal TrustedSigningCertificateProfileData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, BinaryData> additionalBinaryDataProperties, CertificateProfileProperties properties) : base(id, name, resourceType, systemData)
        {
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
            Properties = properties;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        internal CertificateProfileProperties Properties { get; set; }

        /// <summary> Profile type of the certificate. </summary>
        public CertificateProfileType ProfileType
        {
            get
            {
                return Properties is null ? default : Properties.ProfileType;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new CertificateProfileProperties();
                }
                Properties.ProfileType = value;
            }
        }

        /// <summary> Whether to include STREET in the certificate subject name. </summary>
        public bool? IncludeStreetAddress
        {
            get
            {
                return Properties is null ? default : Properties.IncludeStreetAddress;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new CertificateProfileProperties();
                }
                Properties.IncludeStreetAddress = value.Value;
            }
        }

        /// <summary> Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types. </summary>
        public bool? IncludeCity
        {
            get
            {
                return Properties is null ? default : Properties.IncludeCity;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new CertificateProfileProperties();
                }
                Properties.IncludeCity = value.Value;
            }
        }

        /// <summary> Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types. </summary>
        public bool? IncludeState
        {
            get
            {
                return Properties is null ? default : Properties.IncludeState;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new CertificateProfileProperties();
                }
                Properties.IncludeState = value.Value;
            }
        }

        /// <summary> Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types. </summary>
        public bool? IncludeCountry
        {
            get
            {
                return Properties is null ? default : Properties.IncludeCountry;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new CertificateProfileProperties();
                }
                Properties.IncludeCountry = value.Value;
            }
        }

        /// <summary> Whether to include PC in the certificate subject name. </summary>
        public bool? IncludePostalCode
        {
            get
            {
                return Properties is null ? default : Properties.IncludePostalCode;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new CertificateProfileProperties();
                }
                Properties.IncludePostalCode = value.Value;
            }
        }

        /// <summary> Identity validation id used for the certificate subject name. </summary>
        public string IdentityValidationId
        {
            get
            {
                return Properties is null ? default : Properties.IdentityValidationId;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new CertificateProfileProperties();
                }
                Properties.IdentityValidationId = value;
            }
        }

        /// <summary> Status of the current operation on certificate profile. </summary>
        public TrustedSigningProvisioningState? ProvisioningState
        {
            get
            {
                return Properties is null ? default : Properties.ProvisioningState;
            }
        }

        /// <summary> Status of the certificate profile. </summary>
        public CertificateProfileStatus? Status
        {
            get
            {
                return Properties is null ? default : Properties.Status;
            }
        }

        /// <summary> List of renewed certificates. </summary>
        public IReadOnlyList<TrustedSigningCertificate> Certificates
        {
            get
            {
                return Properties is null ? default : Properties.Certificates;
            }
        }
    }
}
