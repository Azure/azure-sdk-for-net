// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.TrustedSigning.Models
{
    /// <summary> Status of the certificate. </summary>
    public readonly partial struct TrustedSigningCertificateStatus : IEquatable<TrustedSigningCertificateStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TrustedSigningCertificateStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TrustedSigningCertificateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string ExpiredValue = "Expired";
        private const string RevokedValue = "Revoked";

        /// <summary> The certificate is active. </summary>
        public static TrustedSigningCertificateStatus Active { get; } = new TrustedSigningCertificateStatus(ActiveValue);
        /// <summary> The certificate is expired. </summary>
        public static TrustedSigningCertificateStatus Expired { get; } = new TrustedSigningCertificateStatus(ExpiredValue);
        /// <summary> The certificate is revoked. </summary>
        public static TrustedSigningCertificateStatus Revoked { get; } = new TrustedSigningCertificateStatus(RevokedValue);
        /// <summary> Determines if two <see cref="TrustedSigningCertificateStatus"/> values are the same. </summary>
        public static bool operator ==(TrustedSigningCertificateStatus left, TrustedSigningCertificateStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TrustedSigningCertificateStatus"/> values are not the same. </summary>
        public static bool operator !=(TrustedSigningCertificateStatus left, TrustedSigningCertificateStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TrustedSigningCertificateStatus"/>. </summary>
        public static implicit operator TrustedSigningCertificateStatus(string value) => new TrustedSigningCertificateStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TrustedSigningCertificateStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TrustedSigningCertificateStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
