// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.TrustedSigning.Models
{
    /// <summary> Properties of the certificate. </summary>
    public partial class TrustedSigningCertificate
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="TrustedSigningCertificate"/>. </summary>
        internal TrustedSigningCertificate()
        {
        }

        /// <summary> Initializes a new instance of <see cref="TrustedSigningCertificate"/>. </summary>
        /// <param name="serialNumber"> Serial number of the certificate. </param>
        /// <param name="enhancedKeyUsage"> Enhanced key usage of the certificate. </param>
        /// <param name="subjectName"> Subject name of the certificate. </param>
        /// <param name="thumbprint"> Thumbprint of the certificate. </param>
        /// <param name="createOn"> Certificate created date. </param>
        /// <param name="expireOn"> Certificate expiry date. </param>
        /// <param name="status"> Status of the certificate. </param>
        /// <param name="revocation"> Revocations history of a certificate. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal TrustedSigningCertificate(string serialNumber, string enhancedKeyUsage, string subjectName, string thumbprint, DateTimeOffset? createOn, DateTimeOffset? expireOn, TrustedSigningCertificateStatus? status, Revocation revocation, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            SerialNumber = serialNumber;
            EnhancedKeyUsage = enhancedKeyUsage;
            SubjectName = subjectName;
            Thumbprint = thumbprint;
            CreateOn = createOn;
            ExpireOn = expireOn;
            Status = status;
            Revocation = revocation;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Serial number of the certificate. </summary>
        public string SerialNumber { get; }

        /// <summary> Enhanced key usage of the certificate. </summary>
        public string EnhancedKeyUsage { get; }

        /// <summary> Subject name of the certificate. </summary>
        public string SubjectName { get; }

        /// <summary> Thumbprint of the certificate. </summary>
        public string Thumbprint { get; }

        /// <summary> Certificate created date. </summary>
        public DateTimeOffset? CreateOn { get; }

        /// <summary> Certificate expiry date. </summary>
        public DateTimeOffset? ExpireOn { get; }

        /// <summary> Status of the certificate. </summary>
        public TrustedSigningCertificateStatus? Status { get; }

        /// <summary> Revocations history of a certificate. </summary>
        internal Revocation Revocation { get; }

        /// <summary> The timestamp when the revocation is requested. </summary>
        public DateTimeOffset? RequestedOn
        {
            get
            {
                return Revocation.RequestedOn;
            }
        }

        /// <summary> The timestamp when the revocation is effective. </summary>
        public DateTimeOffset? EffectiveOn
        {
            get
            {
                return Revocation.EffectiveOn;
            }
        }

        /// <summary> Reason for revocation. </summary>
        public string Reason
        {
            get
            {
                return Revocation.Reason;
            }
        }

        /// <summary> Remarks for the revocation. </summary>
        public string Remarks
        {
            get
            {
                return Revocation.Remarks;
            }
        }

        /// <summary> Status of the revocation. </summary>
        public CertificateRevocationStatus? RevocationStatus
        {
            get
            {
                return Revocation.RevocationStatus;
            }
        }

        /// <summary> Reason for the revocation failure. </summary>
        public string FailureReason
        {
            get
            {
                return Revocation.FailureReason;
            }
        }
    }
}
