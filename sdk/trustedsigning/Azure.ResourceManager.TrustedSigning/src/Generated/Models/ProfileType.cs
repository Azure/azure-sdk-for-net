// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.TrustedSigning.Models
{
    /// <summary> Type of the certificate. </summary>
    public readonly partial struct ProfileType : IEquatable<ProfileType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProfileType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProfileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PublicTrustValue = "PublicTrust";
        private const string PrivateTrustValue = "PrivateTrust";
        private const string PrivateTrustCIPolicyValue = "PrivateTrustCIPolicy";
        private const string VBSEnclaveValue = "VBSEnclave";
        private const string PublicTrustTestValue = "PublicTrustTest";

        /// <summary> Used for signing files which are distributed publicly. </summary>
        public static ProfileType PublicTrust { get; } = new ProfileType(PublicTrustValue);
        /// <summary> Used for signing files which are distributed internally within organization or group boundary. </summary>
        public static ProfileType PrivateTrust { get; } = new ProfileType(PrivateTrustValue);
        /// <summary> Used for signing CI policy files. </summary>
        public static ProfileType PrivateTrustCIPolicy { get; } = new ProfileType(PrivateTrustCIPolicyValue);
        /// <summary> Used for signing files which are run in secure vbs enclave. </summary>
        public static ProfileType VBSEnclave { get; } = new ProfileType(VBSEnclaveValue);
        /// <summary> Used for signing files for testing purpose. </summary>
        public static ProfileType PublicTrustTest { get; } = new ProfileType(PublicTrustTestValue);
        /// <summary> Determines if two <see cref="ProfileType"/> values are the same. </summary>
        public static bool operator ==(ProfileType left, ProfileType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProfileType"/> values are not the same. </summary>
        public static bool operator !=(ProfileType left, ProfileType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProfileType"/>. </summary>
        public static implicit operator ProfileType(string value) => new ProfileType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProfileType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProfileType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
