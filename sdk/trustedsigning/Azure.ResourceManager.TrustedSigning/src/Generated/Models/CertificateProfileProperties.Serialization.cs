// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.TrustedSigning;

namespace Azure.ResourceManager.TrustedSigning.Models
{
    /// <summary> Properties of the certificate profile. </summary>
    internal partial class CertificateProfileProperties : IJsonModel<CertificateProfileProperties>
    {
        /// <summary> Initializes a new instance of <see cref="CertificateProfileProperties"/> for deserialization. </summary>
        internal CertificateProfileProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<CertificateProfileProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CertificateProfileProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CertificateProfileProperties)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("profileType"u8);
            writer.WriteStringValue(ProfileType.ToString());
            if (Optional.IsDefined(IncludeStreetAddress))
            {
                writer.WritePropertyName("includeStreetAddress"u8);
                writer.WriteBooleanValue(IncludeStreetAddress.Value);
            }
            if (Optional.IsDefined(IncludeCity))
            {
                writer.WritePropertyName("includeCity"u8);
                writer.WriteBooleanValue(IncludeCity.Value);
            }
            if (Optional.IsDefined(IncludeState))
            {
                writer.WritePropertyName("includeState"u8);
                writer.WriteBooleanValue(IncludeState.Value);
            }
            if (Optional.IsDefined(IncludeCountry))
            {
                writer.WritePropertyName("includeCountry"u8);
                writer.WriteBooleanValue(IncludeCountry.Value);
            }
            if (Optional.IsDefined(IncludePostalCode))
            {
                writer.WritePropertyName("includePostalCode"u8);
                writer.WriteBooleanValue(IncludePostalCode.Value);
            }
            writer.WritePropertyName("identityValidationId"u8);
            writer.WriteStringValue(IdentityValidationId);
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Certificates))
            {
                writer.WritePropertyName("certificates"u8);
                writer.WriteStartArray();
                foreach (TrustedSigningCertificate item in Certificates)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        CertificateProfileProperties IJsonModel<CertificateProfileProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual CertificateProfileProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CertificateProfileProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CertificateProfileProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCertificateProfileProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static CertificateProfileProperties DeserializeCertificateProfileProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CertificateProfileType profileType = default;
            bool? includeStreetAddress = default;
            bool? includeCity = default;
            bool? includeState = default;
            bool? includeCountry = default;
            bool? includePostalCode = default;
            string identityValidationId = default;
            TrustedSigningProvisioningState? provisioningState = default;
            CertificateProfileStatus? status = default;
            IReadOnlyList<TrustedSigningCertificate> certificates = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("profileType"u8))
                {
                    profileType = new CertificateProfileType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("includeStreetAddress"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    includeStreetAddress = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("includeCity"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    includeCity = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("includeState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    includeState = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("includeCountry"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    includeCountry = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("includePostalCode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    includePostalCode = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("identityValidationId"u8))
                {
                    identityValidationId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new TrustedSigningProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("status"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new CertificateProfileStatus(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("certificates"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<TrustedSigningCertificate> array = new List<TrustedSigningCertificate>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(TrustedSigningCertificate.DeserializeTrustedSigningCertificate(item, options));
                    }
                    certificates = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new CertificateProfileProperties(
                profileType,
                includeStreetAddress,
                includeCity,
                includeState,
                includeCountry,
                includePostalCode,
                identityValidationId,
                provisioningState,
                status,
                certificates ?? new ChangeTrackingList<TrustedSigningCertificate>(),
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<CertificateProfileProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CertificateProfileProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerTrustedSigningContext.Default);
                default:
                    throw new FormatException($"The model {nameof(CertificateProfileProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        CertificateProfileProperties IPersistableModel<CertificateProfileProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual CertificateProfileProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CertificateProfileProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeCertificateProfileProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CertificateProfileProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<CertificateProfileProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
