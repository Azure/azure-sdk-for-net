// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.TrustedSigning.Models
{
    /// <summary> Defines the certificate revocation properties. </summary>
    public partial class RevokeCertificateContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RevokeCertificateContent"/>. </summary>
        /// <param name="serialNumber"> Serial number of the certificate. </param>
        /// <param name="thumbprint"> Thumbprint of the certificate. </param>
        /// <param name="effectiveOn"> The timestamp when the revocation is effective. </param>
        /// <param name="reason"> Reason for the revocation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serialNumber"/>, <paramref name="thumbprint"/> or <paramref name="reason"/> is null. </exception>
        public RevokeCertificateContent(string serialNumber, string thumbprint, DateTimeOffset effectiveOn, string reason)
        {
            Argument.AssertNotNull(serialNumber, nameof(serialNumber));
            Argument.AssertNotNull(thumbprint, nameof(thumbprint));
            Argument.AssertNotNull(reason, nameof(reason));

            SerialNumber = serialNumber;
            Thumbprint = thumbprint;
            EffectiveOn = effectiveOn;
            Reason = reason;
        }

        /// <summary> Initializes a new instance of <see cref="RevokeCertificateContent"/>. </summary>
        /// <param name="serialNumber"> Serial number of the certificate. </param>
        /// <param name="thumbprint"> Thumbprint of the certificate. </param>
        /// <param name="effectiveOn"> The timestamp when the revocation is effective. </param>
        /// <param name="reason"> Reason for the revocation. </param>
        /// <param name="remarks"> Remarks for the revocation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RevokeCertificateContent(string serialNumber, string thumbprint, DateTimeOffset effectiveOn, string reason, string remarks, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SerialNumber = serialNumber;
            Thumbprint = thumbprint;
            EffectiveOn = effectiveOn;
            Reason = reason;
            Remarks = remarks;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RevokeCertificateContent"/> for deserialization. </summary>
        internal RevokeCertificateContent()
        {
        }

        /// <summary> Serial number of the certificate. </summary>
        public string SerialNumber { get; }
        /// <summary> Thumbprint of the certificate. </summary>
        public string Thumbprint { get; }
        /// <summary> The timestamp when the revocation is effective. </summary>
        public DateTimeOffset EffectiveOn { get; }
        /// <summary> Reason for the revocation. </summary>
        public string Reason { get; }
        /// <summary> Remarks for the revocation. </summary>
        public string Remarks { get; set; }
    }
}
