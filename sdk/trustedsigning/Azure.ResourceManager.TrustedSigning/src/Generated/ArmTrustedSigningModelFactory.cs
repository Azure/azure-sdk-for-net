// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.TrustedSigning;

namespace Azure.ResourceManager.TrustedSigning.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class ArmTrustedSigningModelFactory
    {

        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="accountUri"> The URI of the trusted signing account which is used during signing files. </param>
        /// <param name="provisioningState"> Status of the current operation on trusted signing account. </param>
        /// <param name="skuName"> Name of the SKU. </param>
        /// <returns> A new <see cref="TrustedSigning.TrustedSigningAccountData"/> instance for mocking. </returns>
        public static TrustedSigningAccountData TrustedSigningAccountData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, Uri accountUri = default, TrustedSigningProvisioningState? provisioningState = default, TrustedSigningSkuName? skuName = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new TrustedSigningAccountData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                accountUri is null || provisioningState is null || skuName is null ? default : new CodeSigningAccountProperties(accountUri, new TrustedSigningAccountSku(skuName.Value, new Dictionary<string, BinaryData>()), provisioningState, new Dictionary<string, BinaryData>()));
        }

        /// <param name="tags"> Resource tags. </param>
        /// <param name="skuName"> Name of the SKU. </param>
        /// <returns> A new <see cref="Models.TrustedSigningAccountPatch"/> instance for mocking. </returns>
        public static TrustedSigningAccountPatch TrustedSigningAccountPatch(IDictionary<string, string> tags = default, TrustedSigningSkuName? skuName = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new TrustedSigningAccountPatch(tags, skuName is null ? default : new CodeSigningAccountPatchProperties(new AccountSkuPatch(skuName, new Dictionary<string, BinaryData>()), new Dictionary<string, BinaryData>()), additionalBinaryDataProperties: null);
        }

        /// <summary> The parameters used to check the availability of the trusted signing account name. </summary>
        /// <param name="resourceType"> The type of the resource, "Microsoft.CodeSigning/codeSigningAccounts". </param>
        /// <param name="name"> Trusted signing account name. </param>
        /// <returns> A new <see cref="Models.TrustedSigningAccountNameAvailabilityContent"/> instance for mocking. </returns>
        public static TrustedSigningAccountNameAvailabilityContent TrustedSigningAccountNameAvailabilityContent(ResourceType resourceType = default, string name = default)
        {
            return new TrustedSigningAccountNameAvailabilityContent(resourceType, name, additionalBinaryDataProperties: null);
        }

        /// <summary> The CheckNameAvailability operation response. </summary>
        /// <param name="isNameAvailable"> A boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used. </param>
        /// <param name="reason"> The reason that a trusted signing account name could not be used. The Reason element is only returned if nameAvailable is false. </param>
        /// <param name="message"> An error message explaining the Reason value in more detail. </param>
        /// <returns> A new <see cref="Models.TrustedSigningAccountNameAvailabilityResult"/> instance for mocking. </returns>
        public static TrustedSigningAccountNameAvailabilityResult TrustedSigningAccountNameAvailabilityResult(bool? isNameAvailable = default, TrustedSigningAccountNameUnavailabilityReason? reason = default, string message = default)
        {
            return new TrustedSigningAccountNameAvailabilityResult(isNameAvailable, reason, message, additionalBinaryDataProperties: null);
        }

        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="profileType"> Profile type of the certificate. </param>
        /// <param name="includeStreetAddress"> Whether to include STREET in the certificate subject name. </param>
        /// <param name="includeCity"> Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types. </param>
        /// <param name="includeState"> Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types. </param>
        /// <param name="includeCountry"> Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types. </param>
        /// <param name="includePostalCode"> Whether to include PC in the certificate subject name. </param>
        /// <param name="identityValidationId"> Identity validation id used for the certificate subject name. </param>
        /// <param name="provisioningState"> Status of the current operation on certificate profile. </param>
        /// <param name="status"> Status of the certificate profile. </param>
        /// <param name="certificates"> List of renewed certificates. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identityValidationId"/> is null. </exception>
        /// <returns> A new <see cref="TrustedSigning.TrustedSigningCertificateProfileData"/> instance for mocking. </returns>
        public static TrustedSigningCertificateProfileData TrustedSigningCertificateProfileData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, CertificateProfileType? profileType = default, bool? includeStreetAddress = default, bool? includeCity = default, bool? includeState = default, bool? includeCountry = default, bool? includePostalCode = default, string identityValidationId = default, TrustedSigningProvisioningState? provisioningState = default, CertificateProfileStatus? status = default, IReadOnlyList<TrustedSigningCertificate> certificates = default)
        {
            return new TrustedSigningCertificateProfileData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                profileType is null || includeStreetAddress is null || includeCity is null || includeState is null || includeCountry is null || includePostalCode is null || identityValidationId is null || provisioningState is null || status is null || certificates is null ? default : new CertificateProfileProperties(
                    profileType.Value,
                    includeStreetAddress,
                    includeCity,
                    includeState,
                    includeCountry,
                    includePostalCode,
                    identityValidationId,
                    provisioningState,
                    status,
                    certificates,
                    new Dictionary<string, BinaryData>()));
        }

        /// <param name="serialNumber"> Serial number of the certificate. </param>
        /// <param name="enhancedKeyUsage"> Enhanced key usage of the certificate. </param>
        /// <param name="subjectName"> Subject name of the certificate. </param>
        /// <param name="thumbprint"> Thumbprint of the certificate. </param>
        /// <param name="createOn"> Certificate created date. </param>
        /// <param name="expireOn"> Certificate expiry date. </param>
        /// <param name="status"> Status of the certificate. </param>
        /// <param name="requestedOn"> The timestamp when the revocation is requested. </param>
        /// <param name="effectiveOn"> The timestamp when the revocation is effective. </param>
        /// <param name="reason"> Reason for revocation. </param>
        /// <param name="remarks"> Remarks for the revocation. </param>
        /// <param name="revocationStatus"> Status of the revocation. </param>
        /// <param name="failureReason"> Reason for the revocation failure. </param>
        /// <returns> A new <see cref="Models.TrustedSigningCertificate"/> instance for mocking. </returns>
        public static TrustedSigningCertificate TrustedSigningCertificate(string serialNumber = default, string enhancedKeyUsage = default, string subjectName = default, string thumbprint = default, DateTimeOffset? createOn = default, DateTimeOffset? expireOn = default, TrustedSigningCertificateStatus? status = default, DateTimeOffset? requestedOn = default, DateTimeOffset? effectiveOn = default, string reason = default, string remarks = default, CertificateRevocationStatus? revocationStatus = default, string failureReason = default)
        {
            return new TrustedSigningCertificate(
                serialNumber,
                enhancedKeyUsage,
                subjectName,
                thumbprint,
                createOn,
                expireOn,
                status,
                requestedOn is null || effectiveOn is null || reason is null || remarks is null || revocationStatus is null || failureReason is null ? default : new Revocation(
                    requestedOn,
                    effectiveOn,
                    reason,
                    remarks,
                    revocationStatus,
                    failureReason,
                    new Dictionary<string, BinaryData>()),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Defines the certificate revocation properties. </summary>
        /// <param name="serialNumber"> Serial number of the certificate. </param>
        /// <param name="thumbprint"> Thumbprint of the certificate. </param>
        /// <param name="effectiveOn"> The timestamp when the revocation is effective. </param>
        /// <param name="reason"> Reason for the revocation. </param>
        /// <param name="remarks"> Remarks for the revocation. </param>
        /// <returns> A new <see cref="Models.RevokeCertificateContent"/> instance for mocking. </returns>
        public static RevokeCertificateContent RevokeCertificateContent(string serialNumber = default, string thumbprint = default, DateTimeOffset effectiveOn = default, string reason = default, string remarks = default)
        {
            return new RevokeCertificateContent(
                serialNumber,
                thumbprint,
                effectiveOn,
                reason,
                remarks,
                additionalBinaryDataProperties: null);
        }
    }
}
