// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.Signing
{
    /// <summary> Provides status details for long running operations. </summary>
    public partial class OperationStatusSignResultError
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="OperationStatusSignResultError"/>. </summary>
        /// <param name="id"> The unique ID of the operation. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        internal OperationStatusSignResultError(string id, OperationState status)
        {
            Argument.AssertNotNull(id, nameof(id));

            Id = id;
            Status = status;
        }

        /// <summary> Initializes a new instance of <see cref="OperationStatusSignResultError"/>. </summary>
        /// <param name="id"> The unique ID of the operation. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="error"> Error object that describes the error when status is "Failed". </param>
        /// <param name="result"> The result of the operation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OperationStatusSignResultError(string id, OperationState status, ResponseError error, SignResult result, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Status = status;
            Error = error;
            Result = result;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="OperationStatusSignResultError"/> for deserialization. </summary>
        internal OperationStatusSignResultError()
        {
        }

        /// <summary> The unique ID of the operation. </summary>
        public string Id { get; }
        /// <summary> The status of the operation. </summary>
        public OperationState Status { get; }
        /// <summary> Error object that describes the error when status is "Failed". </summary>
        public ResponseError Error { get; }
        /// <summary> The result of the operation. </summary>
        public SignResult Result { get; }
    }
}
