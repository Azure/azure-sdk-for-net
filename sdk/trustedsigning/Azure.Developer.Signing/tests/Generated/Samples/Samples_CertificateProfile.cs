// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.Signing.Samples
{
    public partial class Samples_CertificateProfile
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSigningStatus_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = client.GetSigningStatus("<accountName>", "<certificateProfile>", "<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSigningStatus_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = await client.GetSigningStatusAsync("<accountName>", "<certificateProfile>", "<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSigningStatus_ShortVersion_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<OperationStatusSignResultError> response = client.GetSigningStatus("<accountName>", "<certificateProfile>", "<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSigningStatus_ShortVersion_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<OperationStatusSignResultError> response = await client.GetSigningStatusAsync("<accountName>", "<certificateProfile>", "<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSigningStatus_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = client.GetSigningStatus("<accountName>", "<certificateProfile>", "<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("signature").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("signingCertificate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSigningStatus_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = await client.GetSigningStatusAsync("<accountName>", "<certificateProfile>", "<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("signature").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("signingCertificate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSigningStatus_AllParameters_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<OperationStatusSignResultError> response = client.GetSigningStatus("<accountName>", "<certificateProfile>", "<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSigningStatus_AllParameters_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<OperationStatusSignResultError> response = await client.GetSigningStatusAsync("<accountName>", "<certificateProfile>", "<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSignRootCertificate_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = client.GetSignRootCertificate("<accountName>", "<certificateProfile>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSignRootCertificate_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = await client.GetSignRootCertificateAsync("<accountName>", "<certificateProfile>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSignRootCertificate_ShortVersion_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<BinaryData> response = client.GetSignRootCertificate("<accountName>", "<certificateProfile>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSignRootCertificate_ShortVersion_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<BinaryData> response = await client.GetSignRootCertificateAsync("<accountName>", "<certificateProfile>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSignRootCertificate_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = client.GetSignRootCertificate("<accountName>", "<certificateProfile>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSignRootCertificate_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = await client.GetSignRootCertificateAsync("<accountName>", "<certificateProfile>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSignRootCertificate_AllParameters_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<BinaryData> response = client.GetSignRootCertificate("<accountName>", "<certificateProfile>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSignRootCertificate_AllParameters_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<BinaryData> response = await client.GetSignRootCertificateAsync("<accountName>", "<certificateProfile>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExtendedKeyUsage_GetExtendedKeyUsages_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            foreach (BinaryData item in client.GetExtendedKeyUsages("<accountName>", "<certificateProfile>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("eku").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExtendedKeyUsage_GetExtendedKeyUsages_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            await foreach (BinaryData item in client.GetExtendedKeyUsagesAsync("<accountName>", "<certificateProfile>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("eku").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExtendedKeyUsage_GetExtendedKeyUsages_ShortVersion_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            foreach (ExtendedKeyUsage item in client.GetExtendedKeyUsages("<accountName>", "<certificateProfile>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExtendedKeyUsage_GetExtendedKeyUsages_ShortVersion_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            await foreach (ExtendedKeyUsage item in client.GetExtendedKeyUsagesAsync("<accountName>", "<certificateProfile>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExtendedKeyUsage_GetExtendedKeyUsages_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            foreach (BinaryData item in client.GetExtendedKeyUsages("<accountName>", "<certificateProfile>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("eku").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExtendedKeyUsage_GetExtendedKeyUsages_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            await foreach (BinaryData item in client.GetExtendedKeyUsagesAsync("<accountName>", "<certificateProfile>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("eku").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExtendedKeyUsage_GetExtendedKeyUsages_AllParameters_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            foreach (ExtendedKeyUsage item in client.GetExtendedKeyUsages("<accountName>", "<certificateProfile>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExtendedKeyUsage_GetExtendedKeyUsages_AllParameters_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            await foreach (ExtendedKeyUsage item in client.GetExtendedKeyUsagesAsync("<accountName>", "<certificateProfile>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_Sign_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                signatureAlgorithm = "RS256",
                digest = new object(),
            });
            Operation<BinaryData> operation = client.Sign(WaitUntil.Completed, "<accountName>", "<certificateProfile>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_Sign_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                signatureAlgorithm = "RS256",
                digest = new object(),
            });
            Operation<BinaryData> operation = await client.SignAsync(WaitUntil.Completed, "<accountName>", "<certificateProfile>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_Sign_ShortVersion_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Operation<SignResult> operation = client.Sign(WaitUntil.Completed, "<accountName>", "<certificateProfile>", SignatureAlgorithm.RS256, BinaryData.FromObjectAsJson(new object()));
            SignResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_Sign_ShortVersion_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Operation<SignResult> operation = await client.SignAsync(WaitUntil.Completed, "<accountName>", "<certificateProfile>", SignatureAlgorithm.RS256, BinaryData.FromObjectAsJson(new object()));
            SignResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_Sign_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                signatureAlgorithm = "RS256",
                digest = new object(),
                fileHashList = new object[]
            {
new object()
            },
                authenticodeHashList = new object[]
            {
new object()
            },
            });
            Operation<BinaryData> operation = client.Sign(WaitUntil.Completed, "<accountName>", "<certificateProfile>", content, clientVersion: "<clientVersion>", xCorrelationId: "<xCorrelationId>");
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("signature").ToString());
            Console.WriteLine(result.GetProperty("signingCertificate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_Sign_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                signatureAlgorithm = "RS256",
                digest = new object(),
                fileHashList = new object[]
            {
new object()
            },
                authenticodeHashList = new object[]
            {
new object()
            },
            });
            Operation<BinaryData> operation = await client.SignAsync(WaitUntil.Completed, "<accountName>", "<certificateProfile>", content, clientVersion: "<clientVersion>", xCorrelationId: "<xCorrelationId>");
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("signature").ToString());
            Console.WriteLine(result.GetProperty("signingCertificate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_Sign_AllParameters_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Operation<SignResult> operation = client.Sign(WaitUntil.Completed, "<accountName>", "<certificateProfile>", SignatureAlgorithm.RS256, BinaryData.FromObjectAsJson(new object()), fileHashList: new BinaryData[]
            {
BinaryData.FromObjectAsJson(new object())
            }, authenticodeHashList: new BinaryData[]
            {
BinaryData.FromObjectAsJson(new object())
            }, clientVersion: "<clientVersion>", xCorrelationId: "<xCorrelationId>");
            SignResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_Sign_AllParameters_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new SigningClient("<region>", credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Operation<SignResult> operation = await client.SignAsync(WaitUntil.Completed, "<accountName>", "<certificateProfile>", SignatureAlgorithm.RS256, BinaryData.FromObjectAsJson(new object()), fileHashList: new BinaryData[]
            {
BinaryData.FromObjectAsJson(new object())
            }, authenticodeHashList: new BinaryData[]
            {
BinaryData.FromObjectAsJson(new object())
            }, clientVersion: "<clientVersion>", xCorrelationId: "<xCorrelationId>");
            SignResult responseData = operation.Value;
        }
    }
}
