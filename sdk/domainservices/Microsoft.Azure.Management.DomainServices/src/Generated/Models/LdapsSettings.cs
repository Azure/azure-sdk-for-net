// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DomainServices.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Secure LDAP Settings
    /// </summary>
    public partial class LdapsSettings
    {
        /// <summary>
        /// Initializes a new instance of the LdapsSettings class.
        /// </summary>
        public LdapsSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LdapsSettings class.
        /// </summary>
        /// <param name="ldaps">A flag to determine whether or not Secure LDAP
        /// is enabled or disabled. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="pfxCertificate">The certificate required to configure
        /// Secure LDAP. The parameter passed here should be a base64encoded
        /// representation of the certificate pfx file.</param>
        /// <param name="pfxCertificatePassword">The password to decrypt the
        /// provided Secure LDAP certificate pfx file.</param>
        /// <param name="publicCertificate">Public certificate used to
        /// configure secure ldap.</param>
        /// <param name="certificateThumbprint">Thumbprint of configure ldaps
        /// certificate.</param>
        /// <param name="certificateNotAfter">NotAfter DateTime of configure
        /// ldaps certificate.</param>
        /// <param name="externalAccess">A flag to determine whether or not
        /// Secure LDAP access over the internet is enabled or disabled.
        /// Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="externalAccessIpAddress">External access ip
        /// address.</param>
        public LdapsSettings(string ldaps = default(string), string pfxCertificate = default(string), string pfxCertificatePassword = default(string), string publicCertificate = default(string), string certificateThumbprint = default(string), System.DateTime? certificateNotAfter = default(System.DateTime?), string externalAccess = default(string), string externalAccessIpAddress = default(string))
        {
            Ldaps = ldaps;
            PfxCertificate = pfxCertificate;
            PfxCertificatePassword = pfxCertificatePassword;
            PublicCertificate = publicCertificate;
            CertificateThumbprint = certificateThumbprint;
            CertificateNotAfter = certificateNotAfter;
            ExternalAccess = externalAccess;
            ExternalAccessIpAddress = externalAccessIpAddress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a flag to determine whether or not Secure LDAP is
        /// enabled or disabled. Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "ldaps")]
        public string Ldaps { get; set; }

        /// <summary>
        /// Gets or sets the certificate required to configure Secure LDAP. The
        /// parameter passed here should be a base64encoded representation of
        /// the certificate pfx file.
        /// </summary>
        [JsonProperty(PropertyName = "pfxCertificate")]
        public string PfxCertificate { get; set; }

        /// <summary>
        /// Gets or sets the password to decrypt the provided Secure LDAP
        /// certificate pfx file.
        /// </summary>
        [JsonProperty(PropertyName = "pfxCertificatePassword")]
        public string PfxCertificatePassword { get; set; }

        /// <summary>
        /// Gets public certificate used to configure secure ldap.
        /// </summary>
        [JsonProperty(PropertyName = "publicCertificate")]
        public string PublicCertificate { get; private set; }

        /// <summary>
        /// Gets thumbprint of configure ldaps certificate.
        /// </summary>
        [JsonProperty(PropertyName = "certificateThumbprint")]
        public string CertificateThumbprint { get; private set; }

        /// <summary>
        /// Gets notAfter DateTime of configure ldaps certificate.
        /// </summary>
        [JsonProperty(PropertyName = "certificateNotAfter")]
        public System.DateTime? CertificateNotAfter { get; private set; }

        /// <summary>
        /// Gets or sets a flag to determine whether or not Secure LDAP access
        /// over the internet is enabled or disabled. Possible values include:
        /// 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "externalAccess")]
        public string ExternalAccess { get; set; }

        /// <summary>
        /// Gets external access ip address.
        /// </summary>
        [JsonProperty(PropertyName = "externalAccessIpAddress")]
        public string ExternalAccessIpAddress { get; private set; }

    }
}
