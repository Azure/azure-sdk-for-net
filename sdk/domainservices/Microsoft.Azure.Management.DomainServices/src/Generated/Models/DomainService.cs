// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DomainServices.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Domain service.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DomainService : Resource
    {
        /// <summary>
        /// Initializes a new instance of the DomainService class.
        /// </summary>
        public DomainService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DomainService class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Resource location</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="etag">Resource etag</param>
        /// <param name="systemData">The system meta data relating to this
        /// resource.</param>
        /// <param name="version">Data Model Version</param>
        /// <param name="tenantId">Azure Active Directory Tenant Id</param>
        /// <param name="domainName">The name of the Azure domain that the user
        /// would like to deploy Domain Services to.</param>
        /// <param name="deploymentId">Deployment Id</param>
        /// <param name="syncOwner">SyncOwner ReplicaSet Id</param>
        /// <param name="replicaSets">List of ReplicaSets</param>
        /// <param name="ldapsSettings">Secure LDAP Settings</param>
        /// <param name="resourceForestSettings">Resource Forest
        /// Settings</param>
        /// <param name="domainSecuritySettings">DomainSecurity
        /// Settings</param>
        /// <param name="domainConfigurationType">Domain Configuration
        /// Type</param>
        /// <param name="sku">Sku Type</param>
        /// <param name="filteredSync">Enabled or Disabled flag to turn on
        /// Group-based filtered sync. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="notificationSettings">Notification Settings</param>
        /// <param name="migrationProperties">Migration Properties</param>
        /// <param name="provisioningState">the current deployment or
        /// provisioning state, which only appears in the response.</param>
        /// <param name="configDiagnostics">Configuration diagnostics data
        /// containing latest execution from client.</param>
        public DomainService(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string etag = default(string), SystemData systemData = default(SystemData), int? version = default(int?), string tenantId = default(string), string domainName = default(string), string deploymentId = default(string), string syncOwner = default(string), IList<ReplicaSet> replicaSets = default(IList<ReplicaSet>), LdapsSettings ldapsSettings = default(LdapsSettings), ResourceForestSettings resourceForestSettings = default(ResourceForestSettings), DomainSecuritySettings domainSecuritySettings = default(DomainSecuritySettings), string domainConfigurationType = default(string), string sku = default(string), string filteredSync = default(string), NotificationSettings notificationSettings = default(NotificationSettings), MigrationProperties migrationProperties = default(MigrationProperties), string provisioningState = default(string), ConfigDiagnostics configDiagnostics = default(ConfigDiagnostics))
            : base(id, name, type, location, tags, etag, systemData)
        {
            Version = version;
            TenantId = tenantId;
            DomainName = domainName;
            DeploymentId = deploymentId;
            SyncOwner = syncOwner;
            ReplicaSets = replicaSets;
            LdapsSettings = ldapsSettings;
            ResourceForestSettings = resourceForestSettings;
            DomainSecuritySettings = domainSecuritySettings;
            DomainConfigurationType = domainConfigurationType;
            Sku = sku;
            FilteredSync = filteredSync;
            NotificationSettings = notificationSettings;
            MigrationProperties = migrationProperties;
            ProvisioningState = provisioningState;
            ConfigDiagnostics = configDiagnostics;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets data Model Version
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public int? Version { get; private set; }

        /// <summary>
        /// Gets azure Active Directory Tenant Id
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantId")]
        public string TenantId { get; private set; }

        /// <summary>
        /// Gets or sets the name of the Azure domain that the user would like
        /// to deploy Domain Services to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.domainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets deployment Id
        /// </summary>
        [JsonProperty(PropertyName = "properties.deploymentId")]
        public string DeploymentId { get; private set; }

        /// <summary>
        /// Gets syncOwner ReplicaSet Id
        /// </summary>
        [JsonProperty(PropertyName = "properties.syncOwner")]
        public string SyncOwner { get; private set; }

        /// <summary>
        /// Gets or sets list of ReplicaSets
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicaSets")]
        public IList<ReplicaSet> ReplicaSets { get; set; }

        /// <summary>
        /// Gets or sets secure LDAP Settings
        /// </summary>
        [JsonProperty(PropertyName = "properties.ldapsSettings")]
        public LdapsSettings LdapsSettings { get; set; }

        /// <summary>
        /// Gets or sets resource Forest Settings
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceForestSettings")]
        public ResourceForestSettings ResourceForestSettings { get; set; }

        /// <summary>
        /// Gets or sets domainSecurity Settings
        /// </summary>
        [JsonProperty(PropertyName = "properties.domainSecuritySettings")]
        public DomainSecuritySettings DomainSecuritySettings { get; set; }

        /// <summary>
        /// Gets or sets domain Configuration Type
        /// </summary>
        [JsonProperty(PropertyName = "properties.domainConfigurationType")]
        public string DomainConfigurationType { get; set; }

        /// <summary>
        /// Gets or sets sku Type
        /// </summary>
        [JsonProperty(PropertyName = "properties.sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or sets enabled or Disabled flag to turn on Group-based
        /// filtered sync. Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.filteredSync")]
        public string FilteredSync { get; set; }

        /// <summary>
        /// Gets or sets notification Settings
        /// </summary>
        [JsonProperty(PropertyName = "properties.notificationSettings")]
        public NotificationSettings NotificationSettings { get; set; }

        /// <summary>
        /// Gets migration Properties
        /// </summary>
        [JsonProperty(PropertyName = "properties.migrationProperties")]
        public MigrationProperties MigrationProperties { get; private set; }

        /// <summary>
        /// Gets the current deployment or provisioning state, which only
        /// appears in the response.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets configuration diagnostics data containing latest
        /// execution from client.
        /// </summary>
        [JsonProperty(PropertyName = "properties.configDiagnostics")]
        public ConfigDiagnostics ConfigDiagnostics { get; set; }

    }
}
