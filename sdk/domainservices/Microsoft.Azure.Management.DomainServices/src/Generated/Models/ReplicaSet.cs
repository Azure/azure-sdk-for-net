// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DomainServices.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Replica Set Definition
    /// </summary>
    public partial class ReplicaSet
    {
        /// <summary>
        /// Initializes a new instance of the ReplicaSet class.
        /// </summary>
        public ReplicaSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReplicaSet class.
        /// </summary>
        /// <param name="replicaSetId">ReplicaSet Id</param>
        /// <param name="location">Virtual network location</param>
        /// <param name="vnetSiteId">Virtual network site id</param>
        /// <param name="subnetId">The name of the virtual network that Domain
        /// Services will be deployed on. The id of the subnet that Domain
        /// Services will be deployed on.
        /// /virtualNetwork/vnetName/subnets/subnetName.</param>
        /// <param name="domainControllerIpAddress">List of Domain Controller
        /// IP Address</param>
        /// <param name="externalAccessIpAddress">External access ip
        /// address.</param>
        /// <param name="serviceStatus">Status of Domain Service
        /// instance</param>
        /// <param name="healthLastEvaluated">Last domain evaluation run
        /// DateTime</param>
        /// <param name="healthMonitors">List of Domain Health Monitors</param>
        /// <param name="healthAlerts">List of Domain Health Alerts</param>
        public ReplicaSet(string replicaSetId = default(string), string location = default(string), string vnetSiteId = default(string), string subnetId = default(string), IList<string> domainControllerIpAddress = default(IList<string>), string externalAccessIpAddress = default(string), string serviceStatus = default(string), System.DateTime? healthLastEvaluated = default(System.DateTime?), IList<HealthMonitor> healthMonitors = default(IList<HealthMonitor>), IList<HealthAlert> healthAlerts = default(IList<HealthAlert>))
        {
            ReplicaSetId = replicaSetId;
            Location = location;
            VnetSiteId = vnetSiteId;
            SubnetId = subnetId;
            DomainControllerIpAddress = domainControllerIpAddress;
            ExternalAccessIpAddress = externalAccessIpAddress;
            ServiceStatus = serviceStatus;
            HealthLastEvaluated = healthLastEvaluated;
            HealthMonitors = healthMonitors;
            HealthAlerts = healthAlerts;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets replicaSet Id
        /// </summary>
        [JsonProperty(PropertyName = "replicaSetId")]
        public string ReplicaSetId { get; private set; }

        /// <summary>
        /// Gets or sets virtual network location
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets virtual network site id
        /// </summary>
        [JsonProperty(PropertyName = "vnetSiteId")]
        public string VnetSiteId { get; private set; }

        /// <summary>
        /// Gets or sets the name of the virtual network that Domain Services
        /// will be deployed on. The id of the subnet that Domain Services will
        /// be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
        /// </summary>
        [JsonProperty(PropertyName = "subnetId")]
        public string SubnetId { get; set; }

        /// <summary>
        /// Gets list of Domain Controller IP Address
        /// </summary>
        [JsonProperty(PropertyName = "domainControllerIpAddress")]
        public IList<string> DomainControllerIpAddress { get; private set; }

        /// <summary>
        /// Gets external access ip address.
        /// </summary>
        [JsonProperty(PropertyName = "externalAccessIpAddress")]
        public string ExternalAccessIpAddress { get; private set; }

        /// <summary>
        /// Gets status of Domain Service instance
        /// </summary>
        [JsonProperty(PropertyName = "serviceStatus")]
        public string ServiceStatus { get; private set; }

        /// <summary>
        /// Gets last domain evaluation run DateTime
        /// </summary>
        [JsonConverter(typeof(DateTimeRfc1123JsonConverter))]
        [JsonProperty(PropertyName = "healthLastEvaluated")]
        public System.DateTime? HealthLastEvaluated { get; private set; }

        /// <summary>
        /// Gets list of Domain Health Monitors
        /// </summary>
        [JsonProperty(PropertyName = "healthMonitors")]
        public IList<HealthMonitor> HealthMonitors { get; private set; }

        /// <summary>
        /// Gets list of Domain Health Alerts
        /// </summary>
        [JsonProperty(PropertyName = "healthAlerts")]
        public IList<HealthAlert> HealthAlerts { get; private set; }

    }
}
