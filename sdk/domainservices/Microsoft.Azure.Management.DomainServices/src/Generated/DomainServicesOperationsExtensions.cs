// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DomainServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DomainServicesOperations.
    /// </summary>
    public static partial class DomainServicesOperationsExtensions
    {
            /// <summary>
            /// List Domain Services in Subscription
            /// </summary>
            /// <remarks>
            /// The List Domain Services in Subscription operation lists all the domain
            /// services available under the given subscription (and across all resource
            /// groups within that subscription).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<DomainService> List(this IDomainServicesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Domain Services in Subscription
            /// </summary>
            /// <remarks>
            /// The List Domain Services in Subscription operation lists all the domain
            /// services available under the given subscription (and across all resource
            /// groups within that subscription).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DomainService>> ListAsync(this IDomainServicesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Domain Services in Resource Group
            /// </summary>
            /// <remarks>
            /// The List Domain Services in Resource Group operation lists all the domain
            /// services available under the given resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            public static IPage<DomainService> ListByResourceGroup(this IDomainServicesOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Domain Services in Resource Group
            /// </summary>
            /// <remarks>
            /// The List Domain Services in Resource Group operation lists all the domain
            /// services available under the given resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DomainService>> ListByResourceGroupAsync(this IDomainServicesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or Update Domain Service (PUT Resource)
            /// </summary>
            /// <remarks>
            /// The Create Domain Service operation creates a new domain service with the
            /// specified parameters. If the specific service already exists, then any
            /// patchable properties will be updated and any immutable properties will
            /// remain unchanged.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='domainService'>
            /// Properties supplied to the Create or Update a Domain Service operation.
            /// </param>
            public static DomainService CreateOrUpdate(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName, DomainService domainService)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, domainServiceName, domainService).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or Update Domain Service (PUT Resource)
            /// </summary>
            /// <remarks>
            /// The Create Domain Service operation creates a new domain service with the
            /// specified parameters. If the specific service already exists, then any
            /// patchable properties will be updated and any immutable properties will
            /// remain unchanged.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='domainService'>
            /// Properties supplied to the Create or Update a Domain Service operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DomainService> CreateOrUpdateAsync(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName, DomainService domainService, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, domainServiceName, domainService, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Domain Service
            /// </summary>
            /// <remarks>
            /// The Get Domain Service operation retrieves a json representation of the
            /// Domain Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            public static DomainService Get(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName)
            {
                return operations.GetAsync(resourceGroupName, domainServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Domain Service
            /// </summary>
            /// <remarks>
            /// The Get Domain Service operation retrieves a json representation of the
            /// Domain Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DomainService> GetAsync(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, domainServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Domain Service (DELETE Resource)
            /// </summary>
            /// <remarks>
            /// The Delete Domain Service operation deletes an existing Domain Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            public static void Delete(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName)
            {
                operations.DeleteAsync(resourceGroupName, domainServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Domain Service (DELETE Resource)
            /// </summary>
            /// <remarks>
            /// The Delete Domain Service operation deletes an existing Domain Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, domainServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update Domain Service (PATCH Resource)
            /// </summary>
            /// <remarks>
            /// The Update Domain Service operation can be used to update the existing
            /// deployment. The update call only supports the properties listed in the
            /// PATCH body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='domainService'>
            /// Properties supplied to the Update a Domain Service operation.
            /// </param>
            public static DomainService Update(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName, DomainService domainService)
            {
                return operations.UpdateAsync(resourceGroupName, domainServiceName, domainService).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Domain Service (PATCH Resource)
            /// </summary>
            /// <remarks>
            /// The Update Domain Service operation can be used to update the existing
            /// deployment. The update call only supports the properties listed in the
            /// PATCH body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='domainService'>
            /// Properties supplied to the Update a Domain Service operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DomainService> UpdateAsync(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName, DomainService domainService, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, domainServiceName, domainService, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or Update Domain Service (PUT Resource)
            /// </summary>
            /// <remarks>
            /// The Create Domain Service operation creates a new domain service with the
            /// specified parameters. If the specific service already exists, then any
            /// patchable properties will be updated and any immutable properties will
            /// remain unchanged.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='domainService'>
            /// Properties supplied to the Create or Update a Domain Service operation.
            /// </param>
            public static DomainService BeginCreateOrUpdate(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName, DomainService domainService)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, domainServiceName, domainService).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or Update Domain Service (PUT Resource)
            /// </summary>
            /// <remarks>
            /// The Create Domain Service operation creates a new domain service with the
            /// specified parameters. If the specific service already exists, then any
            /// patchable properties will be updated and any immutable properties will
            /// remain unchanged.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='domainService'>
            /// Properties supplied to the Create or Update a Domain Service operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DomainService> BeginCreateOrUpdateAsync(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName, DomainService domainService, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, domainServiceName, domainService, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Domain Service (DELETE Resource)
            /// </summary>
            /// <remarks>
            /// The Delete Domain Service operation deletes an existing Domain Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            public static void BeginDelete(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName)
            {
                operations.BeginDeleteAsync(resourceGroupName, domainServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Domain Service (DELETE Resource)
            /// </summary>
            /// <remarks>
            /// The Delete Domain Service operation deletes an existing Domain Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, domainServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update Domain Service (PATCH Resource)
            /// </summary>
            /// <remarks>
            /// The Update Domain Service operation can be used to update the existing
            /// deployment. The update call only supports the properties listed in the
            /// PATCH body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='domainService'>
            /// Properties supplied to the Update a Domain Service operation.
            /// </param>
            public static DomainService BeginUpdate(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName, DomainService domainService)
            {
                return operations.BeginUpdateAsync(resourceGroupName, domainServiceName, domainService).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Domain Service (PATCH Resource)
            /// </summary>
            /// <remarks>
            /// The Update Domain Service operation can be used to update the existing
            /// deployment. The update call only supports the properties listed in the
            /// PATCH body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='domainService'>
            /// Properties supplied to the Update a Domain Service operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DomainService> BeginUpdateAsync(this IDomainServicesOperations operations, string resourceGroupName, string domainServiceName, DomainService domainService, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, domainServiceName, domainService, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Domain Services in Subscription
            /// </summary>
            /// <remarks>
            /// The List Domain Services in Subscription operation lists all the domain
            /// services available under the given subscription (and across all resource
            /// groups within that subscription).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DomainService> ListNext(this IDomainServicesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Domain Services in Subscription
            /// </summary>
            /// <remarks>
            /// The List Domain Services in Subscription operation lists all the domain
            /// services available under the given subscription (and across all resource
            /// groups within that subscription).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DomainService>> ListNextAsync(this IDomainServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Domain Services in Resource Group
            /// </summary>
            /// <remarks>
            /// The List Domain Services in Resource Group operation lists all the domain
            /// services available under the given resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DomainService> ListByResourceGroupNext(this IDomainServicesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Domain Services in Resource Group
            /// </summary>
            /// <remarks>
            /// The List Domain Services in Resource Group operation lists all the domain
            /// services available under the given resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DomainService>> ListByResourceGroupNextAsync(this IDomainServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
