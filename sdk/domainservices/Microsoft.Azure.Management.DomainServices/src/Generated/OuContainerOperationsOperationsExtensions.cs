// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DomainServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OuContainerOperationsOperations.
    /// </summary>
    public static partial class OuContainerOperationsOperationsExtensions
    {
            /// <summary>
            /// List of OuContainers in DomainService instance
            /// </summary>
            /// <remarks>
            /// The List of OuContainers in DomainService instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            public static IPage<OuContainer> List(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName)
            {
                return operations.ListAsync(resourceGroupName, domainServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of OuContainers in DomainService instance
            /// </summary>
            /// <remarks>
            /// The List of OuContainers in DomainService instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OuContainer>> ListAsync(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, domainServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get particular OuContainer in DomainService instance
            /// </summary>
            /// <remarks>
            /// Get OuContainer in DomainService instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            public static OuContainer Get(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName)
            {
                return operations.GetAsync(resourceGroupName, domainServiceName, ouContainerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get particular OuContainer in DomainService instance
            /// </summary>
            /// <remarks>
            /// Get OuContainer in DomainService instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OuContainer> GetAsync(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, domainServiceName, ouContainerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create OuContainer
            /// </summary>
            /// <remarks>
            /// The Create OuContainer operation creates a new OuContainer under the
            /// specified Domain Service instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            /// <param name='containerAccount'>
            /// Container Account Description.
            /// </param>
            public static OuContainer Create(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName, ContainerAccount containerAccount)
            {
                return operations.CreateAsync(resourceGroupName, domainServiceName, ouContainerName, containerAccount).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create OuContainer
            /// </summary>
            /// <remarks>
            /// The Create OuContainer operation creates a new OuContainer under the
            /// specified Domain Service instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            /// <param name='containerAccount'>
            /// Container Account Description.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OuContainer> CreateAsync(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName, ContainerAccount containerAccount, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, domainServiceName, ouContainerName, containerAccount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete OuContainer
            /// </summary>
            /// <remarks>
            /// The Delete OuContainer operation deletes specified OuContainer.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            public static void Delete(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName)
            {
                operations.DeleteAsync(resourceGroupName, domainServiceName, ouContainerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete OuContainer
            /// </summary>
            /// <remarks>
            /// The Delete OuContainer operation deletes specified OuContainer.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, domainServiceName, ouContainerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update OuContainer (PATCH Resource)
            /// </summary>
            /// <remarks>
            /// The Update OuContainer operation can be used to update the existing
            /// OuContainers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            /// <param name='containerAccount'>
            /// Container Account Description.
            /// </param>
            public static OuContainer Update(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName, ContainerAccount containerAccount)
            {
                return operations.UpdateAsync(resourceGroupName, domainServiceName, ouContainerName, containerAccount).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update OuContainer (PATCH Resource)
            /// </summary>
            /// <remarks>
            /// The Update OuContainer operation can be used to update the existing
            /// OuContainers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            /// <param name='containerAccount'>
            /// Container Account Description.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OuContainer> UpdateAsync(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName, ContainerAccount containerAccount, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, domainServiceName, ouContainerName, containerAccount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create OuContainer
            /// </summary>
            /// <remarks>
            /// The Create OuContainer operation creates a new OuContainer under the
            /// specified Domain Service instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            /// <param name='containerAccount'>
            /// Container Account Description.
            /// </param>
            public static OuContainer BeginCreate(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName, ContainerAccount containerAccount)
            {
                return operations.BeginCreateAsync(resourceGroupName, domainServiceName, ouContainerName, containerAccount).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create OuContainer
            /// </summary>
            /// <remarks>
            /// The Create OuContainer operation creates a new OuContainer under the
            /// specified Domain Service instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            /// <param name='containerAccount'>
            /// Container Account Description.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OuContainer> BeginCreateAsync(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName, ContainerAccount containerAccount, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, domainServiceName, ouContainerName, containerAccount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete OuContainer
            /// </summary>
            /// <remarks>
            /// The Delete OuContainer operation deletes specified OuContainer.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            public static void BeginDelete(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName)
            {
                operations.BeginDeleteAsync(resourceGroupName, domainServiceName, ouContainerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete OuContainer
            /// </summary>
            /// <remarks>
            /// The Delete OuContainer operation deletes specified OuContainer.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, domainServiceName, ouContainerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update OuContainer (PATCH Resource)
            /// </summary>
            /// <remarks>
            /// The Update OuContainer operation can be used to update the existing
            /// OuContainers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            /// <param name='containerAccount'>
            /// Container Account Description.
            /// </param>
            public static OuContainer BeginUpdate(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName, ContainerAccount containerAccount)
            {
                return operations.BeginUpdateAsync(resourceGroupName, domainServiceName, ouContainerName, containerAccount).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update OuContainer (PATCH Resource)
            /// </summary>
            /// <remarks>
            /// The Update OuContainer operation can be used to update the existing
            /// OuContainers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='domainServiceName'>
            /// The name of the domain service.
            /// </param>
            /// <param name='ouContainerName'>
            /// The name of the OuContainer.
            /// </param>
            /// <param name='containerAccount'>
            /// Container Account Description.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OuContainer> BeginUpdateAsync(this IOuContainerOperationsOperations operations, string resourceGroupName, string domainServiceName, string ouContainerName, ContainerAccount containerAccount, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, domainServiceName, ouContainerName, containerAccount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of OuContainers in DomainService instance
            /// </summary>
            /// <remarks>
            /// The List of OuContainers in DomainService instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OuContainer> ListNext(this IOuContainerOperationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of OuContainers in DomainService instance
            /// </summary>
            /// <remarks>
            /// The List of OuContainers in DomainService instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OuContainer>> ListNextAsync(this IOuContainerOperationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
