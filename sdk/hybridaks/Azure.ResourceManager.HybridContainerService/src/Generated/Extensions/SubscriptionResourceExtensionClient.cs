// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.HybridContainerService
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _provisionedClustersResponseProvisionedClustersClientDiagnostics;
        private ProvisionedClustersRestOperations _provisionedClustersResponseProvisionedClustersRestClient;
        private ClientDiagnostics _virtualNetworkvirtualNetworksClientDiagnostics;
        private VirtualNetworksRestOperations _virtualNetworkvirtualNetworksRestClient;
        private ClientDiagnostics _storageSpacestorageSpacesClientDiagnostics;
        private StorageSpacesRestOperations _storageSpacestorageSpacesRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ProvisionedClustersResponseProvisionedClustersClientDiagnostics => _provisionedClustersResponseProvisionedClustersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.HybridContainerService", ProvisionedClustersResponseResource.ResourceType.Namespace, Diagnostics);
        private ProvisionedClustersRestOperations ProvisionedClustersResponseProvisionedClustersRestClient => _provisionedClustersResponseProvisionedClustersRestClient ??= new ProvisionedClustersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ProvisionedClustersResponseResource.ResourceType));
        private ClientDiagnostics VirtualNetworkvirtualNetworksClientDiagnostics => _virtualNetworkvirtualNetworksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.HybridContainerService", VirtualNetworkResource.ResourceType.Namespace, Diagnostics);
        private VirtualNetworksRestOperations VirtualNetworkvirtualNetworksRestClient => _virtualNetworkvirtualNetworksRestClient ??= new VirtualNetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(VirtualNetworkResource.ResourceType));
        private ClientDiagnostics StorageSpacestorageSpacesClientDiagnostics => _storageSpacestorageSpacesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.HybridContainerService", StorageSpaceResource.ResourceType.Namespace, Diagnostics);
        private StorageSpacesRestOperations StorageSpacestorageSpacesRestClient => _storageSpacestorageSpacesRestClient ??= new StorageSpacesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(StorageSpaceResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets the Hybrid AKS provisioned cluster in a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HybridContainerService/provisionedClusters
        /// Operation Id: ProvisionedClusters_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProvisionedClustersResponseResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ProvisionedClustersResponseResource> GetProvisionedClustersResponsesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ProvisionedClustersResponseResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProvisionedClustersResponseProvisionedClustersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetProvisionedClustersResponses");
                scope.Start();
                try
                {
                    var response = await ProvisionedClustersResponseProvisionedClustersRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ProvisionedClustersResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ProvisionedClustersResponseResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProvisionedClustersResponseProvisionedClustersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetProvisionedClustersResponses");
                scope.Start();
                try
                {
                    var response = await ProvisionedClustersResponseProvisionedClustersRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ProvisionedClustersResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the Hybrid AKS provisioned cluster in a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HybridContainerService/provisionedClusters
        /// Operation Id: ProvisionedClusters_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProvisionedClustersResponseResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ProvisionedClustersResponseResource> GetProvisionedClustersResponses(CancellationToken cancellationToken = default)
        {
            Page<ProvisionedClustersResponseResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProvisionedClustersResponseProvisionedClustersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetProvisionedClustersResponses");
                scope.Start();
                try
                {
                    var response = ProvisionedClustersResponseProvisionedClustersRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ProvisionedClustersResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ProvisionedClustersResponseResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProvisionedClustersResponseProvisionedClustersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetProvisionedClustersResponses");
                scope.Start();
                try
                {
                    var response = ProvisionedClustersResponseProvisionedClustersRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ProvisionedClustersResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists the Hybrid AKS virtual networks by subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HybridContainerService/virtualNetworks
        /// Operation Id: virtualNetworks_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualNetworkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VirtualNetworkResource> GetVirtualNetworksAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<VirtualNetworkResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VirtualNetworkvirtualNetworksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetVirtualNetworks");
                scope.Start();
                try
                {
                    var response = await VirtualNetworkvirtualNetworksRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<VirtualNetworkResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VirtualNetworkvirtualNetworksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetVirtualNetworks");
                scope.Start();
                try
                {
                    var response = await VirtualNetworkvirtualNetworksRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists the Hybrid AKS virtual networks by subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HybridContainerService/virtualNetworks
        /// Operation Id: virtualNetworks_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualNetworkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VirtualNetworkResource> GetVirtualNetworks(CancellationToken cancellationToken = default)
        {
            Page<VirtualNetworkResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = VirtualNetworkvirtualNetworksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetVirtualNetworks");
                scope.Start();
                try
                {
                    var response = VirtualNetworkvirtualNetworksRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<VirtualNetworkResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = VirtualNetworkvirtualNetworksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetVirtualNetworks");
                scope.Start();
                try
                {
                    var response = VirtualNetworkvirtualNetworksRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VirtualNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List the Hybrid AKS storage object by subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HybridContainerService/storageSpaces
        /// Operation Id: storageSpaces_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="StorageSpaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<StorageSpaceResource> GetStorageSpacesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<StorageSpaceResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = StorageSpacestorageSpacesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetStorageSpaces");
                scope.Start();
                try
                {
                    var response = await StorageSpacestorageSpacesRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageSpaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<StorageSpaceResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = StorageSpacestorageSpacesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetStorageSpaces");
                scope.Start();
                try
                {
                    var response = await StorageSpacestorageSpacesRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageSpaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List the Hybrid AKS storage object by subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HybridContainerService/storageSpaces
        /// Operation Id: storageSpaces_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="StorageSpaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<StorageSpaceResource> GetStorageSpaces(CancellationToken cancellationToken = default)
        {
            Page<StorageSpaceResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = StorageSpacestorageSpacesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetStorageSpaces");
                scope.Start();
                try
                {
                    var response = StorageSpacestorageSpacesRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageSpaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<StorageSpaceResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = StorageSpacestorageSpacesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetStorageSpaces");
                scope.Start();
                try
                {
                    var response = StorageSpacestorageSpacesRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageSpaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
