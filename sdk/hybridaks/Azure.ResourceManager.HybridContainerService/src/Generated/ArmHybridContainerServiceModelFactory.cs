// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.HybridContainerService;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HybridContainerService.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmHybridContainerServiceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="HybridContainerService.ProvisionedClusterData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity for the Provisioned cluster. Current supported identity types: None, SystemAssigned. </param>
        /// <param name="properties"></param>
        /// <param name="extendedLocation"></param>
        /// <returns> A new <see cref="HybridContainerService.ProvisionedClusterData"/> instance for mocking. </returns>
        public static ProvisionedClusterData ProvisionedClusterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, ProvisionedClustersResponseProperties properties = null, ProvisionedClustersResponseExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProvisionedClusterData(id, name, resourceType, systemData, tags, location, identity, properties, extendedLocation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProvisionedClustersResponseProperties"/>. </summary>
        /// <param name="aadProfile"> AAD profile for the provisioned cluster. </param>
        /// <param name="windowsProfile"> WindowsProfile - Profile for Windows VMs in the Provisioned Cluster. </param>
        /// <param name="httpProxyConfig"> HttpProxyConfig - Configurations for provisioning the cluster with HTTP proxy servers. </param>
        /// <param name="enableRbac"> EnableRBAC - Whether to enable Kubernetes Role-Based Access Control. </param>
        /// <param name="linuxProfile"> LinuxProfile - The profile for Linux VMs in the Provisioned Cluster. </param>
        /// <param name="featuresArcAgentProfile"> Additional features specs like Arc Agent Onboarding. </param>
        /// <param name="addonProfiles"> AddonProfiles - Profile of managed cluster add-on. </param>
        /// <param name="controlPlane"> ControlPlane - ControlPlane Configuration. </param>
        /// <param name="kubernetesVersion"> KubernetesVersion - Version of Kubernetes specified when creating the managed cluster. </param>
        /// <param name="networkProfile"> NetworkProfile - Profile of network configuration. </param>
        /// <param name="nodeResourceGroup"> NodeResourceGroup - Name of the resource group containing agent pool nodes. </param>
        /// <param name="agentPoolProfiles"> The agent pools of the cluster. </param>
        /// <param name="cloudProviderProfile"> The underlying cloud infra provider properties. </param>
        /// <param name="provisioningState"></param>
        /// <param name="status"> HybridAKSClusterStatus defines the observed state of HybridAKSCluster. </param>
        /// <returns> A new <see cref="Models.ProvisionedClustersResponseProperties"/> instance for mocking. </returns>
        public static ProvisionedClustersResponseProperties ProvisionedClustersResponseProperties(AADProfileResponse aadProfile = null, WindowsProfileResponse windowsProfile = null, HttpProxyConfigResponse httpProxyConfig = null, bool? enableRbac = null, LinuxProfileProperties linuxProfile = null, ArcAgentProfile featuresArcAgentProfile = null, IDictionary<string, AddonProfiles> addonProfiles = null, ControlPlaneProfile controlPlane = null, string kubernetesVersion = null, NetworkProfile networkProfile = null, string nodeResourceGroup = null, IEnumerable<NamedAgentPoolProfile> agentPoolProfiles = null, CloudProviderProfile cloudProviderProfile = null, ProvisioningState? provisioningState = null, ProvisionedClustersCommonPropertiesStatus status = null)
        {
            addonProfiles ??= new Dictionary<string, AddonProfiles>();
            agentPoolProfiles ??= new List<NamedAgentPoolProfile>();

            return new ProvisionedClustersResponseProperties(aadProfile, windowsProfile, httpProxyConfig, enableRbac, linuxProfile, featuresArcAgentProfile != null ? new ProvisionedClustersCommonPropertiesFeatures(featuresArcAgentProfile) : null, addonProfiles, controlPlane, kubernetesVersion, networkProfile, nodeResourceGroup, agentPoolProfiles?.ToList(), cloudProviderProfile, provisioningState, status);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProvisionedClustersCommonPropertiesStatus"/>. </summary>
        /// <param name="arcAgentStatus"> Additional features status like Arc Agent Onboarding. </param>
        /// <param name="addonStatus"> AddonStatus - Status of Addons. </param>
        /// <param name="errorMessage"> ErrorMessage - Error messages during creation of cluster. </param>
        /// <param name="provisioningStatus"> Contains Provisioning errors. </param>
        /// <returns> A new <see cref="Models.ProvisionedClustersCommonPropertiesStatus"/> instance for mocking. </returns>
        public static ProvisionedClustersCommonPropertiesStatus ProvisionedClustersCommonPropertiesStatus(ArcAgentStatus arcAgentStatus = null, IReadOnlyDictionary<string, AddonStatus> addonStatus = null, string errorMessage = null, ProvisionedClustersCommonPropertiesStatusProvisioningStatus provisioningStatus = null)
        {
            addonStatus ??= new Dictionary<string, AddonStatus>();

            return new ProvisionedClustersCommonPropertiesStatus(arcAgentStatus != null ? new ProvisionedClustersCommonPropertiesStatusFeaturesStatus(arcAgentStatus) : null, addonStatus, errorMessage, provisioningStatus);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArcAgentStatus"/>. </summary>
        /// <param name="deploymentState"> Observed deployment state of the Arc Agents on the target cluster. Possible values include: 'pending', 'provisioning', 'provisioned', 'deleting', 'failed', 'upgrading'. </param>
        /// <param name="errorMessage"> Error messages while onboarding/upgrading/uninstalling the Arc agents. </param>
        /// <param name="onboardingPublicKey"> Onboarding public key for provisioning the Managed identity for the HybridAKS cluster. Will be used to create the hybridIdentityMetadata proxy resource and will not be persisted. </param>
        /// <param name="agentVersion"> Version of the Arc agents currently running on the Provisioned cluster resource. </param>
        /// <param name="coreCount"> Number of CPU cores present in the Provisioned cluster resource. </param>
        /// <param name="managedIdentityCertificateExpirationOn"> ManagedIdentity certificate expiration time (ValidUntil). </param>
        /// <param name="lastConnectivityOn"> Last connected timestamp of the Provisioned cluster resource. </param>
        /// <returns> A new <see cref="Models.ArcAgentStatus"/> instance for mocking. </returns>
        public static ArcAgentStatus ArcAgentStatus(DeploymentState? deploymentState = null, string errorMessage = null, string onboardingPublicKey = null, string agentVersion = null, long? coreCount = null, DateTimeOffset? managedIdentityCertificateExpirationOn = null, DateTimeOffset? lastConnectivityOn = null)
        {
            return new ArcAgentStatus(deploymentState, errorMessage, onboardingPublicKey, agentVersion, coreCount, managedIdentityCertificateExpirationOn, lastConnectivityOn);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AddonStatus"/>. </summary>
        /// <param name="errorMessage"> ErrorMessage will be set in the event that there is a terminal problem reconciling the AddOn and will contain a more verbose string suitable for logging and human consumption. </param>
        /// <param name="phase"> Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc. </param>
        /// <param name="ready"></param>
        /// <returns> A new <see cref="Models.AddonStatus"/> instance for mocking. </returns>
        public static AddonStatus AddonStatus(string errorMessage = null, string phase = null, bool? ready = null)
        {
            return new AddonStatus(errorMessage, phase, ready);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProvisionedClustersCommonPropertiesStatusProvisioningStatus"/>. </summary>
        /// <param name="error"></param>
        /// <param name="operationId"></param>
        /// <param name="phase"> Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc. </param>
        /// <param name="status"></param>
        /// <returns> A new <see cref="Models.ProvisionedClustersCommonPropertiesStatusProvisioningStatus"/> instance for mocking. </returns>
        public static ProvisionedClustersCommonPropertiesStatusProvisioningStatus ProvisionedClustersCommonPropertiesStatusProvisioningStatus(ProvisionedClustersCommonPropertiesStatusProvisioningStatusError error = null, string operationId = null, string phase = null, string status = null)
        {
            return new ProvisionedClustersCommonPropertiesStatusProvisioningStatus(error, operationId, phase, status);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProvisionedClustersCommonPropertiesStatusProvisioningStatusError"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <returns> A new <see cref="Models.ProvisionedClustersCommonPropertiesStatusProvisioningStatusError"/> instance for mocking. </returns>
        public static ProvisionedClustersCommonPropertiesStatusProvisioningStatusError ProvisionedClustersCommonPropertiesStatusProvisioningStatusError(string code = null, string message = null)
        {
            return new ProvisionedClustersCommonPropertiesStatusProvisioningStatusError(code, message);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProvisionedClusterCreateOrUpdateContent"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity for the Provisioned cluster. Current supported identity types: None, SystemAssigned. </param>
        /// <param name="properties"> All properties of the provisioned cluster. </param>
        /// <param name="extendedLocation"></param>
        /// <returns> A new <see cref="Models.ProvisionedClusterCreateOrUpdateContent"/> instance for mocking. </returns>
        public static ProvisionedClusterCreateOrUpdateContent ProvisionedClusterCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, ProvisionedClustersAllProperties properties = null, ProvisionedClustersExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProvisionedClusterCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, identity, properties, extendedLocation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProvisionedClustersAllProperties"/>. </summary>
        /// <param name="aadProfile"> AAD profile for the provisioned cluster. </param>
        /// <param name="windowsProfile"> WindowsProfile - Profile for Windows VMs in the Provisioned Cluster. </param>
        /// <param name="httpProxyConfig"> HttpProxyConfig - Configurations for provisioning the cluster with HTTP proxy servers. </param>
        /// <param name="enableRbac"> EnableRBAC - Whether to enable Kubernetes Role-Based Access Control. </param>
        /// <param name="linuxProfile"> LinuxProfile - The profile for Linux VMs in the Provisioned Cluster. </param>
        /// <param name="featuresArcAgentProfile"> Additional features specs like Arc Agent Onboarding. </param>
        /// <param name="addonProfiles"> AddonProfiles - Profile of managed cluster add-on. </param>
        /// <param name="controlPlane"> ControlPlane - ControlPlane Configuration. </param>
        /// <param name="kubernetesVersion"> KubernetesVersion - Version of Kubernetes specified when creating the managed cluster. </param>
        /// <param name="networkProfile"> NetworkProfile - Profile of network configuration. </param>
        /// <param name="nodeResourceGroup"> NodeResourceGroup - Name of the resource group containing agent pool nodes. </param>
        /// <param name="agentPoolProfiles"> The agent pools of the cluster. </param>
        /// <param name="cloudProviderProfile"> The underlying cloud infra provider properties. </param>
        /// <param name="provisioningState"></param>
        /// <param name="status"> HybridAKSClusterStatus defines the observed state of HybridAKSCluster. </param>
        /// <returns> A new <see cref="Models.ProvisionedClustersAllProperties"/> instance for mocking. </returns>
        public static ProvisionedClustersAllProperties ProvisionedClustersAllProperties(AADProfile aadProfile = null, WindowsProfile windowsProfile = null, HttpProxyConfig httpProxyConfig = null, bool? enableRbac = null, LinuxProfileProperties linuxProfile = null, ArcAgentProfile featuresArcAgentProfile = null, IDictionary<string, AddonProfiles> addonProfiles = null, ControlPlaneProfile controlPlane = null, string kubernetesVersion = null, NetworkProfile networkProfile = null, string nodeResourceGroup = null, IEnumerable<NamedAgentPoolProfile> agentPoolProfiles = null, CloudProviderProfile cloudProviderProfile = null, ProvisioningState? provisioningState = null, ProvisionedClustersCommonPropertiesStatus status = null)
        {
            addonProfiles ??= new Dictionary<string, AddonProfiles>();
            agentPoolProfiles ??= new List<NamedAgentPoolProfile>();

            return new ProvisionedClustersAllProperties(aadProfile, windowsProfile, httpProxyConfig, enableRbac, linuxProfile, featuresArcAgentProfile != null ? new ProvisionedClustersCommonPropertiesFeatures(featuresArcAgentProfile) : null, addonProfiles, controlPlane, kubernetesVersion, networkProfile, nodeResourceGroup, agentPoolProfiles?.ToList(), cloudProviderProfile, provisioningState, status);
        }

        /// <summary> Initializes a new instance of <see cref="HybridContainerService.ProvisionedClusterUpgradeProfileData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"></param>
        /// <param name="controlPlaneProfile"> The list of available upgrade versions for the control plane. </param>
        /// <param name="agentPoolProfiles"> The list of available upgrade versions for agent pools. </param>
        /// <returns> A new <see cref="HybridContainerService.ProvisionedClusterUpgradeProfileData"/> instance for mocking. </returns>
        public static ProvisionedClusterUpgradeProfileData ProvisionedClusterUpgradeProfileData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provisioningState = null, ProvisionedClusterPoolUpgradeProfile controlPlaneProfile = null, IEnumerable<ProvisionedClusterPoolUpgradeProfile> agentPoolProfiles = null)
        {
            agentPoolProfiles ??= new List<ProvisionedClusterPoolUpgradeProfile>();

            return new ProvisionedClusterUpgradeProfileData(id, name, resourceType, systemData, provisioningState, controlPlaneProfile, agentPoolProfiles?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProvisionedClusterPoolUpgradeProfile"/>. </summary>
        /// <param name="kubernetesVersion"> The Kubernetes version (major.minor.patch). </param>
        /// <param name="name"> The Agent Pool name. </param>
        /// <param name="osType"> OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'. </param>
        /// <param name="upgrades"> List of orchestrator types and versions available for upgrade. </param>
        /// <returns> A new <see cref="Models.ProvisionedClusterPoolUpgradeProfile"/> instance for mocking. </returns>
        public static ProvisionedClusterPoolUpgradeProfile ProvisionedClusterPoolUpgradeProfile(string kubernetesVersion = null, string name = null, OSType? osType = null, IEnumerable<ProvisionedClusterPoolUpgradeProfileProperties> upgrades = null)
        {
            upgrades ??= new List<ProvisionedClusterPoolUpgradeProfileProperties>();

            return new ProvisionedClusterPoolUpgradeProfile(kubernetesVersion, name, osType, upgrades?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProvisionedClusterPoolUpgradeProfileProperties"/>. </summary>
        /// <param name="kubernetesVersion"> The Kubernetes version (major.minor.patch). </param>
        /// <param name="isPreview"> Whether the Kubernetes version is currently in preview. </param>
        /// <returns> A new <see cref="Models.ProvisionedClusterPoolUpgradeProfileProperties"/> instance for mocking. </returns>
        public static ProvisionedClusterPoolUpgradeProfileProperties ProvisionedClusterPoolUpgradeProfileProperties(string kubernetesVersion = null, bool? isPreview = null)
        {
            return new ProvisionedClusterPoolUpgradeProfileProperties(kubernetesVersion, isPreview);
        }

        /// <summary> Initializes a new instance of <see cref="HybridContainerService.HybridIdentityMetadataData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="resourceUid"> Unique id of the parent provisioned cluster resource. </param>
        /// <param name="publicKey"> Onboarding public key for provisioning the Managed identity for the HybridAKS cluster. </param>
        /// <param name="identity"> The identity of the provisioned cluster. Current supported identity types: None, SystemAssigned. </param>
        /// <param name="provisioningState"> provisioning state of the hybridIdentityMetadata resource. </param>
        /// <returns> A new <see cref="HybridContainerService.HybridIdentityMetadataData"/> instance for mocking. </returns>
        public static HybridIdentityMetadataData HybridIdentityMetadataData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string resourceUid = null, string publicKey = null, ManagedServiceIdentity identity = null, string provisioningState = null)
        {
            return new HybridIdentityMetadataData(id, name, resourceType, systemData, resourceUid, publicKey, identity, provisioningState);
        }

        /// <summary> Initializes a new instance of <see cref="HybridContainerService.HybridContainerServiceAgentPoolData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"></param>
        /// <param name="count"> Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. </param>
        /// <param name="availabilityZones"> AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones. </param>
        /// <param name="maxCount"> The maximum number of nodes for auto-scaling. </param>
        /// <param name="maxPods"> The maximum number of pods that can run on a node. </param>
        /// <param name="minCount"> The minimum number of nodes for auto-scaling. </param>
        /// <param name="mode"> Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'. </param>
        /// <param name="nodeLabels"> NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool. </param>
        /// <param name="nodeTaints"> NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule. </param>
        /// <param name="osType"> OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'. </param>
        /// <param name="nodeImageVersion"> The version of node image. </param>
        /// <param name="vmSize"> VmSize - The size of the agent pool VMs. </param>
        /// <param name="cloudProviderProfile"> The underlying cloud infra provider properties. </param>
        /// <param name="provisioningState"></param>
        /// <param name="status"> HybridAKSNodePoolStatus defines the observed state of HybridAKSNodePool. </param>
        /// <returns> A new <see cref="HybridContainerService.HybridContainerServiceAgentPoolData"/> instance for mocking. </returns>
        public static HybridContainerServiceAgentPoolData HybridContainerServiceAgentPoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, AgentPoolExtendedLocation extendedLocation = null, int? count = null, IEnumerable<string> availabilityZones = null, int? maxCount = null, int? maxPods = null, int? minCount = null, Mode? mode = null, IDictionary<string, string> nodeLabels = null, IEnumerable<string> nodeTaints = null, OSType? osType = null, string nodeImageVersion = null, string vmSize = null, CloudProviderProfile cloudProviderProfile = null, AgentPoolProvisioningState? provisioningState = null, AgentPoolProvisioningStatusStatus status = null)
        {
            tags ??= new Dictionary<string, string>();
            availabilityZones ??= new List<string>();
            nodeLabels ??= new Dictionary<string, string>();
            nodeTaints ??= new List<string>();

            return new HybridContainerServiceAgentPoolData(id, name, resourceType, systemData, tags, location, extendedLocation, count, availabilityZones?.ToList(), maxCount, maxPods, minCount, mode, nodeLabels, nodeTaints?.ToList(), osType, nodeImageVersion, vmSize, cloudProviderProfile, provisioningState, status);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OrchestratorVersionProfileListResult"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="orchestrators"> Profile of the orchestrator versions. </param>
        /// <returns> A new <see cref="Models.OrchestratorVersionProfileListResult"/> instance for mocking. </returns>
        public static OrchestratorVersionProfileListResult OrchestratorVersionProfileListResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<OrchestratorVersionProfile> orchestrators = null)
        {
            orchestrators ??= new List<OrchestratorVersionProfile>();

            return new OrchestratorVersionProfileListResult(id, name, resourceType, systemData, orchestrators?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.OrchestratorVersionProfile"/>. </summary>
        /// <param name="isPreview"> Whether Kubernetes version is currently in preview. </param>
        /// <param name="default"> Installed by default if version is not specified. </param>
        /// <param name="orchestratorType"> Orchestrator type. </param>
        /// <param name="orchestratorVersion"> Orchestrator version major.minor.patch, for example 1.21.9. </param>
        /// <param name="upgrades"> The list of available upgrade versions. </param>
        /// <returns> A new <see cref="Models.OrchestratorVersionProfile"/> instance for mocking. </returns>
        public static OrchestratorVersionProfile OrchestratorVersionProfile(bool? isPreview = null, bool? @default = null, string orchestratorType = null, string orchestratorVersion = null, IEnumerable<OrchestratorProfile> upgrades = null)
        {
            upgrades ??= new List<OrchestratorProfile>();

            return new OrchestratorVersionProfile(isPreview, @default, orchestratorType, orchestratorVersion, upgrades?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.OrchestratorProfile"/>. </summary>
        /// <param name="isPreview"> Whether Kubernetes version is currently in preview. </param>
        /// <param name="orchestratorType"> Orchestrator type. </param>
        /// <param name="orchestratorVersion"> Orchestrator version (major, minor, patch). </param>
        /// <returns> A new <see cref="Models.OrchestratorProfile"/> instance for mocking. </returns>
        public static OrchestratorProfile OrchestratorProfile(bool? isPreview = null, string orchestratorType = null, string orchestratorVersion = null)
        {
            return new OrchestratorProfile(isPreview, orchestratorType, orchestratorVersion);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VmSkuListResult"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="vmSKUs"> Supported VM SKUs. </param>
        /// <returns> A new <see cref="Models.VmSkuListResult"/> instance for mocking. </returns>
        public static VmSkuListResult VmSkuListResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<string> vmSKUs = null)
        {
            vmSKUs ??= new List<string>();

            return new VmSkuListResult(id, name, resourceType, systemData, vmSKUs?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="HybridContainerService.StorageSpaceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> HybridAKSStorageSpec defines the desired state of HybridAKSStorage. </param>
        /// <param name="extendedLocation"></param>
        /// <returns> A new <see cref="HybridContainerService.StorageSpaceData"/> instance for mocking. </returns>
        public static StorageSpaceData StorageSpaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, StorageSpacesProperties properties = null, StorageSpacesExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new StorageSpaceData(id, name, resourceType, systemData, tags, location, properties, extendedLocation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StorageSpacesProperties"/>. </summary>
        /// <param name="hciStorageProfile"></param>
        /// <param name="vmwareStorageProfile"></param>
        /// <param name="provisioningState"></param>
        /// <param name="provisioningStatus"> HybridAKSStorageStatus defines the observed state of HybridAKSStorage. </param>
        /// <returns> A new <see cref="Models.StorageSpacesProperties"/> instance for mocking. </returns>
        public static StorageSpacesProperties StorageSpacesProperties(StorageSpacesPropertiesHciStorageProfile hciStorageProfile = null, StorageSpacesPropertiesVmwareStorageProfile vmwareStorageProfile = null, ProvisioningState? provisioningState = null, StorageSpacesPropertiesStatusProvisioningStatus provisioningStatus = null)
        {
            return new StorageSpacesProperties(hciStorageProfile, vmwareStorageProfile, provisioningState, provisioningStatus != null ? new StorageSpacesPropertiesStatus(provisioningStatus) : null);
        }

        /// <summary> Initializes a new instance of <see cref="HybridContainerService.HybridContainerServiceVirtualNetworkData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork. </param>
        /// <param name="extendedLocation"></param>
        /// <returns> A new <see cref="HybridContainerService.HybridContainerServiceVirtualNetworkData"/> instance for mocking. </returns>
        public static HybridContainerServiceVirtualNetworkData HybridContainerServiceVirtualNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VirtualNetworksProperties properties = null, VirtualNetworksExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new HybridContainerServiceVirtualNetworkData(id, name, resourceType, systemData, tags, location, properties, extendedLocation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualNetworksProperties"/>. </summary>
        /// <param name="infraVnetProfile"></param>
        /// <param name="vipPool"> Virtual IP Pool for Kubernetes. </param>
        /// <param name="vmipPool"> IP Pool for Virtual Machines. </param>
        /// <param name="dhcpServers"> Address of the DHCP servers associated with the network. </param>
        /// <param name="dnsServers"> Address of the DNS servers associated with the network. </param>
        /// <param name="gateway"> Address of the Gateway associated with the network. </param>
        /// <param name="ipAddressPrefix"> IP Address Prefix of the network. </param>
        /// <param name="vlanId"> VLAN Id used by the network. </param>
        /// <param name="provisioningState"></param>
        /// <param name="provisioningStatus"> HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork. </param>
        /// <returns> A new <see cref="Models.VirtualNetworksProperties"/> instance for mocking. </returns>
        public static VirtualNetworksProperties VirtualNetworksProperties(VirtualNetworksPropertiesInfraVnetProfile infraVnetProfile = null, IEnumerable<VirtualNetworksPropertiesVipPoolItem> vipPool = null, IEnumerable<VirtualNetworksPropertiesVmipPoolItem> vmipPool = null, IEnumerable<string> dhcpServers = null, IEnumerable<string> dnsServers = null, string gateway = null, string ipAddressPrefix = null, string vlanId = null, ProvisioningState? provisioningState = null, VirtualNetworksPropertiesStatusProvisioningStatus provisioningStatus = null)
        {
            vipPool ??= new List<VirtualNetworksPropertiesVipPoolItem>();
            vmipPool ??= new List<VirtualNetworksPropertiesVmipPoolItem>();
            dhcpServers ??= new List<string>();
            dnsServers ??= new List<string>();

            return new VirtualNetworksProperties(infraVnetProfile, vipPool?.ToList(), vmipPool?.ToList(), dhcpServers?.ToList(), dnsServers?.ToList(), gateway, ipAddressPrefix, vlanId, provisioningState, provisioningStatus != null ? new VirtualNetworksPropertiesStatus(provisioningStatus) : null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualNetworksPropertiesStatusProvisioningStatus"/>. </summary>
        /// <param name="error"></param>
        /// <param name="operationId"></param>
        /// <param name="phase"> Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc. </param>
        /// <param name="status"></param>
        /// <returns> A new <see cref="Models.VirtualNetworksPropertiesStatusProvisioningStatus"/> instance for mocking. </returns>
        public static VirtualNetworksPropertiesStatusProvisioningStatus VirtualNetworksPropertiesStatusProvisioningStatus(VirtualNetworksPropertiesStatusProvisioningStatusError error = null, string operationId = null, string phase = null, string status = null)
        {
            return new VirtualNetworksPropertiesStatusProvisioningStatus(error, operationId, phase, status);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualNetworksPropertiesStatusProvisioningStatusError"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <returns> A new <see cref="Models.VirtualNetworksPropertiesStatusProvisioningStatusError"/> instance for mocking. </returns>
        public static VirtualNetworksPropertiesStatusProvisioningStatusError VirtualNetworksPropertiesStatusProvisioningStatusError(string code = null, string message = null)
        {
            return new VirtualNetworksPropertiesStatusProvisioningStatusError(code, message);
        }
    }
}
