// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HybridContainerService.Models
{
    public partial class VirtualNetworksPropertiesInfraVnetProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Hci))
            {
                writer.WritePropertyName("hci"u8);
                writer.WriteObjectValue(Hci);
            }
            if (Optional.IsDefined(Kubevirt))
            {
                writer.WritePropertyName("kubevirt"u8);
                writer.WriteObjectValue(Kubevirt);
            }
            if (Optional.IsDefined(Vmware))
            {
                writer.WritePropertyName("vmware"u8);
                writer.WriteObjectValue(Vmware);
            }
            writer.WriteEndObject();
        }

        internal static VirtualNetworksPropertiesInfraVnetProfile DeserializeVirtualNetworksPropertiesInfraVnetProfile(JsonElement element)
        {
            Optional<VirtualNetworksPropertiesInfraVnetProfileHci> hci = default;
            Optional<VirtualNetworksPropertiesInfraVnetProfileKubevirt> kubevirt = default;
            Optional<VirtualNetworksPropertiesInfraVnetProfileVmware> vmware = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hci"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hci = VirtualNetworksPropertiesInfraVnetProfileHci.DeserializeVirtualNetworksPropertiesInfraVnetProfileHci(property.Value);
                    continue;
                }
                if (property.NameEquals("kubevirt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    kubevirt = VirtualNetworksPropertiesInfraVnetProfileKubevirt.DeserializeVirtualNetworksPropertiesInfraVnetProfileKubevirt(property.Value);
                    continue;
                }
                if (property.NameEquals("vmware"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    vmware = VirtualNetworksPropertiesInfraVnetProfileVmware.DeserializeVirtualNetworksPropertiesInfraVnetProfileVmware(property.Value);
                    continue;
                }
            }
            return new VirtualNetworksPropertiesInfraVnetProfile(hci.Value, kubevirt.Value, vmware.Value);
        }
    }
}
