// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HybridContainerService.Models
{
    /// <summary> The list of versions for supported orchestrators. </summary>
    public partial class OrchestratorVersionProfileListResult : ResourceData
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="OrchestratorVersionProfileListResult"/>. </summary>
        internal OrchestratorVersionProfileListResult()
        {
            Orchestrators = new ChangeTrackingList<OrchestratorVersionProfile>();
        }

        /// <summary> Initializes a new instance of <see cref="OrchestratorVersionProfileListResult"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="orchestrators"> Profile of the orchestrator versions. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OrchestratorVersionProfileListResult(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IReadOnlyList<OrchestratorVersionProfile> orchestrators, Dictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Orchestrators = orchestrators;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Profile of the orchestrator versions. </summary>
        public IReadOnlyList<OrchestratorVersionProfile> Orchestrators { get; }
    }
}
