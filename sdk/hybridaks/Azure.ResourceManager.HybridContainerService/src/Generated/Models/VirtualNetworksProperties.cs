// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.HybridContainerService.Models
{
    /// <summary> HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork. </summary>
    public partial class VirtualNetworksProperties
    {
        /// <summary> Initializes a new instance of <see cref="VirtualNetworksProperties"/>. </summary>
        public VirtualNetworksProperties()
        {
            VipPool = new ChangeTrackingList<VirtualNetworksPropertiesVipPoolItem>();
            VmipPool = new ChangeTrackingList<VirtualNetworksPropertiesVmipPoolItem>();
            DhcpServers = new ChangeTrackingList<string>();
            DnsServers = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="VirtualNetworksProperties"/>. </summary>
        /// <param name="infraVnetProfile"></param>
        /// <param name="vipPool"> Virtual IP Pool for Kubernetes. </param>
        /// <param name="vmipPool"> IP Pool for Virtual Machines. </param>
        /// <param name="dhcpServers"> Address of the DHCP servers associated with the network. </param>
        /// <param name="dnsServers"> Address of the DNS servers associated with the network. </param>
        /// <param name="gateway"> Address of the Gateway associated with the network. </param>
        /// <param name="ipAddressPrefix"> IP Address Prefix of the network. </param>
        /// <param name="vlanId"> VLAN Id used by the network. </param>
        /// <param name="provisioningState"></param>
        /// <param name="status"> HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork. </param>
        internal VirtualNetworksProperties(VirtualNetworksPropertiesInfraVnetProfile infraVnetProfile, IList<VirtualNetworksPropertiesVipPoolItem> vipPool, IList<VirtualNetworksPropertiesVmipPoolItem> vmipPool, IReadOnlyList<string> dhcpServers, IList<string> dnsServers, string gateway, string ipAddressPrefix, string vlanId, ProvisioningState? provisioningState, VirtualNetworksPropertiesStatus status)
        {
            InfraVnetProfile = infraVnetProfile;
            VipPool = vipPool;
            VmipPool = vmipPool;
            DhcpServers = dhcpServers;
            DnsServers = dnsServers;
            Gateway = gateway;
            IPAddressPrefix = ipAddressPrefix;
            VlanId = vlanId;
            ProvisioningState = provisioningState;
            Status = status;
        }

        /// <summary> Gets or sets the infra vnet profile. </summary>
        public VirtualNetworksPropertiesInfraVnetProfile InfraVnetProfile { get; set; }
        /// <summary> Virtual IP Pool for Kubernetes. </summary>
        public IList<VirtualNetworksPropertiesVipPoolItem> VipPool { get; }
        /// <summary> IP Pool for Virtual Machines. </summary>
        public IList<VirtualNetworksPropertiesVmipPoolItem> VmipPool { get; }
        /// <summary> Address of the DHCP servers associated with the network. </summary>
        public IReadOnlyList<string> DhcpServers { get; }
        /// <summary> Address of the DNS servers associated with the network. </summary>
        public IList<string> DnsServers { get; }
        /// <summary> Address of the Gateway associated with the network. </summary>
        public string Gateway { get; set; }
        /// <summary> IP Address Prefix of the network. </summary>
        public string IPAddressPrefix { get; set; }
        /// <summary> VLAN Id used by the network. </summary>
        public string VlanId { get; }
        /// <summary> Gets the provisioning state. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork. </summary>
        internal VirtualNetworksPropertiesStatus Status { get; }
        /// <summary> Contains Provisioning errors. </summary>
        public VirtualNetworksPropertiesStatusProvisioningStatus ProvisioningStatus
        {
            get => Status?.ProvisioningStatus;
        }
    }
}
