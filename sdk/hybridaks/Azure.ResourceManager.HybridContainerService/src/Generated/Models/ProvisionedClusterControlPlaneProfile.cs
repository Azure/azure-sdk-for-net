// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.HybridContainerService.Models
{
    /// <summary> The properties of the control plane nodes of the provisioned cluster. </summary>
    public partial class ProvisionedClusterControlPlaneProfile
    {
        /// <summary> Initializes a new instance of <see cref="ProvisionedClusterControlPlaneProfile"/>. </summary>
        public ProvisionedClusterControlPlaneProfile()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ProvisionedClusterControlPlaneProfile"/>. </summary>
        /// <param name="count"> Number of control plane nodes. The default value is 1, and the count should be an odd number. </param>
        /// <param name="vmSize"> VM sku size of the control plane nodes. </param>
        /// <param name="controlPlaneEndpoint"> IP Address of the Kubernetes API server. </param>
        internal ProvisionedClusterControlPlaneProfile(int? count, string vmSize, ControlPlaneProfileControlPlaneEndpoint controlPlaneEndpoint)
        {
            Count = count;
            VmSize = vmSize;
            ControlPlaneEndpoint = controlPlaneEndpoint;
        }

        /// <summary> Number of control plane nodes. The default value is 1, and the count should be an odd number. </summary>
        public int? Count { get; set; }
        /// <summary> VM sku size of the control plane nodes. </summary>
        public string VmSize { get; set; }
        /// <summary> IP Address of the Kubernetes API server. </summary>
        internal ControlPlaneProfileControlPlaneEndpoint ControlPlaneEndpoint { get; set; }
        /// <summary> IP address of the Kubernetes API server. </summary>
        public string ControlPlaneEndpointHostIP
        {
            get => ControlPlaneEndpoint is null ? default : ControlPlaneEndpoint.HostIP;
            set
            {
                if (ControlPlaneEndpoint is null)
                    ControlPlaneEndpoint = new ControlPlaneProfileControlPlaneEndpoint();
                ControlPlaneEndpoint.HostIP = value;
            }
        }
    }
}
