// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HybridContainerService.Models
{
    public partial class StorageSpacesProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(HciStorageProfile))
            {
                writer.WritePropertyName("hciStorageProfile"u8);
                writer.WriteObjectValue(HciStorageProfile);
            }
            if (Core.Optional.IsDefined(VmwareStorageProfile))
            {
                writer.WritePropertyName("vmwareStorageProfile"u8);
                writer.WriteObjectValue(VmwareStorageProfile);
            }
            if (Core.Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteObjectValue(Status);
            }
            writer.WriteEndObject();
        }

        internal static StorageSpacesProperties DeserializeStorageSpacesProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<StorageSpacesPropertiesHciStorageProfile> hciStorageProfile = default;
            Core.Optional<StorageSpacesPropertiesVmwareStorageProfile> vmwareStorageProfile = default;
            Core.Optional<ProvisioningState> provisioningState = default;
            Core.Optional<StorageSpacesPropertiesStatus> status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hciStorageProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hciStorageProfile = StorageSpacesPropertiesHciStorageProfile.DeserializeStorageSpacesPropertiesHciStorageProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("vmwareStorageProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmwareStorageProfile = StorageSpacesPropertiesVmwareStorageProfile.DeserializeStorageSpacesPropertiesVmwareStorageProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = StorageSpacesPropertiesStatus.DeserializeStorageSpacesPropertiesStatus(property.Value);
                    continue;
                }
            }
            return new StorageSpacesProperties(hciStorageProfile.Value, vmwareStorageProfile.Value, Core.Optional.ToNullable(provisioningState), status.Value);
        }
    }
}
