// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HybridContainerService.Models
{
    public partial class ProvisionedClusterProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(LinuxProfile))
            {
                writer.WritePropertyName("linuxProfile"u8);
                writer.WriteObjectValue(LinuxProfile);
            }
            if (Optional.IsDefined(ControlPlane))
            {
                writer.WritePropertyName("controlPlane"u8);
                writer.WriteObjectValue(ControlPlane);
            }
            if (Optional.IsDefined(KubernetesVersion))
            {
                writer.WritePropertyName("kubernetesVersion"u8);
                writer.WriteStringValue(KubernetesVersion);
            }
            if (Optional.IsDefined(NetworkProfile))
            {
                writer.WritePropertyName("networkProfile"u8);
                writer.WriteObjectValue(NetworkProfile);
            }
            if (Optional.IsDefined(StorageProfile))
            {
                writer.WritePropertyName("storageProfile"u8);
                writer.WriteObjectValue(StorageProfile);
            }
            if (Optional.IsDefined(ClusterVmAccessProfile))
            {
                writer.WritePropertyName("clusterVMAccessProfile"u8);
                writer.WriteObjectValue(ClusterVmAccessProfile);
            }
            if (Optional.IsCollectionDefined(AgentPoolProfiles))
            {
                writer.WritePropertyName("agentPoolProfiles"u8);
                writer.WriteStartArray();
                foreach (var item in AgentPoolProfiles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(CloudProviderProfile))
            {
                writer.WritePropertyName("cloudProviderProfile"u8);
                writer.WriteObjectValue(CloudProviderProfile);
            }
            if (Optional.IsDefined(LicenseProfile))
            {
                writer.WritePropertyName("licenseProfile"u8);
                writer.WriteObjectValue(LicenseProfile);
            }
            if (Optional.IsDefined(AutoScalerProfile))
            {
                writer.WritePropertyName("autoScalerProfile"u8);
                writer.WriteObjectValue(AutoScalerProfile);
            }
            writer.WriteEndObject();
        }

        internal static ProvisionedClusterProperties DeserializeProvisionedClusterProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<LinuxProfileProperties> linuxProfile = default;
            Optional<ProvisionedClusterControlPlaneProfile> controlPlane = default;
            Optional<string> kubernetesVersion = default;
            Optional<ProvisionedClusterNetworkProfile> networkProfile = default;
            Optional<StorageProfile> storageProfile = default;
            Optional<ClusterVmAccessProfile> clusterVmAccessProfile = default;
            Optional<IList<HybridContainerServiceNamedAgentPoolProfile>> agentPoolProfiles = default;
            Optional<ProvisionedClusterCloudProviderProfile> cloudProviderProfile = default;
            Optional<HybridContainerServiceResourceProvisioningState> provisioningState = default;
            Optional<ProvisionedClusterStatus> status = default;
            Optional<ProvisionedClusterLicenseProfile> licenseProfile = default;
            Optional<ProvisionedClusterPropertiesAutoScalerProfile> autoScalerProfile = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("linuxProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    linuxProfile = LinuxProfileProperties.DeserializeLinuxProfileProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("controlPlane"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    controlPlane = ProvisionedClusterControlPlaneProfile.DeserializeProvisionedClusterControlPlaneProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("kubernetesVersion"u8))
                {
                    kubernetesVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("networkProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkProfile = ProvisionedClusterNetworkProfile.DeserializeProvisionedClusterNetworkProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("storageProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageProfile = StorageProfile.DeserializeStorageProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("clusterVMAccessProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clusterVmAccessProfile = ClusterVmAccessProfile.DeserializeClusterVmAccessProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("agentPoolProfiles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HybridContainerServiceNamedAgentPoolProfile> array = new List<HybridContainerServiceNamedAgentPoolProfile>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HybridContainerServiceNamedAgentPoolProfile.DeserializeHybridContainerServiceNamedAgentPoolProfile(item));
                    }
                    agentPoolProfiles = array;
                    continue;
                }
                if (property.NameEquals("cloudProviderProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cloudProviderProfile = ProvisionedClusterCloudProviderProfile.DeserializeProvisionedClusterCloudProviderProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new HybridContainerServiceResourceProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = ProvisionedClusterStatus.DeserializeProvisionedClusterStatus(property.Value);
                    continue;
                }
                if (property.NameEquals("licenseProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    licenseProfile = ProvisionedClusterLicenseProfile.DeserializeProvisionedClusterLicenseProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("autoScalerProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoScalerProfile = ProvisionedClusterPropertiesAutoScalerProfile.DeserializeProvisionedClusterPropertiesAutoScalerProfile(property.Value);
                    continue;
                }
            }
            return new ProvisionedClusterProperties(linuxProfile.Value, controlPlane.Value, kubernetesVersion.Value, networkProfile.Value, storageProfile.Value, clusterVmAccessProfile.Value, Optional.ToList(agentPoolProfiles), cloudProviderProfile.Value, Optional.ToNullable(provisioningState), status.Value, licenseProfile.Value, autoScalerProfile.Value);
        }
    }
}
