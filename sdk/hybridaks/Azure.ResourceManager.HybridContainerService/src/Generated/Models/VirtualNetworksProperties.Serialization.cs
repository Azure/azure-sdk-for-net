// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HybridContainerService.Models
{
    public partial class VirtualNetworksProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(InfraVnetProfile))
            {
                writer.WritePropertyName("infraVnetProfile"u8);
                writer.WriteObjectValue(InfraVnetProfile);
            }
            if (Optional.IsCollectionDefined(VipPool))
            {
                writer.WritePropertyName("vipPool"u8);
                writer.WriteStartArray();
                foreach (var item in VipPool)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(VmipPool))
            {
                writer.WritePropertyName("vmipPool"u8);
                writer.WriteStartArray();
                foreach (var item in VmipPool)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DnsServers))
            {
                writer.WritePropertyName("dnsServers"u8);
                writer.WriteStartArray();
                foreach (var item in DnsServers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Gateway))
            {
                writer.WritePropertyName("gateway"u8);
                writer.WriteStringValue(Gateway);
            }
            if (Optional.IsDefined(IPAddressPrefix))
            {
                writer.WritePropertyName("ipAddressPrefix"u8);
                writer.WriteStringValue(IPAddressPrefix);
            }
            writer.WriteEndObject();
        }

        internal static VirtualNetworksProperties DeserializeVirtualNetworksProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<VirtualNetworksPropertiesInfraVnetProfile> infraVnetProfile = default;
            Optional<IList<VirtualNetworksPropertiesVipPoolItem>> vipPool = default;
            Optional<IList<VirtualNetworksPropertiesVmipPoolItem>> vmipPool = default;
            Optional<IReadOnlyList<string>> dhcpServers = default;
            Optional<IList<string>> dnsServers = default;
            Optional<string> gateway = default;
            Optional<string> ipAddressPrefix = default;
            Optional<string> vlanId = default;
            Optional<ProvisioningState> provisioningState = default;
            Optional<VirtualNetworksPropertiesStatus> status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("infraVnetProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    infraVnetProfile = VirtualNetworksPropertiesInfraVnetProfile.DeserializeVirtualNetworksPropertiesInfraVnetProfile(property.Value);
                    continue;
                }
                if (property.NameEquals("vipPool"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VirtualNetworksPropertiesVipPoolItem> array = new List<VirtualNetworksPropertiesVipPoolItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VirtualNetworksPropertiesVipPoolItem.DeserializeVirtualNetworksPropertiesVipPoolItem(item));
                    }
                    vipPool = array;
                    continue;
                }
                if (property.NameEquals("vmipPool"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VirtualNetworksPropertiesVmipPoolItem> array = new List<VirtualNetworksPropertiesVmipPoolItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VirtualNetworksPropertiesVmipPoolItem.DeserializeVirtualNetworksPropertiesVmipPoolItem(item));
                    }
                    vmipPool = array;
                    continue;
                }
                if (property.NameEquals("dhcpServers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dhcpServers = array;
                    continue;
                }
                if (property.NameEquals("dnsServers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dnsServers = array;
                    continue;
                }
                if (property.NameEquals("gateway"u8))
                {
                    gateway = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddressPrefix"u8))
                {
                    ipAddressPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vlanID"u8))
                {
                    vlanId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = VirtualNetworksPropertiesStatus.DeserializeVirtualNetworksPropertiesStatus(property.Value);
                    continue;
                }
            }
            return new VirtualNetworksProperties(infraVnetProfile.Value, Optional.ToList(vipPool), Optional.ToList(vmipPool), Optional.ToList(dhcpServers), Optional.ToList(dnsServers), gateway.Value, ipAddressPrefix.Value, vlanId.Value, Optional.ToNullable(provisioningState), status.Value);
        }
    }
}
