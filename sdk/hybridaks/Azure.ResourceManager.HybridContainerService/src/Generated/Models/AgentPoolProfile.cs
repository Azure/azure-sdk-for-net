// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.HybridContainerService.Models
{
    /// <summary> AgentPool configuration. </summary>
    public partial class AgentPoolProfile
    {
        /// <summary> Initializes a new instance of <see cref="AgentPoolProfile"/>. </summary>
        public AgentPoolProfile()
        {
            AvailabilityZones = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="AgentPoolProfile"/>. </summary>
        /// <param name="availabilityZones"> AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones. </param>
        /// <param name="osType"> The particular KubernetesVersion's Image's OS Type (Linux, Windows). </param>
        /// <param name="ossku"> Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows. </param>
        /// <param name="nodeImageVersion"> The version of node image. </param>
        internal AgentPoolProfile(IList<string> availabilityZones, OSType? osType, Ossku? ossku, string nodeImageVersion)
        {
            AvailabilityZones = availabilityZones;
            OSType = osType;
            OSSKU = ossku;
            NodeImageVersion = nodeImageVersion;
        }

        /// <summary> AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones. </summary>
        public IList<string> AvailabilityZones { get; }
        /// <summary> The particular KubernetesVersion's Image's OS Type (Linux, Windows). </summary>
        public OSType? OSType { get; set; }
        /// <summary> Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows. </summary>
        public Ossku? OSSKU { get; set; }
        /// <summary> The version of node image. </summary>
        public string NodeImageVersion { get; set; }
    }
}
