// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.HybridContainerService.Models
{
    /// <summary> The VirtualNetworksPropertiesInfraVnetProfile. </summary>
    public partial class VirtualNetworksPropertiesInfraVnetProfile
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VirtualNetworksPropertiesInfraVnetProfile"/>. </summary>
        public VirtualNetworksPropertiesInfraVnetProfile()
        {
        }

        /// <summary> Initializes a new instance of <see cref="VirtualNetworksPropertiesInfraVnetProfile"/>. </summary>
        /// <param name="hci"> Infra network profile for HCI platform. </param>
        /// <param name="networkCloud"> Infra network profile for the NetworkCloud platform. </param>
        /// <param name="vmware"> Infra network profile for VMware platform. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VirtualNetworksPropertiesInfraVnetProfile(VirtualNetworksPropertiesInfraVnetProfileHci hci, VirtualNetworksPropertiesInfraVnetProfileNetworkCloud networkCloud, VirtualNetworksPropertiesInfraVnetProfileVmware vmware, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Hci = hci;
            NetworkCloud = networkCloud;
            Vmware = vmware;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Infra network profile for HCI platform. </summary>
        public VirtualNetworksPropertiesInfraVnetProfileHci Hci { get; set; }
        /// <summary> Infra network profile for the NetworkCloud platform. </summary>
        internal VirtualNetworksPropertiesInfraVnetProfileNetworkCloud NetworkCloud { get; set; }
        /// <summary> The ARM ID of Network Cloud Network Resource to Associate with this VirtualNetwork. </summary>
        public string NetworkId
        {
            get => NetworkCloud is null ? default : NetworkCloud.NetworkId;
            set
            {
                if (NetworkCloud is null)
                    NetworkCloud = new VirtualNetworksPropertiesInfraVnetProfileNetworkCloud();
                NetworkCloud.NetworkId = value;
            }
        }

        /// <summary> Infra network profile for VMware platform. </summary>
        internal VirtualNetworksPropertiesInfraVnetProfileVmware Vmware { get; set; }
        /// <summary> Name of the network segment in VSphere. </summary>
        public string VmwareSegmentName
        {
            get => Vmware is null ? default : Vmware.SegmentName;
            set
            {
                if (Vmware is null)
                    Vmware = new VirtualNetworksPropertiesInfraVnetProfileVmware();
                Vmware.SegmentName = value;
            }
        }
    }
}
