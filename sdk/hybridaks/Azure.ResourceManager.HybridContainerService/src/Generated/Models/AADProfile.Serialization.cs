// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.HybridContainerService.Models
{
    public partial class AADProfile : IUtf8JsonSerializable, IModelJsonSerializable<AADProfile>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<AADProfile>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<AADProfile>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AADProfile>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(AdminGroupObjectIds))
            {
                writer.WritePropertyName("adminGroupObjectIDs"u8);
                writer.WriteStartArray();
                foreach (var item in AdminGroupObjectIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ClientAppId))
            {
                writer.WritePropertyName("clientAppID"u8);
                writer.WriteStringValue(ClientAppId);
            }
            if (Optional.IsDefined(EnableAzureRbac))
            {
                writer.WritePropertyName("enableAzureRbac"u8);
                writer.WriteBooleanValue(EnableAzureRbac.Value);
            }
            if (Optional.IsDefined(Managed))
            {
                writer.WritePropertyName("managed"u8);
                writer.WriteBooleanValue(Managed.Value);
            }
            if (Optional.IsDefined(ServerAppId))
            {
                writer.WritePropertyName("serverAppID"u8);
                writer.WriteStringValue(ServerAppId);
            }
            if (Optional.IsDefined(TenantId))
            {
                writer.WritePropertyName("tenantID"u8);
                writer.WriteStringValue(TenantId.Value);
            }
            if (Optional.IsDefined(ServerAppSecret))
            {
                writer.WritePropertyName("serverAppSecret"u8);
                writer.WriteStringValue(ServerAppSecret);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static AADProfile DeserializeAADProfile(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<string>> adminGroupObjectIds = default;
            Optional<string> clientAppId = default;
            Optional<bool> enableAzureRbac = default;
            Optional<bool> managed = default;
            Optional<string> serverAppId = default;
            Optional<Guid> tenantId = default;
            Optional<string> serverAppSecret = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("adminGroupObjectIDs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    adminGroupObjectIds = array;
                    continue;
                }
                if (property.NameEquals("clientAppID"u8))
                {
                    clientAppId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableAzureRbac"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAzureRbac = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("managed"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("serverAppID"u8))
                {
                    serverAppId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tenantID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tenantId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("serverAppSecret"u8))
                {
                    serverAppSecret = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new AADProfile(serverAppSecret.Value, Optional.ToList(adminGroupObjectIds), clientAppId.Value, Optional.ToNullable(enableAzureRbac), Optional.ToNullable(managed), serverAppId.Value, Optional.ToNullable(tenantId), rawData);
        }

        AADProfile IModelJsonSerializable<AADProfile>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AADProfile>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeAADProfile(doc.RootElement, options);
        }

        BinaryData IModelSerializable<AADProfile>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AADProfile>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        AADProfile IModelSerializable<AADProfile>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AADProfile>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeAADProfile(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="AADProfile"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="AADProfile"/> to convert. </param>
        public static implicit operator RequestContent(AADProfile model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="AADProfile"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator AADProfile(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeAADProfile(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
