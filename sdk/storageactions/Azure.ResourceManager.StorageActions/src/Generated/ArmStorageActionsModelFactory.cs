// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.StorageActions;

namespace Azure.ResourceManager.StorageActions.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class ArmStorageActionsModelFactory
    {

        /// <summary> Represents Storage Task. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="identity"> The managed service identity of the resource. </param>
        /// <param name="properties"> Properties of the storage task. </param>
        /// <returns> A new <see cref="StorageActions.StorageTaskData"/> instance for mocking. </returns>
        public static StorageTaskData StorageTaskData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, string location = default, ManagedServiceIdentity identity = default, StorageTaskProperties properties = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new StorageTaskData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                identity,
                properties);
        }

        /// <summary> Properties of the storage task. </summary>
        /// <param name="taskVersion"> Storage task version. </param>
        /// <param name="isEnabled"> Storage Task is enabled when set to true and disabled when set to false. </param>
        /// <param name="description"> Text that describes the purpose of the storage task. </param>
        /// <param name="action"> The storage task action that is executed. </param>
        /// <param name="provisioningState"> Represents the provisioning state of the storage task. </param>
        /// <param name="creationTimeInUtc"> The creation date and time of the storage task in UTC. </param>
        /// <returns> A new <see cref="Models.StorageTaskProperties"/> instance for mocking. </returns>
        public static StorageTaskProperties StorageTaskProperties(long? taskVersion = default, bool isEnabled = default, string description = default, StorageTaskAction action = default, StorageTaskProvisioningState? provisioningState = default, DateTimeOffset? creationTimeInUtc = default)
        {
            return new StorageTaskProperties(
                taskVersion,
                isEnabled,
                description,
                action,
                provisioningState,
                creationTimeInUtc,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The if block of storage task operation. </summary>
        /// <param name="condition"> Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators. </param>
        /// <param name="operations"> List of operations to execute when the condition predicate satisfies. </param>
        /// <returns> A new <see cref="Models.StorageTaskIfCondition"/> instance for mocking. </returns>
        public static StorageTaskIfCondition StorageTaskIfCondition(string condition = default, IEnumerable<StorageTaskOperationInfo> operations = default)
        {
            operations ??= new ChangeTrackingList<StorageTaskOperationInfo>();

            return new StorageTaskIfCondition(condition, operations?.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Represents an operation to be performed on the object. </summary>
        /// <param name="name"> The operation to be performed on the object. </param>
        /// <param name="parameters"> Key-value parameters for the operation. </param>
        /// <param name="onSuccess"> Action to be taken when the operation is successful for a object. </param>
        /// <param name="onFailure"> Action to be taken when the operation fails for a object. </param>
        /// <returns> A new <see cref="Models.StorageTaskOperationInfo"/> instance for mocking. </returns>
        public static StorageTaskOperationInfo StorageTaskOperationInfo(StorageTaskOperationName name = default, IDictionary<string, string> parameters = default, OnSuccessAction? onSuccess = default, OnFailureAction? onFailure = default)
        {
            parameters ??= new ChangeTrackingDictionary<string, string>();

            return new StorageTaskOperationInfo(name, parameters, onSuccess, onFailure, additionalBinaryDataProperties: null);
        }

        /// <summary> Parameters of the storage task update request. </summary>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="tags"> Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters. </param>
        /// <param name="properties"> Properties of the storage task. </param>
        /// <returns> A new <see cref="Models.StorageTaskPatch"/> instance for mocking. </returns>
        public static StorageTaskPatch StorageTaskPatch(ManagedServiceIdentity identity = default, IDictionary<string, string> tags = default, StorageTaskUpdateProperties properties = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new StorageTaskPatch(identity, tags, properties, additionalBinaryDataProperties: null);
        }

        /// <summary> Properties of the storage task. </summary>
        /// <param name="taskVersion"> Storage task version. </param>
        /// <param name="enabled"> Storage Task is enabled when set to true and disabled when set to false. </param>
        /// <param name="description"> Text that describes the purpose of the storage task. </param>
        /// <param name="action"> The storage task action that is executed. </param>
        /// <param name="provisioningState"> Represents the provisioning state of the storage task. </param>
        /// <param name="creationTimeInUtc"> The creation date and time of the storage task in UTC. </param>
        /// <returns> A new <see cref="Models.StorageTaskUpdateProperties"/> instance for mocking. </returns>
        public static StorageTaskUpdateProperties StorageTaskUpdateProperties(long? taskVersion = default, bool? enabled = default, string description = default, StorageTaskAction action = default, StorageTaskProvisioningState? provisioningState = default, DateTimeOffset? creationTimeInUtc = default)
        {
            return new StorageTaskUpdateProperties(
                taskVersion,
                enabled,
                description,
                action,
                provisioningState,
                creationTimeInUtc,
                additionalBinaryDataProperties: null);
        }
    }
}
