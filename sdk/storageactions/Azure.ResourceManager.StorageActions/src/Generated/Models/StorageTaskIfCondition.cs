// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.ResourceManager.StorageActions;

namespace Azure.ResourceManager.StorageActions.Models
{
    /// <summary> The if block of storage task operation. </summary>
    public partial class StorageTaskIfCondition
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="StorageTaskIfCondition"/>. </summary>
        /// <param name="condition"> Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators. </param>
        /// <param name="operations"> List of operations to execute when the condition predicate satisfies. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="condition"/> or <paramref name="operations"/> is null. </exception>
        public StorageTaskIfCondition(string condition, IEnumerable<StorageTaskOperationInfo> operations)
        {
            Argument.AssertNotNull(condition, nameof(condition));
            Argument.AssertNotNull(operations, nameof(operations));

            Condition = condition;
            Operations = operations.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="StorageTaskIfCondition"/>. </summary>
        /// <param name="condition"> Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators. </param>
        /// <param name="operations"> List of operations to execute when the condition predicate satisfies. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal StorageTaskIfCondition(string condition, IList<StorageTaskOperationInfo> operations, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Condition = condition;
            Operations = operations;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators. </summary>
        public string Condition { get; set; }

        /// <summary> List of operations to execute when the condition predicate satisfies. </summary>
        public IList<StorageTaskOperationInfo> Operations { get; }
    }
}
