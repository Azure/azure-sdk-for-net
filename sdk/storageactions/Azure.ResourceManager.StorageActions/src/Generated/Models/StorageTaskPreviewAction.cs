// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.StorageActions;

namespace Azure.ResourceManager.StorageActions.Models
{
    /// <summary> Storage Task Preview Action. </summary>
    public partial class StorageTaskPreviewAction
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="StorageTaskPreviewAction"/>. </summary>
        /// <param name="container"> Properties of a sample container to test for a match with the preview action. </param>
        /// <param name="action"> Preview action to test. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="container"/> or <paramref name="action"/> is null. </exception>
        public StorageTaskPreviewAction(StorageTaskPreviewContainerProperties container, StorageTaskPreviewActionCondition action)
        {
            Argument.AssertNotNull(container, nameof(container));
            Argument.AssertNotNull(action, nameof(action));

            Container = container;
            Action = action;
            InitializeStorageTaskPreviewActionProperties();
        }

        /// <summary> Initializes a new instance of <see cref="StorageTaskPreviewAction"/>. </summary>
        /// <param name="properties"> Properties of the storage task preview. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal StorageTaskPreviewAction(StorageTaskPreviewActionProperties properties, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Properties = properties;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Properties of the storage task preview. </summary>
        internal StorageTaskPreviewActionProperties Properties { get; set; }

        /// <summary> Properties of a sample container to test for a match with the preview action. </summary>
        public StorageTaskPreviewContainerProperties Container
        {
            get
            {
                return Properties is null ? default : Properties.Container;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new StorageTaskPreviewActionProperties();
                }
                Properties.Container = value;
            }
        }

        /// <summary> Properties of some sample blobs in the container to test for matches with the preview action. </summary>
        public IList<StorageTaskPreviewBlobProperties> Blobs
        {
            get
            {
                return Properties is null ? default : Properties.Blobs;
            }
        }

        /// <summary> Preview action to test. </summary>
        public StorageTaskPreviewActionCondition Action
        {
            get
            {
                return Properties is null ? default : Properties.Action;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new StorageTaskPreviewActionProperties();
                }
                Properties.Action = value;
            }
        }

        private void InitializeStorageTaskPreviewActionProperties()
        {
            if (Properties is null)
            {
                Properties = new StorageTaskPreviewActionProperties
                {
                    Blobs = new ChangeTrackingList<StorageTaskPreviewBlobProperties>()
                };
            }
        }
    }
}
