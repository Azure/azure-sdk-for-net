// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.StorageActions.Models;

namespace Azure.ResourceManager.StorageActions
{
    /// <summary> Represents Storage Task. </summary>
    public partial class StorageTaskData : TrackedResourceData
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="StorageTaskData"/>. </summary>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="identity"> The managed service identity of the resource. </param>
        /// <param name="isEnabled"> Storage Task is enabled when set to true and disabled when set to false. </param>
        /// <param name="description"> Text that describes the purpose of the storage task. </param>
        /// <param name="action"> The storage task action that is executed. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identity"/>, <paramref name="description"/> or <paramref name="action"/> is null. </exception>
        public StorageTaskData(AzureLocation location, ManagedServiceIdentity identity, bool isEnabled, string description, StorageTaskAction action) : base(location)
        {
            Argument.AssertNotNull(description, nameof(description));
            Argument.AssertNotNull(action, nameof(action));

            Identity = identity;
            IsEnabled = isEnabled;
            Description = description;
            Action = action;
        }

        /// <summary> Initializes a new instance of <see cref="StorageTaskData"/>. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="identity"> The managed service identity of the resource. </param>
        /// <param name="properties"> Properties of the storage task. </param>
        internal StorageTaskData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, BinaryData> additionalBinaryDataProperties, IDictionary<string, string> tags, AzureLocation location, ManagedServiceIdentity identity, StorageTaskProperties properties) : base(id, name, resourceType, systemData, tags, location)
        {
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
            Identity = identity;
            Properties = properties;
        }

        /// <summary> The managed service identity of the resource. </summary>
        public ManagedServiceIdentity Identity { get; set; }

        /// <summary> Properties of the storage task. </summary>
        internal StorageTaskProperties Properties { get; set; }

        /// <summary> Storage task version. </summary>
        public long? TaskVersion
        {
            get
            {
                return Properties is null ? default : Properties.TaskVersion;
            }
        }

        /// <summary> Storage Task is enabled when set to true and disabled when set to false. </summary>
        public bool IsEnabled
        {
            get
            {
                return Properties is null ? default : Properties.IsEnabled;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new StorageTaskProperties();
                }
                Properties.IsEnabled = value;
            }
        }

        /// <summary> Text that describes the purpose of the storage task. </summary>
        public string Description
        {
            get
            {
                return Properties is null ? default : Properties.Description;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new StorageTaskProperties();
                }
                Properties.Description = value;
            }
        }

        /// <summary> The storage task action that is executed. </summary>
        public StorageTaskAction Action
        {
            get
            {
                return Properties is null ? default : Properties.Action;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new StorageTaskProperties();
                }
                Properties.Action = value;
            }
        }

        /// <summary> Represents the provisioning state of the storage task. </summary>
        public StorageTaskProvisioningState? ProvisioningState
        {
            get
            {
                return Properties is null ? default : Properties.ProvisioningState;
            }
        }

        /// <summary> The creation date and time of the storage task in UTC. </summary>
        public DateTimeOffset? CreationTimeInUtc
        {
            get
            {
                return Properties is null ? default : Properties.CreationTimeInUtc;
            }
        }
    }
}
