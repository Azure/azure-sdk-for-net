// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Storageactions.Models
{
    /// <summary> Represents an operation to be performed on the object. </summary>
    public partial class StorageTaskOperation
    {
        /// <summary> Initializes a new instance of StorageTaskOperation. </summary>
        /// <param name="name"> The operation to be performed on the object. </param>
        public StorageTaskOperation(StorageTaskOperationName name)
        {
            Name = name;
            Parameters = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of StorageTaskOperation. </summary>
        /// <param name="name"> The operation to be performed on the object. </param>
        /// <param name="parameters"> Key-value parameters for the operation. </param>
        /// <param name="onSuccess"> Action to be taken when the operation is successful for a object. </param>
        /// <param name="onFailure"> Action to be taken when the operation fails for a object. </param>
        internal StorageTaskOperation(StorageTaskOperationName name, IDictionary<string, string> parameters, OnSuccess? onSuccess, OnFailure? onFailure)
        {
            Name = name;
            Parameters = parameters;
            OnSuccess = onSuccess;
            OnFailure = onFailure;
        }

        /// <summary> The operation to be performed on the object. </summary>
        public StorageTaskOperationName Name { get; set; }
        /// <summary> Key-value parameters for the operation. </summary>
        public IDictionary<string, string> Parameters { get; }
        /// <summary> Action to be taken when the operation is successful for a object. </summary>
        public OnSuccess? OnSuccess { get; set; }
        /// <summary> Action to be taken when the operation fails for a object. </summary>
        public OnFailure? OnFailure { get; set; }
    }
}
