// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.Samples
{
    public partial class Samples_Datasets
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetDataset_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = client.GetDataset("<name>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dataUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetDataset_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = await client.GetDatasetAsync("<name>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dataUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetDataset_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response<DatasetVersion> response = client.GetDataset("<name>", "<version>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetDataset_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response<DatasetVersion> response = await client.GetDatasetAsync("<name>", "<version>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetDataset_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = client.GetDataset("<name>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dataUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("connectionName").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetDataset_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = await client.GetDatasetAsync("<name>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dataUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("connectionName").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetDataset_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response<DatasetVersion> response = client.GetDataset("<name>", "<version>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetDataset_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response<DatasetVersion> response = await client.GetDatasetAsync("<name>", "<version>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = client.Delete("<name>", "<version>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = await client.DeleteAsync("<name>", "<version>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = client.Delete("<name>", "<version>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = await client.DeleteAsync("<name>", "<version>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_CreateOrUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                dataUri = "<dataUri>",
            });
            Response response = client.CreateOrUpdate("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dataUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_CreateOrUpdate_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                dataUri = "<dataUri>",
            });
            Response response = await client.CreateOrUpdateAsync("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dataUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_CreateOrUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                dataUri = "<dataUri>",
                connectionName = "<connectionName>",
                description = "<description>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Response response = client.CreateOrUpdate("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dataUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("connectionName").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_CreateOrUpdate_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                dataUri = "<dataUri>",
                connectionName = "<connectionName>",
                description = "<description>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Response response = await client.CreateOrUpdateAsync("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dataUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("connectionName").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_PendingUpload_DatasetsStartPendingUploadVersionMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadId = "mxjahcghabuplfwtlopiqgxtcyw",
                connectionName = "bknvpmlisrqxaphkf",
                pendingUploadType = "BlobReference",
            });
            Response response = client.PendingUpload("sgrzyrpltz", "ozdqisviavgqgfbtnzk", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("sasUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_PendingUpload_DatasetsStartPendingUploadVersionMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadId = "mxjahcghabuplfwtlopiqgxtcyw",
                connectionName = "bknvpmlisrqxaphkf",
                pendingUploadType = "BlobReference",
            });
            Response response = await client.PendingUploadAsync("sgrzyrpltz", "ozdqisviavgqgfbtnzk", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("sasUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_PendingUpload_DatasetsStartPendingUploadVersionMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            PendingUploadRequest body = new PendingUploadRequest
            {
                PendingUploadId = "mxjahcghabuplfwtlopiqgxtcyw",
                ConnectionName = "bknvpmlisrqxaphkf",
            };
            Response<PendingUploadResponse> response = client.PendingUpload("sgrzyrpltz", "ozdqisviavgqgfbtnzk", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_PendingUpload_DatasetsStartPendingUploadVersionMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            PendingUploadRequest body = new PendingUploadRequest
            {
                PendingUploadId = "mxjahcghabuplfwtlopiqgxtcyw",
                ConnectionName = "bknvpmlisrqxaphkf",
            };
            Response<PendingUploadResponse> response = await client.PendingUploadAsync("sgrzyrpltz", "ozdqisviavgqgfbtnzk", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_PendingUpload_DatasetsStartPendingUploadVersionMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadType = "BlobReference",
            });
            Response response = client.PendingUpload("duxoiaywfik", "yzzzt", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("sasUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_PendingUpload_DatasetsStartPendingUploadVersionMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadType = "BlobReference",
            });
            Response response = await client.PendingUploadAsync("duxoiaywfik", "yzzzt", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("sasUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_PendingUpload_DatasetsStartPendingUploadVersionMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            PendingUploadRequest body = new PendingUploadRequest();
            Response<PendingUploadResponse> response = client.PendingUpload("duxoiaywfik", "yzzzt", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_PendingUpload_DatasetsStartPendingUploadVersionMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            PendingUploadRequest body = new PendingUploadRequest();
            Response<PendingUploadResponse> response = await client.PendingUploadAsync("duxoiaywfik", "yzzzt", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetCredentials_DatasetsGetCredentialsMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = client.GetCredentials("vzqmzhfdzfqegdk", "cuiflnznlzybcrc", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("sasUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetCredentials_DatasetsGetCredentialsMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = await client.GetCredentialsAsync("vzqmzhfdzfqegdk", "cuiflnznlzybcrc", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("sasUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetCredentials_DatasetsGetCredentialsMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response<AssetCredentialResponse> response = client.GetCredentials("vzqmzhfdzfqegdk", "cuiflnznlzybcrc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetCredentials_DatasetsGetCredentialsMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response<AssetCredentialResponse> response = await client.GetCredentialsAsync("vzqmzhfdzfqegdk", "cuiflnznlzybcrc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetCredentials_DatasetsGetCredentialsMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = client.GetCredentials("sbblxkyqnfvdiqacezyygvts", "ikak", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("sasUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetCredentials_DatasetsGetCredentialsMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response response = await client.GetCredentialsAsync("sbblxkyqnfvdiqacezyygvts", "ikak", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("sasUri").ToString());
            Console.WriteLine(result.GetProperty("blobReference").GetProperty("credential").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetCredentials_DatasetsGetCredentialsMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response<AssetCredentialResponse> response = client.GetCredentials("sbblxkyqnfvdiqacezyygvts", "ikak");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetCredentials_DatasetsGetCredentialsMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            Response<AssetCredentialResponse> response = await client.GetCredentialsAsync("sbblxkyqnfvdiqacezyygvts", "ikak");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            foreach (BinaryData item in client.GetVersions("<name>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dataUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            await foreach (BinaryData item in client.GetVersionsAsync("<name>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dataUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            foreach (DatasetVersion item in client.GetVersions("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            await foreach (DatasetVersion item in client.GetVersionsAsync("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            foreach (BinaryData item in client.GetVersions("<name>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dataUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("isReference").ToString());
                Console.WriteLine(result.GetProperty("connectionName").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            await foreach (BinaryData item in client.GetVersionsAsync("<name>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dataUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("isReference").ToString());
                Console.WriteLine(result.GetProperty("connectionName").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            foreach (DatasetVersion item in client.GetVersions("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            await foreach (DatasetVersion item in client.GetVersionsAsync("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DatasetVersion_GetDatasetVersions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            foreach (BinaryData item in client.GetDatasetVersions(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dataUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DatasetVersion_GetDatasetVersions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            await foreach (BinaryData item in client.GetDatasetVersionsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dataUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DatasetVersion_GetDatasetVersions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            foreach (DatasetVersion item in client.GetDatasetVersions())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DatasetVersion_GetDatasetVersions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            await foreach (DatasetVersion item in client.GetDatasetVersionsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DatasetVersion_GetDatasetVersions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            foreach (BinaryData item in client.GetDatasetVersions(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dataUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("isReference").ToString());
                Console.WriteLine(result.GetProperty("connectionName").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DatasetVersion_GetDatasetVersions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            await foreach (BinaryData item in client.GetDatasetVersionsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dataUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("isReference").ToString());
                Console.WriteLine(result.GetProperty("connectionName").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DatasetVersion_GetDatasetVersions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            foreach (DatasetVersion item in client.GetDatasetVersions())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DatasetVersion_GetDatasetVersions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

            await foreach (DatasetVersion item in client.GetDatasetVersionsAsync())
            {
            }
        }
    }
}
