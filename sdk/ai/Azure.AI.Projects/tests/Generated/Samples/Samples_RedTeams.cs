// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.Samples
{
    public partial class Samples_RedTeams
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RedTeam_GetRedTeam_RedTeamsGetMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            Response response = client.GetRedTeam("apwpcf", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RedTeam_GetRedTeam_RedTeamsGetMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            Response response = await client.GetRedTeamAsync("apwpcf", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RedTeam_GetRedTeam_RedTeamsGetMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            Response<RedTeam> response = client.GetRedTeam("apwpcf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RedTeam_GetRedTeam_RedTeamsGetMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            Response<RedTeam> response = await client.GetRedTeamAsync("apwpcf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RedTeams_Create_RedTeamsCreateMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                numTurns = 10,
                attackStrategies = new object[]
            {
"easy"
            },
                simulationOnly = true,
                riskCategories = new object[]
            {
"HateUnfairness"
            },
                applicationScenario = "qaxxxhjp",
                tags = new
                {
                    key1287 = "gbklekkgmxkfbhehgh",
                },
                properties = new
                {
                    key9280 = "fwzjtipl",
                },
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RedTeams_Create_RedTeamsCreateMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                numTurns = 10,
                attackStrategies = new object[]
            {
"easy"
            },
                simulationOnly = true,
                riskCategories = new object[]
            {
"HateUnfairness"
            },
                applicationScenario = "qaxxxhjp",
                tags = new
                {
                    key1287 = "gbklekkgmxkfbhehgh",
                },
                properties = new
                {
                    key9280 = "fwzjtipl",
                },
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RedTeams_Create_RedTeamsCreateMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            RedTeam redTeam = new RedTeam(null)
            {
                NumTurns = 10,
                AttackStrategies = { AttackStrategy.Easy },
                SimulationOnly = true,
                RiskCategories = { RiskCategory.HateUnfairness },
                ApplicationScenario = "qaxxxhjp",
                Tags =
{
["key1287"] = "gbklekkgmxkfbhehgh"
},
                Properties =
{
["key9280"] = "fwzjtipl"
},
            };
            Response<RedTeam> response = client.Create(redTeam);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RedTeams_Create_RedTeamsCreateMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            RedTeam redTeam = new RedTeam(null)
            {
                NumTurns = 10,
                AttackStrategies = { AttackStrategy.Easy },
                SimulationOnly = true,
                RiskCategories = { RiskCategory.HateUnfairness },
                ApplicationScenario = "qaxxxhjp",
                Tags =
{
["key1287"] = "gbklekkgmxkfbhehgh"
},
                Properties =
{
["key9280"] = "fwzjtipl"
},
            };
            Response<RedTeam> response = await client.CreateAsync(redTeam);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RedTeams_Create_RedTeamsCreateMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                numTurns = 10,
                attackStrategies = new object[]
            {
"easy"
            },
                simulationOnly = true,
                riskCategories = new object[]
            {
"HateUnfairness"
            },
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RedTeams_Create_RedTeamsCreateMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                numTurns = 10,
                attackStrategies = new object[]
            {
"easy"
            },
                simulationOnly = true,
                riskCategories = new object[]
            {
"HateUnfairness"
            },
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RedTeams_Create_RedTeamsCreateMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            RedTeam redTeam = new RedTeam(null)
            {
                NumTurns = 10,
                AttackStrategies = { AttackStrategy.Easy },
                SimulationOnly = true,
                RiskCategories = { RiskCategory.HateUnfairness },
            };
            Response<RedTeam> response = client.Create(redTeam);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RedTeams_Create_RedTeamsCreateMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            RedTeam redTeam = new RedTeam(null)
            {
                NumTurns = 10,
                AttackStrategies = { AttackStrategy.Easy },
                SimulationOnly = true,
                RiskCategories = { RiskCategory.HateUnfairness },
            };
            Response<RedTeam> response = await client.CreateAsync(redTeam);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RedTeam_GetRedTeams_RedTeamsListMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            foreach (BinaryData item in client.GetRedTeams(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("target").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RedTeam_GetRedTeams_RedTeamsListMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            await foreach (BinaryData item in client.GetRedTeamsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("target").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RedTeam_GetRedTeams_RedTeamsListMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            foreach (RedTeam item in client.GetRedTeams())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RedTeam_GetRedTeams_RedTeamsListMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RedTeams client = new AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

            await foreach (RedTeam item in client.GetRedTeamsAsync())
            {
            }
        }
    }
}
