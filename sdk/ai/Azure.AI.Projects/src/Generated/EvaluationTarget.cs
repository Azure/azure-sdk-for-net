// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> Target for the evaluation process. </summary>
    public partial class EvaluationTarget
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EvaluationTarget"/>. </summary>
        /// <param name="systemMessage"> System message related to the evaluation target. </param>
        /// <param name="modelConfig">
        /// Model configuration for the evaluation.
        /// Please note <see cref="TargetModelConfig"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AOAIModelConfig"/> and <see cref="MAASModelConfig"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="systemMessage"/> or <paramref name="modelConfig"/> is null. </exception>
        public EvaluationTarget(string systemMessage, TargetModelConfig modelConfig)
        {
            Argument.AssertNotNull(systemMessage, nameof(systemMessage));
            Argument.AssertNotNull(modelConfig, nameof(modelConfig));

            SystemMessage = systemMessage;
            ModelConfig = modelConfig;
            ModelParams = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="EvaluationTarget"/>. </summary>
        /// <param name="systemMessage"> System message related to the evaluation target. </param>
        /// <param name="modelConfig">
        /// Model configuration for the evaluation.
        /// Please note <see cref="TargetModelConfig"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AOAIModelConfig"/> and <see cref="MAASModelConfig"/>.
        /// </param>
        /// <param name="modelParams"> A dictionary of parameters for the model. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EvaluationTarget(string systemMessage, TargetModelConfig modelConfig, IDictionary<string, BinaryData> modelParams, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SystemMessage = systemMessage;
            ModelConfig = modelConfig;
            ModelParams = modelParams;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EvaluationTarget"/> for deserialization. </summary>
        internal EvaluationTarget()
        {
        }

        /// <summary> System message related to the evaluation target. </summary>
        public string SystemMessage { get; set; }
        /// <summary>
        /// Model configuration for the evaluation.
        /// Please note <see cref="TargetModelConfig"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AOAIModelConfig"/> and <see cref="MAASModelConfig"/>.
        /// </summary>
        public TargetModelConfig ModelConfig { get; set; }
        /// <summary>
        /// A dictionary of parameters for the model.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> ModelParams { get; }
    }
}
