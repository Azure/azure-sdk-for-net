// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.Core.Foundations;

namespace Azure.AI.Projects
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class AzureAIProjectsModelFactory
    {
        /// <summary> Response from the list and get connections operations. </summary>
        /// <param name="name"> The friendly name of the connection, provided by the user. </param>
        /// <param name="id"> A unique identifier for the connection, generated by the service. </param>
        /// <param name="type"> Category of the connection. </param>
        /// <param name="target"> The connection URL to be used for this service. </param>
        /// <param name="isDefault"> Whether the connection is tagged as the default connection of its type. </param>
        /// <param name="credentials"> The credentials used by the connection. </param>
        /// <param name="metadata"> Metadata of the connection. </param>
        /// <returns> A new <see cref="Projects.ConnectionProperties"/> instance for mocking. </returns>
        public static ConnectionProperties ConnectionProperties(string name = default, string id = default, ConnectionType @type = default, string target = default, bool isDefault = default, BaseCredentials credentials = default, IReadOnlyDictionary<string, string> metadata = default)
        {
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new ConnectionProperties(
                name,
                id,
                @type,
                target,
                isDefault,
                credentials,
                metadata,
                additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// A base class for connection credentials
        /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="ApiKeyCredentials"/>, <see cref="EntraIDCredentials"/>, <see cref="CustomCredential"/>, <see cref="SASCredentials"/>, and <see cref="NoAuthenticationCredentials"/>.
        /// </summary>
        /// <param name="type"> The type of credential used by the connection. </param>
        /// <returns> A new <see cref="Projects.BaseCredentials"/> instance for mocking. </returns>
        public static BaseCredentials BaseCredentials(string @type = default)
        {
            return new UnknownBaseCredentials(new CredentialType(@type), additionalBinaryDataProperties: null);
        }

        /// <summary> API Key Credential definition. </summary>
        /// <param name="apiKey"> API Key. </param>
        /// <returns> A new <see cref="Projects.ApiKeyCredentials"/> instance for mocking. </returns>
        public static ApiKeyCredentials ApiKeyCredentials(string apiKey = default)
        {
            return new ApiKeyCredentials(CredentialType.ApiKey, additionalBinaryDataProperties: null, apiKey);
        }

        /// <summary> Entra ID credential definition. </summary>
        /// <returns> A new <see cref="Projects.EntraIDCredentials"/> instance for mocking. </returns>
        public static EntraIDCredentials EntraIDCredentials()
        {
            return new EntraIDCredentials(CredentialType.EntraId, additionalBinaryDataProperties: null);
        }

        /// <summary> Custom credential definition. </summary>
        /// <param name="keys"> The credential type. </param>
        /// <returns> A new <see cref="Projects.CustomCredential"/> instance for mocking. </returns>
        public static CustomCredential CustomCredential(IReadOnlyDictionary<string, string> keys = default)
        {
            keys ??= new ChangeTrackingDictionary<string, string>();

            return new CustomCredential(CredentialType.Custom, additionalBinaryDataProperties: null, keys);
        }

        /// <summary> Shared Access Signature (SAS) credential definition. </summary>
        /// <param name="sasToken"> SAS token. </param>
        /// <returns> A new <see cref="Projects.SASCredentials"/> instance for mocking. </returns>
        public static SASCredentials SASCredentials(string sasToken = default)
        {
            return new SASCredentials(CredentialType.SAS, additionalBinaryDataProperties: null, sasToken);
        }

        /// <summary> Credentials that do not require authentication. </summary>
        /// <returns> A new <see cref="Projects.NoAuthenticationCredentials"/> instance for mocking. </returns>
        public static NoAuthenticationCredentials NoAuthenticationCredentials()
        {
            return new NoAuthenticationCredentials(CredentialType.None, additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// DatasetVersion Definition
        /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="FileDatasetVersion"/> and <see cref="FolderDatasetVersion"/>.
        /// </summary>
        /// <param name="dataUri"></param>
        /// <param name="type"> Dataset type. </param>
        /// <param name="isReference"> Indicates if the dataset holds a reference to the storage, or the dataset manages storage itself. If true, the underlying data will not be deleted when the dataset version is deleted. </param>
        /// <param name="connectionName"> The Azure Storage Account connection name. Required if startPendingUploadVersion was not called before creating the Dataset. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.DatasetVersion"/> instance for mocking. </returns>
        public static DatasetVersion DatasetVersion(Uri dataUri = default, string @type = default, bool? isReference = default, string connectionName = default, string id = default, string name = default, string version = default, string description = default, IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new UnknownDatasetVersion(
                dataUri,
                new DatasetType(@type),
                isReference,
                connectionName,
                id,
                name,
                version,
                description,
                tags,
                additionalBinaryDataProperties: null);
        }

        /// <summary> FileDatasetVersion Definition. </summary>
        /// <param name="dataUri"></param>
        /// <param name="isReference"> Indicates if the dataset holds a reference to the storage, or the dataset manages storage itself. If true, the underlying data will not be deleted when the dataset version is deleted. </param>
        /// <param name="connectionName"> The Azure Storage Account connection name. Required if startPendingUploadVersion was not called before creating the Dataset. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.FileDatasetVersion"/> instance for mocking. </returns>
        public static FileDatasetVersion FileDatasetVersion(Uri dataUri = default, bool? isReference = default, string connectionName = default, string id = default, string name = default, string version = default, string description = default, IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new FileDatasetVersion(
                dataUri,
                DatasetType.UriFile,
                isReference,
                connectionName,
                id,
                name,
                version,
                description,
                tags,
                additionalBinaryDataProperties: null);
        }

        /// <summary> FileDatasetVersion Definition. </summary>
        /// <param name="dataUri"></param>
        /// <param name="isReference"> Indicates if the dataset holds a reference to the storage, or the dataset manages storage itself. If true, the underlying data will not be deleted when the dataset version is deleted. </param>
        /// <param name="connectionName"> The Azure Storage Account connection name. Required if startPendingUploadVersion was not called before creating the Dataset. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.FolderDatasetVersion"/> instance for mocking. </returns>
        public static FolderDatasetVersion FolderDatasetVersion(Uri dataUri = default, bool? isReference = default, string connectionName = default, string id = default, string name = default, string version = default, string description = default, IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new FolderDatasetVersion(
                dataUri,
                DatasetType.UriFolder,
                isReference,
                connectionName,
                id,
                name,
                version,
                description,
                tags,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Represents a request for a pending upload. </summary>
        /// <param name="pendingUploadId"> If PendingUploadId is not provided, a random GUID will be used. </param>
        /// <param name="connectionName"> Azure Storage Account connection name to use for generating temporary SAS token. </param>
        /// <param name="pendingUploadType"> BlobReference is the only supported type. </param>
        /// <returns> A new <see cref="Projects.PendingUploadConfiguration"/> instance for mocking. </returns>
        public static PendingUploadConfiguration PendingUploadConfiguration(string pendingUploadId = default, string connectionName = default, PendingUploadType pendingUploadType = default)
        {
            return new PendingUploadConfiguration(pendingUploadId, connectionName, pendingUploadType, additionalBinaryDataProperties: null);
        }

        /// <summary> Represents the response for a pending upload request. </summary>
        /// <param name="blobReference"> Container-level read, write, list SAS. </param>
        /// <param name="pendingUploadId"> ID for this upload request. </param>
        /// <param name="version"> Version of asset to be created if user did not specify version when initially creating upload. </param>
        /// <param name="pendingUploadType"> BlobReference is the only supported type. </param>
        /// <returns> A new <see cref="Projects.PendingUploadResult"/> instance for mocking. </returns>
        public static PendingUploadResult PendingUploadResult(BlobReference blobReference = default, string pendingUploadId = default, string version = default, PendingUploadType pendingUploadType = default)
        {
            return new PendingUploadResult(blobReference, pendingUploadId, version, pendingUploadType, additionalBinaryDataProperties: null);
        }

        /// <summary> Blob reference details. </summary>
        /// <param name="blobUri"></param>
        /// <param name="storageAccountArmId"> ARM ID of the storage account to use. </param>
        /// <param name="credential"> Credential info to access the storage account. </param>
        /// <returns> A new <see cref="Projects.BlobReference"/> instance for mocking. </returns>
        public static BlobReference BlobReference(Uri blobUri = default, string storageAccountArmId = default, BlobReferenceSasCredential credential = default)
        {
            return new BlobReference(blobUri, storageAccountArmId, credential, additionalBinaryDataProperties: null);
        }

        /// <summary> SAS Credential definition. </summary>
        /// <param name="sasUri"></param>
        /// <param name="type"> Type of credential. </param>
        /// <returns> A new <see cref="Projects.BlobReferenceSasCredential"/> instance for mocking. </returns>
        public static BlobReferenceSasCredential BlobReferenceSasCredential(Uri sasUri = default, string @type = default)
        {
            return new BlobReferenceSasCredential(sasUri, @type, additionalBinaryDataProperties: null);
        }

        /// <summary> Represents a reference to a blob for consumption. </summary>
        /// <param name="blobReference"> Credential info to access the storage account. </param>
        /// <returns> A new <see cref="Projects.DatasetCredential"/> instance for mocking. </returns>
        public static DatasetCredential DatasetCredential(BlobReference blobReference = default)
        {
            return new DatasetCredential(blobReference, additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// Index resource Definition
        /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="AzureAISearchIndex"/>, <see cref="ManagedAzureAISearchIndex"/>, and <see cref="CosmosDBIndex"/>.
        /// </summary>
        /// <param name="type"> Type of index. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.SearchIndex"/> instance for mocking. </returns>
        public static SearchIndex SearchIndex(string @type = default, string id = default, string name = default, string version = default, string description = default, IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new UnknownSearchIndex(
                new IndexType(@type),
                id,
                name,
                version,
                description,
                tags,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Azure AI Search Index Definition. </summary>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="connectionName"> Name of connection to Azure AI Search. </param>
        /// <param name="indexName"> Name of index in Azure AI Search resource to attach. </param>
        /// <param name="fieldMapping"> Field mapping configuration. </param>
        /// <returns> A new <see cref="Projects.AzureAISearchIndex"/> instance for mocking. </returns>
        public static AzureAISearchIndex AzureAISearchIndex(string id = default, string name = default, string version = default, string description = default, IDictionary<string, string> tags = default, string connectionName = default, string indexName = default, FieldMapping fieldMapping = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new AzureAISearchIndex(
                IndexType.AzureSearch,
                id,
                name,
                version,
                description,
                tags,
                additionalBinaryDataProperties: null,
                connectionName,
                indexName,
                fieldMapping);
        }

        /// <summary> Field mapping configuration class. </summary>
        /// <param name="contentFields"> List of fields with text content. </param>
        /// <param name="filepathField"> Path of file to be used as a source of text content. </param>
        /// <param name="titleField"> Field containing the title of the document. </param>
        /// <param name="urlField"> Field containing the url of the document. </param>
        /// <param name="vectorFields"> List of fields with vector content. </param>
        /// <param name="metadataFields"> List of fields with metadata content. </param>
        /// <returns> A new <see cref="Projects.FieldMapping"/> instance for mocking. </returns>
        public static FieldMapping FieldMapping(IEnumerable<string> contentFields = default, string filepathField = default, string titleField = default, string urlField = default, IEnumerable<string> vectorFields = default, IEnumerable<string> metadataFields = default)
        {
            contentFields ??= new ChangeTrackingList<string>();
            vectorFields ??= new ChangeTrackingList<string>();
            metadataFields ??= new ChangeTrackingList<string>();

            return new FieldMapping(
                contentFields.ToList(),
                filepathField,
                titleField,
                urlField,
                vectorFields.ToList(),
                metadataFields.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Managed Azure AI Search Index Definition. </summary>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="vectorStoreId"> Vector store id of managed index. </param>
        /// <returns> A new <see cref="Projects.ManagedAzureAISearchIndex"/> instance for mocking. </returns>
        public static ManagedAzureAISearchIndex ManagedAzureAISearchIndex(string id = default, string name = default, string version = default, string description = default, IDictionary<string, string> tags = default, string vectorStoreId = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new ManagedAzureAISearchIndex(
                IndexType.ManagedAzureSearch,
                id,
                name,
                version,
                description,
                tags,
                additionalBinaryDataProperties: null,
                vectorStoreId);
        }

        /// <summary> CosmosDB Vector Store Index Definition. </summary>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="connectionName"> Name of connection to CosmosDB. </param>
        /// <param name="databaseName"> Name of the CosmosDB Database. </param>
        /// <param name="containerName"> Name of CosmosDB Container. </param>
        /// <param name="embeddingConfiguration"> Embedding model configuration. </param>
        /// <param name="fieldMapping"> Field mapping configuration. </param>
        /// <returns> A new <see cref="Projects.CosmosDBIndex"/> instance for mocking. </returns>
        public static CosmosDBIndex CosmosDBIndex(string id = default, string name = default, string version = default, string description = default, IDictionary<string, string> tags = default, string connectionName = default, string databaseName = default, string containerName = default, EmbeddingConfiguration embeddingConfiguration = default, FieldMapping fieldMapping = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new CosmosDBIndex(
                IndexType.CosmosDB,
                id,
                name,
                version,
                description,
                tags,
                additionalBinaryDataProperties: null,
                connectionName,
                databaseName,
                containerName,
                embeddingConfiguration,
                fieldMapping);
        }

        /// <summary> Embedding configuration class. </summary>
        /// <param name="modelDeploymentName"> Deployment name of embedding model. It can point to a model deployment either in the parent AIServices or a connection. </param>
        /// <param name="embeddingField"> Embedding field. </param>
        /// <returns> A new <see cref="Projects.EmbeddingConfiguration"/> instance for mocking. </returns>
        public static EmbeddingConfiguration EmbeddingConfiguration(string modelDeploymentName = default, string embeddingField = default)
        {
            return new EmbeddingConfiguration(modelDeploymentName, embeddingField, additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// Model Deployment Definition
        /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="ModelDeployment"/>.
        /// </summary>
        /// <param name="type"> The type of the deployment. </param>
        /// <param name="name"> Name of the deployment. </param>
        /// <returns> A new <see cref="Projects.AssetDeployment"/> instance for mocking. </returns>
        public static AssetDeployment AssetDeployment(string @type = default, string name = default)
        {
            return new UnknownAssetDeployment(new DeploymentType(@type), name, additionalBinaryDataProperties: null);
        }

        /// <summary> Model Deployment Definition. </summary>
        /// <param name="name"> Name of the deployment. </param>
        /// <param name="modelName"> Publisher-specific name of the deployed model. </param>
        /// <param name="modelVersion"> Publisher-specific version of the deployed model. </param>
        /// <param name="modelPublisher"> Name of the deployed model's publisher. </param>
        /// <param name="capabilities"> Capabilities of deployed model. </param>
        /// <param name="sku"> Sku of the model deployment. </param>
        /// <param name="connectionName"> Name of the connection the deployment comes from. </param>
        /// <returns> A new <see cref="Projects.ModelDeployment"/> instance for mocking. </returns>
        public static ModelDeployment ModelDeployment(string name = default, string modelName = default, string modelVersion = default, string modelPublisher = default, IReadOnlyDictionary<string, string> capabilities = default, ModelDeploymentSku sku = default, string connectionName = default)
        {
            capabilities ??= new ChangeTrackingDictionary<string, string>();

            return new ModelDeployment(
                DeploymentType.ModelDeployment,
                name,
                additionalBinaryDataProperties: null,
                modelName,
                modelVersion,
                modelPublisher,
                capabilities,
                sku,
                connectionName);
        }

        /// <summary> Sku information. </summary>
        /// <param name="capacity"> Sku capacity. </param>
        /// <param name="family"> Sku family. </param>
        /// <param name="name"> Sku name. </param>
        /// <param name="size"> Sku size. </param>
        /// <param name="tier"> Sku tier. </param>
        /// <returns> A new <see cref="Projects.ModelDeploymentSku"/> instance for mocking. </returns>
        public static ModelDeploymentSku ModelDeploymentSku(long capacity = default, string family = default, string name = default, string size = default, string tier = default)
        {
            return new ModelDeploymentSku(
                capacity,
                family,
                name,
                size,
                tier,
                additionalBinaryDataProperties: null);
        }
    }
}
