// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects
{
    /// <summary> Error code variants for vector store file processing. </summary>
    public readonly partial struct VectorStoreFileErrorCode : IEquatable<VectorStoreFileErrorCode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VectorStoreFileErrorCode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VectorStoreFileErrorCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InternalErrorValue = "internal_error";
        private const string FileNotFoundValue = "file_not_found";
        private const string ParsingErrorValue = "parsing_error";
        private const string UnhandledMimeTypeValue = "unhandled_mime_type";

        /// <summary> An internal error occurred. </summary>
        public static VectorStoreFileErrorCode InternalError { get; } = new VectorStoreFileErrorCode(InternalErrorValue);
        /// <summary> The file was not found. </summary>
        public static VectorStoreFileErrorCode FileNotFound { get; } = new VectorStoreFileErrorCode(FileNotFoundValue);
        /// <summary> The file could not be parsed. </summary>
        public static VectorStoreFileErrorCode ParsingError { get; } = new VectorStoreFileErrorCode(ParsingErrorValue);
        /// <summary> The file has an unhandled mime type. </summary>
        public static VectorStoreFileErrorCode UnhandledMimeType { get; } = new VectorStoreFileErrorCode(UnhandledMimeTypeValue);
        /// <summary> Determines if two <see cref="VectorStoreFileErrorCode"/> values are the same. </summary>
        public static bool operator ==(VectorStoreFileErrorCode left, VectorStoreFileErrorCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VectorStoreFileErrorCode"/> values are not the same. </summary>
        public static bool operator !=(VectorStoreFileErrorCode left, VectorStoreFileErrorCode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VectorStoreFileErrorCode"/>. </summary>
        public static implicit operator VectorStoreFileErrorCode(string value) => new VectorStoreFileErrorCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VectorStoreFileErrorCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VectorStoreFileErrorCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
