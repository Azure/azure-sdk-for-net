// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Threading;
using Azure.AI.Projects._ServicePatterns;

namespace Azure.AI.Projects
{
    /// <summary></summary>
    public partial class AIProjectClient
    {
        private readonly Uri _endpoint;
        private ServicePatterns _cachedServicePatterns;
        private Connections _cachedConnections;
        private Evaluations _cachedEvaluations;
        private Datasets _cachedDatasets;
        private Indexes _cachedIndexes;
        private Deployments _cachedDeployments;
        private RedTeams _cachedRedTeams;

        /// <summary> Initializes a new instance of AIProjectClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        internal AIProjectClient(Uri endpoint) : this(endpoint, new AIProjectClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AIProjectClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        internal AIProjectClient(Uri endpoint, AIProjectClientOptions options)
        {
            options ??= new AIProjectClientOptions();

            _endpoint = endpoint;
            Pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary> Initializes a new instance of ServicePatterns. </summary>
        public virtual ServicePatterns GetServicePatternsClient()
        {
            return Volatile.Read(ref _cachedServicePatterns) ?? Interlocked.CompareExchange(ref _cachedServicePatterns, new ServicePatterns(Pipeline, _endpoint), null) ?? _cachedServicePatterns;
        }

        /// <summary> Initializes a new instance of Connections. </summary>
        public virtual Connections GetConnectionsClient()
        {
            return Volatile.Read(ref _cachedConnections) ?? Interlocked.CompareExchange(ref _cachedConnections, new Connections(Pipeline, _endpoint), null) ?? _cachedConnections;
        }

        /// <summary> Initializes a new instance of Evaluations. </summary>
        public virtual Evaluations GetEvaluationsClient()
        {
            return Volatile.Read(ref _cachedEvaluations) ?? Interlocked.CompareExchange(ref _cachedEvaluations, new Evaluations(Pipeline, _endpoint), null) ?? _cachedEvaluations;
        }

        /// <summary> Initializes a new instance of Datasets. </summary>
        public virtual Datasets GetDatasetsClient()
        {
            return Volatile.Read(ref _cachedDatasets) ?? Interlocked.CompareExchange(ref _cachedDatasets, new Datasets(Pipeline, _endpoint), null) ?? _cachedDatasets;
        }

        /// <summary> Initializes a new instance of Indexes. </summary>
        public virtual Indexes GetIndexesClient()
        {
            return Volatile.Read(ref _cachedIndexes) ?? Interlocked.CompareExchange(ref _cachedIndexes, new Indexes(Pipeline, _endpoint), null) ?? _cachedIndexes;
        }

        /// <summary> Initializes a new instance of Deployments. </summary>
        public virtual Deployments GetDeploymentsClient()
        {
            return Volatile.Read(ref _cachedDeployments) ?? Interlocked.CompareExchange(ref _cachedDeployments, new Deployments(Pipeline, _endpoint), null) ?? _cachedDeployments;
        }

        /// <summary> Initializes a new instance of RedTeams. </summary>
        public virtual RedTeams GetRedTeamsClient()
        {
            return Volatile.Read(ref _cachedRedTeams) ?? Interlocked.CompareExchange(ref _cachedRedTeams, new RedTeams(Pipeline, _endpoint), null) ?? _cachedRedTeams;
        }
    }
}
