// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> Represents a request for a pending upload. </summary>
    public partial class PendingUploadRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PendingUploadRequest"/>. </summary>
        public PendingUploadRequest()
        {
        }

        /// <summary> Initializes a new instance of <see cref="PendingUploadRequest"/>. </summary>
        /// <param name="pendingUploadId"> If PendingUploadId is not provided, a random GUID will be used. </param>
        /// <param name="connectionName"> Azure Storage Account connection name to use for generating temporary SAS token. </param>
        /// <param name="pendingUploadType"> BlobReference is the only supported type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PendingUploadRequest(string pendingUploadId, string connectionName, PendingUploadType pendingUploadType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PendingUploadId = pendingUploadId;
            ConnectionName = connectionName;
            PendingUploadType = pendingUploadType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> If PendingUploadId is not provided, a random GUID will be used. </summary>
        public string PendingUploadId { get; set; }
        /// <summary> Azure Storage Account connection name to use for generating temporary SAS token. </summary>
        public string ConnectionName { get; set; }
        /// <summary> BlobReference is the only supported type. </summary>
        public PendingUploadType PendingUploadType { get; } = PendingUploadType.BlobReference;
    }
}
