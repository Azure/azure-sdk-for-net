// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects
{
    /// <summary> The Type (or category) of the connection. </summary>
    public readonly partial struct ConnectionType : IEquatable<ConnectionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConnectionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AzureOpenAIValue = "AzureOpenAI";
        private const string ServerlessValue = "Serverless";
        private const string AzureBlobStorageValue = "AzureBlob";
        private const string AzureAIServicesValue = "AIServices";
        private const string AzureAISearchValue = "CognitiveSearch";
        private const string APIKeyValue = "ApiKey";
        private const string CustomValue = "CustomKeys";
        private const string CognitiveServiceValue = "CognitiveService";

        /// <summary> Azure OpenAI Service. </summary>
        public static ConnectionType AzureOpenAI { get; } = new ConnectionType(AzureOpenAIValue);
        /// <summary> Serverless API Service. </summary>
        public static ConnectionType Serverless { get; } = new ConnectionType(ServerlessValue);
        /// <summary> Azure Blob Storage. </summary>
        public static ConnectionType AzureBlobStorage { get; } = new ConnectionType(AzureBlobStorageValue);
        /// <summary> Azure AI Services. </summary>
        public static ConnectionType AzureAIServices { get; } = new ConnectionType(AzureAIServicesValue);
        /// <summary> Azure AI Search. </summary>
        public static ConnectionType AzureAISearch { get; } = new ConnectionType(AzureAISearchValue);
        /// <summary> Generic connection that uses API Key authentication. </summary>
        public static ConnectionType APIKey { get; } = new ConnectionType(APIKeyValue);
        /// <summary> Generic connection that uses Custom authentication. </summary>
        public static ConnectionType Custom { get; } = new ConnectionType(CustomValue);
        /// <summary> Cognitive Service. </summary>
        public static ConnectionType CognitiveService { get; } = new ConnectionType(CognitiveServiceValue);
        /// <summary> Determines if two <see cref="ConnectionType"/> values are the same. </summary>
        public static bool operator ==(ConnectionType left, ConnectionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConnectionType"/> values are not the same. </summary>
        public static bool operator !=(ConnectionType left, ConnectionType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ConnectionType"/>. </summary>
        public static implicit operator ConnectionType(string value) => new ConnectionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConnectionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
