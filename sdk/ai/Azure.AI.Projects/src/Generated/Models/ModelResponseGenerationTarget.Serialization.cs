// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.Projects
{
    /// <summary> Evaluation target for generating responses using a given model and dataset. </summary>
    public partial class ModelResponseGenerationTarget : IJsonModel<ModelResponseGenerationTarget>
    {
        /// <summary> Initializes a new instance of <see cref="ModelResponseGenerationTarget"/> for deserialization. </summary>
        internal ModelResponseGenerationTarget()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ModelResponseGenerationTarget>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ModelResponseGenerationTarget>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ModelResponseGenerationTarget)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("baseMessages"u8);
            writer.WriteStartArray();
            foreach (Message item in BaseMessages)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("modelDeploymentName"u8);
            writer.WriteStringValue(ModelDeploymentName);
            writer.WritePropertyName("modelParams"u8);
            writer.WriteStartObject();
            foreach (var item in ModelParams)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
#if NET6_0_OR_GREATER
                writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ModelResponseGenerationTarget IJsonModel<ModelResponseGenerationTarget>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (ModelResponseGenerationTarget)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override EvaluationTarget JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ModelResponseGenerationTarget>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ModelResponseGenerationTarget)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeModelResponseGenerationTarget(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static ModelResponseGenerationTarget DeserializeModelResponseGenerationTarget(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EvaluationTargetType @type = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            IList<Message> baseMessages = default;
            string modelDeploymentName = default;
            IDictionary<string, BinaryData> modelParams = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    @type = new EvaluationTargetType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("baseMessages"u8))
                {
                    List<Message> array = new List<Message>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(Message.DeserializeMessage(item, options));
                    }
                    baseMessages = array;
                    continue;
                }
                if (prop.NameEquals("modelDeploymentName"u8))
                {
                    modelDeploymentName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("modelParams"u8))
                {
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, BinaryData.FromString(prop0.Value.GetRawText()));
                        }
                    }
                    modelParams = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new ModelResponseGenerationTarget(@type, additionalBinaryDataProperties, baseMessages, modelDeploymentName, modelParams);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ModelResponseGenerationTarget>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ModelResponseGenerationTarget>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIProjectsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ModelResponseGenerationTarget)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ModelResponseGenerationTarget IPersistableModel<ModelResponseGenerationTarget>.Create(BinaryData data, ModelReaderWriterOptions options) => (ModelResponseGenerationTarget)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override EvaluationTarget PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ModelResponseGenerationTarget>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeModelResponseGenerationTarget(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ModelResponseGenerationTarget)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ModelResponseGenerationTarget>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
