// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

namespace Azure.AI.Projects
{
    /// <summary> Evaluation target for generating responses using a given model and dataset. </summary>
    public partial class ModelResponseGenerationTarget : EvaluationTarget
    {
        /// <summary> Initializes a new instance of <see cref="ModelResponseGenerationTarget"/>. </summary>
        /// <param name="baseMessages"> A list of messages comprising the conversation so far. </param>
        /// <param name="modelDeploymentName"> The model deployment to be evaluated. Accepts either the deployment name alone or with the connection name as '{connectionName}/modelDeploymentName'. </param>
        /// <param name="modelParams"> Optional parameters passed to the model for evaluation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="baseMessages"/>, <paramref name="modelDeploymentName"/> or <paramref name="modelParams"/> is null. </exception>
        public ModelResponseGenerationTarget(IEnumerable<Message> baseMessages, string modelDeploymentName, IDictionary<string, BinaryData> modelParams) : base(EvaluationTargetType.ModelResponseGeneration)
        {
            Argument.AssertNotNull(baseMessages, nameof(baseMessages));
            Argument.AssertNotNull(modelDeploymentName, nameof(modelDeploymentName));
            Argument.AssertNotNull(modelParams, nameof(modelParams));

            BaseMessages = baseMessages.ToList();
            ModelDeploymentName = modelDeploymentName;
            ModelParams = modelParams;
        }

        /// <summary> Initializes a new instance of <see cref="ModelResponseGenerationTarget"/>. </summary>
        /// <param name="type"> Discriminator that defines the type of the evaluation target. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="baseMessages"> A list of messages comprising the conversation so far. </param>
        /// <param name="modelDeploymentName"> The model deployment to be evaluated. Accepts either the deployment name alone or with the connection name as '{connectionName}/modelDeploymentName'. </param>
        /// <param name="modelParams"> Optional parameters passed to the model for evaluation. </param>
        internal ModelResponseGenerationTarget(EvaluationTargetType @type, IDictionary<string, BinaryData> additionalBinaryDataProperties, IList<Message> baseMessages, string modelDeploymentName, IDictionary<string, BinaryData> modelParams) : base(@type, additionalBinaryDataProperties)
        {
            BaseMessages = baseMessages;
            ModelDeploymentName = modelDeploymentName;
            ModelParams = modelParams;
        }

        /// <summary> A list of messages comprising the conversation so far. </summary>
        public IList<Message> BaseMessages { get; }

        /// <summary> The model deployment to be evaluated. Accepts either the deployment name alone or with the connection name as '{connectionName}/modelDeploymentName'. </summary>
        public string ModelDeploymentName { get; set; }

        /// <summary>
        /// Optional parameters passed to the model for evaluation.
        /// <para> To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> ModelParams { get; }
    }
}
