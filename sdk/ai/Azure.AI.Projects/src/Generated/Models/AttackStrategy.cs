// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects
{
    /// <summary> Strategies for attacks. </summary>
    public readonly partial struct AttackStrategy : IEquatable<AttackStrategy>
    {
        private readonly string _value;
        /// <summary> Represents a default set of easy complexity attacks. Easy complexity attacks require less effort, such as translation of a prompt into some encoding, and does not require any Large Language Model to convert or orchestrate. </summary>
        private const string EasyValue = "easy";
        /// <summary> Represents a default set of moderate complexity attacks. Moderate complexity attacks require having access to resources such as another generative AI model. </summary>
        private const string ModerateValue = "moderate";
        /// <summary> Represents a default set of difficult complexity attacks. Difficult complexity attacks include attacks that require access to significant resources and effort to execute an attack such as knowledge of search-based algorithms in addition to a generative AI model. </summary>
        private const string DifficultValue = "difficult";
        /// <summary> Generates visual art using ASCII characters, often used for creative or obfuscation purposes. </summary>
        private const string AsciiArtValue = "ascii_art";
        /// <summary> Conceals data within ASCII characters, making it harder to detect. </summary>
        private const string AsciiSmugglerValue = "ascii_smuggler";
        /// <summary> Implements the Atbash cipher, a simple substitution cipher where each letter is mapped to its reverse. </summary>
        private const string AtbashValue = "atbash";
        /// <summary> Encodes binary data into a text format using Base64, commonly used for data transmission. </summary>
        private const string Base64Value = "base64";
        /// <summary> Converts text into binary code, representing data in a series of 0s and 1s. </summary>
        private const string BinaryValue = "binary";
        /// <summary> Applies the Caesar cipher, a substitution cipher that shifts characters by a fixed number of positions. </summary>
        private const string CaesarValue = "caesar";
        /// <summary> Alters text by adding spaces between characters, often used for obfuscation. </summary>
        private const string CharacterSpaceValue = "character_space";
        /// <summary> Injects specially crafted prompts to bypass AI safeguards, known as User Injected Prompt Attacks (UPIA). </summary>
        private const string JailbreakValue = "jailbreak";
        /// <summary> Utilizes ANSI escape sequences to manipulate text appearance and behavior. </summary>
        private const string AnsiiAttackValue = "ansii_attack";
        /// <summary> Swaps characters within text to create variations or obfuscate the original content. </summary>
        private const string CharacterSwapValue = "character_swap";
        /// <summary> Appends an adversarial suffix to the prompt. </summary>
        private const string SuffixAppendValue = "suffix_append";
        /// <summary> Joins multiple strings together, often used for concatenation or obfuscation. </summary>
        private const string StringJoinValue = "string_join";
        /// <summary> Uses Unicode characters that look similar to standard characters, creating visual confusion. </summary>
        private const string UnicodeConfusableValue = "unicode_confusable";
        /// <summary> Substitutes standard characters with Unicode equivalents, often for obfuscation. </summary>
        private const string UnicodeSubstitutionValue = "unicode_substitution";
        /// <summary> Adds diacritical marks to characters, changing their appearance and sometimes their meaning. </summary>
        private const string DiacriticValue = "diacritic";
        /// <summary> Flips characters from front to back, creating a mirrored effect. </summary>
        private const string FlipValue = "flip";
        /// <summary> Transforms text into Leetspeak, a form of encoding that replaces letters with similar-looking numbers or symbols. </summary>
        private const string LeetspeakValue = "leetspeak";
        /// <summary> Applies the ROT13 cipher, a simple substitution cipher that shifts characters by 13 positions. </summary>
        private const string ROT13Value = "rot13";
        /// <summary> Encodes text into Morse code, using dots and dashes to represent characters. </summary>
        private const string MorseValue = "morse";
        /// <summary> Encodes text into URL format. </summary>
        private const string UrlValue = "url";
        /// <summary> Represents the baseline direct adversarial probing, which is used by attack strategies as the attack objective. </summary>
        private const string BaselineValue = "baseline";

        /// <summary> Initializes a new instance of <see cref="AttackStrategy"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AttackStrategy(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Represents a default set of easy complexity attacks. Easy complexity attacks require less effort, such as translation of a prompt into some encoding, and does not require any Large Language Model to convert or orchestrate. </summary>
        public static AttackStrategy Easy { get; } = new AttackStrategy(EasyValue);

        /// <summary> Represents a default set of moderate complexity attacks. Moderate complexity attacks require having access to resources such as another generative AI model. </summary>
        public static AttackStrategy Moderate { get; } = new AttackStrategy(ModerateValue);

        /// <summary> Represents a default set of difficult complexity attacks. Difficult complexity attacks include attacks that require access to significant resources and effort to execute an attack such as knowledge of search-based algorithms in addition to a generative AI model. </summary>
        public static AttackStrategy Difficult { get; } = new AttackStrategy(DifficultValue);

        /// <summary> Generates visual art using ASCII characters, often used for creative or obfuscation purposes. </summary>
        public static AttackStrategy AsciiArt { get; } = new AttackStrategy(AsciiArtValue);

        /// <summary> Conceals data within ASCII characters, making it harder to detect. </summary>
        public static AttackStrategy AsciiSmuggler { get; } = new AttackStrategy(AsciiSmugglerValue);

        /// <summary> Implements the Atbash cipher, a simple substitution cipher where each letter is mapped to its reverse. </summary>
        public static AttackStrategy Atbash { get; } = new AttackStrategy(AtbashValue);

        /// <summary> Encodes binary data into a text format using Base64, commonly used for data transmission. </summary>
        public static AttackStrategy Base64 { get; } = new AttackStrategy(Base64Value);

        /// <summary> Converts text into binary code, representing data in a series of 0s and 1s. </summary>
        public static AttackStrategy Binary { get; } = new AttackStrategy(BinaryValue);

        /// <summary> Applies the Caesar cipher, a substitution cipher that shifts characters by a fixed number of positions. </summary>
        public static AttackStrategy Caesar { get; } = new AttackStrategy(CaesarValue);

        /// <summary> Alters text by adding spaces between characters, often used for obfuscation. </summary>
        public static AttackStrategy CharacterSpace { get; } = new AttackStrategy(CharacterSpaceValue);

        /// <summary> Injects specially crafted prompts to bypass AI safeguards, known as User Injected Prompt Attacks (UPIA). </summary>
        public static AttackStrategy Jailbreak { get; } = new AttackStrategy(JailbreakValue);

        /// <summary> Utilizes ANSI escape sequences to manipulate text appearance and behavior. </summary>
        public static AttackStrategy AnsiiAttack { get; } = new AttackStrategy(AnsiiAttackValue);

        /// <summary> Swaps characters within text to create variations or obfuscate the original content. </summary>
        public static AttackStrategy CharacterSwap { get; } = new AttackStrategy(CharacterSwapValue);

        /// <summary> Appends an adversarial suffix to the prompt. </summary>
        public static AttackStrategy SuffixAppend { get; } = new AttackStrategy(SuffixAppendValue);

        /// <summary> Joins multiple strings together, often used for concatenation or obfuscation. </summary>
        public static AttackStrategy StringJoin { get; } = new AttackStrategy(StringJoinValue);

        /// <summary> Uses Unicode characters that look similar to standard characters, creating visual confusion. </summary>
        public static AttackStrategy UnicodeConfusable { get; } = new AttackStrategy(UnicodeConfusableValue);

        /// <summary> Substitutes standard characters with Unicode equivalents, often for obfuscation. </summary>
        public static AttackStrategy UnicodeSubstitution { get; } = new AttackStrategy(UnicodeSubstitutionValue);

        /// <summary> Adds diacritical marks to characters, changing their appearance and sometimes their meaning. </summary>
        public static AttackStrategy Diacritic { get; } = new AttackStrategy(DiacriticValue);

        /// <summary> Flips characters from front to back, creating a mirrored effect. </summary>
        public static AttackStrategy Flip { get; } = new AttackStrategy(FlipValue);

        /// <summary> Transforms text into Leetspeak, a form of encoding that replaces letters with similar-looking numbers or symbols. </summary>
        public static AttackStrategy Leetspeak { get; } = new AttackStrategy(LeetspeakValue);

        /// <summary> Applies the ROT13 cipher, a simple substitution cipher that shifts characters by 13 positions. </summary>
        public static AttackStrategy ROT13 { get; } = new AttackStrategy(ROT13Value);

        /// <summary> Encodes text into Morse code, using dots and dashes to represent characters. </summary>
        public static AttackStrategy Morse { get; } = new AttackStrategy(MorseValue);

        /// <summary> Encodes text into URL format. </summary>
        public static AttackStrategy Url { get; } = new AttackStrategy(UrlValue);

        /// <summary> Represents the baseline direct adversarial probing, which is used by attack strategies as the attack objective. </summary>
        public static AttackStrategy Baseline { get; } = new AttackStrategy(BaselineValue);

        /// <summary> Determines if two <see cref="AttackStrategy"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(AttackStrategy left, AttackStrategy right) => left.Equals(right);

        /// <summary> Determines if two <see cref="AttackStrategy"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(AttackStrategy left, AttackStrategy right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="AttackStrategy"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator AttackStrategy(string value) => new AttackStrategy(value);

        /// <summary> Converts a string to a <see cref="AttackStrategy"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator AttackStrategy?(string value) => value == null ? null : new AttackStrategy(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AttackStrategy other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(AttackStrategy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
