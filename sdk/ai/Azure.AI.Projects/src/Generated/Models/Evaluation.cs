// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> Evaluation Definition. </summary>
    public partial class Evaluation
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="Evaluation"/>. </summary>
        /// <param name="data"> Data for evaluation. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> or <paramref name="evaluators"/> is null. </exception>
        public Evaluation(InputData data, IDictionary<string, EvaluatorConfiguration> evaluators)
        {
            Argument.AssertNotNull(data, nameof(data));
            Argument.AssertNotNull(evaluators, nameof(evaluators));

            Data = data;
            Tags = new ChangeTrackingDictionary<string, string>();
            Properties = new ChangeTrackingDictionary<string, string>();
            Evaluators = evaluators;
        }

        /// <summary> Initializes a new instance of <see cref="Evaluation"/>. </summary>
        /// <param name="name"> Identifier of the evaluation. </param>
        /// <param name="data"> Data for evaluation. </param>
        /// <param name="displayName"> Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. </param>
        /// <param name="description"> Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. </param>
        /// <param name="status"> Status of the evaluation. It is set by service and is read-only. </param>
        /// <param name="tags"> Evaluation's tags. Unlike properties, tags are fully mutable. </param>
        /// <param name="properties"> Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <param name="target"> Specifies the type and configuration of the entity used for this evaluation. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal Evaluation(string name, InputData data, string displayName, string description, string status, IDictionary<string, string> tags, IDictionary<string, string> properties, IDictionary<string, EvaluatorConfiguration> evaluators, EvaluationTarget target, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Name = name;
            Data = data;
            DisplayName = displayName;
            Description = description;
            Status = status;
            Tags = tags;
            Properties = properties;
            Evaluators = evaluators;
            Target = target;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Identifier of the evaluation. </summary>
        public string Name { get; }

        /// <summary> Data for evaluation. </summary>
        public InputData Data { get; set; }

        /// <summary> Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. </summary>
        public string DisplayName { get; set; }

        /// <summary> Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. </summary>
        public string Description { get; set; }

        /// <summary> Status of the evaluation. It is set by service and is read-only. </summary>
        public string Status { get; }

        /// <summary> Evaluation's tags. Unlike properties, tags are fully mutable. </summary>
        public IDictionary<string, string> Tags { get; }

        /// <summary> Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </summary>
        public IDictionary<string, string> Properties { get; }

        /// <summary> Evaluators to be used for the evaluation. </summary>
        public IDictionary<string, EvaluatorConfiguration> Evaluators { get; }

        /// <summary> Specifies the type and configuration of the entity used for this evaluation. </summary>
        public EvaluationTarget Target { get; set; }
    }
}
