// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects
{
    /// <summary> The Type (or category) of the connection. </summary>
    public readonly partial struct ConnectionType : IEquatable<ConnectionType>
    {
        private readonly string _value;
        /// <summary> Azure OpenAI Service. </summary>
        private const string AzureOpenAIValue = "AzureOpenAI";
        /// <summary> Azure Blob Storage, with specified container. </summary>
        private const string AzureBlobStorageValue = "AzureBlob";
        /// <summary> Azure Blob Storage, with container not specified (used by Agents). </summary>
        private const string AzureStorageAccountValue = "AzureStorageAccount";
        /// <summary> Azure AI Search. </summary>
        private const string AzureAISearchValue = "CognitiveSearch";
        /// <summary> CosmosDB. </summary>
        private const string CosmosDBValue = "CosmosDB";
        /// <summary> Generic connection that uses API Key authentication. </summary>
        private const string APIKeyValue = "ApiKey";
        /// <summary> Application Configuration. </summary>
        private const string ApplicationConfigurationValue = "AppConfig";
        /// <summary> Application Insights. </summary>
        private const string ApplicationInsightsValue = "AppInsights";
        /// <summary> Custom Keys. </summary>
        private const string CustomValue = "CustomKeys";

        /// <summary> Initializes a new instance of <see cref="ConnectionType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectionType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Azure OpenAI Service. </summary>
        public static ConnectionType AzureOpenAI { get; } = new ConnectionType(AzureOpenAIValue);

        /// <summary> Azure Blob Storage, with specified container. </summary>
        public static ConnectionType AzureBlobStorage { get; } = new ConnectionType(AzureBlobStorageValue);

        /// <summary> Azure Blob Storage, with container not specified (used by Agents). </summary>
        public static ConnectionType AzureStorageAccount { get; } = new ConnectionType(AzureStorageAccountValue);

        /// <summary> Azure AI Search. </summary>
        public static ConnectionType AzureAISearch { get; } = new ConnectionType(AzureAISearchValue);

        /// <summary> CosmosDB. </summary>
        public static ConnectionType CosmosDB { get; } = new ConnectionType(CosmosDBValue);

        /// <summary> Generic connection that uses API Key authentication. </summary>
        public static ConnectionType APIKey { get; } = new ConnectionType(APIKeyValue);

        /// <summary> Application Configuration. </summary>
        public static ConnectionType ApplicationConfiguration { get; } = new ConnectionType(ApplicationConfigurationValue);

        /// <summary> Application Insights. </summary>
        public static ConnectionType ApplicationInsights { get; } = new ConnectionType(ApplicationInsightsValue);

        /// <summary> Custom Keys. </summary>
        public static ConnectionType Custom { get; } = new ConnectionType(CustomValue);

        /// <summary> Determines if two <see cref="ConnectionType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ConnectionType left, ConnectionType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="ConnectionType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ConnectionType left, ConnectionType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="ConnectionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ConnectionType(string value) => new ConnectionType(value);

        /// <summary> Converts a string to a <see cref="ConnectionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ConnectionType?(string value) => value == null ? null : new ConnectionType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectionType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(ConnectionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
