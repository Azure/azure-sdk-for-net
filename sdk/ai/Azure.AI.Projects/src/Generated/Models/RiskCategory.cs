// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects
{
    /// <summary> Risk category for the attack objective. </summary>
    public readonly partial struct RiskCategory : IEquatable<RiskCategory>
    {
        private readonly string _value;
        /// <summary> Represents content related to hate or unfairness. </summary>
        private const string HateUnfairnessValue = "HateUnfairness";
        /// <summary> Represents content related to violence. </summary>
        private const string ViolenceValue = "Violence";
        /// <summary> Represents content of a sexual nature. </summary>
        private const string SexualValue = "Sexual";
        /// <summary> Represents content related to self-harm. </summary>
        private const string SelfHarmValue = "SelfHarm";

        /// <summary> Initializes a new instance of <see cref="RiskCategory"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RiskCategory(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Represents content related to hate or unfairness. </summary>
        public static RiskCategory HateUnfairness { get; } = new RiskCategory(HateUnfairnessValue);

        /// <summary> Represents content related to violence. </summary>
        public static RiskCategory Violence { get; } = new RiskCategory(ViolenceValue);

        /// <summary> Represents content of a sexual nature. </summary>
        public static RiskCategory Sexual { get; } = new RiskCategory(SexualValue);

        /// <summary> Represents content related to self-harm. </summary>
        public static RiskCategory SelfHarm { get; } = new RiskCategory(SelfHarmValue);

        /// <summary> Determines if two <see cref="RiskCategory"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(RiskCategory left, RiskCategory right) => left.Equals(right);

        /// <summary> Determines if two <see cref="RiskCategory"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(RiskCategory left, RiskCategory right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="RiskCategory"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator RiskCategory(string value) => new RiskCategory(value);

        /// <summary> Converts a string to a <see cref="RiskCategory"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator RiskCategory?(string value) => value == null ? null : new RiskCategory(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RiskCategory other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(RiskCategory other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
