// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary>  File search tool call result. </summary>
    public partial class RunStepFileSearchToolCallResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RunStepFileSearchToolCallResult"/>. </summary>
        /// <param name="fileId"> The ID of the file that result was found in. </param>
        /// <param name="fileName"> The name of the file that result was found in. </param>
        /// <param name="score"> The score of the result. All values must be a floating point number between 0 and 1. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fileId"/> or <paramref name="fileName"/> is null. </exception>
        internal RunStepFileSearchToolCallResult(string fileId, string fileName, float score)
        {
            Argument.AssertNotNull(fileId, nameof(fileId));
            Argument.AssertNotNull(fileName, nameof(fileName));

            FileId = fileId;
            FileName = fileName;
            Score = score;
            Content = new ChangeTrackingList<FileSearchToolCallContent>();
        }

        /// <summary> Initializes a new instance of <see cref="RunStepFileSearchToolCallResult"/>. </summary>
        /// <param name="fileId"> The ID of the file that result was found in. </param>
        /// <param name="fileName"> The name of the file that result was found in. </param>
        /// <param name="score"> The score of the result. All values must be a floating point number between 0 and 1. </param>
        /// <param name="content"> The content of the result that was found. The content is only included if requested via the include query parameter. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RunStepFileSearchToolCallResult(string fileId, string fileName, float score, IReadOnlyList<FileSearchToolCallContent> content, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FileId = fileId;
            FileName = fileName;
            Score = score;
            Content = content;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RunStepFileSearchToolCallResult"/> for deserialization. </summary>
        internal RunStepFileSearchToolCallResult()
        {
        }

        /// <summary> The ID of the file that result was found in. </summary>
        public string FileId { get; }
        /// <summary> The name of the file that result was found in. </summary>
        public string FileName { get; }
        /// <summary> The score of the result. All values must be a floating point number between 0 and 1. </summary>
        public float Score { get; }
        /// <summary> The content of the result that was found. The content is only included if requested via the include query parameter. </summary>
        public IReadOnlyList<FileSearchToolCallContent> Content { get; }
    }
}
