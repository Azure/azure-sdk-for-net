// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Projects
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIProjectsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Projects.AzureFunctionBinding"/>. </summary>
        /// <param name="type"> The type of binding, which is always 'storage_queue'. </param>
        /// <param name="storageQueue"> Storage queue. </param>
        /// <returns> A new <see cref="Projects.AzureFunctionBinding"/> instance for mocking. </returns>
        public static AzureFunctionBinding AzureFunctionBinding(AzureFunctionBindingType type = default, AzureFunctionStorageQueue storageQueue = null)
        {
            return new AzureFunctionBinding(type, storageQueue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.ResponseFormatJsonSchemaType"/>. </summary>
        /// <param name="type"> Type. </param>
        /// <param name="jsonSchema"> The JSON schema, describing response format. </param>
        /// <returns> A new <see cref="Projects.ResponseFormatJsonSchemaType"/> instance for mocking. </returns>
        public static ResponseFormatJsonSchemaType ResponseFormatJsonSchemaType(ResponseFormatJsonSchemaTypeType type = default, ResponseFormatJsonSchema jsonSchema = null)
        {
            return new ResponseFormatJsonSchemaType(type, jsonSchema, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.ThreadMessageOptions"/>. </summary>
        /// <param name="role">
        /// The role of the entity that is creating the message. Allowed values include:
        /// `user`, which indicates the message is sent by an actual user (and should be
        /// used in most cases to represent user-generated messages), and `assistant`,
        /// which indicates the message is generated by the agent (use this value to insert
        /// messages from the agent into the conversation).
        /// </param>
        /// <param name="content">
        /// The content of the initial message. This may be a basic string (if you only
        /// need text) or an array of typed content blocks (for example, text, image_file,
        /// image_url, and so on).
        /// </param>
        /// <param name="attachments"> A list of files attached to the message, and the tools they should be added to. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Projects.ThreadMessageOptions"/> instance for mocking. </returns>
        public static ThreadMessageOptions ThreadMessageOptions(MessageRole role = default, BinaryData content = null, IEnumerable<MessageAttachment> attachments = null, IDictionary<string, string> metadata = null)
        {
            attachments ??= new List<MessageAttachment>();
            metadata ??= new Dictionary<string, string>();

            return new ThreadMessageOptions(role, content, attachments?.ToList(), metadata, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.MessageInputTextBlock"/>. </summary>
        /// <param name="text"> The plain text content for this block. </param>
        /// <returns> A new <see cref="Projects.MessageInputTextBlock"/> instance for mocking. </returns>
        public static MessageInputTextBlock MessageInputTextBlock(string text = null)
        {
            return new MessageInputTextBlock(MessageBlockType.Text, serializedAdditionalRawData: null, text);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.MessageInputImageFileBlock"/>. </summary>
        /// <param name="imageFile"> Information about the referenced image file, including file ID and optional detail level. </param>
        /// <returns> A new <see cref="Projects.MessageInputImageFileBlock"/> instance for mocking. </returns>
        public static MessageInputImageFileBlock MessageInputImageFileBlock(MessageImageFileParam imageFile = null)
        {
            return new MessageInputImageFileBlock(MessageBlockType.ImageFile, serializedAdditionalRawData: null, imageFile);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.MessageImageFileParam"/>. </summary>
        /// <param name="fileId"> The ID of the previously uploaded image file. </param>
        /// <param name="detail"> Optional detail level for the image (auto, low, or high). </param>
        /// <returns> A new <see cref="Projects.MessageImageFileParam"/> instance for mocking. </returns>
        public static MessageImageFileParam MessageImageFileParam(string fileId = null, ImageDetailLevel? detail = null)
        {
            return new MessageImageFileParam(fileId, detail, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.MessageInputImageUrlBlock"/>. </summary>
        /// <param name="imageUrl"> Information about the external image URL, including the URL and optional detail level. </param>
        /// <returns> A new <see cref="Projects.MessageInputImageUrlBlock"/> instance for mocking. </returns>
        public static MessageInputImageUrlBlock MessageInputImageUrlBlock(MessageImageUrlParam imageUrl = null)
        {
            return new MessageInputImageUrlBlock(MessageBlockType.ImageUrl, serializedAdditionalRawData: null, imageUrl);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.MessageImageUrlParam"/>. </summary>
        /// <param name="url"> The publicly accessible URL of the external image. </param>
        /// <param name="detail"> Optional detail level for the image (auto, low, or high). Defaults to 'auto' if not specified. </param>
        /// <returns> A new <see cref="Projects.MessageImageUrlParam"/> instance for mocking. </returns>
        public static MessageImageUrlParam MessageImageUrlParam(string url = null, ImageDetailLevel? detail = null)
        {
            return new MessageImageUrlParam(url, detail, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.MessageIncompleteDetails"/>. </summary>
        /// <param name="reason"> The provided reason describing why the message was marked as incomplete. </param>
        /// <returns> A new <see cref="Projects.MessageIncompleteDetails"/> instance for mocking. </returns>
        public static MessageIncompleteDetails MessageIncompleteDetails(MessageIncompleteDetailsReason reason = default)
        {
            return new MessageIncompleteDetails(reason, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.MessageTextAnnotation"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="text"> The textual content associated with this text annotation item. </param>
        /// <returns> A new <see cref="Projects.MessageTextAnnotation"/> instance for mocking. </returns>
        public static MessageTextAnnotation MessageTextAnnotation(string type = null, string text = null)
        {
            return new UnknownMessageTextAnnotation(type, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.MessageTextUrlCitationAnnotation"/>. </summary>
        /// <param name="text"> The textual content associated with this text annotation item. </param>
        /// <param name="urlCitation"> The details of the URL citation. </param>
        /// <param name="startIndex"> The first text index associated with this text annotation. </param>
        /// <param name="endIndex"> The last text index associated with this text annotation. </param>
        /// <returns> A new <see cref="Projects.MessageTextUrlCitationAnnotation"/> instance for mocking. </returns>
        public static MessageTextUrlCitationAnnotation MessageTextUrlCitationAnnotation(string text = null, MessageTextUrlCitationDetails urlCitation = null, int? startIndex = null, int? endIndex = null)
        {
            return new MessageTextUrlCitationAnnotation(
                "url_citation",
                text,
                serializedAdditionalRawData: null,
                urlCitation,
                startIndex,
                endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.MessageTextUrlCitationDetails"/>. </summary>
        /// <param name="url"> The URL associated with this citation. </param>
        /// <param name="title"> The title of the URL. </param>
        /// <returns> A new <see cref="Projects.MessageTextUrlCitationDetails"/> instance for mocking. </returns>
        public static MessageTextUrlCitationDetails MessageTextUrlCitationDetails(string url = null, string title = null)
        {
            return new MessageTextUrlCitationDetails(url, title, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RequiredToolCall"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when submitting tool outputs. </param>
        /// <returns> A new <see cref="Projects.RequiredToolCall"/> instance for mocking. </returns>
        public static RequiredToolCall RequiredToolCall(string type = null, string id = null)
        {
            return new UnknownRequiredToolCall(type, serializedAdditionalRawData: null, id);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunError"/>. </summary>
        /// <param name="code"> The status for the error. </param>
        /// <param name="message"> The human-readable text associated with the error. </param>
        /// <returns> A new <see cref="Projects.RunError"/> instance for mocking. </returns>
        public static RunError RunError(string code = null, string message = null)
        {
            return new RunError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.IncompleteRunDetails"/>. </summary>
        /// <param name="reason"> The reason why the run is incomplete. This indicates which specific token limit was reached during the run. </param>
        /// <returns> A new <see cref="Projects.IncompleteRunDetails"/> instance for mocking. </returns>
        public static IncompleteRunDetails IncompleteRunDetails(IncompleteDetailsReason reason = default)
        {
            return new IncompleteRunDetails(reason, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunCompletionUsage"/>. </summary>
        /// <param name="completionTokens"> Number of completion tokens used over the course of the run. </param>
        /// <param name="promptTokens"> Number of prompt tokens used over the course of the run. </param>
        /// <param name="totalTokens"> Total number of tokens used (prompt + completion). </param>
        /// <returns> A new <see cref="Projects.RunCompletionUsage"/> instance for mocking. </returns>
        public static RunCompletionUsage RunCompletionUsage(long completionTokens = default, long promptTokens = default, long totalTokens = default)
        {
            return new RunCompletionUsage(completionTokens, promptTokens, totalTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepMessageCreationDetails"/>. </summary>
        /// <param name="messageCreation"> Information about the message creation associated with this run step. </param>
        /// <returns> A new <see cref="Projects.RunStepMessageCreationDetails"/> instance for mocking. </returns>
        public static RunStepMessageCreationDetails RunStepMessageCreationDetails(RunStepMessageCreationReference messageCreation = null)
        {
            return new RunStepMessageCreationDetails(RunStepType.MessageCreation, serializedAdditionalRawData: null, messageCreation);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepMessageCreationReference"/>. </summary>
        /// <param name="messageId"> The ID of the message created by this run step. </param>
        /// <returns> A new <see cref="Projects.RunStepMessageCreationReference"/> instance for mocking. </returns>
        public static RunStepMessageCreationReference RunStepMessageCreationReference(string messageId = null)
        {
            return new RunStepMessageCreationReference(messageId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepToolCallDetails"/>. </summary>
        /// <param name="toolCalls">
        /// A list of tool call details for this run step.
        /// Please note <see cref="Projects.RunStepToolCall"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Projects.RunStepAzureAISearchToolCall"/>, <see cref="Projects.RunStepCustomSearchToolCall"/>, <see cref="Projects.RunStepBingGroundingToolCall"/>, <see cref="RunStepCodeInterpreterToolCall"/>, <see cref="Projects.RunStepMicrosoftFabricToolCall"/>, <see cref="Projects.RunStepFileSearchToolCall"/>, <see cref="RunStepFunctionToolCall"/>, <see cref="Projects.RunStepOpenAPIToolCall"/> and <see cref="Projects.RunStepSharepointToolCall"/>.
        /// </param>
        /// <returns> A new <see cref="Projects.RunStepToolCallDetails"/> instance for mocking. </returns>
        public static RunStepToolCallDetails RunStepToolCallDetails(IEnumerable<RunStepToolCall> toolCalls = null)
        {
            toolCalls ??= new List<RunStepToolCall>();

            return new RunStepToolCallDetails(RunStepType.ToolCalls, serializedAdditionalRawData: null, toolCalls?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepToolCall"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <returns> A new <see cref="Projects.RunStepToolCall"/> instance for mocking. </returns>
        public static RunStepToolCall RunStepToolCall(string type = null, string id = null)
        {
            return new UnknownRunStepToolCall(type, id, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepCodeInterpreterLogOutput"/>. </summary>
        /// <param name="logs"> The serialized log output emitted by the code interpreter. </param>
        /// <returns> A new <see cref="Projects.RunStepCodeInterpreterLogOutput"/> instance for mocking. </returns>
        public static RunStepCodeInterpreterLogOutput RunStepCodeInterpreterLogOutput(string logs = null)
        {
            return new RunStepCodeInterpreterLogOutput("logs", serializedAdditionalRawData: null, logs);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepCodeInterpreterImageOutput"/>. </summary>
        /// <param name="image"> Referential information for the image associated with this output. </param>
        /// <returns> A new <see cref="Projects.RunStepCodeInterpreterImageOutput"/> instance for mocking. </returns>
        public static RunStepCodeInterpreterImageOutput RunStepCodeInterpreterImageOutput(RunStepCodeInterpreterImageReference image = null)
        {
            return new RunStepCodeInterpreterImageOutput("image", serializedAdditionalRawData: null, image);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepCodeInterpreterImageReference"/>. </summary>
        /// <param name="fileId"> The ID of the file associated with this image. </param>
        /// <returns> A new <see cref="Projects.RunStepCodeInterpreterImageReference"/> instance for mocking. </returns>
        public static RunStepCodeInterpreterImageReference RunStepCodeInterpreterImageReference(string fileId = null)
        {
            return new RunStepCodeInterpreterImageReference(fileId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepFileSearchToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="fileSearch"> For now, this is always going to be an empty object. </param>
        /// <returns> A new <see cref="Projects.RunStepFileSearchToolCall"/> instance for mocking. </returns>
        public static RunStepFileSearchToolCall RunStepFileSearchToolCall(string id = null, RunStepFileSearchToolCallResults fileSearch = null)
        {
            return new RunStepFileSearchToolCall("file_search", id, serializedAdditionalRawData: null, fileSearch);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepFileSearchToolCallResults"/>. </summary>
        /// <param name="rankingOptions"> Ranking options for file search. </param>
        /// <param name="results"> The array of a file search results. </param>
        /// <returns> A new <see cref="Projects.RunStepFileSearchToolCallResults"/> instance for mocking. </returns>
        public static RunStepFileSearchToolCallResults RunStepFileSearchToolCallResults(FileSearchRankingOptions rankingOptions = null, IEnumerable<RunStepFileSearchToolCallResult> results = null)
        {
            results ??= new List<RunStepFileSearchToolCallResult>();

            return new RunStepFileSearchToolCallResults(rankingOptions, results?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepFileSearchToolCallResult"/>. </summary>
        /// <param name="fileId"> The ID of the file that result was found in. </param>
        /// <param name="fileName"> The name of the file that result was found in. </param>
        /// <param name="score"> The score of the result. All values must be a floating point number between 0 and 1. </param>
        /// <param name="content"> The content of the result that was found. The content is only included if requested via the include query parameter. </param>
        /// <returns> A new <see cref="Projects.RunStepFileSearchToolCallResult"/> instance for mocking. </returns>
        public static RunStepFileSearchToolCallResult RunStepFileSearchToolCallResult(string fileId = null, string fileName = null, float score = default, IEnumerable<FileSearchToolCallContent> content = null)
        {
            content ??= new List<FileSearchToolCallContent>();

            return new RunStepFileSearchToolCallResult(fileId, fileName, score, content?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.FileSearchToolCallContent"/>. </summary>
        /// <param name="type"> The type of the content. </param>
        /// <param name="text"> The text content of the file. </param>
        /// <returns> A new <see cref="Projects.FileSearchToolCallContent"/> instance for mocking. </returns>
        public static FileSearchToolCallContent FileSearchToolCallContent(FileSearchToolCallContentType type = default, string text = null)
        {
            return new FileSearchToolCallContent(type, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepBingGroundingToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="bingGrounding"> Reserved for future use. </param>
        /// <returns> A new <see cref="Projects.RunStepBingGroundingToolCall"/> instance for mocking. </returns>
        public static RunStepBingGroundingToolCall RunStepBingGroundingToolCall(string id = null, IReadOnlyDictionary<string, string> bingGrounding = null)
        {
            bingGrounding ??= new Dictionary<string, string>();

            return new RunStepBingGroundingToolCall("bing_grounding", id, serializedAdditionalRawData: null, bingGrounding);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepAzureAISearchToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="azureAISearch"> Reserved for future use. </param>
        /// <returns> A new <see cref="Projects.RunStepAzureAISearchToolCall"/> instance for mocking. </returns>
        public static RunStepAzureAISearchToolCall RunStepAzureAISearchToolCall(string id = null, IReadOnlyDictionary<string, string> azureAISearch = null)
        {
            azureAISearch ??= new Dictionary<string, string>();

            return new RunStepAzureAISearchToolCall("azure_ai_search", id, serializedAdditionalRawData: null, azureAISearch);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepSharepointToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="sharePoint"> Reserved for future use. </param>
        /// <returns> A new <see cref="Projects.RunStepSharepointToolCall"/> instance for mocking. </returns>
        public static RunStepSharepointToolCall RunStepSharepointToolCall(string id = null, IReadOnlyDictionary<string, string> sharePoint = null)
        {
            sharePoint ??= new Dictionary<string, string>();

            return new RunStepSharepointToolCall("sharepoint_grounding", id, serializedAdditionalRawData: null, sharePoint);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepMicrosoftFabricToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="microsoftFabric"> Reserved for future use. </param>
        /// <returns> A new <see cref="Projects.RunStepMicrosoftFabricToolCall"/> instance for mocking. </returns>
        public static RunStepMicrosoftFabricToolCall RunStepMicrosoftFabricToolCall(string id = null, IReadOnlyDictionary<string, string> microsoftFabric = null)
        {
            microsoftFabric ??= new Dictionary<string, string>();

            return new RunStepMicrosoftFabricToolCall("fabric_dataagent", id, serializedAdditionalRawData: null, microsoftFabric);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepCustomSearchToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="bingCustomSearch"> Reserved for future use. </param>
        /// <returns> A new <see cref="Projects.RunStepCustomSearchToolCall"/> instance for mocking. </returns>
        public static RunStepCustomSearchToolCall RunStepCustomSearchToolCall(string id = null, IReadOnlyDictionary<string, string> bingCustomSearch = null)
        {
            bingCustomSearch ??= new Dictionary<string, string>();

            return new RunStepCustomSearchToolCall("bing_custom_search", id, serializedAdditionalRawData: null, bingCustomSearch);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepOpenAPIToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="openAPI"> Reserved for future use. </param>
        /// <returns> A new <see cref="Projects.RunStepOpenAPIToolCall"/> instance for mocking. </returns>
        public static RunStepOpenAPIToolCall RunStepOpenAPIToolCall(string id = null, IReadOnlyDictionary<string, string> openAPI = null)
        {
            openAPI ??= new Dictionary<string, string>();

            return new RunStepOpenAPIToolCall("openapi", id, serializedAdditionalRawData: null, openAPI);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepError"/>. </summary>
        /// <param name="code"> The error code for this error. </param>
        /// <param name="message"> The human-readable text associated with this error. </param>
        /// <returns> A new <see cref="Projects.RunStepError"/> instance for mocking. </returns>
        public static RunStepError RunStepError(RunStepErrorCode code = default, string message = null)
        {
            return new RunStepError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RunStepCompletionUsage"/>. </summary>
        /// <param name="completionTokens"> Number of completion tokens used over the course of the run step. </param>
        /// <param name="promptTokens"> Number of prompt tokens used over the course of the run step. </param>
        /// <param name="totalTokens"> Total number of tokens used (prompt + completion). </param>
        /// <returns> A new <see cref="Projects.RunStepCompletionUsage"/> instance for mocking. </returns>
        public static RunStepCompletionUsage RunStepCompletionUsage(long completionTokens = default, long promptTokens = default, long totalTokens = default)
        {
            return new RunStepCompletionUsage(completionTokens, promptTokens, totalTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.AgentPageableListOfVectorStore"/>. </summary>
        /// <param name="object"> The object type, which is always list. </param>
        /// <param name="data"> The requested list of items. </param>
        /// <param name="firstId"> The first ID represented in this list. </param>
        /// <param name="lastId"> The last ID represented in this list. </param>
        /// <param name="hasMore"> A value indicating whether there are additional values available not captured in this list. </param>
        /// <returns> A new <see cref="Projects.AgentPageableListOfVectorStore"/> instance for mocking. </returns>
        public static AgentPageableListOfVectorStore AgentPageableListOfVectorStore(AgentPageableListOfVectorStoreObject @object = default, IEnumerable<VectorStore> data = null, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<VectorStore>();

            return new AgentPageableListOfVectorStore(
                @object,
                data?.ToList(),
                firstId,
                lastId,
                hasMore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.VectorStore"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store`. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store was created. </param>
        /// <param name="name"> The name of the vector store. </param>
        /// <param name="usageBytes"> The total number of bytes used by the files in the vector store. </param>
        /// <param name="fileCounts"> Files count grouped by status processed or being processed by this vector store. </param>
        /// <param name="status"> The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use. </param>
        /// <param name="expiresAfter"> Details on when this vector store expires. </param>
        /// <param name="expiresAt"> The Unix timestamp (in seconds) for when the vector store will expire. </param>
        /// <param name="lastActiveAt"> The Unix timestamp (in seconds) for when the vector store was last active. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Projects.VectorStore"/> instance for mocking. </returns>
        public static VectorStore VectorStore(string id = null, VectorStoreObject @object = default, DateTimeOffset createdAt = default, string name = null, int usageBytes = default, VectorStoreFileCount fileCounts = null, VectorStoreStatus status = default, VectorStoreExpirationPolicy expiresAfter = null, DateTimeOffset? expiresAt = null, DateTimeOffset? lastActiveAt = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new Connection(
                name,
                type,
                target,
                isDefault,
                credentials,
                metadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.ApiKeyCredentials"/>. </summary>
        /// <param name="apiKey"> API Key. </param>
        /// <returns> A new <see cref="Projects.ApiKeyCredentials"/> instance for mocking. </returns>
        public static ApiKeyCredentials ApiKeyCredentials(string apiKey = null)
        {
            return new ApiKeyCredentials(CredentialType.ApiKey, serializedAdditionalRawData: null, apiKey);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.CustomCredential"/>. </summary>
        /// <param name="keys"> The credential type. </param>
        /// <returns> A new <see cref="Projects.CustomCredential"/> instance for mocking. </returns>
        public static CustomCredential CustomCredential(IReadOnlyDictionary<string, string> keys = null)
        {
            keys ??= new Dictionary<string, string>();

            return new CustomCredential(CredentialType.Custom, serializedAdditionalRawData: null, keys);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.SASCredentials"/>. </summary>
        /// <param name="sasToken"> SAS token. </param>
        /// <returns> A new <see cref="Projects.SASCredentials"/> instance for mocking. </returns>
        public static SASCredentials SASCredentials(string sasToken = null)
        {
            return new SASCredentials(CredentialType.SAS, serializedAdditionalRawData: null, sasToken);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.Evaluation"/>. </summary>
        /// <param name="name"> Identifier of the evaluation. </param>
        /// <param name="data">
        /// Data for evaluation.
        /// Please note <see cref="InputData"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="InputDataset"/>.
        /// </param>
        /// <param name="displayName"> Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. </param>
        /// <param name="description"> Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. </param>
        /// <param name="status"> Status of the evaluation. It is set by service and is read-only. </param>
        /// <param name="tags"> Evaluation's tags. Unlike properties, tags are fully mutable. </param>
        /// <param name="properties"> Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <returns> A new <see cref="Projects.Evaluation"/> instance for mocking. </returns>
        public static Evaluation Evaluation(string name = null, InputData data = null, string displayName = null, string description = null, string status = null, IDictionary<string, string> tags = null, IDictionary<string, string> properties = null, IDictionary<string, EvaluatorConfiguration> evaluators = null)
        {
            tags ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();
            evaluators ??= new Dictionary<string, EvaluatorConfiguration>();

            return new Evaluation(
                name,
                data,
                displayName,
                description,
                status,
                tags,
                properties,
                evaluators,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.AgentEvaluationRequest"/>. </summary>
        /// <param name="runId"> Identifier of the agent run. </param>
        /// <param name="threadId"> Identifier of the agent thread. This field is mandatory currently, but it will be optional in the future. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <param name="samplingConfiguration"> Sampling configuration for the evaluation. </param>
        /// <param name="redactionConfiguration"> Redaction configuration for the evaluation. </param>
        /// <param name="appInsightsConnectionString"> Pass the AppInsights connection string to the agent evaluation for the evaluation results and the errors logs. </param>
        /// <returns> A new <see cref="Projects.AgentEvaluationRequest"/> instance for mocking. </returns>
        public static AgentEvaluationRequest AgentEvaluationRequest(string runId = null, string threadId = null, IDictionary<string, EvaluatorConfiguration> evaluators = null, AgentEvaluationSamplingConfiguration samplingConfiguration = null, AgentEvaluationRedactionConfiguration redactionConfiguration = null, string appInsightsConnectionString = null)
        {
            evaluators ??= new Dictionary<string, EvaluatorConfiguration>();

            return new AgentEvaluationRequest(
                runId,
                threadId,
                evaluators,
                samplingConfiguration,
                redactionConfiguration,
                appInsightsConnectionString,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.AgentEvaluation"/>. </summary>
        /// <param name="id"> Identifier of the agent evaluation run. </param>
        /// <param name="status"> Status of the agent evaluation. Options: Running, Completed, Failed. </param>
        /// <param name="error"> The reason of the request failure for the long running process, if applicable. </param>
        /// <param name="result"> The agent evaluation result. </param>
        /// <returns> A new <see cref="Projects.AgentEvaluation"/> instance for mocking. </returns>
        public static AgentEvaluation AgentEvaluation(string id = null, string status = null, string error = null, IEnumerable<AgentEvaluationResult> result = null)
        {
            result ??= new List<AgentEvaluationResult>();

            return new AgentEvaluation(id, status, error, result?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.AgentEvaluationResult"/>. </summary>
        /// <param name="evaluator"> Evaluator's name. This is the name of the evaluator that was used to evaluate the agent's completion. </param>
        /// <param name="score"> Score of the given evaluator. No restriction on range. </param>
        /// <param name="status"> Status of the evaluator result. Options: Running, Completed, Failed, NotApplicable. </param>
        /// <param name="reason"> Reasoning for the evaluation result. </param>
        /// <param name="version"> Version of the evaluator that was used to evaluate the agent's completion. </param>
        /// <param name="threadId"> The unique identifier of the thread. </param>
        /// <param name="runId"> The unique identifier of the run. </param>
        /// <param name="error"> A string explaining why there was an error, if applicable. </param>
        /// <param name="additionalDetails"> Additional properties relevant to the evaluator. These will differ between evaluators. </param>
        /// <returns> A new <see cref="Projects.AgentEvaluationResult"/> instance for mocking. </returns>
        public static AgentEvaluationResult AgentEvaluationResult(string evaluator = null, float score = default, string status = null, string reason = null, string version = null, string threadId = null, string runId = null, string error = null, IReadOnlyDictionary<string, string> additionalDetails = null)
        {
            additionalDetails ??= new Dictionary<string, string>();

            return new AgentEvaluationResult(
                evaluator,
                score,
                status,
                reason,
                version,
                threadId,
                runId,
                error,
                additionalDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.DatasetVersion"/>. </summary>
        /// <param name="dataUri"> URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
        /// <param name="type"> Dataset type. </param>
        /// <param name="isReference"> Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.DatasetVersion"/> instance for mocking. </returns>
        public static DatasetVersion DatasetVersion(string dataUri = null, string type = null, bool? isReference = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new UnknownDatasetVersion(
                dataUri,
                type == null ? default : new DatasetType(type),
                isReference,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.FileDatasetVersion"/>. </summary>
        /// <param name="dataUri"> URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
        /// <param name="isReference"> Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.FileDatasetVersion"/> instance for mocking. </returns>
        public static FileDatasetVersion FileDatasetVersion(string dataUri = null, bool? isReference = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FileDatasetVersion(
                dataUri,
                DatasetType.UriFile,
                isReference,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.FolderDatasetVersion"/>. </summary>
        /// <param name="dataUri"> URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
        /// <param name="isReference"> Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.FolderDatasetVersion"/> instance for mocking. </returns>
        public static FolderDatasetVersion FolderDatasetVersion(string dataUri = null, bool? isReference = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FolderDatasetVersion(
                dataUri,
                DatasetType.UriFolder,
                isReference,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.PendingUploadRequest"/>. </summary>
        /// <param name="pendingUploadId"> If PendingUploadId is not provided, a random GUID will be used. </param>
        /// <param name="connectionName"> Name of Azure blob storage connection to use for generating temporary SAS token. </param>
        /// <param name="pendingUploadType"> BlobReference is the only supported type. </param>
        /// <returns> A new <see cref="Projects.PendingUploadRequest"/> instance for mocking. </returns>
        public static PendingUploadRequest PendingUploadRequest(string pendingUploadId = null, string connectionName = null, PendingUploadType pendingUploadType = default)
        {
            return new PendingUploadRequest(pendingUploadId, connectionName, pendingUploadType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.PendingUploadResponse"/>. </summary>
        /// <param name="blobReference"> Container-level read, write, list SAS. </param>
        /// <param name="pendingUploadId"> ID for this upload request. </param>
        /// <param name="version"> Version of asset to be created if user did not specify version when initially creating upload. </param>
        /// <param name="pendingUploadType"> BlobReference is the only supported type. </param>
        /// <returns> A new <see cref="Projects.PendingUploadResponse"/> instance for mocking. </returns>
        public static PendingUploadResponse PendingUploadResponse(BlobReference blobReference = null, string pendingUploadId = null, string version = null, PendingUploadType pendingUploadType = default)
        {
            return new PendingUploadResponse(blobReference, pendingUploadId, version, pendingUploadType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.BlobReference"/>. </summary>
        /// <param name="blobUri"> Blob URI path for client to upload data. Example: https://blob.windows.core.net/Container/Path. </param>
        /// <param name="storageAccountArmId"> ARM ID of the storage account to use. </param>
        /// <param name="credential"> Credential info to access the storage account. </param>
        /// <returns> A new <see cref="Projects.BlobReference"/> instance for mocking. </returns>
        public static BlobReference BlobReference(string blobUri = null, string storageAccountArmId = null, SasCredential credential = null)
        {
            return new BlobReference(blobUri, storageAccountArmId, credential, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.SasCredential"/>. </summary>
        /// <param name="sasUri"> SAS uri. </param>
        /// <param name="type"> Type of credential. </param>
        /// <returns> A new <see cref="Projects.SasCredential"/> instance for mocking. </returns>
        public static SasCredential SasCredential(string sasUri = null, SasCredentialType type = default)
        {
            return new SasCredential(sasUri, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.AssetCredentialResponse"/>. </summary>
        /// <param name="blobReference"> Credential info to access the storage account. </param>
        /// <returns> A new <see cref="Projects.AssetCredentialResponse"/> instance for mocking. </returns>
        public static AssetCredentialResponse AssetCredentialResponse(BlobReference blobReference = null)
        {
            return new AssetCredentialResponse(blobReference, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.Index"/>. </summary>
        /// <param name="type"> Type of index. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.Index"/> instance for mocking. </returns>
        public static Index Index(string type = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new UnknownIndex(
                type == null ? default : new IndexType(type),
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.AzureAISearchIndex"/>. </summary>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="connectionName"> Name of connection to Azure AI Search. </param>
        /// <param name="indexName"> Name of index in Azure AI Search resource to attach. </param>
        /// <returns> A new <see cref="Projects.AzureAISearchIndex"/> instance for mocking. </returns>
        public static AzureAISearchIndex AzureAISearchIndex(string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null, string connectionName = null, string indexName = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AzureAISearchIndex(
                IndexType.AzureSearch,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null,
                connectionName,
                indexName);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.ManagedAzureAISearchIndex"/>. </summary>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="vectorStoreId"> Vector store id of managed index. </param>
        /// <returns> A new <see cref="Projects.ManagedAzureAISearchIndex"/> instance for mocking. </returns>
        public static ManagedAzureAISearchIndex ManagedAzureAISearchIndex(string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null, string vectorStoreId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ManagedAzureAISearchIndex(
                IndexType.ManagedAzureSearch,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null,
                vectorStoreId);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.CosmosDBIndex"/>. </summary>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="connectionName"> Name of connection to CosmosDB. </param>
        /// <param name="databaseName"> Name of the CosmosDB Database. </param>
        /// <param name="containerName"> Name of CosmosDB Container. </param>
        /// <param name="embeddingConfiguration"> Embedding model configuration. </param>
        /// <returns> A new <see cref="Projects.CosmosDBIndex"/> instance for mocking. </returns>
        public static CosmosDBIndex CosmosDBIndex(string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null, string connectionName = null, string databaseName = null, string containerName = null, EmbeddingConfiguration embeddingConfiguration = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBIndex(
                IndexType.CosmosDB,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null,
                connectionName,
                databaseName,
                containerName,
                embeddingConfiguration);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.Deployment"/>. </summary>
        /// <param name="type"> The type of the deployment. </param>
        /// <param name="name"> Name of the deployment. </param>
        /// <returns> A new <see cref="Projects.Deployment"/> instance for mocking. </returns>
        public static Deployment Deployment(string type = null, string name = null)
        {
            return new UnknownDeployment(type == null ? default : new DeploymentType(type), name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.ModelDeployment"/>. </summary>
        /// <param name="name"> Name of the deployment. </param>
        /// <param name="modelName"> Publisher-specific name of the deployed model. </param>
        /// <param name="modelVersion"> Publisher-specific version of the deployed model. </param>
        /// <param name="modelPublisher"> Name of the deployed model's publisher. </param>
        /// <param name="capabilities"> Capabilities of deployed model. </param>
        /// <param name="sku"> Sku of the model deployment. </param>
        /// <param name="connectionName"> Name of the connection the deployment comes from. </param>
        /// <returns> A new <see cref="Projects.ModelDeployment"/> instance for mocking. </returns>
        public static ModelDeployment ModelDeployment(string name = null, string modelName = null, string modelVersion = null, string modelPublisher = null, IReadOnlyDictionary<string, string> capabilities = null, Sku sku = null, string connectionName = null)
        {
            capabilities ??= new Dictionary<string, string>();

            return new ModelDeployment(
                DeploymentType.ModelDeployment,
                name,
                serializedAdditionalRawData: null,
                modelName,
                modelVersion,
                modelPublisher,
                capabilities,
                sku,
                connectionName);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.Sku"/>. </summary>
        /// <param name="capacity"> Sku capacity. </param>
        /// <param name="family"> Sku family. </param>
        /// <param name="name"> Sku name. </param>
        /// <param name="size"> Sku size. </param>
        /// <param name="tier"> Sku tier. </param>
        /// <returns> A new <see cref="Projects.Sku"/> instance for mocking. </returns>
        public static Sku Sku(long capacity = default, string family = null, string name = null, string size = null, string tier = null)
        {
            return new Sku(
                capacity,
                family,
                name,
                size,
                tier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RedTeam"/>. </summary>
        /// <param name="id"> Identifier of the red team. </param>
        /// <param name="scanName"> Name of the red-team scan. </param>
        /// <param name="numTurns"> Number of simulation rounds. </param>
        /// <param name="attackStrategies"> List of attack strategies or nested lists of attack strategies. </param>
        /// <param name="simulationOnly"> Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result. </param>
        /// <param name="riskCategories"> List of risk categories to generate attack objectives for. </param>
        /// <param name="applicationScenario"> Application scenario for the red team operation, to generate scenario specific attacks. </param>
        /// <param name="tags"> Red team's tags. Unlike properties, tags are fully mutable. </param>
        /// <param name="properties"> Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
        /// <param name="status"> Status of the red-team. It is set by service and is read-only. </param>
        /// <param name="targetConfig">
        /// Target configuration for the red-team run.
        /// Please note <see cref="TargetConfig"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureOpenAIModelConfiguration"/>.
        /// </param>
        /// <returns> A new <see cref="Projects.RedTeam"/> instance for mocking. </returns>
        public static RedTeam RedTeam(string id = null, string scanName = null, int numTurns = default, IEnumerable<AttackStrategy> attackStrategies = null, bool simulationOnly = default, IEnumerable<RiskCategory> riskCategories = null, string applicationScenario = null, IDictionary<string, string> tags = null, IDictionary<string, string> properties = null, string status = null, TargetConfig targetConfig = null)
        {
            attackStrategies ??= new List<AttackStrategy>();
            riskCategories ??= new List<RiskCategory>();
            tags ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();

            return new RedTeam(
                id,
                scanName,
                numTurns,
                attackStrategies?.ToList(),
                simulationOnly,
                riskCategories?.ToList(),
                applicationScenario,
                tags,
                properties,
                status,
                targetConfig,
                serializedAdditionalRawData: null);
        }
    }
}
