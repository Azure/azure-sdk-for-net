// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Projects
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIProjectsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Projects.Connection"/>. </summary>
        /// <param name="name"> The friendly name of the connection, provided by the user. </param>
        /// <param name="id"> A unique identifier for the connection, generated by the service. </param>
        /// <param name="type"> Category of the connection. </param>
        /// <param name="target"> The connection URL to be used for this service. </param>
        /// <param name="isDefault"> Whether the connection is tagged as the default connection of its type. </param>
        /// <param name="credentials">
        /// The credentials used by the connection
        /// Please note <see cref="BaseCredentials"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EntraIDCredentials"/>, <see cref="Projects.ApiKeyCredentials"/>, <see cref="Projects.CustomCredential"/>, <see cref="NoAuthenticationCredentials"/> and <see cref="Projects.SASCredentials"/>.
        /// </param>
        /// <param name="metadata"> Metadata of the connection. </param>
        /// <returns> A new <see cref="Projects.Connection"/> instance for mocking. </returns>
        public static Connection Connection(string name = null, string id = null, ConnectionType type = default, string target = null, bool isDefault = default, BaseCredentials credentials = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new Connection(
                name,
                id,
                type,
                target,
                isDefault,
                credentials,
                metadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.ApiKeyCredentials"/>. </summary>
        /// <param name="apiKey"> API Key. </param>
        /// <returns> A new <see cref="Projects.ApiKeyCredentials"/> instance for mocking. </returns>
        public static ApiKeyCredentials ApiKeyCredentials(string apiKey = null)
        {
            return new ApiKeyCredentials(CredentialType.ApiKey, serializedAdditionalRawData: null, apiKey);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.CustomCredential"/>. </summary>
        /// <param name="keys"> The credential type. </param>
        /// <returns> A new <see cref="Projects.CustomCredential"/> instance for mocking. </returns>
        public static CustomCredential CustomCredential(IReadOnlyDictionary<string, string> keys = null)
        {
            keys ??= new Dictionary<string, string>();

            return new CustomCredential(CredentialType.Custom, serializedAdditionalRawData: null, keys);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.SASCredentials"/>. </summary>
        /// <param name="sasToken"> SAS token. </param>
        /// <returns> A new <see cref="Projects.SASCredentials"/> instance for mocking. </returns>
        public static SASCredentials SASCredentials(string sasToken = null)
        {
            return new SASCredentials(CredentialType.SAS, serializedAdditionalRawData: null, sasToken);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.Evaluation"/>. </summary>
        /// <param name="name"> Identifier of the evaluation. </param>
        /// <param name="data">
        /// Data for evaluation.
        /// Please note <see cref="InputData"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="InputDataset"/>.
        /// </param>
        /// <param name="displayName"> Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. </param>
        /// <param name="description"> Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. </param>
        /// <param name="status"> Status of the evaluation. It is set by service and is read-only. </param>
        /// <param name="tags"> Evaluation's tags. Unlike properties, tags are fully mutable. </param>
        /// <param name="properties"> Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <returns> A new <see cref="Projects.Evaluation"/> instance for mocking. </returns>
        public static Evaluation Evaluation(string name = null, InputData data = null, string displayName = null, string description = null, string status = null, IDictionary<string, string> tags = null, IDictionary<string, string> properties = null, IDictionary<string, EvaluatorConfiguration> evaluators = null)
        {
            tags ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();
            evaluators ??= new Dictionary<string, EvaluatorConfiguration>();

            return new Evaluation(
                name,
                data,
                displayName,
                description,
                status,
                tags,
                properties,
                evaluators,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.AgentEvaluationRequest"/>. </summary>
        /// <param name="runId"> Identifier of the agent run. </param>
        /// <param name="threadId"> Identifier of the agent thread. This field is mandatory currently, but it will be optional in the future. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <param name="samplingConfiguration"> Sampling configuration for the evaluation. </param>
        /// <param name="redactionConfiguration"> Redaction configuration for the evaluation. </param>
        /// <param name="appInsightsConnectionString"> Pass the AppInsights connection string to the agent evaluation for the evaluation results and the errors logs. </param>
        /// <returns> A new <see cref="Projects.AgentEvaluationRequest"/> instance for mocking. </returns>
        public static AgentEvaluationRequest AgentEvaluationRequest(string runId = null, string threadId = null, IDictionary<string, EvaluatorConfiguration> evaluators = null, AgentEvaluationSamplingConfiguration samplingConfiguration = null, AgentEvaluationRedactionConfiguration redactionConfiguration = null, string appInsightsConnectionString = null)
        {
            evaluators ??= new Dictionary<string, EvaluatorConfiguration>();

            return new AgentEvaluationRequest(
                runId,
                threadId,
                evaluators,
                samplingConfiguration,
                redactionConfiguration,
                appInsightsConnectionString,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.AgentEvaluation"/>. </summary>
        /// <param name="id"> Identifier of the agent evaluation run. </param>
        /// <param name="status"> Status of the agent evaluation. Options: Running, Completed, Failed. </param>
        /// <param name="error"> The reason of the request failure for the long running process, if applicable. </param>
        /// <param name="result"> The agent evaluation result. </param>
        /// <returns> A new <see cref="Projects.AgentEvaluation"/> instance for mocking. </returns>
        public static AgentEvaluation AgentEvaluation(string id = null, string status = null, string error = null, IEnumerable<AgentEvaluationResult> result = null)
        {
            result ??= new List<AgentEvaluationResult>();

            return new AgentEvaluation(id, status, error, result?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.AgentEvaluationResult"/>. </summary>
        /// <param name="evaluator"> Evaluator's name. This is the name of the evaluator that was used to evaluate the agent's completion. </param>
        /// <param name="evaluatorId"> Identifier of the evaluator. </param>
        /// <param name="score"> Score of the given evaluator. No restriction on range. </param>
        /// <param name="status"> Status of the evaluator result. Options: Running, Completed, Failed, NotApplicable. </param>
        /// <param name="reason"> Reasoning for the evaluation result. </param>
        /// <param name="version"> Version of the evaluator that was used to evaluate the agent's completion. </param>
        /// <param name="threadId"> The unique identifier of the thread. </param>
        /// <param name="runId"> The unique identifier of the run. </param>
        /// <param name="error"> A string explaining why there was an error, if applicable. </param>
        /// <param name="additionalDetails"> Additional properties relevant to the evaluator. These will differ between evaluators. </param>
        /// <returns> A new <see cref="Projects.AgentEvaluationResult"/> instance for mocking. </returns>
        public static AgentEvaluationResult AgentEvaluationResult(string evaluator = null, string evaluatorId = null, float score = default, string status = null, string reason = null, string version = null, string threadId = null, string runId = null, string error = null, IReadOnlyDictionary<string, string> additionalDetails = null)
        {
            additionalDetails ??= new Dictionary<string, string>();

            return new AgentEvaluationResult(
                evaluator,
                evaluatorId,
                score,
                status,
                reason,
                version,
                threadId,
                runId,
                error,
                additionalDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.DatasetVersion"/>. </summary>
        /// <param name="dataUri"> URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
        /// <param name="type"> Dataset type. </param>
        /// <param name="isReference"> Indicates if the dataset holds a reference to the storage, or the dataset manages storage itself. If true, the underlying data will not be deleted when the dataset version is deleted. </param>
        /// <param name="connectionName"> The Azure Storage Account connection name. Required if startPendingUploadVersion was not called before creating the Dataset. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.DatasetVersion"/> instance for mocking. </returns>
        public static DatasetVersion DatasetVersion(string dataUri = null, string type = null, bool? isReference = null, string connectionName = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new UnknownDatasetVersion(
                dataUri,
                type == null ? default : new DatasetType(type),
                isReference,
                connectionName,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.FileDatasetVersion"/>. </summary>
        /// <param name="dataUri"> URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
        /// <param name="isReference"> Indicates if the dataset holds a reference to the storage, or the dataset manages storage itself. If true, the underlying data will not be deleted when the dataset version is deleted. </param>
        /// <param name="connectionName"> The Azure Storage Account connection name. Required if startPendingUploadVersion was not called before creating the Dataset. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.FileDatasetVersion"/> instance for mocking. </returns>
        public static FileDatasetVersion FileDatasetVersion(string dataUri = null, bool? isReference = null, string connectionName = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FileDatasetVersion(
                dataUri,
                DatasetType.UriFile,
                isReference,
                connectionName,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.FolderDatasetVersion"/>. </summary>
        /// <param name="dataUri"> URI of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
        /// <param name="isReference"> Indicates if the dataset holds a reference to the storage, or the dataset manages storage itself. If true, the underlying data will not be deleted when the dataset version is deleted. </param>
        /// <param name="connectionName"> The Azure Storage Account connection name. Required if startPendingUploadVersion was not called before creating the Dataset. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.FolderDatasetVersion"/> instance for mocking. </returns>
        public static FolderDatasetVersion FolderDatasetVersion(string dataUri = null, bool? isReference = null, string connectionName = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FolderDatasetVersion(
                dataUri,
                DatasetType.UriFolder,
                isReference,
                connectionName,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.PendingUploadRequest"/>. </summary>
        /// <param name="pendingUploadId"> If PendingUploadId is not provided, a random GUID will be used. </param>
        /// <param name="connectionName"> Azure Storage Account connection name to use for generating temporary SAS token. </param>
        /// <param name="pendingUploadType"> BlobReference is the only supported type. </param>
        /// <returns> A new <see cref="Projects.PendingUploadRequest"/> instance for mocking. </returns>
        public static PendingUploadRequest PendingUploadRequest(string pendingUploadId = null, string connectionName = null, PendingUploadType pendingUploadType = default)
        {
            return new PendingUploadRequest(pendingUploadId, connectionName, pendingUploadType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.PendingUploadResponse"/>. </summary>
        /// <param name="blobReference"> Container-level read, write, list SAS. </param>
        /// <param name="pendingUploadId"> ID for this upload request. </param>
        /// <param name="version"> Version of asset to be created if user did not specify version when initially creating upload. </param>
        /// <param name="pendingUploadType"> BlobReference is the only supported type. </param>
        /// <returns> A new <see cref="Projects.PendingUploadResponse"/> instance for mocking. </returns>
        public static PendingUploadResponse PendingUploadResponse(BlobReference blobReference = null, string pendingUploadId = null, string version = null, PendingUploadType pendingUploadType = default)
        {
            return new PendingUploadResponse(blobReference, pendingUploadId, version, pendingUploadType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.BlobReference"/>. </summary>
        /// <param name="blobUri"> Blob URI path for client to upload data. Example: https://blob.windows.core.net/Container/Path. </param>
        /// <param name="storageAccountArmId"> ARM ID of the storage account to use. </param>
        /// <param name="credential"> Credential info to access the storage account. </param>
        /// <returns> A new <see cref="Projects.BlobReference"/> instance for mocking. </returns>
        public static BlobReference BlobReference(string blobUri = null, string storageAccountArmId = null, SasCredential credential = null)
        {
            return new BlobReference(blobUri, storageAccountArmId, credential, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.SasCredential"/>. </summary>
        /// <param name="sasUri"> SAS uri. </param>
        /// <param name="type"> Type of credential. </param>
        /// <returns> A new <see cref="Projects.SasCredential"/> instance for mocking. </returns>
        public static SasCredential SasCredential(string sasUri = null, SasCredentialType type = default)
        {
            return new SasCredential(sasUri, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.AssetCredentialResponse"/>. </summary>
        /// <param name="blobReference"> Credential info to access the storage account. </param>
        /// <returns> A new <see cref="Projects.AssetCredentialResponse"/> instance for mocking. </returns>
        public static AssetCredentialResponse AssetCredentialResponse(BlobReference blobReference = null)
        {
            return new AssetCredentialResponse(blobReference, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.Index"/>. </summary>
        /// <param name="type"> Type of index. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects.Index"/> instance for mocking. </returns>
        public static Index Index(string type = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new UnknownIndex(
                type == null ? default : new IndexType(type),
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.AzureAISearchIndex"/>. </summary>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="connectionName"> Name of connection to Azure AI Search. </param>
        /// <param name="indexName"> Name of index in Azure AI Search resource to attach. </param>
        /// <param name="fieldMapping"> Field mapping configuration. </param>
        /// <returns> A new <see cref="Projects.AzureAISearchIndex"/> instance for mocking. </returns>
        public static AzureAISearchIndex AzureAISearchIndex(string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null, string connectionName = null, string indexName = null, FieldMapping fieldMapping = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AzureAISearchIndex(
                IndexType.AzureSearch,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null,
                connectionName,
                indexName,
                fieldMapping);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.ManagedAzureAISearchIndex"/>. </summary>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="vectorStoreId"> Vector store id of managed index. </param>
        /// <returns> A new <see cref="Projects.ManagedAzureAISearchIndex"/> instance for mocking. </returns>
        public static ManagedAzureAISearchIndex ManagedAzureAISearchIndex(string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null, string vectorStoreId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ManagedAzureAISearchIndex(
                IndexType.ManagedAzureSearch,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null,
                vectorStoreId);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.CosmosDBIndex"/>. </summary>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="connectionName"> Name of connection to CosmosDB. </param>
        /// <param name="databaseName"> Name of the CosmosDB Database. </param>
        /// <param name="containerName"> Name of CosmosDB Container. </param>
        /// <param name="embeddingConfiguration"> Embedding model configuration. </param>
        /// <param name="fieldMapping"> Field mapping configuration. </param>
        /// <returns> A new <see cref="Projects.CosmosDBIndex"/> instance for mocking. </returns>
        public static CosmosDBIndex CosmosDBIndex(string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null, string connectionName = null, string databaseName = null, string containerName = null, EmbeddingConfiguration embeddingConfiguration = null, FieldMapping fieldMapping = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBIndex(
                IndexType.CosmosDB,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null,
                connectionName,
                databaseName,
                containerName,
                embeddingConfiguration,
                fieldMapping);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.Deployment"/>. </summary>
        /// <param name="type"> The type of the deployment. </param>
        /// <param name="name"> Name of the deployment. </param>
        /// <returns> A new <see cref="Projects.Deployment"/> instance for mocking. </returns>
        public static Deployment Deployment(string type = null, string name = null)
        {
            return new UnknownDeployment(type == null ? default : new DeploymentType(type), name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.ModelDeployment"/>. </summary>
        /// <param name="name"> Name of the deployment. </param>
        /// <param name="modelName"> Publisher-specific name of the deployed model. </param>
        /// <param name="modelVersion"> Publisher-specific version of the deployed model. </param>
        /// <param name="modelPublisher"> Name of the deployed model's publisher. </param>
        /// <param name="capabilities"> Capabilities of deployed model. </param>
        /// <param name="sku"> Sku of the model deployment. </param>
        /// <param name="connectionName"> Name of the connection the deployment comes from. </param>
        /// <returns> A new <see cref="Projects.ModelDeployment"/> instance for mocking. </returns>
        public static ModelDeployment ModelDeployment(string name = null, string modelName = null, string modelVersion = null, string modelPublisher = null, IReadOnlyDictionary<string, string> capabilities = null, Sku sku = null, string connectionName = null)
        {
            capabilities ??= new Dictionary<string, string>();

            return new ModelDeployment(
                DeploymentType.ModelDeployment,
                name,
                serializedAdditionalRawData: null,
                modelName,
                modelVersion,
                modelPublisher,
                capabilities,
                sku,
                connectionName);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.Sku"/>. </summary>
        /// <param name="capacity"> Sku capacity. </param>
        /// <param name="family"> Sku family. </param>
        /// <param name="name"> Sku name. </param>
        /// <param name="size"> Sku size. </param>
        /// <param name="tier"> Sku tier. </param>
        /// <returns> A new <see cref="Projects.Sku"/> instance for mocking. </returns>
        public static Sku Sku(long capacity = default, string family = null, string name = null, string size = null, string tier = null)
        {
            return new Sku(
                capacity,
                family,
                name,
                size,
                tier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects.RedTeam"/>. </summary>
        /// <param name="name"> Identifier of the red team run. </param>
        /// <param name="displayName"> Name of the red-team run. </param>
        /// <param name="numTurns"> Number of simulation rounds. </param>
        /// <param name="attackStrategies"> List of attack strategies or nested lists of attack strategies. </param>
        /// <param name="simulationOnly"> Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result. </param>
        /// <param name="riskCategories"> List of risk categories to generate attack objectives for. </param>
        /// <param name="applicationScenario"> Application scenario for the red team operation, to generate scenario specific attacks. </param>
        /// <param name="tags"> Red team's tags. Unlike properties, tags are fully mutable. </param>
        /// <param name="properties"> Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
        /// <param name="status"> Status of the red-team. It is set by service and is read-only. </param>
        /// <param name="target">
        /// Target configuration for the red-team run.
        /// Please note <see cref="TargetConfig"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureOpenAIModelConfiguration"/>.
        /// </param>
        /// <returns> A new <see cref="Projects.RedTeam"/> instance for mocking. </returns>
        public static RedTeam RedTeam(string name = null, string displayName = null, int? numTurns = null, IEnumerable<AttackStrategy> attackStrategies = null, bool? simulationOnly = null, IEnumerable<RiskCategory> riskCategories = null, string applicationScenario = null, IDictionary<string, string> tags = null, IDictionary<string, string> properties = null, string status = null, TargetConfig target = null)
        {
            attackStrategies ??= new List<AttackStrategy>();
            riskCategories ??= new List<RiskCategory>();
            tags ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();

            return new RedTeam(
                name,
                displayName,
                numTurns,
                attackStrategies?.ToList(),
                simulationOnly,
                riskCategories?.ToList(),
                applicationScenario,
                tags,
                properties,
                status,
                target,
                serializedAdditionalRawData: null);
        }
    }
}
