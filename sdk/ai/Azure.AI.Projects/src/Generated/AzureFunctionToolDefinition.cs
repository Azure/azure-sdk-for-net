// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> The input definition information for a azure function tool as used to configure an agent. </summary>
    public partial class AzureFunctionToolDefinition : ToolDefinition
    {
        /// <summary> Initializes a new instance of <see cref="AzureFunctionToolDefinition"/>. </summary>
        /// <param name="azureFunction"> The definition of the concrete function that the function tool should call. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="azureFunction"/> is null. </exception>
        public AzureFunctionToolDefinition(AzureFunctionDefinition azureFunction)
        {
            Argument.AssertNotNull(azureFunction, nameof(azureFunction));

            Type = "azure_function";
            AzureFunction = azureFunction;
        }

        /// <summary> Initializes a new instance of <see cref="AzureFunctionToolDefinition"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="azureFunction"> The definition of the concrete function that the function tool should call. </param>
        internal AzureFunctionToolDefinition(string type, IDictionary<string, BinaryData> serializedAdditionalRawData, AzureFunctionDefinition azureFunction) : base(type, serializedAdditionalRawData)
        {
            AzureFunction = azureFunction;
        }

        /// <summary> Initializes a new instance of <see cref="AzureFunctionToolDefinition"/> for deserialization. </summary>
        internal AzureFunctionToolDefinition()
        {
        }

        /// <summary> The definition of the concrete function that the function tool should call. </summary>
        public AzureFunctionDefinition AzureFunction { get; set; }
    }
}
