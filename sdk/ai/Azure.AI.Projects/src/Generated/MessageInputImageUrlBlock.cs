// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> An image-URL block in a new message, referencing an external image by URL. </summary>
    public partial class MessageInputImageUrlBlock : MessageInputContentBlock
    {
        /// <summary> Initializes a new instance of <see cref="MessageInputImageUrlBlock"/>. </summary>
        /// <param name="imageUrl"> Information about the external image URL, including the URL and optional detail level. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="imageUrl"/> is null. </exception>
        public MessageInputImageUrlBlock(MessageImageUrlParam imageUrl)
        {
            Argument.AssertNotNull(imageUrl, nameof(imageUrl));

            Type = MessageBlockType.ImageUrl;
            ImageUrl = imageUrl;
        }

        /// <summary> Initializes a new instance of <see cref="MessageInputImageUrlBlock"/>. </summary>
        /// <param name="type"> Specifies which kind of content block this is (text, image_file, image_url, etc.). </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="imageUrl"> Information about the external image URL, including the URL and optional detail level. </param>
        internal MessageInputImageUrlBlock(MessageBlockType type, IDictionary<string, BinaryData> serializedAdditionalRawData, MessageImageUrlParam imageUrl) : base(type, serializedAdditionalRawData)
        {
            ImageUrl = imageUrl;
        }

        /// <summary> Initializes a new instance of <see cref="MessageInputImageUrlBlock"/> for deserialization. </summary>
        internal MessageInputImageUrlBlock()
        {
        }

        /// <summary> Information about the external image URL, including the URL and optional detail level. </summary>
        public MessageImageUrlParam ImageUrl { get; }
    }
}
