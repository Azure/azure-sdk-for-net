// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;

namespace Azure.AI.Projects
{
    /// <summary></summary>
    public partial class DeploymentsOperations
    {
        private static PipelineMessageClassifier _pipelineMessageClassifier200;

        private static PipelineMessageClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 = PipelineMessageClassifier.Create(stackalloc ushort[] { 200 });

        internal PipelineMessage CreateGetDeploymentRequest(string name, string clientRequestId, RequestOptions options)
        {
            ClientUriBuilder uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(name, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            PipelineMessage message = Pipeline.CreateMessage(uri.ToUri(), "GET", PipelineMessageClassifier200);
            PipelineRequest request = message.Request;
            if (clientRequestId != null)
            {
                request.Headers.Set("x-ms-client-request-id", clientRequestId);
            }
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetDeploymentsRequest(string modelPublisher, string modelName, string deploymentType, string clientRequestId, RequestOptions options)
        {
            ClientUriBuilder uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/deployments", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (modelPublisher != null)
            {
                uri.AppendQuery("modelPublisher", modelPublisher, true);
            }
            if (modelName != null)
            {
                uri.AppendQuery("modelName", modelName, true);
            }
            if (deploymentType != null)
            {
                uri.AppendQuery("deploymentType", deploymentType, true);
            }
            PipelineMessage message = Pipeline.CreateMessage(uri.ToUri(), "GET", PipelineMessageClassifier200);
            PipelineRequest request = message.Request;
            if (clientRequestId != null)
            {
                request.Headers.Set("x-ms-client-request-id", clientRequestId);
            }
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateNextGetDeploymentsRequest(Uri nextPage, string modelPublisher, string modelName, string deploymentType, string clientRequestId, RequestOptions options)
        {
            ClientUriBuilder uri = new ClientUriBuilder();
            uri.Reset(nextPage);
            PipelineMessage message = Pipeline.CreateMessage(uri.ToUri(), "GET", PipelineMessageClassifier200);
            PipelineRequest request = message.Request;
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }
    }
}
