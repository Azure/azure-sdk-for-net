// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;

namespace Azure.AI.Projects
{
    /// <summary> The DeploymentsOperations sub-client. </summary>
    public partial class DeploymentsOperations
    {
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of DeploymentsOperations for mocking. </summary>
        protected DeploymentsOperations()
        {
        }

        /// <summary> Initializes a new instance of DeploymentsOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="apiVersion"></param>
        internal DeploymentsOperations(ClientPipeline pipeline, Uri endpoint, string apiVersion)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
            _apiVersion = apiVersion;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Get a deployed model.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> Name of the deployment. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetDeployment(string name, string clientRequestId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using PipelineMessage message = CreateGetDeploymentRequest(name, clientRequestId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Get a deployed model.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> Name of the deployment. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetDeploymentAsync(string name, string clientRequestId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using PipelineMessage message = CreateGetDeploymentRequest(name, clientRequestId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Get a deployed model. </summary>
        /// <param name="name"> Name of the deployment. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<AssetDeployment> GetDeployment(string name, string clientRequestId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            ClientResult result = GetDeployment(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((AssetDeployment)result, result.GetRawResponse());
        }

        /// <summary> Get a deployed model. </summary>
        /// <param name="name"> Name of the deployment. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<AssetDeployment>> GetDeploymentAsync(string name, string clientRequestId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            ClientResult result = await GetDeploymentAsync(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((AssetDeployment)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] List all deployed models in the project
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="modelPublisher"> Model publisher to filter models by. </param>
        /// <param name="modelName"> Model name (the publisher specific name) to filter models by. </param>
        /// <param name="deploymentType"> Type of deployment to filter list by. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual CollectionResult GetDeployments(string modelPublisher, string modelName, string deploymentType, string clientRequestId, RequestOptions options)
        {
            return new DeploymentsOperationsGetDeploymentsCollectionResult(
                this,
                modelPublisher,
                modelName,
                deploymentType,
                clientRequestId,
                options);
        }

        /// <summary>
        /// [Protocol Method] List all deployed models in the project
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="modelPublisher"> Model publisher to filter models by. </param>
        /// <param name="modelName"> Model name (the publisher specific name) to filter models by. </param>
        /// <param name="deploymentType"> Type of deployment to filter list by. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncCollectionResult GetDeploymentsAsync(string modelPublisher, string modelName, string deploymentType, string clientRequestId, RequestOptions options)
        {
            return new DeploymentsOperationsGetDeploymentsAsyncCollectionResult(
                this,
                modelPublisher,
                modelName,
                deploymentType,
                clientRequestId,
                options);
        }

        /// <summary> List all deployed models in the project. </summary>
        /// <param name="modelPublisher"> Model publisher to filter models by. </param>
        /// <param name="modelName"> Model name (the publisher specific name) to filter models by. </param>
        /// <param name="deploymentType"> Type of deployment to filter list by. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual CollectionResult<AssetDeployment> GetDeployments(string modelPublisher = default, string modelName = default, DeploymentType? deploymentType = default, string clientRequestId = default, CancellationToken cancellationToken = default)
        {
            return new DeploymentsOperationsGetDeploymentsCollectionResultOfT(
                this,
                modelPublisher,
                modelName,
                deploymentType?.ToString(),
                clientRequestId,
                cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> List all deployed models in the project. </summary>
        /// <param name="modelPublisher"> Model publisher to filter models by. </param>
        /// <param name="modelName"> Model name (the publisher specific name) to filter models by. </param>
        /// <param name="deploymentType"> Type of deployment to filter list by. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual AsyncCollectionResult<AssetDeployment> GetDeploymentsAsync(string modelPublisher = default, string modelName = default, DeploymentType? deploymentType = default, string clientRequestId = default, CancellationToken cancellationToken = default)
        {
            return new DeploymentsOperationsGetDeploymentsAsyncCollectionResultOfT(
                this,
                modelPublisher,
                modelName,
                deploymentType?.ToString(),
                clientRequestId,
                cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }
    }
}
