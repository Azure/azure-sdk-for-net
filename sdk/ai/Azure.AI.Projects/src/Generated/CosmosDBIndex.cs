// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> CosmosDB Vector Store Index Definition. </summary>
    public partial class CosmosDBIndex : Index
    {
        /// <summary> Initializes a new instance of <see cref="CosmosDBIndex"/>. </summary>
        /// <param name="connectionName"> Name of connection to CosmosDB. </param>
        /// <param name="databaseName"> Name of the CosmosDB Database. </param>
        /// <param name="containerName"> Name of CosmosDB Container. </param>
        /// <param name="embeddingConfiguration"> Embedding model configuration. </param>
        /// <param name="fieldMapping"> Field mapping configuration. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, <paramref name="embeddingConfiguration"/> or <paramref name="fieldMapping"/> is null. </exception>
        public CosmosDBIndex(string connectionName, string databaseName, string containerName, EmbeddingConfiguration embeddingConfiguration, FieldMapping fieldMapping)
        {
            Argument.AssertNotNull(connectionName, nameof(connectionName));
            Argument.AssertNotNull(databaseName, nameof(databaseName));
            Argument.AssertNotNull(containerName, nameof(containerName));
            Argument.AssertNotNull(embeddingConfiguration, nameof(embeddingConfiguration));
            Argument.AssertNotNull(fieldMapping, nameof(fieldMapping));

            Type = IndexType.CosmosDB;
            ConnectionName = connectionName;
            DatabaseName = databaseName;
            ContainerName = containerName;
            EmbeddingConfiguration = embeddingConfiguration;
            FieldMapping = fieldMapping;
        }

        /// <summary> Initializes a new instance of <see cref="CosmosDBIndex"/>. </summary>
        /// <param name="type"> Type of index. </param>
        /// <param name="id"> Asset ID, a unique identifier for the asset. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="connectionName"> Name of connection to CosmosDB. </param>
        /// <param name="databaseName"> Name of the CosmosDB Database. </param>
        /// <param name="containerName"> Name of CosmosDB Container. </param>
        /// <param name="embeddingConfiguration"> Embedding model configuration. </param>
        /// <param name="fieldMapping"> Field mapping configuration. </param>
        internal CosmosDBIndex(IndexType type, string id, string name, string version, string description, IDictionary<string, string> tags, IDictionary<string, BinaryData> serializedAdditionalRawData, string connectionName, string databaseName, string containerName, EmbeddingConfiguration embeddingConfiguration, FieldMapping fieldMapping) : base(type, id, name, version, description, tags, serializedAdditionalRawData)
        {
            ConnectionName = connectionName;
            DatabaseName = databaseName;
            ContainerName = containerName;
            EmbeddingConfiguration = embeddingConfiguration;
            FieldMapping = fieldMapping;
        }

        /// <summary> Initializes a new instance of <see cref="CosmosDBIndex"/> for deserialization. </summary>
        internal CosmosDBIndex()
        {
        }

        /// <summary> Name of connection to CosmosDB. </summary>
        public string ConnectionName { get; set; }
        /// <summary> Name of the CosmosDB Database. </summary>
        public string DatabaseName { get; set; }
        /// <summary> Name of CosmosDB Container. </summary>
        public string ContainerName { get; set; }
        /// <summary> Embedding model configuration. </summary>
        public EmbeddingConfiguration EmbeddingConfiguration { get; set; }
        /// <summary> Field mapping configuration. </summary>
        public FieldMapping FieldMapping { get; set; }
    }
}
