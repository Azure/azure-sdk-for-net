// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> Red team details. </summary>
    public partial class RedTeam
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RedTeam"/>. </summary>
        /// <param name="target">
        /// Target configuration for the red-team run.
        /// Please note <see cref="TargetConfig"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureOpenAIModelConfiguration"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="target"/> is null. </exception>
        public RedTeam(TargetConfig target)
        {
            Argument.AssertNotNull(target, nameof(target));

            AttackStrategies = new ChangeTrackingList<AttackStrategy>();
            RiskCategories = new ChangeTrackingList<RiskCategory>();
            Tags = new ChangeTrackingDictionary<string, string>();
            Properties = new ChangeTrackingDictionary<string, string>();
            Target = target;
        }

        /// <summary> Initializes a new instance of <see cref="RedTeam"/>. </summary>
        /// <param name="name"> Identifier of the red team run. </param>
        /// <param name="displayName"> Name of the red-team run. </param>
        /// <param name="numTurns"> Number of simulation rounds. </param>
        /// <param name="attackStrategies"> List of attack strategies or nested lists of attack strategies. </param>
        /// <param name="simulationOnly"> Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result. </param>
        /// <param name="riskCategories"> List of risk categories to generate attack objectives for. </param>
        /// <param name="applicationScenario"> Application scenario for the red team operation, to generate scenario specific attacks. </param>
        /// <param name="tags"> Red team's tags. Unlike properties, tags are fully mutable. </param>
        /// <param name="properties"> Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
        /// <param name="status"> Status of the red-team. It is set by service and is read-only. </param>
        /// <param name="target">
        /// Target configuration for the red-team run.
        /// Please note <see cref="TargetConfig"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureOpenAIModelConfiguration"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RedTeam(string name, string displayName, int? numTurns, IList<AttackStrategy> attackStrategies, bool? simulationOnly, IList<RiskCategory> riskCategories, string applicationScenario, IDictionary<string, string> tags, IDictionary<string, string> properties, string status, TargetConfig target, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            DisplayName = displayName;
            NumTurns = numTurns;
            AttackStrategies = attackStrategies;
            SimulationOnly = simulationOnly;
            RiskCategories = riskCategories;
            ApplicationScenario = applicationScenario;
            Tags = tags;
            Properties = properties;
            Status = status;
            Target = target;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RedTeam"/> for deserialization. </summary>
        internal RedTeam()
        {
        }

        /// <summary> Identifier of the red team run. </summary>
        public string Name { get; }
        /// <summary> Name of the red-team run. </summary>
        public string DisplayName { get; set; }
        /// <summary> Number of simulation rounds. </summary>
        public int? NumTurns { get; set; }
        /// <summary> List of attack strategies or nested lists of attack strategies. </summary>
        public IList<AttackStrategy> AttackStrategies { get; }
        /// <summary> Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result. </summary>
        public bool? SimulationOnly { get; set; }
        /// <summary> List of risk categories to generate attack objectives for. </summary>
        public IList<RiskCategory> RiskCategories { get; }
        /// <summary> Application scenario for the red team operation, to generate scenario specific attacks. </summary>
        public string ApplicationScenario { get; set; }
        /// <summary> Red team's tags. Unlike properties, tags are fully mutable. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </summary>
        public IDictionary<string, string> Properties { get; }
        /// <summary> Status of the red-team. It is set by service and is read-only. </summary>
        public string Status { get; }
        /// <summary>
        /// Target configuration for the red-team run.
        /// Please note <see cref="TargetConfig"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureOpenAIModelConfiguration"/>.
        /// </summary>
        public TargetConfig Target { get; set; }
    }
}
