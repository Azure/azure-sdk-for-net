// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects
{
    /// <summary>
    ///   Authentication type for OpenApi endpoint. Allowed types are:
    ///   - Anonymous (no authentication required)
    ///   - Connection (requires connection_id to endpoint, as setup in AI Foundry)
    ///   - Managed_Identity (requires audience for identity based auth)
    /// </summary>
    internal readonly partial struct OpenApiAuthType : IEquatable<OpenApiAuthType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OpenApiAuthType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OpenApiAuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AnonymousValue = "anonymous";
        private const string ConnectionValue = "connection";
        private const string ManagedIdentityValue = "managed_identity";

        /// <summary> anonymous. </summary>
        public static OpenApiAuthType Anonymous { get; } = new OpenApiAuthType(AnonymousValue);
        /// <summary> connection. </summary>
        public static OpenApiAuthType Connection { get; } = new OpenApiAuthType(ConnectionValue);
        /// <summary> managed_identity. </summary>
        public static OpenApiAuthType ManagedIdentity { get; } = new OpenApiAuthType(ManagedIdentityValue);
        /// <summary> Determines if two <see cref="OpenApiAuthType"/> values are the same. </summary>
        public static bool operator ==(OpenApiAuthType left, OpenApiAuthType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OpenApiAuthType"/> values are not the same. </summary>
        public static bool operator !=(OpenApiAuthType left, OpenApiAuthType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OpenApiAuthType"/>. </summary>
        public static implicit operator OpenApiAuthType(string value) => new OpenApiAuthType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OpenApiAuthType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OpenApiAuthType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
