// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> Response from the list and get connections operations. </summary>
    public partial class Connection
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Connection"/>. </summary>
        internal Connection()
        {
            Metadata = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="Connection"/>. </summary>
        /// <param name="name"> The friendly name of the connection, provided by the user. </param>
        /// <param name="id"> A unique identifier for the connection, generated by the service. </param>
        /// <param name="type"> Category of the connection. </param>
        /// <param name="target"> The connection URL to be used for this service. </param>
        /// <param name="isDefault"> Whether the connection is tagged as the default connection of its type. </param>
        /// <param name="credentials">
        /// The credentials used by the connection
        /// Please note <see cref="BaseCredentials"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EntraIDCredentials"/>, <see cref="ApiKeyCredentials"/>, <see cref="CustomCredential"/>, <see cref="NoAuthenticationCredentials"/> and <see cref="SASCredentials"/>.
        /// </param>
        /// <param name="metadata"> Metadata of the connection. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Connection(string name, string id, ConnectionType type, string target, bool isDefault, BaseCredentials credentials, IReadOnlyDictionary<string, string> metadata, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Id = id;
            Type = type;
            Target = target;
            IsDefault = isDefault;
            Credentials = credentials;
            Metadata = metadata;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The friendly name of the connection, provided by the user. </summary>
        public string Name { get; }
        /// <summary> A unique identifier for the connection, generated by the service. </summary>
        public string Id { get; }
        /// <summary> Category of the connection. </summary>
        public ConnectionType Type { get; }
        /// <summary> The connection URL to be used for this service. </summary>
        public string Target { get; }
        /// <summary> Whether the connection is tagged as the default connection of its type. </summary>
        public bool IsDefault { get; }
        /// <summary>
        /// The credentials used by the connection
        /// Please note <see cref="BaseCredentials"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EntraIDCredentials"/>, <see cref="ApiKeyCredentials"/>, <see cref="CustomCredential"/>, <see cref="NoAuthenticationCredentials"/> and <see cref="SASCredentials"/>.
        /// </summary>
        public BaseCredentials Credentials { get; }
        /// <summary> Metadata of the connection. </summary>
        public IReadOnlyDictionary<string, string> Metadata { get; }
    }
}
