// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;

namespace Azure.AI.Projects
{
    /// <summary> The AIProjectConnectionsOperations sub-client. </summary>
    public partial class AIProjectConnectionsOperations
    {
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of AIProjectConnectionsOperations for mocking. </summary>
        protected AIProjectConnectionsOperations()
        {
        }

        /// <summary> Initializes a new instance of AIProjectConnectionsOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="apiVersion"></param>
        internal AIProjectConnectionsOperations(ClientPipeline pipeline, Uri endpoint, string apiVersion)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
            _apiVersion = apiVersion;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Get a connection by name, without populating connection credentials
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The friendly name of the connection, provided by the user. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual ClientResult GetConnection(string name, string clientRequestId, RequestOptions options)
        {
            using PipelineMessage message = CreateGetConnectionRequest(name, clientRequestId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Get a connection by name, without populating connection credentials
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The friendly name of the connection, provided by the user. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<ClientResult> GetConnectionAsync(string name, string clientRequestId, RequestOptions options)
        {
            using PipelineMessage message = CreateGetConnectionRequest(name, clientRequestId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Get a connection by name, without populating connection credentials. </summary>
        /// <param name="name"> The friendly name of the connection, provided by the user. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        internal virtual ClientResult<AIProjectConnection> GetConnection(string name, string clientRequestId = default, CancellationToken cancellationToken = default)
        {
            ClientResult result = GetConnection(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((AIProjectConnection)result, result.GetRawResponse());
        }

        /// <summary> Get a connection by name, without populating connection credentials. </summary>
        /// <param name="name"> The friendly name of the connection, provided by the user. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        internal virtual async Task<ClientResult<AIProjectConnection>> GetConnectionAsync(string name, string clientRequestId = default, CancellationToken cancellationToken = default)
        {
            ClientResult result = await GetConnectionAsync(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((AIProjectConnection)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Get a connection by name, with its connection credentials
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The friendly name of the connection, provided by the user. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual ClientResult GetConnectionWithCredentials(string name, string clientRequestId, RequestOptions options)
        {
            using PipelineMessage message = CreateGetConnectionWithCredentialsRequest(name, clientRequestId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Get a connection by name, with its connection credentials
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The friendly name of the connection, provided by the user. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<ClientResult> GetConnectionWithCredentialsAsync(string name, string clientRequestId, RequestOptions options)
        {
            using PipelineMessage message = CreateGetConnectionWithCredentialsRequest(name, clientRequestId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Get a connection by name, with its connection credentials. </summary>
        /// <param name="name"> The friendly name of the connection, provided by the user. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        internal virtual ClientResult<AIProjectConnection> GetConnectionWithCredentials(string name, string clientRequestId = default, CancellationToken cancellationToken = default)
        {
            ClientResult result = GetConnectionWithCredentials(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((AIProjectConnection)result, result.GetRawResponse());
        }

        /// <summary> Get a connection by name, with its connection credentials. </summary>
        /// <param name="name"> The friendly name of the connection, provided by the user. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        internal virtual async Task<ClientResult<AIProjectConnection>> GetConnectionWithCredentialsAsync(string name, string clientRequestId = default, CancellationToken cancellationToken = default)
        {
            ClientResult result = await GetConnectionWithCredentialsAsync(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((AIProjectConnection)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] List all connections in the project, without populating connection credentials
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="connectionType"> List connections of this specific type. </param>
        /// <param name="defaultConnection"> List connections that are default connections. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual CollectionResult GetConnections(string connectionType, bool? defaultConnection, string clientRequestId, RequestOptions options)
        {
            return new AIProjectConnectionsOperationsGetConnectionsCollectionResult(this, connectionType, defaultConnection, clientRequestId, options);
        }

        /// <summary>
        /// [Protocol Method] List all connections in the project, without populating connection credentials
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="connectionType"> List connections of this specific type. </param>
        /// <param name="defaultConnection"> List connections that are default connections. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncCollectionResult GetConnectionsAsync(string connectionType, bool? defaultConnection, string clientRequestId, RequestOptions options)
        {
            return new AIProjectConnectionsOperationsGetConnectionsAsyncCollectionResult(this, connectionType, defaultConnection, clientRequestId, options);
        }

        /// <summary> List all connections in the project, without populating connection credentials. </summary>
        /// <param name="connectionType"> List connections of this specific type. </param>
        /// <param name="defaultConnection"> List connections that are default connections. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual CollectionResult<AIProjectConnection> GetConnections(ConnectionType? connectionType = default, bool? defaultConnection = default, string clientRequestId = default, CancellationToken cancellationToken = default)
        {
            return new AIProjectConnectionsOperationsGetConnectionsCollectionResultOfT(this, connectionType?.ToString(), defaultConnection, clientRequestId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> List all connections in the project, without populating connection credentials. </summary>
        /// <param name="connectionType"> List connections of this specific type. </param>
        /// <param name="defaultConnection"> List connections that are default connections. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual AsyncCollectionResult<AIProjectConnection> GetConnectionsAsync(ConnectionType? connectionType = default, bool? defaultConnection = default, string clientRequestId = default, CancellationToken cancellationToken = default)
        {
            return new AIProjectConnectionsOperationsGetConnectionsAsyncCollectionResultOfT(this, connectionType?.ToString(), defaultConnection, clientRequestId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }
    }
}
