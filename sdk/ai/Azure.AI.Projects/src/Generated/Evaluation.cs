// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> Evaluation Definition. </summary>
    public partial class Evaluation
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Evaluation"/>. </summary>
        /// <param name="data">
        /// Data for evaluation.
        /// Please note <see cref="InputData"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ApplicationInsightsConfiguration"/> and <see cref="Dataset"/>.
        /// </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> or <paramref name="evaluators"/> is null. </exception>
        public Evaluation(InputData data, IDictionary<string, EvaluatorConfiguration> evaluators)
        {
            Argument.AssertNotNull(data, nameof(data));
            Argument.AssertNotNull(evaluators, nameof(evaluators));

            Data = data;
            Tags = new ChangeTrackingDictionary<string, string>();
            Properties = new ChangeTrackingDictionary<string, string>();
            Evaluators = evaluators;
        }

        /// <summary> Initializes a new instance of <see cref="Evaluation"/>. </summary>
        /// <param name="id"> Identifier of the evaluation. </param>
        /// <param name="data">
        /// Data for evaluation.
        /// Please note <see cref="InputData"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ApplicationInsightsConfiguration"/> and <see cref="Dataset"/>.
        /// </param>
        /// <param name="displayName"> Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. </param>
        /// <param name="description"> Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. </param>
        /// <param name="systemData"> Metadata containing createdBy and modifiedBy information. </param>
        /// <param name="status"> Status of the evaluation. It is set by service and is read-only. </param>
        /// <param name="tags"> Evaluation's tags. Unlike properties, tags are fully mutable. </param>
        /// <param name="properties"> Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Evaluation(string id, InputData data, string displayName, string description, SystemData systemData, string status, IDictionary<string, string> tags, IDictionary<string, string> properties, IDictionary<string, EvaluatorConfiguration> evaluators, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Data = data;
            DisplayName = displayName;
            Description = description;
            SystemData = systemData;
            Status = status;
            Tags = tags;
            Properties = properties;
            Evaluators = evaluators;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="Evaluation"/> for deserialization. </summary>
        internal Evaluation()
        {
        }

        /// <summary> Identifier of the evaluation. </summary>
        public string Id { get; }
        /// <summary>
        /// Data for evaluation.
        /// Please note <see cref="InputData"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ApplicationInsightsConfiguration"/> and <see cref="Dataset"/>.
        /// </summary>
        public InputData Data { get; set; }
        /// <summary> Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. </summary>
        public string DisplayName { get; set; }
        /// <summary> Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. </summary>
        public string Description { get; set; }
        /// <summary> Metadata containing createdBy and modifiedBy information. </summary>
        public SystemData SystemData { get; }
        /// <summary> Status of the evaluation. It is set by service and is read-only. </summary>
        public string Status { get; }
        /// <summary> Evaluation's tags. Unlike properties, tags are fully mutable. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </summary>
        public IDictionary<string, string> Properties { get; }
        /// <summary> Evaluators to be used for the evaluation. </summary>
        public IDictionary<string, EvaluatorConfiguration> Evaluators { get; }
    }
}
