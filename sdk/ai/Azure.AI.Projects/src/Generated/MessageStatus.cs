// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects
{
    /// <summary> The possible execution status values for a thread message. </summary>
    public readonly partial struct MessageStatus : IEquatable<MessageStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MessageStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MessageStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InProgressValue = "in_progress";
        private const string IncompleteValue = "incomplete";
        private const string CompletedValue = "completed";

        /// <summary> A run is currently creating this message. </summary>
        public static MessageStatus InProgress { get; } = new MessageStatus(InProgressValue);
        /// <summary> This message is incomplete. See incomplete_details for more information. </summary>
        public static MessageStatus Incomplete { get; } = new MessageStatus(IncompleteValue);
        /// <summary> This message was successfully completed by a run. </summary>
        public static MessageStatus Completed { get; } = new MessageStatus(CompletedValue);
        /// <summary> Determines if two <see cref="MessageStatus"/> values are the same. </summary>
        public static bool operator ==(MessageStatus left, MessageStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MessageStatus"/> values are not the same. </summary>
        public static bool operator !=(MessageStatus left, MessageStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MessageStatus"/>. </summary>
        public static implicit operator MessageStatus(string value) => new MessageStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MessageStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MessageStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
