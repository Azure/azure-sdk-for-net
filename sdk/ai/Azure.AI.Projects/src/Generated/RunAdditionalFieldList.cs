// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects
{
    /// <summary> A list of additional fields to include in the response. </summary>
    public readonly partial struct RunAdditionalFieldList : IEquatable<RunAdditionalFieldList>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RunAdditionalFieldList"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RunAdditionalFieldList(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FileSearchContentsValue = "step_details.tool_calls[*].file_search.results[*].content";

        /// <summary> File search result content. </summary>
        public static RunAdditionalFieldList FileSearchContents { get; } = new RunAdditionalFieldList(FileSearchContentsValue);
        /// <summary> Determines if two <see cref="RunAdditionalFieldList"/> values are the same. </summary>
        public static bool operator ==(RunAdditionalFieldList left, RunAdditionalFieldList right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RunAdditionalFieldList"/> values are not the same. </summary>
        public static bool operator !=(RunAdditionalFieldList left, RunAdditionalFieldList right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RunAdditionalFieldList"/>. </summary>
        public static implicit operator RunAdditionalFieldList(string value) => new RunAdditionalFieldList(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RunAdditionalFieldList other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RunAdditionalFieldList other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
