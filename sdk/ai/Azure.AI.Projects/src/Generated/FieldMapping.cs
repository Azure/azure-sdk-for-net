// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Projects
{
    /// <summary> Field mapping configuration class. </summary>
    public partial class FieldMapping
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FieldMapping"/>. </summary>
        /// <param name="contentFields"> List of fields with text content. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentFields"/> is null. </exception>
        public FieldMapping(IEnumerable<string> contentFields)
        {
            Argument.AssertNotNull(contentFields, nameof(contentFields));

            ContentFields = contentFields.ToList();
            VectorFields = new ChangeTrackingList<string>();
            MetadataFields = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="FieldMapping"/>. </summary>
        /// <param name="contentFields"> List of fields with text content. </param>
        /// <param name="filepathField"> Path of file to be used as a source of text content. </param>
        /// <param name="titleField"> Field containing the title of the document. </param>
        /// <param name="urlField"> Field containing the url of the document. </param>
        /// <param name="vectorFields"> List of fields with vector content. </param>
        /// <param name="metadataFields"> List of fields with metadata content. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FieldMapping(IList<string> contentFields, string filepathField, string titleField, string urlField, IList<string> vectorFields, IList<string> metadataFields, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ContentFields = contentFields;
            FilepathField = filepathField;
            TitleField = titleField;
            UrlField = urlField;
            VectorFields = vectorFields;
            MetadataFields = metadataFields;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="FieldMapping"/> for deserialization. </summary>
        internal FieldMapping()
        {
        }

        /// <summary> List of fields with text content. </summary>
        public IList<string> ContentFields { get; }
        /// <summary> Path of file to be used as a source of text content. </summary>
        public string FilepathField { get; set; }
        /// <summary> Field containing the title of the document. </summary>
        public string TitleField { get; set; }
        /// <summary> Field containing the url of the document. </summary>
        public string UrlField { get; set; }
        /// <summary> List of fields with vector content. </summary>
        public IList<string> VectorFields { get; }
        /// <summary> List of fields with metadata content. </summary>
        public IList<string> MetadataFields { get; }
    }
}
