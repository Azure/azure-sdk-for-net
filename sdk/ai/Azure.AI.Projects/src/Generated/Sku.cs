// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> Sku information. </summary>
    public partial class Sku
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Sku"/>. </summary>
        /// <param name="capacity"> Sku capacity. </param>
        /// <param name="family"> Sku family. </param>
        /// <param name="name"> Sku name. </param>
        /// <param name="size"> Sku size. </param>
        /// <param name="tier"> Sku tier. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="family"/>, <paramref name="name"/>, <paramref name="size"/> or <paramref name="tier"/> is null. </exception>
        internal Sku(long capacity, string family, string name, string size, string tier)
        {
            Argument.AssertNotNull(family, nameof(family));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(size, nameof(size));
            Argument.AssertNotNull(tier, nameof(tier));

            Capacity = capacity;
            Family = family;
            Name = name;
            Size = size;
            Tier = tier;
        }

        /// <summary> Initializes a new instance of <see cref="Sku"/>. </summary>
        /// <param name="capacity"> Sku capacity. </param>
        /// <param name="family"> Sku family. </param>
        /// <param name="name"> Sku name. </param>
        /// <param name="size"> Sku size. </param>
        /// <param name="tier"> Sku tier. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Sku(long capacity, string family, string name, string size, string tier, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Capacity = capacity;
            Family = family;
            Name = name;
            Size = size;
            Tier = tier;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="Sku"/> for deserialization. </summary>
        internal Sku()
        {
        }

        /// <summary> Sku capacity. </summary>
        public long Capacity { get; }
        /// <summary> Sku family. </summary>
        public string Family { get; }
        /// <summary> Sku name. </summary>
        public string Name { get; }
        /// <summary> Sku size. </summary>
        public string Size { get; }
        /// <summary> Sku tier. </summary>
        public string Tier { get; }
    }
}
