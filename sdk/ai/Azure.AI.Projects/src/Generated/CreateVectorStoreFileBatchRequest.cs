// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> The CreateVectorStoreFileBatchRequest. </summary>
    internal partial class CreateVectorStoreFileBatchRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CreateVectorStoreFileBatchRequest"/>. </summary>
        internal CreateVectorStoreFileBatchRequest()
        {
            FileIds = new ChangeTrackingList<string>();
            DataSources = new ChangeTrackingList<VectorStoreDataSource>();
        }

        /// <summary> Initializes a new instance of <see cref="CreateVectorStoreFileBatchRequest"/>. </summary>
        /// <param name="fileIds"> List of file identifiers. </param>
        /// <param name="dataSources"> List of Azure assets. </param>
        /// <param name="chunkingStrategy">
        /// The chunking strategy used to chunk the file(s). If not set, will use the auto strategy.
        /// Please note <see cref="VectorStoreChunkingStrategyRequest"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VectorStoreAutoChunkingStrategyRequest"/> and <see cref="VectorStoreStaticChunkingStrategyRequest"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CreateVectorStoreFileBatchRequest(IReadOnlyList<string> fileIds, IReadOnlyList<VectorStoreDataSource> dataSources, VectorStoreChunkingStrategyRequest chunkingStrategy, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FileIds = fileIds;
            DataSources = dataSources;
            ChunkingStrategy = chunkingStrategy;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> List of file identifiers. </summary>
        public IReadOnlyList<string> FileIds { get; }
        /// <summary> List of Azure assets. </summary>
        public IReadOnlyList<VectorStoreDataSource> DataSources { get; }
        /// <summary>
        /// The chunking strategy used to chunk the file(s). If not set, will use the auto strategy.
        /// Please note <see cref="VectorStoreChunkingStrategyRequest"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VectorStoreAutoChunkingStrategyRequest"/> and <see cref="VectorStoreStaticChunkingStrategyRequest"/>.
        /// </summary>
        public VectorStoreChunkingStrategyRequest ChunkingStrategy { get; }
    }
}
