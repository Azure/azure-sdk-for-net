// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> Result for the agent evaluation evaluator run. </summary>
    public partial class AgentEvaluationResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AgentEvaluationResult"/>. </summary>
        /// <param name="evaluator"> Evaluator's name. This is the name of the evaluator that was used to evaluate the agent's completion. </param>
        /// <param name="evaluatorId"> Identifier of the evaluator. </param>
        /// <param name="score"> Score of the given evaluator. No restriction on range. </param>
        /// <param name="status"> Status of the evaluator result. Options: Running, Completed, Failed, NotApplicable. </param>
        /// <param name="runId"> The unique identifier of the run. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluator"/>, <paramref name="evaluatorId"/>, <paramref name="status"/> or <paramref name="runId"/> is null. </exception>
        internal AgentEvaluationResult(string evaluator, string evaluatorId, float score, string status, string runId)
        {
            Argument.AssertNotNull(evaluator, nameof(evaluator));
            Argument.AssertNotNull(evaluatorId, nameof(evaluatorId));
            Argument.AssertNotNull(status, nameof(status));
            Argument.AssertNotNull(runId, nameof(runId));

            Evaluator = evaluator;
            EvaluatorId = evaluatorId;
            Score = score;
            Status = status;
            RunId = runId;
            AdditionalDetails = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="AgentEvaluationResult"/>. </summary>
        /// <param name="evaluator"> Evaluator's name. This is the name of the evaluator that was used to evaluate the agent's completion. </param>
        /// <param name="evaluatorId"> Identifier of the evaluator. </param>
        /// <param name="score"> Score of the given evaluator. No restriction on range. </param>
        /// <param name="status"> Status of the evaluator result. Options: Running, Completed, Failed, NotApplicable. </param>
        /// <param name="reason"> Reasoning for the evaluation result. </param>
        /// <param name="version"> Version of the evaluator that was used to evaluate the agent's completion. </param>
        /// <param name="threadId"> The unique identifier of the thread. </param>
        /// <param name="runId"> The unique identifier of the run. </param>
        /// <param name="error"> A string explaining why there was an error, if applicable. </param>
        /// <param name="additionalDetails"> Additional properties relevant to the evaluator. These will differ between evaluators. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AgentEvaluationResult(string evaluator, string evaluatorId, float score, string status, string reason, string version, string threadId, string runId, string error, IReadOnlyDictionary<string, string> additionalDetails, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Evaluator = evaluator;
            EvaluatorId = evaluatorId;
            Score = score;
            Status = status;
            Reason = reason;
            Version = version;
            ThreadId = threadId;
            RunId = runId;
            Error = error;
            AdditionalDetails = additionalDetails;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AgentEvaluationResult"/> for deserialization. </summary>
        internal AgentEvaluationResult()
        {
        }

        /// <summary> Evaluator's name. This is the name of the evaluator that was used to evaluate the agent's completion. </summary>
        public string Evaluator { get; }
        /// <summary> Identifier of the evaluator. </summary>
        public string EvaluatorId { get; }
        /// <summary> Score of the given evaluator. No restriction on range. </summary>
        public float Score { get; }
        /// <summary> Status of the evaluator result. Options: Running, Completed, Failed, NotApplicable. </summary>
        public string Status { get; }
        /// <summary> Reasoning for the evaluation result. </summary>
        public string Reason { get; }
        /// <summary> Version of the evaluator that was used to evaluate the agent's completion. </summary>
        public string Version { get; }
        /// <summary> The unique identifier of the thread. </summary>
        public string ThreadId { get; }
        /// <summary> The unique identifier of the run. </summary>
        public string RunId { get; }
        /// <summary> A string explaining why there was an error, if applicable. </summary>
        public string Error { get; }
        /// <summary> Additional properties relevant to the evaluator. These will differ between evaluators. </summary>
        public IReadOnlyDictionary<string, string> AdditionalDetails { get; }
    }
}
