// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects
{
    /// <summary> Available query types for Azure AI Search tool. </summary>
    public readonly partial struct AzureAISearchQueryType : IEquatable<AzureAISearchQueryType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AzureAISearchQueryType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AzureAISearchQueryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SimpleValue = "simple";
        private const string SemanticValue = "semantic";
        private const string VectorValue = "vector";
        private const string VectorSimpleHybridValue = "vector_simple_hybrid";
        private const string VectorSemanticHybridValue = "vector_semantic_hybrid";

        /// <summary> Query type `simple`. </summary>
        public static AzureAISearchQueryType Simple { get; } = new AzureAISearchQueryType(SimpleValue);
        /// <summary> Query type `semantic`. </summary>
        public static AzureAISearchQueryType Semantic { get; } = new AzureAISearchQueryType(SemanticValue);
        /// <summary> Query type `vector`. </summary>
        public static AzureAISearchQueryType Vector { get; } = new AzureAISearchQueryType(VectorValue);
        /// <summary> Query type `vector_simple_hybrid`. </summary>
        public static AzureAISearchQueryType VectorSimpleHybrid { get; } = new AzureAISearchQueryType(VectorSimpleHybridValue);
        /// <summary> Query type `vector_semantic_hybrid`. </summary>
        public static AzureAISearchQueryType VectorSemanticHybrid { get; } = new AzureAISearchQueryType(VectorSemanticHybridValue);
        /// <summary> Determines if two <see cref="AzureAISearchQueryType"/> values are the same. </summary>
        public static bool operator ==(AzureAISearchQueryType left, AzureAISearchQueryType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AzureAISearchQueryType"/> values are not the same. </summary>
        public static bool operator !=(AzureAISearchQueryType left, AzureAISearchQueryType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AzureAISearchQueryType"/>. </summary>
        public static implicit operator AzureAISearchQueryType(string value) => new AzureAISearchQueryType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AzureAISearchQueryType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AzureAISearchQueryType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
