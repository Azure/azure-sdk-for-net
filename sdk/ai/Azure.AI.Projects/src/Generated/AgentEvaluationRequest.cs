// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> Evaluation request for agent run. </summary>
    public partial class AgentEvaluationRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AgentEvaluationRequest"/>. </summary>
        /// <param name="runId"> Identifier of the agent run. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <param name="appInsightsConnectionString"> Pass the AppInsights connection string to the agent evaluation for the evaluation results and the errors logs. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/>, <paramref name="evaluators"/> or <paramref name="appInsightsConnectionString"/> is null. </exception>
        public AgentEvaluationRequest(string runId, IDictionary<string, EvaluatorConfiguration> evaluators, string appInsightsConnectionString)
        {
            Argument.AssertNotNull(runId, nameof(runId));
            Argument.AssertNotNull(evaluators, nameof(evaluators));
            Argument.AssertNotNull(appInsightsConnectionString, nameof(appInsightsConnectionString));

            RunId = runId;
            Evaluators = evaluators;
            AppInsightsConnectionString = appInsightsConnectionString;
        }

        /// <summary> Initializes a new instance of <see cref="AgentEvaluationRequest"/>. </summary>
        /// <param name="runId"> Identifier of the agent run. </param>
        /// <param name="threadId"> Identifier of the agent thread. This field is mandatory currently, but it will be optional in the future. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <param name="samplingConfiguration"> Sampling configuration for the evaluation. </param>
        /// <param name="redactionConfiguration"> Redaction configuration for the evaluation. </param>
        /// <param name="appInsightsConnectionString"> Pass the AppInsights connection string to the agent evaluation for the evaluation results and the errors logs. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AgentEvaluationRequest(string runId, string threadId, IDictionary<string, EvaluatorConfiguration> evaluators, AgentEvaluationSamplingConfiguration samplingConfiguration, AgentEvaluationRedactionConfiguration redactionConfiguration, string appInsightsConnectionString, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            RunId = runId;
            ThreadId = threadId;
            Evaluators = evaluators;
            SamplingConfiguration = samplingConfiguration;
            RedactionConfiguration = redactionConfiguration;
            AppInsightsConnectionString = appInsightsConnectionString;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AgentEvaluationRequest"/> for deserialization. </summary>
        internal AgentEvaluationRequest()
        {
        }

        /// <summary> Identifier of the agent run. </summary>
        public string RunId { get; }
        /// <summary> Identifier of the agent thread. This field is mandatory currently, but it will be optional in the future. </summary>
        public string ThreadId { get; set; }
        /// <summary> Evaluators to be used for the evaluation. </summary>
        public IDictionary<string, EvaluatorConfiguration> Evaluators { get; }
        /// <summary> Sampling configuration for the evaluation. </summary>
        public AgentEvaluationSamplingConfiguration SamplingConfiguration { get; set; }
        /// <summary> Redaction configuration for the evaluation. </summary>
        public AgentEvaluationRedactionConfiguration RedactionConfiguration { get; set; }
        /// <summary> Pass the AppInsights connection string to the agent evaluation for the evaluation results and the errors logs. </summary>
        public string AppInsightsConnectionString { get; }
    }
}
