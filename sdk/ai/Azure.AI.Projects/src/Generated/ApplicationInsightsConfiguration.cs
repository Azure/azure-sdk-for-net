// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary> Data Source for Application Insights. </summary>
    public partial class ApplicationInsightsConfiguration : InputData
    {
        /// <summary> Initializes a new instance of <see cref="ApplicationInsightsConfiguration"/>. </summary>
        /// <param name="resourceId"> LogAnalytic Workspace resourceID associated with ApplicationInsights. </param>
        /// <param name="query"> Query to fetch the data. </param>
        /// <param name="serviceName"> Service name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="query"/> or <paramref name="serviceName"/> is null. </exception>
        public ApplicationInsightsConfiguration(string resourceId, string query, string serviceName)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNull(query, nameof(query));
            Argument.AssertNotNull(serviceName, nameof(serviceName));

            Type = "app_insights";
            ResourceId = resourceId;
            Query = query;
            ServiceName = serviceName;
        }

        /// <summary> Initializes a new instance of <see cref="ApplicationInsightsConfiguration"/>. </summary>
        /// <param name="type"> Type of the data. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="resourceId"> LogAnalytic Workspace resourceID associated with ApplicationInsights. </param>
        /// <param name="query"> Query to fetch the data. </param>
        /// <param name="serviceName"> Service name. </param>
        /// <param name="connectionString"> Connection String to connect to ApplicationInsights. </param>
        internal ApplicationInsightsConfiguration(string type, IDictionary<string, BinaryData> serializedAdditionalRawData, string resourceId, string query, string serviceName, string connectionString) : base(type, serializedAdditionalRawData)
        {
            ResourceId = resourceId;
            Query = query;
            ServiceName = serviceName;
            ConnectionString = connectionString;
        }

        /// <summary> Initializes a new instance of <see cref="ApplicationInsightsConfiguration"/> for deserialization. </summary>
        internal ApplicationInsightsConfiguration()
        {
        }

        /// <summary> LogAnalytic Workspace resourceID associated with ApplicationInsights. </summary>
        public string ResourceId { get; set; }
        /// <summary> Query to fetch the data. </summary>
        public string Query { get; set; }
        /// <summary> Service name. </summary>
        public string ServiceName { get; set; }
        /// <summary> Connection String to connect to ApplicationInsights. </summary>
        public string ConnectionString { get; set; }
    }
}
