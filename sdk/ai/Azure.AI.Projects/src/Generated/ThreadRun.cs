// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Projects
{
    /// <summary> Data representing a single evaluation run of an agent thread. </summary>
    public partial class ThreadRun
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ThreadRun"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="threadId"> The ID of the thread associated with this run. </param>
        /// <param name="assistantId"> The ID of the agent associated with the thread this run was performed against. </param>
        /// <param name="status"> The status of the agent thread run. </param>
        /// <param name="lastError"> The last error, if any, encountered by this agent thread run. </param>
        /// <param name="model"> The ID of the model to use. </param>
        /// <param name="instructions"> The overridden system instructions used for this agent thread run. </param>
        /// <param name="tools">
        /// The overridden enabled tools used for this agent thread run.
        /// Please note <see cref="ToolDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureAISearchToolDefinition"/>, <see cref="AzureFunctionToolDefinition"/>, <see cref="BingGroundingToolDefinition"/>, <see cref="CodeInterpreterToolDefinition"/>, <see cref="MicrosoftFabricToolDefinition"/>, <see cref="FileSearchToolDefinition"/>, <see cref="FunctionToolDefinition"/>, <see cref="OpenApiToolDefinition"/> and <see cref="SharepointToolDefinition"/>.
        /// </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="expiresAt"> The Unix timestamp, in seconds, representing when this item expires. </param>
        /// <param name="startedAt"> The Unix timestamp, in seconds, representing when this item was started. </param>
        /// <param name="completedAt"> The Unix timestamp, in seconds, representing when this completed. </param>
        /// <param name="cancelledAt"> The Unix timestamp, in seconds, representing when this was cancelled. </param>
        /// <param name="failedAt"> The Unix timestamp, in seconds, representing when this failed. </param>
        /// <param name="incompleteDetails"> Details on why the run is incomplete. Will be `null` if the run is not incomplete. </param>
        /// <param name="usage"> Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.). </param>
        /// <param name="maxPromptTokens"> The maximum number of prompt tokens specified to have been used over the course of the run. </param>
        /// <param name="maxCompletionTokens"> The maximum number of completion tokens specified to have been used over the course of the run. </param>
        /// <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        /// <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        /// <param name="responseFormat"> The response format of the tool calls used in this run. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <param name="parallelToolCalls"> Determines if tools can be executed in parallel within the run. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="threadId"/>, <paramref name="assistantId"/>, <paramref name="model"/>, <paramref name="instructions"/> or <paramref name="tools"/> is null. </exception>
        internal ThreadRun(string id, string threadId, string assistantId, RunStatus status, RunError lastError, string model, string instructions, IEnumerable<ToolDefinition> tools, DateTimeOffset createdAt, DateTimeOffset? expiresAt, DateTimeOffset? startedAt, DateTimeOffset? completedAt, DateTimeOffset? cancelledAt, DateTimeOffset? failedAt, IncompleteRunDetails incompleteDetails, RunCompletionUsage usage, int? maxPromptTokens, int? maxCompletionTokens, TruncationObject truncationStrategy, BinaryData toolChoice, BinaryData responseFormat, IReadOnlyDictionary<string, string> metadata, bool parallelToolCalls)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(threadId, nameof(threadId));
            Argument.AssertNotNull(assistantId, nameof(assistantId));
            Argument.AssertNotNull(model, nameof(model));
            Argument.AssertNotNull(instructions, nameof(instructions));
            Argument.AssertNotNull(tools, nameof(tools));

            Id = id;
            ThreadId = threadId;
            AssistantId = assistantId;
            Status = status;
            LastError = lastError;
            Model = model;
            Instructions = instructions;
            Tools = tools.ToList();
            CreatedAt = createdAt;
            ExpiresAt = expiresAt;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            CancelledAt = cancelledAt;
            FailedAt = failedAt;
            IncompleteDetails = incompleteDetails;
            Usage = usage;
            MaxPromptTokens = maxPromptTokens;
            MaxCompletionTokens = maxCompletionTokens;
            TruncationStrategy = truncationStrategy;
            ToolChoice = toolChoice;
            ResponseFormat = responseFormat;
            Metadata = metadata;
            ParallelToolCalls = parallelToolCalls;
        }

        /// <summary> Initializes a new instance of <see cref="ThreadRun"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always 'thread.run'. </param>
        /// <param name="threadId"> The ID of the thread associated with this run. </param>
        /// <param name="assistantId"> The ID of the agent associated with the thread this run was performed against. </param>
        /// <param name="status"> The status of the agent thread run. </param>
        /// <param name="requiredAction">
        /// The details of the action required for the agent thread run to continue.
        /// Please note <see cref="Projects.RequiredAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SubmitToolOutputsAction"/>.
        /// </param>
        /// <param name="lastError"> The last error, if any, encountered by this agent thread run. </param>
        /// <param name="model"> The ID of the model to use. </param>
        /// <param name="instructions"> The overridden system instructions used for this agent thread run. </param>
        /// <param name="tools">
        /// The overridden enabled tools used for this agent thread run.
        /// Please note <see cref="ToolDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureAISearchToolDefinition"/>, <see cref="AzureFunctionToolDefinition"/>, <see cref="BingGroundingToolDefinition"/>, <see cref="CodeInterpreterToolDefinition"/>, <see cref="MicrosoftFabricToolDefinition"/>, <see cref="FileSearchToolDefinition"/>, <see cref="FunctionToolDefinition"/>, <see cref="OpenApiToolDefinition"/> and <see cref="SharepointToolDefinition"/>.
        /// </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="expiresAt"> The Unix timestamp, in seconds, representing when this item expires. </param>
        /// <param name="startedAt"> The Unix timestamp, in seconds, representing when this item was started. </param>
        /// <param name="completedAt"> The Unix timestamp, in seconds, representing when this completed. </param>
        /// <param name="cancelledAt"> The Unix timestamp, in seconds, representing when this was cancelled. </param>
        /// <param name="failedAt"> The Unix timestamp, in seconds, representing when this failed. </param>
        /// <param name="incompleteDetails"> Details on why the run is incomplete. Will be `null` if the run is not incomplete. </param>
        /// <param name="usage"> Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.). </param>
        /// <param name="temperature"> The sampling temperature used for this run. If not set, defaults to 1. </param>
        /// <param name="topP"> The nucleus sampling value used for this run. If not set, defaults to 1. </param>
        /// <param name="maxPromptTokens"> The maximum number of prompt tokens specified to have been used over the course of the run. </param>
        /// <param name="maxCompletionTokens"> The maximum number of completion tokens specified to have been used over the course of the run. </param>
        /// <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        /// <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        /// <param name="responseFormat"> The response format of the tool calls used in this run. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <param name="toolResources"> Override the tools the agent can use for this run. This is useful for modifying the behavior on a per-run basis. </param>
        /// <param name="parallelToolCalls"> Determines if tools can be executed in parallel within the run. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ThreadRun(string id, string @object, string threadId, string assistantId, RunStatus status, RequiredAction requiredAction, RunError lastError, string model, string instructions, IReadOnlyList<ToolDefinition> tools, DateTimeOffset createdAt, DateTimeOffset? expiresAt, DateTimeOffset? startedAt, DateTimeOffset? completedAt, DateTimeOffset? cancelledAt, DateTimeOffset? failedAt, IncompleteRunDetails incompleteDetails, RunCompletionUsage usage, float? temperature, float? topP, int? maxPromptTokens, int? maxCompletionTokens, TruncationObject truncationStrategy, BinaryData toolChoice, BinaryData responseFormat, IReadOnlyDictionary<string, string> metadata, UpdateToolResourcesOptions toolResources, bool parallelToolCalls, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Object = @object;
            ThreadId = threadId;
            AssistantId = assistantId;
            Status = status;
            RequiredAction = requiredAction;
            LastError = lastError;
            Model = model;
            Instructions = instructions;
            Tools = tools;
            CreatedAt = createdAt;
            ExpiresAt = expiresAt;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            CancelledAt = cancelledAt;
            FailedAt = failedAt;
            IncompleteDetails = incompleteDetails;
            Usage = usage;
            Temperature = temperature;
            TopP = topP;
            MaxPromptTokens = maxPromptTokens;
            MaxCompletionTokens = maxCompletionTokens;
            TruncationStrategy = truncationStrategy;
            ToolChoice = toolChoice;
            ResponseFormat = responseFormat;
            Metadata = metadata;
            ToolResources = toolResources;
            ParallelToolCalls = parallelToolCalls;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ThreadRun"/> for deserialization. </summary>
        internal ThreadRun()
        {
        }

        /// <summary> The identifier, which can be referenced in API endpoints. </summary>
        public string Id { get; }

        /// <summary> The ID of the thread associated with this run. </summary>
        public string ThreadId { get; }
        /// <summary> The ID of the agent associated with the thread this run was performed against. </summary>
        public string AssistantId { get; }
        /// <summary> The status of the agent thread run. </summary>
        public RunStatus Status { get; }
        /// <summary>
        /// The details of the action required for the agent thread run to continue.
        /// Please note <see cref="Projects.RequiredAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SubmitToolOutputsAction"/>.
        /// </summary>
        public RequiredAction RequiredAction { get; }
        /// <summary> The last error, if any, encountered by this agent thread run. </summary>
        public RunError LastError { get; }
        /// <summary> The ID of the model to use. </summary>
        public string Model { get; }
        /// <summary> The overridden system instructions used for this agent thread run. </summary>
        public string Instructions { get; }
        /// <summary>
        /// The overridden enabled tools used for this agent thread run.
        /// Please note <see cref="ToolDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureAISearchToolDefinition"/>, <see cref="AzureFunctionToolDefinition"/>, <see cref="BingGroundingToolDefinition"/>, <see cref="CodeInterpreterToolDefinition"/>, <see cref="MicrosoftFabricToolDefinition"/>, <see cref="FileSearchToolDefinition"/>, <see cref="FunctionToolDefinition"/>, <see cref="OpenApiToolDefinition"/> and <see cref="SharepointToolDefinition"/>.
        /// </summary>
        public IReadOnlyList<ToolDefinition> Tools { get; }
        /// <summary> The Unix timestamp, in seconds, representing when this object was created. </summary>
        public DateTimeOffset CreatedAt { get; }
        /// <summary> The Unix timestamp, in seconds, representing when this item expires. </summary>
        public DateTimeOffset? ExpiresAt { get; }
        /// <summary> The Unix timestamp, in seconds, representing when this item was started. </summary>
        public DateTimeOffset? StartedAt { get; }
        /// <summary> The Unix timestamp, in seconds, representing when this completed. </summary>
        public DateTimeOffset? CompletedAt { get; }
        /// <summary> The Unix timestamp, in seconds, representing when this was cancelled. </summary>
        public DateTimeOffset? CancelledAt { get; }
        /// <summary> The Unix timestamp, in seconds, representing when this failed. </summary>
        public DateTimeOffset? FailedAt { get; }
        /// <summary> Details on why the run is incomplete. Will be `null` if the run is not incomplete. </summary>
        public IncompleteRunDetails IncompleteDetails { get; }
        /// <summary> Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.). </summary>
        public RunCompletionUsage Usage { get; }
        /// <summary> The sampling temperature used for this run. If not set, defaults to 1. </summary>
        public float? Temperature { get; }
        /// <summary> The nucleus sampling value used for this run. If not set, defaults to 1. </summary>
        public float? TopP { get; }
        /// <summary> The maximum number of prompt tokens specified to have been used over the course of the run. </summary>
        public int? MaxPromptTokens { get; }
        /// <summary> The maximum number of completion tokens specified to have been used over the course of the run. </summary>
        public int? MaxCompletionTokens { get; }
        /// <summary> The strategy to use for dropping messages as the context windows moves forward. </summary>
        public TruncationObject TruncationStrategy { get; }
        /// <summary>
        /// Controls whether or not and which tool is called by the model.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="string"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="AgentsApiToolChoiceOptionMode"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="AgentsNamedToolChoice"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData ToolChoice { get; }
        /// <summary>
        /// The response format of the tool calls used in this run.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="string"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="AgentsApiResponseFormatMode"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="AgentsApiResponseFormat"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="ResponseFormatJsonSchemaType"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData ResponseFormat { get; }
        /// <summary> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </summary>
        public IReadOnlyDictionary<string, string> Metadata { get; }
        /// <summary> Override the tools the agent can use for this run. This is useful for modifying the behavior on a per-run basis. </summary>
        public UpdateToolResourcesOptions ToolResources { get; }
        /// <summary> Determines if tools can be executed in parallel within the run. </summary>
        public bool ParallelToolCalls { get; }
    }
}
