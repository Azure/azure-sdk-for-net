// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects
{
    /// <summary>
    /// Controls for how a thread will be truncated prior to the run. Use this to control the initial
    /// context window of the run.
    /// </summary>
    public partial class TruncationObject
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TruncationObject"/>. </summary>
        /// <param name="type">
        /// The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will
        /// be truncated to the `lastMessages` count most recent messages in the thread. When set to `auto`, messages in the middle of the thread
        /// will be dropped to fit the context length of the model, `max_prompt_tokens`.
        /// </param>
        public TruncationObject(TruncationStrategy type)
        {
            Type = type;
        }

        /// <summary> Initializes a new instance of <see cref="TruncationObject"/>. </summary>
        /// <param name="type">
        /// The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will
        /// be truncated to the `lastMessages` count most recent messages in the thread. When set to `auto`, messages in the middle of the thread
        /// will be dropped to fit the context length of the model, `max_prompt_tokens`.
        /// </param>
        /// <param name="lastMessages"> The number of most recent messages from the thread when constructing the context for the run. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TruncationObject(TruncationStrategy type, int? lastMessages, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            LastMessages = lastMessages;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TruncationObject"/> for deserialization. </summary>
        internal TruncationObject()
        {
        }

        /// <summary>
        /// The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will
        /// be truncated to the `lastMessages` count most recent messages in the thread. When set to `auto`, messages in the middle of the thread
        /// will be dropped to fit the context length of the model, `max_prompt_tokens`.
        /// </summary>
        public TruncationStrategy Type { get; set; }
        /// <summary> The number of most recent messages from the thread when constructing the context for the run. </summary>
        public int? LastMessages { get; set; }
    }
}
