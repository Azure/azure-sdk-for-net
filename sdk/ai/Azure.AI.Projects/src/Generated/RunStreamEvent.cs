// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects
{
    /// <summary> Run operation related streaming events. </summary>
    public readonly partial struct RunStreamEvent : IEquatable<RunStreamEvent>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RunStreamEvent"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RunStreamEvent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ThreadRunCreatedValue = "thread.run.created";
        private const string ThreadRunQueuedValue = "thread.run.queued";
        private const string ThreadRunInProgressValue = "thread.run.in_progress";
        private const string ThreadRunRequiresActionValue = "thread.run.requires_action";
        private const string ThreadRunCompletedValue = "thread.run.completed";
        private const string ThreadRunIncompleteValue = "thread.run.incomplete";
        private const string ThreadRunFailedValue = "thread.run.failed";
        private const string ThreadRunCancellingValue = "thread.run.cancelling";
        private const string ThreadRunCancelledValue = "thread.run.cancelled";
        private const string ThreadRunExpiredValue = "thread.run.expired";

        /// <summary> Event sent when a new run is created. The data of this event is of type ThreadRun. </summary>
        public static RunStreamEvent ThreadRunCreated { get; } = new RunStreamEvent(ThreadRunCreatedValue);
        /// <summary> Event sent when a run moves to `queued` status. The data of this event is of type ThreadRun. </summary>
        public static RunStreamEvent ThreadRunQueued { get; } = new RunStreamEvent(ThreadRunQueuedValue);
        /// <summary> Event sent when a run moves to `in_progress` status. The data of this event is of type ThreadRun. </summary>
        public static RunStreamEvent ThreadRunInProgress { get; } = new RunStreamEvent(ThreadRunInProgressValue);
        /// <summary> Event sent when a run moves to `requires_action` status. The data of this event is of type ThreadRun. </summary>
        public static RunStreamEvent ThreadRunRequiresAction { get; } = new RunStreamEvent(ThreadRunRequiresActionValue);
        /// <summary> Event sent when a run is completed. The data of this event is of type ThreadRun. </summary>
        public static RunStreamEvent ThreadRunCompleted { get; } = new RunStreamEvent(ThreadRunCompletedValue);
        /// <summary> Event sent when a run ends incomplete. The data of this event is of type ThreadRun. </summary>
        public static RunStreamEvent ThreadRunIncomplete { get; } = new RunStreamEvent(ThreadRunIncompleteValue);
        /// <summary> Event sent when a run fails. The data of this event is of type ThreadRun. </summary>
        public static RunStreamEvent ThreadRunFailed { get; } = new RunStreamEvent(ThreadRunFailedValue);
        /// <summary> Event sent when a run moves to `cancelling` status. The data of this event is of type ThreadRun. </summary>
        public static RunStreamEvent ThreadRunCancelling { get; } = new RunStreamEvent(ThreadRunCancellingValue);
        /// <summary> Event sent when a run is cancelled. The data of this event is of type ThreadRun. </summary>
        public static RunStreamEvent ThreadRunCancelled { get; } = new RunStreamEvent(ThreadRunCancelledValue);
        /// <summary> Event sent when a run is expired. The data of this event is of type ThreadRun. </summary>
        public static RunStreamEvent ThreadRunExpired { get; } = new RunStreamEvent(ThreadRunExpiredValue);
        /// <summary> Determines if two <see cref="RunStreamEvent"/> values are the same. </summary>
        public static bool operator ==(RunStreamEvent left, RunStreamEvent right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RunStreamEvent"/> values are not the same. </summary>
        public static bool operator !=(RunStreamEvent left, RunStreamEvent right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RunStreamEvent"/>. </summary>
        public static implicit operator RunStreamEvent(string value) => new RunStreamEvent(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RunStreamEvent other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RunStreamEvent other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
