// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> Options for a function-based tool behavior. </summary>
    public partial class FunctionToolOptions : AgentToolOptions
    {
        /// <summary> Initializes a new instance of <see cref="FunctionToolOptions"/>. </summary>
        /// <param name="name"> The function/tool name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public FunctionToolOptions(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Type = "Function";
            Name = name;
        }

        /// <summary> Initializes a new instance of <see cref="FunctionToolOptions"/>. </summary>
        /// <param name="type"> Discriminates the various child 'tool options' types. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="name"> The function/tool name. </param>
        /// <param name="description"> An optional description for the function-based tool. </param>
        /// <param name="parameters"> A JSON schema describing the function's parameters. </param>
        /// <param name="strict"> Indicates whether strict validation is required. </param>
        internal FunctionToolOptions(string type, IDictionary<string, BinaryData> serializedAdditionalRawData, string name, string description, JSONSchema parameters, bool? strict) : base(type, serializedAdditionalRawData)
        {
            Name = name;
            Description = description;
            Parameters = parameters;
            Strict = strict;
        }

        /// <summary> Initializes a new instance of <see cref="FunctionToolOptions"/> for deserialization. </summary>
        internal FunctionToolOptions()
        {
        }

        /// <summary> The function/tool name. </summary>
        public string Name { get; set; }
        /// <summary> An optional description for the function-based tool. </summary>
        public string Description { get; set; }
        /// <summary> A JSON schema describing the function's parameters. </summary>
        public JSONSchema Parameters { get; set; }
        /// <summary> Indicates whether strict validation is required. </summary>
        public bool? Strict { get; set; }
    }
}
