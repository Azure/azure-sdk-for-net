// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects.OneDP
{
    /// <summary>
    /// Represents a definition of a tool that an agent may use, used in a polymorphic manner.
    /// Please note <see cref="AgentToolDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="BingGroundingToolDefinition"/>, <see cref="CodeInterpreterToolDefinition"/>, <see cref="FileSearchToolDefinition"/> and <see cref="OpenApiToolDefinition"/>.
    /// </summary>
    public abstract partial class AgentToolDefinition
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AgentToolDefinition"/>. </summary>
        protected AgentToolDefinition()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AgentToolDefinition"/>. </summary>
        /// <param name="type"> Discriminates the various child 'tool definition' types. </param>
        /// <param name="options">
        /// Additional options that specify the behavior of this tool (also polymorphic).
        /// Please note <see cref="AgentToolOptions"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FunctionToolOptions"/>.
        /// </param>
        /// <param name="override"> A set of overrides for the tool's name, description, or parameters. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AgentToolDefinition(string type, AgentToolOptions options, AgentToolDefinitionOverride @override, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            Options = options;
            Override = @override;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Discriminates the various child 'tool definition' types. </summary>
        internal string Type { get; set; }
        /// <summary>
        /// Additional options that specify the behavior of this tool (also polymorphic).
        /// Please note <see cref="AgentToolOptions"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FunctionToolOptions"/>.
        /// </summary>
        public AgentToolOptions Options { get; set; }
        /// <summary> A set of overrides for the tool's name, description, or parameters. </summary>
        public AgentToolDefinitionOverride Override { get; set; }
    }
}
