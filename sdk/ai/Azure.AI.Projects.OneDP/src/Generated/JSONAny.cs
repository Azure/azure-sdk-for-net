// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> A JSON-compatible type that can be a primitive, object, or array. </summary>
    public partial class JSONAny
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="JSONAny"/>. </summary>
        public JSONAny()
        {
            ArrayValue = new ChangeTrackingList<JSONAny>();
            ObjectValue = new ChangeTrackingDictionary<string, JSONAny>();
        }

        /// <summary> Initializes a new instance of <see cref="JSONAny"/>. </summary>
        /// <param name="stringValue"> A string value, if present. </param>
        /// <param name="intValue"> A 64-bit integer value, if present. </param>
        /// <param name="floatValue"> A floating-point (double precision) value, if present. </param>
        /// <param name="boolValue"> A boolean value, if present. </param>
        /// <param name="nullValue"> Indicates this represents a JSON null if set to true. </param>
        /// <param name="arrayValue"> A JSON array, if present, expressed as an array of JSONAny elements. </param>
        /// <param name="objectValue"> A JSON object, if present, expressed as a dictionary from string to JSONAny. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal JSONAny(string stringValue, long? intValue, double? floatValue, bool? boolValue, bool? nullValue, IList<JSONAny> arrayValue, IDictionary<string, JSONAny> objectValue, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            StringValue = stringValue;
            IntValue = intValue;
            FloatValue = floatValue;
            BoolValue = boolValue;
            NullValue = nullValue;
            ArrayValue = arrayValue;
            ObjectValue = objectValue;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> A string value, if present. </summary>
        public string StringValue { get; set; }
        /// <summary> A 64-bit integer value, if present. </summary>
        public long? IntValue { get; set; }
        /// <summary> A floating-point (double precision) value, if present. </summary>
        public double? FloatValue { get; set; }
        /// <summary> A boolean value, if present. </summary>
        public bool? BoolValue { get; set; }
        /// <summary> Indicates this represents a JSON null if set to true. </summary>
        public bool? NullValue { get; set; }
        /// <summary> A JSON array, if present, expressed as an array of JSONAny elements. </summary>
        public IList<JSONAny> ArrayValue { get; }
        /// <summary> A JSON object, if present, expressed as a dictionary from string to JSONAny. </summary>
        public IDictionary<string, JSONAny> ObjectValue { get; }
    }
}
