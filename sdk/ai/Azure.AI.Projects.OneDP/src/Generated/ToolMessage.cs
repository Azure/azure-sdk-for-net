// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> A tool message within a chat, always with the 'tool' role. </summary>
    public partial class ToolMessage : ChatMessage
    {
        /// <summary> Initializes a new instance of <see cref="ToolMessage"/>. </summary>
        /// <param name="content">
        /// The contents of the message.
        /// Please note <see cref="AIContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioContent"/>, <see cref="ContentFilterContent"/>, <see cref="FileContent"/>, <see cref="ImageContent"/>, <see cref="RefusalContent"/>, <see cref="TextContent"/>, <see cref="ToolCallContent"/>, <see cref="ToolResultContent"/> and <see cref="VideoContent"/>.
        /// </param>
        /// <param name="toolCallId"> The ID of the tool call to which this result pertains. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> or <paramref name="toolCallId"/> is null. </exception>
        public ToolMessage(IEnumerable<AIContent> content, string toolCallId) : base(content)
        {
            Argument.AssertNotNull(content, nameof(content));
            Argument.AssertNotNull(toolCallId, nameof(toolCallId));

            Role = AuthorRole.Tool;
            ToolCallId = toolCallId;
        }

        /// <summary> Initializes a new instance of <see cref="ToolMessage"/>. </summary>
        /// <param name="userId"> The ID of the user who created the message (if applicable). </param>
        /// <param name="agentId"> The ID of the agent who created the message (if applicable). </param>
        /// <param name="messageId"> A unique identifier for this message. </param>
        /// <param name="agentRunId"> A unique run ID, if this message was generated by a run process. </param>
        /// <param name="conversationId"> The conversation to which this message belongs. </param>
        /// <param name="role"> The role of this message's author. </param>
        /// <param name="content">
        /// The contents of the message.
        /// Please note <see cref="AIContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioContent"/>, <see cref="ContentFilterContent"/>, <see cref="FileContent"/>, <see cref="ImageContent"/>, <see cref="RefusalContent"/>, <see cref="TextContent"/>, <see cref="ToolCallContent"/>, <see cref="ToolResultContent"/> and <see cref="VideoContent"/>.
        /// </param>
        /// <param name="authorName"> An optional display name for the author. </param>
        /// <param name="createdAt"> The timestamp (in Unix time) when this message was created. </param>
        /// <param name="completedAt"> The timestamp (in Unix time) when this message was completed, if applicable. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="toolCallId"> The ID of the tool call to which this result pertains. </param>
        internal ToolMessage(string userId, string agentId, string messageId, string agentRunId, string conversationId, AuthorRole role, IList<AIContent> content, string authorName, long? createdAt, long? completedAt, IDictionary<string, BinaryData> serializedAdditionalRawData, string toolCallId) : base(userId, agentId, messageId, agentRunId, conversationId, role, content, authorName, createdAt, completedAt, serializedAdditionalRawData)
        {
            ToolCallId = toolCallId;
        }

        /// <summary> Initializes a new instance of <see cref="ToolMessage"/> for deserialization. </summary>
        internal ToolMessage()
        {
        }

        /// <summary> The ID of the tool call to which this result pertains. </summary>
        public string ToolCallId { get; set; }
    }
}
