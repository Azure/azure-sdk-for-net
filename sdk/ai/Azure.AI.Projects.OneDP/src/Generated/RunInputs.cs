// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> Parameters for creating a new run request. </summary>
    public partial class RunInputs
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RunInputs"/>. </summary>
        /// <param name="input">
        /// The list of input messages for the run.
        /// Please note <see cref="ChatMessage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AgentMessage"/>, <see cref="DeveloperMessage"/>, <see cref="SystemMessage"/>, <see cref="ToolMessage"/> and <see cref="UserMessage"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        internal RunInputs(IEnumerable<ChatMessage> input)
        {
            Argument.AssertNotNull(input, nameof(input));

            Input = input.ToList();
            Metadata = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="RunInputs"/>. </summary>
        /// <param name="agentId"> Unique identifier for the agent responsible for the run. This is optional (not needeed) when doing a run using ephemeral agent. </param>
        /// <param name="input">
        /// The list of input messages for the run.
        /// Please note <see cref="ChatMessage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AgentMessage"/>, <see cref="DeveloperMessage"/>, <see cref="SystemMessage"/>, <see cref="ToolMessage"/> and <see cref="UserMessage"/>.
        /// </param>
        /// <param name="threadId"> Optional identifier for an existing conversation thread. </param>
        /// <param name="metadata"> Optional metadata associated with the run request. </param>
        /// <param name="truncationStrategy"> Strategy for truncating messages when input exceeds model limits. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RunInputs(string agentId, IReadOnlyList<ChatMessage> input, string threadId, IReadOnlyDictionary<string, string> metadata, TruncationStrategy truncationStrategy, string userId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AgentId = agentId;
            Input = input;
            ThreadId = threadId;
            Metadata = metadata;
            TruncationStrategy = truncationStrategy;
            UserId = userId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RunInputs"/> for deserialization. </summary>
        internal RunInputs()
        {
        }

        /// <summary> Unique identifier for the agent responsible for the run. This is optional (not needeed) when doing a run using ephemeral agent. </summary>
        public string AgentId { get; }
        /// <summary>
        /// The list of input messages for the run.
        /// Please note <see cref="ChatMessage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AgentMessage"/>, <see cref="DeveloperMessage"/>, <see cref="SystemMessage"/>, <see cref="ToolMessage"/> and <see cref="UserMessage"/>.
        /// </summary>
        public IReadOnlyList<ChatMessage> Input { get; }
        /// <summary> Optional identifier for an existing conversation thread. </summary>
        public string ThreadId { get; }
        /// <summary> Optional metadata associated with the run request. </summary>
        public IReadOnlyDictionary<string, string> Metadata { get; }
        /// <summary> Strategy for truncating messages when input exceeds model limits. </summary>
        public TruncationStrategy TruncationStrategy { get; }
        /// <summary> Identifier for the user making the request. </summary>
        public string UserId { get; }
    }
}
