// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Projects.OneDP
{
    // Data plane generated sub-client.
    /// <summary>
    /// CONVERSATIONS
    ///
    /// Interface is rooted at /conversations.
    /// </summary>
    public partial class Conversations
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly AzureKeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";
        private static readonly string[] AuthorizationScopes = new string[] { "https://cognitiveservices.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Conversations for mocking. </summary>
        protected Conversations()
        {
        }

        /// <summary> Initializes a new instance of Conversations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> Project endpoint in the form of: https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Conversations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Creates a new Conversation and returns it. </summary>
        /// <param name="messages"> A list of messages in this conversation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="messages"/> is null. </exception>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='CreateConversationAsync(IEnumerable{ChatMessage},CancellationToken)']/*" />
        public virtual async Task<Response<Conversation>> CreateConversationAsync(IEnumerable<ChatMessage> messages, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(messages, nameof(messages));

            CreateConversationRequest createConversationRequest = new CreateConversationRequest(messages.ToList(), null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateConversationAsync(createConversationRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(Conversation.FromResponse(response), response);
        }

        /// <summary> Creates a new Conversation and returns it. </summary>
        /// <param name="messages"> A list of messages in this conversation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="messages"/> is null. </exception>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='CreateConversation(IEnumerable{ChatMessage},CancellationToken)']/*" />
        public virtual Response<Conversation> CreateConversation(IEnumerable<ChatMessage> messages, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(messages, nameof(messages));

            CreateConversationRequest createConversationRequest = new CreateConversationRequest(messages.ToList(), null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateConversation(createConversationRequest.ToRequestContent(), context);
            return Response.FromValue(Conversation.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates a new Conversation and returns it.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateConversationAsync(IEnumerable{ChatMessage},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='CreateConversationAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateConversationAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Conversations.CreateConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateConversationRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a new Conversation and returns it.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateConversation(IEnumerable{ChatMessage},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='CreateConversation(RequestContent,RequestContext)']/*" />
        public virtual Response CreateConversation(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Conversations.CreateConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateConversationRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves an existing conversation by its ID. </summary>
        /// <param name="conversationId"> The identifier of the Conversation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='GetConversationAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<Conversation>> GetConversationAsync(string conversationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetConversationAsync(conversationId, context).ConfigureAwait(false);
            return Response.FromValue(Conversation.FromResponse(response), response);
        }

        /// <summary> Retrieves an existing conversation by its ID. </summary>
        /// <param name="conversationId"> The identifier of the Conversation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='GetConversation(string,CancellationToken)']/*" />
        public virtual Response<Conversation> GetConversation(string conversationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetConversation(conversationId, context);
            return Response.FromValue(Conversation.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Retrieves an existing conversation by its ID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversationAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The identifier of the Conversation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='GetConversationAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetConversationAsync(string conversationId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("Conversations.GetConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConversationRequest(conversationId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieves an existing conversation by its ID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversation(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The identifier of the Conversation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='GetConversation(string,RequestContext)']/*" />
        public virtual Response GetConversation(string conversationId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("Conversations.GetConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConversationRequest(conversationId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates or replaces a conversation by its ID, returning the updated Conversation. </summary>
        /// <param name="conversationId"> The identifier of the Conversation to update. </param>
        /// <param name="body"> The updated Conversation resource data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='UpdateConversationAsync(string,Conversation,CancellationToken)']/*" />
        public virtual async Task<Response<Conversation>> UpdateConversationAsync(string conversationId, Conversation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await UpdateConversationAsync(conversationId, content, context).ConfigureAwait(false);
            return Response.FromValue(Conversation.FromResponse(response), response);
        }

        /// <summary> Updates or replaces a conversation by its ID, returning the updated Conversation. </summary>
        /// <param name="conversationId"> The identifier of the Conversation to update. </param>
        /// <param name="body"> The updated Conversation resource data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='UpdateConversation(string,Conversation,CancellationToken)']/*" />
        public virtual Response<Conversation> UpdateConversation(string conversationId, Conversation body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = UpdateConversation(conversationId, content, context);
            return Response.FromValue(Conversation.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Updates or replaces a conversation by its ID, returning the updated Conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpdateConversationAsync(string,Conversation,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The identifier of the Conversation to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='UpdateConversationAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> UpdateConversationAsync(string conversationId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Conversations.UpdateConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateConversationRequest(conversationId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Updates or replaces a conversation by its ID, returning the updated Conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpdateConversation(string,Conversation,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The identifier of the Conversation to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='UpdateConversation(string,RequestContent,RequestContext)']/*" />
        public virtual Response UpdateConversation(string conversationId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Conversations.UpdateConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateConversationRequest(conversationId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes a conversation, returning 204 on success.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The ID of the conversation to delete. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='DeleteConversationAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteConversationAsync(string conversationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("Conversations.DeleteConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteConversationRequest(conversationId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes a conversation, returning 204 on success.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The ID of the conversation to delete. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='DeleteConversation(string,RequestContext)']/*" />
        public virtual Response DeleteConversation(string conversationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("Conversations.DeleteConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteConversationRequest(conversationId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all conversations, returning an array of Conversation items. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='GetConversationsAsync(CancellationToken)']/*" />
        public virtual async Task<Response<IReadOnlyList<Conversation>>> GetConversationsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetConversationsAsync(context).ConfigureAwait(false);
            IReadOnlyList<Conversation> value = default;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
            List<Conversation> array = new List<Conversation>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(Conversation.DeserializeConversation(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary> Lists all conversations, returning an array of Conversation items. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='GetConversations(CancellationToken)']/*" />
        public virtual Response<IReadOnlyList<Conversation>> GetConversations(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetConversations(context);
            IReadOnlyList<Conversation> value = default;
            using var document = JsonDocument.Parse(response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
            List<Conversation> array = new List<Conversation>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(Conversation.DeserializeConversation(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary>
        /// [Protocol Method] Lists all conversations, returning an array of Conversation items.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversationsAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='GetConversationsAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetConversationsAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("Conversations.GetConversations");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConversationsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all conversations, returning an array of Conversation items.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversations(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Conversations.xml" path="doc/members/member[@name='GetConversations(RequestContext)']/*" />
        public virtual Response GetConversations(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("Conversations.GetConversations");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConversationsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateConversationRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetConversationRequest(string conversationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateConversationRequest(string conversationId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteConversationRequest(string conversationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetConversationsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/conversations", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
