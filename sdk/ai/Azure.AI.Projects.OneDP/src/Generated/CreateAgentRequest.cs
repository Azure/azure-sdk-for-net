// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> The CreateAgentRequest. </summary>
    internal partial class CreateAgentRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CreateAgentRequest"/>. </summary>
        /// <param name="name"> The name of the agent; used for display purposes and sent to the LLM to identify the agent. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        internal CreateAgentRequest(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            Instructions = new ChangeTrackingList<DeveloperMessage>();
            Tools = new ChangeTrackingList<AgentToolDefinition>();
        }

        /// <summary> Initializes a new instance of <see cref="CreateAgentRequest"/>. </summary>
        /// <param name="name"> The name of the agent; used for display purposes and sent to the LLM to identify the agent. </param>
        /// <param name="agentModel">
        /// The model definition for this agent. This is optional (not needed) when doing a run using persistent agent.
        /// Please note <see cref="OneDP.AgentModel"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureAgentModel"/> and <see cref="OpenAIAgentModel"/>.
        /// </param>
        /// <param name="instructions"> Instructions provided to guide how this agent operates. </param>
        /// <param name="tools">
        /// A list of tool definitions available to the agent.
        /// Please note <see cref="AgentToolDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BingGroundingToolDefinition"/>, <see cref="CodeInterpreterToolDefinition"/>, <see cref="FileSearchToolDefinition"/> and <see cref="OpenApiToolDefinition"/>.
        /// </param>
        /// <param name="toolChoice">
        /// How the agent should choose among provided tools.
        /// Please note <see cref="ToolChoiceBehavior"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoToolChoiceBehavior"/>, <see cref="NoneToolChoiceBehavior"/> and <see cref="RequiredToolChoiceBehavior"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CreateAgentRequest(string name, AgentModel agentModel, IReadOnlyList<DeveloperMessage> instructions, IReadOnlyList<AgentToolDefinition> tools, ToolChoiceBehavior toolChoice, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            AgentModel = agentModel;
            Instructions = instructions;
            Tools = tools;
            ToolChoice = toolChoice;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CreateAgentRequest"/> for deserialization. </summary>
        internal CreateAgentRequest()
        {
        }

        /// <summary> The name of the agent; used for display purposes and sent to the LLM to identify the agent. </summary>
        public string Name { get; }
        /// <summary>
        /// The model definition for this agent. This is optional (not needed) when doing a run using persistent agent.
        /// Please note <see cref="OneDP.AgentModel"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureAgentModel"/> and <see cref="OpenAIAgentModel"/>.
        /// </summary>
        public AgentModel AgentModel { get; }
        /// <summary> Instructions provided to guide how this agent operates. </summary>
        public IReadOnlyList<DeveloperMessage> Instructions { get; }
        /// <summary>
        /// A list of tool definitions available to the agent.
        /// Please note <see cref="AgentToolDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BingGroundingToolDefinition"/>, <see cref="CodeInterpreterToolDefinition"/>, <see cref="FileSearchToolDefinition"/> and <see cref="OpenApiToolDefinition"/>.
        /// </summary>
        public IReadOnlyList<AgentToolDefinition> Tools { get; }
        /// <summary>
        /// How the agent should choose among provided tools.
        /// Please note <see cref="ToolChoiceBehavior"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoToolChoiceBehavior"/>, <see cref="NoneToolChoiceBehavior"/> and <see cref="RequiredToolChoiceBehavior"/>.
        /// </summary>
        public ToolChoiceBehavior ToolChoice { get; }
    }
}
