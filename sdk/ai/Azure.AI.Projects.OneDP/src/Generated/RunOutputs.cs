// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> Fields describing the final run outcome, including status, output messages, and usage. </summary>
    public partial class RunOutputs
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RunOutputs"/>. </summary>
        /// <param name="status"> Final status of the run request. Known values: 'inProgress', 'incomplete', 'cancelled', 'failed', 'completed' - or custom string. </param>
        /// <param name="messages">
        /// List of output messages generated by the agent.
        /// Please note <see cref="ChatMessage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AgentMessage"/>, <see cref="DeveloperMessage"/>, <see cref="SystemMessage"/>, <see cref="ToolMessage"/> and <see cref="UserMessage"/>.
        /// </param>
        /// <param name="usage"> Token usage details for this run. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="messages"/> or <paramref name="usage"/> is null. </exception>
        internal RunOutputs(RunOutputsStatus status, IEnumerable<ChatMessage> messages, CompletionUsage usage)
        {
            Argument.AssertNotNull(messages, nameof(messages));
            Argument.AssertNotNull(usage, nameof(usage));

            Status = status;
            Messages = messages.ToList();
            Usage = usage;
        }

        /// <summary> Initializes a new instance of <see cref="RunOutputs"/>. </summary>
        /// <param name="status"> Final status of the run request. Known values: 'inProgress', 'incomplete', 'cancelled', 'failed', 'completed' - or custom string. </param>
        /// <param name="messages">
        /// List of output messages generated by the agent.
        /// Please note <see cref="ChatMessage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AgentMessage"/>, <see cref="DeveloperMessage"/>, <see cref="SystemMessage"/>, <see cref="ToolMessage"/> and <see cref="UserMessage"/>.
        /// </param>
        /// <param name="usage"> Token usage details for this run. </param>
        /// <param name="incompleteDetails"> Details about why the response is incomplete, if applicable. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RunOutputs(RunOutputsStatus status, IReadOnlyList<ChatMessage> messages, CompletionUsage usage, RunOutputsIncompleteDetails incompleteDetails, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Status = status;
            Messages = messages;
            Usage = usage;
            IncompleteDetails = incompleteDetails;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RunOutputs"/> for deserialization. </summary>
        internal RunOutputs()
        {
        }

        /// <summary> Final status of the run request. Known values: 'inProgress', 'incomplete', 'cancelled', 'failed', 'completed' - or custom string. </summary>
        public RunOutputsStatus Status { get; }
        /// <summary>
        /// List of output messages generated by the agent.
        /// Please note <see cref="ChatMessage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AgentMessage"/>, <see cref="DeveloperMessage"/>, <see cref="SystemMessage"/>, <see cref="ToolMessage"/> and <see cref="UserMessage"/>.
        /// </summary>
        public IReadOnlyList<ChatMessage> Messages { get; }
        /// <summary> Token usage details for this run. </summary>
        public CompletionUsage Usage { get; }
        /// <summary> Details about why the response is incomplete, if applicable. </summary>
        public RunOutputsIncompleteDetails IncompleteDetails { get; }
    }
}
