// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> Represents an AI agent with configuration, instructions, and tool access. </summary>
    public partial class Agent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Agent"/>. </summary>
        /// <param name="creationOptions"> Options that were used to create this agent. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="creationOptions"/> is null. </exception>
        public Agent(AgentCreationOptions creationOptions)
        {
            Argument.AssertNotNull(creationOptions, nameof(creationOptions));

            Metadata = new ChangeTrackingDictionary<string, string>();
            CreationOptions = creationOptions;
        }

        /// <summary> Initializes a new instance of <see cref="Agent"/>. </summary>
        /// <param name="agentId"> A unique identifier for the agent. </param>
        /// <param name="description"> A description of the agent; used for display purposes and to describe the agent. </param>
        /// <param name="metadata"> Arbitrary metadata associated with this agent. </param>
        /// <param name="creationOptions"> Options that were used to create this agent. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Agent(string agentId, string description, IDictionary<string, string> metadata, AgentCreationOptions creationOptions, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AgentId = agentId;
            Description = description;
            Metadata = metadata;
            CreationOptions = creationOptions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="Agent"/> for deserialization. </summary>
        internal Agent()
        {
        }

        /// <summary> A unique identifier for the agent. </summary>
        public string AgentId { get; }
        /// <summary> A description of the agent; used for display purposes and to describe the agent. </summary>
        public string Description { get; set; }
        /// <summary> Arbitrary metadata associated with this agent. </summary>
        public IDictionary<string, string> Metadata { get; }
        /// <summary> Options that were used to create this agent. </summary>
        public AgentCreationOptions CreationOptions { get; set; }
    }
}
