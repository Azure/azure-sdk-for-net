// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> Known status values for a run, plus a fallback string for unrecognized statuses. </summary>
    public readonly partial struct RunOutputsStatus : IEquatable<RunOutputsStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RunOutputsStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RunOutputsStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InProgressValue = "inProgress";
        private const string IncompleteValue = "incomplete";
        private const string CancelledValue = "cancelled";
        private const string FailedValue = "failed";
        private const string CompletedValue = "completed";

        /// <summary> The run is ongoing. </summary>
        public static RunOutputsStatus InProgress { get; } = new RunOutputsStatus(InProgressValue);
        /// <summary> The run did not produce a complete output. </summary>
        public static RunOutputsStatus Incomplete { get; } = new RunOutputsStatus(IncompleteValue);
        /// <summary> The run was canceled. </summary>
        public static RunOutputsStatus Cancelled { get; } = new RunOutputsStatus(CancelledValue);
        /// <summary> The run failed. </summary>
        public static RunOutputsStatus Failed { get; } = new RunOutputsStatus(FailedValue);
        /// <summary> The run completed successfully. </summary>
        public static RunOutputsStatus Completed { get; } = new RunOutputsStatus(CompletedValue);
        /// <summary> Determines if two <see cref="RunOutputsStatus"/> values are the same. </summary>
        public static bool operator ==(RunOutputsStatus left, RunOutputsStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RunOutputsStatus"/> values are not the same. </summary>
        public static bool operator !=(RunOutputsStatus left, RunOutputsStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RunOutputsStatus"/>. </summary>
        public static implicit operator RunOutputsStatus(string value) => new RunOutputsStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RunOutputsStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RunOutputsStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
