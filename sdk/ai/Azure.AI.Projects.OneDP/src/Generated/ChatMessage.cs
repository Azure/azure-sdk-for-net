// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Projects.OneDP
{
    /// <summary>
    /// A base model for representing a chat message.
    /// Please note <see cref="ChatMessage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="AgentMessage"/>, <see cref="DeveloperMessage"/>, <see cref="SystemMessage"/>, <see cref="ToolMessage"/> and <see cref="UserMessage"/>.
    /// </summary>
    public abstract partial class ChatMessage
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ChatMessage"/>. </summary>
        /// <param name="content">
        /// The contents of the message.
        /// Please note <see cref="AIContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioContent"/>, <see cref="ContentFilterContent"/>, <see cref="FileContent"/>, <see cref="ImageContent"/>, <see cref="RefusalContent"/>, <see cref="TextContent"/>, <see cref="ToolCallContent"/>, <see cref="ToolResultContent"/> and <see cref="VideoContent"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        protected ChatMessage(IEnumerable<AIContent> content)
        {
            Argument.AssertNotNull(content, nameof(content));

            Content = content.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ChatMessage"/>. </summary>
        /// <param name="userId"> The ID of the user who created the message (if applicable). </param>
        /// <param name="agentId"> The ID of the agent who created the message (if applicable). </param>
        /// <param name="messageId"> A unique identifier for this message. </param>
        /// <param name="agentRunId"> A unique run ID, if this message was generated by a run process. </param>
        /// <param name="threadId"> The thread to which this message belongs. </param>
        /// <param name="role"> The role of this message's author. </param>
        /// <param name="content">
        /// The contents of the message.
        /// Please note <see cref="AIContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioContent"/>, <see cref="ContentFilterContent"/>, <see cref="FileContent"/>, <see cref="ImageContent"/>, <see cref="RefusalContent"/>, <see cref="TextContent"/>, <see cref="ToolCallContent"/>, <see cref="ToolResultContent"/> and <see cref="VideoContent"/>.
        /// </param>
        /// <param name="authorName"> An optional display name for the author. </param>
        /// <param name="createdAt"> The timestamp (in Unix time) when this message was created. </param>
        /// <param name="completedAt"> The timestamp (in Unix time) when this message was completed, if applicable. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ChatMessage(string userId, string agentId, string messageId, string agentRunId, string threadId, AuthorRole role, IList<AIContent> content, string authorName, long? createdAt, long? completedAt, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            UserId = userId;
            AgentId = agentId;
            MessageId = messageId;
            AgentRunId = agentRunId;
            ThreadId = threadId;
            Role = role;
            Content = content;
            AuthorName = authorName;
            CreatedAt = createdAt;
            CompletedAt = completedAt;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ChatMessage"/> for deserialization. </summary>
        internal ChatMessage()
        {
        }

        /// <summary> The ID of the user who created the message (if applicable). </summary>
        public string UserId { get; set; }
        /// <summary> The ID of the agent who created the message (if applicable). </summary>
        public string AgentId { get; set; }
        /// <summary> A unique identifier for this message. </summary>
        public string MessageId { get; }
        /// <summary> A unique run ID, if this message was generated by a run process. </summary>
        public string AgentRunId { get; set; }
        /// <summary> The thread to which this message belongs. </summary>
        public string ThreadId { get; }
        /// <summary> The role of this message's author. </summary>
        internal AuthorRole Role { get; set; }
        /// <summary>
        /// The contents of the message.
        /// Please note <see cref="AIContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioContent"/>, <see cref="ContentFilterContent"/>, <see cref="FileContent"/>, <see cref="ImageContent"/>, <see cref="RefusalContent"/>, <see cref="TextContent"/>, <see cref="ToolCallContent"/>, <see cref="ToolResultContent"/> and <see cref="VideoContent"/>.
        /// </summary>
        public IList<AIContent> Content { get; }
        /// <summary> An optional display name for the author. </summary>
        public string AuthorName { get; set; }
        /// <summary> The timestamp (in Unix time) when this message was created. </summary>
        public long? CreatedAt { get; set; }
        /// <summary> The timestamp (in Unix time) when this message was completed, if applicable. </summary>
        public long? CompletedAt { get; set; }
    }
}
