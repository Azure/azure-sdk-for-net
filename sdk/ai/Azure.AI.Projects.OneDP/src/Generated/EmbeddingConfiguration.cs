// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> Embedding configuration class. </summary>
    public partial class EmbeddingConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EmbeddingConfiguration"/>. </summary>
        /// <param name="modelDeploymentName"> Deployment name of embedding model. It can point to a model deployment either in the parent AIServices or a connection. </param>
        /// <param name="embeddingField"> Embedding field. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="modelDeploymentName"/> or <paramref name="embeddingField"/> is null. </exception>
        public EmbeddingConfiguration(string modelDeploymentName, string embeddingField)
        {
            Argument.AssertNotNull(modelDeploymentName, nameof(modelDeploymentName));
            Argument.AssertNotNull(embeddingField, nameof(embeddingField));

            ModelDeploymentName = modelDeploymentName;
            EmbeddingField = embeddingField;
        }

        /// <summary> Initializes a new instance of <see cref="EmbeddingConfiguration"/>. </summary>
        /// <param name="modelDeploymentName"> Deployment name of embedding model. It can point to a model deployment either in the parent AIServices or a connection. </param>
        /// <param name="embeddingField"> Embedding field. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EmbeddingConfiguration(string modelDeploymentName, string embeddingField, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ModelDeploymentName = modelDeploymentName;
            EmbeddingField = embeddingField;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EmbeddingConfiguration"/> for deserialization. </summary>
        internal EmbeddingConfiguration()
        {
        }

        /// <summary> Deployment name of embedding model. It can point to a model deployment either in the parent AIServices or a connection. </summary>
        public string ModelDeploymentName { get; set; }
        /// <summary> Embedding field. </summary>
        public string EmbeddingField { get; set; }
    }
}
