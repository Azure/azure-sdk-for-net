// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Projects.OneDP
{
    // Data plane generated sub-client.
    /// <summary>
    /// AGENTS
    ///
    /// Interface is rooted at /agents.
    /// Includes standard resource operations + custom collection-level
    /// and instance-level actions (complete, stream).
    /// </summary>
    public partial class Agents
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly AzureKeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";
        private static readonly string[] AuthorizationScopes = new string[] { "https://cognitiveservices.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Agents for mocking. </summary>
        protected Agents()
        {
        }

        /// <summary> Initializes a new instance of Agents. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> Project endpoint in the form of: https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Agents(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Creates a new Agent resource and returns it. </summary>
        /// <param name="name"> The name of the agent; used for display purposes and sent to the LLM to identify the agent. </param>
        /// <param name="agentModel"> The model definition for this agent. This is optional (not needed) when doing a run using persistent agent. </param>
        /// <param name="instructions"> Instructions provided to guide how this agent operates. </param>
        /// <param name="tools"> A list of tool definitions available to the agent. </param>
        /// <param name="toolChoice"> How the agent should choose among provided tools. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='CreateAgentAsync(string,AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,CancellationToken)']/*" />
        public virtual async Task<Response<Agent>> CreateAgentAsync(string name, AgentModel agentModel = null, IEnumerable<DeveloperMessage> instructions = null, IEnumerable<AgentToolDefinition> tools = null, ToolChoiceBehavior toolChoice = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            CreateAgentRequest createAgentRequest = new CreateAgentRequest(
                name,
                agentModel,
                instructions?.ToList() as IReadOnlyList<DeveloperMessage> ?? new ChangeTrackingList<DeveloperMessage>(),
                tools?.ToList() as IReadOnlyList<AgentToolDefinition> ?? new ChangeTrackingList<AgentToolDefinition>(),
                toolChoice,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateAgentAsync(createAgentRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(Agent.FromResponse(response), response);
        }

        /// <summary> Creates a new Agent resource and returns it. </summary>
        /// <param name="name"> The name of the agent; used for display purposes and sent to the LLM to identify the agent. </param>
        /// <param name="agentModel"> The model definition for this agent. This is optional (not needed) when doing a run using persistent agent. </param>
        /// <param name="instructions"> Instructions provided to guide how this agent operates. </param>
        /// <param name="tools"> A list of tool definitions available to the agent. </param>
        /// <param name="toolChoice"> How the agent should choose among provided tools. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='CreateAgent(string,AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,CancellationToken)']/*" />
        public virtual Response<Agent> CreateAgent(string name, AgentModel agentModel = null, IEnumerable<DeveloperMessage> instructions = null, IEnumerable<AgentToolDefinition> tools = null, ToolChoiceBehavior toolChoice = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            CreateAgentRequest createAgentRequest = new CreateAgentRequest(
                name,
                agentModel,
                instructions?.ToList() as IReadOnlyList<DeveloperMessage> ?? new ChangeTrackingList<DeveloperMessage>(),
                tools?.ToList() as IReadOnlyList<AgentToolDefinition> ?? new ChangeTrackingList<AgentToolDefinition>(),
                toolChoice,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateAgent(createAgentRequest.ToRequestContent(), context);
            return Response.FromValue(Agent.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates a new Agent resource and returns it.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAgentAsync(string,AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='CreateAgentAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateAgentAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Agents.CreateAgent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateAgentRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a new Agent resource and returns it.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAgent(string,AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='CreateAgent(RequestContent,RequestContext)']/*" />
        public virtual Response CreateAgent(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Agents.CreateAgent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateAgentRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves an existing Agent by its ID. </summary>
        /// <param name="agentId"> The ID of the Agent to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetAgentAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<Agent>> GetAgentAsync(string agentId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(agentId, nameof(agentId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetAgentAsync(agentId, context).ConfigureAwait(false);
            return Response.FromValue(Agent.FromResponse(response), response);
        }

        /// <summary> Retrieves an existing Agent by its ID. </summary>
        /// <param name="agentId"> The ID of the Agent to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetAgent(string,CancellationToken)']/*" />
        public virtual Response<Agent> GetAgent(string agentId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(agentId, nameof(agentId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetAgent(agentId, context);
            return Response.FromValue(Agent.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Retrieves an existing Agent by its ID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentId"> The ID of the Agent to retrieve. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetAgentAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetAgentAsync(string agentId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(agentId, nameof(agentId));

            using var scope = ClientDiagnostics.CreateScope("Agents.GetAgent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAgentRequest(agentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieves an existing Agent by its ID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgent(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentId"> The ID of the Agent to retrieve. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetAgent(string,RequestContext)']/*" />
        public virtual Response GetAgent(string agentId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(agentId, nameof(agentId));

            using var scope = ClientDiagnostics.CreateScope("Agents.GetAgent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAgentRequest(agentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates or replaces an agent and returns the updated resource. </summary>
        /// <param name="agentId"> The ID of the Agent to update. </param>
        /// <param name="body"> The updated Agent data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='UpdateAgentAsync(string,Agent,CancellationToken)']/*" />
        public virtual async Task<Response<Agent>> UpdateAgentAsync(string agentId, Agent body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(agentId, nameof(agentId));
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await UpdateAgentAsync(agentId, content, context).ConfigureAwait(false);
            return Response.FromValue(Agent.FromResponse(response), response);
        }

        /// <summary> Updates or replaces an agent and returns the updated resource. </summary>
        /// <param name="agentId"> The ID of the Agent to update. </param>
        /// <param name="body"> The updated Agent data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='UpdateAgent(string,Agent,CancellationToken)']/*" />
        public virtual Response<Agent> UpdateAgent(string agentId, Agent body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(agentId, nameof(agentId));
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = UpdateAgent(agentId, content, context);
            return Response.FromValue(Agent.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Updates or replaces an agent and returns the updated resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpdateAgentAsync(string,Agent,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentId"> The ID of the Agent to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='UpdateAgentAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> UpdateAgentAsync(string agentId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(agentId, nameof(agentId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Agents.UpdateAgent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateAgentRequest(agentId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Updates or replaces an agent and returns the updated resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpdateAgent(string,Agent,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentId"> The ID of the Agent to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='UpdateAgent(string,RequestContent,RequestContext)']/*" />
        public virtual Response UpdateAgent(string agentId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(agentId, nameof(agentId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Agents.UpdateAgent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateAgentRequest(agentId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes an Agent by its ID, returning 204 on success.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentId"> The ID of the Agent to delete. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='DeleteAgentAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteAgentAsync(string agentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(agentId, nameof(agentId));

            using var scope = ClientDiagnostics.CreateScope("Agents.DeleteAgent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteAgentRequest(agentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes an Agent by its ID, returning 204 on success.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="agentId"> The ID of the Agent to delete. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="agentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='DeleteAgent(string,RequestContext)']/*" />
        public virtual Response DeleteAgent(string agentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(agentId, nameof(agentId));

            using var scope = ClientDiagnostics.CreateScope("Agents.DeleteAgent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteAgentRequest(agentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all Agents, returning an array of Agent objects. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetAgentsAsync(CancellationToken)']/*" />
        public virtual async Task<Response<IReadOnlyList<Agent>>> GetAgentsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetAgentsAsync(context).ConfigureAwait(false);
            IReadOnlyList<Agent> value = default;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
            List<Agent> array = new List<Agent>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(Agent.DeserializeAgent(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary> Lists all Agents, returning an array of Agent objects. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetAgents(CancellationToken)']/*" />
        public virtual Response<IReadOnlyList<Agent>> GetAgents(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetAgents(context);
            IReadOnlyList<Agent> value = default;
            using var document = JsonDocument.Parse(response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
            List<Agent> array = new List<Agent>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(Agent.DeserializeAgent(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary>
        /// [Protocol Method] Lists all Agents, returning an array of Agent objects.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgentsAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetAgentsAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetAgentsAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("Agents.GetAgents");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAgentsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all Agents, returning an array of Agent objects.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAgents(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetAgents(RequestContext)']/*" />
        public virtual Response GetAgents(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("Agents.GetAgents");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAgentsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates and waits for a run to finish, returning the completed Run (including its outputs). </summary>
        /// <param name="input"> The list of input messages for the run. </param>
        /// <param name="agentModel"> The model definition for this agent. This is optional (not needed) when doing a run using persistent agent. </param>
        /// <param name="instructions"> Instructions provided to guide how this agent operates. </param>
        /// <param name="tools"> A list of tool definitions available to the agent. </param>
        /// <param name="toolChoice"> How the agent should choose among provided tools. </param>
        /// <param name="agentId"> Unique identifier for the agent responsible for the run. This is optional (not needeed) when doing a run using ephemeral agent. </param>
        /// <param name="threadId"> Optional identifier for an existing conversation thread. </param>
        /// <param name="metadata"> Optional metadata associated with the run request. </param>
        /// <param name="truncationStrategy"> Strategy for truncating messages when input exceeds model limits. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='RunAsync(IEnumerable{ChatMessage},AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,string,string,IReadOnlyDictionary{string,string},TruncationStrategy,string,CancellationToken)']/*" />
        public virtual async Task<Response<Run>> RunAsync(IEnumerable<ChatMessage> input, AgentModel agentModel = null, IEnumerable<DeveloperMessage> instructions = null, IEnumerable<AgentToolDefinition> tools = null, ToolChoiceBehavior toolChoice = null, string agentId = null, string threadId = null, IReadOnlyDictionary<string, string> metadata = null, TruncationStrategy truncationStrategy = null, string userId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            RunRequest runRequest = new RunRequest(
                agentModel,
                instructions?.ToList() as IReadOnlyList<DeveloperMessage> ?? new ChangeTrackingList<DeveloperMessage>(),
                tools?.ToList() as IReadOnlyList<AgentToolDefinition> ?? new ChangeTrackingList<AgentToolDefinition>(),
                toolChoice,
                agentId,
                input.ToList(),
                threadId,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                truncationStrategy,
                userId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await RunAsync(runRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(OneDP.Run.FromResponse(response), response);
        }

        /// <summary> Creates and waits for a run to finish, returning the completed Run (including its outputs). </summary>
        /// <param name="input"> The list of input messages for the run. </param>
        /// <param name="agentModel"> The model definition for this agent. This is optional (not needed) when doing a run using persistent agent. </param>
        /// <param name="instructions"> Instructions provided to guide how this agent operates. </param>
        /// <param name="tools"> A list of tool definitions available to the agent. </param>
        /// <param name="toolChoice"> How the agent should choose among provided tools. </param>
        /// <param name="agentId"> Unique identifier for the agent responsible for the run. This is optional (not needeed) when doing a run using ephemeral agent. </param>
        /// <param name="threadId"> Optional identifier for an existing conversation thread. </param>
        /// <param name="metadata"> Optional metadata associated with the run request. </param>
        /// <param name="truncationStrategy"> Strategy for truncating messages when input exceeds model limits. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='Run(IEnumerable{ChatMessage},AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,string,string,IReadOnlyDictionary{string,string},TruncationStrategy,string,CancellationToken)']/*" />
        public virtual Response<Run> Run(IEnumerable<ChatMessage> input, AgentModel agentModel = null, IEnumerable<DeveloperMessage> instructions = null, IEnumerable<AgentToolDefinition> tools = null, ToolChoiceBehavior toolChoice = null, string agentId = null, string threadId = null, IReadOnlyDictionary<string, string> metadata = null, TruncationStrategy truncationStrategy = null, string userId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            RunRequest runRequest = new RunRequest(
                agentModel,
                instructions?.ToList() as IReadOnlyList<DeveloperMessage> ?? new ChangeTrackingList<DeveloperMessage>(),
                tools?.ToList() as IReadOnlyList<AgentToolDefinition> ?? new ChangeTrackingList<AgentToolDefinition>(),
                toolChoice,
                agentId,
                input.ToList(),
                threadId,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                truncationStrategy,
                userId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Run(runRequest.ToRequestContent(), context);
            return Response.FromValue(OneDP.Run.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates and waits for a run to finish, returning the completed Run (including its outputs).
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="RunAsync(IEnumerable{ChatMessage},AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,string,string,IReadOnlyDictionary{string,string},TruncationStrategy,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='RunAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> RunAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Agents.Run");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates and waits for a run to finish, returning the completed Run (including its outputs).
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Run(IEnumerable{ChatMessage},AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,string,string,IReadOnlyDictionary{string,string},TruncationStrategy,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='Run(RequestContent,RequestContext)']/*" />
        public virtual Response Run(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Agents.Run");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The most basic operation. </summary>
        /// <param name="input"> The list of input messages for the run. </param>
        /// <param name="agentModel"> The model definition for this agent. This is optional (not needed) when doing a run using persistent agent. </param>
        /// <param name="instructions"> Instructions provided to guide how this agent operates. </param>
        /// <param name="tools"> A list of tool definitions available to the agent. </param>
        /// <param name="toolChoice"> How the agent should choose among provided tools. </param>
        /// <param name="agentId"> Unique identifier for the agent responsible for the run. This is optional (not needeed) when doing a run using ephemeral agent. </param>
        /// <param name="threadId"> Optional identifier for an existing conversation thread. </param>
        /// <param name="metadata"> Optional metadata associated with the run request. </param>
        /// <param name="truncationStrategy"> Strategy for truncating messages when input exceeds model limits. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='StreamAsync(IEnumerable{ChatMessage},AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,string,string,IReadOnlyDictionary{string,string},TruncationStrategy,string,CancellationToken)']/*" />
        public virtual async Task<Response> StreamAsync(IEnumerable<ChatMessage> input, AgentModel agentModel = null, IEnumerable<DeveloperMessage> instructions = null, IEnumerable<AgentToolDefinition> tools = null, ToolChoiceBehavior toolChoice = null, string agentId = null, string threadId = null, IReadOnlyDictionary<string, string> metadata = null, TruncationStrategy truncationStrategy = null, string userId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            StreamRequest streamRequest = new StreamRequest(
                agentModel,
                instructions?.ToList() as IReadOnlyList<DeveloperMessage> ?? new ChangeTrackingList<DeveloperMessage>(),
                tools?.ToList() as IReadOnlyList<AgentToolDefinition> ?? new ChangeTrackingList<AgentToolDefinition>(),
                toolChoice,
                agentId,
                input.ToList(),
                threadId,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                truncationStrategy,
                userId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await StreamAsync(streamRequest.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> The most basic operation. </summary>
        /// <param name="input"> The list of input messages for the run. </param>
        /// <param name="agentModel"> The model definition for this agent. This is optional (not needed) when doing a run using persistent agent. </param>
        /// <param name="instructions"> Instructions provided to guide how this agent operates. </param>
        /// <param name="tools"> A list of tool definitions available to the agent. </param>
        /// <param name="toolChoice"> How the agent should choose among provided tools. </param>
        /// <param name="agentId"> Unique identifier for the agent responsible for the run. This is optional (not needeed) when doing a run using ephemeral agent. </param>
        /// <param name="threadId"> Optional identifier for an existing conversation thread. </param>
        /// <param name="metadata"> Optional metadata associated with the run request. </param>
        /// <param name="truncationStrategy"> Strategy for truncating messages when input exceeds model limits. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='Stream(IEnumerable{ChatMessage},AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,string,string,IReadOnlyDictionary{string,string},TruncationStrategy,string,CancellationToken)']/*" />
        public virtual Response Stream(IEnumerable<ChatMessage> input, AgentModel agentModel = null, IEnumerable<DeveloperMessage> instructions = null, IEnumerable<AgentToolDefinition> tools = null, ToolChoiceBehavior toolChoice = null, string agentId = null, string threadId = null, IReadOnlyDictionary<string, string> metadata = null, TruncationStrategy truncationStrategy = null, string userId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            StreamRequest streamRequest = new StreamRequest(
                agentModel,
                instructions?.ToList() as IReadOnlyList<DeveloperMessage> ?? new ChangeTrackingList<DeveloperMessage>(),
                tools?.ToList() as IReadOnlyList<AgentToolDefinition> ?? new ChangeTrackingList<AgentToolDefinition>(),
                toolChoice,
                agentId,
                input.ToList(),
                threadId,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                truncationStrategy,
                userId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Stream(streamRequest.ToRequestContent(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] The most basic operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="StreamAsync(IEnumerable{ChatMessage},AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,string,string,IReadOnlyDictionary{string,string},TruncationStrategy,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='StreamAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> StreamAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Agents.Stream");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStreamRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The most basic operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Stream(IEnumerable{ChatMessage},AgentModel,IEnumerable{DeveloperMessage},IEnumerable{AgentToolDefinition},ToolChoiceBehavior,string,string,IReadOnlyDictionary{string,string},TruncationStrategy,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='Stream(RequestContent,RequestContext)']/*" />
        public virtual Response Stream(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Agents.Stream");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStreamRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieves an existing run by its ID.
        /// @route("/agents/runs/{run_id}")
        /// </summary>
        /// <param name="runId"> Unique identifier for this run. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetRunAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<Run>> GetRunAsync(string runId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetRunAsync(runId, context).ConfigureAwait(false);
            return Response.FromValue(OneDP.Run.FromResponse(response), response);
        }

        /// <summary>
        /// Retrieves an existing run by its ID.
        /// @route("/agents/runs/{run_id}")
        /// </summary>
        /// <param name="runId"> Unique identifier for this run. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetRun(string,CancellationToken)']/*" />
        public virtual Response<Run> GetRun(string runId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetRun(runId, context);
            return Response.FromValue(OneDP.Run.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Retrieves an existing run by its ID.
        /// @route("/agents/runs/{run_id}")
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRunAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="runId"> Unique identifier for this run. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetRunAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetRunAsync(string runId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("Agents.GetRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRunRequest(runId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieves an existing run by its ID.
        /// @route("/agents/runs/{run_id}")
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRun(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="runId"> Unique identifier for this run. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetRun(string,RequestContext)']/*" />
        public virtual Response GetRun(string runId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("Agents.GetRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRunRequest(runId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all run records, each containing runInputs and runOutputs.
        /// @route("/agents/runs")
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetRunsAsync(CancellationToken)']/*" />
        public virtual AsyncPageable<Run> GetRunsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRunsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRunsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => OneDP.Run.DeserializeRun(e), ClientDiagnostics, _pipeline, "Agents.GetRuns", "value", "nextLink", context);
        }

        /// <summary>
        /// Lists all run records, each containing runInputs and runOutputs.
        /// @route("/agents/runs")
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetRuns(CancellationToken)']/*" />
        public virtual Pageable<Run> GetRuns(CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRunsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRunsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => OneDP.Run.DeserializeRun(e), ClientDiagnostics, _pipeline, "Agents.GetRuns", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists all run records, each containing runInputs and runOutputs.
        /// @route("/agents/runs")
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRunsAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetRunsAsync(RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetRunsAsync(RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRunsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRunsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Agents.GetRuns", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists all run records, each containing runInputs and runOutputs.
        /// @route("/agents/runs")
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRuns(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/Agents.xml" path="doc/members/member[@name='GetRuns(RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetRuns(RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRunsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRunsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Agents.GetRuns", "value", "nextLink", context);
        }

        internal HttpMessage CreateCreateAgentRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetAgentRequest(string agentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateAgentRequest(string agentId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteAgentRequest(string agentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/", false);
            uri.AppendPath(agentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAgentsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRunRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/runs/run", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateStreamRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/agents/runs/stream", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRunRequest(string runId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/runs/", false);
            uri.AppendPath(runId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRunsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/runs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRunsNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
