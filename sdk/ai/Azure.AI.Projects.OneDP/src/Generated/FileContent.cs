// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> A structured chat content item containing a file data item. </summary>
    public partial class FileContent : AIContent
    {
        /// <summary> Initializes a new instance of <see cref="FileContent"/>. </summary>
        public FileContent()
        {
            Type = "file";
        }

        /// <summary> Initializes a new instance of <see cref="FileContent"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="fileName"> The file name for this binary content. </param>
        /// <param name="mimeType"> The MIME type for this binary content. </param>
        /// <param name="uri"> URI where the binary content can be retrieved. </param>
        /// <param name="dataUri"> Data URI containing the binary content inlined. </param>
        /// <param name="data"> Raw bytes for the binary content. </param>
        internal FileContent(string type, IDictionary<string, BinaryData> serializedAdditionalRawData, string fileName, string mimeType, Uri uri, Uri dataUri, BinaryData data) : base(type, serializedAdditionalRawData)
        {
            FileName = fileName;
            MimeType = mimeType;
            Uri = uri;
            DataUri = dataUri;
            Data = data;
        }

        /// <summary> The file name for this binary content. </summary>
        public string FileName { get; set; }
        /// <summary> The MIME type for this binary content. </summary>
        public string MimeType { get; set; }
        /// <summary> URI where the binary content can be retrieved. </summary>
        public Uri Uri { get; set; }
        /// <summary> Data URI containing the binary content inlined. </summary>
        public Uri DataUri { get; set; }
        /// <summary>
        /// Raw bytes for the binary content.
        /// <para>
        /// To assign a byte[] to this property use <see cref="BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromBytes(new byte[] { 1, 2, 3 })</term>
        /// <description>Creates a payload of "AQID".</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Data { get; set; }
    }
}
