// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> Strategies for attacks. </summary>
    public readonly partial struct AttackStrategy : IEquatable<AttackStrategy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AttackStrategy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AttackStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EasyValue = "easy";
        private const string AsciiArtValue = "ascii_art";
        private const string AsciiSmugglerValue = "ascii_smuggler";
        private const string AtbashValue = "atbash";
        private const string Base64Value = "base64";
        private const string BinaryValue = "binary";
        private const string CaesarValue = "caesar";
        private const string CharacterSpaceValue = "character_space";
        private const string JailbreakValue = "jailbreak";

        /// <summary> Represents a default set of easy complexity attacks. Easy complexity attack strategies are defined as attacks that do not require any Large Language Model to convert or orchestrate. </summary>
        public static AttackStrategy Easy { get; } = new AttackStrategy(EasyValue);
        /// <summary> Represents ASCII art, a graphic design technique that uses printable characters. </summary>
        public static AttackStrategy AsciiArt { get; } = new AttackStrategy(AsciiArtValue);
        /// <summary> Represents ASCII smuggling, a technique for encoding or hiding data. </summary>
        public static AttackStrategy AsciiSmuggler { get; } = new AttackStrategy(AsciiSmugglerValue);
        /// <summary> Represents the Atbash cipher, a substitution cipher that reverses the alphabet. </summary>
        public static AttackStrategy Atbash { get; } = new AttackStrategy(AtbashValue);
        /// <summary> Represents Base64 encoding, a method for encoding binary data as text. </summary>
        public static AttackStrategy Base64 { get; } = new AttackStrategy(Base64Value);
        /// <summary> Represents binary encoding, a representation of data in binary format. </summary>
        public static AttackStrategy Binary { get; } = new AttackStrategy(BinaryValue);
        /// <summary> Represents the Caesar cipher, a substitution cipher that shifts characters. </summary>
        public static AttackStrategy Caesar { get; } = new AttackStrategy(CaesarValue);
        /// <summary> Represents character space manipulation, a technique involving spacing between characters. </summary>
        public static AttackStrategy CharacterSpace { get; } = new AttackStrategy(CharacterSpaceValue);
        /// <summary> Represents character swapping, a technique for rearranging characters in text. </summary>
        public static AttackStrategy Jailbreak { get; } = new AttackStrategy(JailbreakValue);
        /// <summary> Determines if two <see cref="AttackStrategy"/> values are the same. </summary>
        public static bool operator ==(AttackStrategy left, AttackStrategy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AttackStrategy"/> values are not the same. </summary>
        public static bool operator !=(AttackStrategy left, AttackStrategy right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AttackStrategy"/>. </summary>
        public static implicit operator AttackStrategy(string value) => new AttackStrategy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AttackStrategy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AttackStrategy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
