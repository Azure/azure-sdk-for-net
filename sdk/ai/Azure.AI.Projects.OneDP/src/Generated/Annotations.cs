// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> Annotations applied to parts of the message or content. </summary>
    public partial class Annotations
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Annotations"/>. </summary>
        /// <param name="type"> The type of annotation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="type"/> is null. </exception>
        public Annotations(string type)
        {
            Argument.AssertNotNull(type, nameof(type));

            Type = type;
        }

        /// <summary> Initializes a new instance of <see cref="Annotations"/>. </summary>
        /// <param name="type"> The type of annotation. </param>
        /// <param name="toolCallId"> The tool call ID associated with the annotation. </param>
        /// <param name="jsonPath"> The JSON path associated with the annotation. </param>
        /// <param name="url"> The URL associated with the annotation. </param>
        /// <param name="start"> The start position of the annotation. </param>
        /// <param name="end"> The end position of the annotation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Annotations(string type, string toolCallId, string jsonPath, string url, int? start, int? end, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            ToolCallId = toolCallId;
            JsonPath = jsonPath;
            Url = url;
            Start = start;
            End = end;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="Annotations"/> for deserialization. </summary>
        internal Annotations()
        {
        }

        /// <summary> The type of annotation. </summary>
        public string Type { get; set; }
        /// <summary> The tool call ID associated with the annotation. </summary>
        public string ToolCallId { get; set; }
        /// <summary> The JSON path associated with the annotation. </summary>
        public string JsonPath { get; set; }
        /// <summary> The URL associated with the annotation. </summary>
        public string Url { get; set; }
        /// <summary> The start position of the annotation. </summary>
        public int? Start { get; set; }
        /// <summary> The end position of the annotation. </summary>
        public int? End { get; set; }
    }
}
