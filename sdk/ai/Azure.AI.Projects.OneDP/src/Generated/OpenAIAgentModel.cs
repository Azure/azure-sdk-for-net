// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Projects.OneDP
{
    /// <summary> A specialized AgentModel for OpenAI-based providers. </summary>
    public partial class OpenAIAgentModel : AgentModel
    {
        /// <summary> Initializes a new instance of <see cref="OpenAIAgentModel"/>. </summary>
        /// <param name="id"> A unique model or deployment ID for this agent model. </param>
        /// <param name="options"> The provider-specific options for this OpenAI-based model. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="options"/> is null. </exception>
        public OpenAIAgentModel(string id, OpenAIModelOptions options) : base(id)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(options, nameof(options));

            Provider = "openai";
        }

        /// <summary> Initializes a new instance of <see cref="OpenAIAgentModel"/>. </summary>
        /// <param name="id"> A unique model or deployment ID for this agent model. </param>
        /// <param name="provider"> The name of the provider for this model (e.g., 'openai'). </param>
        /// <param name="endpoint"> An endpoint where the provider can be reached, if applicable. </param>
        /// <param name="options"> Provider-specific configuration and options (JSON-like structure). </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OpenAIAgentModel(string id, string provider, string endpoint, JSONAny options, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, provider, endpoint, options, serializedAdditionalRawData)
        {
        }

        /// <summary> Initializes a new instance of <see cref="OpenAIAgentModel"/> for deserialization. </summary>
        internal OpenAIAgentModel()
        {
        }
    }
}
