// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Assistants.Samples
{
    public partial class Samples_AIAssistantClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateAgent_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "<model>",
            });
            Response response = client.CreateAgent(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateAgent_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "<model>",
            });
            Response response = await client.CreateAgentAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateAgent_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<Agent> response = client.CreateAgent("<model>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateAgent_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<Agent> response = await client.CreateAgentAsync("<model>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateAgent_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "<model>",
                name = "<name>",
                description = "<description>",
                instructions = "<instructions>",
                tools = new object[]
            {
new
{
type = "code_interpreter",
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"<file_ids>"
            },
                        data_sources = new object[]
            {
new
{
uri = "<uri>",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                        vector_stores = new object[]
            {
new
{
name = "<name>",
configuration = new
{
data_sources = new object[]
{
null
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "<index_connection_id>",
index_name = "<index_name>",
query_type = "simple",
top_k = 1234,
filter = "<filter>",
}
            },
                    },
                },
                temperature = 123.45F,
                top_p = 123.45F,
                response_format = "<response_format>",
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = client.CreateAgent(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateAgent_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "<model>",
                name = "<name>",
                description = "<description>",
                instructions = "<instructions>",
                tools = new object[]
            {
new
{
type = "code_interpreter",
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"<file_ids>"
            },
                        data_sources = new object[]
            {
new
{
uri = "<uri>",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                        vector_stores = new object[]
            {
new
{
name = "<name>",
configuration = new
{
data_sources = new object[]
{
null
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "<index_connection_id>",
index_name = "<index_name>",
query_type = "simple",
top_k = 1234,
filter = "<filter>",
}
            },
                    },
                },
                temperature = 123.45F,
                top_p = 123.45F,
                response_format = "<response_format>",
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = await client.CreateAgentAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateAgent_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            ToolResources toolResources = new ToolResources
            {
                CodeInterpreter = new CodeInterpreterToolResource
                {
                    FileIds = { "<file_ids>" },
                    DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
                },
                FileSearch = new FileSearchToolResource
                {
                    VectorStoreIds = { "<vector_store_ids>" },
                    VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
{
default
}))},
                },
                AzureAISearch = new AzureAISearchResource
                {
                    IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
{
QueryType = AzureAISearchQueryType.Simple,
TopK = 1234,
Filter = "<filter>",
}},
                },
            };
            Response<Agent> response = client.CreateAgent("<model>", name: "<name>", description: "<description>", instructions: "<instructions>", tools: new ToolDefinition[]
            {
new CodeInterpreterToolDefinition()
            }, toolResources: toolResources, temperature: 123.45F, topP: 123.45F, responseFormat: BinaryData.FromObjectAsJson("<response_format>"), metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateAgent_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            ToolResources toolResources = new ToolResources
            {
                CodeInterpreter = new CodeInterpreterToolResource
                {
                    FileIds = { "<file_ids>" },
                    DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
                },
                FileSearch = new FileSearchToolResource
                {
                    VectorStoreIds = { "<vector_store_ids>" },
                    VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
{
default
}))},
                },
                AzureAISearch = new AzureAISearchResource
                {
                    IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
{
QueryType = AzureAISearchQueryType.Simple,
TopK = 1234,
Filter = "<filter>",
}},
                },
            };
            Response<Agent> response = await client.CreateAgentAsync("<model>", name: "<name>", description: "<description>", instructions: "<instructions>", tools: new ToolDefinition[]
            {
new CodeInterpreterToolDefinition()
            }, toolResources: toolResources, temperature: 123.45F, topP: 123.45F, responseFormat: BinaryData.FromObjectAsJson("<response_format>"), metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetAgent_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetAgent("<assistantId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetAgent_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetAgentAsync("<assistantId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetAgent_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<Agent> response = client.GetAgent("<assistantId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetAgent_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<Agent> response = await client.GetAgentAsync("<assistantId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetAgent_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetAgent("<assistantId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetAgent_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetAgentAsync("<assistantId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetAgent_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<Agent> response = client.GetAgent("<assistantId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetAgent_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<Agent> response = await client.GetAgentAsync("<assistantId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateAgent_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateAgent("<assistantId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateAgent_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAgentAsync("<assistantId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateAgent_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<Agent> response = client.UpdateAgent("<assistantId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateAgent_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<Agent> response = await client.UpdateAgentAsync("<assistantId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateAgent_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "<model>",
                name = "<name>",
                description = "<description>",
                instructions = "<instructions>",
                tools = new object[]
            {
new
{
type = "code_interpreter",
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"<file_ids>"
            },
                        data_sources = new object[]
            {
new
{
uri = "<uri>",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                        vector_stores = new object[]
            {
new
{
name = "<name>",
configuration = new
{
data_sources = new object[]
{
null
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "<index_connection_id>",
index_name = "<index_name>",
query_type = "simple",
top_k = 1234,
filter = "<filter>",
}
            },
                    },
                },
                temperature = 123.45F,
                top_p = 123.45F,
                response_format = "<response_format>",
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = client.UpdateAgent("<assistantId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateAgent_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "<model>",
                name = "<name>",
                description = "<description>",
                instructions = "<instructions>",
                tools = new object[]
            {
new
{
type = "code_interpreter",
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"<file_ids>"
            },
                        data_sources = new object[]
            {
new
{
uri = "<uri>",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                        vector_stores = new object[]
            {
new
{
name = "<name>",
configuration = new
{
data_sources = new object[]
{
null
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "<index_connection_id>",
index_name = "<index_name>",
query_type = "simple",
top_k = 1234,
filter = "<filter>",
}
            },
                    },
                },
                temperature = 123.45F,
                top_p = 123.45F,
                response_format = "<response_format>",
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = await client.UpdateAgentAsync("<assistantId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateAgent_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            ToolResources toolResources = new ToolResources
            {
                CodeInterpreter = new CodeInterpreterToolResource
                {
                    FileIds = { "<file_ids>" },
                    DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
                },
                FileSearch = new FileSearchToolResource
                {
                    VectorStoreIds = { "<vector_store_ids>" },
                    VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
{
default
}))},
                },
                AzureAISearch = new AzureAISearchResource
                {
                    IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
{
QueryType = AzureAISearchQueryType.Simple,
TopK = 1234,
Filter = "<filter>",
}},
                },
            };
            Response<Agent> response = client.UpdateAgent("<assistantId>", model: "<model>", name: "<name>", description: "<description>", instructions: "<instructions>", tools: new ToolDefinition[]
            {
new CodeInterpreterToolDefinition()
            }, toolResources: toolResources, temperature: 123.45F, topP: 123.45F, responseFormat: BinaryData.FromObjectAsJson("<response_format>"), metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateAgent_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            ToolResources toolResources = new ToolResources
            {
                CodeInterpreter = new CodeInterpreterToolResource
                {
                    FileIds = { "<file_ids>" },
                    DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
                },
                FileSearch = new FileSearchToolResource
                {
                    VectorStoreIds = { "<vector_store_ids>" },
                    VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
{
default
}))},
                },
                AzureAISearch = new AzureAISearchResource
                {
                    IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
{
QueryType = AzureAISearchQueryType.Simple,
TopK = 1234,
Filter = "<filter>",
}},
                },
            };
            Response<Agent> response = await client.UpdateAgentAsync("<assistantId>", model: "<model>", name: "<name>", description: "<description>", instructions: "<instructions>", tools: new ToolDefinition[]
            {
new CodeInterpreterToolDefinition()
            }, toolResources: toolResources, temperature: 123.45F, topP: 123.45F, responseFormat: BinaryData.FromObjectAsJson("<response_format>"), metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateThread_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateThread(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateThread_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateThreadAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateThread_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<AgentThread> response = client.CreateThread();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateThread_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<AgentThread> response = await client.CreateThreadAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateThread_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = "<content>",
attachments = new object[]
{
new
{
file_id = "<file_id>",
data_source = new
{
uri = "<uri>",
type = "uri_asset",
},
tools = new object[]
{
new
{
type = "code_interpreter",
}
},
}
},
metadata = new
{
key = "<metadata>",
},
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"<file_ids>"
            },
                        data_sources = new object[]
            {
null
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                        vector_stores = new object[]
            {
new
{
name = "<name>",
configuration = new
{
data_sources = new object[]
{
null
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "<index_connection_id>",
index_name = "<index_name>",
query_type = "simple",
top_k = 1234,
filter = "<filter>",
}
            },
                    },
                },
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = client.CreateThread(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateThread_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = "<content>",
attachments = new object[]
{
new
{
file_id = "<file_id>",
data_source = new
{
uri = "<uri>",
type = "uri_asset",
},
tools = new object[]
{
new
{
type = "code_interpreter",
}
},
}
},
metadata = new
{
key = "<metadata>",
},
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"<file_ids>"
            },
                        data_sources = new object[]
            {
null
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                        vector_stores = new object[]
            {
new
{
name = "<name>",
configuration = new
{
data_sources = new object[]
{
null
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "<index_connection_id>",
index_name = "<index_name>",
query_type = "simple",
top_k = 1234,
filter = "<filter>",
}
            },
                    },
                },
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = await client.CreateThreadAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateThread_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            ToolResources toolResources = new ToolResources
            {
                CodeInterpreter = new CodeInterpreterToolResource
                {
                    FileIds = { "<file_ids>" },
                    DataSources = { default },
                },
                FileSearch = new FileSearchToolResource
                {
                    VectorStoreIds = { "<vector_store_ids>" },
                    VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
{
default
}))},
                },
                AzureAISearch = new AzureAISearchResource
                {
                    IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
{
QueryType = AzureAISearchQueryType.Simple,
TopK = 1234,
Filter = "<filter>",
}},
                },
            };
            Response<AgentThread> response = client.CreateThread(messages: new ThreadMessageOptions[]
            {
new ThreadMessageOptions(MessageRole.User, "<content>")
{
Attachments = {new MessageAttachment(new BinaryData[]
{
BinaryData.FromObjectAsJson(new
{
type = "code_interpreter",
})
})
{
FileId = "<file_id>",
DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
}},
Metadata =
{
["key"] = "<metadata>"
},
}
            }, toolResources: toolResources, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateThread_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            ToolResources toolResources = new ToolResources
            {
                CodeInterpreter = new CodeInterpreterToolResource
                {
                    FileIds = { "<file_ids>" },
                    DataSources = { default },
                },
                FileSearch = new FileSearchToolResource
                {
                    VectorStoreIds = { "<vector_store_ids>" },
                    VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
{
default
}))},
                },
                AzureAISearch = new AzureAISearchResource
                {
                    IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
{
QueryType = AzureAISearchQueryType.Simple,
TopK = 1234,
Filter = "<filter>",
}},
                },
            };
            Response<AgentThread> response = await client.CreateThreadAsync(messages: new ThreadMessageOptions[]
            {
new ThreadMessageOptions(MessageRole.User, "<content>")
{
Attachments = {new MessageAttachment(new BinaryData[]
{
BinaryData.FromObjectAsJson(new
{
type = "code_interpreter",
})
})
{
FileId = "<file_id>",
DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
}},
Metadata =
{
["key"] = "<metadata>"
},
}
            }, toolResources: toolResources, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetThread_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetThread("<threadId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetThread_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetThreadAsync("<threadId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetThread_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<AgentThread> response = client.GetThread("<threadId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetThread_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<AgentThread> response = await client.GetThreadAsync("<threadId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetThread_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetThread("<threadId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetThread_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetThreadAsync("<threadId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetThread_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<AgentThread> response = client.GetThread("<threadId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetThread_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<AgentThread> response = await client.GetThreadAsync("<threadId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateThread_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateThread("<threadId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateThread_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateThreadAsync("<threadId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateThread_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<AgentThread> response = client.UpdateThread("<threadId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateThread_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<AgentThread> response = await client.UpdateThreadAsync("<threadId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateThread_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"<file_ids>"
            },
                        data_sources = new object[]
            {
new
{
uri = "<uri>",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                        vector_stores = new object[]
            {
new
{
name = "<name>",
configuration = new
{
data_sources = new object[]
{
null
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "<index_connection_id>",
index_name = "<index_name>",
query_type = "simple",
top_k = 1234,
filter = "<filter>",
}
            },
                    },
                },
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = client.UpdateThread("<threadId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateThread_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"<file_ids>"
            },
                        data_sources = new object[]
            {
new
{
uri = "<uri>",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                        vector_stores = new object[]
            {
new
{
name = "<name>",
configuration = new
{
data_sources = new object[]
{
null
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "<index_connection_id>",
index_name = "<index_name>",
query_type = "simple",
top_k = 1234,
filter = "<filter>",
}
            },
                    },
                },
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = await client.UpdateThreadAsync("<threadId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateThread_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            ToolResources toolResources = new ToolResources
            {
                CodeInterpreter = new CodeInterpreterToolResource
                {
                    FileIds = { "<file_ids>" },
                    DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
                },
                FileSearch = new FileSearchToolResource
                {
                    VectorStoreIds = { "<vector_store_ids>" },
                    VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
{
default
}))},
                },
                AzureAISearch = new AzureAISearchResource
                {
                    IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
{
QueryType = AzureAISearchQueryType.Simple,
TopK = 1234,
Filter = "<filter>",
}},
                },
            };
            Response<AgentThread> response = client.UpdateThread("<threadId>", toolResources: toolResources, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateThread_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            ToolResources toolResources = new ToolResources
            {
                CodeInterpreter = new CodeInterpreterToolResource
                {
                    FileIds = { "<file_ids>" },
                    DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
                },
                FileSearch = new FileSearchToolResource
                {
                    VectorStoreIds = { "<vector_store_ids>" },
                    VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
{
default
}))},
                },
                AzureAISearch = new AzureAISearchResource
                {
                    IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
{
QueryType = AzureAISearchQueryType.Simple,
TopK = 1234,
Filter = "<filter>",
}},
                },
            };
            Response<AgentThread> response = await client.UpdateThreadAsync("<threadId>", toolResources: toolResources, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateMessage_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "<content>",
            });
            Response response = client.CreateMessage("<threadId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateMessage_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "<content>",
            });
            Response response = await client.CreateMessageAsync("<threadId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateMessage_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = client.CreateMessage("<threadId>", MessageRole.User, "<content>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateMessage_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = await client.CreateMessageAsync("<threadId>", MessageRole.User, "<content>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateMessage_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "<content>",
                attachments = new object[]
            {
new
{
file_id = "<file_id>",
data_source = new
{
uri = "<uri>",
type = "uri_asset",
},
tools = new object[]
{
new
{
type = "code_interpreter",
}
},
}
            },
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = client.CreateMessage("<threadId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateMessage_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "<content>",
                attachments = new object[]
            {
new
{
file_id = "<file_id>",
data_source = new
{
uri = "<uri>",
type = "uri_asset",
},
tools = new object[]
{
new
{
type = "code_interpreter",
}
},
}
            },
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = await client.CreateMessageAsync("<threadId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateMessage_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = client.CreateMessage("<threadId>", MessageRole.User, "<content>", attachments: new MessageAttachment[]
            {
new MessageAttachment(new BinaryData[]
{
BinaryData.FromObjectAsJson(new
{
type = "code_interpreter",
})
})
{
FileId = "<file_id>",
DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
}
            }, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateMessage_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = await client.CreateMessageAsync("<threadId>", MessageRole.User, "<content>", attachments: new MessageAttachment[]
            {
new MessageAttachment(new BinaryData[]
{
BinaryData.FromObjectAsJson(new
{
type = "code_interpreter",
})
})
{
FileId = "<file_id>",
DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
}
            }, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetMessage_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetMessage("<threadId>", "<messageId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetMessage_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetMessageAsync("<threadId>", "<messageId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetMessage_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = client.GetMessage("<threadId>", "<messageId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetMessage_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = await client.GetMessageAsync("<threadId>", "<messageId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetMessage_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetMessage("<threadId>", "<messageId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetMessage_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetMessageAsync("<threadId>", "<messageId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetMessage_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = client.GetMessage("<threadId>", "<messageId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetMessage_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = await client.GetMessageAsync("<threadId>", "<messageId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateMessage_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateMessage("<threadId>", "<messageId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateMessage_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateMessageAsync("<threadId>", "<messageId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateMessage_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = client.UpdateMessage("<threadId>", "<messageId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateMessage_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = await client.UpdateMessageAsync("<threadId>", "<messageId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateMessage_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = client.UpdateMessage("<threadId>", "<messageId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateMessage_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = await client.UpdateMessageAsync("<threadId>", "<messageId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateMessage_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = client.UpdateMessage("<threadId>", "<messageId>", metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateMessage_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadMessage> response = await client.UpdateMessageAsync("<threadId>", "<messageId>", metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateRun_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "<assistant_id>",
            });
            Response response = client.CreateRun("<threadId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "<assistant_id>",
            });
            Response response = await client.CreateRunAsync("<threadId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateRun_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = client.CreateRun("<threadId>", "<assistant_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateRun_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = await client.CreateRunAsync("<threadId>", "<assistant_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateRun_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "<assistant_id>",
                model = "<model>",
                instructions = "<instructions>",
                additional_instructions = "<additional_instructions>",
                additional_messages = new object[]
            {
new
{
role = "user",
content = "<content>",
attachments = new object[]
{
new
{
file_id = "<file_id>",
data_source = new
{
uri = "<uri>",
type = "uri_asset",
},
tools = new object[]
{
new
{
type = "code_interpreter",
}
},
}
},
metadata = new
{
key = "<metadata>",
},
}
            },
                tools = new object[]
            {
new
{
type = "code_interpreter",
}
            },
                stream = true,
                temperature = 123.45F,
                top_p = 123.45F,
                max_prompt_tokens = 1234,
                max_completion_tokens = 1234,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 1234,
                },
                tool_choice = "<tool_choice>",
                response_format = "<response_format>",
                parallel_tool_calls = true,
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = client.CreateRun("<threadId>", content, include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "<assistant_id>",
                model = "<model>",
                instructions = "<instructions>",
                additional_instructions = "<additional_instructions>",
                additional_messages = new object[]
            {
new
{
role = "user",
content = "<content>",
attachments = new object[]
{
new
{
file_id = "<file_id>",
data_source = new
{
uri = "<uri>",
type = "uri_asset",
},
tools = new object[]
{
new
{
type = "code_interpreter",
}
},
}
},
metadata = new
{
key = "<metadata>",
},
}
            },
                tools = new object[]
            {
new
{
type = "code_interpreter",
}
            },
                stream = true,
                temperature = 123.45F,
                top_p = 123.45F,
                max_prompt_tokens = 1234,
                max_completion_tokens = 1234,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 1234,
                },
                tool_choice = "<tool_choice>",
                response_format = "<response_format>",
                parallel_tool_calls = true,
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = await client.CreateRunAsync("<threadId>", content, include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateRun_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            TruncationObject truncationStrategy = new TruncationObject(TruncationStrategy.Auto)
            {
                LastMessages = 1234,
            };
            Response<ThreadRun> response = client.CreateRun("<threadId>", "<assistant_id>", overrideModelName: "<model>", overrideInstructions: "<instructions>", additionalInstructions: "<additional_instructions>", additionalMessages: new ThreadMessageOptions[]
            {
new ThreadMessageOptions(MessageRole.User, "<content>")
{
Attachments = {new MessageAttachment(new BinaryData[]
{
BinaryData.FromObjectAsJson(new
{
type = "code_interpreter",
})
})
{
FileId = "<file_id>",
DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
}},
Metadata =
{
["key"] = "<metadata>"
},
}
            }, overrideTools: new ToolDefinition[]
            {
new CodeInterpreterToolDefinition()
            }, stream: true, temperature: 123.45F, topP: 123.45F, maxPromptTokens: 1234, maxCompletionTokens: 1234, truncationStrategy: truncationStrategy, toolChoice: BinaryData.FromObjectAsJson("<tool_choice>"), responseFormat: BinaryData.FromObjectAsJson("<response_format>"), parallelToolCalls: true, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            }, include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateRun_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            TruncationObject truncationStrategy = new TruncationObject(TruncationStrategy.Auto)
            {
                LastMessages = 1234,
            };
            Response<ThreadRun> response = await client.CreateRunAsync("<threadId>", "<assistant_id>", overrideModelName: "<model>", overrideInstructions: "<instructions>", additionalInstructions: "<additional_instructions>", additionalMessages: new ThreadMessageOptions[]
            {
new ThreadMessageOptions(MessageRole.User, "<content>")
{
Attachments = {new MessageAttachment(new BinaryData[]
{
BinaryData.FromObjectAsJson(new
{
type = "code_interpreter",
})
})
{
FileId = "<file_id>",
DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
}},
Metadata =
{
["key"] = "<metadata>"
},
}
            }, overrideTools: new ToolDefinition[]
            {
new CodeInterpreterToolDefinition()
            }, stream: true, temperature: 123.45F, topP: 123.45F, maxPromptTokens: 1234, maxCompletionTokens: 1234, truncationStrategy: truncationStrategy, toolChoice: BinaryData.FromObjectAsJson("<tool_choice>"), responseFormat: BinaryData.FromObjectAsJson("<response_format>"), parallelToolCalls: true, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            }, include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetRun_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetRun("<threadId>", "<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetRunAsync("<threadId>", "<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetRun_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = client.GetRun("<threadId>", "<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetRun_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = await client.GetRunAsync("<threadId>", "<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetRun_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetRun("<threadId>", "<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetRunAsync("<threadId>", "<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetRun_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = client.GetRun("<threadId>", "<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetRun_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = await client.GetRunAsync("<threadId>", "<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateRun_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateRun("<threadId>", "<runId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateRunAsync("<threadId>", "<runId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateRun_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = client.UpdateRun("<threadId>", "<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateRun_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = await client.UpdateRunAsync("<threadId>", "<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateRun_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = client.UpdateRun("<threadId>", "<runId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = await client.UpdateRunAsync("<threadId>", "<runId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UpdateRun_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = client.UpdateRun("<threadId>", "<runId>", metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UpdateRun_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = await client.UpdateRunAsync("<threadId>", "<runId>", metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_SubmitToolOutputsToRun_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new object()
            },
            });
            Response response = client.SubmitToolOutputsToRun("<threadId>", "<runId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_SubmitToolOutputsToRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new object()
            },
            });
            Response response = await client.SubmitToolOutputsToRunAsync("<threadId>", "<runId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_SubmitToolOutputsToRun_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = client.SubmitToolOutputsToRun("<threadId>", "<runId>", new ToolOutput[]
            {
new ToolOutput()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_SubmitToolOutputsToRun_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = await client.SubmitToolOutputsToRunAsync("<threadId>", "<runId>", new ToolOutput[]
            {
new ToolOutput()
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_SubmitToolOutputsToRun_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new
{
tool_call_id = "<tool_call_id>",
output = "<output>",
}
            },
                stream = true,
            });
            Response response = client.SubmitToolOutputsToRun("<threadId>", "<runId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_SubmitToolOutputsToRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new
{
tool_call_id = "<tool_call_id>",
output = "<output>",
}
            },
                stream = true,
            });
            Response response = await client.SubmitToolOutputsToRunAsync("<threadId>", "<runId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_SubmitToolOutputsToRun_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = client.SubmitToolOutputsToRun("<threadId>", "<runId>", new ToolOutput[]
            {
new ToolOutput
{
ToolCallId = "<tool_call_id>",
Output = "<output>",
}
            }, stream: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_SubmitToolOutputsToRun_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = await client.SubmitToolOutputsToRunAsync("<threadId>", "<runId>", new ToolOutput[]
            {
new ToolOutput
{
ToolCallId = "<tool_call_id>",
Output = "<output>",
}
            }, stream: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CancelRun_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.CancelRun("<threadId>", "<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CancelRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.CancelRunAsync("<threadId>", "<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CancelRun_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = client.CancelRun("<threadId>", "<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CancelRun_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = await client.CancelRunAsync("<threadId>", "<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CancelRun_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.CancelRun("<threadId>", "<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CancelRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.CancelRunAsync("<threadId>", "<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CancelRun_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = client.CancelRun("<threadId>", "<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CancelRun_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = await client.CancelRunAsync("<threadId>", "<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateThreadAndRun_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "<assistant_id>",
            });
            Response response = client.CreateThreadAndRun(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateThreadAndRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "<assistant_id>",
            });
            Response response = await client.CreateThreadAndRunAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateThreadAndRun_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = client.CreateThreadAndRun("<assistant_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateThreadAndRun_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<ThreadRun> response = await client.CreateThreadAndRunAsync("<assistant_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateThreadAndRun_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "<assistant_id>",
                thread = new
                {
                    messages = new object[]
            {
new
{
role = "user",
content = "<content>",
attachments = new object[]
{
new
{
file_id = "<file_id>",
data_source = new
{
uri = "<uri>",
type = "uri_asset",
},
tools = new object[]
{
new
{
type = "code_interpreter",
}
},
}
},
metadata = new
{
key = "<metadata>",
},
}
            },
                    tool_resources = new
                    {
                        code_interpreter = new
                        {
                            file_ids = new object[]
            {
"<file_ids>"
            },
                            data_sources = new object[]
            {
null
            },
                        },
                        file_search = new
                        {
                            vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                            vector_stores = new object[]
            {
new
{
name = "<name>",
configuration = new
{
data_sources = new object[]
{
null
},
},
}
            },
                        },
                        azure_ai_search = new
                        {
                            indexes = new object[]
            {
new
{
index_connection_id = "<index_connection_id>",
index_name = "<index_name>",
query_type = "simple",
top_k = 1234,
filter = "<filter>",
}
            },
                        },
                    },
                    metadata = new
                    {
                        key = "<metadata>",
                    },
                },
                model = "<model>",
                instructions = "<instructions>",
                tools = new object[]
            {
new
{
type = "code_interpreter",
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"<file_ids>"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                    },
                },
                stream = true,
                temperature = 123.45F,
                top_p = 123.45F,
                max_prompt_tokens = 1234,
                max_completion_tokens = 1234,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 1234,
                },
                tool_choice = "<tool_choice>",
                response_format = "<response_format>",
                parallel_tool_calls = true,
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = client.CreateThreadAndRun(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateThreadAndRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "<assistant_id>",
                thread = new
                {
                    messages = new object[]
            {
new
{
role = "user",
content = "<content>",
attachments = new object[]
{
new
{
file_id = "<file_id>",
data_source = new
{
uri = "<uri>",
type = "uri_asset",
},
tools = new object[]
{
new
{
type = "code_interpreter",
}
},
}
},
metadata = new
{
key = "<metadata>",
},
}
            },
                    tool_resources = new
                    {
                        code_interpreter = new
                        {
                            file_ids = new object[]
            {
"<file_ids>"
            },
                            data_sources = new object[]
            {
null
            },
                        },
                        file_search = new
                        {
                            vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                            vector_stores = new object[]
            {
new
{
name = "<name>",
configuration = new
{
data_sources = new object[]
{
null
},
},
}
            },
                        },
                        azure_ai_search = new
                        {
                            indexes = new object[]
            {
new
{
index_connection_id = "<index_connection_id>",
index_name = "<index_name>",
query_type = "simple",
top_k = 1234,
filter = "<filter>",
}
            },
                        },
                    },
                    metadata = new
                    {
                        key = "<metadata>",
                    },
                },
                model = "<model>",
                instructions = "<instructions>",
                tools = new object[]
            {
new
{
type = "code_interpreter",
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"<file_ids>"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"<vector_store_ids>"
            },
                    },
                },
                stream = true,
                temperature = 123.45F,
                top_p = 123.45F,
                max_prompt_tokens = 1234,
                max_completion_tokens = 1234,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 1234,
                },
                tool_choice = "<tool_choice>",
                response_format = "<response_format>",
                parallel_tool_calls = true,
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = await client.CreateThreadAndRunAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateThreadAndRun_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            AgentThreadCreationOptions thread = new AgentThreadCreationOptions
            {
                Messages = {new ThreadMessageOptions(MessageRole.User, "<content>")
{
Attachments = {new MessageAttachment(new BinaryData[]
{
BinaryData.FromObjectAsJson(new
{
type = "code_interpreter",
})
})
{
FileId = "<file_id>",
DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
}},
Metadata =
{
["key"] = "<metadata>"
},
}},
                ToolResources = new ToolResources
                {
                    CodeInterpreter = new CodeInterpreterToolResource
                    {
                        FileIds = { "<file_ids>" },
                        DataSources = { default },
                    },
                    FileSearch = new FileSearchToolResource
                    {
                        VectorStoreIds = { "<vector_store_ids>" },
                        VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
{
default
}))},
                    },
                    AzureAISearch = new AzureAISearchResource
                    {
                        IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
{
QueryType = AzureAISearchQueryType.Simple,
TopK = 1234,
Filter = "<filter>",
}},
                    },
                },
                Metadata =
{
["key"] = "<metadata>"
},
            };
            UpdateToolResourcesOptions toolResources = new UpdateToolResourcesOptions
            {
                CodeInterpreter = new UpdateCodeInterpreterToolResourceOptions
                {
                    FileIds = { "<file_ids>" },
                },
                FileSearch = new UpdateFileSearchToolResourceOptions
                {
                    VectorStoreIds = { "<vector_store_ids>" },
                },
                AzureAISearch = default,
            };
            TruncationObject truncationStrategy = new TruncationObject(TruncationStrategy.Auto)
            {
                LastMessages = 1234,
            };
            Response<ThreadRun> response = client.CreateThreadAndRun("<assistant_id>", thread: thread, overrideModelName: "<model>", overrideInstructions: "<instructions>", overrideTools: new ToolDefinition[]
            {
new CodeInterpreterToolDefinition()
            }, toolResources: toolResources, stream: true, temperature: 123.45F, topP: 123.45F, maxPromptTokens: 1234, maxCompletionTokens: 1234, truncationStrategy: truncationStrategy, toolChoice: BinaryData.FromObjectAsJson("<tool_choice>"), responseFormat: BinaryData.FromObjectAsJson("<response_format>"), parallelToolCalls: true, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateThreadAndRun_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            AgentThreadCreationOptions thread = new AgentThreadCreationOptions
            {
                Messages = {new ThreadMessageOptions(MessageRole.User, "<content>")
{
Attachments = {new MessageAttachment(new BinaryData[]
{
BinaryData.FromObjectAsJson(new
{
type = "code_interpreter",
})
})
{
FileId = "<file_id>",
DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
}},
Metadata =
{
["key"] = "<metadata>"
},
}},
                ToolResources = new ToolResources
                {
                    CodeInterpreter = new CodeInterpreterToolResource
                    {
                        FileIds = { "<file_ids>" },
                        DataSources = { default },
                    },
                    FileSearch = new FileSearchToolResource
                    {
                        VectorStoreIds = { "<vector_store_ids>" },
                        VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
{
default
}))},
                    },
                    AzureAISearch = new AzureAISearchResource
                    {
                        IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
{
QueryType = AzureAISearchQueryType.Simple,
TopK = 1234,
Filter = "<filter>",
}},
                    },
                },
                Metadata =
{
["key"] = "<metadata>"
},
            };
            UpdateToolResourcesOptions toolResources = new UpdateToolResourcesOptions
            {
                CodeInterpreter = new UpdateCodeInterpreterToolResourceOptions
                {
                    FileIds = { "<file_ids>" },
                },
                FileSearch = new UpdateFileSearchToolResourceOptions
                {
                    VectorStoreIds = { "<vector_store_ids>" },
                },
                AzureAISearch = default,
            };
            TruncationObject truncationStrategy = new TruncationObject(TruncationStrategy.Auto)
            {
                LastMessages = 1234,
            };
            Response<ThreadRun> response = await client.CreateThreadAndRunAsync("<assistant_id>", thread: thread, overrideModelName: "<model>", overrideInstructions: "<instructions>", overrideTools: new ToolDefinition[]
            {
new CodeInterpreterToolDefinition()
            }, toolResources: toolResources, stream: true, temperature: 123.45F, topP: 123.45F, maxPromptTokens: 1234, maxCompletionTokens: 1234, truncationStrategy: truncationStrategy, toolChoice: BinaryData.FromObjectAsJson("<tool_choice>"), responseFormat: BinaryData.FromObjectAsJson("<response_format>"), parallelToolCalls: true, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetRunStep_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetRunStep("<threadId>", "<runId>", "<stepId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetRunStep_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetRunStepAsync("<threadId>", "<runId>", "<stepId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetRunStep_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<RunStep> response = client.GetRunStep("<threadId>", "<runId>", "<stepId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetRunStep_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<RunStep> response = await client.GetRunStepAsync("<threadId>", "<runId>", "<stepId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetRunStep_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetRunStep("<threadId>", "<runId>", "<stepId>", new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents }, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetRunStep_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetRunStepAsync("<threadId>", "<runId>", "<stepId>", new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents }, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetRunStep_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<RunStep> response = client.GetRunStep("<threadId>", "<runId>", "<stepId>", include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetRunStep_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<RunStep> response = await client.GetRunStepAsync("<threadId>", "<runId>", "<stepId>", include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UploadFile_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file = new
                {
                    contents = new object(),
                },
                purpose = "fine-tune",
            });
            Response response = client.UploadFile(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UploadFile_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file = new
                {
                    contents = new object(),
                },
                purpose = "fine-tune",
            });
            Response response = await client.UploadFileAsync(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UploadFile_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            UploadFileRequest body = new UploadFileRequest(new File(BinaryData.FromObjectAsJson(new object())), OpenAIFilePurpose.FineTune);
            Response<OpenAIFile> response = client.UploadFile(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UploadFile_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            UploadFileRequest body = new UploadFileRequest(new File(BinaryData.FromObjectAsJson(new object())), OpenAIFilePurpose.FineTune);
            Response<OpenAIFile> response = await client.UploadFileAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UploadFile_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file = new
                {
                    contentType = "<contentType>",
                    filename = "<filename>",
                    contents = new object(),
                },
                purpose = "fine-tune",
                filename = "<filename>",
            });
            Response response = client.UploadFile(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("status_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UploadFile_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file = new
                {
                    contentType = "<contentType>",
                    filename = "<filename>",
                    contents = new object(),
                },
                purpose = "fine-tune",
                filename = "<filename>",
            });
            Response response = await client.UploadFileAsync(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("status_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_UploadFile_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            UploadFileRequest body = new UploadFileRequest(new File(BinaryData.FromObjectAsJson(new object()))
            {
                ContentType = "<contentType>",
                Filename = "<filename>",
            }, OpenAIFilePurpose.FineTune)
            {
                Filename = "<filename>",
            };
            Response<OpenAIFile> response = client.UploadFile(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_UploadFile_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            UploadFileRequest body = new UploadFileRequest(new File(BinaryData.FromObjectAsJson(new object()))
            {
                ContentType = "<contentType>",
                Filename = "<filename>",
            }, OpenAIFilePurpose.FineTune)
            {
                Filename = "<filename>",
            };
            Response<OpenAIFile> response = await client.UploadFileAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetFile_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetFile("<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetFile_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetFileAsync("<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetFile_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIFile> response = client.GetFile("<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetFile_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIFile> response = await client.GetFileAsync("<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetFile_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetFile("<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("status_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetFile_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetFileAsync("<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("status_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetFile_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIFile> response = client.GetFile("<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetFile_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIFile> response = await client.GetFileAsync("<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetFileContent_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetFileContent("<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetFileContent_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetFileContentAsync("<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetFileContent_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<BinaryData> response = client.GetFileContent("<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetFileContent_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<BinaryData> response = await client.GetFileContentAsync("<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetFileContent_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetFileContent("<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetFileContent_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetFileContentAsync("<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetFileContent_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<BinaryData> response = client.GetFileContent("<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetFileContent_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<BinaryData> response = await client.GetFileContentAsync("<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStores_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStores(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStores_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoresAsync(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStores_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStores_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStores_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStores(1234, "asc", "<after>", "<before>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_after").GetProperty("anchor").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_after").GetProperty("days").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStores_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoresAsync(1234, "asc", "<after>", "<before>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_after").GetProperty("anchor").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_after").GetProperty("days").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStores_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores(limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStores_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync(limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStore_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateVectorStore(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStore_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateVectorStoreAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStore_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStore> response = client.CreateVectorStore();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStore_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStore> response = await client.CreateVectorStoreAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStore_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"<file_ids>"
            },
                name = "<name>",
                configuration = new
                {
                    data_sources = new object[]
            {
new
{
uri = "<uri>",
type = "uri_asset",
}
            },
                },
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 1234,
                },
                chunking_strategy = new
                {
                    type = "auto",
                },
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = client.CreateVectorStore(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStore_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"<file_ids>"
            },
                name = "<name>",
                configuration = new
                {
                    data_sources = new object[]
            {
new
{
uri = "<uri>",
type = "uri_asset",
}
            },
                },
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 1234,
                },
                chunking_strategy = new
                {
                    type = "auto",
                },
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = await client.CreateVectorStoreAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStore_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            VectorStoreConfiguration storeConfiguration = new VectorStoreConfiguration(new VectorStoreDataSource[]
            {
new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset)
            });
            VectorStoreExpirationPolicy expiresAfter = new VectorStoreExpirationPolicy(VectorStoreExpirationPolicyAnchor.LastActiveAt, 1234);
            VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
            Response<VectorStore> response = client.CreateVectorStore(fileIds: new string[] { "<file_ids>" }, name: "<name>", storeConfiguration: storeConfiguration, expiresAfter: expiresAfter, chunkingStrategy: chunkingStrategy, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStore_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            VectorStoreConfiguration storeConfiguration = new VectorStoreConfiguration(new VectorStoreDataSource[]
            {
new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset)
            });
            VectorStoreExpirationPolicy expiresAfter = new VectorStoreExpirationPolicy(VectorStoreExpirationPolicyAnchor.LastActiveAt, 1234);
            VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
            Response<VectorStore> response = await client.CreateVectorStoreAsync(fileIds: new string[] { "<file_ids>" }, name: "<name>", storeConfiguration: storeConfiguration, expiresAfter: expiresAfter, chunkingStrategy: chunkingStrategy, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStore_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStore("<vectorStoreId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStore_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoreAsync("<vectorStoreId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStore_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStore> response = client.GetVectorStore("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStore_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStore> response = await client.GetVectorStoreAsync("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStore_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStore("<vectorStoreId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStore_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoreAsync("<vectorStoreId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStore_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStore> response = client.GetVectorStore("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStore_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStore> response = await client.GetVectorStoreAsync("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_ModifyVectorStore_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ModifyVectorStore("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_ModifyVectorStore_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ModifyVectorStoreAsync("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_ModifyVectorStore_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStore> response = client.ModifyVectorStore("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_ModifyVectorStore_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStore> response = await client.ModifyVectorStoreAsync("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_ModifyVectorStore_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 1234,
                },
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = client.ModifyVectorStore("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_ModifyVectorStore_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 1234,
                },
                metadata = new
                {
                    key = "<metadata>",
                },
            });
            Response response = await client.ModifyVectorStoreAsync("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
            Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_ModifyVectorStore_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            VectorStoreExpirationPolicy expiresAfter = new VectorStoreExpirationPolicy(VectorStoreExpirationPolicyAnchor.LastActiveAt, 1234);
            Response<VectorStore> response = client.ModifyVectorStore("<vectorStoreId>", name: "<name>", expiresAfter: expiresAfter, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_ModifyVectorStore_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            VectorStoreExpirationPolicy expiresAfter = new VectorStoreExpirationPolicy(VectorStoreExpirationPolicyAnchor.LastActiveAt, 1234);
            Response<VectorStore> response = await client.ModifyVectorStoreAsync("<vectorStoreId>", name: "<name>", expiresAfter: expiresAfter, metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_DeleteVectorStore_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.DeleteVectorStore("<vectorStoreId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_DeleteVectorStore_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.DeleteVectorStoreAsync("<vectorStoreId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_DeleteVectorStore_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_DeleteVectorStore_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_DeleteVectorStore_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.DeleteVectorStore("<vectorStoreId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_DeleteVectorStore_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.DeleteVectorStoreAsync("<vectorStoreId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_DeleteVectorStore_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_DeleteVectorStore_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFiles_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStoreFiles("<vectorStoreId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFiles_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoreFilesAsync("<vectorStoreId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFiles_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFiles_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFiles_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStoreFiles("<vectorStoreId>", "in_progress", 1234, "asc", "<after>", "<before>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFiles_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoreFilesAsync("<vectorStoreId>", "in_progress", 1234, "asc", "<after>", "<before>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFiles_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("<vectorStoreId>", filter: VectorStoreFileStatusFilter.InProgress, limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFiles_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("<vectorStoreId>", filter: VectorStoreFileStatusFilter.InProgress, limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStoreFile_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateVectorStoreFile("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStoreFile_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateVectorStoreFileAsync("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStoreFile_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFile> response = client.CreateVectorStoreFile("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStoreFile_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFile> response = await client.CreateVectorStoreFileAsync("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStoreFile_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "<file_id>",
                data_source = new
                {
                    uri = "<uri>",
                    type = "uri_asset",
                },
                chunking_strategy = new
                {
                    type = "auto",
                },
            });
            Response response = client.CreateVectorStoreFile("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStoreFile_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "<file_id>",
                data_source = new
                {
                    uri = "<uri>",
                    type = "uri_asset",
                },
                chunking_strategy = new
                {
                    type = "auto",
                },
            });
            Response response = await client.CreateVectorStoreFileAsync("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStoreFile_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            VectorStoreDataSource dataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset);
            VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
            Response<VectorStoreFile> response = client.CreateVectorStoreFile("<vectorStoreId>", fileId: "<file_id>", dataSource: dataSource, chunkingStrategy: chunkingStrategy);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStoreFile_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            VectorStoreDataSource dataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset);
            VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
            Response<VectorStoreFile> response = await client.CreateVectorStoreFileAsync("<vectorStoreId>", fileId: "<file_id>", dataSource: dataSource, chunkingStrategy: chunkingStrategy);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFile_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStoreFile("<vectorStoreId>", "<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFile_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoreFileAsync("<vectorStoreId>", "<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFile_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFile> response = client.GetVectorStoreFile("<vectorStoreId>", "<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFile_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("<vectorStoreId>", "<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFile_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStoreFile("<vectorStoreId>", "<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFile_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoreFileAsync("<vectorStoreId>", "<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFile_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFile> response = client.GetVectorStoreFile("<vectorStoreId>", "<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFile_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("<vectorStoreId>", "<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_DeleteVectorStoreFile_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.DeleteVectorStoreFile("<vectorStoreId>", "<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_DeleteVectorStoreFile_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.DeleteVectorStoreFileAsync("<vectorStoreId>", "<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_DeleteVectorStoreFile_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("<vectorStoreId>", "<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_DeleteVectorStoreFile_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("<vectorStoreId>", "<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_DeleteVectorStoreFile_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.DeleteVectorStoreFile("<vectorStoreId>", "<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_DeleteVectorStoreFile_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.DeleteVectorStoreFileAsync("<vectorStoreId>", "<fileId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_DeleteVectorStoreFile_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("<vectorStoreId>", "<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_DeleteVectorStoreFile_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("<vectorStoreId>", "<fileId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStoreFileBatch_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateVectorStoreFileBatch("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStoreFileBatch_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateVectorStoreFileBatchAsync("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStoreFileBatch_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStoreFileBatch_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("<vectorStoreId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStoreFileBatch_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"<file_ids>"
            },
                data_sources = new object[]
            {
new
{
uri = "<uri>",
type = "uri_asset",
}
            },
                chunking_strategy = new
                {
                    type = "auto",
                },
            });
            Response response = client.CreateVectorStoreFileBatch("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStoreFileBatch_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"<file_ids>"
            },
                data_sources = new object[]
            {
new
{
uri = "<uri>",
type = "uri_asset",
}
            },
                chunking_strategy = new
                {
                    type = "auto",
                },
            });
            Response response = await client.CreateVectorStoreFileBatchAsync("<vectorStoreId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CreateVectorStoreFileBatch_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
            Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("<vectorStoreId>", fileIds: new string[] { "<file_ids>" }, dataSources: new VectorStoreDataSource[]
            {
new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset)
            }, chunkingStrategy: chunkingStrategy);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CreateVectorStoreFileBatch_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
            Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("<vectorStoreId>", fileIds: new string[] { "<file_ids>" }, dataSources: new VectorStoreDataSource[]
            {
new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset)
            }, chunkingStrategy: chunkingStrategy);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFileBatch_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStoreFileBatch("<vectorStoreId>", "<batchId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFileBatch_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFileBatch_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("<vectorStoreId>", "<batchId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFileBatch_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFileBatch_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStoreFileBatch("<vectorStoreId>", "<batchId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFileBatch_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFileBatch_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("<vectorStoreId>", "<batchId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFileBatch_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CancelVectorStoreFileBatch_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.CancelVectorStoreFileBatch("<vectorStoreId>", "<batchId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CancelVectorStoreFileBatch_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.CancelVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CancelVectorStoreFileBatch_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("<vectorStoreId>", "<batchId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CancelVectorStoreFileBatch_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CancelVectorStoreFileBatch_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.CancelVectorStoreFileBatch("<vectorStoreId>", "<batchId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CancelVectorStoreFileBatch_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.CancelVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_CancelVectorStoreFileBatch_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("<vectorStoreId>", "<batchId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_CancelVectorStoreFileBatch_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFileBatchFiles_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStoreFileBatchFiles("<vectorStoreId>", "<batchId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFileBatchFiles_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoreFileBatchFilesAsync("<vectorStoreId>", "<batchId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFileBatchFiles_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("<vectorStoreId>", "<batchId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFileBatchFiles_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("<vectorStoreId>", "<batchId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFileBatchFiles_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = client.GetVectorStoreFileBatchFiles("<vectorStoreId>", "<batchId>", "in_progress", 1234, "asc", "<after>", "<before>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFileBatchFiles_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response response = await client.GetVectorStoreFileBatchFilesAsync("<vectorStoreId>", "<batchId>", "in_progress", 1234, "asc", "<after>", "<before>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Assistants_GetVectorStoreFileBatchFiles_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("<vectorStoreId>", "<batchId>", filter: VectorStoreFileStatusFilter.InProgress, limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Assistants_GetVectorStoreFileBatchFiles_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AIAssistantClient client = new AIAssistantClient(endpoint, credential);

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("<vectorStoreId>", "<batchId>", filter: VectorStoreFileStatusFilter.InProgress, limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
        }
    }
}
