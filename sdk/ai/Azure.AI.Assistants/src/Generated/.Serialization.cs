// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.Assistants
{
    void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => (System.ClientModel.Primitives.IJsonModel < Assistants.>this).Write(writer, global::Azure.AI.Assistants.ModelSerializationExtensions.WireOptions);

void global::System.ClientModel.Primitives.IJsonModel<global::Azure.AI.Assistants.>.Write(global::System.Text.Json.Utf8JsonWriter writer,global::System.ClientModel.Primitives.ModelReaderWriterOptions options)
{
        writer.WriteStartObject();
        this.JsonModelWriteCore(writer, options);
        writer.WriteEndObject();
    }

/// <param name="writer"> The JSON writer. </param>
/// <param name="options"> The client options for reading and writing models. </param>
    protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
    {
        var format = options.Format == "W" ? (System.ClientModel.Primitives.IPersistableModel < Assistants.>this).GetFormatFromOptions(options) : options.Format;
        if (format != "J")
        {
            throw new FormatException($"The model {nameof(Assistants.)} does not support writing '{format}' format.");
        }

        if (options.Format != "W" && _serializedAdditionalRawData != null)
        {
            foreach (var item in _serializedAdditionalRawData)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
        }
    }

    Assistants.global::System.ClientModel.Primitives.IJsonModel<Assistants.>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
{
var format = options.Format == "W" ? (System.ClientModel.Primitives.IPersistableModel < Assistants.>this).GetFormatFromOptions(options) : options.Format;
if ((format != "J"))
{
throw new FormatException($"The model {nameof(global::Azure.AI.Assistants.)} does not support reading '{format}' format.");
}

using JsonDocument document = JsonDocument.ParseValue(ref reader);
return Azure.AI.Assistants..Deserialize(document.RootElement, options);
}

internal static Azure.AI.Assistants.Deserialize(JsonElement element, System.ClientModel.Primitives.ModelReaderWriterOptions options = (ModelReaderWriterOptions)null)
{
    options ??= Azure.AI.Assistants.ModelSerializationExtensions.WireOptions;

    if (element.ValueKind == global::System.Text.Json.JsonValueKind.Null)
    {
        return null;
    }
    IDictionary<string, BinaryData> serializedAdditionalRawData = default;
    Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
    foreach (var property in element.EnumerateObject())
    {
        if (options.Format != "W")
        {
            rawDataDictionary.Add(property.Name, global::System.BinaryData.FromString(property.Value.GetRawText()));
        }
    }
    serializedAdditionalRawData = rawDataDictionary;
    return new Azure.AI.Assistants.(serializedAdditionalRawData);
}

BinaryData System.ClientModel.Primitives.IPersistableModel<global::Azure.AI.Assistants.>.Write(ModelReaderWriterOptions options)
{
    var format = options.Format == "W" ? (System.ClientModel.Primitives.IPersistableModel < Azure.AI.Assistants.>this).GetFormatFromOptions(options) : options.Format;

    switch (format)
    {
        case "J":
            return ModelReaderWriter.Write(this, options);
        default:
            throw new FormatException($"The model {nameof(Azure.AI.Assistants.)} does not support writing '{options.Format}' format.");
    }
}

Azure.AI.Assistants.global::System.ClientModel.Primitives.IPersistableModel < Azure.AI.Assistants.>.Create(System.BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options)
{
    var format = options.Format == "W" ? (System.ClientModel.Primitives.IPersistableModel < Azure.AI.Assistants.>this).GetFormatFromOptions(options) : options.Format;

    switch (format)
    {
        case "J":
            {
                using JsonDocument document = JsonDocument.Parse(data, Azure.AI.Assistants.ModelSerializationExtensions.JsonDocumentOptions);
                return Azure.AI.Assistants..Deserialize(document.RootElement, options);
            }
        default:
            throw new FormatException($"The model {nameof(Azure.AI.Assistants.)} does not support reading '{options.Format}' format.");
    }
}

string System.ClientModel.Primitives.IPersistableModel<global::Azure.AI.Assistants.>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

/// <summary> Deserializes the model from a raw response. </summary>
/// <param name="response"> The response to deserialize the model from. </param>
internal static Azure.AI.Assistants.FromResponse(Azure.Response response)
{
    using var document = JsonDocument.Parse(response.Content, Azure.AI.Assistants.ModelSerializationExtensions.JsonDocumentOptions);
    return Azure.AI.Assistants..Deserialize(document.RootElement);
}

/// <summary> Convert into a <see cref="RequestContent"/>. </summary>
internal virtual RequestContent ToRequestContent()
{
    var content = new Azure.AI.Assistants.Utf8JsonRequestContent();
    content.JsonWriter.WriteObjectValue < Azure.AI.Assistants.> (this, Azure.AI.Assistants.ModelSerializationExtensions.WireOptions);
    return content;
}
}
}
