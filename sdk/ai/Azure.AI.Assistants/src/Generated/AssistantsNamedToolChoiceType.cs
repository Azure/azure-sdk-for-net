// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Assistants
{
    /// <summary> Available tool types for assistants named tools. </summary>
    public readonly partial struct AssistantsNamedToolChoiceType : IEquatable<AssistantsNamedToolChoiceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssistantsNamedToolChoiceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssistantsNamedToolChoiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FunctionValue = "function";
        private const string CodeInterpreterValue = "code_interpreter";
        private const string FileSearchValue = "file_search";
        private const string BingGroundingValue = "bing_grounding";
        private const string MicrosoftFabricValue = "fabric_dataagent";
        private const string SharepointValue = "sharepoint_grounding";
        private const string AzureAISearchValue = "azure_ai_search";
        private const string BingCustomSearchValue = "bing_custom_search";
        private const string ConnectedAgentValue = "connected_agent";

        /// <summary> Tool type `function`. </summary>
        public static AssistantsNamedToolChoiceType Function { get; } = new AssistantsNamedToolChoiceType(FunctionValue);
        /// <summary> Tool type `code_interpreter`. </summary>
        public static AssistantsNamedToolChoiceType CodeInterpreter { get; } = new AssistantsNamedToolChoiceType(CodeInterpreterValue);
        /// <summary> Tool type `file_search`. </summary>
        public static AssistantsNamedToolChoiceType FileSearch { get; } = new AssistantsNamedToolChoiceType(FileSearchValue);
        /// <summary> Tool type `bing_grounding`. </summary>
        public static AssistantsNamedToolChoiceType BingGrounding { get; } = new AssistantsNamedToolChoiceType(BingGroundingValue);
        /// <summary> Tool type `fabric_dataagent`. </summary>
        public static AssistantsNamedToolChoiceType MicrosoftFabric { get; } = new AssistantsNamedToolChoiceType(MicrosoftFabricValue);
        /// <summary> Tool type `sharepoint_grounding`. </summary>
        public static AssistantsNamedToolChoiceType Sharepoint { get; } = new AssistantsNamedToolChoiceType(SharepointValue);
        /// <summary> Tool type `azure_ai_search`. </summary>
        public static AssistantsNamedToolChoiceType AzureAISearch { get; } = new AssistantsNamedToolChoiceType(AzureAISearchValue);
        /// <summary> Tool type `bing_custom_search`. </summary>
        public static AssistantsNamedToolChoiceType BingCustomSearch { get; } = new AssistantsNamedToolChoiceType(BingCustomSearchValue);
        /// <summary> Tool type `connected_agent`. </summary>
        public static AssistantsNamedToolChoiceType ConnectedAgent { get; } = new AssistantsNamedToolChoiceType(ConnectedAgentValue);
        /// <summary> Determines if two <see cref="AssistantsNamedToolChoiceType"/> values are the same. </summary>
        public static bool operator ==(AssistantsNamedToolChoiceType left, AssistantsNamedToolChoiceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssistantsNamedToolChoiceType"/> values are not the same. </summary>
        public static bool operator !=(AssistantsNamedToolChoiceType left, AssistantsNamedToolChoiceType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssistantsNamedToolChoiceType"/>. </summary>
        public static implicit operator AssistantsNamedToolChoiceType(string value) => new AssistantsNamedToolChoiceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssistantsNamedToolChoiceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssistantsNamedToolChoiceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
