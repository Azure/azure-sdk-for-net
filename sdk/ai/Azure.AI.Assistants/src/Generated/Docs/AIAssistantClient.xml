<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateAgentAsync(string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<Agent> response = await client.CreateAgentAsync("<model>");
]]></code>
This sample shows how to call CreateAgentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

ToolResources toolResources = new ToolResources
{
    CodeInterpreter = new CodeInterpreterToolResource
    {
        FileIds = { "<file_ids>" },
        DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
    },
    FileSearch = new FileSearchToolResource
    {
        VectorStoreIds = { "<vector_store_ids>" },
        VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
        {
            default
        }))},
    },
    AzureAISearch = new AzureAISearchResource
    {
        IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
        {
            QueryType = AzureAISearchQueryType.Simple,
            TopK = 1234,
            Filter = "<filter>",
        }},
    },
};
Response<Agent> response = await client.CreateAgentAsync("<model>", name: "<name>", description: "<description>", instructions: "<instructions>", tools: new ToolDefinition[]
{
    new CodeInterpreterToolDefinition()
}, toolResources: toolResources, temperature: 123.45F, topP: 123.45F, responseFormat: BinaryData.FromObjectAsJson("<response_format>"), metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="CreateAgent(string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<Agent> response = client.CreateAgent("<model>");
]]></code>
This sample shows how to call CreateAgent with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

ToolResources toolResources = new ToolResources
{
    CodeInterpreter = new CodeInterpreterToolResource
    {
        FileIds = { "<file_ids>" },
        DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
    },
    FileSearch = new FileSearchToolResource
    {
        VectorStoreIds = { "<vector_store_ids>" },
        VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
        {
            default
        }))},
    },
    AzureAISearch = new AzureAISearchResource
    {
        IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
        {
            QueryType = AzureAISearchQueryType.Simple,
            TopK = 1234,
            Filter = "<filter>",
        }},
    },
};
Response<Agent> response = client.CreateAgent("<model>", name: "<name>", description: "<description>", instructions: "<instructions>", tools: new ToolDefinition[]
{
    new CodeInterpreterToolDefinition()
}, toolResources: toolResources, temperature: 123.45F, topP: 123.45F, responseFormat: BinaryData.FromObjectAsJson("<response_format>"), metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="CreateAgentAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    model = "<model>",
});
Response response = await client.CreateAgentAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateAgentAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    model = "<model>",
    name = "<name>",
    description = "<description>",
    instructions = "<instructions>",
    tools = new object[]
    {
        new
        {
            type = "code_interpreter",
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "<file_ids>"
            },
            data_sources = new object[]
            {
                new
                {
                    uri = "<uri>",
                    type = "uri_asset",
                }
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "<vector_store_ids>"
            },
            vector_stores = new object[]
            {
                new
                {
                    name = "<name>",
                    configuration = new
                    {
                        data_sources = new object[]
                        {
                            null
                        },
                    },
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "<index_connection_id>",
                    index_name = "<index_name>",
                    query_type = "simple",
                    top_k = 1234,
                    filter = "<filter>",
                }
            },
        },
    },
    temperature = 123.45F,
    top_p = 123.45F,
    response_format = "<response_format>",
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = await client.CreateAgentAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateAgent(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    model = "<model>",
});
Response response = client.CreateAgent(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateAgent with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    model = "<model>",
    name = "<name>",
    description = "<description>",
    instructions = "<instructions>",
    tools = new object[]
    {
        new
        {
            type = "code_interpreter",
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "<file_ids>"
            },
            data_sources = new object[]
            {
                new
                {
                    uri = "<uri>",
                    type = "uri_asset",
                }
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "<vector_store_ids>"
            },
            vector_stores = new object[]
            {
                new
                {
                    name = "<name>",
                    configuration = new
                    {
                        data_sources = new object[]
                        {
                            null
                        },
                    },
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "<index_connection_id>",
                    index_name = "<index_name>",
                    query_type = "simple",
                    top_k = 1234,
                    filter = "<filter>",
                }
            },
        },
    },
    temperature = 123.45F,
    top_p = 123.45F,
    response_format = "<response_format>",
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = client.CreateAgent(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetAgentAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<Agent> response = await client.GetAgentAsync("<assistantId>");
]]></code>
This sample shows how to call GetAgentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<Agent> response = await client.GetAgentAsync("<assistantId>");
]]></code></example>
    </member>
    <member name="GetAgent(string,CancellationToken)">
      <example>
This sample shows how to call GetAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<Agent> response = client.GetAgent("<assistantId>");
]]></code>
This sample shows how to call GetAgent with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<Agent> response = client.GetAgent("<assistantId>");
]]></code></example>
    </member>
    <member name="GetAgentAsync(string,RequestContext)">
      <example>
This sample shows how to call GetAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetAgentAsync("<assistantId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetAgentAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetAgentAsync("<assistantId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetAgent(string,RequestContext)">
      <example>
This sample shows how to call GetAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetAgent("<assistantId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetAgent with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetAgent("<assistantId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateAgentAsync(string,string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<Agent> response = await client.UpdateAgentAsync("<assistantId>");
]]></code>
This sample shows how to call UpdateAgentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

ToolResources toolResources = new ToolResources
{
    CodeInterpreter = new CodeInterpreterToolResource
    {
        FileIds = { "<file_ids>" },
        DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
    },
    FileSearch = new FileSearchToolResource
    {
        VectorStoreIds = { "<vector_store_ids>" },
        VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
        {
            default
        }))},
    },
    AzureAISearch = new AzureAISearchResource
    {
        IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
        {
            QueryType = AzureAISearchQueryType.Simple,
            TopK = 1234,
            Filter = "<filter>",
        }},
    },
};
Response<Agent> response = await client.UpdateAgentAsync("<assistantId>", model: "<model>", name: "<name>", description: "<description>", instructions: "<instructions>", tools: new ToolDefinition[]
{
    new CodeInterpreterToolDefinition()
}, toolResources: toolResources, temperature: 123.45F, topP: 123.45F, responseFormat: BinaryData.FromObjectAsJson("<response_format>"), metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="UpdateAgent(string,string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<Agent> response = client.UpdateAgent("<assistantId>");
]]></code>
This sample shows how to call UpdateAgent with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

ToolResources toolResources = new ToolResources
{
    CodeInterpreter = new CodeInterpreterToolResource
    {
        FileIds = { "<file_ids>" },
        DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
    },
    FileSearch = new FileSearchToolResource
    {
        VectorStoreIds = { "<vector_store_ids>" },
        VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
        {
            default
        }))},
    },
    AzureAISearch = new AzureAISearchResource
    {
        IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
        {
            QueryType = AzureAISearchQueryType.Simple,
            TopK = 1234,
            Filter = "<filter>",
        }},
    },
};
Response<Agent> response = client.UpdateAgent("<assistantId>", model: "<model>", name: "<name>", description: "<description>", instructions: "<instructions>", tools: new ToolDefinition[]
{
    new CodeInterpreterToolDefinition()
}, toolResources: toolResources, temperature: 123.45F, topP: 123.45F, responseFormat: BinaryData.FromObjectAsJson("<response_format>"), metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="UpdateAgentAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateAgentAsync("<assistantId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateAgentAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    model = "<model>",
    name = "<name>",
    description = "<description>",
    instructions = "<instructions>",
    tools = new object[]
    {
        new
        {
            type = "code_interpreter",
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "<file_ids>"
            },
            data_sources = new object[]
            {
                new
                {
                    uri = "<uri>",
                    type = "uri_asset",
                }
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "<vector_store_ids>"
            },
            vector_stores = new object[]
            {
                new
                {
                    name = "<name>",
                    configuration = new
                    {
                        data_sources = new object[]
                        {
                            null
                        },
                    },
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "<index_connection_id>",
                    index_name = "<index_name>",
                    query_type = "simple",
                    top_k = 1234,
                    filter = "<filter>",
                }
            },
        },
    },
    temperature = 123.45F,
    top_p = 123.45F,
    response_format = "<response_format>",
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = await client.UpdateAgentAsync("<assistantId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateAgent(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateAgent("<assistantId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateAgent with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    model = "<model>",
    name = "<name>",
    description = "<description>",
    instructions = "<instructions>",
    tools = new object[]
    {
        new
        {
            type = "code_interpreter",
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "<file_ids>"
            },
            data_sources = new object[]
            {
                new
                {
                    uri = "<uri>",
                    type = "uri_asset",
                }
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "<vector_store_ids>"
            },
            vector_stores = new object[]
            {
                new
                {
                    name = "<name>",
                    configuration = new
                    {
                        data_sources = new object[]
                        {
                            null
                        },
                    },
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "<index_connection_id>",
                    index_name = "<index_name>",
                    query_type = "simple",
                    top_k = 1234,
                    filter = "<filter>",
                }
            },
        },
    },
    temperature = 123.45F,
    top_p = 123.45F,
    response_format = "<response_format>",
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = client.UpdateAgent("<assistantId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateThreadAsync(IEnumerable{ThreadMessageOptions},ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<AgentThread> response = await client.CreateThreadAsync();
]]></code>
This sample shows how to call CreateThreadAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

ToolResources toolResources = new ToolResources
{
    CodeInterpreter = new CodeInterpreterToolResource
    {
        FileIds = { "<file_ids>" },
        DataSources = { default },
    },
    FileSearch = new FileSearchToolResource
    {
        VectorStoreIds = { "<vector_store_ids>" },
        VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
        {
            default
        }))},
    },
    AzureAISearch = new AzureAISearchResource
    {
        IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
        {
            QueryType = AzureAISearchQueryType.Simple,
            TopK = 1234,
            Filter = "<filter>",
        }},
    },
};
Response<AgentThread> response = await client.CreateThreadAsync(messages: new ThreadMessageOptions[]
{
    new ThreadMessageOptions(MessageRole.User, "<content>")
    {
        Attachments = {new MessageAttachment(new BinaryData[]
        {
            BinaryData.FromObjectAsJson(new
            {
                type = "code_interpreter",
            })
        })
        {
            FileId = "<file_id>",
            DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
        }},
        Metadata =
        {
            ["key"] = "<metadata>"
        },
    }
}, toolResources: toolResources, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="CreateThread(IEnumerable{ThreadMessageOptions},ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<AgentThread> response = client.CreateThread();
]]></code>
This sample shows how to call CreateThread with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

ToolResources toolResources = new ToolResources
{
    CodeInterpreter = new CodeInterpreterToolResource
    {
        FileIds = { "<file_ids>" },
        DataSources = { default },
    },
    FileSearch = new FileSearchToolResource
    {
        VectorStoreIds = { "<vector_store_ids>" },
        VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
        {
            default
        }))},
    },
    AzureAISearch = new AzureAISearchResource
    {
        IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
        {
            QueryType = AzureAISearchQueryType.Simple,
            TopK = 1234,
            Filter = "<filter>",
        }},
    },
};
Response<AgentThread> response = client.CreateThread(messages: new ThreadMessageOptions[]
{
    new ThreadMessageOptions(MessageRole.User, "<content>")
    {
        Attachments = {new MessageAttachment(new BinaryData[]
        {
            BinaryData.FromObjectAsJson(new
            {
                type = "code_interpreter",
            })
        })
        {
            FileId = "<file_id>",
            DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
        }},
        Metadata =
        {
            ["key"] = "<metadata>"
        },
    }
}, toolResources: toolResources, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="CreateThreadAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateThreadAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateThreadAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    messages = new object[]
    {
        new
        {
            role = "user",
            content = "<content>",
            attachments = new object[]
            {
                new
                {
                    file_id = "<file_id>",
                    data_source = new
                    {
                        uri = "<uri>",
                        type = "uri_asset",
                    },
                    tools = new object[]
                    {
                        new
                        {
                            type = "code_interpreter",
                        }
                    },
                }
            },
            metadata = new
            {
                key = "<metadata>",
            },
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "<file_ids>"
            },
            data_sources = new object[]
            {
                null
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "<vector_store_ids>"
            },
            vector_stores = new object[]
            {
                new
                {
                    name = "<name>",
                    configuration = new
                    {
                        data_sources = new object[]
                        {
                            null
                        },
                    },
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "<index_connection_id>",
                    index_name = "<index_name>",
                    query_type = "simple",
                    top_k = 1234,
                    filter = "<filter>",
                }
            },
        },
    },
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = await client.CreateThreadAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateThread(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateThread(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateThread with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    messages = new object[]
    {
        new
        {
            role = "user",
            content = "<content>",
            attachments = new object[]
            {
                new
                {
                    file_id = "<file_id>",
                    data_source = new
                    {
                        uri = "<uri>",
                        type = "uri_asset",
                    },
                    tools = new object[]
                    {
                        new
                        {
                            type = "code_interpreter",
                        }
                    },
                }
            },
            metadata = new
            {
                key = "<metadata>",
            },
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "<file_ids>"
            },
            data_sources = new object[]
            {
                null
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "<vector_store_ids>"
            },
            vector_stores = new object[]
            {
                new
                {
                    name = "<name>",
                    configuration = new
                    {
                        data_sources = new object[]
                        {
                            null
                        },
                    },
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "<index_connection_id>",
                    index_name = "<index_name>",
                    query_type = "simple",
                    top_k = 1234,
                    filter = "<filter>",
                }
            },
        },
    },
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = client.CreateThread(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetThreadAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<AgentThread> response = await client.GetThreadAsync("<threadId>");
]]></code>
This sample shows how to call GetThreadAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<AgentThread> response = await client.GetThreadAsync("<threadId>");
]]></code></example>
    </member>
    <member name="GetThread(string,CancellationToken)">
      <example>
This sample shows how to call GetThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<AgentThread> response = client.GetThread("<threadId>");
]]></code>
This sample shows how to call GetThread with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<AgentThread> response = client.GetThread("<threadId>");
]]></code></example>
    </member>
    <member name="GetThreadAsync(string,RequestContext)">
      <example>
This sample shows how to call GetThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetThreadAsync("<threadId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetThreadAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetThreadAsync("<threadId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetThread(string,RequestContext)">
      <example>
This sample shows how to call GetThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetThread("<threadId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetThread with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetThread("<threadId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateThreadAsync(string,ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<AgentThread> response = await client.UpdateThreadAsync("<threadId>");
]]></code>
This sample shows how to call UpdateThreadAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

ToolResources toolResources = new ToolResources
{
    CodeInterpreter = new CodeInterpreterToolResource
    {
        FileIds = { "<file_ids>" },
        DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
    },
    FileSearch = new FileSearchToolResource
    {
        VectorStoreIds = { "<vector_store_ids>" },
        VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
        {
            default
        }))},
    },
    AzureAISearch = new AzureAISearchResource
    {
        IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
        {
            QueryType = AzureAISearchQueryType.Simple,
            TopK = 1234,
            Filter = "<filter>",
        }},
    },
};
Response<AgentThread> response = await client.UpdateThreadAsync("<threadId>", toolResources: toolResources, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="UpdateThread(string,ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<AgentThread> response = client.UpdateThread("<threadId>");
]]></code>
This sample shows how to call UpdateThread with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

ToolResources toolResources = new ToolResources
{
    CodeInterpreter = new CodeInterpreterToolResource
    {
        FileIds = { "<file_ids>" },
        DataSources = { new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset) },
    },
    FileSearch = new FileSearchToolResource
    {
        VectorStoreIds = { "<vector_store_ids>" },
        VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
        {
            default
        }))},
    },
    AzureAISearch = new AzureAISearchResource
    {
        IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
        {
            QueryType = AzureAISearchQueryType.Simple,
            TopK = 1234,
            Filter = "<filter>",
        }},
    },
};
Response<AgentThread> response = client.UpdateThread("<threadId>", toolResources: toolResources, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="UpdateThreadAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateThreadAsync("<threadId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateThreadAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "<file_ids>"
            },
            data_sources = new object[]
            {
                new
                {
                    uri = "<uri>",
                    type = "uri_asset",
                }
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "<vector_store_ids>"
            },
            vector_stores = new object[]
            {
                new
                {
                    name = "<name>",
                    configuration = new
                    {
                        data_sources = new object[]
                        {
                            null
                        },
                    },
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "<index_connection_id>",
                    index_name = "<index_name>",
                    query_type = "simple",
                    top_k = 1234,
                    filter = "<filter>",
                }
            },
        },
    },
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = await client.UpdateThreadAsync("<threadId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateThread(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateThread("<threadId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateThread with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "<file_ids>"
            },
            data_sources = new object[]
            {
                new
                {
                    uri = "<uri>",
                    type = "uri_asset",
                }
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "<vector_store_ids>"
            },
            vector_stores = new object[]
            {
                new
                {
                    name = "<name>",
                    configuration = new
                    {
                        data_sources = new object[]
                        {
                            null
                        },
                    },
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "<index_connection_id>",
                    index_name = "<index_name>",
                    query_type = "simple",
                    top_k = 1234,
                    filter = "<filter>",
                }
            },
        },
    },
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = client.UpdateThread("<threadId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_stores")[0].GetProperty("configuration").GetProperty("data_sources")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateMessageAsync(string,MessageRole,string,IEnumerable{MessageAttachment},IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = await client.CreateMessageAsync("<threadId>", MessageRole.User, "<content>");
]]></code>
This sample shows how to call CreateMessageAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = await client.CreateMessageAsync("<threadId>", MessageRole.User, "<content>", attachments: new MessageAttachment[]
{
    new MessageAttachment(new BinaryData[]
    {
        BinaryData.FromObjectAsJson(new
        {
            type = "code_interpreter",
        })
    })
    {
        FileId = "<file_id>",
        DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
    }
}, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="CreateMessage(string,MessageRole,string,IEnumerable{MessageAttachment},IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = client.CreateMessage("<threadId>", MessageRole.User, "<content>");
]]></code>
This sample shows how to call CreateMessage with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = client.CreateMessage("<threadId>", MessageRole.User, "<content>", attachments: new MessageAttachment[]
{
    new MessageAttachment(new BinaryData[]
    {
        BinaryData.FromObjectAsJson(new
        {
            type = "code_interpreter",
        })
    })
    {
        FileId = "<file_id>",
        DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
    }
}, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="CreateMessageAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "<content>",
});
Response response = await client.CreateMessageAsync("<threadId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateMessageAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "<content>",
    attachments = new object[]
    {
        new
        {
            file_id = "<file_id>",
            data_source = new
            {
                uri = "<uri>",
                type = "uri_asset",
            },
            tools = new object[]
            {
                new
                {
                    type = "code_interpreter",
                }
            },
        }
    },
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = await client.CreateMessageAsync("<threadId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateMessage(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "<content>",
});
Response response = client.CreateMessage("<threadId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateMessage with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "<content>",
    attachments = new object[]
    {
        new
        {
            file_id = "<file_id>",
            data_source = new
            {
                uri = "<uri>",
                type = "uri_asset",
            },
            tools = new object[]
            {
                new
                {
                    type = "code_interpreter",
                }
            },
        }
    },
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = client.CreateMessage("<threadId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetMessageAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = await client.GetMessageAsync("<threadId>", "<messageId>");
]]></code>
This sample shows how to call GetMessageAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = await client.GetMessageAsync("<threadId>", "<messageId>");
]]></code></example>
    </member>
    <member name="GetMessage(string,string,CancellationToken)">
      <example>
This sample shows how to call GetMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = client.GetMessage("<threadId>", "<messageId>");
]]></code>
This sample shows how to call GetMessage with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = client.GetMessage("<threadId>", "<messageId>");
]]></code></example>
    </member>
    <member name="GetMessageAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetMessageAsync("<threadId>", "<messageId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetMessageAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetMessageAsync("<threadId>", "<messageId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetMessage(string,string,RequestContext)">
      <example>
This sample shows how to call GetMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetMessage("<threadId>", "<messageId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetMessage with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetMessage("<threadId>", "<messageId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateMessageAsync(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = await client.UpdateMessageAsync("<threadId>", "<messageId>");
]]></code>
This sample shows how to call UpdateMessageAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = await client.UpdateMessageAsync("<threadId>", "<messageId>", metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="UpdateMessage(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = client.UpdateMessage("<threadId>", "<messageId>");
]]></code>
This sample shows how to call UpdateMessage with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadMessage> response = client.UpdateMessage("<threadId>", "<messageId>", metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="UpdateMessageAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateMessageAsync("<threadId>", "<messageId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateMessageAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = await client.UpdateMessageAsync("<threadId>", "<messageId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateMessage(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateMessage("<threadId>", "<messageId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateMessage with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = client.UpdateMessage("<threadId>", "<messageId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("data_source").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateRunAsync(string,string,string,string,string,IEnumerable{ThreadMessageOptions},IEnumerable{ToolDefinition},bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,bool?,IReadOnlyDictionary{string,string},IEnumerable{RunAdditionalFieldList},CancellationToken)">
      <example>
This sample shows how to call CreateRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = await client.CreateRunAsync("<threadId>", "<assistant_id>");
]]></code>
This sample shows how to call CreateRunAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

TruncationObject truncationStrategy = new TruncationObject(TruncationStrategy.Auto)
{
    LastMessages = 1234,
};
Response<ThreadRun> response = await client.CreateRunAsync("<threadId>", "<assistant_id>", overrideModelName: "<model>", overrideInstructions: "<instructions>", additionalInstructions: "<additional_instructions>", additionalMessages: new ThreadMessageOptions[]
{
    new ThreadMessageOptions(MessageRole.User, "<content>")
    {
        Attachments = {new MessageAttachment(new BinaryData[]
        {
            BinaryData.FromObjectAsJson(new
            {
                type = "code_interpreter",
            })
        })
        {
            FileId = "<file_id>",
            DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
        }},
        Metadata =
        {
            ["key"] = "<metadata>"
        },
    }
}, overrideTools: new ToolDefinition[]
{
    new CodeInterpreterToolDefinition()
}, stream: true, temperature: 123.45F, topP: 123.45F, maxPromptTokens: 1234, maxCompletionTokens: 1234, truncationStrategy: truncationStrategy, toolChoice: BinaryData.FromObjectAsJson("<tool_choice>"), responseFormat: BinaryData.FromObjectAsJson("<response_format>"), parallelToolCalls: true, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
}, include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });
]]></code></example>
    </member>
    <member name="CreateRun(string,string,string,string,string,IEnumerable{ThreadMessageOptions},IEnumerable{ToolDefinition},bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,bool?,IReadOnlyDictionary{string,string},IEnumerable{RunAdditionalFieldList},CancellationToken)">
      <example>
This sample shows how to call CreateRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = client.CreateRun("<threadId>", "<assistant_id>");
]]></code>
This sample shows how to call CreateRun with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

TruncationObject truncationStrategy = new TruncationObject(TruncationStrategy.Auto)
{
    LastMessages = 1234,
};
Response<ThreadRun> response = client.CreateRun("<threadId>", "<assistant_id>", overrideModelName: "<model>", overrideInstructions: "<instructions>", additionalInstructions: "<additional_instructions>", additionalMessages: new ThreadMessageOptions[]
{
    new ThreadMessageOptions(MessageRole.User, "<content>")
    {
        Attachments = {new MessageAttachment(new BinaryData[]
        {
            BinaryData.FromObjectAsJson(new
            {
                type = "code_interpreter",
            })
        })
        {
            FileId = "<file_id>",
            DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
        }},
        Metadata =
        {
            ["key"] = "<metadata>"
        },
    }
}, overrideTools: new ToolDefinition[]
{
    new CodeInterpreterToolDefinition()
}, stream: true, temperature: 123.45F, topP: 123.45F, maxPromptTokens: 1234, maxCompletionTokens: 1234, truncationStrategy: truncationStrategy, toolChoice: BinaryData.FromObjectAsJson("<tool_choice>"), responseFormat: BinaryData.FromObjectAsJson("<response_format>"), parallelToolCalls: true, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
}, include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });
]]></code></example>
    </member>
    <member name="CreateRunAsync(string,RequestContent,IEnumerable{RunAdditionalFieldList},RequestContext)">
      <example>
This sample shows how to call CreateRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "<assistant_id>",
});
Response response = await client.CreateRunAsync("<threadId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call CreateRunAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "<assistant_id>",
    model = "<model>",
    instructions = "<instructions>",
    additional_instructions = "<additional_instructions>",
    additional_messages = new object[]
    {
        new
        {
            role = "user",
            content = "<content>",
            attachments = new object[]
            {
                new
                {
                    file_id = "<file_id>",
                    data_source = new
                    {
                        uri = "<uri>",
                        type = "uri_asset",
                    },
                    tools = new object[]
                    {
                        new
                        {
                            type = "code_interpreter",
                        }
                    },
                }
            },
            metadata = new
            {
                key = "<metadata>",
            },
        }
    },
    tools = new object[]
    {
        new
        {
            type = "code_interpreter",
        }
    },
    stream = true,
    temperature = 123.45F,
    top_p = 123.45F,
    max_prompt_tokens = 1234,
    max_completion_tokens = 1234,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 1234,
    },
    tool_choice = "<tool_choice>",
    response_format = "<response_format>",
    parallel_tool_calls = true,
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = await client.CreateRunAsync("<threadId>", content, include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="CreateRun(string,RequestContent,IEnumerable{RunAdditionalFieldList},RequestContext)">
      <example>
This sample shows how to call CreateRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "<assistant_id>",
});
Response response = client.CreateRun("<threadId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call CreateRun with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "<assistant_id>",
    model = "<model>",
    instructions = "<instructions>",
    additional_instructions = "<additional_instructions>",
    additional_messages = new object[]
    {
        new
        {
            role = "user",
            content = "<content>",
            attachments = new object[]
            {
                new
                {
                    file_id = "<file_id>",
                    data_source = new
                    {
                        uri = "<uri>",
                        type = "uri_asset",
                    },
                    tools = new object[]
                    {
                        new
                        {
                            type = "code_interpreter",
                        }
                    },
                }
            },
            metadata = new
            {
                key = "<metadata>",
            },
        }
    },
    tools = new object[]
    {
        new
        {
            type = "code_interpreter",
        }
    },
    stream = true,
    temperature = 123.45F,
    top_p = 123.45F,
    max_prompt_tokens = 1234,
    max_completion_tokens = 1234,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 1234,
    },
    tool_choice = "<tool_choice>",
    response_format = "<response_format>",
    parallel_tool_calls = true,
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = client.CreateRun("<threadId>", content, include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="GetRunAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = await client.GetRunAsync("<threadId>", "<runId>");
]]></code>
This sample shows how to call GetRunAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = await client.GetRunAsync("<threadId>", "<runId>");
]]></code></example>
    </member>
    <member name="GetRun(string,string,CancellationToken)">
      <example>
This sample shows how to call GetRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = client.GetRun("<threadId>", "<runId>");
]]></code>
This sample shows how to call GetRun with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = client.GetRun("<threadId>", "<runId>");
]]></code></example>
    </member>
    <member name="GetRunAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetRunAsync("<threadId>", "<runId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call GetRunAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetRunAsync("<threadId>", "<runId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="GetRun(string,string,RequestContext)">
      <example>
This sample shows how to call GetRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetRun("<threadId>", "<runId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call GetRun with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetRun("<threadId>", "<runId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="UpdateRunAsync(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = await client.UpdateRunAsync("<threadId>", "<runId>");
]]></code>
This sample shows how to call UpdateRunAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = await client.UpdateRunAsync("<threadId>", "<runId>", metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="UpdateRun(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = client.UpdateRun("<threadId>", "<runId>");
]]></code>
This sample shows how to call UpdateRun with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = client.UpdateRun("<threadId>", "<runId>", metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="UpdateRunAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateRunAsync("<threadId>", "<runId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call UpdateRunAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = await client.UpdateRunAsync("<threadId>", "<runId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="UpdateRun(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateRun("<threadId>", "<runId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call UpdateRun with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = client.UpdateRun("<threadId>", "<runId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRunAsync(string,string,IEnumerable{ToolOutput},bool?,CancellationToken)">
      <example>
This sample shows how to call SubmitToolOutputsToRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = await client.SubmitToolOutputsToRunAsync("<threadId>", "<runId>", new ToolOutput[]
{
    new ToolOutput()
});
]]></code>
This sample shows how to call SubmitToolOutputsToRunAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = await client.SubmitToolOutputsToRunAsync("<threadId>", "<runId>", new ToolOutput[]
{
    new ToolOutput
    {
        ToolCallId = "<tool_call_id>",
        Output = "<output>",
    }
}, stream: true);
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRun(string,string,IEnumerable{ToolOutput},bool?,CancellationToken)">
      <example>
This sample shows how to call SubmitToolOutputsToRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = client.SubmitToolOutputsToRun("<threadId>", "<runId>", new ToolOutput[]
{
    new ToolOutput()
});
]]></code>
This sample shows how to call SubmitToolOutputsToRun with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = client.SubmitToolOutputsToRun("<threadId>", "<runId>", new ToolOutput[]
{
    new ToolOutput
    {
        ToolCallId = "<tool_call_id>",
        Output = "<output>",
    }
}, stream: true);
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRunAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SubmitToolOutputsToRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    tool_outputs = new object[]
    {
        new object()
    },
});
Response response = await client.SubmitToolOutputsToRunAsync("<threadId>", "<runId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call SubmitToolOutputsToRunAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    tool_outputs = new object[]
    {
        new
        {
            tool_call_id = "<tool_call_id>",
            output = "<output>",
        }
    },
    stream = true,
});
Response response = await client.SubmitToolOutputsToRunAsync("<threadId>", "<runId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRun(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SubmitToolOutputsToRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    tool_outputs = new object[]
    {
        new object()
    },
});
Response response = client.SubmitToolOutputsToRun("<threadId>", "<runId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call SubmitToolOutputsToRun with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    tool_outputs = new object[]
    {
        new
        {
            tool_call_id = "<tool_call_id>",
            output = "<output>",
        }
    },
    stream = true,
});
Response response = client.SubmitToolOutputsToRun("<threadId>", "<runId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="CancelRunAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = await client.CancelRunAsync("<threadId>", "<runId>");
]]></code>
This sample shows how to call CancelRunAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = await client.CancelRunAsync("<threadId>", "<runId>");
]]></code></example>
    </member>
    <member name="CancelRun(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = client.CancelRun("<threadId>", "<runId>");
]]></code>
This sample shows how to call CancelRun with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = client.CancelRun("<threadId>", "<runId>");
]]></code></example>
    </member>
    <member name="CancelRunAsync(string,string,RequestContext)">
      <example>
This sample shows how to call CancelRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.CancelRunAsync("<threadId>", "<runId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call CancelRunAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.CancelRunAsync("<threadId>", "<runId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="CancelRun(string,string,RequestContext)">
      <example>
This sample shows how to call CancelRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.CancelRun("<threadId>", "<runId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call CancelRun with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.CancelRun("<threadId>", "<runId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="CreateThreadAndRunAsync(string,AgentThreadCreationOptions,string,string,IEnumerable{ToolDefinition},UpdateToolResourcesOptions,bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,bool?,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThreadAndRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = await client.CreateThreadAndRunAsync("<assistant_id>");
]]></code>
This sample shows how to call CreateThreadAndRunAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

AgentThreadCreationOptions thread = new AgentThreadCreationOptions
{
    Messages = {new ThreadMessageOptions(MessageRole.User, "<content>")
    {
        Attachments = {new MessageAttachment(new BinaryData[]
        {
            BinaryData.FromObjectAsJson(new
            {
                type = "code_interpreter",
            })
        })
        {
            FileId = "<file_id>",
            DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
        }},
        Metadata =
        {
            ["key"] = "<metadata>"
        },
    }},
    ToolResources = new ToolResources
    {
        CodeInterpreter = new CodeInterpreterToolResource
        {
            FileIds = { "<file_ids>" },
            DataSources = { default },
        },
        FileSearch = new FileSearchToolResource
        {
            VectorStoreIds = { "<vector_store_ids>" },
            VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
            {
                default
            }))},
        },
        AzureAISearch = new AzureAISearchResource
        {
            IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
            {
                QueryType = AzureAISearchQueryType.Simple,
                TopK = 1234,
                Filter = "<filter>",
            }},
        },
    },
    Metadata =
    {
        ["key"] = "<metadata>"
    },
};
UpdateToolResourcesOptions toolResources = new UpdateToolResourcesOptions
{
    CodeInterpreter = new UpdateCodeInterpreterToolResourceOptions
    {
        FileIds = { "<file_ids>" },
    },
    FileSearch = new UpdateFileSearchToolResourceOptions
    {
        VectorStoreIds = { "<vector_store_ids>" },
    },
    AzureAISearch = default,
};
TruncationObject truncationStrategy = new TruncationObject(TruncationStrategy.Auto)
{
    LastMessages = 1234,
};
Response<ThreadRun> response = await client.CreateThreadAndRunAsync("<assistant_id>", thread: thread, overrideModelName: "<model>", overrideInstructions: "<instructions>", overrideTools: new ToolDefinition[]
{
    new CodeInterpreterToolDefinition()
}, toolResources: toolResources, stream: true, temperature: 123.45F, topP: 123.45F, maxPromptTokens: 1234, maxCompletionTokens: 1234, truncationStrategy: truncationStrategy, toolChoice: BinaryData.FromObjectAsJson("<tool_choice>"), responseFormat: BinaryData.FromObjectAsJson("<response_format>"), parallelToolCalls: true, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="CreateThreadAndRun(string,AgentThreadCreationOptions,string,string,IEnumerable{ToolDefinition},UpdateToolResourcesOptions,bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,bool?,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThreadAndRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<ThreadRun> response = client.CreateThreadAndRun("<assistant_id>");
]]></code>
This sample shows how to call CreateThreadAndRun with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

AgentThreadCreationOptions thread = new AgentThreadCreationOptions
{
    Messages = {new ThreadMessageOptions(MessageRole.User, "<content>")
    {
        Attachments = {new MessageAttachment(new BinaryData[]
        {
            BinaryData.FromObjectAsJson(new
            {
                type = "code_interpreter",
            })
        })
        {
            FileId = "<file_id>",
            DataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset),
        }},
        Metadata =
        {
            ["key"] = "<metadata>"
        },
    }},
    ToolResources = new ToolResources
    {
        CodeInterpreter = new CodeInterpreterToolResource
        {
            FileIds = { "<file_ids>" },
            DataSources = { default },
        },
        FileSearch = new FileSearchToolResource
        {
            VectorStoreIds = { "<vector_store_ids>" },
            VectorStores = {new VectorStoreConfigurations("<name>", new VectorStoreConfiguration(new VectorStoreDataSource[]
            {
                default
            }))},
        },
        AzureAISearch = new AzureAISearchResource
        {
            IndexList = {new AISearchIndexResource("<index_connection_id>", "<index_name>")
            {
                QueryType = AzureAISearchQueryType.Simple,
                TopK = 1234,
                Filter = "<filter>",
            }},
        },
    },
    Metadata =
    {
        ["key"] = "<metadata>"
    },
};
UpdateToolResourcesOptions toolResources = new UpdateToolResourcesOptions
{
    CodeInterpreter = new UpdateCodeInterpreterToolResourceOptions
    {
        FileIds = { "<file_ids>" },
    },
    FileSearch = new UpdateFileSearchToolResourceOptions
    {
        VectorStoreIds = { "<vector_store_ids>" },
    },
    AzureAISearch = default,
};
TruncationObject truncationStrategy = new TruncationObject(TruncationStrategy.Auto)
{
    LastMessages = 1234,
};
Response<ThreadRun> response = client.CreateThreadAndRun("<assistant_id>", thread: thread, overrideModelName: "<model>", overrideInstructions: "<instructions>", overrideTools: new ToolDefinition[]
{
    new CodeInterpreterToolDefinition()
}, toolResources: toolResources, stream: true, temperature: 123.45F, topP: 123.45F, maxPromptTokens: 1234, maxCompletionTokens: 1234, truncationStrategy: truncationStrategy, toolChoice: BinaryData.FromObjectAsJson("<tool_choice>"), responseFormat: BinaryData.FromObjectAsJson("<response_format>"), parallelToolCalls: true, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="CreateThreadAndRunAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThreadAndRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "<assistant_id>",
});
Response response = await client.CreateThreadAndRunAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call CreateThreadAndRunAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "<assistant_id>",
    thread = new
    {
        messages = new object[]
        {
            new
            {
                role = "user",
                content = "<content>",
                attachments = new object[]
                {
                    new
                    {
                        file_id = "<file_id>",
                        data_source = new
                        {
                            uri = "<uri>",
                            type = "uri_asset",
                        },
                        tools = new object[]
                        {
                            new
                            {
                                type = "code_interpreter",
                            }
                        },
                    }
                },
                metadata = new
                {
                    key = "<metadata>",
                },
            }
        },
        tool_resources = new
        {
            code_interpreter = new
            {
                file_ids = new object[]
                {
                    "<file_ids>"
                },
                data_sources = new object[]
                {
                    null
                },
            },
            file_search = new
            {
                vector_store_ids = new object[]
                {
                    "<vector_store_ids>"
                },
                vector_stores = new object[]
                {
                    new
                    {
                        name = "<name>",
                        configuration = new
                        {
                            data_sources = new object[]
                            {
                                null
                            },
                        },
                    }
                },
            },
            azure_ai_search = new
            {
                indexes = new object[]
                {
                    new
                    {
                        index_connection_id = "<index_connection_id>",
                        index_name = "<index_name>",
                        query_type = "simple",
                        top_k = 1234,
                        filter = "<filter>",
                    }
                },
            },
        },
        metadata = new
        {
            key = "<metadata>",
        },
    },
    model = "<model>",
    instructions = "<instructions>",
    tools = new object[]
    {
        new
        {
            type = "code_interpreter",
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "<file_ids>"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "<vector_store_ids>"
            },
        },
    },
    stream = true,
    temperature = 123.45F,
    top_p = 123.45F,
    max_prompt_tokens = 1234,
    max_completion_tokens = 1234,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 1234,
    },
    tool_choice = "<tool_choice>",
    response_format = "<response_format>",
    parallel_tool_calls = true,
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = await client.CreateThreadAndRunAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="CreateThreadAndRun(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThreadAndRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "<assistant_id>",
});
Response response = client.CreateThreadAndRun(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code>
This sample shows how to call CreateThreadAndRun with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "<assistant_id>",
    thread = new
    {
        messages = new object[]
        {
            new
            {
                role = "user",
                content = "<content>",
                attachments = new object[]
                {
                    new
                    {
                        file_id = "<file_id>",
                        data_source = new
                        {
                            uri = "<uri>",
                            type = "uri_asset",
                        },
                        tools = new object[]
                        {
                            new
                            {
                                type = "code_interpreter",
                            }
                        },
                    }
                },
                metadata = new
                {
                    key = "<metadata>",
                },
            }
        },
        tool_resources = new
        {
            code_interpreter = new
            {
                file_ids = new object[]
                {
                    "<file_ids>"
                },
                data_sources = new object[]
                {
                    null
                },
            },
            file_search = new
            {
                vector_store_ids = new object[]
                {
                    "<vector_store_ids>"
                },
                vector_stores = new object[]
                {
                    new
                    {
                        name = "<name>",
                        configuration = new
                        {
                            data_sources = new object[]
                            {
                                null
                            },
                        },
                    }
                },
            },
            azure_ai_search = new
            {
                indexes = new object[]
                {
                    new
                    {
                        index_connection_id = "<index_connection_id>",
                        index_name = "<index_name>",
                        query_type = "simple",
                        top_k = 1234,
                        filter = "<filter>",
                    }
                },
            },
        },
        metadata = new
        {
            key = "<metadata>",
        },
    },
    model = "<model>",
    instructions = "<instructions>",
    tools = new object[]
    {
        new
        {
            type = "code_interpreter",
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "<file_ids>"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "<vector_store_ids>"
            },
        },
    },
    stream = true,
    temperature = 123.45F,
    top_p = 123.45F,
    max_prompt_tokens = 1234,
    max_completion_tokens = 1234,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 1234,
    },
    tool_choice = "<tool_choice>",
    response_format = "<response_format>",
    parallel_tool_calls = true,
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = client.CreateThreadAndRun(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("required_action").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("last_messages").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("code_interpreter").GetProperty("file_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("file_search").GetProperty("vector_store_ids")[0].ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_connection_id").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("index_name").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("query_type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("top_k").ToString());
Console.WriteLine(result.GetProperty("tool_resources").GetProperty("azure_ai_search").GetProperty("indexes")[0].GetProperty("filter").ToString());
Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
]]></code></example>
    </member>
    <member name="GetRunStepAsync(string,string,string,IEnumerable{RunAdditionalFieldList},CancellationToken)">
      <example>
This sample shows how to call GetRunStepAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<RunStep> response = await client.GetRunStepAsync("<threadId>", "<runId>", "<stepId>");
]]></code>
This sample shows how to call GetRunStepAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<RunStep> response = await client.GetRunStepAsync("<threadId>", "<runId>", "<stepId>", include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });
]]></code></example>
    </member>
    <member name="GetRunStep(string,string,string,IEnumerable{RunAdditionalFieldList},CancellationToken)">
      <example>
This sample shows how to call GetRunStep.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<RunStep> response = client.GetRunStep("<threadId>", "<runId>", "<stepId>");
]]></code>
This sample shows how to call GetRunStep with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<RunStep> response = client.GetRunStep("<threadId>", "<runId>", "<stepId>", include: new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents });
]]></code></example>
    </member>
    <member name="GetRunStepAsync(string,string,string,IEnumerable{RunAdditionalFieldList},RequestContext)">
      <example>
This sample shows how to call GetRunStepAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetRunStepAsync("<threadId>", "<runId>", "<stepId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetRunStepAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetRunStepAsync("<threadId>", "<runId>", "<stepId>", new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents }, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetRunStep(string,string,string,IEnumerable{RunAdditionalFieldList},RequestContext)">
      <example>
This sample shows how to call GetRunStep and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetRunStep("<threadId>", "<runId>", "<stepId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetRunStep with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetRunStep("<threadId>", "<runId>", "<stepId>", new RunAdditionalFieldList[] { RunAdditionalFieldList.FileSearchContents }, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UploadFileAsync(UploadFileRequest,CancellationToken)">
      <example>
This sample shows how to call UploadFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

UploadFileRequest body = new UploadFileRequest(new File(BinaryData.FromObjectAsJson(new object())), OpenAIFilePurpose.FineTune);
Response<OpenAIFile> response = await client.UploadFileAsync(body);
]]></code>
This sample shows how to call UploadFileAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

UploadFileRequest body = new UploadFileRequest(new File(BinaryData.FromObjectAsJson(new object()))
{
    ContentType = "<contentType>",
    Filename = "<filename>",
}, OpenAIFilePurpose.FineTune)
{
    Filename = "<filename>",
};
Response<OpenAIFile> response = await client.UploadFileAsync(body);
]]></code></example>
    </member>
    <member name="UploadFile(UploadFileRequest,CancellationToken)">
      <example>
This sample shows how to call UploadFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

UploadFileRequest body = new UploadFileRequest(new File(BinaryData.FromObjectAsJson(new object())), OpenAIFilePurpose.FineTune);
Response<OpenAIFile> response = client.UploadFile(body);
]]></code>
This sample shows how to call UploadFile with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

UploadFileRequest body = new UploadFileRequest(new File(BinaryData.FromObjectAsJson(new object()))
{
    ContentType = "<contentType>",
    Filename = "<filename>",
}, OpenAIFilePurpose.FineTune)
{
    Filename = "<filename>",
};
Response<OpenAIFile> response = client.UploadFile(body);
]]></code></example>
    </member>
    <member name="UploadFileAsync(RequestContent,string,RequestContext)">
      <example>
This sample shows how to call UploadFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    file = new
    {
        contents = new object(),
    },
    purpose = "fine-tune",
});
Response response = await client.UploadFileAsync(content, "multipart/form-data");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code>
This sample shows how to call UploadFileAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    file = new
    {
        contentType = "<contentType>",
        filename = "<filename>",
        contents = new object(),
    },
    purpose = "fine-tune",
    filename = "<filename>",
});
Response response = await client.UploadFileAsync(content, "multipart/form-data");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("status_details").ToString());
]]></code></example>
    </member>
    <member name="UploadFile(RequestContent,string,RequestContext)">
      <example>
This sample shows how to call UploadFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    file = new
    {
        contents = new object(),
    },
    purpose = "fine-tune",
});
Response response = client.UploadFile(content, "multipart/form-data");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code>
This sample shows how to call UploadFile with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    file = new
    {
        contentType = "<contentType>",
        filename = "<filename>",
        contents = new object(),
    },
    purpose = "fine-tune",
    filename = "<filename>",
});
Response response = client.UploadFile(content, "multipart/form-data");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("status_details").ToString());
]]></code></example>
    </member>
    <member name="GetFileAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIFile> response = await client.GetFileAsync("<fileId>");
]]></code>
This sample shows how to call GetFileAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIFile> response = await client.GetFileAsync("<fileId>");
]]></code></example>
    </member>
    <member name="GetFile(string,CancellationToken)">
      <example>
This sample shows how to call GetFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIFile> response = client.GetFile("<fileId>");
]]></code>
This sample shows how to call GetFile with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIFile> response = client.GetFile("<fileId>");
]]></code></example>
    </member>
    <member name="GetFileAsync(string,RequestContext)">
      <example>
This sample shows how to call GetFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetFileAsync("<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code>
This sample shows how to call GetFileAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetFileAsync("<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("status_details").ToString());
]]></code></example>
    </member>
    <member name="GetFile(string,RequestContext)">
      <example>
This sample shows how to call GetFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetFile("<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code>
This sample shows how to call GetFile with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetFile("<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("status_details").ToString());
]]></code></example>
    </member>
    <member name="GetFileContentAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetFileContentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<BinaryData> response = await client.GetFileContentAsync("<fileId>");
]]></code>
This sample shows how to call GetFileContentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<BinaryData> response = await client.GetFileContentAsync("<fileId>");
]]></code></example>
    </member>
    <member name="GetFileContent(string,CancellationToken)">
      <example>
This sample shows how to call GetFileContent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<BinaryData> response = client.GetFileContent("<fileId>");
]]></code>
This sample shows how to call GetFileContent with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<BinaryData> response = client.GetFileContent("<fileId>");
]]></code></example>
    </member>
    <member name="GetFileContentAsync(string,RequestContext)">
      <example>
This sample shows how to call GetFileContentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetFileContentAsync("<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetFileContentAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetFileContentAsync("<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetFileContent(string,RequestContext)">
      <example>
This sample shows how to call GetFileContent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetFileContent("<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetFileContent with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetFileContent("<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoresAsync(int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoresAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync();
]]></code>
This sample shows how to call GetVectorStoresAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync(limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
]]></code></example>
    </member>
    <member name="GetVectorStores(int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStores.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores();
]]></code>
This sample shows how to call GetVectorStores with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores(limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
]]></code></example>
    </member>
    <member name="GetVectorStoresAsync(int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoresAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoresAsync(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoresAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoresAsync(1234, "asc", "<after>", "<before>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_after").GetProperty("anchor").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_after").GetProperty("days").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStores(int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStores and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStores(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStores with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStores(1234, "asc", "<after>", "<before>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_after").GetProperty("anchor").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_after").GetProperty("days").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreAsync(IEnumerable{string},string,VectorStoreConfiguration,VectorStoreExpirationPolicy,VectorStoreChunkingStrategyRequest,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStore> response = await client.CreateVectorStoreAsync();
]]></code>
This sample shows how to call CreateVectorStoreAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

VectorStoreConfiguration storeConfiguration = new VectorStoreConfiguration(new VectorStoreDataSource[]
{
    new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset)
});
VectorStoreExpirationPolicy expiresAfter = new VectorStoreExpirationPolicy(VectorStoreExpirationPolicyAnchor.LastActiveAt, 1234);
VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
Response<VectorStore> response = await client.CreateVectorStoreAsync(fileIds: new string[] { "<file_ids>" }, name: "<name>", storeConfiguration: storeConfiguration, expiresAfter: expiresAfter, chunkingStrategy: chunkingStrategy, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="CreateVectorStore(IEnumerable{string},string,VectorStoreConfiguration,VectorStoreExpirationPolicy,VectorStoreChunkingStrategyRequest,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStore> response = client.CreateVectorStore();
]]></code>
This sample shows how to call CreateVectorStore with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

VectorStoreConfiguration storeConfiguration = new VectorStoreConfiguration(new VectorStoreDataSource[]
{
    new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset)
});
VectorStoreExpirationPolicy expiresAfter = new VectorStoreExpirationPolicy(VectorStoreExpirationPolicyAnchor.LastActiveAt, 1234);
VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
Response<VectorStore> response = client.CreateVectorStore(fileIds: new string[] { "<file_ids>" }, name: "<name>", storeConfiguration: storeConfiguration, expiresAfter: expiresAfter, chunkingStrategy: chunkingStrategy, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="CreateVectorStoreAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateVectorStoreAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateVectorStoreAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "<file_ids>"
    },
    name = "<name>",
    configuration = new
    {
        data_sources = new object[]
        {
            new
            {
                uri = "<uri>",
                type = "uri_asset",
            }
        },
    },
    expires_after = new
    {
        anchor = "last_active_at",
        days = 1234,
    },
    chunking_strategy = new
    {
        type = "auto",
    },
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = await client.CreateVectorStoreAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStore(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateVectorStore(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateVectorStore with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "<file_ids>"
    },
    name = "<name>",
    configuration = new
    {
        data_sources = new object[]
        {
            new
            {
                uri = "<uri>",
                type = "uri_asset",
            }
        },
    },
    expires_after = new
    {
        anchor = "last_active_at",
        days = 1234,
    },
    chunking_strategy = new
    {
        type = "auto",
    },
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = client.CreateVectorStore(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStore> response = await client.GetVectorStoreAsync("<vectorStoreId>");
]]></code>
This sample shows how to call GetVectorStoreAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStore> response = await client.GetVectorStoreAsync("<vectorStoreId>");
]]></code></example>
    </member>
    <member name="GetVectorStore(string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStore> response = client.GetVectorStore("<vectorStoreId>");
]]></code>
This sample shows how to call GetVectorStore with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStore> response = client.GetVectorStore("<vectorStoreId>");
]]></code></example>
    </member>
    <member name="GetVectorStoreAsync(string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoreAsync("<vectorStoreId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetVectorStoreAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoreAsync("<vectorStoreId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStore(string,RequestContext)">
      <example>
This sample shows how to call GetVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStore("<vectorStoreId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetVectorStore with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStore("<vectorStoreId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="ModifyVectorStoreAsync(string,string,VectorStoreExpirationPolicy,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call ModifyVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStore> response = await client.ModifyVectorStoreAsync("<vectorStoreId>");
]]></code>
This sample shows how to call ModifyVectorStoreAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

VectorStoreExpirationPolicy expiresAfter = new VectorStoreExpirationPolicy(VectorStoreExpirationPolicyAnchor.LastActiveAt, 1234);
Response<VectorStore> response = await client.ModifyVectorStoreAsync("<vectorStoreId>", name: "<name>", expiresAfter: expiresAfter, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="ModifyVectorStore(string,string,VectorStoreExpirationPolicy,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call ModifyVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStore> response = client.ModifyVectorStore("<vectorStoreId>");
]]></code>
This sample shows how to call ModifyVectorStore with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

VectorStoreExpirationPolicy expiresAfter = new VectorStoreExpirationPolicy(VectorStoreExpirationPolicyAnchor.LastActiveAt, 1234);
Response<VectorStore> response = client.ModifyVectorStore("<vectorStoreId>", name: "<name>", expiresAfter: expiresAfter, metadata: new Dictionary<string, string>
{
    ["key"] = "<metadata>"
});
]]></code></example>
    </member>
    <member name="ModifyVectorStoreAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call ModifyVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.ModifyVectorStoreAsync("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call ModifyVectorStoreAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    expires_after = new
    {
        anchor = "last_active_at",
        days = 1234,
    },
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = await client.ModifyVectorStoreAsync("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="ModifyVectorStore(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call ModifyVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.ModifyVectorStore("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call ModifyVectorStore with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    expires_after = new
    {
        anchor = "last_active_at",
        days = 1234,
    },
    metadata = new
    {
        key = "<metadata>",
    },
});
Response response = client.ModifyVectorStore("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("anchor").ToString());
Console.WriteLine(result.GetProperty("expires_after").GetProperty("days").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStoreAsync(string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("<vectorStoreId>");
]]></code>
This sample shows how to call DeleteVectorStoreAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("<vectorStoreId>");
]]></code></example>
    </member>
    <member name="DeleteVectorStore(string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("<vectorStoreId>");
]]></code>
This sample shows how to call DeleteVectorStore with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("<vectorStoreId>");
]]></code></example>
    </member>
    <member name="DeleteVectorStoreAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.DeleteVectorStoreAsync("<vectorStoreId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStoreAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.DeleteVectorStoreAsync("<vectorStoreId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStore(string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.DeleteVectorStore("<vectorStoreId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStore with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.DeleteVectorStore("<vectorStoreId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFilesAsync(string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("<vectorStoreId>");
]]></code>
This sample shows how to call GetVectorStoreFilesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("<vectorStoreId>", filter: VectorStoreFileStatusFilter.InProgress, limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
]]></code></example>
    </member>
    <member name="GetVectorStoreFiles(string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("<vectorStoreId>");
]]></code>
This sample shows how to call GetVectorStoreFiles with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("<vectorStoreId>", filter: VectorStoreFileStatusFilter.InProgress, limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
]]></code></example>
    </member>
    <member name="GetVectorStoreFilesAsync(string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoreFilesAsync("<vectorStoreId>", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFilesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoreFilesAsync("<vectorStoreId>", "in_progress", 1234, "asc", "<after>", "<before>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFiles(string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStoreFiles("<vectorStoreId>", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFiles with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStoreFiles("<vectorStoreId>", "in_progress", 1234, "asc", "<after>", "<before>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileAsync(string,string,VectorStoreDataSource,VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFile> response = await client.CreateVectorStoreFileAsync("<vectorStoreId>");
]]></code>
This sample shows how to call CreateVectorStoreFileAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

VectorStoreDataSource dataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset);
VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
Response<VectorStoreFile> response = await client.CreateVectorStoreFileAsync("<vectorStoreId>", fileId: "<file_id>", dataSource: dataSource, chunkingStrategy: chunkingStrategy);
]]></code></example>
    </member>
    <member name="CreateVectorStoreFile(string,string,VectorStoreDataSource,VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFile> response = client.CreateVectorStoreFile("<vectorStoreId>");
]]></code>
This sample shows how to call CreateVectorStoreFile with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

VectorStoreDataSource dataSource = new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset);
VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
Response<VectorStoreFile> response = client.CreateVectorStoreFile("<vectorStoreId>", fileId: "<file_id>", dataSource: dataSource, chunkingStrategy: chunkingStrategy);
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateVectorStoreFileAsync("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code>
This sample shows how to call CreateVectorStoreFileAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    file_id = "<file_id>",
    data_source = new
    {
        uri = "<uri>",
        type = "uri_asset",
    },
    chunking_strategy = new
    {
        type = "auto",
    },
});
Response response = await client.CreateVectorStoreFileAsync("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFile(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateVectorStoreFile("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code>
This sample shows how to call CreateVectorStoreFile with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    file_id = "<file_id>",
    data_source = new
    {
        uri = "<uri>",
        type = "uri_asset",
    },
    chunking_strategy = new
    {
        type = "auto",
    },
});
Response response = client.CreateVectorStoreFile("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("<vectorStoreId>", "<fileId>");
]]></code>
This sample shows how to call GetVectorStoreFileAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("<vectorStoreId>", "<fileId>");
]]></code></example>
    </member>
    <member name="GetVectorStoreFile(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFile> response = client.GetVectorStoreFile("<vectorStoreId>", "<fileId>");
]]></code>
This sample shows how to call GetVectorStoreFile with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFile> response = client.GetVectorStoreFile("<vectorStoreId>", "<fileId>");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoreFileAsync("<vectorStoreId>", "<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoreFileAsync("<vectorStoreId>", "<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFile(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStoreFile("<vectorStoreId>", "<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code>
This sample shows how to call GetVectorStoreFile with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStoreFile("<vectorStoreId>", "<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFileAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("<vectorStoreId>", "<fileId>");
]]></code>
This sample shows how to call DeleteVectorStoreFileAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("<vectorStoreId>", "<fileId>");
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFile(string,string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("<vectorStoreId>", "<fileId>");
]]></code>
This sample shows how to call DeleteVectorStoreFile with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("<vectorStoreId>", "<fileId>");
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFileAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.DeleteVectorStoreFileAsync("<vectorStoreId>", "<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStoreFileAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.DeleteVectorStoreFileAsync("<vectorStoreId>", "<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFile(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.DeleteVectorStoreFile("<vectorStoreId>", "<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStoreFile with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.DeleteVectorStoreFile("<vectorStoreId>", "<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatchAsync(string,IEnumerable{string},IEnumerable{VectorStoreDataSource},VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("<vectorStoreId>");
]]></code>
This sample shows how to call CreateVectorStoreFileBatchAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("<vectorStoreId>", fileIds: new string[] { "<file_ids>" }, dataSources: new VectorStoreDataSource[]
{
    new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset)
}, chunkingStrategy: chunkingStrategy);
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatch(string,IEnumerable{string},IEnumerable{VectorStoreDataSource},VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("<vectorStoreId>");
]]></code>
This sample shows how to call CreateVectorStoreFileBatch with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

VectorStoreChunkingStrategyRequest chunkingStrategy = new VectorStoreAutoChunkingStrategyRequest();
Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("<vectorStoreId>", fileIds: new string[] { "<file_ids>" }, dataSources: new VectorStoreDataSource[]
{
    new VectorStoreDataSource("<uri>", VectorStoreDataSourceAssetType.UriAsset)
}, chunkingStrategy: chunkingStrategy);
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatchAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateVectorStoreFileBatchAsync("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CreateVectorStoreFileBatchAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "<file_ids>"
    },
    data_sources = new object[]
    {
        new
        {
            uri = "<uri>",
            type = "uri_asset",
        }
    },
    chunking_strategy = new
    {
        type = "auto",
    },
});
Response response = await client.CreateVectorStoreFileBatchAsync("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatch(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateVectorStoreFileBatch("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CreateVectorStoreFileBatch with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "<file_ids>"
    },
    data_sources = new object[]
    {
        new
        {
            uri = "<uri>",
            type = "uri_asset",
        }
    },
    chunking_strategy = new
    {
        type = "auto",
    },
});
Response response = client.CreateVectorStoreFileBatch("<vectorStoreId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>");
]]></code>
This sample shows how to call GetVectorStoreFileBatchAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatch(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("<vectorStoreId>", "<batchId>");
]]></code>
This sample shows how to call GetVectorStoreFileBatch with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("<vectorStoreId>", "<batchId>");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatchAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatch(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStoreFileBatch("<vectorStoreId>", "<batchId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatch with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStoreFileBatch("<vectorStoreId>", "<batchId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatchAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>");
]]></code>
This sample shows how to call CancelVectorStoreFileBatchAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>");
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatch(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("<vectorStoreId>", "<batchId>");
]]></code>
This sample shows how to call CancelVectorStoreFileBatch with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("<vectorStoreId>", "<batchId>");
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatchAsync(string,string,RequestContext)">
      <example>
This sample shows how to call CancelVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.CancelVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CancelVectorStoreFileBatchAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.CancelVectorStoreFileBatchAsync("<vectorStoreId>", "<batchId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatch(string,string,RequestContext)">
      <example>
This sample shows how to call CancelVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.CancelVectorStoreFileBatch("<vectorStoreId>", "<batchId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CancelVectorStoreFileBatch with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.CancelVectorStoreFileBatch("<vectorStoreId>", "<batchId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFilesAsync(string,string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("<vectorStoreId>", "<batchId>");
]]></code>
This sample shows how to call GetVectorStoreFileBatchFilesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("<vectorStoreId>", "<batchId>", filter: VectorStoreFileStatusFilter.InProgress, limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFiles(string,string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("<vectorStoreId>", "<batchId>");
]]></code>
This sample shows how to call GetVectorStoreFileBatchFiles with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("<vectorStoreId>", "<batchId>", filter: VectorStoreFileStatusFilter.InProgress, limit: 1234, order: ListSortOrder.Ascending, after: "<after>", before: "<before>");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFilesAsync(string,string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoreFileBatchFilesAsync("<vectorStoreId>", "<batchId>", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatchFilesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = await client.GetVectorStoreFileBatchFilesAsync("<vectorStoreId>", "<batchId>", "in_progress", 1234, "asc", "<after>", "<before>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFiles(string,string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStoreFileBatchFiles("<vectorStoreId>", "<batchId>", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatchFiles with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AIAssistantClient client = new AIAssistantClient(endpoint, credential);

Response response = client.GetVectorStoreFileBatchFiles("<vectorStoreId>", "<batchId>", "in_progress", 1234, "asc", "<after>", "<before>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
  </members>
</doc>