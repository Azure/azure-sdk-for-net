// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary> Client event types used in VoiceLive protocol. </summary>
    internal readonly partial struct ClientEventType : IEquatable<ClientEventType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ClientEventType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ClientEventType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SessionUpdateValue = "session.update";
        private const string InputAudioBufferAppendValue = "input_audio_buffer.append";
        private const string InputAudioBufferCommitValue = "input_audio_buffer.commit";
        private const string InputAudioBufferClearValue = "input_audio_buffer.clear";
        private const string InputAudioTurnStartValue = "input_audio.turn.start";
        private const string InputAudioTurnAppendValue = "input_audio.turn.append";
        private const string InputAudioTurnEndValue = "input_audio.turn.end";
        private const string InputAudioTurnCancelValue = "input_audio.turn.cancel";
        private const string InputAudioClearValue = "input_audio.clear";
        private const string ConversationItemCreateValue = "conversation.item.create";
        private const string ConversationItemRetrieveValue = "conversation.item.retrieve";
        private const string ConversationItemTruncateValue = "conversation.item.truncate";
        private const string ConversationItemDeleteValue = "conversation.item.delete";
        private const string ResponseCreateValue = "response.create";
        private const string ResponseCancelValue = "response.cancel";
        private const string SessionAvatarConnectValue = "session.avatar.connect";

        /// <summary> session.update. </summary>
        public static ClientEventType SessionUpdate { get; } = new ClientEventType(SessionUpdateValue);
        /// <summary> input_audio_buffer.append. </summary>
        public static ClientEventType InputAudioBufferAppend { get; } = new ClientEventType(InputAudioBufferAppendValue);
        /// <summary> input_audio_buffer.commit. </summary>
        public static ClientEventType InputAudioBufferCommit { get; } = new ClientEventType(InputAudioBufferCommitValue);
        /// <summary> input_audio_buffer.clear. </summary>
        public static ClientEventType InputAudioBufferClear { get; } = new ClientEventType(InputAudioBufferClearValue);
        /// <summary> input_audio.turn.start. </summary>
        public static ClientEventType InputAudioTurnStart { get; } = new ClientEventType(InputAudioTurnStartValue);
        /// <summary> input_audio.turn.append. </summary>
        public static ClientEventType InputAudioTurnAppend { get; } = new ClientEventType(InputAudioTurnAppendValue);
        /// <summary> input_audio.turn.end. </summary>
        public static ClientEventType InputAudioTurnEnd { get; } = new ClientEventType(InputAudioTurnEndValue);
        /// <summary> input_audio.turn.cancel. </summary>
        public static ClientEventType InputAudioTurnCancel { get; } = new ClientEventType(InputAudioTurnCancelValue);
        /// <summary> input_audio.clear. </summary>
        public static ClientEventType InputAudioClear { get; } = new ClientEventType(InputAudioClearValue);
        /// <summary> conversation.item.create. </summary>
        public static ClientEventType ConversationItemCreate { get; } = new ClientEventType(ConversationItemCreateValue);
        /// <summary> conversation.item.retrieve. </summary>
        public static ClientEventType ConversationItemRetrieve { get; } = new ClientEventType(ConversationItemRetrieveValue);
        /// <summary> conversation.item.truncate. </summary>
        public static ClientEventType ConversationItemTruncate { get; } = new ClientEventType(ConversationItemTruncateValue);
        /// <summary> conversation.item.delete. </summary>
        public static ClientEventType ConversationItemDelete { get; } = new ClientEventType(ConversationItemDeleteValue);
        /// <summary> response.create. </summary>
        public static ClientEventType ResponseCreate { get; } = new ClientEventType(ResponseCreateValue);
        /// <summary> response.cancel. </summary>
        public static ClientEventType ResponseCancel { get; } = new ClientEventType(ResponseCancelValue);
        /// <summary> session.avatar.connect. </summary>
        public static ClientEventType SessionAvatarConnect { get; } = new ClientEventType(SessionAvatarConnectValue);
        /// <summary> Determines if two <see cref="ClientEventType"/> values are the same. </summary>
        public static bool operator ==(ClientEventType left, ClientEventType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ClientEventType"/> values are not the same. </summary>
        public static bool operator !=(ClientEventType left, ClientEventType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ClientEventType"/>. </summary>
        public static implicit operator ClientEventType(string value) => new ClientEventType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ClientEventType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ClientEventType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
