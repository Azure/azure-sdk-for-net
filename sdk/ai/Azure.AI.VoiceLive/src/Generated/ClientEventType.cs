// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary> Client event types used in VoiceLive protocol. </summary>
    internal readonly partial struct ClientEventType : IEquatable<ClientEventType>
    {
        private readonly string _value;
        private const string SessionUpdateValue = "session.update";
        private const string InputAudioBufferAppendValue = "input_audio_buffer.append";
        private const string InputAudioBufferCommitValue = "input_audio_buffer.commit";
        private const string InputAudioBufferClearValue = "input_audio_buffer.clear";
        private const string InputAudioTurnStartValue = "input_audio.turn.start";
        private const string InputAudioTurnAppendValue = "input_audio.turn.append";
        private const string InputAudioTurnEndValue = "input_audio.turn.end";
        private const string InputAudioTurnCancelValue = "input_audio.turn.cancel";
        private const string InputAudioClearValue = "input_audio.clear";
        private const string ConversationItemCreateValue = "conversation.item.create";
        private const string ConversationItemRetrieveValue = "conversation.item.retrieve";
        private const string ConversationItemTruncateValue = "conversation.item.truncate";
        private const string ConversationItemDeleteValue = "conversation.item.delete";
        private const string ResponseCreateValue = "response.create";
        private const string ResponseCancelValue = "response.cancel";
        private const string SessionAvatarConnectValue = "session.avatar.connect";

        /// <summary> Initializes a new instance of <see cref="ClientEventType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ClientEventType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Gets the SessionUpdate. </summary>
        public static ClientEventType SessionUpdate { get; } = new ClientEventType(SessionUpdateValue);

        /// <summary> Gets the InputAudioBufferAppend. </summary>
        public static ClientEventType InputAudioBufferAppend { get; } = new ClientEventType(InputAudioBufferAppendValue);

        /// <summary> Gets the InputAudioBufferCommit. </summary>
        public static ClientEventType InputAudioBufferCommit { get; } = new ClientEventType(InputAudioBufferCommitValue);

        /// <summary> Gets the InputAudioBufferClear. </summary>
        public static ClientEventType InputAudioBufferClear { get; } = new ClientEventType(InputAudioBufferClearValue);

        /// <summary> Gets the InputAudioTurnStart. </summary>
        public static ClientEventType InputAudioTurnStart { get; } = new ClientEventType(InputAudioTurnStartValue);

        /// <summary> Gets the InputAudioTurnAppend. </summary>
        public static ClientEventType InputAudioTurnAppend { get; } = new ClientEventType(InputAudioTurnAppendValue);

        /// <summary> Gets the InputAudioTurnEnd. </summary>
        public static ClientEventType InputAudioTurnEnd { get; } = new ClientEventType(InputAudioTurnEndValue);

        /// <summary> Gets the InputAudioTurnCancel. </summary>
        public static ClientEventType InputAudioTurnCancel { get; } = new ClientEventType(InputAudioTurnCancelValue);

        /// <summary> Gets the InputAudioClear. </summary>
        public static ClientEventType InputAudioClear { get; } = new ClientEventType(InputAudioClearValue);

        /// <summary> Gets the ConversationItemCreate. </summary>
        public static ClientEventType ConversationItemCreate { get; } = new ClientEventType(ConversationItemCreateValue);

        /// <summary> Gets the ConversationItemRetrieve. </summary>
        public static ClientEventType ConversationItemRetrieve { get; } = new ClientEventType(ConversationItemRetrieveValue);

        /// <summary> Gets the ConversationItemTruncate. </summary>
        public static ClientEventType ConversationItemTruncate { get; } = new ClientEventType(ConversationItemTruncateValue);

        /// <summary> Gets the ConversationItemDelete. </summary>
        public static ClientEventType ConversationItemDelete { get; } = new ClientEventType(ConversationItemDeleteValue);

        /// <summary> Gets the ResponseCreate. </summary>
        public static ClientEventType ResponseCreate { get; } = new ClientEventType(ResponseCreateValue);

        /// <summary> Gets the ResponseCancel. </summary>
        public static ClientEventType ResponseCancel { get; } = new ClientEventType(ResponseCancelValue);

        /// <summary> Gets the SessionAvatarConnect. </summary>
        public static ClientEventType SessionAvatarConnect { get; } = new ClientEventType(SessionAvatarConnectValue);

        /// <summary> Determines if two <see cref="ClientEventType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ClientEventType left, ClientEventType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="ClientEventType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ClientEventType left, ClientEventType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="ClientEventType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ClientEventType(string value) => new ClientEventType(value);

        /// <summary> Converts a string to a <see cref="ClientEventType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ClientEventType?(string value) => value == null ? null : new ClientEventType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ClientEventType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(ClientEventType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
