// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    [PersistableModelProxy(typeof(UnknownClientEvent))]
    internal abstract partial class ClientEvent : IJsonModel<ClientEvent>
    {
        /// <summary> Initializes a new instance of <see cref="ClientEvent"/> for deserialization. </summary>
        internal ClientEvent()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ClientEvent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ClientEvent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ClientEvent)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            if (Optional.IsDefined(EventId))
            {
                writer.WritePropertyName("event_id"u8);
                writer.WriteStringValue(EventId);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ClientEvent IJsonModel<ClientEvent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ClientEvent JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ClientEvent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ClientEvent)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeClientEvent(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static ClientEvent DeserializeClientEvent(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type"u8, out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "session.update":
                        return ClientEventSessionUpdate.DeserializeClientEventSessionUpdate(element, options);
                    case "input_audio_buffer.append":
                        return ClientEventInputAudioBufferAppend.DeserializeClientEventInputAudioBufferAppend(element, options);
                    case "input_audio_buffer.commit":
                        return ClientEventInputAudioBufferCommit.DeserializeClientEventInputAudioBufferCommit(element, options);
                    case "input_audio_buffer.clear":
                        return ClientEventInputAudioBufferClear.DeserializeClientEventInputAudioBufferClear(element, options);
                    case "input_audio.turn.start":
                        return ClientEventInputAudioTurnStart.DeserializeClientEventInputAudioTurnStart(element, options);
                    case "input_audio.turn.append":
                        return ClientEventInputAudioTurnAppend.DeserializeClientEventInputAudioTurnAppend(element, options);
                    case "input_audio.turn.end":
                        return ClientEventInputAudioTurnEnd.DeserializeClientEventInputAudioTurnEnd(element, options);
                    case "input_audio.turn.cancel":
                        return ClientEventInputAudioTurnCancel.DeserializeClientEventInputAudioTurnCancel(element, options);
                    case "input_audio.clear":
                        return ClientEventInputAudioClear.DeserializeClientEventInputAudioClear(element, options);
                    case "conversation.item.create":
                        return ClientEventConversationItemCreate.DeserializeClientEventConversationItemCreate(element, options);
                    case "conversation.item.retrieve":
                        return ClientEventConversationItemRetrieve.DeserializeClientEventConversationItemRetrieve(element, options);
                    case "conversation.item.truncate":
                        return ClientEventConversationItemTruncate.DeserializeClientEventConversationItemTruncate(element, options);
                    case "conversation.item.delete":
                        return ClientEventConversationItemDelete.DeserializeClientEventConversationItemDelete(element, options);
                    case "response.create":
                        return ClientEventResponseCreate.DeserializeClientEventResponseCreate(element, options);
                    case "response.cancel":
                        return ClientEventResponseCancel.DeserializeClientEventResponseCancel(element, options);
                    case "session.avatar.connect":
                        return ClientEventSessionAvatarConnect.DeserializeClientEventSessionAvatarConnect(element, options);
                }
            }
            return UnknownClientEvent.DeserializeUnknownClientEvent(element, options);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ClientEvent>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ClientEvent>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ClientEvent)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ClientEvent IPersistableModel<ClientEvent>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ClientEvent PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ClientEvent>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeClientEvent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ClientEvent)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ClientEvent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
