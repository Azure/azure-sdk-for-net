// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.VoiceLive
{
    [PersistableModelProxy(typeof(UnknownClientEvent))]
    public partial class ClientEvent : IUtf8JsonSerializable, IJsonModel<ClientEvent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ClientEvent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ClientEvent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ClientEvent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ClientEvent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            if (Optional.IsDefined(EventId))
            {
                writer.WritePropertyName("event_id"u8);
                writer.WriteStringValue(EventId);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ClientEvent IJsonModel<ClientEvent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ClientEvent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ClientEvent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeClientEvent(document.RootElement, options);
        }

        internal static ClientEvent DeserializeClientEvent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "conversation.item.create": return ClientEventConversationItemCreate.DeserializeClientEventConversationItemCreate(element, options);
                    case "conversation.item.delete": return ClientEventConversationItemDelete.DeserializeClientEventConversationItemDelete(element, options);
                    case "conversation.item.retrieve": return ClientEventConversationItemRetrieve.DeserializeClientEventConversationItemRetrieve(element, options);
                    case "conversation.item.truncate": return ClientEventConversationItemTruncate.DeserializeClientEventConversationItemTruncate(element, options);
                    case "input_audio_buffer.append": return ClientEventInputAudioBufferAppend.DeserializeClientEventInputAudioBufferAppend(element, options);
                    case "input_audio_buffer.clear": return ClientEventInputAudioBufferClear.DeserializeClientEventInputAudioBufferClear(element, options);
                    case "input_audio_buffer.commit": return ClientEventInputAudioBufferCommit.DeserializeClientEventInputAudioBufferCommit(element, options);
                    case "input_audio.clear": return ClientEventInputAudioClear.DeserializeClientEventInputAudioClear(element, options);
                    case "input_audio.turn.append": return ClientEventInputAudioTurnAppend.DeserializeClientEventInputAudioTurnAppend(element, options);
                    case "input_audio.turn.cancel": return ClientEventInputAudioTurnCancel.DeserializeClientEventInputAudioTurnCancel(element, options);
                    case "input_audio.turn.end": return ClientEventInputAudioTurnEnd.DeserializeClientEventInputAudioTurnEnd(element, options);
                    case "input_audio.turn.start": return ClientEventInputAudioTurnStart.DeserializeClientEventInputAudioTurnStart(element, options);
                    case "response.cancel": return ClientEventResponseCancel.DeserializeClientEventResponseCancel(element, options);
                    case "response.create": return ClientEventResponseCreate.DeserializeClientEventResponseCreate(element, options);
                    case "session.avatar.connect": return ClientEventSessionAvatarConnect.DeserializeClientEventSessionAvatarConnect(element, options);
                    case "session.update": return ClientEventSessionUpdate.DeserializeClientEventSessionUpdate(element, options);
                }
            }
            return UnknownClientEvent.DeserializeUnknownClientEvent(element, options);
        }

        BinaryData IPersistableModel<ClientEvent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ClientEvent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ClientEvent)} does not support writing '{options.Format}' format.");
            }
        }

        ClientEvent IPersistableModel<ClientEvent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ClientEvent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeClientEvent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ClientEvent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ClientEvent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ClientEvent FromResponse(Azure.Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeClientEvent(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
