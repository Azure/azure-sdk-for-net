// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    /// <summary> Represents a delta update of blendshape animation frames for a specific output of a response. </summary>
    public partial class ServerEventResponseAnimationBlendshapeDelta : ServerEvent
    {
        /// <summary> Initializes a new instance of <see cref="ServerEventResponseAnimationBlendshapeDelta"/>. </summary>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <param name="frames"></param>
        /// <param name="frameIndex"></param>
        internal ServerEventResponseAnimationBlendshapeDelta(string responseId, string itemId, int outputIndex, int contentIndex, BinaryData frames, int frameIndex) : base(ServerEventType.ResponseAnimationBlendshapesDelta)
        {
            ResponseId = responseId;
            ItemId = itemId;
            OutputIndex = outputIndex;
            ContentIndex = contentIndex;
            Frames = frames;
            FrameIndex = frameIndex;
        }

        /// <summary> Initializes a new instance of <see cref="ServerEventResponseAnimationBlendshapeDelta"/>. </summary>
        /// <param name="type"> The type of event. </param>
        /// <param name="eventId"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <param name="frames"></param>
        /// <param name="frameIndex"></param>
        internal ServerEventResponseAnimationBlendshapeDelta(ServerEventType @type, string eventId, IDictionary<string, BinaryData> additionalBinaryDataProperties, string responseId, string itemId, int outputIndex, int contentIndex, BinaryData frames, int frameIndex) : base(@type, eventId, additionalBinaryDataProperties)
        {
            ResponseId = responseId;
            ItemId = itemId;
            OutputIndex = outputIndex;
            ContentIndex = contentIndex;
            Frames = frames;
            FrameIndex = frameIndex;
        }

        /// <summary> Gets the ResponseId. </summary>
        public string ResponseId { get; }

        /// <summary> Gets the ItemId. </summary>
        public string ItemId { get; }

        /// <summary> Gets the OutputIndex. </summary>
        public int OutputIndex { get; }

        /// <summary> Gets the ContentIndex. </summary>
        public int ContentIndex { get; }

        /// <summary>
        /// Gets the Frames.
        /// <para> To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> <see cref="IList{T}"/> where <c>T</c> is of type <c>IList{float}</c>. </description>
        /// </item>
        /// <item>
        /// <description> <see cref="string"/>. </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Frames { get; }

        /// <summary> Gets the FrameIndex. </summary>
        public int FrameIndex { get; }
    }
}
