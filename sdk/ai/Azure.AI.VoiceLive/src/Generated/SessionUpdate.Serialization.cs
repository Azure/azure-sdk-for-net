// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    /// <summary>
    /// A voicelive server event.
    /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="SessionUpdateError"/>, <see cref="SessionUpdateSessionCreated"/>, <see cref="SessionUpdateSessionUpdated"/>, <see cref="SessionUpdateAvatarConnecting"/>, <see cref="SessionUpdateInputAudioBufferCommitted"/>, <see cref="SessionUpdateInputAudioBufferCleared"/>, <see cref="SessionUpdateInputAudioBufferSpeechStarted"/>, <see cref="SessionUpdateInputAudioBufferSpeechStopped"/>, <see cref="SessionUpdateConversationItemCreated"/>, <see cref="SessionUpdateConversationItemInputAudioTranscriptionCompleted"/>, <see cref="SessionUpdateConversationItemInputAudioTranscriptionFailed"/>, <see cref="SessionUpdateConversationItemTruncated"/>, <see cref="SessionUpdateConversationItemDeleted"/>, <see cref="SessionUpdateResponseCreated"/>, <see cref="SessionUpdateResponseDone"/>, <see cref="SessionUpdateResponseOutputItemAdded"/>, <see cref="SessionUpdateResponseOutputItemDone"/>, <see cref="SessionUpdateResponseContentPartAdded"/>, <see cref="SessionUpdateResponseContentPartDone"/>, <see cref="SessionUpdateResponseTextDelta"/>, <see cref="SessionUpdateResponseTextDone"/>, <see cref="SessionUpdateResponseAudioTranscriptDelta"/>, <see cref="SessionUpdateResponseAudioTranscriptDone"/>, <see cref="SessionUpdateResponseAudioDelta"/>, <see cref="SessionUpdateResponseAudioDone"/>, <see cref="SessionUpdateResponseAnimationBlendshapeDelta"/>, <see cref="SessionUpdateResponseAnimationBlendshapeDone"/>, <see cref="SessionUpdateResponseAudioTimestampDelta"/>, <see cref="SessionUpdateResponseAudioTimestampDone"/>, <see cref="SessionUpdateResponseAnimationVisemeDelta"/>, <see cref="SessionUpdateResponseAnimationVisemeDone"/>, <see cref="SessionUpdateConversationItemInputAudioTranscriptionDelta"/>, <see cref="SessionUpdateConversationItemRetrieved"/>, <see cref="SessionUpdateResponseFunctionCallArgumentsDelta"/>, and <see cref="SessionUpdateResponseFunctionCallArgumentsDone"/>.
    /// </summary>
    [PersistableModelProxy(typeof(UnknownSessionUpdate))]
    public abstract partial class SessionUpdate : IJsonModel<SessionUpdate>
    {
        /// <summary> Initializes a new instance of <see cref="SessionUpdate"/> for deserialization. </summary>
        internal SessionUpdate()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<SessionUpdate>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdate>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SessionUpdate)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            if (Optional.IsDefined(EventId))
            {
                writer.WritePropertyName("event_id"u8);
                writer.WriteStringValue(EventId);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SessionUpdate IJsonModel<SessionUpdate>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual SessionUpdate JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdate>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SessionUpdate)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSessionUpdate(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static SessionUpdate DeserializeSessionUpdate(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type"u8, out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "error":
                        return SessionUpdateError.DeserializeSessionUpdateError(element, options);
                    case "session.created":
                        return SessionUpdateSessionCreated.DeserializeSessionUpdateSessionCreated(element, options);
                    case "session.updated":
                        return SessionUpdateSessionUpdated.DeserializeSessionUpdateSessionUpdated(element, options);
                    case "session.avatar.connecting":
                        return SessionUpdateAvatarConnecting.DeserializeSessionUpdateAvatarConnecting(element, options);
                    case "input_audio_buffer.committed":
                        return SessionUpdateInputAudioBufferCommitted.DeserializeSessionUpdateInputAudioBufferCommitted(element, options);
                    case "input_audio_buffer.cleared":
                        return SessionUpdateInputAudioBufferCleared.DeserializeSessionUpdateInputAudioBufferCleared(element, options);
                    case "input_audio_buffer.speech_started":
                        return SessionUpdateInputAudioBufferSpeechStarted.DeserializeSessionUpdateInputAudioBufferSpeechStarted(element, options);
                    case "input_audio_buffer.speech_stopped":
                        return SessionUpdateInputAudioBufferSpeechStopped.DeserializeSessionUpdateInputAudioBufferSpeechStopped(element, options);
                    case "conversation.item.created":
                        return SessionUpdateConversationItemCreated.DeserializeSessionUpdateConversationItemCreated(element, options);
                    case "conversation.item.input_audio_transcription.completed":
                        return SessionUpdateConversationItemInputAudioTranscriptionCompleted.DeserializeSessionUpdateConversationItemInputAudioTranscriptionCompleted(element, options);
                    case "conversation.item.input_audio_transcription.failed":
                        return SessionUpdateConversationItemInputAudioTranscriptionFailed.DeserializeSessionUpdateConversationItemInputAudioTranscriptionFailed(element, options);
                    case "conversation.item.truncated":
                        return SessionUpdateConversationItemTruncated.DeserializeSessionUpdateConversationItemTruncated(element, options);
                    case "conversation.item.deleted":
                        return SessionUpdateConversationItemDeleted.DeserializeSessionUpdateConversationItemDeleted(element, options);
                    case "response.created":
                        return SessionUpdateResponseCreated.DeserializeSessionUpdateResponseCreated(element, options);
                    case "response.done":
                        return SessionUpdateResponseDone.DeserializeSessionUpdateResponseDone(element, options);
                    case "response.output_item.added":
                        return SessionUpdateResponseOutputItemAdded.DeserializeSessionUpdateResponseOutputItemAdded(element, options);
                    case "response.output_item.done":
                        return SessionUpdateResponseOutputItemDone.DeserializeSessionUpdateResponseOutputItemDone(element, options);
                    case "response.content_part.added":
                        return SessionUpdateResponseContentPartAdded.DeserializeSessionUpdateResponseContentPartAdded(element, options);
                    case "response.content_part.done":
                        return SessionUpdateResponseContentPartDone.DeserializeSessionUpdateResponseContentPartDone(element, options);
                    case "response.text.delta":
                        return SessionUpdateResponseTextDelta.DeserializeSessionUpdateResponseTextDelta(element, options);
                    case "response.text.done":
                        return SessionUpdateResponseTextDone.DeserializeSessionUpdateResponseTextDone(element, options);
                    case "response.audio_transcript.delta":
                        return SessionUpdateResponseAudioTranscriptDelta.DeserializeSessionUpdateResponseAudioTranscriptDelta(element, options);
                    case "response.audio_transcript.done":
                        return SessionUpdateResponseAudioTranscriptDone.DeserializeSessionUpdateResponseAudioTranscriptDone(element, options);
                    case "response.audio.delta":
                        return SessionUpdateResponseAudioDelta.DeserializeSessionUpdateResponseAudioDelta(element, options);
                    case "response.audio.done":
                        return SessionUpdateResponseAudioDone.DeserializeSessionUpdateResponseAudioDone(element, options);
                    case "response.animation_blendshapes.delta":
                        return SessionUpdateResponseAnimationBlendshapeDelta.DeserializeSessionUpdateResponseAnimationBlendshapeDelta(element, options);
                    case "response.animation_blendshapes.done":
                        return SessionUpdateResponseAnimationBlendshapeDone.DeserializeSessionUpdateResponseAnimationBlendshapeDone(element, options);
                    case "response.audio_timestamp.delta":
                        return SessionUpdateResponseAudioTimestampDelta.DeserializeSessionUpdateResponseAudioTimestampDelta(element, options);
                    case "response.audio_timestamp.done":
                        return SessionUpdateResponseAudioTimestampDone.DeserializeSessionUpdateResponseAudioTimestampDone(element, options);
                    case "response.animation_viseme.delta":
                        return SessionUpdateResponseAnimationVisemeDelta.DeserializeSessionUpdateResponseAnimationVisemeDelta(element, options);
                    case "response.animation_viseme.done":
                        return SessionUpdateResponseAnimationVisemeDone.DeserializeSessionUpdateResponseAnimationVisemeDone(element, options);
                    case "conversation.item.input_audio_transcription.delta":
                        return SessionUpdateConversationItemInputAudioTranscriptionDelta.DeserializeSessionUpdateConversationItemInputAudioTranscriptionDelta(element, options);
                    case "conversation.item.retrieved":
                        return SessionUpdateConversationItemRetrieved.DeserializeSessionUpdateConversationItemRetrieved(element, options);
                    case "response.function_call_arguments.delta":
                        return SessionUpdateResponseFunctionCallArgumentsDelta.DeserializeSessionUpdateResponseFunctionCallArgumentsDelta(element, options);
                    case "response.function_call_arguments.done":
                        return SessionUpdateResponseFunctionCallArgumentsDone.DeserializeSessionUpdateResponseFunctionCallArgumentsDone(element, options);
                }
            }
            return UnknownSessionUpdate.DeserializeUnknownSessionUpdate(element, options);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<SessionUpdate>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdate>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SessionUpdate)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SessionUpdate IPersistableModel<SessionUpdate>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual SessionUpdate PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdate>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeSessionUpdate(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SessionUpdate)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<SessionUpdate>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
