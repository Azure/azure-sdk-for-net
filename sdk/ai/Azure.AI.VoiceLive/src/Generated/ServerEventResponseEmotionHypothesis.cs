// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.VoiceLive
{
    /// <summary> Represents an emotion hypothesis detected from response audio with multiple candidates. </summary>
    public partial class ServerEventResponseEmotionHypothesis : ServerEventBase
    {
        /// <summary> Initializes a new instance of <see cref="ServerEventResponseEmotionHypothesis"/>. </summary>
        /// <param name="emotion"></param>
        /// <param name="candidates"></param>
        /// <param name="audioOffsetMs"></param>
        /// <param name="audioDurationMs"></param>
        /// <param name="itemId"></param>
        internal ServerEventResponseEmotionHypothesis(string emotion, IEnumerable<EmotionCandidate> candidates, int audioOffsetMs, int audioDurationMs, string itemId) : base(ServerEventType.ResponseEmotionHypothesis)
        {
            Emotion = emotion;
            Candidates = candidates.ToList();
            AudioOffsetMs = audioOffsetMs;
            AudioDurationMs = audioDurationMs;
            ItemId = itemId;
        }

        /// <summary> Initializes a new instance of <see cref="ServerEventResponseEmotionHypothesis"/>. </summary>
        /// <param name="type"> The type of event. </param>
        /// <param name="eventId"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="emotion"></param>
        /// <param name="candidates"></param>
        /// <param name="audioOffsetMs"></param>
        /// <param name="audioDurationMs"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        internal ServerEventResponseEmotionHypothesis(ServerEventType @type, string eventId, IDictionary<string, BinaryData> additionalBinaryDataProperties, string emotion, IList<EmotionCandidate> candidates, int audioOffsetMs, int audioDurationMs, string responseId, string itemId) : base(@type, eventId, additionalBinaryDataProperties)
        {
            Emotion = emotion;
            Candidates = candidates;
            AudioOffsetMs = audioOffsetMs;
            AudioDurationMs = audioDurationMs;
            ResponseId = responseId;
            ItemId = itemId;
        }

        /// <summary> Gets the Emotion. </summary>
        public string Emotion { get; }

        /// <summary> Gets the Candidates. </summary>
        public IList<EmotionCandidate> Candidates { get; }

        /// <summary> Gets the AudioOffsetMs. </summary>
        public int AudioOffsetMs { get; }

        /// <summary> Gets the AudioDurationMs. </summary>
        public int AudioDurationMs { get; }

        /// <summary> Gets the ResponseId. </summary>
        public string ResponseId { get; }

        /// <summary> Gets the ItemId. </summary>
        public string ItemId { get; }
    }
}
