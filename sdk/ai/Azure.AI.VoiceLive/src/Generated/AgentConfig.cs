// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> The AgentConfig. </summary>
    public partial class AgentConfig
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AgentConfig"/>. </summary>
        /// <param name="name"></param>
        /// <param name="agentId"></param>
        /// <param name="threadId"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="agentId"/> or <paramref name="threadId"/> is null. </exception>
        internal AgentConfig(string name, string agentId, string threadId)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(agentId, nameof(agentId));
            Argument.AssertNotNull(threadId, nameof(threadId));

            Name = name;
            AgentId = agentId;
            ThreadId = threadId;
        }

        /// <summary> Initializes a new instance of <see cref="AgentConfig"/>. </summary>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="agentId"></param>
        /// <param name="threadId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AgentConfig(AgentConfigType type, string name, string description, string agentId, string threadId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            Name = name;
            Description = description;
            AgentId = agentId;
            ThreadId = threadId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AgentConfig"/> for deserialization. </summary>
        internal AgentConfig()
        {
        }

        /// <summary> Gets the type. </summary>
        public AgentConfigType Type { get; } = AgentConfigType.Agent;

        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the description. </summary>
        public string Description { get; }
        /// <summary> Gets the agent id. </summary>
        public string AgentId { get; }
        /// <summary> Gets the thread id. </summary>
        public string ThreadId { get; }
    }
}
