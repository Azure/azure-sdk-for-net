// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> The VoiceLiveRequestSession. </summary>
    public partial class VoiceLiveRequestSession
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VoiceLiveRequestSession"/>. </summary>
        public VoiceLiveRequestSession()
        {
            Modalities = new ChangeTrackingList<VoiceLiveModality>();
            OutputAudioTimestampTypes = new ChangeTrackingList<VoiceLiveAudioTimestampType>();
            Tools = new ChangeTrackingList<VoiceLiveTool>();
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveRequestSession"/>. </summary>
        /// <param name="model"></param>
        /// <param name="modalities"></param>
        /// <param name="animation"></param>
        /// <param name="voice"></param>
        /// <param name="instructions"></param>
        /// <param name="inputAudio"></param>
        /// <param name="inputAudioSamplingRate"></param>
        /// <param name="inputAudioFormat"></param>
        /// <param name="outputAudioFormat"></param>
        /// <param name="turnDetection">
        /// Please note <see cref="VoiceLiveTurnDetection"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveAzureSemanticVad"/>, <see cref="VoiceLiveNoTurnDetection"/> and <see cref="VoiceLiveServerVad"/>.
        /// </param>
        /// <param name="inputAudioNoiseReduction"></param>
        /// <param name="inputAudioEchoCancellation"></param>
        /// <param name="avatar"></param>
        /// <param name="inputAudioTranscription"></param>
        /// <param name="outputAudioTimestampTypes"></param>
        /// <param name="tools">
        /// Please note <see cref="VoiceLiveTool"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveFunctionTool"/>.
        /// </param>
        /// <param name="toolChoice"></param>
        /// <param name="temperature"></param>
        /// <param name="maxResponseOutputTokens"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VoiceLiveRequestSession(string model, IList<VoiceLiveModality> modalities, VoiceLiveAnimation animation, BinaryData voice, string instructions, VoiceLiveInputAudio inputAudio, int? inputAudioSamplingRate, VoiceLiveAudioFormat? inputAudioFormat, VoiceLiveAudioFormat? outputAudioFormat, VoiceLiveTurnDetection turnDetection, VoiceLiveAudioNoiseReduction inputAudioNoiseReduction, VoiceLiveAudioEchoCancellation inputAudioEchoCancellation, VoiceLiveAvatarConfig avatar, VoiceLiveAudioInputTranscriptionSettings inputAudioTranscription, IList<VoiceLiveAudioTimestampType> outputAudioTimestampTypes, IList<VoiceLiveTool> tools, BinaryData toolChoice, float? temperature, BinaryData maxResponseOutputTokens, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Model = model;
            Modalities = modalities;
            Animation = animation;
            Voice = voice;
            Instructions = instructions;
            InputAudio = inputAudio;
            InputAudioSamplingRate = inputAudioSamplingRate;
            InputAudioFormat = inputAudioFormat;
            OutputAudioFormat = outputAudioFormat;
            TurnDetection = turnDetection;
            InputAudioNoiseReduction = inputAudioNoiseReduction;
            InputAudioEchoCancellation = inputAudioEchoCancellation;
            Avatar = avatar;
            InputAudioTranscription = inputAudioTranscription;
            OutputAudioTimestampTypes = outputAudioTimestampTypes;
            Tools = tools;
            ToolChoice = toolChoice;
            Temperature = temperature;
            MaxResponseOutputTokens = maxResponseOutputTokens;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the model. </summary>
        public string Model { get; set; }
        /// <summary> Gets the modalities. </summary>
        public IList<VoiceLiveModality> Modalities { get; }
        /// <summary> Gets or sets the animation. </summary>
        public VoiceLiveAnimation Animation { get; set; }
        /// <summary>
        /// Gets or sets the voice
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="OAIVoice"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="AzureStandardVoice"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="AzureCustomVoice"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="AzurePersonalVoice"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="Phi4mmVoice"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Voice { get; set; }
        /// <summary> Gets or sets the instructions. </summary>
        public string Instructions { get; set; }
        /// <summary> Gets or sets the input audio. </summary>
        public VoiceLiveInputAudio InputAudio { get; set; }
        /// <summary> Gets or sets the input audio sampling rate. </summary>
        public int? InputAudioSamplingRate { get; set; }
        /// <summary> Gets or sets the input audio format. </summary>
        public VoiceLiveAudioFormat? InputAudioFormat { get; set; }
        /// <summary> Gets or sets the output audio format. </summary>
        public VoiceLiveAudioFormat? OutputAudioFormat { get; set; }
        /// <summary>
        /// Gets or sets the turn detection
        /// Please note <see cref="VoiceLiveTurnDetection"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveAzureSemanticVad"/>, <see cref="VoiceLiveNoTurnDetection"/> and <see cref="VoiceLiveServerVad"/>.
        /// </summary>
        public VoiceLiveTurnDetection TurnDetection { get; set; }
        /// <summary> Gets or sets the input audio noise reduction. </summary>
        public VoiceLiveAudioNoiseReduction InputAudioNoiseReduction { get; set; }
        /// <summary> Gets or sets the input audio echo cancellation. </summary>
        public VoiceLiveAudioEchoCancellation InputAudioEchoCancellation { get; set; }
        /// <summary> Gets or sets the avatar. </summary>
        public VoiceLiveAvatarConfig Avatar { get; set; }
        /// <summary> Gets or sets the input audio transcription. </summary>
        public VoiceLiveAudioInputTranscriptionSettings InputAudioTranscription { get; set; }
        /// <summary> Gets the output audio timestamp types. </summary>
        public IList<VoiceLiveAudioTimestampType> OutputAudioTimestampTypes { get; }
        /// <summary>
        /// Gets the tools
        /// Please note <see cref="VoiceLiveTool"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveFunctionTool"/>.
        /// </summary>
        public IList<VoiceLiveTool> Tools { get; }
        /// <summary>
        /// Gets or sets the tool choice
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="VoiceLiveToolChoiceLiteral"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="VoiceLiveToolChoiceObject"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData ToolChoice { get; set; }
        /// <summary> Gets or sets the temperature. </summary>
        public float? Temperature { get; set; }
        /// <summary>
        /// Gets or sets the max response output tokens
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="int"/></description>
        /// </item>
        /// <item>
        /// <description>"inf"</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData MaxResponseOutputTokens { get; set; }
    }
}
