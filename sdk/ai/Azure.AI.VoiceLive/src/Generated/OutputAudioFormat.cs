// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary></summary>
    public readonly partial struct OutputAudioFormat : IEquatable<OutputAudioFormat>
    {
        private readonly string _value;
        /// <summary> 16-bit PCM audio format at default sampling rate (24kHz). </summary>
        private const string Pcm16Value = "pcm16";
        /// <summary> 16-bit PCM audio format at 8kHz sampling rate. </summary>
        private const string Pcm168000hzValue = "pcm16-8000hz";
        /// <summary> 16-bit PCM audio format at 16kHz sampling rate. </summary>
        private const string Pcm1616000hzValue = "pcm16-16000hz";
        /// <summary> G.711 μ-law (mu-law) audio format at 8kHz sampling rate. </summary>
        private const string G711UlawValue = "g711_ulaw";
        /// <summary> G.711 A-law audio format at 8kHz sampling rate. </summary>
        private const string G711AlawValue = "g711_alaw";

        /// <summary> Initializes a new instance of <see cref="OutputAudioFormat"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OutputAudioFormat(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> 16-bit PCM audio format at default sampling rate (24kHz). </summary>
        public static OutputAudioFormat Pcm16 { get; } = new OutputAudioFormat(Pcm16Value);

        /// <summary> 16-bit PCM audio format at 8kHz sampling rate. </summary>
        public static OutputAudioFormat Pcm168000hz { get; } = new OutputAudioFormat(Pcm168000hzValue);

        /// <summary> 16-bit PCM audio format at 16kHz sampling rate. </summary>
        public static OutputAudioFormat Pcm1616000hz { get; } = new OutputAudioFormat(Pcm1616000hzValue);

        /// <summary> G.711 μ-law (mu-law) audio format at 8kHz sampling rate. </summary>
        public static OutputAudioFormat G711Ulaw { get; } = new OutputAudioFormat(G711UlawValue);

        /// <summary> G.711 A-law audio format at 8kHz sampling rate. </summary>
        public static OutputAudioFormat G711Alaw { get; } = new OutputAudioFormat(G711AlawValue);

        /// <summary> Determines if two <see cref="OutputAudioFormat"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(OutputAudioFormat left, OutputAudioFormat right) => left.Equals(right);

        /// <summary> Determines if two <see cref="OutputAudioFormat"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(OutputAudioFormat left, OutputAudioFormat right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="OutputAudioFormat"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator OutputAudioFormat(string value) => new OutputAudioFormat(value);

        /// <summary> Converts a string to a <see cref="OutputAudioFormat"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator OutputAudioFormat?(string value) => value == null ? null : new OutputAudioFormat(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OutputAudioFormat other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(OutputAudioFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
