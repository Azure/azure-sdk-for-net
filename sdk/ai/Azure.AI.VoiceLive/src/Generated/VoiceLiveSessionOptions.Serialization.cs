// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    /// <summary> The VoiceLiveSessionOptions. </summary>
    public partial class VoiceLiveSessionOptions : IJsonModel<VoiceLiveSessionOptions>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<VoiceLiveSessionOptions>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VoiceLiveSessionOptions>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VoiceLiveSessionOptions)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Model))
            {
                writer.WritePropertyName("model"u8);
                writer.WriteStringValue(Model);
            }
            if (Optional.IsCollectionDefined(Modalities))
            {
                writer.WritePropertyName("modalities"u8);
                writer.WriteStartArray();
                foreach (InputModality item in Modalities)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Animation))
            {
                writer.WritePropertyName("animation"u8);
                writer.WriteObjectValue(Animation, options);
            }
            if (Optional.IsDefined(Instructions))
            {
                writer.WritePropertyName("instructions"u8);
                writer.WriteStringValue(Instructions);
            }
            if (Optional.IsDefined(InputAudioSamplingRate))
            {
                writer.WritePropertyName("input_audio_sampling_rate"u8);
                writer.WriteNumberValue(InputAudioSamplingRate.Value);
            }
            if (Optional.IsDefined(InputAudioFormat))
            {
                writer.WritePropertyName("input_audio_format"u8);
                writer.WriteStringValue(InputAudioFormat.Value.ToString());
            }
            if (Optional.IsDefined(OutputAudioFormat))
            {
                writer.WritePropertyName("output_audio_format"u8);
                writer.WriteStringValue(OutputAudioFormat.Value.ToString());
            }
            if (Optional.IsDefined(InputAudioNoiseReduction))
            {
                writer.WritePropertyName("input_audio_noise_reduction"u8);
                writer.WriteObjectValue(InputAudioNoiseReduction, options);
            }
            if (Optional.IsDefined(InputAudioEchoCancellation))
            {
                writer.WritePropertyName("input_audio_echo_cancellation"u8);
                writer.WriteObjectValue(InputAudioEchoCancellation, options);
            }
            if (Optional.IsDefined(Avatar))
            {
                writer.WritePropertyName("avatar"u8);
                writer.WriteObjectValue(Avatar, options);
            }
            if (Optional.IsDefined(InputAudioTranscription))
            {
                writer.WritePropertyName("input_audio_transcription"u8);
                writer.WriteObjectValue(InputAudioTranscription, options);
            }
            if (Optional.IsCollectionDefined(OutputAudioTimestampTypes))
            {
                writer.WritePropertyName("output_audio_timestamp_types"u8);
                writer.WriteStartArray();
                foreach (AudioTimestampType item in OutputAudioTimestampTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Tools))
            {
                writer.WritePropertyName("tools"u8);
                writer.WriteStartArray();
                foreach (VoiceLiveToolDefinition item in Tools)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Temperature))
            {
                writer.WritePropertyName("temperature"u8);
                writer.WriteNumberValue(Temperature.Value);
            }
            if (Optional.IsDefined(VoiceInternal))
            {
                writer.WritePropertyName("voice"u8);
#if NET6_0_OR_GREATER
                writer.WriteRawValue(VoiceInternal);
#else
                using (JsonDocument document = JsonDocument.Parse(VoiceInternal))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(_maxResponseOutputTokens))
            {
                writer.WritePropertyName("max_response_output_tokens"u8);
#if NET6_0_OR_GREATER
                writer.WriteRawValue(_maxResponseOutputTokens);
#else
                using (JsonDocument document = JsonDocument.Parse(_maxResponseOutputTokens))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(_toolChoice))
            {
                writer.WritePropertyName("tool_choice"u8);
#if NET6_0_OR_GREATER
                writer.WriteRawValue(_toolChoice);
#else
                using (JsonDocument document = JsonDocument.Parse(_toolChoice))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(_turnDetection))
            {
                writer.WritePropertyName("turn_detection"u8);
#if NET6_0_OR_GREATER
                writer.WriteRawValue(_turnDetection);
#else
                using (JsonDocument document = JsonDocument.Parse(_turnDetection))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        VoiceLiveSessionOptions IJsonModel<VoiceLiveSessionOptions>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual VoiceLiveSessionOptions JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VoiceLiveSessionOptions>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VoiceLiveSessionOptions)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVoiceLiveSessionOptions(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static VoiceLiveSessionOptions DeserializeVoiceLiveSessionOptions(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string model = default;
            IList<InputModality> modalities = default;
            AnimationOptions animation = default;
            string instructions = default;
            int? inputAudioSamplingRate = default;
            InputAudioFormat? inputAudioFormat = default;
            OutputAudioFormat? outputAudioFormat = default;
            AudioNoiseReduction inputAudioNoiseReduction = default;
            AudioEchoCancellation inputAudioEchoCancellation = default;
            AvatarConfiguration avatar = default;
            AudioInputTranscriptionSettings inputAudioTranscription = default;
            IList<AudioTimestampType> outputAudioTimestampTypes = default;
            IList<VoiceLiveToolDefinition> tools = default;
            float? temperature = default;
            BinaryData voiceInternal = default;
            BinaryData maxResponseOutputTokens = default;
            BinaryData toolChoice = default;
            BinaryData turnDetection = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("model"u8))
                {
                    model = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("modalities"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<InputModality> array = new List<InputModality>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(new InputModality(item.GetString()));
                    }
                    modalities = array;
                    continue;
                }
                if (prop.NameEquals("animation"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    animation = AnimationOptions.DeserializeAnimationOptions(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("instructions"u8))
                {
                    instructions = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("input_audio_sampling_rate"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputAudioSamplingRate = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("input_audio_format"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputAudioFormat = new InputAudioFormat(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("output_audio_format"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    outputAudioFormat = new OutputAudioFormat(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("input_audio_noise_reduction"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputAudioNoiseReduction = AudioNoiseReduction.DeserializeAudioNoiseReduction(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("input_audio_echo_cancellation"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputAudioEchoCancellation = AudioEchoCancellation.DeserializeAudioEchoCancellation(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("avatar"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    avatar = AvatarConfiguration.DeserializeAvatarConfiguration(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("input_audio_transcription"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputAudioTranscription = AudioInputTranscriptionSettings.DeserializeAudioInputTranscriptionSettings(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("output_audio_timestamp_types"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AudioTimestampType> array = new List<AudioTimestampType>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(new AudioTimestampType(item.GetString()));
                    }
                    outputAudioTimestampTypes = array;
                    continue;
                }
                if (prop.NameEquals("tools"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VoiceLiveToolDefinition> array = new List<VoiceLiveToolDefinition>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(VoiceLiveToolDefinition.DeserializeVoiceLiveToolDefinition(item, options));
                    }
                    tools = array;
                    continue;
                }
                if (prop.NameEquals("temperature"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    temperature = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("voice"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    voiceInternal = BinaryData.FromString(prop.Value.GetRawText());
                    continue;
                }
                if (prop.NameEquals("max_response_output_tokens"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxResponseOutputTokens = BinaryData.FromString(prop.Value.GetRawText());
                    continue;
                }
                if (prop.NameEquals("tool_choice"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toolChoice = BinaryData.FromString(prop.Value.GetRawText());
                    continue;
                }
                if (prop.NameEquals("turn_detection"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    turnDetection = BinaryData.FromString(prop.Value.GetRawText());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new VoiceLiveSessionOptions(
                model,
                modalities ?? new ChangeTrackingList<InputModality>(),
                animation,
                instructions,
                inputAudioSamplingRate,
                inputAudioFormat,
                outputAudioFormat,
                inputAudioNoiseReduction,
                inputAudioEchoCancellation,
                avatar,
                inputAudioTranscription,
                outputAudioTimestampTypes ?? new ChangeTrackingList<AudioTimestampType>(),
                tools ?? new ChangeTrackingList<VoiceLiveToolDefinition>(),
                temperature,
                voiceInternal,
                maxResponseOutputTokens,
                toolChoice,
                turnDetection,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<VoiceLiveSessionOptions>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VoiceLiveSessionOptions>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(VoiceLiveSessionOptions)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        VoiceLiveSessionOptions IPersistableModel<VoiceLiveSessionOptions>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual VoiceLiveSessionOptions PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VoiceLiveSessionOptions>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeVoiceLiveSessionOptions(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(VoiceLiveSessionOptions)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<VoiceLiveSessionOptions>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
