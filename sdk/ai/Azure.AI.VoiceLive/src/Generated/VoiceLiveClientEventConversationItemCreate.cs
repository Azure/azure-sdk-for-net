// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary>
    /// Add a new Item to the Conversation's context, including messages, function
    /// calls, and function call responses. This event can be used both to populate a
    /// "history" of the conversation and to add new items mid-stream, but has the
    /// current limitation that it cannot populate assistant audio messages.
    ///
    /// If successful, the server will respond with a `conversation.item.created`
    /// event, otherwise an `error` event will be sent.
    /// </summary>
    public partial class VoiceLiveClientEventConversationItemCreate : VoiceLiveClientEvent
    {
        /// <summary> Initializes a new instance of <see cref="VoiceLiveClientEventConversationItemCreate"/>. </summary>
        internal VoiceLiveClientEventConversationItemCreate()
        {
            Type = VoiceLiveClientEventType.ConversationItemCreate;
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveClientEventConversationItemCreate"/>. </summary>
        /// <param name="type"> The type of event. </param>
        /// <param name="eventId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="previousItemId">
        /// The ID of the preceding item after which the new item will be inserted.
        /// If not set, the new item will be appended to the end of the conversation.
        /// If set to `root`, the new item will be added to the beginning of the conversation.
        /// If set to an existing ID, it allows an item to be inserted mid-conversation. If the
        /// ID cannot be found, an error will be returned and the item will not be added.
        /// </param>
        /// <param name="item"></param>
        internal VoiceLiveClientEventConversationItemCreate(VoiceLiveClientEventType type, string eventId, IDictionary<string, BinaryData> serializedAdditionalRawData, string previousItemId, VoiceLiveConversationItem item) : base(type, eventId, serializedAdditionalRawData)
        {
            PreviousItemId = previousItemId;
            Item = item;
        }

        /// <summary>
        /// The ID of the preceding item after which the new item will be inserted.
        /// If not set, the new item will be appended to the end of the conversation.
        /// If set to `root`, the new item will be added to the beginning of the conversation.
        /// If set to an existing ID, it allows an item to be inserted mid-conversation. If the
        /// ID cannot be found, an error will be returned and the item will not be added.
        /// </summary>
        public string PreviousItemId { get; }
        /// <summary> Gets the item. </summary>
        public VoiceLiveConversationItem Item { get; }
    }
}
