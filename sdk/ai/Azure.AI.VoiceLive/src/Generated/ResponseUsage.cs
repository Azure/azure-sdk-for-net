// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> The ResponseUsage. </summary>
    public partial class ResponseUsage
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ResponseUsage"/>. </summary>
        internal ResponseUsage()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ResponseUsage"/>. </summary>
        /// <param name="totalTokens">
        /// The total number of tokens in the Response including input and output
        /// text and audio tokens.
        /// </param>
        /// <param name="inputTokens">
        /// The number of input tokens used in the Response, including text and
        /// audio tokens.
        /// </param>
        /// <param name="outputTokens">
        /// The number of output tokens sent in the Response, including text and
        /// audio tokens.
        /// </param>
        /// <param name="inputTokenDetails"> Details about the input tokens used in the Response. </param>
        /// <param name="outputTokenDetails"> Details about the output tokens used in the Response. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ResponseUsage(int? totalTokens, int? inputTokens, int? outputTokens, ResponseUsageInputTokenDetails inputTokenDetails, ResponseUsageOutputTokenDetails outputTokenDetails, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TotalTokens = totalTokens;
            InputTokens = inputTokens;
            OutputTokens = outputTokens;
            InputTokenDetails = inputTokenDetails;
            OutputTokenDetails = outputTokenDetails;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// The total number of tokens in the Response including input and output
        /// text and audio tokens.
        /// </summary>
        public int? TotalTokens { get; }
        /// <summary>
        /// The number of input tokens used in the Response, including text and
        /// audio tokens.
        /// </summary>
        public int? InputTokens { get; }
        /// <summary>
        /// The number of output tokens sent in the Response, including text and
        /// audio tokens.
        /// </summary>
        public int? OutputTokens { get; }
        /// <summary> Details about the input tokens used in the Response. </summary>
        public ResponseUsageInputTokenDetails InputTokenDetails { get; }
        /// <summary> Details about the output tokens used in the Response. </summary>
        public ResponseUsageOutputTokenDetails OutputTokenDetails { get; }
    }
}
