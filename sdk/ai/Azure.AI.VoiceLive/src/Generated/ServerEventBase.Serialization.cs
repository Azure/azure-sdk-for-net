// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    /// <summary>
    /// A voicelive server event.
    /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="ServerEventSessionAvatarConnecting"/>, <see cref="ServerEventSessionCreated"/>, <see cref="ServerEventSessionUpdated"/>, <see cref="ServerEventError"/>, <see cref="ServerEventResponseTextDelta"/>, <see cref="ServerEventResponseAudioDelta"/>, <see cref="ServerEventConversationItemCreated"/>, <see cref="ServerEventConversationItemDeleted"/>, <see cref="ServerEventConversationItemRetrieved"/>, <see cref="ServerEventConversationItemTruncated"/>, <see cref="ServerEventConversationItemInputAudioTranscriptionCompleted"/>, <see cref="ServerEventConversationItemInputAudioTranscriptionDelta"/>, <see cref="ServerEventConversationItemInputAudioTranscriptionFailed"/>, <see cref="ServerEventInputAudioBufferCommitted"/>, <see cref="ServerEventInputAudioBufferCleared"/>, <see cref="ServerEventInputAudioBufferSpeechStarted"/>, <see cref="ServerEventInputAudioBufferSpeechStopped"/>, <see cref="ServerEventResponseCreated"/>, <see cref="ServerEventResponseDone"/>, <see cref="ServerEventResponseOutputItemAdded"/>, <see cref="ServerEventResponseOutputItemDone"/>, <see cref="ServerEventResponseContentPartAdded"/>, <see cref="ServerEventResponseContentPartDone"/>, <see cref="ServerEventResponseTextDone"/>, <see cref="ServerEventResponseAudioTranscriptDelta"/>, <see cref="ServerEventResponseAudioTranscriptDone"/>, <see cref="ServerEventResponseAudioDone"/>, <see cref="ServerEventResponseFunctionCallArgumentsDelta"/>, <see cref="ServerEventResponseFunctionCallArgumentsDone"/>, <see cref="ServerEventResponseAnimationBlendshapeDelta"/>, <see cref="ServerEventResponseAnimationBlendshapeDone"/>, <see cref="ServerEventResponseEmotionHypothesis"/>, <see cref="ServerEventResponseAudioTimestampDelta"/>, <see cref="ServerEventResponseAudioTimestampDone"/>, <see cref="ServerEventResponseAnimationVisemeDelta"/>, and <see cref="ServerEventResponseAnimationVisemeDone"/>.
    /// </summary>
    [PersistableModelProxy(typeof(UnknownServerEventBase))]
    public abstract partial class ServerEventBase : IJsonModel<ServerEventBase>
    {
        /// <summary> Initializes a new instance of <see cref="ServerEventBase"/> for deserialization. </summary>
        internal ServerEventBase()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ServerEventBase>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ServerEventBase>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ServerEventBase)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            if (Optional.IsDefined(EventId))
            {
                writer.WritePropertyName("event_id"u8);
                writer.WriteStringValue(EventId);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ServerEventBase IJsonModel<ServerEventBase>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ServerEventBase JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ServerEventBase>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ServerEventBase)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeServerEventBase(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static ServerEventBase DeserializeServerEventBase(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type"u8, out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "session.avatar.connecting":
                        return ServerEventSessionAvatarConnecting.DeserializeServerEventSessionAvatarConnecting(element, options);
                    case "session.created":
                        return ServerEventSessionCreated.DeserializeServerEventSessionCreated(element, options);
                    case "session.updated":
                        return ServerEventSessionUpdated.DeserializeServerEventSessionUpdated(element, options);
                    case "error":
                        return ServerEventError.DeserializeServerEventError(element, options);
                    case "response.text.delta":
                        return ServerEventResponseTextDelta.DeserializeServerEventResponseTextDelta(element, options);
                    case "response.audio.delta":
                        return ServerEventResponseAudioDelta.DeserializeServerEventResponseAudioDelta(element, options);
                    case "conversation.item.created":
                        return ServerEventConversationItemCreated.DeserializeServerEventConversationItemCreated(element, options);
                    case "conversation.item.deleted":
                        return ServerEventConversationItemDeleted.DeserializeServerEventConversationItemDeleted(element, options);
                    case "conversation.item.retrieved":
                        return ServerEventConversationItemRetrieved.DeserializeServerEventConversationItemRetrieved(element, options);
                    case "conversation.item.truncated":
                        return ServerEventConversationItemTruncated.DeserializeServerEventConversationItemTruncated(element, options);
                    case "conversation.item.input_audio_transcription.completed":
                        return ServerEventConversationItemInputAudioTranscriptionCompleted.DeserializeServerEventConversationItemInputAudioTranscriptionCompleted(element, options);
                    case "conversation.item.input_audio_transcription.delta":
                        return ServerEventConversationItemInputAudioTranscriptionDelta.DeserializeServerEventConversationItemInputAudioTranscriptionDelta(element, options);
                    case "conversation.item.input_audio_transcription.failed":
                        return ServerEventConversationItemInputAudioTranscriptionFailed.DeserializeServerEventConversationItemInputAudioTranscriptionFailed(element, options);
                    case "input_audio_buffer.committed":
                        return ServerEventInputAudioBufferCommitted.DeserializeServerEventInputAudioBufferCommitted(element, options);
                    case "input_audio_buffer.cleared":
                        return ServerEventInputAudioBufferCleared.DeserializeServerEventInputAudioBufferCleared(element, options);
                    case "input_audio_buffer.speech_started":
                        return ServerEventInputAudioBufferSpeechStarted.DeserializeServerEventInputAudioBufferSpeechStarted(element, options);
                    case "input_audio_buffer.speech_stopped":
                        return ServerEventInputAudioBufferSpeechStopped.DeserializeServerEventInputAudioBufferSpeechStopped(element, options);
                    case "response.created":
                        return ServerEventResponseCreated.DeserializeServerEventResponseCreated(element, options);
                    case "response.done":
                        return ServerEventResponseDone.DeserializeServerEventResponseDone(element, options);
                    case "response.output_item.added":
                        return ServerEventResponseOutputItemAdded.DeserializeServerEventResponseOutputItemAdded(element, options);
                    case "response.output_item.done":
                        return ServerEventResponseOutputItemDone.DeserializeServerEventResponseOutputItemDone(element, options);
                    case "response.content_part.added":
                        return ServerEventResponseContentPartAdded.DeserializeServerEventResponseContentPartAdded(element, options);
                    case "response.content_part.done":
                        return ServerEventResponseContentPartDone.DeserializeServerEventResponseContentPartDone(element, options);
                    case "response.text.done":
                        return ServerEventResponseTextDone.DeserializeServerEventResponseTextDone(element, options);
                    case "response.audio_transcript.delta":
                        return ServerEventResponseAudioTranscriptDelta.DeserializeServerEventResponseAudioTranscriptDelta(element, options);
                    case "response.audio_transcript.done":
                        return ServerEventResponseAudioTranscriptDone.DeserializeServerEventResponseAudioTranscriptDone(element, options);
                    case "response.audio.done":
                        return ServerEventResponseAudioDone.DeserializeServerEventResponseAudioDone(element, options);
                    case "response.function_call_arguments.delta":
                        return ServerEventResponseFunctionCallArgumentsDelta.DeserializeServerEventResponseFunctionCallArgumentsDelta(element, options);
                    case "response.function_call_arguments.done":
                        return ServerEventResponseFunctionCallArgumentsDone.DeserializeServerEventResponseFunctionCallArgumentsDone(element, options);
                    case "response.animation_blendshapes.delta":
                        return ServerEventResponseAnimationBlendshapeDelta.DeserializeServerEventResponseAnimationBlendshapeDelta(element, options);
                    case "response.animation_blendshapes.done":
                        return ServerEventResponseAnimationBlendshapeDone.DeserializeServerEventResponseAnimationBlendshapeDone(element, options);
                    case "response.emotion_hypothesis":
                        return ServerEventResponseEmotionHypothesis.DeserializeServerEventResponseEmotionHypothesis(element, options);
                    case "response.audio_timestamp.delta":
                        return ServerEventResponseAudioTimestampDelta.DeserializeServerEventResponseAudioTimestampDelta(element, options);
                    case "response.audio_timestamp.done":
                        return ServerEventResponseAudioTimestampDone.DeserializeServerEventResponseAudioTimestampDone(element, options);
                    case "response.animation_viseme.delta":
                        return ServerEventResponseAnimationVisemeDelta.DeserializeServerEventResponseAnimationVisemeDelta(element, options);
                    case "response.animation_viseme.done":
                        return ServerEventResponseAnimationVisemeDone.DeserializeServerEventResponseAnimationVisemeDone(element, options);
                }
            }
            return UnknownServerEventBase.DeserializeUnknownServerEventBase(element, options);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ServerEventBase>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ServerEventBase>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ServerEventBase)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ServerEventBase IPersistableModel<ServerEventBase>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ServerEventBase PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ServerEventBase>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeServerEventBase(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ServerEventBase)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ServerEventBase>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
