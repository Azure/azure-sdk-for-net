// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary> The VoiceLiveModality. </summary>
    public readonly partial struct VoiceLiveModality : IEquatable<VoiceLiveModality>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VoiceLiveModality"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VoiceLiveModality(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TextValue = "text";
        private const string AudioValue = "audio";
        private const string AnimationValue = "animation";
        private const string AvatarValue = "avatar";

        /// <summary> text. </summary>
        public static VoiceLiveModality Text { get; } = new VoiceLiveModality(TextValue);
        /// <summary> audio. </summary>
        public static VoiceLiveModality Audio { get; } = new VoiceLiveModality(AudioValue);
        /// <summary> animation. </summary>
        public static VoiceLiveModality Animation { get; } = new VoiceLiveModality(AnimationValue);
        /// <summary> avatar. </summary>
        public static VoiceLiveModality Avatar { get; } = new VoiceLiveModality(AvatarValue);
        /// <summary> Determines if two <see cref="VoiceLiveModality"/> values are the same. </summary>
        public static bool operator ==(VoiceLiveModality left, VoiceLiveModality right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VoiceLiveModality"/> values are not the same. </summary>
        public static bool operator !=(VoiceLiveModality left, VoiceLiveModality right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VoiceLiveModality"/>. </summary>
        public static implicit operator VoiceLiveModality(string value) => new VoiceLiveModality(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VoiceLiveModality other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VoiceLiveModality other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
