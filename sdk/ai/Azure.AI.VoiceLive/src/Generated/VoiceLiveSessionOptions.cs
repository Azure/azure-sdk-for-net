// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> The VoiceLiveSessionOptions. </summary>
    public partial class VoiceLiveSessionOptions
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="VoiceLiveSessionOptions"/>. </summary>
        public VoiceLiveSessionOptions()
        {
            Modalities = new ChangeTrackingList<InputModality>();
            OutputAudioTimestampTypes = new ChangeTrackingList<AudioTimestampType>();
            Tools = new ChangeTrackingList<VoiceLiveToolDefinition>();
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveSessionOptions"/>. </summary>
        /// <param name="model"></param>
        /// <param name="modalities"></param>
        /// <param name="animation"></param>
        /// <param name="instructions"></param>
        /// <param name="inputAudio"></param>
        /// <param name="inputAudioSamplingRate"></param>
        /// <param name="inputAudioFormat"></param>
        /// <param name="outputAudioFormat"></param>
        /// <param name="turnDetection"></param>
        /// <param name="inputAudioNoiseReduction"></param>
        /// <param name="inputAudioEchoCancellation"></param>
        /// <param name="avatar"></param>
        /// <param name="inputAudioTranscription"></param>
        /// <param name="outputAudioTimestampTypes"></param>
        /// <param name="tools"></param>
        /// <param name="temperature"></param>
        /// <param name="agent"></param>
        /// <param name="voiceInternal"></param>
        /// <param name="maxResponseOutputTokens"></param>
        /// <param name="toolChoice"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal VoiceLiveSessionOptions(string model, IList<InputModality> modalities, AnimationOptions animation, string instructions, InputAudio inputAudio, int? inputAudioSamplingRate, AudioFormat? inputAudioFormat, AudioFormat? outputAudioFormat, TurnDetection turnDetection, AudioNoiseReduction inputAudioNoiseReduction, AudioEchoCancellation inputAudioEchoCancellation, AvatarConfiguration avatar, AudioInputTranscriptionSettings inputAudioTranscription, IList<AudioTimestampType> outputAudioTimestampTypes, IList<VoiceLiveToolDefinition> tools, float? temperature, RespondingAgentOptions agent, BinaryData voiceInternal, BinaryData maxResponseOutputTokens, BinaryData toolChoice, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Model = model;
            Modalities = modalities;
            Animation = animation;
            Instructions = instructions;
            InputAudio = inputAudio;
            InputAudioSamplingRate = inputAudioSamplingRate;
            InputAudioFormat = inputAudioFormat;
            OutputAudioFormat = outputAudioFormat;
            TurnDetection = turnDetection;
            InputAudioNoiseReduction = inputAudioNoiseReduction;
            InputAudioEchoCancellation = inputAudioEchoCancellation;
            Avatar = avatar;
            InputAudioTranscription = inputAudioTranscription;
            OutputAudioTimestampTypes = outputAudioTimestampTypes;
            Tools = tools;
            Temperature = temperature;
            Agent = agent;
            VoiceInternal = voiceInternal;
            _maxResponseOutputTokens = maxResponseOutputTokens;
            _toolChoice = toolChoice;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets or sets the Model. </summary>
        public string Model { get; set; }

        /// <summary> Gets the Modalities. </summary>
        public IList<InputModality> Modalities { get; }

        /// <summary> Gets or sets the Animation. </summary>
        public AnimationOptions Animation { get; set; }

        /// <summary> Gets or sets the Instructions. </summary>
        public string Instructions { get; set; }

        /// <summary> Gets or sets the InputAudio. </summary>
        public InputAudio InputAudio { get; set; }

        /// <summary> Gets or sets the InputAudioSamplingRate. </summary>
        public int? InputAudioSamplingRate { get; set; }

        /// <summary> Gets or sets the InputAudioFormat. </summary>
        public AudioFormat? InputAudioFormat { get; set; }

        /// <summary> Gets or sets the OutputAudioFormat. </summary>
        public AudioFormat? OutputAudioFormat { get; set; }

        /// <summary> Gets or sets the TurnDetection. </summary>
        public TurnDetection TurnDetection { get; set; }

        /// <summary> Gets or sets the InputAudioNoiseReduction. </summary>
        public AudioNoiseReduction InputAudioNoiseReduction { get; set; }

        /// <summary> Gets or sets the InputAudioEchoCancellation. </summary>
        public AudioEchoCancellation InputAudioEchoCancellation { get; set; }

        /// <summary> Gets or sets the Avatar. </summary>
        public AvatarConfiguration Avatar { get; set; }

        /// <summary> Gets or sets the InputAudioTranscription. </summary>
        public AudioInputTranscriptionSettings InputAudioTranscription { get; set; }

        /// <summary> Gets the OutputAudioTimestampTypes. </summary>
        public IList<AudioTimestampType> OutputAudioTimestampTypes { get; }

        /// <summary> Gets the Tools. </summary>
        public IList<VoiceLiveToolDefinition> Tools { get; }

        /// <summary> Gets or sets the Temperature. </summary>
        public float? Temperature { get; set; }

        /// <summary> Gets or sets the Agent. </summary>
        public RespondingAgentOptions Agent { get; set; }
    }
}
