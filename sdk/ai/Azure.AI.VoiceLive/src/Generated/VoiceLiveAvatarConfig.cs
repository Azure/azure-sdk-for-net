// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> Configuration for avatar streaming and behavior during the session. </summary>
    public partial class VoiceLiveAvatarConfig
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VoiceLiveAvatarConfig"/>. </summary>
        /// <param name="character"> The character name or ID used for the avatar. </param>
        /// <param name="customized"> Indicates whether the avatar is customized or not. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="character"/> is null. </exception>
        public VoiceLiveAvatarConfig(string character, bool customized)
        {
            Argument.AssertNotNull(character, nameof(character));

            IceServers = new ChangeTrackingList<IceServer>();
            Character = character;
            Customized = customized;
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveAvatarConfig"/>. </summary>
        /// <param name="iceServers"> Optional list of ICE servers to use for WebRTC connection establishment. </param>
        /// <param name="character"> The character name or ID used for the avatar. </param>
        /// <param name="style"> Optional avatar style, such as emotional tone or speaking style. </param>
        /// <param name="customized"> Indicates whether the avatar is customized or not. </param>
        /// <param name="video"> Optional video configuration including resolution, bitrate, and codec. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VoiceLiveAvatarConfig(IList<IceServer> iceServers, string character, string style, bool customized, VideoParams video, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            IceServers = iceServers;
            Character = character;
            Style = style;
            Customized = customized;
            Video = video;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveAvatarConfig"/> for deserialization. </summary>
        internal VoiceLiveAvatarConfig()
        {
        }

        /// <summary> Optional list of ICE servers to use for WebRTC connection establishment. </summary>
        public IList<IceServer> IceServers { get; }
        /// <summary> The character name or ID used for the avatar. </summary>
        public string Character { get; set; }
        /// <summary> Optional avatar style, such as emotional tone or speaking style. </summary>
        public string Style { get; set; }
        /// <summary> Indicates whether the avatar is customized or not. </summary>
        public bool Customized { get; set; }
        /// <summary> Optional video configuration including resolution, bitrate, and codec. </summary>
        public VideoParams Video { get; set; }
    }
}
