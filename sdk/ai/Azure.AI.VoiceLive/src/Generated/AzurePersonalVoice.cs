// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> Azure personal voice configuration. </summary>
    public partial class AzurePersonalVoice : AzureVoice
    {
        /// <summary> Initializes a new instance of <see cref="AzurePersonalVoice"/>. </summary>
        /// <param name="name"> Voice name cannot be empty. </param>
        /// <param name="model"> Underlying neural model to use for personal voice. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public AzurePersonalVoice(string name, PersonalVoiceModels model) : base(AzureVoiceType.AzurePersonal)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            Model = model;
        }

        /// <summary> Initializes a new instance of <see cref="AzurePersonalVoice"/>. </summary>
        /// <param name="type"> The type of the Azure voice. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="name"> Voice name cannot be empty. </param>
        /// <param name="temperature"> Temperature must be between 0.0 and 1.0. </param>
        /// <param name="model"> Underlying neural model to use for personal voice. </param>
        internal AzurePersonalVoice(AzureVoiceType @type, IDictionary<string, BinaryData> additionalBinaryDataProperties, string name, float? temperature, PersonalVoiceModels model) : base(@type, additionalBinaryDataProperties)
        {
            Name = name;
            Temperature = temperature;
            Model = model;
        }

        /// <summary> Voice name cannot be empty. </summary>
        public string Name { get; set; }

        /// <summary> Temperature must be between 0.0 and 1.0. </summary>
        public float? Temperature { get; set; }

        /// <summary> Underlying neural model to use for personal voice. </summary>
        public PersonalVoiceModels Model { get; set; }
    }
}
