// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary></summary>
    internal readonly partial struct TurnDetectionType : IEquatable<TurnDetectionType>
    {
        private readonly string _value;
        private const string ServerVadValue = "server_vad";
        private const string AzureSemanticVadValue = "azure_semantic_vad";
        private const string AzureSemanticVadEnValue = "azure_semantic_vad_en";
        private const string AzureSemanticVadMultilingualValue = "azure_semantic_vad_multilingual";

        /// <summary> Initializes a new instance of <see cref="TurnDetectionType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TurnDetectionType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Gets the ServerVad. </summary>
        public static TurnDetectionType ServerVad { get; } = new TurnDetectionType(ServerVadValue);

        /// <summary> Gets the AzureSemanticVad. </summary>
        public static TurnDetectionType AzureSemanticVad { get; } = new TurnDetectionType(AzureSemanticVadValue);

        /// <summary> Gets the AzureSemanticVadEn. </summary>
        public static TurnDetectionType AzureSemanticVadEn { get; } = new TurnDetectionType(AzureSemanticVadEnValue);

        /// <summary> Gets the AzureSemanticVadMultilingual. </summary>
        public static TurnDetectionType AzureSemanticVadMultilingual { get; } = new TurnDetectionType(AzureSemanticVadMultilingualValue);

        /// <summary> Determines if two <see cref="TurnDetectionType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(TurnDetectionType left, TurnDetectionType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="TurnDetectionType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(TurnDetectionType left, TurnDetectionType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="TurnDetectionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator TurnDetectionType(string value) => new TurnDetectionType(value);

        /// <summary> Converts a string to a <see cref="TurnDetectionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator TurnDetectionType?(string value) => value == null ? null : new TurnDetectionType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TurnDetectionType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(TurnDetectionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
