// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.VoiceLive
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIVoiceLiveModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventSessionUpdate"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="session"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventSessionUpdate"/> instance for mocking. </returns>
        public static VoiceLiveClientEventSessionUpdate VoiceLiveClientEventSessionUpdate(string eventId = null, VoiceLiveRequestSession session = null)
        {
            return new VoiceLiveClientEventSessionUpdate(VoiceLiveClientEventType.SessionUpdate, eventId, serializedAdditionalRawData: null, session);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveInputAudio"/>. </summary>
        /// <param name="model"> The name of the model to use for input audio (currently only 'azure-standard' is supported). </param>
        /// <param name="phraseList"> Optional list of phrases to bias the speech recognition engine. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveInputAudio"/> instance for mocking. </returns>
        public static VoiceLiveInputAudio VoiceLiveInputAudio(VoiceLiveInputAudioModel model = default, IEnumerable<string> phraseList = null)
        {
            phraseList ??= new List<string>();

            return new VoiceLiveInputAudio(model, phraseList?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveAudioNoiseReduction"/>. </summary>
        /// <param name="type"> The type of noise reduction model. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveAudioNoiseReduction"/> instance for mocking. </returns>
        public static VoiceLiveAudioNoiseReduction VoiceLiveAudioNoiseReduction(VoiceLiveAudioNoiseReductionType type = default)
        {
            return new VoiceLiveAudioNoiseReduction(type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveAudioEchoCancellation"/>. </summary>
        /// <param name="type"> The type of echo cancellation model to use. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveAudioEchoCancellation"/> instance for mocking. </returns>
        public static VoiceLiveAudioEchoCancellation VoiceLiveAudioEchoCancellation(VoiceLiveAudioEchoCancellationType type = default)
        {
            return new VoiceLiveAudioEchoCancellation(type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventSessionAvatarConnect"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="clientSdp"> The client's SDP offer. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventSessionAvatarConnect"/> instance for mocking. </returns>
        public static VoiceLiveClientEventSessionAvatarConnect VoiceLiveClientEventSessionAvatarConnect(string eventId = null, string clientSdp = null)
        {
            return new VoiceLiveClientEventSessionAvatarConnect(VoiceLiveClientEventType.SessionAvatarConnect, eventId, serializedAdditionalRawData: null, clientSdp);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventInputAudioTurnStart"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="turnId"> Unique identifier for the input audio turn. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventInputAudioTurnStart"/> instance for mocking. </returns>
        public static VoiceLiveClientEventInputAudioTurnStart VoiceLiveClientEventInputAudioTurnStart(string eventId = null, string turnId = null)
        {
            return new VoiceLiveClientEventInputAudioTurnStart(VoiceLiveClientEventType.InputAudioTurnStart, eventId, serializedAdditionalRawData: null, turnId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventInputAudioTurnAppend"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="turnId"> The ID of the turn this audio is part of. </param>
        /// <param name="audio"> Base64-encoded audio chunk. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventInputAudioTurnAppend"/> instance for mocking. </returns>
        public static VoiceLiveClientEventInputAudioTurnAppend VoiceLiveClientEventInputAudioTurnAppend(string eventId = null, string turnId = null, string audio = null)
        {
            return new VoiceLiveClientEventInputAudioTurnAppend(VoiceLiveClientEventType.InputAudioTurnAppend, eventId, serializedAdditionalRawData: null, turnId, audio);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventInputAudioTurnEnd"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="turnId"> The ID of the audio turn being ended. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventInputAudioTurnEnd"/> instance for mocking. </returns>
        public static VoiceLiveClientEventInputAudioTurnEnd VoiceLiveClientEventInputAudioTurnEnd(string eventId = null, string turnId = null)
        {
            return new VoiceLiveClientEventInputAudioTurnEnd(VoiceLiveClientEventType.InputAudioTurnEnd, eventId, serializedAdditionalRawData: null, turnId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventInputAudioTurnCancel"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="turnId"> The ID of the turn to cancel. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventInputAudioTurnCancel"/> instance for mocking. </returns>
        public static VoiceLiveClientEventInputAudioTurnCancel VoiceLiveClientEventInputAudioTurnCancel(string eventId = null, string turnId = null)
        {
            return new VoiceLiveClientEventInputAudioTurnCancel(VoiceLiveClientEventType.InputAudioTurnCancel, eventId, serializedAdditionalRawData: null, turnId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventInputAudioBufferAppend"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="audio">
        /// Base64-encoded audio. This must be in the format specified by the
        /// `input_audio_format` field in the session configuration.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventInputAudioBufferAppend"/> instance for mocking. </returns>
        public static VoiceLiveClientEventInputAudioBufferAppend VoiceLiveClientEventInputAudioBufferAppend(string eventId = null, string audio = null)
        {
            return new VoiceLiveClientEventInputAudioBufferAppend(VoiceLiveClientEventType.InputAudioBufferAppend, eventId, serializedAdditionalRawData: null, audio);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventConversationItemCreate"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="previousItemId">
        /// The ID of the preceding item after which the new item will be inserted.
        /// If not set, the new item will be appended to the end of the conversation.
        /// If set to `root`, the new item will be added to the beginning of the conversation.
        /// If set to an existing ID, it allows an item to be inserted mid-conversation. If the
        /// ID cannot be found, an error will be returned and the item will not be added.
        /// </param>
        /// <param name="item"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventConversationItemCreate"/> instance for mocking. </returns>
        public static VoiceLiveClientEventConversationItemCreate VoiceLiveClientEventConversationItemCreate(string eventId = null, string previousItemId = null, VoiceLiveConversationItem item = null)
        {
            return new VoiceLiveClientEventConversationItemCreate(VoiceLiveClientEventType.ConversationItemCreate, eventId, serializedAdditionalRawData: null, previousItemId, item);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveConversationItem"/>. </summary>
        /// <param name="id"></param>
        /// <param name="arguments"></param>
        /// <param name="callId"></param>
        /// <param name="content"></param>
        /// <param name="name"></param>
        /// <param name="object"></param>
        /// <param name="output"></param>
        /// <param name="role"></param>
        /// <param name="status"></param>
        /// <param name="type"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveConversationItem"/> instance for mocking. </returns>
        public static VoiceLiveConversationItem VoiceLiveConversationItem(string id = null, string arguments = null, string callId = null, IEnumerable<VoiceLiveConversationItemContent> content = null, string name = null, VoiceLiveConversationItemObject? @object = null, string output = null, VoiceLiveConversationItemRole? role = null, VoiceLiveConversationItemStatus? status = null, VoiceLiveConversationItemType? type = null)
        {
            content ??= new List<VoiceLiveConversationItemContent>();

            return new VoiceLiveConversationItem(
                id,
                arguments,
                callId,
                content?.ToList(),
                name,
                @object,
                output,
                role,
                status,
                type,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveConversationItemContent"/>. </summary>
        /// <param name="type"> The content type (`input_text`, `input_audio`, `item_reference`, `text`). </param>
        /// <param name="text"> The text content, used for `input_text` and `text` content types. </param>
        /// <param name="id">
        /// ID of a previous conversation item to reference (for `item_reference`
        /// content types in `response.create` events). These can reference both
        /// client and server created items.
        /// </param>
        /// <param name="audio"> Base64-encoded audio bytes, used for `input_audio` content type. </param>
        /// <param name="transcript"> The transcript of the audio, used for `input_audio` content type. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveConversationItemContent"/> instance for mocking. </returns>
        public static VoiceLiveConversationItemContent VoiceLiveConversationItemContent(VoiceLiveConversationItemContentType? type = null, string text = null, string id = null, string audio = null, string transcript = null)
        {
            return new VoiceLiveConversationItemContent(
                type,
                text,
                id,
                audio,
                transcript,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventConversationItemTruncate"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId">
        /// The ID of the assistant message item to truncate. Only assistant message
        /// items can be truncated.
        /// </param>
        /// <param name="contentIndex"> The index of the content part to truncate. Set this to 0. </param>
        /// <param name="audioEndMs">
        /// Inclusive duration up to which audio is truncated, in milliseconds. If
        /// the audio_end_ms is greater than the actual audio duration, the server
        /// will respond with an error.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventConversationItemTruncate"/> instance for mocking. </returns>
        public static VoiceLiveClientEventConversationItemTruncate VoiceLiveClientEventConversationItemTruncate(string eventId = null, string itemId = null, int contentIndex = default, int audioEndMs = default)
        {
            return new VoiceLiveClientEventConversationItemTruncate(
                VoiceLiveClientEventType.ConversationItemTruncate,
                eventId,
                serializedAdditionalRawData: null,
                itemId,
                contentIndex,
                audioEndMs);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventConversationItemDelete"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the item to delete. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventConversationItemDelete"/> instance for mocking. </returns>
        public static VoiceLiveClientEventConversationItemDelete VoiceLiveClientEventConversationItemDelete(string eventId = null, string itemId = null)
        {
            return new VoiceLiveClientEventConversationItemDelete(VoiceLiveClientEventType.ConversationItemDelete, eventId, serializedAdditionalRawData: null, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventResponseCreate"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="response"></param>
        /// <param name="additionalInstructions"> additional instructions (system prompt) appended to the default instructions of the session. Only affects this response only. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventResponseCreate"/> instance for mocking. </returns>
        public static VoiceLiveClientEventResponseCreate VoiceLiveClientEventResponseCreate(string eventId = null, VoiceLiveResponseCreateParams response = null, string additionalInstructions = null)
        {
            return new VoiceLiveClientEventResponseCreate(VoiceLiveClientEventType.ResponseCreate, eventId, serializedAdditionalRawData: null, response, additionalInstructions);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseCreateParams"/>. </summary>
        /// <param name="commit"> Whether to commit the response to the conversation. Defaults to true. </param>
        /// <param name="cancelPrevious"> Whether to cancel any ongoing generation before starting this one. Defaults to true. </param>
        /// <param name="appendInputItems">
        /// Input items to append to the conversation context before generating a response.
        /// Please note <see cref="VoiceLive.VoiceLiveConversationRequestItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveRequestAssistantMessageItem"/>, <see cref="VoiceLive.VoiceLiveRequestFunctionCallItem"/>, <see cref="VoiceLive.VoiceLiveRequestFunctionCallOutputItem"/>, <see cref="VoiceLiveRequestMessageItem"/>, <see cref="VoiceLiveRequestSystemMessageItem"/> and <see cref="VoiceLiveRequestUserMessageItem"/>.
        /// </param>
        /// <param name="inputItems">
        /// Input items to be used as the context for this response.
        /// An empty array clears previous context.
        /// Please note <see cref="VoiceLive.VoiceLiveConversationRequestItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveRequestAssistantMessageItem"/>, <see cref="VoiceLive.VoiceLiveRequestFunctionCallItem"/>, <see cref="VoiceLive.VoiceLiveRequestFunctionCallOutputItem"/>, <see cref="VoiceLiveRequestMessageItem"/>, <see cref="VoiceLiveRequestSystemMessageItem"/> and <see cref="VoiceLiveRequestUserMessageItem"/>.
        /// </param>
        /// <param name="modalities">
        /// The set of modalities the model can respond with. To disable audio,
        /// set this to ["text"].
        /// </param>
        /// <param name="instructions">
        /// The default system instructions (i.e. system message) prepended to model
        /// calls. This field allows the client to guide the model on desired
        /// responses. The model can be instructed on response content and format,
        /// (e.g. "be extremely succinct", "act friendly", "here are examples of good
        /// responses") and on audio behavior (e.g. "talk quickly", "inject emotion
        /// into your voice", "laugh frequently"). The instructions are not guaranteed
        /// to be followed by the model, but they provide guidance to the model on the
        /// desired behavior.
        ///
        /// Note that the server sets default instructions which will be used if this
        /// field is not set and are visible in the `session.created` event at the
        /// start of the session.
        /// </param>
        /// <param name="voice"> supported voice identifiers and configurations. </param>
        /// <param name="outputAudioFormat"> The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. </param>
        /// <param name="tools">
        /// Tools (functions) available to the model.
        /// Please note <see cref="VoiceLiveTool"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveFunctionTool"/>.
        /// </param>
        /// <param name="toolChoice">
        /// How the model chooses tools. Options are `auto`, `none`, `required`, or
        /// specify a function, like `{"type": "function", "function": {"name": "my_function"}}`.
        /// </param>
        /// <param name="temperature"> Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. </param>
        /// <param name="maxOutputTokens">
        /// Maximum number of output tokens for a single assistant response,
        /// inclusive of tool calls. Provide an integer between 1 and 4096 to
        /// limit output tokens, or `inf` for the maximum available tokens for a
        /// given model. Defaults to `inf`.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseCreateParams"/> instance for mocking. </returns>
        public static VoiceLiveResponseCreateParams VoiceLiveResponseCreateParams(bool? commit = null, bool? cancelPrevious = null, IEnumerable<VoiceLiveConversationRequestItem> appendInputItems = null, IEnumerable<VoiceLiveConversationRequestItem> inputItems = null, IEnumerable<VoiceLiveModality> modalities = null, string instructions = null, BinaryData voice = null, VoiceLiveAudioFormat? outputAudioFormat = null, IEnumerable<VoiceLiveTool> tools = null, string toolChoice = null, float? temperature = null, BinaryData maxOutputTokens = null)
        {
            appendInputItems ??= new List<VoiceLiveConversationRequestItem>();
            inputItems ??= new List<VoiceLiveConversationRequestItem>();
            modalities ??= new List<VoiceLiveModality>();
            tools ??= new List<VoiceLiveTool>();

            return new VoiceLiveResponseCreateParams(
                commit,
                cancelPrevious,
                appendInputItems?.ToList(),
                inputItems?.ToList(),
                modalities?.ToList(),
                instructions,
                voice,
                outputAudioFormat,
                tools?.ToList(),
                toolChoice,
                temperature,
                maxOutputTokens,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveConversationRequestItem"/>. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveConversationRequestItem"/> instance for mocking. </returns>
        public static VoiceLiveConversationRequestItem VoiceLiveConversationRequestItem(string type = null, string id = null)
        {
            return new UnknownVoiceLiveConversationRequestItem(type == null ? default : new VoiceLiveItemType(type), id, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveRequestTextContentPart"/>. </summary>
        /// <param name="text"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveRequestTextContentPart"/> instance for mocking. </returns>
        public static VoiceLiveRequestTextContentPart VoiceLiveRequestTextContentPart(string text = null)
        {
            return new VoiceLiveRequestTextContentPart(VoiceLiveContentPartType.InputText, serializedAdditionalRawData: null, text);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveRequestAudioContentPart"/>. </summary>
        /// <param name="transcript"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveRequestAudioContentPart"/> instance for mocking. </returns>
        public static VoiceLiveRequestAudioContentPart VoiceLiveRequestAudioContentPart(string transcript = null)
        {
            return new VoiceLiveRequestAudioContentPart(VoiceLiveContentPartType.InputAudio, serializedAdditionalRawData: null, transcript);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseTextContentPart"/>. </summary>
        /// <param name="text"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseTextContentPart"/> instance for mocking. </returns>
        public static VoiceLiveResponseTextContentPart VoiceLiveResponseTextContentPart(string text = null)
        {
            return new VoiceLiveResponseTextContentPart(VoiceLiveContentPartType.Text, serializedAdditionalRawData: null, text);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseAudioContentPart"/>. </summary>
        /// <param name="transcript"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseAudioContentPart"/> instance for mocking. </returns>
        public static VoiceLiveResponseAudioContentPart VoiceLiveResponseAudioContentPart(string transcript = null)
        {
            return new VoiceLiveResponseAudioContentPart(VoiceLiveContentPartType.Audio, serializedAdditionalRawData: null, transcript);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveRequestFunctionCallItem"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="callId"></param>
        /// <param name="arguments"></param>
        /// <param name="status"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveRequestFunctionCallItem"/> instance for mocking. </returns>
        public static VoiceLiveRequestFunctionCallItem VoiceLiveRequestFunctionCallItem(string id = null, string name = null, string callId = null, string arguments = null, VoiceLiveItemStatus? status = null)
        {
            return new VoiceLiveRequestFunctionCallItem(
                VoiceLiveItemType.FunctionCall,
                id,
                serializedAdditionalRawData: null,
                name,
                callId,
                arguments,
                status);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveRequestFunctionCallOutputItem"/>. </summary>
        /// <param name="id"></param>
        /// <param name="callId"></param>
        /// <param name="output"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveRequestFunctionCallOutputItem"/> instance for mocking. </returns>
        public static VoiceLiveRequestFunctionCallOutputItem VoiceLiveRequestFunctionCallOutputItem(string id = null, string callId = null, string output = null)
        {
            return new VoiceLiveRequestFunctionCallOutputItem(VoiceLiveItemType.FunctionCallOutput, id, serializedAdditionalRawData: null, callId, output);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventResponseCancel"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId">
        /// A specific response ID to cancel - if not provided, will cancel an
        /// in-progress response in the default conversation.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventResponseCancel"/> instance for mocking. </returns>
        public static VoiceLiveClientEventResponseCancel VoiceLiveClientEventResponseCancel(string eventId = null, string responseId = null)
        {
            return new VoiceLiveClientEventResponseCancel(VoiceLiveClientEventType.ResponseCancel, eventId, serializedAdditionalRawData: null, responseId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveClientEventConversationItemRetrieve"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the item to retrieve. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveClientEventConversationItemRetrieve"/> instance for mocking. </returns>
        public static VoiceLiveClientEventConversationItemRetrieve VoiceLiveClientEventConversationItemRetrieve(string eventId = null, string itemId = null)
        {
            return new VoiceLiveClientEventConversationItemRetrieve(VoiceLiveClientEventType.ConversationItemRetrieve, eventId, serializedAdditionalRawData: null, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventSessionUpdated"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="session"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventSessionUpdated"/> instance for mocking. </returns>
        public static VoiceLiveServerEventSessionUpdated VoiceLiveServerEventSessionUpdated(string eventId = null, VoiceLiveResponseSession session = null)
        {
            return new VoiceLiveServerEventSessionUpdated(VoiceLiveServerEventType.SessionUpdated, eventId, serializedAdditionalRawData: null, session);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseSession"/>. </summary>
        /// <param name="id"></param>
        /// <param name="model"></param>
        /// <param name="modalities"></param>
        /// <param name="instructions"></param>
        /// <param name="animation"></param>
        /// <param name="voice"></param>
        /// <param name="inputAudio"></param>
        /// <param name="inputAudioFormat"></param>
        /// <param name="outputAudioFormat"></param>
        /// <param name="inputAudioSamplingRate"></param>
        /// <param name="turnDetection">
        /// Please note <see cref="VoiceLiveTurnDetection"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveAzureSemanticVad"/>, <see cref="VoiceLiveNoTurnDetection"/> and <see cref="VoiceLiveServerVad"/>.
        /// </param>
        /// <param name="inputAudioNoiseReduction"></param>
        /// <param name="inputAudioEchoCancellation"></param>
        /// <param name="avatar"></param>
        /// <param name="inputAudioTranscription"></param>
        /// <param name="outputAudioTimestampTypes"></param>
        /// <param name="tools">
        /// Please note <see cref="VoiceLiveTool"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveFunctionTool"/>.
        /// </param>
        /// <param name="toolChoice"></param>
        /// <param name="temperature"></param>
        /// <param name="maxResponseOutputTokens"></param>
        /// <param name="agent"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseSession"/> instance for mocking. </returns>
        public static VoiceLiveResponseSession VoiceLiveResponseSession(string id = null, string model = null, IEnumerable<VoiceLiveModality> modalities = null, string instructions = null, VoiceLiveAnimation animation = null, BinaryData voice = null, VoiceLiveInputAudio inputAudio = null, VoiceLiveAudioFormat? inputAudioFormat = null, VoiceLiveAudioFormat? outputAudioFormat = null, int? inputAudioSamplingRate = null, VoiceLiveTurnDetection turnDetection = null, VoiceLiveAudioNoiseReduction inputAudioNoiseReduction = null, VoiceLiveAudioEchoCancellation inputAudioEchoCancellation = null, VoiceLiveAvatarConfig avatar = null, VoiceLiveAudioInputTranscriptionSettings inputAudioTranscription = null, IEnumerable<VoiceLiveAudioTimestampType> outputAudioTimestampTypes = null, IEnumerable<VoiceLiveTool> tools = null, BinaryData toolChoice = null, float? temperature = null, BinaryData maxResponseOutputTokens = null, AgentConfig agent = null)
        {
            modalities ??= new List<VoiceLiveModality>();
            outputAudioTimestampTypes ??= new List<VoiceLiveAudioTimestampType>();
            tools ??= new List<VoiceLiveTool>();

            return new VoiceLiveResponseSession(
                id,
                model,
                modalities?.ToList(),
                instructions,
                animation,
                voice,
                inputAudio,
                inputAudioFormat,
                outputAudioFormat,
                inputAudioSamplingRate,
                turnDetection,
                inputAudioNoiseReduction,
                inputAudioEchoCancellation,
                avatar,
                inputAudioTranscription,
                outputAudioTimestampTypes?.ToList(),
                tools?.ToList(),
                toolChoice,
                temperature,
                maxResponseOutputTokens,
                agent,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.AgentConfig"/>. </summary>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="agentId"></param>
        /// <param name="threadId"></param>
        /// <returns> A new <see cref="VoiceLive.AgentConfig"/> instance for mocking. </returns>
        public static AgentConfig AgentConfig(AgentConfigType type = default, string name = null, string description = null, string agentId = null, string threadId = null)
        {
            return new AgentConfig(
                type,
                name,
                description,
                agentId,
                threadId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEvent"/>. </summary>
        /// <param name="type"> The type of event. </param>
        /// <param name="eventId"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEvent"/> instance for mocking. </returns>
        public static VoiceLiveServerEvent VoiceLiveServerEvent(string type = null, string eventId = null)
        {
            return new UnknownVoiceLiveServerEvent(type == null ? default : new VoiceLiveServerEventType(type), eventId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventSessionCreated"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="session"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventSessionCreated"/> instance for mocking. </returns>
        public static VoiceLiveServerEventSessionCreated VoiceLiveServerEventSessionCreated(string eventId = null, VoiceLiveResponseSession session = null)
        {
            return new VoiceLiveServerEventSessionCreated(VoiceLiveServerEventType.SessionCreated, eventId, serializedAdditionalRawData: null, session);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventError"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="error"> Details of the error. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventError"/> instance for mocking. </returns>
        public static VoiceLiveServerEventError VoiceLiveServerEventError(string eventId = null, VoiceLiveServerEventErrorError error = null)
        {
            return new VoiceLiveServerEventError(VoiceLiveServerEventType.Error, eventId, serializedAdditionalRawData: null, error);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventErrorError"/>. </summary>
        /// <param name="type"> The type of error (e.g., "invalid_request_error", "server_error"). </param>
        /// <param name="code"> Error code, if any. </param>
        /// <param name="message"> A human-readable error message. </param>
        /// <param name="param"> Parameter related to the error, if any. </param>
        /// <param name="eventId"> The event_id of the client event that caused the error, if applicable. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventErrorError"/> instance for mocking. </returns>
        public static VoiceLiveServerEventErrorError VoiceLiveServerEventErrorError(string type = null, string code = null, string message = null, string param = null, string eventId = null)
        {
            return new VoiceLiveServerEventErrorError(
                type,
                code,
                message,
                param,
                eventId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseTextDelta"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="delta"> The text delta. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseTextDelta"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseTextDelta VoiceLiveServerEventResponseTextDelta(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, string delta = null)
        {
            return new VoiceLiveServerEventResponseTextDelta(
                VoiceLiveServerEventType.ResponseTextDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseAudioDelta"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="delta"> Base64-encoded audio data delta. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseAudioDelta"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseAudioDelta VoiceLiveServerEventResponseAudioDelta(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, BinaryData delta = null)
        {
            return new VoiceLiveServerEventResponseAudioDelta(
                VoiceLiveServerEventType.ResponseAudioDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventConversationItemCreated"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="previousItemId">
        /// The ID of the preceding item in the Conversation context, allows the
        /// client to understand the order of the conversation.
        /// </param>
        /// <param name="item"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventConversationItemCreated"/> instance for mocking. </returns>
        public static VoiceLiveServerEventConversationItemCreated VoiceLiveServerEventConversationItemCreated(string eventId = null, string previousItemId = null, VoiceLiveConversationItem item = null)
        {
            return new VoiceLiveServerEventConversationItemCreated(VoiceLiveServerEventType.ConversationItemCreated, eventId, serializedAdditionalRawData: null, previousItemId, item);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventConversationItemDeleted"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the item that was deleted. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventConversationItemDeleted"/> instance for mocking. </returns>
        public static VoiceLiveServerEventConversationItemDeleted VoiceLiveServerEventConversationItemDeleted(string eventId = null, string itemId = null)
        {
            return new VoiceLiveServerEventConversationItemDeleted(VoiceLiveServerEventType.ConversationItemDeleted, eventId, serializedAdditionalRawData: null, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventConversationItemRetrieved"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventConversationItemRetrieved"/> instance for mocking. </returns>
        public static VoiceLiveServerEventConversationItemRetrieved VoiceLiveServerEventConversationItemRetrieved(string eventId = null, string itemId = null)
        {
            return new VoiceLiveServerEventConversationItemRetrieved(VoiceLiveServerEventType.ConversationItemRetrieved, eventId, serializedAdditionalRawData: null, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventConversationItemTruncated"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the assistant message item that was truncated. </param>
        /// <param name="contentIndex"> The index of the content part that was truncated. </param>
        /// <param name="audioEndMs"> The duration up to which the audio was truncated, in milliseconds. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventConversationItemTruncated"/> instance for mocking. </returns>
        public static VoiceLiveServerEventConversationItemTruncated VoiceLiveServerEventConversationItemTruncated(string eventId = null, string itemId = null, int contentIndex = default, int audioEndMs = default)
        {
            return new VoiceLiveServerEventConversationItemTruncated(
                VoiceLiveServerEventType.ConversationItemTruncated,
                eventId,
                serializedAdditionalRawData: null,
                itemId,
                contentIndex,
                audioEndMs);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventConversationItemInputAudioTranscriptionCompleted"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the user message item containing the audio. </param>
        /// <param name="contentIndex"> The index of the content part containing the audio. </param>
        /// <param name="transcript"> The transcribed text. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventConversationItemInputAudioTranscriptionCompleted"/> instance for mocking. </returns>
        public static VoiceLiveServerEventConversationItemInputAudioTranscriptionCompleted VoiceLiveServerEventConversationItemInputAudioTranscriptionCompleted(string eventId = null, string itemId = null, int contentIndex = default, string transcript = null)
        {
            return new VoiceLiveServerEventConversationItemInputAudioTranscriptionCompleted(
                VoiceLiveServerEventType.ConversationItemInputAudioTranscriptionCompleted,
                eventId,
                serializedAdditionalRawData: null,
                itemId,
                contentIndex,
                transcript);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventConversationItemInputAudioTranscriptionDelta"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="delta"> The text delta. </param>
        /// <param name="logprobs"> The log probabilities of the transcription. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventConversationItemInputAudioTranscriptionDelta"/> instance for mocking. </returns>
        public static VoiceLiveServerEventConversationItemInputAudioTranscriptionDelta VoiceLiveServerEventConversationItemInputAudioTranscriptionDelta(string eventId = null, string itemId = null, int? contentIndex = null, string delta = null, IEnumerable<LogProbProperties> logprobs = null)
        {
            logprobs ??= new List<LogProbProperties>();

            return new VoiceLiveServerEventConversationItemInputAudioTranscriptionDelta(
                VoiceLiveServerEventType.ConversationItemInputAudioTranscriptionDelta,
                eventId,
                serializedAdditionalRawData: null,
                itemId,
                contentIndex,
                delta,
                logprobs?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.LogProbProperties"/>. </summary>
        /// <param name="token"> The token that was used to generate the log probability. </param>
        /// <param name="logprob"> The log probability of the token. </param>
        /// <param name="bytes"> The bytes that were used to generate the log probability. </param>
        /// <returns> A new <see cref="VoiceLive.LogProbProperties"/> instance for mocking. </returns>
        public static LogProbProperties LogProbProperties(string token = null, float logprob = default, IEnumerable<int> bytes = null)
        {
            bytes ??= new List<int>();

            return new LogProbProperties(token, logprob, bytes?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventConversationItemInputAudioTranscriptionFailed"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the user message item. </param>
        /// <param name="contentIndex"> The index of the content part containing the audio. </param>
        /// <param name="error"> Details of the transcription error. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventConversationItemInputAudioTranscriptionFailed"/> instance for mocking. </returns>
        public static VoiceLiveServerEventConversationItemInputAudioTranscriptionFailed VoiceLiveServerEventConversationItemInputAudioTranscriptionFailed(string eventId = null, string itemId = null, int contentIndex = default, Error error = null)
        {
            return new VoiceLiveServerEventConversationItemInputAudioTranscriptionFailed(
                VoiceLiveServerEventType.ConversationItemInputAudioTranscriptionFailed,
                eventId,
                serializedAdditionalRawData: null,
                itemId,
                contentIndex,
                error);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.Error"/>. </summary>
        /// <param name="code"> Error code, or null if unspecified. </param>
        /// <param name="message"> Human-readable error message. </param>
        /// <param name="param"> Parameter name related to the error, if applicable. </param>
        /// <param name="type"> Type or category of the error. </param>
        /// <param name="eventId"> Event id of the error. </param>
        /// <returns> A new <see cref="VoiceLive.Error"/> instance for mocking. </returns>
        public static Error Error(string code = null, string message = null, string param = null, string type = null, string eventId = null)
        {
            return new Error(
                code,
                message,
                param,
                type,
                eventId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventInputAudioBufferCommitted"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="previousItemId"> The ID of the preceding item after which the new item will be inserted. </param>
        /// <param name="itemId"> The ID of the user message item that will be created. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventInputAudioBufferCommitted"/> instance for mocking. </returns>
        public static VoiceLiveServerEventInputAudioBufferCommitted VoiceLiveServerEventInputAudioBufferCommitted(string eventId = null, string previousItemId = null, string itemId = null)
        {
            return new VoiceLiveServerEventInputAudioBufferCommitted(VoiceLiveServerEventType.InputAudioBufferCommitted, eventId, serializedAdditionalRawData: null, previousItemId, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventInputAudioBufferCleared"/>. </summary>
        /// <param name="eventId"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventInputAudioBufferCleared"/> instance for mocking. </returns>
        public static VoiceLiveServerEventInputAudioBufferCleared VoiceLiveServerEventInputAudioBufferCleared(string eventId = null)
        {
            return new VoiceLiveServerEventInputAudioBufferCleared(VoiceLiveServerEventType.InputAudioBufferCleared, eventId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventInputAudioBufferSpeechStarted"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="audioStartMs">
        /// Milliseconds from the start of all audio written to the buffer during the
        /// session when speech was first detected. This will correspond to the
        /// beginning of audio sent to the model, and thus includes the
        /// `prefix_padding_ms` configured in the Session.
        /// </param>
        /// <param name="itemId"> The ID of the user message item that will be created when speech stops. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventInputAudioBufferSpeechStarted"/> instance for mocking. </returns>
        public static VoiceLiveServerEventInputAudioBufferSpeechStarted VoiceLiveServerEventInputAudioBufferSpeechStarted(string eventId = null, int audioStartMs = default, string itemId = null)
        {
            return new VoiceLiveServerEventInputAudioBufferSpeechStarted(VoiceLiveServerEventType.InputAudioBufferSpeechStarted, eventId, serializedAdditionalRawData: null, audioStartMs, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventInputAudioBufferSpeechStopped"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="audioEndMs">
        /// Milliseconds since the session started when speech stopped. This will
        /// correspond to the end of audio sent to the model, and thus includes the
        /// `min_silence_duration_ms` configured in the Session.
        /// </param>
        /// <param name="itemId"> The ID of the user message item that will be created. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventInputAudioBufferSpeechStopped"/> instance for mocking. </returns>
        public static VoiceLiveServerEventInputAudioBufferSpeechStopped VoiceLiveServerEventInputAudioBufferSpeechStopped(string eventId = null, int audioEndMs = default, string itemId = null)
        {
            return new VoiceLiveServerEventInputAudioBufferSpeechStopped(VoiceLiveServerEventType.InputAudioBufferSpeechStopped, eventId, serializedAdditionalRawData: null, audioEndMs, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseCreated"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="response"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseCreated"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseCreated VoiceLiveServerEventResponseCreated(string eventId = null, VoiceLiveResponse response = null)
        {
            return new VoiceLiveServerEventResponseCreated(VoiceLiveServerEventType.ResponseCreated, eventId, serializedAdditionalRawData: null, response);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponse"/>. </summary>
        /// <param name="id"> The unique ID of the response. </param>
        /// <param name="object"> The object type, must be `realtime.response`. </param>
        /// <param name="status">
        /// The final status of the response (`completed`, `cancelled`, `failed`, or
        /// `incomplete`).
        /// </param>
        /// <param name="statusDetails"> Additional details about the status. </param>
        /// <param name="output">
        /// The list of output items generated by the response.
        /// Please note <see cref="VoiceLive.VoiceLiveConversationResponseItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLive.VoiceLiveResponseFunctionCallItem"/>, <see cref="VoiceLive.VoiceLiveResponseFunctionCallOutputItem"/> and <see cref="VoiceLive.VoiceLiveResponseMessageItem"/>.
        /// </param>
        /// <param name="usage">
        /// Usage statistics for the Response, this will correspond to billing. A
        /// VoiceLive API session will maintain a conversation context and append new
        /// Items to the Conversation, thus output from previous turns (text and
        /// audio tokens) will become the input for later turns.
        /// </param>
        /// <param name="conversationId">
        /// Which conversation the response is added to, determined by the `conversation`
        /// field in the `response.create` event. If `auto`, the response will be added to
        /// the default conversation and the value of `conversation_id` will be an id like
        /// `conv_1234`. If `none`, the response will not be added to any conversation and
        /// the value of `conversation_id` will be `null`. If responses are being triggered
        /// by server VAD, the response will be added to the default conversation, thus
        /// the `conversation_id` will be an id like `conv_1234`.
        /// </param>
        /// <param name="voice"> supported voice identifiers and configurations. </param>
        /// <param name="modalities">
        /// The set of modalities the model used to respond. If there are multiple modalities,
        /// the model will pick one, for example if `modalities` is `["text", "audio"]`, the model
        /// could be responding in either text or audio.
        /// </param>
        /// <param name="outputAudioFormat"> The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. </param>
        /// <param name="temperature"> Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. </param>
        /// <param name="maxOutputTokens">
        /// Maximum number of output tokens for a single assistant response,
        /// inclusive of tool calls, that was used in this response.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponse"/> instance for mocking. </returns>
        public static VoiceLiveResponse VoiceLiveResponse(string id = null, VoiceLiveResponseObject? @object = null, VoiceLiveResponseStatus? status = null, VoiceLiveResponseStatusDetails statusDetails = null, IEnumerable<VoiceLiveConversationResponseItem> output = null, VoiceLiveResponseUsage usage = null, string conversationId = null, BinaryData voice = null, IEnumerable<VoiceLiveResponseModality> modalities = null, VoiceLiveResponseOutputAudioFormat? outputAudioFormat = null, float? temperature = null, BinaryData maxOutputTokens = null)
        {
            output ??= new List<VoiceLiveConversationResponseItem>();
            modalities ??= new List<VoiceLiveResponseModality>();

            return new VoiceLiveResponse(
                id,
                @object,
                status,
                statusDetails,
                output?.ToList(),
                usage,
                conversationId,
                voice,
                modalities?.ToList(),
                outputAudioFormat,
                temperature,
                maxOutputTokens,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseStatusDetails"/>. </summary>
        /// <param name="type">
        /// The type of error that caused the response to fail, corresponding
        /// with the `status` field (`completed`, `cancelled`, `incomplete`,
        /// `failed`).
        /// </param>
        /// <param name="reason">
        /// The reason the Response did not complete. For a `cancelled` Response,
        /// one of `turn_detected` (the server VAD detected a new start of speech)
        /// or `client_cancelled` (the client sent a cancel event). For an
        /// `incomplete` Response, one of `max_output_tokens` or `content_filter`
        /// (the server-side safety filter activated and cut off the response).
        /// </param>
        /// <param name="error">
        /// A description of the error that caused the response to fail,
        /// populated when the `status` is `failed`.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseStatusDetails"/> instance for mocking. </returns>
        public static VoiceLiveResponseStatusDetails VoiceLiveResponseStatusDetails(VoiceLiveResponseStatusDetailsType? type = null, VoiceLiveResponseStatusDetailsReason? reason = null, VoiceLiveResponseStatusDetailsError error = null)
        {
            return new VoiceLiveResponseStatusDetails(type, reason, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseStatusDetailsError"/>. </summary>
        /// <param name="type"> The type of error. </param>
        /// <param name="code"> Error code, if any. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseStatusDetailsError"/> instance for mocking. </returns>
        public static VoiceLiveResponseStatusDetailsError VoiceLiveResponseStatusDetailsError(string type = null, string code = null)
        {
            return new VoiceLiveResponseStatusDetailsError(type, code, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveConversationResponseItem"/>. </summary>
        /// <param name="object"></param>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveConversationResponseItem"/> instance for mocking. </returns>
        public static VoiceLiveConversationResponseItem VoiceLiveConversationResponseItem(VoiceLiveConversationResponseItemObject? @object = null, string type = null, string id = null)
        {
            return new UnknownVoiceLiveConversationResponseItem(@object, type == null ? null : new VoiceLiveItemType?(type), id, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseMessageItem"/>. </summary>
        /// <param name="object"></param>
        /// <param name="id"></param>
        /// <param name="role"></param>
        /// <param name="content">
        /// Please note <see cref="VoiceLiveContentPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLive.VoiceLiveResponseAudioContentPart"/>, <see cref="VoiceLive.VoiceLiveRequestAudioContentPart"/>, <see cref="VoiceLive.VoiceLiveRequestTextContentPart"/> and <see cref="VoiceLive.VoiceLiveResponseTextContentPart"/>.
        /// </param>
        /// <param name="status"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseMessageItem"/> instance for mocking. </returns>
        public static VoiceLiveResponseMessageItem VoiceLiveResponseMessageItem(VoiceLiveConversationResponseItemObject? @object = null, string id = null, VoiceLiveMessageRole role = default, IEnumerable<VoiceLiveContentPart> content = null, VoiceLiveItemStatus status = default)
        {
            content ??= new List<VoiceLiveContentPart>();

            return new VoiceLiveResponseMessageItem(
                @object,
                VoiceLive.VoiceLiveItemType?.Message,
                id,
                serializedAdditionalRawData: null,
                role,
                content?.ToList(),
                status);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseFunctionCallItem"/>. </summary>
        /// <param name="object"></param>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="callId"></param>
        /// <param name="arguments"></param>
        /// <param name="status"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseFunctionCallItem"/> instance for mocking. </returns>
        public static VoiceLiveResponseFunctionCallItem VoiceLiveResponseFunctionCallItem(VoiceLiveConversationResponseItemObject? @object = null, string id = null, string name = null, string callId = null, string arguments = null, VoiceLiveItemStatus status = default)
        {
            return new VoiceLiveResponseFunctionCallItem(
                @object,
                VoiceLive.VoiceLiveItemType?.FunctionCall,
                id,
                serializedAdditionalRawData: null,
                name,
                callId,
                arguments,
                status);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseFunctionCallOutputItem"/>. </summary>
        /// <param name="object"></param>
        /// <param name="id"></param>
        /// <param name="callId"></param>
        /// <param name="output"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseFunctionCallOutputItem"/> instance for mocking. </returns>
        public static VoiceLiveResponseFunctionCallOutputItem VoiceLiveResponseFunctionCallOutputItem(VoiceLiveConversationResponseItemObject? @object = null, string id = null, string callId = null, string output = null)
        {
            return new VoiceLiveResponseFunctionCallOutputItem(
                @object,
                VoiceLive.VoiceLiveItemType?.FunctionCallOutput,
                id,
                serializedAdditionalRawData: null,
                callId,
                output);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseUsage"/>. </summary>
        /// <param name="totalTokens">
        /// The total number of tokens in the Response including input and output
        /// text and audio tokens.
        /// </param>
        /// <param name="inputTokens">
        /// The number of input tokens used in the Response, including text and
        /// audio tokens.
        /// </param>
        /// <param name="outputTokens">
        /// The number of output tokens sent in the Response, including text and
        /// audio tokens.
        /// </param>
        /// <param name="inputTokenDetails"> Details about the input tokens used in the Response. </param>
        /// <param name="outputTokenDetails"> Details about the output tokens used in the Response. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseUsage"/> instance for mocking. </returns>
        public static VoiceLiveResponseUsage VoiceLiveResponseUsage(int? totalTokens = null, int? inputTokens = null, int? outputTokens = null, VoiceLiveResponseUsageInputTokenDetails inputTokenDetails = null, VoiceLiveResponseUsageOutputTokenDetails outputTokenDetails = null)
        {
            return new VoiceLiveResponseUsage(
                totalTokens,
                inputTokens,
                outputTokens,
                inputTokenDetails,
                outputTokenDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseUsageInputTokenDetails"/>. </summary>
        /// <param name="cachedTokens"> The number of cached tokens used in the Response. </param>
        /// <param name="textTokens"> The number of text tokens used in the Response. </param>
        /// <param name="audioTokens"> The number of audio tokens used in the Response. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseUsageInputTokenDetails"/> instance for mocking. </returns>
        public static VoiceLiveResponseUsageInputTokenDetails VoiceLiveResponseUsageInputTokenDetails(int? cachedTokens = null, int? textTokens = null, int? audioTokens = null)
        {
            return new VoiceLiveResponseUsageInputTokenDetails(cachedTokens, textTokens, audioTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponseUsageOutputTokenDetails"/>. </summary>
        /// <param name="textTokens"> The number of text tokens used in the Response. </param>
        /// <param name="audioTokens"> The number of audio tokens used in the Response. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponseUsageOutputTokenDetails"/> instance for mocking. </returns>
        public static VoiceLiveResponseUsageOutputTokenDetails VoiceLiveResponseUsageOutputTokenDetails(int? textTokens = null, int? audioTokens = null)
        {
            return new VoiceLiveResponseUsageOutputTokenDetails(textTokens, audioTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="response"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseDone"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseDone VoiceLiveServerEventResponseDone(string eventId = null, VoiceLiveResponse response = null)
        {
            return new VoiceLiveServerEventResponseDone(VoiceLiveServerEventType.ResponseDone, eventId, serializedAdditionalRawData: null, response);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseOutputItemAdded"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the Response to which the item belongs. </param>
        /// <param name="outputIndex"> The index of the output item in the Response. </param>
        /// <param name="item"></param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseOutputItemAdded"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseOutputItemAdded VoiceLiveServerEventResponseOutputItemAdded(string eventId = null, string responseId = null, int outputIndex = default, VoiceLiveConversationItem item = null)
        {
            return new VoiceLiveServerEventResponseOutputItemAdded(
                VoiceLiveServerEventType.ResponseOutputItemAdded,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                outputIndex,
                item);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseOutputItemDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the Response to which the item belongs. </param>
        /// <param name="outputIndex"> The index of the output item in the Response. </param>
        /// <param name="item">
        /// Please note <see cref="VoiceLive.VoiceLiveConversationResponseItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLive.VoiceLiveResponseFunctionCallItem"/>, <see cref="VoiceLive.VoiceLiveResponseFunctionCallOutputItem"/> and <see cref="VoiceLive.VoiceLiveResponseMessageItem"/>.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseOutputItemDone"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseOutputItemDone VoiceLiveServerEventResponseOutputItemDone(string eventId = null, string responseId = null, int outputIndex = default, VoiceLiveConversationResponseItem item = null)
        {
            return new VoiceLiveServerEventResponseOutputItemDone(
                VoiceLiveServerEventType.ResponseOutputItemDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                outputIndex,
                item);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseContentPartAdded"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item to which the content part was added. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="part">
        /// The content part that was added.
        /// Please note <see cref="VoiceLiveContentPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLive.VoiceLiveResponseAudioContentPart"/>, <see cref="VoiceLive.VoiceLiveRequestAudioContentPart"/>, <see cref="VoiceLive.VoiceLiveRequestTextContentPart"/> and <see cref="VoiceLive.VoiceLiveResponseTextContentPart"/>.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseContentPartAdded"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseContentPartAdded VoiceLiveServerEventResponseContentPartAdded(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, VoiceLiveContentPart part = null)
        {
            return new VoiceLiveServerEventResponseContentPartAdded(
                VoiceLiveServerEventType.ResponseContentPartAdded,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                part);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseContentPartDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="part">
        /// The content part that is done.
        /// Please note <see cref="VoiceLiveContentPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLive.VoiceLiveResponseAudioContentPart"/>, <see cref="VoiceLive.VoiceLiveRequestAudioContentPart"/>, <see cref="VoiceLive.VoiceLiveRequestTextContentPart"/> and <see cref="VoiceLive.VoiceLiveResponseTextContentPart"/>.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseContentPartDone"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseContentPartDone VoiceLiveServerEventResponseContentPartDone(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, VoiceLiveContentPart part = null)
        {
            return new VoiceLiveServerEventResponseContentPartDone(
                VoiceLiveServerEventType.ResponseContentPartDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                part);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseTextDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="text"> The final text content. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseTextDone"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseTextDone VoiceLiveServerEventResponseTextDone(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, string text = null)
        {
            return new VoiceLiveServerEventResponseTextDone(
                VoiceLiveServerEventType.ResponseTextDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                text);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseAudioTranscriptDelta"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="delta"> The transcript delta. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseAudioTranscriptDelta"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseAudioTranscriptDelta VoiceLiveServerEventResponseAudioTranscriptDelta(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, string delta = null)
        {
            return new VoiceLiveServerEventResponseAudioTranscriptDelta(
                VoiceLiveServerEventType.ResponseAudioTranscriptDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseAudioTranscriptDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="transcript"> The final transcript of the audio. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseAudioTranscriptDone"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseAudioTranscriptDone VoiceLiveServerEventResponseAudioTranscriptDone(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, string transcript = null)
        {
            return new VoiceLiveServerEventResponseAudioTranscriptDone(
                VoiceLiveServerEventType.ResponseAudioTranscriptDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                transcript);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventResponseAudioDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventResponseAudioDone"/> instance for mocking. </returns>
        public static VoiceLiveServerEventResponseAudioDone VoiceLiveServerEventResponseAudioDone(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default)
        {
            return new VoiceLiveServerEventResponseAudioDone(
                VoiceLiveServerEventType.ResponseAudioDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveServerEventSessionAvatarConnecting"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="serverSdp"> The server's SDP answer for the avatar connection. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveServerEventSessionAvatarConnecting"/> instance for mocking. </returns>
        public static VoiceLiveServerEventSessionAvatarConnecting VoiceLiveServerEventSessionAvatarConnecting(string eventId = null, string serverSdp = null)
        {
            return new VoiceLiveServerEventSessionAvatarConnecting(VoiceLiveServerEventType.SessionAvatarConnecting, eventId, serializedAdditionalRawData: null, serverSdp);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAnimationBlendshapeDeltaEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <param name="frames"></param>
        /// <param name="frameIndex"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAnimationBlendshapeDeltaEvent"/> instance for mocking. </returns>
        public static ResponseAnimationBlendshapeDeltaEvent ResponseAnimationBlendshapeDeltaEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, BinaryData frames = null, int frameIndex = default)
        {
            return new ResponseAnimationBlendshapeDeltaEvent(
                VoiceLiveServerEventType.ResponseAnimationBlendshapesDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                frames,
                frameIndex);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAnimationBlendshapeDoneEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAnimationBlendshapeDoneEvent"/> instance for mocking. </returns>
        public static ResponseAnimationBlendshapeDoneEvent ResponseAnimationBlendshapeDoneEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default)
        {
            return new ResponseAnimationBlendshapeDoneEvent(
                VoiceLiveServerEventType.ResponseAnimationBlendshapesDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseEmotionHypothesis"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="emotion"></param>
        /// <param name="candidates"></param>
        /// <param name="audioOffsetMs"></param>
        /// <param name="audioDurationMs"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseEmotionHypothesis"/> instance for mocking. </returns>
        public static ResponseEmotionHypothesis ResponseEmotionHypothesis(string eventId = null, string emotion = null, IEnumerable<EmotionCandidate> candidates = null, int audioOffsetMs = default, int audioDurationMs = default, string responseId = null, string itemId = null)
        {
            candidates ??= new List<EmotionCandidate>();

            return new ResponseEmotionHypothesis(
                VoiceLiveServerEventType.ResponseEmotionHypothesis,
                eventId,
                serializedAdditionalRawData: null,
                emotion,
                candidates?.ToList(),
                audioOffsetMs,
                audioDurationMs,
                responseId,
                itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.EmotionCandidate"/>. </summary>
        /// <param name="emotion"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="VoiceLive.EmotionCandidate"/> instance for mocking. </returns>
        public static EmotionCandidate EmotionCandidate(string emotion = null, float confidence = default)
        {
            return new EmotionCandidate(emotion, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAudioTimestampDeltaEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <param name="audioOffsetMs"></param>
        /// <param name="audioDurationMs"></param>
        /// <param name="text"></param>
        /// <param name="timestampType"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAudioTimestampDeltaEvent"/> instance for mocking. </returns>
        public static ResponseAudioTimestampDeltaEvent ResponseAudioTimestampDeltaEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, int audioOffsetMs = default, int audioDurationMs = default, string text = null, ResponseAudioTimestampDeltaEventTimestampType timestampType = default)
        {
            return new ResponseAudioTimestampDeltaEvent(
                VoiceLiveServerEventType.ResponseAudioTimestampDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                audioOffsetMs,
                audioDurationMs,
                text,
                timestampType);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAudioTimestampDoneEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAudioTimestampDoneEvent"/> instance for mocking. </returns>
        public static ResponseAudioTimestampDoneEvent ResponseAudioTimestampDoneEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default)
        {
            return new ResponseAudioTimestampDoneEvent(
                VoiceLiveServerEventType.ResponseAudioTimestampDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAnimationVisemeDeltaEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <param name="audioOffsetMs"></param>
        /// <param name="visemeId"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAnimationVisemeDeltaEvent"/> instance for mocking. </returns>
        public static ResponseAnimationVisemeDeltaEvent ResponseAnimationVisemeDeltaEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, int audioOffsetMs = default, int visemeId = default)
        {
            return new ResponseAnimationVisemeDeltaEvent(
                VoiceLiveServerEventType.ResponseAnimationVisemeDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                audioOffsetMs,
                visemeId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAnimationVisemeDoneEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAnimationVisemeDoneEvent"/> instance for mocking. </returns>
        public static ResponseAnimationVisemeDoneEvent ResponseAnimationVisemeDoneEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default)
        {
            return new ResponseAnimationVisemeDoneEvent(
                VoiceLiveServerEventType.ResponseAnimationVisemeDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex);
        }
    }
}
