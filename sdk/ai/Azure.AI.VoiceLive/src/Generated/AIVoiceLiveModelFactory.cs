// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.VoiceLive
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIVoiceLiveModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="VoiceLive.ClientEventSessionUpdate"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="session"></param>
        /// <returns> A new <see cref="VoiceLive.ClientEventSessionUpdate"/> instance for mocking. </returns>
        public static ClientEventSessionUpdate ClientEventSessionUpdate(string eventId = null, RequestSession session = null)
        {
            return new ClientEventSessionUpdate(ClientEventType.SessionUpdate, eventId, serializedAdditionalRawData: null, session);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.InputAudio"/>. </summary>
        /// <param name="model"> The name of the model to use for input audio (currently only 'azure-standard' is supported). </param>
        /// <param name="phraseList"> Optional list of phrases to bias the speech recognition engine. </param>
        /// <returns> A new <see cref="VoiceLive.InputAudio"/> instance for mocking. </returns>
        public static InputAudio InputAudio(InputAudioModel model = default, IEnumerable<string> phraseList = null)
        {
            phraseList ??= new List<string>();

            return new InputAudio(model, phraseList?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.AudioNoiseReduction"/>. </summary>
        /// <param name="type"> The type of noise reduction model. </param>
        /// <returns> A new <see cref="VoiceLive.AudioNoiseReduction"/> instance for mocking. </returns>
        public static AudioNoiseReduction AudioNoiseReduction(AudioNoiseReductionType type = default)
        {
            return new AudioNoiseReduction(type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.AudioEchoCancellation"/>. </summary>
        /// <param name="type"> The type of echo cancellation model to use. </param>
        /// <returns> A new <see cref="VoiceLive.AudioEchoCancellation"/> instance for mocking. </returns>
        public static AudioEchoCancellation AudioEchoCancellation(AudioEchoCancellationType type = default)
        {
            return new AudioEchoCancellation(type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ClientEventInputAudioBufferAppend"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="audio">
        /// Base64-encoded audio. This must be in the format specified by the
        /// `input_audio_format` field in the session configuration.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.ClientEventInputAudioBufferAppend"/> instance for mocking. </returns>
        public static ClientEventInputAudioBufferAppend ClientEventInputAudioBufferAppend(string eventId = null, string audio = null)
        {
            return new ClientEventInputAudioBufferAppend(ClientEventType.InputAudioBufferAppend, eventId, serializedAdditionalRawData: null, audio);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ClientEventInputAudioTurnStart"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="turnId"> Unique identifier for the input audio turn. </param>
        /// <returns> A new <see cref="VoiceLive.ClientEventInputAudioTurnStart"/> instance for mocking. </returns>
        public static ClientEventInputAudioTurnStart ClientEventInputAudioTurnStart(string eventId = null, string turnId = null)
        {
            return new ClientEventInputAudioTurnStart(ClientEventType.InputAudioTurnStart, eventId, serializedAdditionalRawData: null, turnId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ClientEventInputAudioTurnAppend"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="turnId"> The ID of the turn this audio is part of. </param>
        /// <param name="audio"> Base64-encoded audio chunk. </param>
        /// <returns> A new <see cref="VoiceLive.ClientEventInputAudioTurnAppend"/> instance for mocking. </returns>
        public static ClientEventInputAudioTurnAppend ClientEventInputAudioTurnAppend(string eventId = null, string turnId = null, string audio = null)
        {
            return new ClientEventInputAudioTurnAppend(ClientEventType.InputAudioTurnAppend, eventId, serializedAdditionalRawData: null, turnId, audio);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ClientEventInputAudioTurnEnd"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="turnId"> The ID of the audio turn being ended. </param>
        /// <returns> A new <see cref="VoiceLive.ClientEventInputAudioTurnEnd"/> instance for mocking. </returns>
        public static ClientEventInputAudioTurnEnd ClientEventInputAudioTurnEnd(string eventId = null, string turnId = null)
        {
            return new ClientEventInputAudioTurnEnd(ClientEventType.InputAudioTurnEnd, eventId, serializedAdditionalRawData: null, turnId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ClientEventInputAudioTurnCancel"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="turnId"> The ID of the turn to cancel. </param>
        /// <returns> A new <see cref="VoiceLive.ClientEventInputAudioTurnCancel"/> instance for mocking. </returns>
        public static ClientEventInputAudioTurnCancel ClientEventInputAudioTurnCancel(string eventId = null, string turnId = null)
        {
            return new ClientEventInputAudioTurnCancel(ClientEventType.InputAudioTurnCancel, eventId, serializedAdditionalRawData: null, turnId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ClientEventConversationItemRetrieve"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the item to retrieve. </param>
        /// <returns> A new <see cref="VoiceLive.ClientEventConversationItemRetrieve"/> instance for mocking. </returns>
        public static ClientEventConversationItemRetrieve ClientEventConversationItemRetrieve(string eventId = null, string itemId = null)
        {
            return new ClientEventConversationItemRetrieve(ClientEventType.ConversationItemRetrieve, eventId, serializedAdditionalRawData: null, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ClientEventConversationItemTruncate"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId">
        /// The ID of the assistant message item to truncate. Only assistant message
        /// items can be truncated.
        /// </param>
        /// <param name="contentIndex"> The index of the content part to truncate. Set this to 0. </param>
        /// <param name="audioEndMs">
        /// Inclusive duration up to which audio is truncated, in milliseconds. If
        /// the audio_end_ms is greater than the actual audio duration, the server
        /// will respond with an error.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.ClientEventConversationItemTruncate"/> instance for mocking. </returns>
        public static ClientEventConversationItemTruncate ClientEventConversationItemTruncate(string eventId = null, string itemId = null, int contentIndex = default, int audioEndMs = default)
        {
            return new ClientEventConversationItemTruncate(
                ClientEventType.ConversationItemTruncate,
                eventId,
                serializedAdditionalRawData: null,
                itemId,
                contentIndex,
                audioEndMs);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ClientEventConversationItemDelete"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the item to delete. </param>
        /// <returns> A new <see cref="VoiceLive.ClientEventConversationItemDelete"/> instance for mocking. </returns>
        public static ClientEventConversationItemDelete ClientEventConversationItemDelete(string eventId = null, string itemId = null)
        {
            return new ClientEventConversationItemDelete(ClientEventType.ConversationItemDelete, eventId, serializedAdditionalRawData: null, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseTextContentPart"/>. </summary>
        /// <param name="text"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseTextContentPart"/> instance for mocking. </returns>
        public static ResponseTextContentPart ResponseTextContentPart(string text = null)
        {
            return new ResponseTextContentPart(ContentPartType.Text, serializedAdditionalRawData: null, text);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAudioContentPart"/>. </summary>
        /// <param name="transcript"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAudioContentPart"/> instance for mocking. </returns>
        public static ResponseAudioContentPart ResponseAudioContentPart(string transcript = null)
        {
            return new ResponseAudioContentPart(ContentPartType.Audio, serializedAdditionalRawData: null, transcript);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.RequestFunctionCallItem"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="callId"></param>
        /// <param name="arguments"></param>
        /// <param name="status"></param>
        /// <returns> A new <see cref="VoiceLive.RequestFunctionCallItem"/> instance for mocking. </returns>
        public static RequestFunctionCallItem RequestFunctionCallItem(string id = null, string name = null, string callId = null, string arguments = null, ItemStatus? status = null)
        {
            return new RequestFunctionCallItem(
                ItemType.FunctionCall,
                id,
                serializedAdditionalRawData: null,
                name,
                callId,
                arguments,
                status);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.RequestFunctionCallOutputItem"/>. </summary>
        /// <param name="id"></param>
        /// <param name="callId"></param>
        /// <param name="output"></param>
        /// <returns> A new <see cref="VoiceLive.RequestFunctionCallOutputItem"/> instance for mocking. </returns>
        public static RequestFunctionCallOutputItem RequestFunctionCallOutputItem(string id = null, string callId = null, string output = null)
        {
            return new RequestFunctionCallOutputItem(ItemType.FunctionCallOutput, id, serializedAdditionalRawData: null, callId, output);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ClientEventSessionAvatarConnect"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="clientSdp"> The client's SDP offer. </param>
        /// <returns> A new <see cref="VoiceLive.ClientEventSessionAvatarConnect"/> instance for mocking. </returns>
        public static ClientEventSessionAvatarConnect ClientEventSessionAvatarConnect(string eventId = null, string clientSdp = null)
        {
            return new ClientEventSessionAvatarConnect(ClientEventType.SessionAvatarConnect, eventId, serializedAdditionalRawData: null, clientSdp);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventSessionAvatarConnecting"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="serverSdp"> The server's SDP answer for the avatar connection. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventSessionAvatarConnecting"/> instance for mocking. </returns>
        public static ServerEventSessionAvatarConnecting ServerEventSessionAvatarConnecting(string eventId = null, string serverSdp = null)
        {
            return new ServerEventSessionAvatarConnecting(ServerEventType.SessionAvatarConnecting, eventId, serializedAdditionalRawData: null, serverSdp);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEvent"/>. </summary>
        /// <param name="type"> The type of event. </param>
        /// <param name="eventId"></param>
        /// <returns> A new <see cref="VoiceLive.ServerEvent"/> instance for mocking. </returns>
        public static ServerEvent ServerEvent(string type = null, string eventId = null)
        {
            return new UnknownServerEvent(type == null ? default : new ServerEventType(type), eventId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventSessionCreated"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="session"></param>
        /// <returns> A new <see cref="VoiceLive.ServerEventSessionCreated"/> instance for mocking. </returns>
        public static ServerEventSessionCreated ServerEventSessionCreated(string eventId = null, ResponseSession session = null)
        {
            return new ServerEventSessionCreated(ServerEventType.SessionCreated, eventId, serializedAdditionalRawData: null, session);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseSession"/>. </summary>
        /// <param name="id"></param>
        /// <param name="model"></param>
        /// <param name="modalities"></param>
        /// <param name="instructions"></param>
        /// <param name="animation"></param>
        /// <param name="voice"></param>
        /// <param name="inputAudio"></param>
        /// <param name="inputAudioFormat"></param>
        /// <param name="outputAudioFormat"></param>
        /// <param name="inputAudioSamplingRate"></param>
        /// <param name="turnDetection">
        /// Please note <see cref="TurnDetection"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureSemanticVad"/>, <see cref="NoTurnDetection"/> and <see cref="ServerVad"/>.
        /// </param>
        /// <param name="inputAudioNoiseReduction"></param>
        /// <param name="inputAudioEchoCancellation"></param>
        /// <param name="avatar"></param>
        /// <param name="inputAudioTranscription"></param>
        /// <param name="outputAudioTimestampTypes"></param>
        /// <param name="tools">
        /// Please note <see cref="ToolCall"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FunctionTool"/>.
        /// </param>
        /// <param name="toolChoice"></param>
        /// <param name="temperature"></param>
        /// <param name="maxResponseOutputTokens"></param>
        /// <param name="agent"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseSession"/> instance for mocking. </returns>
        public static ResponseSession ResponseSession(string id = null, string model = null, IEnumerable<InputModality> modalities = null, string instructions = null, AnimationOptions animation = null, BinaryData voice = null, InputAudio inputAudio = null, AudioFormat? inputAudioFormat = null, AudioFormat? outputAudioFormat = null, int? inputAudioSamplingRate = null, TurnDetection turnDetection = null, AudioNoiseReduction inputAudioNoiseReduction = null, AudioEchoCancellation inputAudioEchoCancellation = null, AvatarConfig avatar = null, AudioInputTranscriptionSettings inputAudioTranscription = null, IEnumerable<AudioTimestampType> outputAudioTimestampTypes = null, IEnumerable<ToolCall> tools = null, BinaryData toolChoice = null, float? temperature = null, BinaryData maxResponseOutputTokens = null, AgentConfig agent = null)
        {
            modalities ??= new List<InputModality>();
            outputAudioTimestampTypes ??= new List<AudioTimestampType>();
            tools ??= new List<ToolCall>();

            return new ResponseSession(
                id,
                model,
                modalities?.ToList(),
                instructions,
                animation,
                voice,
                inputAudio,
                inputAudioFormat,
                outputAudioFormat,
                inputAudioSamplingRate,
                turnDetection,
                inputAudioNoiseReduction,
                inputAudioEchoCancellation,
                avatar,
                inputAudioTranscription,
                outputAudioTimestampTypes?.ToList(),
                tools?.ToList(),
                toolChoice,
                temperature,
                maxResponseOutputTokens,
                agent,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.AgentConfig"/>. </summary>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="agentId"></param>
        /// <param name="threadId"></param>
        /// <returns> A new <see cref="VoiceLive.AgentConfig"/> instance for mocking. </returns>
        public static AgentConfig AgentConfig(AgentConfigType type = default, string name = null, string description = null, string agentId = null, string threadId = null)
        {
            return new AgentConfig(
                type,
                name,
                description,
                agentId,
                threadId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventSessionUpdated"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="session"></param>
        /// <returns> A new <see cref="VoiceLive.ServerEventSessionUpdated"/> instance for mocking. </returns>
        public static ServerEventSessionUpdated ServerEventSessionUpdated(string eventId = null, ResponseSession session = null)
        {
            return new ServerEventSessionUpdated(ServerEventType.SessionUpdated, eventId, serializedAdditionalRawData: null, session);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventError"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="error"> Details of the error. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventError"/> instance for mocking. </returns>
        public static ServerEventError ServerEventError(string eventId = null, ServerEventErrorError error = null)
        {
            return new ServerEventError(ServerEventType.Error, eventId, serializedAdditionalRawData: null, error);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventErrorError"/>. </summary>
        /// <param name="type"> The type of error (e.g., "invalid_request_error", "server_error"). </param>
        /// <param name="code"> Error code, if any. </param>
        /// <param name="message"> A human-readable error message. </param>
        /// <param name="param"> Parameter related to the error, if any. </param>
        /// <param name="eventId"> The event_id of the client event that caused the error, if applicable. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventErrorError"/> instance for mocking. </returns>
        public static ServerEventErrorError ServerEventErrorError(string type = null, string code = null, string message = null, string param = null, string eventId = null)
        {
            return new ServerEventErrorError(
                type,
                code,
                message,
                param,
                eventId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseTextDelta"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="delta"> The text delta. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseTextDelta"/> instance for mocking. </returns>
        public static ServerEventResponseTextDelta ServerEventResponseTextDelta(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, string delta = null)
        {
            return new ServerEventResponseTextDelta(
                ServerEventType.ResponseTextDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseAudioDelta"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="delta"> Base64-encoded audio data delta. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseAudioDelta"/> instance for mocking. </returns>
        public static ServerEventResponseAudioDelta ServerEventResponseAudioDelta(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, BinaryData delta = null)
        {
            return new ServerEventResponseAudioDelta(
                ServerEventType.ResponseAudioDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventConversationItemCreated"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="previousItemId">
        /// The ID of the preceding item in the Conversation context, allows the
        /// client to understand the order of the conversation.
        /// </param>
        /// <param name="item"></param>
        /// <returns> A new <see cref="VoiceLive.ServerEventConversationItemCreated"/> instance for mocking. </returns>
        public static ServerEventConversationItemCreated ServerEventConversationItemCreated(string eventId = null, string previousItemId = null, ConversationItemWithReference item = null)
        {
            return new ServerEventConversationItemCreated(ServerEventType.ConversationItemCreated, eventId, serializedAdditionalRawData: null, previousItemId, item);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventConversationItemDeleted"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the item that was deleted. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventConversationItemDeleted"/> instance for mocking. </returns>
        public static ServerEventConversationItemDeleted ServerEventConversationItemDeleted(string eventId = null, string itemId = null)
        {
            return new ServerEventConversationItemDeleted(ServerEventType.ConversationItemDeleted, eventId, serializedAdditionalRawData: null, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventConversationItemRetrieved"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"></param>
        /// <returns> A new <see cref="VoiceLive.ServerEventConversationItemRetrieved"/> instance for mocking. </returns>
        public static ServerEventConversationItemRetrieved ServerEventConversationItemRetrieved(string eventId = null, string itemId = null)
        {
            return new ServerEventConversationItemRetrieved(ServerEventType.ConversationItemRetrieved, eventId, serializedAdditionalRawData: null, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventConversationItemTruncated"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the assistant message item that was truncated. </param>
        /// <param name="contentIndex"> The index of the content part that was truncated. </param>
        /// <param name="audioEndMs"> The duration up to which the audio was truncated, in milliseconds. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventConversationItemTruncated"/> instance for mocking. </returns>
        public static ServerEventConversationItemTruncated ServerEventConversationItemTruncated(string eventId = null, string itemId = null, int contentIndex = default, int audioEndMs = default)
        {
            return new ServerEventConversationItemTruncated(
                ServerEventType.ConversationItemTruncated,
                eventId,
                serializedAdditionalRawData: null,
                itemId,
                contentIndex,
                audioEndMs);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventConversationItemInputAudioTranscriptionCompleted"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the user message item containing the audio. </param>
        /// <param name="contentIndex"> The index of the content part containing the audio. </param>
        /// <param name="transcript"> The transcribed text. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventConversationItemInputAudioTranscriptionCompleted"/> instance for mocking. </returns>
        public static ServerEventConversationItemInputAudioTranscriptionCompleted ServerEventConversationItemInputAudioTranscriptionCompleted(string eventId = null, string itemId = null, int contentIndex = default, string transcript = null)
        {
            return new ServerEventConversationItemInputAudioTranscriptionCompleted(
                ServerEventType.ConversationItemInputAudioTranscriptionCompleted,
                eventId,
                serializedAdditionalRawData: null,
                itemId,
                contentIndex,
                transcript);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventConversationItemInputAudioTranscriptionDelta"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="delta"> The text delta. </param>
        /// <param name="logprobs"> The log probabilities of the transcription. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventConversationItemInputAudioTranscriptionDelta"/> instance for mocking. </returns>
        public static ServerEventConversationItemInputAudioTranscriptionDelta ServerEventConversationItemInputAudioTranscriptionDelta(string eventId = null, string itemId = null, int? contentIndex = null, string delta = null, IEnumerable<LogProbProperties> logprobs = null)
        {
            logprobs ??= new List<LogProbProperties>();

            return new ServerEventConversationItemInputAudioTranscriptionDelta(
                ServerEventType.ConversationItemInputAudioTranscriptionDelta,
                eventId,
                serializedAdditionalRawData: null,
                itemId,
                contentIndex,
                delta,
                logprobs?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.LogProbProperties"/>. </summary>
        /// <param name="token"> The token that was used to generate the log probability. </param>
        /// <param name="logprob"> The log probability of the token. </param>
        /// <param name="bytes"> The bytes that were used to generate the log probability. </param>
        /// <returns> A new <see cref="VoiceLive.LogProbProperties"/> instance for mocking. </returns>
        public static LogProbProperties LogProbProperties(string token = null, float logprob = default, IEnumerable<int> bytes = null)
        {
            bytes ??= new List<int>();

            return new LogProbProperties(token, logprob, bytes?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventConversationItemInputAudioTranscriptionFailed"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="itemId"> The ID of the user message item. </param>
        /// <param name="contentIndex"> The index of the content part containing the audio. </param>
        /// <param name="error"> Details of the transcription error. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventConversationItemInputAudioTranscriptionFailed"/> instance for mocking. </returns>
        public static ServerEventConversationItemInputAudioTranscriptionFailed ServerEventConversationItemInputAudioTranscriptionFailed(string eventId = null, string itemId = null, int contentIndex = default, VoiceLiveErrorDetails error = null)
        {
            return new ServerEventConversationItemInputAudioTranscriptionFailed(
                ServerEventType.ConversationItemInputAudioTranscriptionFailed,
                eventId,
                serializedAdditionalRawData: null,
                itemId,
                contentIndex,
                error);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveErrorDetails"/>. </summary>
        /// <param name="code"> Error code, or null if unspecified. </param>
        /// <param name="message"> Human-readable error message. </param>
        /// <param name="param"> Parameter name related to the error, if applicable. </param>
        /// <param name="type"> Type or category of the error. </param>
        /// <param name="eventId"> Event id of the error. </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveErrorDetails"/> instance for mocking. </returns>
        public static VoiceLiveErrorDetails VoiceLiveErrorDetails(string code = null, string message = null, string param = null, string type = null, string eventId = null)
        {
            return new VoiceLiveErrorDetails(
                code,
                message,
                param,
                type,
                eventId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventInputAudioBufferCommitted"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="previousItemId"> The ID of the preceding item after which the new item will be inserted. </param>
        /// <param name="itemId"> The ID of the user message item that will be created. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventInputAudioBufferCommitted"/> instance for mocking. </returns>
        public static ServerEventInputAudioBufferCommitted ServerEventInputAudioBufferCommitted(string eventId = null, string previousItemId = null, string itemId = null)
        {
            return new ServerEventInputAudioBufferCommitted(ServerEventType.InputAudioBufferCommitted, eventId, serializedAdditionalRawData: null, previousItemId, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventInputAudioBufferCleared"/>. </summary>
        /// <param name="eventId"></param>
        /// <returns> A new <see cref="VoiceLive.ServerEventInputAudioBufferCleared"/> instance for mocking. </returns>
        public static ServerEventInputAudioBufferCleared ServerEventInputAudioBufferCleared(string eventId = null)
        {
            return new ServerEventInputAudioBufferCleared(ServerEventType.InputAudioBufferCleared, eventId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventInputAudioBufferSpeechStarted"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="audioStartMs">
        /// Milliseconds from the start of all audio written to the buffer during the
        /// session when speech was first detected. This will correspond to the
        /// beginning of audio sent to the model, and thus includes the
        /// `prefix_padding_ms` configured in the Session.
        /// </param>
        /// <param name="itemId"> The ID of the user message item that will be created when speech stops. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventInputAudioBufferSpeechStarted"/> instance for mocking. </returns>
        public static ServerEventInputAudioBufferSpeechStarted ServerEventInputAudioBufferSpeechStarted(string eventId = null, int audioStartMs = default, string itemId = null)
        {
            return new ServerEventInputAudioBufferSpeechStarted(ServerEventType.InputAudioBufferSpeechStarted, eventId, serializedAdditionalRawData: null, audioStartMs, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventInputAudioBufferSpeechStopped"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="audioEndMs">
        /// Milliseconds since the session started when speech stopped. This will
        /// correspond to the end of audio sent to the model, and thus includes the
        /// `min_silence_duration_ms` configured in the Session.
        /// </param>
        /// <param name="itemId"> The ID of the user message item that will be created. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventInputAudioBufferSpeechStopped"/> instance for mocking. </returns>
        public static ServerEventInputAudioBufferSpeechStopped ServerEventInputAudioBufferSpeechStopped(string eventId = null, int audioEndMs = default, string itemId = null)
        {
            return new ServerEventInputAudioBufferSpeechStopped(ServerEventType.InputAudioBufferSpeechStopped, eventId, serializedAdditionalRawData: null, audioEndMs, itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseCreated"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="response"></param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseCreated"/> instance for mocking. </returns>
        public static ServerEventResponseCreated ServerEventResponseCreated(string eventId = null, VoiceLiveResponse response = null)
        {
            return new ServerEventResponseCreated(ServerEventType.ResponseCreated, eventId, serializedAdditionalRawData: null, response);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.VoiceLiveResponse"/>. </summary>
        /// <param name="id"> The unique ID of the response. </param>
        /// <param name="object"> The object type, must be `realtime.response`. </param>
        /// <param name="status">
        /// The final status of the response (`completed`, `cancelled`, `failed`, or
        /// `incomplete`).
        /// </param>
        /// <param name="statusDetails"> Additional details about the status. </param>
        /// <param name="output">
        /// The list of output items generated by the response.
        /// Please note <see cref="VoiceLive.ConversationResponseItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLive.ResponseFunctionCallItem"/>, <see cref="VoiceLive.ResponseFunctionCallOutputItem"/> and <see cref="VoiceLive.ResponseMessageItem"/>.
        /// </param>
        /// <param name="usage">
        /// Usage statistics for the Response, this will correspond to billing. A
        /// VoiceLive API session will maintain a conversation context and append new
        /// Items to the Conversation, thus output from previous turns (text and
        /// audio tokens) will become the input for later turns.
        /// </param>
        /// <param name="conversationId">
        /// Which conversation the response is added to, determined by the `conversation`
        /// field in the `response.create` event. If `auto`, the response will be added to
        /// the default conversation and the value of `conversation_id` will be an id like
        /// `conv_1234`. If `none`, the response will not be added to any conversation and
        /// the value of `conversation_id` will be `null`. If responses are being triggered
        /// by server VAD, the response will be added to the default conversation, thus
        /// the `conversation_id` will be an id like `conv_1234`.
        /// </param>
        /// <param name="voice"> supported voice identifiers and configurations. </param>
        /// <param name="modalities">
        /// The set of modalities the model used to respond. If there are multiple modalities,
        /// the model will pick one, for example if `modalities` is `["text", "audio"]`, the model
        /// could be responding in either text or audio.
        /// </param>
        /// <param name="outputAudioFormat"> The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. </param>
        /// <param name="temperature"> Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. </param>
        /// <param name="maxOutputTokens">
        /// Maximum number of output tokens for a single assistant response,
        /// inclusive of tool calls, that was used in this response.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.VoiceLiveResponse"/> instance for mocking. </returns>
        public static VoiceLiveResponse VoiceLiveResponse(string id = null, VoiceLiveResponseObject? @object = null, ResponseStatus? status = null, ResponseStatusDetails statusDetails = null, IEnumerable<ConversationResponseItem> output = null, ResponseUsage usage = null, string conversationId = null, BinaryData voice = null, IEnumerable<ResponseModality> modalities = null, ResponseOutputAudioFormat? outputAudioFormat = null, float? temperature = null, BinaryData maxOutputTokens = null)
        {
            output ??= new List<ConversationResponseItem>();
            modalities ??= new List<ResponseModality>();

            return new VoiceLiveResponse(
                id,
                @object,
                status,
                statusDetails,
                output?.ToList(),
                usage,
                conversationId,
                voice,
                modalities?.ToList(),
                outputAudioFormat,
                temperature,
                maxOutputTokens,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseStatusDetails"/>. </summary>
        /// <param name="type">
        /// The type of error that caused the response to fail, corresponding
        /// with the `status` field (`completed`, `cancelled`, `incomplete`,
        /// `failed`).
        /// </param>
        /// <param name="reason">
        /// The reason the Response did not complete. For a `cancelled` Response,
        /// one of `turn_detected` (the server VAD detected a new start of speech)
        /// or `client_cancelled` (the client sent a cancel event). For an
        /// `incomplete` Response, one of `max_output_tokens` or `content_filter`
        /// (the server-side safety filter activated and cut off the response).
        /// </param>
        /// <param name="error">
        /// A description of the error that caused the response to fail,
        /// populated when the `status` is `failed`.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.ResponseStatusDetails"/> instance for mocking. </returns>
        public static ResponseStatusDetails ResponseStatusDetails(ResponseStatusDetailsType? type = null, ResponseStatusDetailsReason? reason = null, ResponseStatusDetailsError error = null)
        {
            return new ResponseStatusDetails(type, reason, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseStatusDetailsError"/>. </summary>
        /// <param name="type"> The type of error. </param>
        /// <param name="code"> Error code, if any. </param>
        /// <returns> A new <see cref="VoiceLive.ResponseStatusDetailsError"/> instance for mocking. </returns>
        public static ResponseStatusDetailsError ResponseStatusDetailsError(string type = null, string code = null)
        {
            return new ResponseStatusDetailsError(type, code, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ConversationResponseItem"/>. </summary>
        /// <param name="object"></param>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <returns> A new <see cref="VoiceLive.ConversationResponseItem"/> instance for mocking. </returns>
        public static ConversationResponseItem ConversationResponseItem(ConversationResponseItemObject? @object = null, string type = null, string id = null)
        {
            return new UnknownConversationResponseItem(@object, type == null ? null : new ItemType?(type), id, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseMessageItem"/>. </summary>
        /// <param name="object"></param>
        /// <param name="id"></param>
        /// <param name="role"></param>
        /// <param name="content">
        /// Please note <see cref="ContentPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLive.ResponseAudioContentPart"/>, <see cref="RequestAudioContentPart"/>, <see cref="RequestTextContentPart"/> and <see cref="VoiceLive.ResponseTextContentPart"/>.
        /// </param>
        /// <param name="status"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseMessageItem"/> instance for mocking. </returns>
        public static ResponseMessageItem ResponseMessageItem(ConversationResponseItemObject? @object = null, string id = null, MessageRole role = default, IEnumerable<ContentPart> content = null, ItemStatus status = default)
        {
            content ??= new List<ContentPart>();

            return new ResponseMessageItem(
                @object,
                VoiceLive.ItemType.Message,
                id,
                serializedAdditionalRawData: null,
                role,
                content?.ToList(),
                status);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseFunctionCallItem"/>. </summary>
        /// <param name="object"></param>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="callId"></param>
        /// <param name="arguments"></param>
        /// <param name="status"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseFunctionCallItem"/> instance for mocking. </returns>
        public static ResponseFunctionCallItem ResponseFunctionCallItem(ConversationResponseItemObject? @object = null, string id = null, string name = null, string callId = null, string arguments = null, ItemStatus status = default)
        {
            return new ResponseFunctionCallItem(
                @object,
                VoiceLive.ItemType.FunctionCall,
                id,
                serializedAdditionalRawData: null,
                name,
                callId,
                arguments,
                status);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseFunctionCallOutputItem"/>. </summary>
        /// <param name="object"></param>
        /// <param name="id"></param>
        /// <param name="callId"></param>
        /// <param name="output"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseFunctionCallOutputItem"/> instance for mocking. </returns>
        public static ResponseFunctionCallOutputItem ResponseFunctionCallOutputItem(ConversationResponseItemObject? @object = null, string id = null, string callId = null, string output = null)
        {
            return new ResponseFunctionCallOutputItem(
                @object,
                VoiceLive.ItemType.FunctionCallOutput,
                id,
                serializedAdditionalRawData: null,
                callId,
                output);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseUsage"/>. </summary>
        /// <param name="totalTokens">
        /// The total number of tokens in the Response including input and output
        /// text and audio tokens.
        /// </param>
        /// <param name="inputTokens">
        /// The number of input tokens used in the Response, including text and
        /// audio tokens.
        /// </param>
        /// <param name="outputTokens">
        /// The number of output tokens sent in the Response, including text and
        /// audio tokens.
        /// </param>
        /// <param name="inputTokenDetails"> Details about the input tokens used in the Response. </param>
        /// <param name="outputTokenDetails"> Details about the output tokens used in the Response. </param>
        /// <returns> A new <see cref="VoiceLive.ResponseUsage"/> instance for mocking. </returns>
        public static ResponseUsage ResponseUsage(int? totalTokens = null, int? inputTokens = null, int? outputTokens = null, ResponseUsageInputTokenDetails inputTokenDetails = null, ResponseUsageOutputTokenDetails outputTokenDetails = null)
        {
            return new ResponseUsage(
                totalTokens,
                inputTokens,
                outputTokens,
                inputTokenDetails,
                outputTokenDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseUsageInputTokenDetails"/>. </summary>
        /// <param name="cachedTokens"> The number of cached tokens used in the Response. </param>
        /// <param name="textTokens"> The number of text tokens used in the Response. </param>
        /// <param name="audioTokens"> The number of audio tokens used in the Response. </param>
        /// <returns> A new <see cref="VoiceLive.ResponseUsageInputTokenDetails"/> instance for mocking. </returns>
        public static ResponseUsageInputTokenDetails ResponseUsageInputTokenDetails(int? cachedTokens = null, int? textTokens = null, int? audioTokens = null)
        {
            return new ResponseUsageInputTokenDetails(cachedTokens, textTokens, audioTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseUsageOutputTokenDetails"/>. </summary>
        /// <param name="textTokens"> The number of text tokens used in the Response. </param>
        /// <param name="audioTokens"> The number of audio tokens used in the Response. </param>
        /// <returns> A new <see cref="VoiceLive.ResponseUsageOutputTokenDetails"/> instance for mocking. </returns>
        public static ResponseUsageOutputTokenDetails ResponseUsageOutputTokenDetails(int? textTokens = null, int? audioTokens = null)
        {
            return new ResponseUsageOutputTokenDetails(textTokens, audioTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="response"></param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseDone"/> instance for mocking. </returns>
        public static ServerEventResponseDone ServerEventResponseDone(string eventId = null, VoiceLiveResponse response = null)
        {
            return new ServerEventResponseDone(ServerEventType.ResponseDone, eventId, serializedAdditionalRawData: null, response);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseOutputItemAdded"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the Response to which the item belongs. </param>
        /// <param name="outputIndex"> The index of the output item in the Response. </param>
        /// <param name="item"></param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseOutputItemAdded"/> instance for mocking. </returns>
        public static ServerEventResponseOutputItemAdded ServerEventResponseOutputItemAdded(string eventId = null, string responseId = null, int outputIndex = default, ConversationItemWithReference item = null)
        {
            return new ServerEventResponseOutputItemAdded(
                ServerEventType.ResponseOutputItemAdded,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                outputIndex,
                item);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseOutputItemDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the Response to which the item belongs. </param>
        /// <param name="outputIndex"> The index of the output item in the Response. </param>
        /// <param name="item">
        /// Please note <see cref="VoiceLive.ConversationResponseItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLive.ResponseFunctionCallItem"/>, <see cref="VoiceLive.ResponseFunctionCallOutputItem"/> and <see cref="VoiceLive.ResponseMessageItem"/>.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseOutputItemDone"/> instance for mocking. </returns>
        public static ServerEventResponseOutputItemDone ServerEventResponseOutputItemDone(string eventId = null, string responseId = null, int outputIndex = default, ConversationResponseItem item = null)
        {
            return new ServerEventResponseOutputItemDone(
                ServerEventType.ResponseOutputItemDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                outputIndex,
                item);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseContentPartAdded"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item to which the content part was added. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="part">
        /// The content part that was added.
        /// Please note <see cref="ContentPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLive.ResponseAudioContentPart"/>, <see cref="RequestAudioContentPart"/>, <see cref="RequestTextContentPart"/> and <see cref="VoiceLive.ResponseTextContentPart"/>.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseContentPartAdded"/> instance for mocking. </returns>
        public static ServerEventResponseContentPartAdded ServerEventResponseContentPartAdded(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, ContentPart part = null)
        {
            return new ServerEventResponseContentPartAdded(
                ServerEventType.ResponseContentPartAdded,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                part);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseContentPartDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="part">
        /// The content part that is done.
        /// Please note <see cref="ContentPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLive.ResponseAudioContentPart"/>, <see cref="RequestAudioContentPart"/>, <see cref="RequestTextContentPart"/> and <see cref="VoiceLive.ResponseTextContentPart"/>.
        /// </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseContentPartDone"/> instance for mocking. </returns>
        public static ServerEventResponseContentPartDone ServerEventResponseContentPartDone(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, ContentPart part = null)
        {
            return new ServerEventResponseContentPartDone(
                ServerEventType.ResponseContentPartDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                part);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseTextDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="text"> The final text content. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseTextDone"/> instance for mocking. </returns>
        public static ServerEventResponseTextDone ServerEventResponseTextDone(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, string text = null)
        {
            return new ServerEventResponseTextDone(
                ServerEventType.ResponseTextDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                text);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseAudioTranscriptDelta"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="delta"> The transcript delta. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseAudioTranscriptDelta"/> instance for mocking. </returns>
        public static ServerEventResponseAudioTranscriptDelta ServerEventResponseAudioTranscriptDelta(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, string delta = null)
        {
            return new ServerEventResponseAudioTranscriptDelta(
                ServerEventType.ResponseAudioTranscriptDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseAudioTranscriptDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="transcript"> The final transcript of the audio. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseAudioTranscriptDone"/> instance for mocking. </returns>
        public static ServerEventResponseAudioTranscriptDone ServerEventResponseAudioTranscriptDone(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, string transcript = null)
        {
            return new ServerEventResponseAudioTranscriptDone(
                ServerEventType.ResponseAudioTranscriptDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                transcript);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseAudioDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseAudioDone"/> instance for mocking. </returns>
        public static ServerEventResponseAudioDone ServerEventResponseAudioDone(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default)
        {
            return new ServerEventResponseAudioDone(
                ServerEventType.ResponseAudioDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseFunctionCallArgumentsDelta"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the function call item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="callId"> The ID of the function call. </param>
        /// <param name="delta"> The arguments delta as a JSON string. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseFunctionCallArgumentsDelta"/> instance for mocking. </returns>
        public static ServerEventResponseFunctionCallArgumentsDelta ServerEventResponseFunctionCallArgumentsDelta(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, string callId = null, string delta = null)
        {
            return new ServerEventResponseFunctionCallArgumentsDelta(
                ServerEventType.ResponseFunctionCallArgumentsDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                callId,
                delta);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ServerEventResponseFunctionCallArgumentsDone"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the function call item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="callId"> The ID of the function call. </param>
        /// <param name="arguments"> The final arguments as a JSON string. </param>
        /// <param name="name"> The name of the function call. </param>
        /// <returns> A new <see cref="VoiceLive.ServerEventResponseFunctionCallArgumentsDone"/> instance for mocking. </returns>
        public static ServerEventResponseFunctionCallArgumentsDone ServerEventResponseFunctionCallArgumentsDone(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, string callId = null, string arguments = null, string name = null)
        {
            return new ServerEventResponseFunctionCallArgumentsDone(
                ServerEventType.ResponseFunctionCallArgumentsDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                callId,
                arguments,
                name);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAnimationBlendshapeDeltaEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <param name="frames"></param>
        /// <param name="frameIndex"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAnimationBlendshapeDeltaEvent"/> instance for mocking. </returns>
        public static ResponseAnimationBlendshapeDeltaEvent ResponseAnimationBlendshapeDeltaEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, BinaryData frames = null, int frameIndex = default)
        {
            return new ResponseAnimationBlendshapeDeltaEvent(
                ServerEventType.ResponseAnimationBlendshapesDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                frames,
                frameIndex);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAnimationBlendshapeDoneEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAnimationBlendshapeDoneEvent"/> instance for mocking. </returns>
        public static ResponseAnimationBlendshapeDoneEvent ResponseAnimationBlendshapeDoneEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default)
        {
            return new ResponseAnimationBlendshapeDoneEvent(
                ServerEventType.ResponseAnimationBlendshapesDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseEmotionHypothesis"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="emotion"></param>
        /// <param name="candidates"></param>
        /// <param name="audioOffsetMs"></param>
        /// <param name="audioDurationMs"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseEmotionHypothesis"/> instance for mocking. </returns>
        public static ResponseEmotionHypothesis ResponseEmotionHypothesis(string eventId = null, string emotion = null, IEnumerable<EmotionCandidate> candidates = null, int audioOffsetMs = default, int audioDurationMs = default, string responseId = null, string itemId = null)
        {
            candidates ??= new List<EmotionCandidate>();

            return new ResponseEmotionHypothesis(
                ServerEventType.ResponseEmotionHypothesis,
                eventId,
                serializedAdditionalRawData: null,
                emotion,
                candidates?.ToList(),
                audioOffsetMs,
                audioDurationMs,
                responseId,
                itemId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.EmotionCandidate"/>. </summary>
        /// <param name="emotion"></param>
        /// <param name="confidence"></param>
        /// <returns> A new <see cref="VoiceLive.EmotionCandidate"/> instance for mocking. </returns>
        public static EmotionCandidate EmotionCandidate(string emotion = null, float confidence = default)
        {
            return new EmotionCandidate(emotion, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAudioTimestampDeltaEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <param name="audioOffsetMs"></param>
        /// <param name="audioDurationMs"></param>
        /// <param name="text"></param>
        /// <param name="timestampType"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAudioTimestampDeltaEvent"/> instance for mocking. </returns>
        public static ResponseAudioTimestampDeltaEvent ResponseAudioTimestampDeltaEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, int audioOffsetMs = default, int audioDurationMs = default, string text = null, ResponseAudioTimestampDeltaEventTimestampType timestampType = default)
        {
            return new ResponseAudioTimestampDeltaEvent(
                ServerEventType.ResponseAudioTimestampDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                audioOffsetMs,
                audioDurationMs,
                text,
                timestampType);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAudioTimestampDoneEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAudioTimestampDoneEvent"/> instance for mocking. </returns>
        public static ResponseAudioTimestampDoneEvent ResponseAudioTimestampDoneEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default)
        {
            return new ResponseAudioTimestampDoneEvent(
                ServerEventType.ResponseAudioTimestampDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAnimationVisemeDeltaEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <param name="audioOffsetMs"></param>
        /// <param name="visemeId"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAnimationVisemeDeltaEvent"/> instance for mocking. </returns>
        public static ResponseAnimationVisemeDeltaEvent ResponseAnimationVisemeDeltaEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default, int audioOffsetMs = default, int visemeId = default)
        {
            return new ResponseAnimationVisemeDeltaEvent(
                ServerEventType.ResponseAnimationVisemeDelta,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                audioOffsetMs,
                visemeId);
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLive.ResponseAnimationVisemeDoneEvent"/>. </summary>
        /// <param name="eventId"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        /// <param name="outputIndex"></param>
        /// <param name="contentIndex"></param>
        /// <returns> A new <see cref="VoiceLive.ResponseAnimationVisemeDoneEvent"/> instance for mocking. </returns>
        public static ResponseAnimationVisemeDoneEvent ResponseAnimationVisemeDoneEvent(string eventId = null, string responseId = null, string itemId = null, int outputIndex = default, int contentIndex = default)
        {
            return new ResponseAnimationVisemeDoneEvent(
                ServerEventType.ResponseAnimationVisemeDone,
                eventId,
                serializedAdditionalRawData: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex);
        }
    }
}
