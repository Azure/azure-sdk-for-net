// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    /// <summary> The ResponseSession. </summary>
    public partial class ResponseSession
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ResponseSession"/>. </summary>
        internal ResponseSession()
        {
            Modalities = new ChangeTrackingList<InputModality>();
            OutputAudioTimestampTypes = new ChangeTrackingList<AudioTimestampType>();
            Tools = new ChangeTrackingList<ToolCall>();
        }

        /// <summary> Initializes a new instance of <see cref="ResponseSession"/>. </summary>
        /// <param name="id"></param>
        /// <param name="model"></param>
        /// <param name="modalities"></param>
        /// <param name="instructions"></param>
        /// <param name="animation"></param>
        /// <param name="voice"></param>
        /// <param name="inputAudio"></param>
        /// <param name="inputAudioFormat"></param>
        /// <param name="outputAudioFormat"></param>
        /// <param name="inputAudioSamplingRate"></param>
        /// <param name="turnDetection"></param>
        /// <param name="inputAudioNoiseReduction"></param>
        /// <param name="inputAudioEchoCancellation"></param>
        /// <param name="avatar"></param>
        /// <param name="inputAudioTranscription"></param>
        /// <param name="outputAudioTimestampTypes"></param>
        /// <param name="tools"></param>
        /// <param name="toolChoice"></param>
        /// <param name="temperature"></param>
        /// <param name="maxResponseOutputTokens"></param>
        /// <param name="agent"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ResponseSession(string id, string model, IList<InputModality> modalities, string instructions, AnimationOptions animation, BinaryData voice, InputAudio inputAudio, AudioFormat? inputAudioFormat, AudioFormat? outputAudioFormat, int? inputAudioSamplingRate, TurnDetection turnDetection, AudioNoiseReduction inputAudioNoiseReduction, AudioEchoCancellation inputAudioEchoCancellation, AvatarConfig avatar, AudioInputTranscriptionSettings inputAudioTranscription, IList<AudioTimestampType> outputAudioTimestampTypes, IList<ToolCall> tools, BinaryData toolChoice, float? temperature, BinaryData maxResponseOutputTokens, AgentConfig agent, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Id = id;
            Model = model;
            Modalities = modalities;
            Instructions = instructions;
            Animation = animation;
            Voice = voice;
            InputAudio = inputAudio;
            InputAudioFormat = inputAudioFormat;
            OutputAudioFormat = outputAudioFormat;
            InputAudioSamplingRate = inputAudioSamplingRate;
            TurnDetection = turnDetection;
            InputAudioNoiseReduction = inputAudioNoiseReduction;
            InputAudioEchoCancellation = inputAudioEchoCancellation;
            Avatar = avatar;
            InputAudioTranscription = inputAudioTranscription;
            OutputAudioTimestampTypes = outputAudioTimestampTypes;
            Tools = tools;
            ToolChoice = toolChoice;
            Temperature = temperature;
            MaxResponseOutputTokens = maxResponseOutputTokens;
            Agent = agent;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets the Id. </summary>
        public string Id { get; }

        /// <summary> Gets the Model. </summary>
        public string Model { get; }

        /// <summary> Gets the Modalities. </summary>
        public IList<InputModality> Modalities { get; }

        /// <summary> Gets the Instructions. </summary>
        public string Instructions { get; }

        /// <summary> Gets the Animation. </summary>
        public AnimationOptions Animation { get; }

        /// <summary>
        /// Gets the Voice.
        /// <para> To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> <see cref="OAIVoice"/>. </description>
        /// </item>
        /// <item>
        /// <description> <see cref="AzureStandardVoice"/>. </description>
        /// </item>
        /// <item>
        /// <description> <see cref="AzureCustomVoice"/>. </description>
        /// </item>
        /// <item>
        /// <description> <see cref="AzurePersonalVoice"/>. </description>
        /// </item>
        /// <item>
        /// <description> <see cref="Phi4mmVoice"/>. </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Voice { get; }

        /// <summary> Gets the InputAudio. </summary>
        public InputAudio InputAudio { get; }

        /// <summary> Gets the InputAudioFormat. </summary>
        public AudioFormat? InputAudioFormat { get; }

        /// <summary> Gets the OutputAudioFormat. </summary>
        public AudioFormat? OutputAudioFormat { get; }

        /// <summary> Gets the InputAudioSamplingRate. </summary>
        public int? InputAudioSamplingRate { get; }

        /// <summary> Gets the TurnDetection. </summary>
        public TurnDetection TurnDetection { get; }

        /// <summary> Gets the InputAudioNoiseReduction. </summary>
        public AudioNoiseReduction InputAudioNoiseReduction { get; }

        /// <summary> Gets the InputAudioEchoCancellation. </summary>
        public AudioEchoCancellation InputAudioEchoCancellation { get; }

        /// <summary> Gets the Avatar. </summary>
        public AvatarConfig Avatar { get; }

        /// <summary> Gets the InputAudioTranscription. </summary>
        public AudioInputTranscriptionSettings InputAudioTranscription { get; }

        /// <summary> Gets the OutputAudioTimestampTypes. </summary>
        public IList<AudioTimestampType> OutputAudioTimestampTypes { get; }

        /// <summary> Gets the Tools. </summary>
        public IList<ToolCall> Tools { get; }

        /// <summary>
        /// Gets the ToolChoice.
        /// <para> To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> <see cref="ToolChoiceLiteral"/>. </description>
        /// </item>
        /// <item>
        /// <description> <see cref="ToolChoiceObject"/>. </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData ToolChoice { get; }

        /// <summary> Gets the Temperature. </summary>
        public float? Temperature { get; }

        /// <summary>
        /// Gets the MaxResponseOutputTokens.
        /// <para> To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> <see cref="int"/>. </description>
        /// </item>
        /// <item>
        /// <description> "inf". </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData MaxResponseOutputTokens { get; }

        /// <summary> Gets the Agent. </summary>
        public AgentConfig Agent { get; }
    }
}
