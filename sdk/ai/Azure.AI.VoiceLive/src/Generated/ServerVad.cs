// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> Base model for VAD-based turn detection. </summary>
    public partial class ServerVad : TurnDetection
    {
        /// <summary> Initializes a new instance of <see cref="ServerVad"/>. </summary>
        public ServerVad()
        {
            Type = TurnDetectionType.ServerVad;
        }

        /// <summary> Initializes a new instance of <see cref="ServerVad"/>. </summary>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="threshold"></param>
        /// <param name="prefixPaddingMs"></param>
        /// <param name="silenceDurationMs"></param>
        /// <param name="endOfUtteranceDetection"></param>
        internal ServerVad(TurnDetectionType type, IDictionary<string, BinaryData> serializedAdditionalRawData, float? threshold, int? prefixPaddingMs, int? silenceDurationMs, BinaryData endOfUtteranceDetection) : base(type, serializedAdditionalRawData)
        {
            Threshold = threshold;
            PrefixPaddingMs = prefixPaddingMs;
            SilenceDurationMs = silenceDurationMs;
            EndOfUtteranceDetection = endOfUtteranceDetection;
        }

        /// <summary> Gets or sets the threshold. </summary>
        public float? Threshold { get; set; }
        /// <summary> Gets or sets the prefix padding ms. </summary>
        public int? PrefixPaddingMs { get; set; }
        /// <summary> Gets or sets the silence duration ms. </summary>
        public int? SilenceDurationMs { get; set; }
        /// <summary>
        /// Gets or sets the end of utterance detection
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData EndOfUtteranceDetection { get; set; }
    }
}
