// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> The response resource. </summary>
    public partial class VoiceLiveResponse
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="VoiceLiveResponse"/>. </summary>
        internal VoiceLiveResponse()
        {
            Output = new ChangeTrackingList<ResponseItem>();
            ModalitiesInternal = new ChangeTrackingList<ResponseModality>();
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveResponse"/>. </summary>
        /// <param name="id"> The unique ID of the response. </param>
        /// <param name="object"> The object type, must be `realtime.response`. </param>
        /// <param name="status">
        /// The final status of the response.
        /// One of: `completed`, `cancelled`, `failed`, `incomplete`, or `in_progress`.
        /// </param>
        /// <param name="statusDetails"> Additional details about the status. </param>
        /// <param name="output"> The list of output items generated by the response. </param>
        /// <param name="usage">
        /// Usage statistics for the Response, this will correspond to billing. A
        /// VoiceLive API session will maintain a conversation context and append new
        /// Items to the Conversation, thus output from previous turns (text and
        /// audio tokens) will become the input for later turns.
        /// </param>
        /// <param name="conversationId">
        /// Which conversation the response is added to, determined by the `conversation`
        /// field in the `response.create` event. If `auto`, the response will be added to
        /// the default conversation and the value of `conversation_id` will be an id like
        /// `conv_1234`. If `none`, the response will not be added to any conversation and
        /// the value of `conversation_id` will be `null`. If responses are being triggered
        /// by server VAD, the response will be added to the default conversation, thus
        /// the `conversation_id` will be an id like `conv_1234`.
        /// </param>
        /// <param name="voiceInternal">
        /// supported voice identifiers and configurations.
        ///      To assign an object to this property use .  To assign an already formatted json string to this property use . 
        ///     Supported types:
        ///     . . . . . 
        ///     Examples:
        ///      BinaryData.FromObjectAsJson("foo").  Creates a payload of "foo".  BinaryData.FromString("\"foo\"").  Creates a payload of "foo".  BinaryData.FromObjectAsJson(new { key = "value" }).  Creates a payload of { "key": "value" }.  BinaryData.FromString("{\"key\": \"value\"}").  Creates a payload of { "key": "value" }.
        /// </param>
        /// <param name="modalitiesInternal"></param>
        /// <param name="outputAudioFormat"> The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. </param>
        /// <param name="temperature"> Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. </param>
        /// <param name="maxOutputTokens"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal VoiceLiveResponse(string id, string @object, VoiceLiveResponseStatus? status, ResponseStatusDetails statusDetails, IList<ResponseItem> output, ResponseTokenStatistics usage, string conversationId, BinaryData voiceInternal, IList<ResponseModality> modalitiesInternal, AudioFormat? outputAudioFormat, float? temperature, BinaryData maxOutputTokens, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Id = id;
            Object = @object;
            Status = status;
            StatusDetails = statusDetails;
            Output = output;
            Usage = usage;
            ConversationId = conversationId;
            VoiceInternal = voiceInternal;
            ModalitiesInternal = modalitiesInternal;
            OutputAudioFormat = outputAudioFormat;
            Temperature = temperature;
            _MaxOutputTokens = maxOutputTokens;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The unique ID of the response. </summary>
        public string Id { get; }

        /// <summary> The object type, must be `realtime.response`. </summary>
        public string Object { get; }

        /// <summary>
        /// The final status of the response.
        /// One of: `completed`, `cancelled`, `failed`, `incomplete`, or `in_progress`.
        /// </summary>
        public VoiceLiveResponseStatus? Status { get; }

        /// <summary> Additional details about the status. </summary>
        public ResponseStatusDetails StatusDetails { get; }

        /// <summary> The list of output items generated by the response. </summary>
        public IList<ResponseItem> Output { get; }

        /// <summary>
        /// Usage statistics for the Response, this will correspond to billing. A
        /// VoiceLive API session will maintain a conversation context and append new
        /// Items to the Conversation, thus output from previous turns (text and
        /// audio tokens) will become the input for later turns.
        /// </summary>
        public ResponseTokenStatistics Usage { get; }

        /// <summary>
        /// Which conversation the response is added to, determined by the `conversation`
        /// field in the `response.create` event. If `auto`, the response will be added to
        /// the default conversation and the value of `conversation_id` will be an id like
        /// `conv_1234`. If `none`, the response will not be added to any conversation and
        /// the value of `conversation_id` will be `null`. If responses are being triggered
        /// by server VAD, the response will be added to the default conversation, thus
        /// the `conversation_id` will be an id like `conv_1234`.
        /// </summary>
        public string ConversationId { get; }

        /// <summary> The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. </summary>
        public AudioFormat? OutputAudioFormat { get; }

        /// <summary> Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. </summary>
        public float? Temperature { get; }
    }
}
