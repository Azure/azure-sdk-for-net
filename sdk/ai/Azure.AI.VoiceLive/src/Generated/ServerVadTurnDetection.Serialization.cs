// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    /// <summary> Base model for VAD-based turn detection. </summary>
    public partial class ServerVadTurnDetection : TurnDetection, IJsonModel<ServerVadTurnDetection>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ServerVadTurnDetection>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ServerVadTurnDetection>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ServerVadTurnDetection)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Threshold))
            {
                writer.WritePropertyName("threshold"u8);
                writer.WriteNumberValue(Threshold.Value);
            }
            if (Optional.IsDefined(PrefixPaddingMs))
            {
                writer.WritePropertyName("prefix_padding_ms"u8);
                writer.WriteNumberValue(PrefixPaddingMs.Value);
            }
            if (Optional.IsDefined(SilenceDurationMs))
            {
                writer.WritePropertyName("silence_duration_ms"u8);
                writer.WriteNumberValue(SilenceDurationMs.Value);
            }
            if (Optional.IsDefined(EndOfUtteranceDetection))
            {
                writer.WritePropertyName("end_of_utterance_detection"u8);
                writer.WriteObjectValue(EndOfUtteranceDetection, options);
            }
            if (Optional.IsDefined(AutoTruncate))
            {
                writer.WritePropertyName("auto_truncate"u8);
                writer.WriteBooleanValue(AutoTruncate.Value);
            }
            if (Optional.IsDefined(CreateResponse))
            {
                writer.WritePropertyName("create_response"u8);
                writer.WriteBooleanValue(CreateResponse.Value);
            }
            if (Optional.IsDefined(InterruptResponse))
            {
                writer.WritePropertyName("interrupt_response"u8);
                writer.WriteBooleanValue(InterruptResponse.Value);
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ServerVadTurnDetection IJsonModel<ServerVadTurnDetection>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (ServerVadTurnDetection)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override TurnDetection JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ServerVadTurnDetection>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ServerVadTurnDetection)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeServerVadTurnDetection(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static ServerVadTurnDetection DeserializeServerVadTurnDetection(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            TurnDetectionType @type = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            float? threshold = default;
            int? prefixPaddingMs = default;
            int? silenceDurationMs = default;
            EouDetection endOfUtteranceDetection = default;
            bool? autoTruncate = default;
            bool? createResponse = default;
            bool? interruptResponse = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    @type = new TurnDetectionType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("threshold"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    threshold = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("prefix_padding_ms"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    prefixPaddingMs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("silence_duration_ms"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    silenceDurationMs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("end_of_utterance_detection"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endOfUtteranceDetection = EouDetection.DeserializeEouDetection(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("auto_truncate"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoTruncate = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("create_response"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createResponse = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("interrupt_response"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    interruptResponse = prop.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new ServerVadTurnDetection(
                @type,
                additionalBinaryDataProperties,
                threshold,
                prefixPaddingMs,
                silenceDurationMs,
                endOfUtteranceDetection,
                autoTruncate,
                createResponse,
                interruptResponse);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ServerVadTurnDetection>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ServerVadTurnDetection>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ServerVadTurnDetection)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ServerVadTurnDetection IPersistableModel<ServerVadTurnDetection>.Create(BinaryData data, ModelReaderWriterOptions options) => (ServerVadTurnDetection)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override TurnDetection PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ServerVadTurnDetection>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeServerVadTurnDetection(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ServerVadTurnDetection)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ServerVadTurnDetection>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
