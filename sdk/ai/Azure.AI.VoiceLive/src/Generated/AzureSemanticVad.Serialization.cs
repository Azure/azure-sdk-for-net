// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    /// <summary> Semantic VAD settings based on Azure SDK features. </summary>
    public partial class AzureSemanticVad : IJsonModel<AzureSemanticVad>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<AzureSemanticVad>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AzureSemanticVad>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AzureSemanticVad)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(NegThreshold))
            {
                writer.WritePropertyName("neg_threshold"u8);
                writer.WriteNumberValue(NegThreshold.Value);
            }
            if (Optional.IsDefined(WindowSize))
            {
                writer.WritePropertyName("window_size"u8);
                writer.WriteNumberValue(WindowSize.Value);
            }
            if (Optional.IsDefined(DistinctCiPhones))
            {
                writer.WritePropertyName("distinct_ci_phones"u8);
                writer.WriteNumberValue(DistinctCiPhones.Value);
            }
            if (Optional.IsDefined(RequireVowel))
            {
                writer.WritePropertyName("require_vowel"u8);
                writer.WriteBooleanValue(RequireVowel.Value);
            }
            if (Optional.IsDefined(RemoveFillerWords))
            {
                writer.WritePropertyName("remove_filler_words"u8);
                writer.WriteBooleanValue(RemoveFillerWords.Value);
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AzureSemanticVad IJsonModel<AzureSemanticVad>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (AzureSemanticVad)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override TurnDetection JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AzureSemanticVad>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AzureSemanticVad)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAzureSemanticVad(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static AzureSemanticVad DeserializeAzureSemanticVad(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            TurnDetectionType @type = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            float? negThreshold = default;
            int? windowSize = default;
            int? distinctCiPhones = default;
            bool? requireVowel = default;
            bool? removeFillerWords = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    @type = prop.Value.GetString().ToTurnDetectionType();
                    continue;
                }
                if (prop.NameEquals("neg_threshold"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    negThreshold = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("window_size"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    windowSize = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("distinct_ci_phones"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    distinctCiPhones = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("require_vowel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    requireVowel = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("remove_filler_words"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    removeFillerWords = prop.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new AzureSemanticVad(
                @type,
                additionalBinaryDataProperties,
                negThreshold,
                windowSize,
                distinctCiPhones,
                requireVowel,
                removeFillerWords);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<AzureSemanticVad>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AzureSemanticVad>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AzureSemanticVad)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AzureSemanticVad IPersistableModel<AzureSemanticVad>.Create(BinaryData data, ModelReaderWriterOptions options) => (AzureSemanticVad)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override TurnDetection PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AzureSemanticVad>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAzureSemanticVad(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AzureSemanticVad)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<AzureSemanticVad>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
