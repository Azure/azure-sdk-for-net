// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.AI.VoiceLive
{
    internal static partial class OAIVoiceExtensions
    {
        public static string ToSerialString(this OAIVoice value) => value switch
        {
            OAIVoice.Alloy => "alloy",
            OAIVoice.Ash => "ash",
            OAIVoice.Ballad => "ballad",
            OAIVoice.Coral => "coral",
            OAIVoice.Echo => "echo",
            OAIVoice.Sage => "sage",
            OAIVoice.Shimmer => "shimmer",
            OAIVoice.Verse => "verse",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown OAIVoice value.")
        };

        public static OAIVoice ToOAIVoice(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "alloy")) return OAIVoice.Alloy;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ash")) return OAIVoice.Ash;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ballad")) return OAIVoice.Ballad;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "coral")) return OAIVoice.Coral;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "echo")) return OAIVoice.Echo;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "sage")) return OAIVoice.Sage;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "shimmer")) return OAIVoice.Shimmer;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "verse")) return OAIVoice.Verse;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown OAIVoice value.");
        }
    }
}
