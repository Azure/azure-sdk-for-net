// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> The VoiceLiveConversationItemWithReferenceContent. </summary>
    public partial class VoiceLiveConversationItemWithReferenceContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VoiceLiveConversationItemWithReferenceContent"/>. </summary>
        internal VoiceLiveConversationItemWithReferenceContent()
        {
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveConversationItemWithReferenceContent"/>. </summary>
        /// <param name="type"> The content type (`input_text`, `input_audio`, `item_reference`, `text`). </param>
        /// <param name="text"> The text content, used for `input_text` and `text` content types. </param>
        /// <param name="id">
        /// ID of a previous conversation item to reference (for `item_reference`
        /// content types in `response.create` events). These can reference both
        /// client and server created items.
        /// </param>
        /// <param name="audio"> Base64-encoded audio bytes, used for `input_audio` content type. </param>
        /// <param name="transcript"> The transcript of the audio, used for `input_audio` content type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VoiceLiveConversationItemWithReferenceContent(VoiceLiveConversationItemWithReferenceContentType? type, string text, string id, string audio, string transcript, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            Text = text;
            Id = id;
            Audio = audio;
            Transcript = transcript;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The content type (`input_text`, `input_audio`, `item_reference`, `text`). </summary>
        public VoiceLiveConversationItemWithReferenceContentType? Type { get; }
        /// <summary> The text content, used for `input_text` and `text` content types. </summary>
        public string Text { get; }
        /// <summary>
        /// ID of a previous conversation item to reference (for `item_reference`
        /// content types in `response.create` events). These can reference both
        /// client and server created items.
        /// </summary>
        public string Id { get; }
        /// <summary> Base64-encoded audio bytes, used for `input_audio` content type. </summary>
        public string Audio { get; }
        /// <summary> The transcript of the audio, used for `input_audio` content type. </summary>
        public string Transcript { get; }
    }
}
