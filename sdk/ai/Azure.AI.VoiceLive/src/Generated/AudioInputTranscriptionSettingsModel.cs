// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary></summary>
    public readonly partial struct AudioInputTranscriptionSettingsModel : IEquatable<AudioInputTranscriptionSettingsModel>
    {
        private readonly string _value;
        private const string Whisper1Value = "whisper-1";
        private const string Gpt4oTranscribeValue = "gpt-4o-transcribe";
        private const string Gpt4oMiniTranscribeValue = "gpt-4o-mini-transcribe";
        private const string AzureSpeechValue = "azure-speech";

        /// <summary> Initializes a new instance of <see cref="AudioInputTranscriptionSettingsModel"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AudioInputTranscriptionSettingsModel(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Gets the Whisper1. </summary>
        public static AudioInputTranscriptionSettingsModel Whisper1 { get; } = new AudioInputTranscriptionSettingsModel(Whisper1Value);

        /// <summary> Gets the Gpt4oTranscribe. </summary>
        public static AudioInputTranscriptionSettingsModel Gpt4oTranscribe { get; } = new AudioInputTranscriptionSettingsModel(Gpt4oTranscribeValue);

        /// <summary> Gets the Gpt4oMiniTranscribe. </summary>
        public static AudioInputTranscriptionSettingsModel Gpt4oMiniTranscribe { get; } = new AudioInputTranscriptionSettingsModel(Gpt4oMiniTranscribeValue);

        /// <summary> Gets the AzureSpeech. </summary>
        public static AudioInputTranscriptionSettingsModel AzureSpeech { get; } = new AudioInputTranscriptionSettingsModel(AzureSpeechValue);

        /// <summary> Determines if two <see cref="AudioInputTranscriptionSettingsModel"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(AudioInputTranscriptionSettingsModel left, AudioInputTranscriptionSettingsModel right) => left.Equals(right);

        /// <summary> Determines if two <see cref="AudioInputTranscriptionSettingsModel"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(AudioInputTranscriptionSettingsModel left, AudioInputTranscriptionSettingsModel right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="AudioInputTranscriptionSettingsModel"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator AudioInputTranscriptionSettingsModel(string value) => new AudioInputTranscriptionSettingsModel(value);

        /// <summary> Converts a string to a <see cref="AudioInputTranscriptionSettingsModel"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator AudioInputTranscriptionSettingsModel?(string value) => value == null ? null : new AudioInputTranscriptionSettingsModel(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AudioInputTranscriptionSettingsModel other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(AudioInputTranscriptionSettingsModel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
