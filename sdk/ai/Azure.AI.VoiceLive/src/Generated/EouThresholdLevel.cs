// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary> Threshold level settings for Azure semantic end-of-utterance detection. </summary>
    public readonly partial struct EouThresholdLevel : IEquatable<EouThresholdLevel>
    {
        private readonly string _value;
        /// <summary> Low sensitivity threshold level. </summary>
        private const string LowValue = "low";
        /// <summary> Medium sensitivity threshold level. </summary>
        private const string MediumValue = "medium";
        /// <summary> High sensitivity threshold level. </summary>
        private const string HighValue = "high";
        /// <summary> Default sensitivity threshold level. </summary>
        private const string DefaultValue = "default";

        /// <summary> Initializes a new instance of <see cref="EouThresholdLevel"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EouThresholdLevel(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Low sensitivity threshold level. </summary>
        public static EouThresholdLevel Low { get; } = new EouThresholdLevel(LowValue);

        /// <summary> Medium sensitivity threshold level. </summary>
        public static EouThresholdLevel Medium { get; } = new EouThresholdLevel(MediumValue);

        /// <summary> High sensitivity threshold level. </summary>
        public static EouThresholdLevel High { get; } = new EouThresholdLevel(HighValue);

        /// <summary> Default sensitivity threshold level. </summary>
        public static EouThresholdLevel Default { get; } = new EouThresholdLevel(DefaultValue);

        /// <summary> Determines if two <see cref="EouThresholdLevel"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(EouThresholdLevel left, EouThresholdLevel right) => left.Equals(right);

        /// <summary> Determines if two <see cref="EouThresholdLevel"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(EouThresholdLevel left, EouThresholdLevel right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="EouThresholdLevel"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator EouThresholdLevel(string value) => new EouThresholdLevel(value);

        /// <summary> Converts a string to a <see cref="EouThresholdLevel"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator EouThresholdLevel?(string value) => value == null ? null : new EouThresholdLevel(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EouThresholdLevel other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(EouThresholdLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
