// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> Video streaming parameters for avatar. </summary>
    public partial class VideoParams
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VideoParams"/>. </summary>
        public VideoParams()
        {
        }

        /// <summary> Initializes a new instance of <see cref="VideoParams"/>. </summary>
        /// <param name="bitrate"> Bitrate in bits per second (e.g., 2000000 for 2 Mbps). </param>
        /// <param name="codec"> Codec to use for encoding. Currently only 'h264' is supported. </param>
        /// <param name="crop"> Optional cropping settings for the video stream. </param>
        /// <param name="resolution"> Optional resolution settings for the video stream. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VideoParams(int? bitrate, VideoParamsCodec? codec, VideoCrop crop, VideoResolution resolution, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Bitrate = bitrate;
            Codec = codec;
            Crop = crop;
            Resolution = resolution;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Bitrate in bits per second (e.g., 2000000 for 2 Mbps). </summary>
        public int? Bitrate { get; set; }
        /// <summary> Codec to use for encoding. Currently only 'h264' is supported. </summary>
        public VideoParamsCodec? Codec { get; set; }
        /// <summary> Optional cropping settings for the video stream. </summary>
        public VideoCrop Crop { get; set; }
        /// <summary> Optional resolution settings for the video stream. </summary>
        public VideoResolution Resolution { get; set; }
    }
}
