// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> The item to add to the conversation. </summary>
    public partial class ConversationItemWithReference
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ConversationItemWithReference"/>. </summary>
        public ConversationItemWithReference()
        {
            Content = new ChangeTrackingList<ConversationItemWithReferenceContent>();
        }

        /// <summary> Initializes a new instance of <see cref="ConversationItemWithReference"/>. </summary>
        /// <param name="id">
        /// For an item of type (`message` | `function_call` | `function_call_output`)
        /// this field allows the client to assign the unique ID of the item. It is
        /// not required because the server will generate one if not provided.
        /// 
        /// For an item of type `item_reference`, this field is required and is a
        /// reference to any item that has previously existed in the conversation.
        /// </param>
        /// <param name="type"> The type of the item (`message`, `function_call`, `function_call_output`, `item_reference`). </param>
        /// <param name="object"> Identifier for the API object being returned - always `realtime.item`. </param>
        /// <param name="status">
        /// The status of the item (`completed`, `incomplete`). These have no effect
        /// on the conversation, but are accepted for consistency with the
        /// `conversation.item.created` event.
        /// </param>
        /// <param name="role">
        /// The role of the message sender (`user`, `assistant`, `system`), only
        /// applicable for `message` items.
        /// </param>
        /// <param name="content">
        /// The content of the message, applicable for `message` items.
        /// - Message items of role `system` support only `input_text` content
        /// - Message items of role `user` support `input_text` and `input_audio`
        ///   content
        /// - Message items of role `assistant` support `text` content.
        /// </param>
        /// <param name="callId">
        /// The ID of the function call (for `function_call` and
        /// `function_call_output` items). If passed on a `function_call_output`
        /// item, the server will check that a `function_call` item with the same
        /// ID exists in the conversation history.
        /// </param>
        /// <param name="name"> The name of the function being called (for `function_call` items). </param>
        /// <param name="arguments"> The arguments of the function call (for `function_call` items). </param>
        /// <param name="output"> The output of the function call (for `function_call_output` items). </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ConversationItemWithReference(string id, ConversationItemWithReferenceType? @type, string @object, ConversationItemWithReferenceStatus? status, MessageRole? role, IList<ConversationItemWithReferenceContent> content, string callId, string name, string arguments, string output, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Id = id;
            Type = @type;
            Object = @object;
            Status = status;
            Role = role;
            Content = content;
            CallId = callId;
            Name = name;
            Arguments = arguments;
            Output = output;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary>
        /// For an item of type (`message` | `function_call` | `function_call_output`)
        /// this field allows the client to assign the unique ID of the item. It is
        /// not required because the server will generate one if not provided.
        /// 
        /// For an item of type `item_reference`, this field is required and is a
        /// reference to any item that has previously existed in the conversation.
        /// </summary>
        public string Id { get; set; }

        /// <summary> The type of the item (`message`, `function_call`, `function_call_output`, `item_reference`). </summary>
        public ConversationItemWithReferenceType? Type { get; set; }

        /// <summary> Identifier for the API object being returned - always `realtime.item`. </summary>
        public string Object { get; set; }

        /// <summary>
        /// The status of the item (`completed`, `incomplete`). These have no effect
        /// on the conversation, but are accepted for consistency with the
        /// `conversation.item.created` event.
        /// </summary>
        public ConversationItemWithReferenceStatus? Status { get; set; }

        /// <summary>
        /// The role of the message sender (`user`, `assistant`, `system`), only
        /// applicable for `message` items.
        /// </summary>
        public MessageRole? Role { get; set; }

        /// <summary>
        /// The content of the message, applicable for `message` items.
        /// - Message items of role `system` support only `input_text` content
        /// - Message items of role `user` support `input_text` and `input_audio`
        ///   content
        /// - Message items of role `assistant` support `text` content.
        /// </summary>
        public IList<ConversationItemWithReferenceContent> Content { get; }

        /// <summary>
        /// The ID of the function call (for `function_call` and
        /// `function_call_output` items). If passed on a `function_call_output`
        /// item, the server will check that a `function_call` item with the same
        /// ID exists in the conversation history.
        /// </summary>
        public string CallId { get; set; }

        /// <summary> The name of the function being called (for `function_call` items). </summary>
        public string Name { get; set; }

        /// <summary> The arguments of the function call (for `function_call` items). </summary>
        public string Arguments { get; set; }

        /// <summary> The output of the function call (for `function_call_output` items). </summary>
        public string Output { get; set; }
    }
}
