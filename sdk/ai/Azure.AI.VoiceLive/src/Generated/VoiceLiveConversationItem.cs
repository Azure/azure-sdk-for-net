// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> The VoiceLiveConversationItem. </summary>
    public partial class VoiceLiveConversationItem
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VoiceLiveConversationItem"/>. </summary>
        internal VoiceLiveConversationItem()
        {
            Content = new ChangeTrackingList<VoiceLiveConversationItemContent>();
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveConversationItem"/>. </summary>
        /// <param name="id"></param>
        /// <param name="arguments"></param>
        /// <param name="callId"></param>
        /// <param name="content"></param>
        /// <param name="name"></param>
        /// <param name="object"></param>
        /// <param name="output"></param>
        /// <param name="role"></param>
        /// <param name="status"></param>
        /// <param name="type"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VoiceLiveConversationItem(string id, string arguments, string callId, IReadOnlyList<VoiceLiveConversationItemContent> content, string name, VoiceLiveConversationItemObject? @object, string output, VoiceLiveConversationItemRole? role, VoiceLiveConversationItemStatus? status, VoiceLiveConversationItemType? type, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Arguments = arguments;
            CallId = callId;
            Content = content;
            Name = name;
            Object = @object;
            Output = output;
            Role = role;
            Status = status;
            Type = type;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the arguments. </summary>
        public string Arguments { get; }
        /// <summary> Gets the call id. </summary>
        public string CallId { get; }
        /// <summary> Gets the content. </summary>
        public IReadOnlyList<VoiceLiveConversationItemContent> Content { get; }
        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the object. </summary>
        public VoiceLiveConversationItemObject? Object { get; }
        /// <summary> Gets the output. </summary>
        public string Output { get; }
        /// <summary> Gets the role. </summary>
        public VoiceLiveConversationItemRole? Role { get; }
        /// <summary> Gets the status. </summary>
        public VoiceLiveConversationItemStatus? Status { get; }
        /// <summary> Gets the type. </summary>
        public VoiceLiveConversationItemType? Type { get; }
    }
}
