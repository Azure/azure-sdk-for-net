// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.VoiceLive
{
    public partial class RequestSession : IUtf8JsonSerializable, IJsonModel<RequestSession>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RequestSession>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<RequestSession>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RequestSession>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RequestSession)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Model))
            {
                writer.WritePropertyName("model"u8);
                writer.WriteStringValue(Model);
            }
            if (Optional.IsCollectionDefined(Modalities))
            {
                writer.WritePropertyName("modalities"u8);
                writer.WriteStartArray();
                foreach (var item in Modalities)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Animation))
            {
                writer.WritePropertyName("animation"u8);
                writer.WriteObjectValue(Animation, options);
            }
            if (Optional.IsDefined(Voice))
            {
                writer.WritePropertyName("voice"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Voice);
#else
                using (JsonDocument document = JsonDocument.Parse(Voice, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(Instructions))
            {
                writer.WritePropertyName("instructions"u8);
                writer.WriteStringValue(Instructions);
            }
            if (Optional.IsDefined(InputAudio))
            {
                writer.WritePropertyName("input_audio"u8);
                writer.WriteObjectValue(InputAudio, options);
            }
            if (Optional.IsDefined(InputAudioSamplingRate))
            {
                writer.WritePropertyName("input_audio_sampling_rate"u8);
                writer.WriteNumberValue(InputAudioSamplingRate.Value);
            }
            if (Optional.IsDefined(InputAudioFormat))
            {
                writer.WritePropertyName("input_audio_format"u8);
                writer.WriteStringValue(InputAudioFormat.Value.ToString());
            }
            if (Optional.IsDefined(OutputAudioFormat))
            {
                writer.WritePropertyName("output_audio_format"u8);
                writer.WriteStringValue(OutputAudioFormat.Value.ToString());
            }
            if (Optional.IsDefined(TurnDetection))
            {
                if (TurnDetection != null)
                {
                    writer.WritePropertyName("turn_detection"u8);
                    writer.WriteObjectValue(TurnDetection, options);
                }
                else
                {
                    writer.WriteNull("turn_detection");
                }
            }
            if (Optional.IsDefined(InputAudioNoiseReduction))
            {
                writer.WritePropertyName("input_audio_noise_reduction"u8);
                writer.WriteObjectValue(InputAudioNoiseReduction, options);
            }
            if (Optional.IsDefined(InputAudioEchoCancellation))
            {
                writer.WritePropertyName("input_audio_echo_cancellation"u8);
                writer.WriteObjectValue(InputAudioEchoCancellation, options);
            }
            if (Optional.IsDefined(Avatar))
            {
                writer.WritePropertyName("avatar"u8);
                writer.WriteObjectValue(Avatar, options);
            }
            if (Optional.IsDefined(InputAudioTranscription))
            {
                writer.WritePropertyName("input_audio_transcription"u8);
                writer.WriteObjectValue(InputAudioTranscription, options);
            }
            if (Optional.IsCollectionDefined(OutputAudioTimestampTypes))
            {
                writer.WritePropertyName("output_audio_timestamp_types"u8);
                writer.WriteStartArray();
                foreach (var item in OutputAudioTimestampTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Tools))
            {
                writer.WritePropertyName("tools"u8);
                writer.WriteStartArray();
                foreach (var item in Tools)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ToolChoice))
            {
                writer.WritePropertyName("tool_choice"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(ToolChoice);
#else
                using (JsonDocument document = JsonDocument.Parse(ToolChoice, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(Temperature))
            {
                writer.WritePropertyName("temperature"u8);
                writer.WriteNumberValue(Temperature.Value);
            }
            if (Optional.IsDefined(MaxResponseOutputTokens))
            {
                writer.WritePropertyName("max_response_output_tokens"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(MaxResponseOutputTokens);
#else
                using (JsonDocument document = JsonDocument.Parse(MaxResponseOutputTokens, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        RequestSession IJsonModel<RequestSession>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RequestSession>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RequestSession)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRequestSession(document.RootElement, options);
        }

        internal static RequestSession DeserializeRequestSession(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string model = default;
            IList<InputModality> modalities = default;
            AnimationOptions animation = default;
            BinaryData voice = default;
            string instructions = default;
            InputAudio inputAudio = default;
            int? inputAudioSamplingRate = default;
            AudioFormat? inputAudioFormat = default;
            AudioFormat? outputAudioFormat = default;
            TurnDetection turnDetection = default;
            AudioNoiseReduction inputAudioNoiseReduction = default;
            AudioEchoCancellation inputAudioEchoCancellation = default;
            AvatarConfig avatar = default;
            AudioInputTranscriptionSettings inputAudioTranscription = default;
            IList<AudioTimestampType> outputAudioTimestampTypes = default;
            IList<ToolCall> tools = default;
            BinaryData toolChoice = default;
            float? temperature = default;
            BinaryData maxResponseOutputTokens = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("model"u8))
                {
                    model = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("modalities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<InputModality> array = new List<InputModality>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new InputModality(item.GetString()));
                    }
                    modalities = array;
                    continue;
                }
                if (property.NameEquals("animation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    animation = AnimationOptions.DeserializeAnimationOptions(property.Value, options);
                    continue;
                }
                if (property.NameEquals("voice"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    voice = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("instructions"u8))
                {
                    instructions = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("input_audio"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputAudio = InputAudio.DeserializeInputAudio(property.Value, options);
                    continue;
                }
                if (property.NameEquals("input_audio_sampling_rate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputAudioSamplingRate = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("input_audio_format"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputAudioFormat = new AudioFormat(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("output_audio_format"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    outputAudioFormat = new AudioFormat(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("turn_detection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        turnDetection = null;
                        continue;
                    }
                    turnDetection = TurnDetection.DeserializeTurnDetection(property.Value, options);
                    continue;
                }
                if (property.NameEquals("input_audio_noise_reduction"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputAudioNoiseReduction = AudioNoiseReduction.DeserializeAudioNoiseReduction(property.Value, options);
                    continue;
                }
                if (property.NameEquals("input_audio_echo_cancellation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputAudioEchoCancellation = AudioEchoCancellation.DeserializeAudioEchoCancellation(property.Value, options);
                    continue;
                }
                if (property.NameEquals("avatar"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    avatar = AvatarConfig.DeserializeAvatarConfig(property.Value, options);
                    continue;
                }
                if (property.NameEquals("input_audio_transcription"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputAudioTranscription = AudioInputTranscriptionSettings.DeserializeAudioInputTranscriptionSettings(property.Value, options);
                    continue;
                }
                if (property.NameEquals("output_audio_timestamp_types"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AudioTimestampType> array = new List<AudioTimestampType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AudioTimestampType(item.GetString()));
                    }
                    outputAudioTimestampTypes = array;
                    continue;
                }
                if (property.NameEquals("tools"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ToolCall> array = new List<ToolCall>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ToolCall.DeserializeToolCall(item, options));
                    }
                    tools = array;
                    continue;
                }
                if (property.NameEquals("tool_choice"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toolChoice = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("temperature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    temperature = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("max_response_output_tokens"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxResponseOutputTokens = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new RequestSession(
                model,
                modalities ?? new ChangeTrackingList<InputModality>(),
                animation,
                voice,
                instructions,
                inputAudio,
                inputAudioSamplingRate,
                inputAudioFormat,
                outputAudioFormat,
                turnDetection,
                inputAudioNoiseReduction,
                inputAudioEchoCancellation,
                avatar,
                inputAudioTranscription,
                outputAudioTimestampTypes ?? new ChangeTrackingList<AudioTimestampType>(),
                tools ?? new ChangeTrackingList<ToolCall>(),
                toolChoice,
                temperature,
                maxResponseOutputTokens,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<RequestSession>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RequestSession>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(RequestSession)} does not support writing '{options.Format}' format.");
            }
        }

        RequestSession IPersistableModel<RequestSession>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RequestSession>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeRequestSession(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RequestSession)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<RequestSession>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static RequestSession FromResponse(Azure.Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeRequestSession(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
