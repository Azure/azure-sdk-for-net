// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary>
    /// Returned when a new content part is added to an assistant message item during
    /// response generation.
    /// </summary>
    public partial class VoiceLiveServerEventResponseContentPartAdded : VoiceLiveServerEvent
    {
        /// <summary> Initializes a new instance of <see cref="VoiceLiveServerEventResponseContentPartAdded"/>. </summary>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item to which the content part was added. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="part">
        /// The content part that was added.
        /// Please note <see cref="VoiceLiveContentPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveResponseAudioContentPart"/>, <see cref="VoiceLiveRequestAudioContentPart"/>, <see cref="VoiceLiveRequestTextContentPart"/> and <see cref="VoiceLiveResponseTextContentPart"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="responseId"/>, <paramref name="itemId"/> or <paramref name="part"/> is null. </exception>
        internal VoiceLiveServerEventResponseContentPartAdded(string responseId, string itemId, int outputIndex, int contentIndex, VoiceLiveContentPart part)
        {
            Argument.AssertNotNull(responseId, nameof(responseId));
            Argument.AssertNotNull(itemId, nameof(itemId));
            Argument.AssertNotNull(part, nameof(part));

            Type = VoiceLiveServerEventType.ResponseContentPartAdded;
            ResponseId = responseId;
            ItemId = itemId;
            OutputIndex = outputIndex;
            ContentIndex = contentIndex;
            Part = part;
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveServerEventResponseContentPartAdded"/>. </summary>
        /// <param name="type"> The type of event. </param>
        /// <param name="eventId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the item to which the content part was added. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="contentIndex"> The index of the content part in the item's content array. </param>
        /// <param name="part">
        /// The content part that was added.
        /// Please note <see cref="VoiceLiveContentPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveResponseAudioContentPart"/>, <see cref="VoiceLiveRequestAudioContentPart"/>, <see cref="VoiceLiveRequestTextContentPart"/> and <see cref="VoiceLiveResponseTextContentPart"/>.
        /// </param>
        internal VoiceLiveServerEventResponseContentPartAdded(VoiceLiveServerEventType type, string eventId, IDictionary<string, BinaryData> serializedAdditionalRawData, string responseId, string itemId, int outputIndex, int contentIndex, VoiceLiveContentPart part) : base(type, eventId, serializedAdditionalRawData)
        {
            ResponseId = responseId;
            ItemId = itemId;
            OutputIndex = outputIndex;
            ContentIndex = contentIndex;
            Part = part;
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveServerEventResponseContentPartAdded"/> for deserialization. </summary>
        internal VoiceLiveServerEventResponseContentPartAdded()
        {
        }

        /// <summary> The ID of the response. </summary>
        public string ResponseId { get; }
        /// <summary> The ID of the item to which the content part was added. </summary>
        public string ItemId { get; }
        /// <summary> The index of the output item in the response. </summary>
        public int OutputIndex { get; }
        /// <summary> The index of the content part in the item's content array. </summary>
        public int ContentIndex { get; }
        /// <summary>
        /// The content part that was added.
        /// Please note <see cref="VoiceLiveContentPart"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VoiceLiveResponseAudioContentPart"/>, <see cref="VoiceLiveRequestAudioContentPart"/>, <see cref="VoiceLiveRequestTextContentPart"/> and <see cref="VoiceLiveResponseTextContentPart"/>.
        /// </summary>
        public VoiceLiveContentPart Part { get; }
    }
}
