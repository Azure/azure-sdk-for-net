// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.VoiceLive
{
    /// <summary> ICE server configuration for WebRTC connection negotiation. </summary>
    public partial class IceServer
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="IceServer"/>. </summary>
        /// <param name="uris"> List of ICE server URLs (e.g., TURN or STUN endpoints). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uris"/> is null. </exception>
        public IceServer(IEnumerable<Uri> uris)
        {
            Argument.AssertNotNull(uris, nameof(uris));

            Uris = uris.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="IceServer"/>. </summary>
        /// <param name="uris"> List of ICE server URLs (e.g., TURN or STUN endpoints). </param>
        /// <param name="username"> Optional username used for authentication with the ICE server. </param>
        /// <param name="credential"> Optional credential (e.g., password or token) used for authentication. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal IceServer(IList<Uri> uris, string username, string credential, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Uris = uris;
            Username = username;
            Credential = credential;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> List of ICE server URLs (e.g., TURN or STUN endpoints). </summary>
        public IList<Uri> Uris { get; }

        /// <summary> Optional username used for authentication with the ICE server. </summary>
        public string Username { get; set; }

        /// <summary> Optional credential (e.g., password or token) used for authentication. </summary>
        public string Credential { get; set; }
    }
}
