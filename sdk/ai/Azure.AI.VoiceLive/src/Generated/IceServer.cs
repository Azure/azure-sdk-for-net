// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.VoiceLive
{
    /// <summary> ICE server configuration for WebRTC connection negotiation. </summary>
    public partial class IceServer
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="IceServer"/>. </summary>
        /// <param name="urls"> List of ICE server URLs (e.g., TURN or STUN endpoints). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="urls"/> is null. </exception>
        public IceServer(IEnumerable<string> urls)
        {
            Argument.AssertNotNull(urls, nameof(urls));

            Urls = urls.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="IceServer"/>. </summary>
        /// <param name="urls"> List of ICE server URLs (e.g., TURN or STUN endpoints). </param>
        /// <param name="username"> Optional username used for authentication with the ICE server. </param>
        /// <param name="credential"> Optional credential (e.g., password or token) used for authentication. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal IceServer(IList<string> urls, string username, string credential, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Urls = urls;
            Username = username;
            Credential = credential;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="IceServer"/> for deserialization. </summary>
        internal IceServer()
        {
        }

        /// <summary> List of ICE server URLs (e.g., TURN or STUN endpoints). </summary>
        public IList<string> Urls { get; }
        /// <summary> Optional username used for authentication with the ICE server. </summary>
        public string Username { get; set; }
        /// <summary> Optional credential (e.g., password or token) used for authentication. </summary>
        public string Credential { get; set; }
    }
}
