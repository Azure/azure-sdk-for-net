// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary> The VoiceLiveItemType. </summary>
    internal readonly partial struct VoiceLiveItemType : IEquatable<VoiceLiveItemType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VoiceLiveItemType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VoiceLiveItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MessageValue = "message";
        private const string FunctionCallValue = "function_call";
        private const string FunctionCallOutputValue = "function_call_output";

        /// <summary> message. </summary>
        public static VoiceLiveItemType Message { get; } = new VoiceLiveItemType(MessageValue);
        /// <summary> function_call. </summary>
        public static VoiceLiveItemType FunctionCall { get; } = new VoiceLiveItemType(FunctionCallValue);
        /// <summary> function_call_output. </summary>
        public static VoiceLiveItemType FunctionCallOutput { get; } = new VoiceLiveItemType(FunctionCallOutputValue);
        /// <summary> Determines if two <see cref="VoiceLiveItemType"/> values are the same. </summary>
        public static bool operator ==(VoiceLiveItemType left, VoiceLiveItemType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VoiceLiveItemType"/> values are not the same. </summary>
        public static bool operator !=(VoiceLiveItemType left, VoiceLiveItemType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VoiceLiveItemType"/>. </summary>
        public static implicit operator VoiceLiveItemType(string value) => new VoiceLiveItemType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VoiceLiveItemType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VoiceLiveItemType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
