// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary></summary>
    public readonly partial struct AudioFormat : IEquatable<AudioFormat>
    {
        private readonly string _value;
        private const string Pcm16Value = "pcm16";
        private const string G711UlawValue = "g711_ulaw";
        private const string G711AlawValue = "g711_alaw";

        /// <summary> Initializes a new instance of <see cref="AudioFormat"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AudioFormat(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Gets the Pcm16. </summary>
        public static AudioFormat Pcm16 { get; } = new AudioFormat(Pcm16Value);

        /// <summary> Gets the G711Ulaw. </summary>
        public static AudioFormat G711Ulaw { get; } = new AudioFormat(G711UlawValue);

        /// <summary> Gets the G711Alaw. </summary>
        public static AudioFormat G711Alaw { get; } = new AudioFormat(G711AlawValue);

        /// <summary> Determines if two <see cref="AudioFormat"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(AudioFormat left, AudioFormat right) => left.Equals(right);

        /// <summary> Determines if two <see cref="AudioFormat"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(AudioFormat left, AudioFormat right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="AudioFormat"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator AudioFormat(string value) => new AudioFormat(value);

        /// <summary> Converts a string to a <see cref="AudioFormat"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator AudioFormat?(string value) => value == null ? null : new AudioFormat(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AudioFormat other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(AudioFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
