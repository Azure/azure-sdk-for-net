// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary>
    /// Returned when the model-generated function call arguments are done streaming.
    /// Also emitted when a Response is interrupted, incomplete, or cancelled.
    /// </summary>
    public partial class ServerEventResponseFunctionCallArgumentsDone : ServerEvent
    {
        /// <summary> Initializes a new instance of <see cref="ServerEventResponseFunctionCallArgumentsDone"/>. </summary>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the function call item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="callId"> The ID of the function call. </param>
        /// <param name="arguments"> The final arguments as a JSON string. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="responseId"/>, <paramref name="itemId"/>, <paramref name="callId"/> or <paramref name="arguments"/> is null. </exception>
        internal ServerEventResponseFunctionCallArgumentsDone(string responseId, string itemId, int outputIndex, string callId, string arguments)
        {
            Argument.AssertNotNull(responseId, nameof(responseId));
            Argument.AssertNotNull(itemId, nameof(itemId));
            Argument.AssertNotNull(callId, nameof(callId));
            Argument.AssertNotNull(arguments, nameof(arguments));

            Type = ServerEventType.ResponseFunctionCallArgumentsDone;
            ResponseId = responseId;
            ItemId = itemId;
            OutputIndex = outputIndex;
            CallId = callId;
            Arguments = arguments;
        }

        /// <summary> Initializes a new instance of <see cref="ServerEventResponseFunctionCallArgumentsDone"/>. </summary>
        /// <param name="type"> The type of event. </param>
        /// <param name="eventId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="responseId"> The ID of the response. </param>
        /// <param name="itemId"> The ID of the function call item. </param>
        /// <param name="outputIndex"> The index of the output item in the response. </param>
        /// <param name="callId"> The ID of the function call. </param>
        /// <param name="arguments"> The final arguments as a JSON string. </param>
        internal ServerEventResponseFunctionCallArgumentsDone(ServerEventType type, string eventId, IDictionary<string, BinaryData> serializedAdditionalRawData, string responseId, string itemId, int outputIndex, string callId, string arguments) : base(type, eventId, serializedAdditionalRawData)
        {
            ResponseId = responseId;
            ItemId = itemId;
            OutputIndex = outputIndex;
            CallId = callId;
            Arguments = arguments;
        }

        /// <summary> Initializes a new instance of <see cref="ServerEventResponseFunctionCallArgumentsDone"/> for deserialization. </summary>
        internal ServerEventResponseFunctionCallArgumentsDone()
        {
        }

        /// <summary> The ID of the response. </summary>
        public string ResponseId { get; }
        /// <summary> The ID of the function call item. </summary>
        public string ItemId { get; }
        /// <summary> The index of the output item in the response. </summary>
        public int OutputIndex { get; }
        /// <summary> The ID of the function call. </summary>
        public string CallId { get; }
        /// <summary> The final arguments as a JSON string. </summary>
        public string Arguments { get; }
    }
}
