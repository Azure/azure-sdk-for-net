// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary></summary>
    internal readonly partial struct ItemType : IEquatable<ItemType>
    {
        private readonly string _value;
        private const string MessageValue = "message";
        private const string FunctionCallValue = "function_call";
        private const string FunctionCallOutputValue = "function_call_output";

        /// <summary> Initializes a new instance of <see cref="ItemType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ItemType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Gets the Message. </summary>
        public static ItemType Message { get; } = new ItemType(MessageValue);

        /// <summary> Gets the FunctionCall. </summary>
        public static ItemType FunctionCall { get; } = new ItemType(FunctionCallValue);

        /// <summary> Gets the FunctionCallOutput. </summary>
        public static ItemType FunctionCallOutput { get; } = new ItemType(FunctionCallOutputValue);

        /// <summary> Determines if two <see cref="ItemType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ItemType left, ItemType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="ItemType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ItemType left, ItemType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="ItemType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ItemType(string value) => new ItemType(value);

        /// <summary> Converts a string to a <see cref="ItemType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ItemType?(string value) => value == null ? null : new ItemType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ItemType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(ItemType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
