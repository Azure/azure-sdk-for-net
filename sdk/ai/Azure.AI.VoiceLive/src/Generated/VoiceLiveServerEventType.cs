// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary> Server event types used in VoiceLive protocol. </summary>
    internal readonly partial struct VoiceLiveServerEventType : IEquatable<VoiceLiveServerEventType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VoiceLiveServerEventType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VoiceLiveServerEventType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ErrorValue = "error";
        private const string SessionAvatarConnectingValue = "session.avatar.connecting";
        private const string SessionCreatedValue = "session.created";
        private const string SessionUpdatedValue = "session.updated";
        private const string ConversationItemInputAudioTranscriptionCompletedValue = "conversation.item.input_audio_transcription.completed";
        private const string ConversationItemInputAudioTranscriptionDeltaValue = "conversation.item.input_audio_transcription.delta";
        private const string ConversationItemInputAudioTranscriptionFailedValue = "conversation.item.input_audio_transcription.failed";
        private const string ConversationItemCreatedValue = "conversation.item.created";
        private const string ConversationItemRetrievedValue = "conversation.item.retrieved";
        private const string ConversationItemTruncatedValue = "conversation.item.truncated";
        private const string ConversationItemDeletedValue = "conversation.item.deleted";
        private const string InputAudioBufferCommittedValue = "input_audio_buffer.committed";
        private const string InputAudioBufferClearedValue = "input_audio_buffer.cleared";
        private const string InputAudioBufferSpeechStartedValue = "input_audio_buffer.speech_started";
        private const string InputAudioBufferSpeechStoppedValue = "input_audio_buffer.speech_stopped";
        private const string ResponseCreatedValue = "response.created";
        private const string ResponseDoneValue = "response.done";
        private const string ResponseOutputItemAddedValue = "response.output_item.added";
        private const string ResponseOutputItemDoneValue = "response.output_item.done";
        private const string ResponseContentPartAddedValue = "response.content_part.added";
        private const string ResponseContentPartDoneValue = "response.content_part.done";
        private const string ResponseTextDeltaValue = "response.text.delta";
        private const string ResponseTextDoneValue = "response.text.done";
        private const string ResponseAudioTranscriptDeltaValue = "response.audio_transcript.delta";
        private const string ResponseAudioTranscriptDoneValue = "response.audio_transcript.done";
        private const string ResponseAudioDeltaValue = "response.audio.delta";
        private const string ResponseAudioDoneValue = "response.audio.done";
        private const string ResponseAnimationBlendshapesDeltaValue = "response.animation_blendshapes.delta";
        private const string ResponseAnimationBlendshapesDoneValue = "response.animation_blendshapes.done";
        private const string ResponseEmotionHypothesisValue = "response.emotion_hypothesis";
        private const string ResponseAudioTimestampDeltaValue = "response.audio_timestamp.delta";
        private const string ResponseAudioTimestampDoneValue = "response.audio_timestamp.done";
        private const string ResponseAnimationVisemeDeltaValue = "response.animation_viseme.delta";
        private const string ResponseAnimationVisemeDoneValue = "response.animation_viseme.done";

        /// <summary> error. </summary>
        public static VoiceLiveServerEventType Error { get; } = new VoiceLiveServerEventType(ErrorValue);
        /// <summary> session.avatar.connecting. </summary>
        public static VoiceLiveServerEventType SessionAvatarConnecting { get; } = new VoiceLiveServerEventType(SessionAvatarConnectingValue);
        /// <summary> session.created. </summary>
        public static VoiceLiveServerEventType SessionCreated { get; } = new VoiceLiveServerEventType(SessionCreatedValue);
        /// <summary> session.updated. </summary>
        public static VoiceLiveServerEventType SessionUpdated { get; } = new VoiceLiveServerEventType(SessionUpdatedValue);
        /// <summary> conversation.item.input_audio_transcription.completed. </summary>
        public static VoiceLiveServerEventType ConversationItemInputAudioTranscriptionCompleted { get; } = new VoiceLiveServerEventType(ConversationItemInputAudioTranscriptionCompletedValue);
        /// <summary> conversation.item.input_audio_transcription.delta. </summary>
        public static VoiceLiveServerEventType ConversationItemInputAudioTranscriptionDelta { get; } = new VoiceLiveServerEventType(ConversationItemInputAudioTranscriptionDeltaValue);
        /// <summary> conversation.item.input_audio_transcription.failed. </summary>
        public static VoiceLiveServerEventType ConversationItemInputAudioTranscriptionFailed { get; } = new VoiceLiveServerEventType(ConversationItemInputAudioTranscriptionFailedValue);
        /// <summary> conversation.item.created. </summary>
        public static VoiceLiveServerEventType ConversationItemCreated { get; } = new VoiceLiveServerEventType(ConversationItemCreatedValue);
        /// <summary> conversation.item.retrieved. </summary>
        public static VoiceLiveServerEventType ConversationItemRetrieved { get; } = new VoiceLiveServerEventType(ConversationItemRetrievedValue);
        /// <summary> conversation.item.truncated. </summary>
        public static VoiceLiveServerEventType ConversationItemTruncated { get; } = new VoiceLiveServerEventType(ConversationItemTruncatedValue);
        /// <summary> conversation.item.deleted. </summary>
        public static VoiceLiveServerEventType ConversationItemDeleted { get; } = new VoiceLiveServerEventType(ConversationItemDeletedValue);
        /// <summary> input_audio_buffer.committed. </summary>
        public static VoiceLiveServerEventType InputAudioBufferCommitted { get; } = new VoiceLiveServerEventType(InputAudioBufferCommittedValue);
        /// <summary> input_audio_buffer.cleared. </summary>
        public static VoiceLiveServerEventType InputAudioBufferCleared { get; } = new VoiceLiveServerEventType(InputAudioBufferClearedValue);
        /// <summary> input_audio_buffer.speech_started. </summary>
        public static VoiceLiveServerEventType InputAudioBufferSpeechStarted { get; } = new VoiceLiveServerEventType(InputAudioBufferSpeechStartedValue);
        /// <summary> input_audio_buffer.speech_stopped. </summary>
        public static VoiceLiveServerEventType InputAudioBufferSpeechStopped { get; } = new VoiceLiveServerEventType(InputAudioBufferSpeechStoppedValue);
        /// <summary> response.created. </summary>
        public static VoiceLiveServerEventType ResponseCreated { get; } = new VoiceLiveServerEventType(ResponseCreatedValue);
        /// <summary> response.done. </summary>
        public static VoiceLiveServerEventType ResponseDone { get; } = new VoiceLiveServerEventType(ResponseDoneValue);
        /// <summary> response.output_item.added. </summary>
        public static VoiceLiveServerEventType ResponseOutputItemAdded { get; } = new VoiceLiveServerEventType(ResponseOutputItemAddedValue);
        /// <summary> response.output_item.done. </summary>
        public static VoiceLiveServerEventType ResponseOutputItemDone { get; } = new VoiceLiveServerEventType(ResponseOutputItemDoneValue);
        /// <summary> response.content_part.added. </summary>
        public static VoiceLiveServerEventType ResponseContentPartAdded { get; } = new VoiceLiveServerEventType(ResponseContentPartAddedValue);
        /// <summary> response.content_part.done. </summary>
        public static VoiceLiveServerEventType ResponseContentPartDone { get; } = new VoiceLiveServerEventType(ResponseContentPartDoneValue);
        /// <summary> response.text.delta. </summary>
        public static VoiceLiveServerEventType ResponseTextDelta { get; } = new VoiceLiveServerEventType(ResponseTextDeltaValue);
        /// <summary> response.text.done. </summary>
        public static VoiceLiveServerEventType ResponseTextDone { get; } = new VoiceLiveServerEventType(ResponseTextDoneValue);
        /// <summary> response.audio_transcript.delta. </summary>
        public static VoiceLiveServerEventType ResponseAudioTranscriptDelta { get; } = new VoiceLiveServerEventType(ResponseAudioTranscriptDeltaValue);
        /// <summary> response.audio_transcript.done. </summary>
        public static VoiceLiveServerEventType ResponseAudioTranscriptDone { get; } = new VoiceLiveServerEventType(ResponseAudioTranscriptDoneValue);
        /// <summary> response.audio.delta. </summary>
        public static VoiceLiveServerEventType ResponseAudioDelta { get; } = new VoiceLiveServerEventType(ResponseAudioDeltaValue);
        /// <summary> response.audio.done. </summary>
        public static VoiceLiveServerEventType ResponseAudioDone { get; } = new VoiceLiveServerEventType(ResponseAudioDoneValue);
        /// <summary> response.animation_blendshapes.delta. </summary>
        public static VoiceLiveServerEventType ResponseAnimationBlendshapesDelta { get; } = new VoiceLiveServerEventType(ResponseAnimationBlendshapesDeltaValue);
        /// <summary> response.animation_blendshapes.done. </summary>
        public static VoiceLiveServerEventType ResponseAnimationBlendshapesDone { get; } = new VoiceLiveServerEventType(ResponseAnimationBlendshapesDoneValue);
        /// <summary> response.emotion_hypothesis. </summary>
        public static VoiceLiveServerEventType ResponseEmotionHypothesis { get; } = new VoiceLiveServerEventType(ResponseEmotionHypothesisValue);
        /// <summary> response.audio_timestamp.delta. </summary>
        public static VoiceLiveServerEventType ResponseAudioTimestampDelta { get; } = new VoiceLiveServerEventType(ResponseAudioTimestampDeltaValue);
        /// <summary> response.audio_timestamp.done. </summary>
        public static VoiceLiveServerEventType ResponseAudioTimestampDone { get; } = new VoiceLiveServerEventType(ResponseAudioTimestampDoneValue);
        /// <summary> response.animation_viseme.delta. </summary>
        public static VoiceLiveServerEventType ResponseAnimationVisemeDelta { get; } = new VoiceLiveServerEventType(ResponseAnimationVisemeDeltaValue);
        /// <summary> response.animation_viseme.done. </summary>
        public static VoiceLiveServerEventType ResponseAnimationVisemeDone { get; } = new VoiceLiveServerEventType(ResponseAnimationVisemeDoneValue);
        /// <summary> Determines if two <see cref="VoiceLiveServerEventType"/> values are the same. </summary>
        public static bool operator ==(VoiceLiveServerEventType left, VoiceLiveServerEventType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VoiceLiveServerEventType"/> values are not the same. </summary>
        public static bool operator !=(VoiceLiveServerEventType left, VoiceLiveServerEventType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VoiceLiveServerEventType"/>. </summary>
        public static implicit operator VoiceLiveServerEventType(string value) => new VoiceLiveServerEventType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VoiceLiveServerEventType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VoiceLiveServerEventType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
