// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary>
    /// A voicelive client event.
    /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="ClientEventSessionUpdate"/>, <see cref="ClientEventInputAudioBufferAppend"/>, <see cref="ClientEventInputAudioBufferCommit"/>, <see cref="ClientEventInputAudioBufferClear"/>, <see cref="ClientEventInputAudioTurnStart"/>, <see cref="ClientEventInputAudioTurnAppend"/>, <see cref="ClientEventInputAudioTurnEnd"/>, <see cref="ClientEventInputAudioTurnCancel"/>, <see cref="ClientEventInputAudioClear"/>, <see cref="ClientEventConversationItemCreate"/>, <see cref="ClientEventConversationItemRetrieve"/>, <see cref="ClientEventConversationItemTruncate"/>, <see cref="ClientEventConversationItemDelete"/>, <see cref="ClientEventResponseCreate"/>, <see cref="ClientEventResponseCancel"/>, and <see cref="ClientEventSessionAvatarConnect"/>.
    /// </summary>
    public abstract partial class ClientEvent
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ClientEvent"/>. </summary>
        /// <param name="type"> The type of event. </param>
        private protected ClientEvent(string @type)
        {
            Type = @type;
        }

        /// <summary> Initializes a new instance of <see cref="ClientEvent"/>. </summary>
        /// <param name="type"> The type of event. </param>
        /// <param name="eventId"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ClientEvent(string @type, string eventId, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Type = @type;
            EventId = eventId;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The type of event. </summary>
        internal string Type { get; set; }

        /// <summary> Gets or sets the EventId. </summary>
        public virtual string EventId { get; set; }
    }
}
