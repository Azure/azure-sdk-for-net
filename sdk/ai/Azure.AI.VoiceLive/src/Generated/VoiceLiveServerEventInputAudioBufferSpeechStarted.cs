// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary>
    /// Sent by the server when in `server_vad` mode to indicate that speech has been
    /// detected in the audio buffer. This can happen any time audio is added to the
    /// buffer (unless speech is already detected). The client may want to use this
    /// event to interrupt audio playback or provide visual feedback to the user.
    ///
    /// The client should expect to receive a `input_audio_buffer.speech_stopped` event
    /// when speech stops. The `item_id` property is the ID of the user message item
    /// that will be created when speech stops and will also be included in the
    /// `input_audio_buffer.speech_stopped` event (unless the client manually commits
    /// the audio buffer during VAD activation).
    /// </summary>
    public partial class VoiceLiveServerEventInputAudioBufferSpeechStarted : VoiceLiveServerEvent
    {
        /// <summary> Initializes a new instance of <see cref="VoiceLiveServerEventInputAudioBufferSpeechStarted"/>. </summary>
        /// <param name="audioStartMs">
        /// Milliseconds from the start of all audio written to the buffer during the
        /// session when speech was first detected. This will correspond to the
        /// beginning of audio sent to the model, and thus includes the
        /// `prefix_padding_ms` configured in the Session.
        /// </param>
        /// <param name="itemId"> The ID of the user message item that will be created when speech stops. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="itemId"/> is null. </exception>
        internal VoiceLiveServerEventInputAudioBufferSpeechStarted(int audioStartMs, string itemId)
        {
            Argument.AssertNotNull(itemId, nameof(itemId));

            Type = VoiceLiveServerEventType.InputAudioBufferSpeechStarted;
            AudioStartMs = audioStartMs;
            ItemId = itemId;
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveServerEventInputAudioBufferSpeechStarted"/>. </summary>
        /// <param name="type"> The type of event. </param>
        /// <param name="eventId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="audioStartMs">
        /// Milliseconds from the start of all audio written to the buffer during the
        /// session when speech was first detected. This will correspond to the
        /// beginning of audio sent to the model, and thus includes the
        /// `prefix_padding_ms` configured in the Session.
        /// </param>
        /// <param name="itemId"> The ID of the user message item that will be created when speech stops. </param>
        internal VoiceLiveServerEventInputAudioBufferSpeechStarted(VoiceLiveServerEventType type, string eventId, IDictionary<string, BinaryData> serializedAdditionalRawData, int audioStartMs, string itemId) : base(type, eventId, serializedAdditionalRawData)
        {
            AudioStartMs = audioStartMs;
            ItemId = itemId;
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveServerEventInputAudioBufferSpeechStarted"/> for deserialization. </summary>
        internal VoiceLiveServerEventInputAudioBufferSpeechStarted()
        {
        }

        /// <summary>
        /// Milliseconds from the start of all audio written to the buffer during the
        /// session when speech was first detected. This will correspond to the
        /// beginning of audio sent to the model, and thus includes the
        /// `prefix_padding_ms` configured in the Session.
        /// </summary>
        public int AudioStartMs { get; }
        /// <summary> The ID of the user message item that will be created when speech stops. </summary>
        public string ItemId { get; }
    }
}
