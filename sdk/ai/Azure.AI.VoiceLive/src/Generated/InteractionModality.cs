// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary></summary>
    public readonly partial struct InteractionModality : IEquatable<InteractionModality>
    {
        private readonly string _value;
        private const string TextValue = "text";
        private const string AudioValue = "audio";
        private const string AnimationValue = "animation";
        private const string AvatarValue = "avatar";

        /// <summary> Initializes a new instance of <see cref="InteractionModality"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InteractionModality(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Gets the Text. </summary>
        public static InteractionModality Text { get; } = new InteractionModality(TextValue);

        /// <summary> Gets the Audio. </summary>
        public static InteractionModality Audio { get; } = new InteractionModality(AudioValue);

        /// <summary> Gets the Animation. </summary>
        public static InteractionModality Animation { get; } = new InteractionModality(AnimationValue);

        /// <summary> Gets the Avatar. </summary>
        public static InteractionModality Avatar { get; } = new InteractionModality(AvatarValue);

        /// <summary> Determines if two <see cref="InteractionModality"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(InteractionModality left, InteractionModality right) => left.Equals(right);

        /// <summary> Determines if two <see cref="InteractionModality"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(InteractionModality left, InteractionModality right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="InteractionModality"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator InteractionModality(string value) => new InteractionModality(value);

        /// <summary> Converts a string to a <see cref="InteractionModality"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator InteractionModality?(string value) => value == null ? null : new InteractionModality(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InteractionModality other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(InteractionModality other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
