// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary> The available set of mode-level, string literal tool_choice options for the voicelive endpoint. </summary>
    public readonly partial struct VoiceLiveToolChoiceLiteral : IEquatable<VoiceLiveToolChoiceLiteral>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VoiceLiveToolChoiceLiteral"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VoiceLiveToolChoiceLiteral(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AutoValue = "auto";
        private const string NoneValue = "none";
        private const string RequiredValue = "required";

        /// <summary> Specifies that the model should freely determine which tool or tools, if any, to call. </summary>
        public static VoiceLiveToolChoiceLiteral Auto { get; } = new VoiceLiveToolChoiceLiteral(AutoValue);
        /// <summary> Specifies that the model should call no tools whatsoever. </summary>
        public static VoiceLiveToolChoiceLiteral None { get; } = new VoiceLiveToolChoiceLiteral(NoneValue);
        /// <summary> Specifies that the model should call at least one tool. </summary>
        public static VoiceLiveToolChoiceLiteral Required { get; } = new VoiceLiveToolChoiceLiteral(RequiredValue);
        /// <summary> Determines if two <see cref="VoiceLiveToolChoiceLiteral"/> values are the same. </summary>
        public static bool operator ==(VoiceLiveToolChoiceLiteral left, VoiceLiveToolChoiceLiteral right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VoiceLiveToolChoiceLiteral"/> values are not the same. </summary>
        public static bool operator !=(VoiceLiveToolChoiceLiteral left, VoiceLiveToolChoiceLiteral right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VoiceLiveToolChoiceLiteral"/>. </summary>
        public static implicit operator VoiceLiveToolChoiceLiteral(string value) => new VoiceLiveToolChoiceLiteral(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VoiceLiveToolChoiceLiteral other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VoiceLiveToolChoiceLiteral other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
