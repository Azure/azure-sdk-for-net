// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    /// <summary> Returned when the model-generated transcription of audio output is updated. </summary>
    public partial class SessionUpdateResponseAudioTranscriptDelta : IJsonModel<SessionUpdateResponseAudioTranscriptDelta>
    {
        /// <summary> Initializes a new instance of <see cref="SessionUpdateResponseAudioTranscriptDelta"/> for deserialization. </summary>
        internal SessionUpdateResponseAudioTranscriptDelta()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<SessionUpdateResponseAudioTranscriptDelta>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdateResponseAudioTranscriptDelta>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SessionUpdateResponseAudioTranscriptDelta)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("response_id"u8);
            writer.WriteStringValue(ResponseId);
            writer.WritePropertyName("item_id"u8);
            writer.WriteStringValue(ItemId);
            writer.WritePropertyName("output_index"u8);
            writer.WriteNumberValue(OutputIndex);
            writer.WritePropertyName("content_index"u8);
            writer.WriteNumberValue(ContentIndex);
            writer.WritePropertyName("delta"u8);
            writer.WriteStringValue(Delta);
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SessionUpdateResponseAudioTranscriptDelta IJsonModel<SessionUpdateResponseAudioTranscriptDelta>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (SessionUpdateResponseAudioTranscriptDelta)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override SessionUpdate JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdateResponseAudioTranscriptDelta>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SessionUpdateResponseAudioTranscriptDelta)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSessionUpdateResponseAudioTranscriptDelta(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static SessionUpdateResponseAudioTranscriptDelta DeserializeSessionUpdateResponseAudioTranscriptDelta(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ServerEventType @type = default;
            string eventId = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            string responseId = default;
            string itemId = default;
            int outputIndex = default;
            int contentIndex = default;
            string delta = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    @type = new ServerEventType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("event_id"u8))
                {
                    eventId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("response_id"u8))
                {
                    responseId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("item_id"u8))
                {
                    itemId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("output_index"u8))
                {
                    outputIndex = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("content_index"u8))
                {
                    contentIndex = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("delta"u8))
                {
                    delta = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new SessionUpdateResponseAudioTranscriptDelta(
                @type,
                eventId,
                additionalBinaryDataProperties,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                delta);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<SessionUpdateResponseAudioTranscriptDelta>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdateResponseAudioTranscriptDelta>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SessionUpdateResponseAudioTranscriptDelta)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SessionUpdateResponseAudioTranscriptDelta IPersistableModel<SessionUpdateResponseAudioTranscriptDelta>.Create(BinaryData data, ModelReaderWriterOptions options) => (SessionUpdateResponseAudioTranscriptDelta)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override SessionUpdate PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdateResponseAudioTranscriptDelta>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeSessionUpdateResponseAudioTranscriptDelta(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SessionUpdateResponseAudioTranscriptDelta)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<SessionUpdateResponseAudioTranscriptDelta>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
