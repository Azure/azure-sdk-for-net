// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.VoiceLive
{
    /// <summary> Represents an emotion hypothesis detected from response audio with multiple candidates. </summary>
    public partial class ResponseEmotionHypothesis : VoiceLiveServerEvent
    {
        /// <summary> Initializes a new instance of <see cref="ResponseEmotionHypothesis"/>. </summary>
        /// <param name="emotion"></param>
        /// <param name="candidates"></param>
        /// <param name="audioOffsetMs"></param>
        /// <param name="audioDurationMs"></param>
        /// <param name="itemId"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="emotion"/>, <paramref name="candidates"/> or <paramref name="itemId"/> is null. </exception>
        internal ResponseEmotionHypothesis(string emotion, IEnumerable<EmotionCandidate> candidates, int audioOffsetMs, int audioDurationMs, string itemId)
        {
            Argument.AssertNotNull(emotion, nameof(emotion));
            Argument.AssertNotNull(candidates, nameof(candidates));
            Argument.AssertNotNull(itemId, nameof(itemId));

            Type = VoiceLiveServerEventType.ResponseEmotionHypothesis;
            Emotion = emotion;
            Candidates = candidates.ToList();
            AudioOffsetMs = audioOffsetMs;
            AudioDurationMs = audioDurationMs;
            ItemId = itemId;
        }

        /// <summary> Initializes a new instance of <see cref="ResponseEmotionHypothesis"/>. </summary>
        /// <param name="type"> The type of event. </param>
        /// <param name="eventId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="emotion"></param>
        /// <param name="candidates"></param>
        /// <param name="audioOffsetMs"></param>
        /// <param name="audioDurationMs"></param>
        /// <param name="responseId"></param>
        /// <param name="itemId"></param>
        internal ResponseEmotionHypothesis(VoiceLiveServerEventType type, string eventId, IDictionary<string, BinaryData> serializedAdditionalRawData, string emotion, IReadOnlyList<EmotionCandidate> candidates, int audioOffsetMs, int audioDurationMs, string responseId, string itemId) : base(type, eventId, serializedAdditionalRawData)
        {
            Emotion = emotion;
            Candidates = candidates;
            AudioOffsetMs = audioOffsetMs;
            AudioDurationMs = audioDurationMs;
            ResponseId = responseId;
            ItemId = itemId;
        }

        /// <summary> Initializes a new instance of <see cref="ResponseEmotionHypothesis"/> for deserialization. </summary>
        internal ResponseEmotionHypothesis()
        {
        }

        /// <summary> Gets the emotion. </summary>
        public string Emotion { get; }
        /// <summary> Gets the candidates. </summary>
        public IReadOnlyList<EmotionCandidate> Candidates { get; }
        /// <summary> Gets the audio offset ms. </summary>
        public int AudioOffsetMs { get; }
        /// <summary> Gets the audio duration ms. </summary>
        public int AudioDurationMs { get; }
        /// <summary> Gets the response id. </summary>
        public string ResponseId { get; }
        /// <summary> Gets the item id. </summary>
        public string ItemId { get; }
    }
}
