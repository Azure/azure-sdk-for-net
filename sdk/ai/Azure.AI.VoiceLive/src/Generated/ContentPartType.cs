// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary> The ContentPartType. </summary>
    internal readonly partial struct ContentPartType : IEquatable<ContentPartType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ContentPartType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContentPartType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InputTextValue = "input_text";
        private const string InputAudioValue = "input_audio";
        private const string TextValue = "text";
        private const string AudioValue = "audio";

        /// <summary> input_text. </summary>
        public static ContentPartType InputText { get; } = new ContentPartType(InputTextValue);
        /// <summary> input_audio. </summary>
        public static ContentPartType InputAudio { get; } = new ContentPartType(InputAudioValue);
        /// <summary> text. </summary>
        public static ContentPartType Text { get; } = new ContentPartType(TextValue);
        /// <summary> audio. </summary>
        public static ContentPartType Audio { get; } = new ContentPartType(AudioValue);
        /// <summary> Determines if two <see cref="ContentPartType"/> values are the same. </summary>
        public static bool operator ==(ContentPartType left, ContentPartType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContentPartType"/> values are not the same. </summary>
        public static bool operator !=(ContentPartType left, ContentPartType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ContentPartType"/>. </summary>
        public static implicit operator ContentPartType(string value) => new ContentPartType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContentPartType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContentPartType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
