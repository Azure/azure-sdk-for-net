// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary>
    /// OpenAI voice configuration with explicit type field.
    /// 
    /// This provides a unified interface for OpenAI voices, complementing the
    /// existing string-based OAIVoice for backward compatibility.
    /// </summary>
    public partial class OpenAIVoice
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="OpenAIVoice"/>. </summary>
        /// <param name="name"> The name of the OpenAI voice. </param>
        public OpenAIVoice(OAIVoice name)
        {
            Name = name;
        }

        /// <summary> Initializes a new instance of <see cref="OpenAIVoice"/>. </summary>
        /// <param name="type"> The type of the voice. </param>
        /// <param name="name"> The name of the OpenAI voice. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal OpenAIVoice(string @type, OAIVoice name, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Type = @type;
            Name = name;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The type of the voice. </summary>
        public string Type { get; } = "openai";

        /// <summary> The name of the OpenAI voice. </summary>
        public OAIVoice Name { get; set; }
    }
}
