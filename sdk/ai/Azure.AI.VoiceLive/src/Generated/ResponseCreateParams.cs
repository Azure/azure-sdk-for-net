// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    /// <summary> Create a new VoiceLive response with these parameters. </summary>
    internal partial class ResponseCreateParams
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ResponseCreateParams"/>. </summary>
        public ResponseCreateParams()
        {
            AppendInputItems = new ChangeTrackingList<ConversationRequestItem>();
            InputItems = new ChangeTrackingList<ConversationRequestItem>();
            Modalities = new ChangeTrackingList<InputModality>();
            Tools = new ChangeTrackingList<VoiceLiveToolDefinition>();
        }

        /// <summary> Initializes a new instance of <see cref="ResponseCreateParams"/>. </summary>
        /// <param name="commit"> Whether to commit the response to the conversation. Defaults to true. </param>
        /// <param name="cancelPrevious"> Whether to cancel any ongoing generation before starting this one. Defaults to true. </param>
        /// <param name="appendInputItems"> Input items to append to the conversation context before generating a response. </param>
        /// <param name="inputItems">
        /// Input items to be used as the context for this response.
        /// An empty array clears previous context.
        /// </param>
        /// <param name="modalities">
        /// The set of modalities the model can respond with. To disable audio,
        /// set this to ["text"].
        /// </param>
        /// <param name="instructions">
        /// The default system instructions (i.e. system message) prepended to model
        /// calls. This field allows the client to guide the model on desired
        /// responses. The model can be instructed on response content and format,
        /// (e.g. "be extremely succinct", "act friendly", "here are examples of good
        /// responses") and on audio behavior (e.g. "talk quickly", "inject emotion
        /// into your voice", "laugh frequently"). The instructions are not guaranteed
        /// to be followed by the model, but they provide guidance to the model on the
        /// desired behavior.
        /// 
        /// Note that the server sets default instructions which will be used if this
        /// field is not set and are visible in the `session.created` event at the
        /// start of the session.
        /// </param>
        /// <param name="voice"> supported voice identifiers and configurations. </param>
        /// <param name="outputAudioFormat"> The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. </param>
        /// <param name="tools"> Tools (functions) available to the model. </param>
        /// <param name="toolChoice">
        /// How the model chooses tools. Options are `auto`, `none`, `required`, or
        /// specify a function, like `{"type": "function", "function": {"name": "my_function"}}`.
        /// </param>
        /// <param name="temperature"> Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. </param>
        /// <param name="maxOutputTokens">
        /// Maximum number of output tokens for a single assistant response,
        /// inclusive of tool calls. Provide an integer between 1 and 4096 to
        /// limit output tokens, or `inf` for the maximum available tokens for a
        /// given model. Defaults to `inf`.
        /// </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ResponseCreateParams(bool? commit, bool? cancelPrevious, IList<ConversationRequestItem> appendInputItems, IList<ConversationRequestItem> inputItems, IList<InputModality> modalities, string instructions, BinaryData voice, OutputAudioFormat? outputAudioFormat, IList<VoiceLiveToolDefinition> tools, string toolChoice, float? temperature, BinaryData maxOutputTokens, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Commit = commit;
            CancelPrevious = cancelPrevious;
            AppendInputItems = appendInputItems;
            InputItems = inputItems;
            Modalities = modalities;
            Instructions = instructions;
            Voice = voice;
            OutputAudioFormat = outputAudioFormat;
            Tools = tools;
            ToolChoice = toolChoice;
            Temperature = temperature;
            MaxOutputTokens = maxOutputTokens;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Whether to commit the response to the conversation. Defaults to true. </summary>
        public bool? Commit { get; set; }

        /// <summary> Whether to cancel any ongoing generation before starting this one. Defaults to true. </summary>
        public bool? CancelPrevious { get; set; }

        /// <summary> Input items to append to the conversation context before generating a response. </summary>
        public IList<ConversationRequestItem> AppendInputItems { get; }

        /// <summary>
        /// Input items to be used as the context for this response.
        /// An empty array clears previous context.
        /// </summary>
        public IList<ConversationRequestItem> InputItems { get; }

        /// <summary>
        /// The set of modalities the model can respond with. To disable audio,
        /// set this to ["text"].
        /// </summary>
        public IList<InputModality> Modalities { get; }

        /// <summary>
        /// The default system instructions (i.e. system message) prepended to model
        /// calls. This field allows the client to guide the model on desired
        /// responses. The model can be instructed on response content and format,
        /// (e.g. "be extremely succinct", "act friendly", "here are examples of good
        /// responses") and on audio behavior (e.g. "talk quickly", "inject emotion
        /// into your voice", "laugh frequently"). The instructions are not guaranteed
        /// to be followed by the model, but they provide guidance to the model on the
        /// desired behavior.
        /// 
        /// Note that the server sets default instructions which will be used if this
        /// field is not set and are visible in the `session.created` event at the
        /// start of the session.
        /// </summary>
        public string Instructions { get; set; }

        /// <summary>
        /// supported voice identifiers and configurations.
        /// <para> To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> <see cref="OAIVoice"/>. </description>
        /// </item>
        /// <item>
        /// <description> <see cref="OpenAIVoice"/>. </description>
        /// </item>
        /// <item>
        /// <description> <see cref="AzureVoice"/>. </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Voice { get; set; }

        /// <summary> The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. </summary>
        public OutputAudioFormat? OutputAudioFormat { get; set; }

        /// <summary> Tools (functions) available to the model. </summary>
        public IList<VoiceLiveToolDefinition> Tools { get; }

        /// <summary>
        /// How the model chooses tools. Options are `auto`, `none`, `required`, or
        /// specify a function, like `{"type": "function", "function": {"name": "my_function"}}`.
        /// </summary>
        public string ToolChoice { get; set; }

        /// <summary> Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. </summary>
        public float? Temperature { get; set; }

        /// <summary>
        /// Maximum number of output tokens for a single assistant response,
        /// inclusive of tool calls. Provide an integer between 1 and 4096 to
        /// limit output tokens, or `inf` for the maximum available tokens for a
        /// given model. Defaults to `inf`.
        /// <para> To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> <see cref="int"/>. </description>
        /// </item>
        /// <item>
        /// <description> "inf". </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData MaxOutputTokens { get; set; }
    }
}
