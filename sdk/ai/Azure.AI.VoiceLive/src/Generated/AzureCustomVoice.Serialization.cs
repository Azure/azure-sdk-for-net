// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    /// <summary> Azure custom voice configuration. </summary>
    public partial class AzureCustomVoice : AzureVoice, IJsonModel<AzureCustomVoice>
    {
        /// <summary> Initializes a new instance of <see cref="AzureCustomVoice"/> for deserialization. </summary>
        internal AzureCustomVoice()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<AzureCustomVoice>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AzureCustomVoice>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AzureCustomVoice)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("endpoint_id"u8);
            writer.WriteStringValue(EndpointId);
            if (Optional.IsDefined(Temperature))
            {
                writer.WritePropertyName("temperature"u8);
                writer.WriteNumberValue(Temperature.Value);
            }
            if (Optional.IsDefined(CustomLexiconUri))
            {
                writer.WritePropertyName("custom_lexicon_url"u8);
                writer.WriteStringValue(CustomLexiconUri);
            }
            if (Optional.IsCollectionDefined(PreferLocales))
            {
                writer.WritePropertyName("prefer_locales"u8);
                writer.WriteStartArray();
                foreach (string item in PreferLocales)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Locale))
            {
                writer.WritePropertyName("locale"u8);
                writer.WriteStringValue(Locale);
            }
            if (Optional.IsDefined(Style))
            {
                writer.WritePropertyName("style"u8);
                writer.WriteStringValue(Style);
            }
            if (Optional.IsDefined(Pitch))
            {
                writer.WritePropertyName("pitch"u8);
                writer.WriteStringValue(Pitch);
            }
            if (Optional.IsDefined(Rate))
            {
                writer.WritePropertyName("rate"u8);
                writer.WriteStringValue(Rate);
            }
            if (Optional.IsDefined(Volume))
            {
                writer.WritePropertyName("volume"u8);
                writer.WriteStringValue(Volume);
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AzureCustomVoice IJsonModel<AzureCustomVoice>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (AzureCustomVoice)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override AzureVoice JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AzureCustomVoice>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AzureCustomVoice)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAzureCustomVoice(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static AzureCustomVoice DeserializeAzureCustomVoice(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string @type = "azure-custom";
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            string name = default;
            string endpointId = default;
            float? temperature = default;
            string customLexiconUri = default;
            IList<string> preferLocales = default;
            string locale = default;
            string style = default;
            string pitch = default;
            string rate = default;
            string volume = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    @type = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("name"u8))
                {
                    name = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("endpoint_id"u8))
                {
                    endpointId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("temperature"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    temperature = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("custom_lexicon_url"u8))
                {
                    customLexiconUri = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("prefer_locales"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    preferLocales = array;
                    continue;
                }
                if (prop.NameEquals("locale"u8))
                {
                    locale = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("style"u8))
                {
                    style = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("pitch"u8))
                {
                    pitch = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("rate"u8))
                {
                    rate = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("volume"u8))
                {
                    volume = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new AzureCustomVoice(
                @type,
                additionalBinaryDataProperties,
                name,
                endpointId,
                temperature,
                customLexiconUri,
                preferLocales ?? new ChangeTrackingList<string>(),
                locale,
                style,
                pitch,
                rate,
                volume);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<AzureCustomVoice>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AzureCustomVoice>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AzureCustomVoice)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AzureCustomVoice IPersistableModel<AzureCustomVoice>.Create(BinaryData data, ModelReaderWriterOptions options) => (AzureCustomVoice)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override AzureVoice PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AzureCustomVoice>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAzureCustomVoice(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AzureCustomVoice)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<AzureCustomVoice>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
