// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.VoiceLive
{
    /// <summary> Supported OpenAI voice names (string enum). </summary>
    public readonly partial struct OAIVoice : IEquatable<OAIVoice>
    {
        private readonly string _value;
        /// <summary> Alloy voice. </summary>
        private const string AlloyValue = "alloy";
        /// <summary> Ash voice. </summary>
        private const string AshValue = "ash";
        /// <summary> Ballard voice. </summary>
        private const string BalladValue = "ballad";
        /// <summary> Coral voice. </summary>
        private const string CoralValue = "coral";
        /// <summary> Echo voice. </summary>
        private const string EchoValue = "echo";
        /// <summary> Sage voice. </summary>
        private const string SageValue = "sage";
        /// <summary> Shimmer voice. </summary>
        private const string ShimmerValue = "shimmer";
        /// <summary> Verse voice. </summary>
        private const string VerseValue = "verse";

        /// <summary> Initializes a new instance of <see cref="OAIVoice"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OAIVoice(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Alloy voice. </summary>
        public static OAIVoice Alloy { get; } = new OAIVoice(AlloyValue);

        /// <summary> Ash voice. </summary>
        public static OAIVoice Ash { get; } = new OAIVoice(AshValue);

        /// <summary> Ballard voice. </summary>
        public static OAIVoice Ballad { get; } = new OAIVoice(BalladValue);

        /// <summary> Coral voice. </summary>
        public static OAIVoice Coral { get; } = new OAIVoice(CoralValue);

        /// <summary> Echo voice. </summary>
        public static OAIVoice Echo { get; } = new OAIVoice(EchoValue);

        /// <summary> Sage voice. </summary>
        public static OAIVoice Sage { get; } = new OAIVoice(SageValue);

        /// <summary> Shimmer voice. </summary>
        public static OAIVoice Shimmer { get; } = new OAIVoice(ShimmerValue);

        /// <summary> Verse voice. </summary>
        public static OAIVoice Verse { get; } = new OAIVoice(VerseValue);

        /// <summary> Determines if two <see cref="OAIVoice"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(OAIVoice left, OAIVoice right) => left.Equals(right);

        /// <summary> Determines if two <see cref="OAIVoice"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(OAIVoice left, OAIVoice right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="OAIVoice"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator OAIVoice(string value) => new OAIVoice(value);

        /// <summary> Converts a string to a <see cref="OAIVoice"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator OAIVoice?(string value) => value == null ? null : new OAIVoice(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OAIVoice other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(OAIVoice other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
