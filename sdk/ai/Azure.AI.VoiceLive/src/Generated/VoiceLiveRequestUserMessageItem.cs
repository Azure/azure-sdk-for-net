// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.VoiceLive
{
    /// <summary> The VoiceLiveRequestUserMessageItem. </summary>
    public partial class VoiceLiveRequestUserMessageItem : VoiceLiveRequestMessageItem
    {
        /// <summary> Initializes a new instance of <see cref="VoiceLiveRequestUserMessageItem"/>. </summary>
        /// <param name="content"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        internal VoiceLiveRequestUserMessageItem(IEnumerable<BinaryData> content)
        {
            Argument.AssertNotNull(content, nameof(content));

            Role = VoiceLiveMessageRole.User;
            Content = content.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveRequestUserMessageItem"/>. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="role"></param>
        /// <param name="status"></param>
        /// <param name="content"></param>
        internal VoiceLiveRequestUserMessageItem(VoiceLiveItemType type, string id, IDictionary<string, BinaryData> serializedAdditionalRawData, VoiceLiveMessageRole role, VoiceLiveItemStatus? status, IReadOnlyList<BinaryData> content) : base(type, id, serializedAdditionalRawData, role, status)
        {
            Content = content;
        }

        /// <summary> Initializes a new instance of <see cref="VoiceLiveRequestUserMessageItem"/> for deserialization. </summary>
        internal VoiceLiveRequestUserMessageItem()
        {
        }

        /// <summary>
        /// Gets the content
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="VoiceLiveRequestTextContentPart"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="VoiceLiveRequestAudioContentPart"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyList<BinaryData> Content { get; }
    }
}
