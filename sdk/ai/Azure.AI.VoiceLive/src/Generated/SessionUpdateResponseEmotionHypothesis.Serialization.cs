// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.VoiceLive
{
    /// <summary> Represents an emotion hypothesis detected from response audio with multiple candidates. </summary>
    public partial class SessionUpdateResponseEmotionHypothesis : IJsonModel<SessionUpdateResponseEmotionHypothesis>
    {
        /// <summary> Initializes a new instance of <see cref="SessionUpdateResponseEmotionHypothesis"/> for deserialization. </summary>
        internal SessionUpdateResponseEmotionHypothesis()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<SessionUpdateResponseEmotionHypothesis>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdateResponseEmotionHypothesis>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SessionUpdateResponseEmotionHypothesis)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("emotion"u8);
            writer.WriteStringValue(Emotion);
            writer.WritePropertyName("candidates"u8);
            writer.WriteStartArray();
            foreach (EmotionCandidate item in Candidates)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("audio_offset_ms"u8);
            writer.WriteNumberValue(AudioOffsetMs);
            writer.WritePropertyName("audio_duration_ms"u8);
            writer.WriteNumberValue(AudioDurationMs);
            if (Optional.IsDefined(ResponseId))
            {
                writer.WritePropertyName("response_id"u8);
                writer.WriteStringValue(ResponseId);
            }
            writer.WritePropertyName("item_id"u8);
            writer.WriteStringValue(ItemId);
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SessionUpdateResponseEmotionHypothesis IJsonModel<SessionUpdateResponseEmotionHypothesis>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (SessionUpdateResponseEmotionHypothesis)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override SessionUpdate JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdateResponseEmotionHypothesis>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SessionUpdateResponseEmotionHypothesis)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSessionUpdateResponseEmotionHypothesis(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static SessionUpdateResponseEmotionHypothesis DeserializeSessionUpdateResponseEmotionHypothesis(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ServerEventType @type = default;
            string eventId = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            string emotion = default;
            IList<EmotionCandidate> candidates = default;
            int audioOffsetMs = default;
            int audioDurationMs = default;
            string responseId = default;
            string itemId = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    @type = new ServerEventType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("event_id"u8))
                {
                    eventId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("emotion"u8))
                {
                    emotion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("candidates"u8))
                {
                    List<EmotionCandidate> array = new List<EmotionCandidate>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(EmotionCandidate.DeserializeEmotionCandidate(item, options));
                    }
                    candidates = array;
                    continue;
                }
                if (prop.NameEquals("audio_offset_ms"u8))
                {
                    audioOffsetMs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("audio_duration_ms"u8))
                {
                    audioDurationMs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("response_id"u8))
                {
                    responseId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("item_id"u8))
                {
                    itemId = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new SessionUpdateResponseEmotionHypothesis(
                @type,
                eventId,
                additionalBinaryDataProperties,
                emotion,
                candidates,
                audioOffsetMs,
                audioDurationMs,
                responseId,
                itemId);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<SessionUpdateResponseEmotionHypothesis>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdateResponseEmotionHypothesis>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SessionUpdateResponseEmotionHypothesis)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SessionUpdateResponseEmotionHypothesis IPersistableModel<SessionUpdateResponseEmotionHypothesis>.Create(BinaryData data, ModelReaderWriterOptions options) => (SessionUpdateResponseEmotionHypothesis)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override SessionUpdate PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SessionUpdateResponseEmotionHypothesis>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeSessionUpdateResponseEmotionHypothesis(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SessionUpdateResponseEmotionHypothesis)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<SessionUpdateResponseEmotionHypothesis>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
