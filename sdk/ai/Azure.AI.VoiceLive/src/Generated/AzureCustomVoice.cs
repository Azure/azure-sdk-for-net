// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    /// <summary> Azure custom voice configuration (preferred). </summary>
    public partial class AzureCustomVoice : AzureVoice
    {
        /// <summary> Initializes a new instance of <see cref="AzureCustomVoice"/>. </summary>
        /// <param name="name"> Voice name cannot be empty. </param>
        /// <param name="endpointId"> Endpoint ID cannot be empty. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="endpointId"/> is null. </exception>
        public AzureCustomVoice(string name, string endpointId) : base("azure-custom")
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(endpointId, nameof(endpointId));

            Name = name;
            EndpointId = endpointId;
            PreferLocales = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="AzureCustomVoice"/>. </summary>
        /// <param name="type"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="name"> Voice name cannot be empty. </param>
        /// <param name="endpointId"> Endpoint ID cannot be empty. </param>
        /// <param name="temperature"> Temperature must be between 0.0 and 1.0. </param>
        /// <param name="customLexiconUri"></param>
        /// <param name="preferLocales"></param>
        /// <param name="locale"></param>
        /// <param name="style"></param>
        /// <param name="pitch"></param>
        /// <param name="rate"></param>
        /// <param name="volume"></param>
        internal AzureCustomVoice(string @type, IDictionary<string, BinaryData> additionalBinaryDataProperties, string name, string endpointId, float? temperature, string customLexiconUri, IList<string> preferLocales, string locale, string style, string pitch, string rate, string volume) : base(@type, additionalBinaryDataProperties)
        {
            Name = name;
            EndpointId = endpointId;
            Temperature = temperature;
            CustomLexiconUri = customLexiconUri;
            PreferLocales = preferLocales;
            Locale = locale;
            Style = style;
            Pitch = pitch;
            Rate = rate;
            Volume = volume;
        }

        /// <summary> Voice name cannot be empty. </summary>
        public string Name { get; set; }

        /// <summary> Endpoint ID cannot be empty. </summary>
        public string EndpointId { get; set; }

        /// <summary> Temperature must be between 0.0 and 1.0. </summary>
        public float? Temperature { get; set; }

        /// <summary> Gets or sets the CustomLexiconUri. </summary>
        public string CustomLexiconUri { get; set; }

        /// <summary> Gets the PreferLocales. </summary>
        public IList<string> PreferLocales { get; }

        /// <summary> Gets or sets the Locale. </summary>
        public string Locale { get; set; }

        /// <summary> Gets or sets the Style. </summary>
        public string Style { get; set; }

        /// <summary> Gets or sets the Pitch. </summary>
        public string Pitch { get; set; }

        /// <summary> Gets or sets the Rate. </summary>
        public string Rate { get; set; }

        /// <summary> Gets or sets the Volume. </summary>
        public string Volume { get; set; }
    }
}
