// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.VoiceLive
{
    internal partial class ResponseCreateParams : IUtf8JsonSerializable, IJsonModel<ResponseCreateParams>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ResponseCreateParams>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ResponseCreateParams>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResponseCreateParams>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResponseCreateParams)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Commit))
            {
                writer.WritePropertyName("commit"u8);
                writer.WriteBooleanValue(Commit.Value);
            }
            if (Optional.IsDefined(CancelPrevious))
            {
                writer.WritePropertyName("cancel_previous"u8);
                writer.WriteBooleanValue(CancelPrevious.Value);
            }
            if (Optional.IsCollectionDefined(AppendInputItems))
            {
                writer.WritePropertyName("append_input_items"u8);
                writer.WriteStartArray();
                foreach (var item in AppendInputItems)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(InputItems))
            {
                writer.WritePropertyName("input_items"u8);
                writer.WriteStartArray();
                foreach (var item in InputItems)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Modalities))
            {
                writer.WritePropertyName("modalities"u8);
                writer.WriteStartArray();
                foreach (var item in Modalities)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Instructions))
            {
                writer.WritePropertyName("instructions"u8);
                writer.WriteStringValue(Instructions);
            }
            if (Optional.IsDefined(Voice))
            {
                writer.WritePropertyName("voice"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Voice);
#else
                using (JsonDocument document = JsonDocument.Parse(Voice, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(OutputAudioFormat))
            {
                writer.WritePropertyName("output_audio_format"u8);
                writer.WriteStringValue(OutputAudioFormat.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Tools))
            {
                writer.WritePropertyName("tools"u8);
                writer.WriteStartArray();
                foreach (var item in Tools)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ToolChoice))
            {
                writer.WritePropertyName("tool_choice"u8);
                writer.WriteStringValue(ToolChoice);
            }
            if (Optional.IsDefined(Temperature))
            {
                writer.WritePropertyName("temperature"u8);
                writer.WriteNumberValue(Temperature.Value);
            }
            if (Optional.IsDefined(MaxOutputTokens))
            {
                writer.WritePropertyName("max_output_tokens"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(MaxOutputTokens);
#else
                using (JsonDocument document = JsonDocument.Parse(MaxOutputTokens, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ResponseCreateParams IJsonModel<ResponseCreateParams>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResponseCreateParams>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResponseCreateParams)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeResponseCreateParams(document.RootElement, options);
        }

        internal static ResponseCreateParams DeserializeResponseCreateParams(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool? commit = default;
            bool? cancelPrevious = default;
            IList<ConversationRequestItem> appendInputItems = default;
            IList<ConversationRequestItem> inputItems = default;
            IList<InputModality> modalities = default;
            string instructions = default;
            BinaryData voice = default;
            AudioFormat? outputAudioFormat = default;
            IList<ToolCall> tools = default;
            string toolChoice = default;
            float? temperature = default;
            BinaryData maxOutputTokens = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("commit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    commit = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cancel_previous"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cancelPrevious = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("append_input_items"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ConversationRequestItem> array = new List<ConversationRequestItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConversationRequestItem.DeserializeConversationRequestItem(item, options));
                    }
                    appendInputItems = array;
                    continue;
                }
                if (property.NameEquals("input_items"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ConversationRequestItem> array = new List<ConversationRequestItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConversationRequestItem.DeserializeConversationRequestItem(item, options));
                    }
                    inputItems = array;
                    continue;
                }
                if (property.NameEquals("modalities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<InputModality> array = new List<InputModality>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new InputModality(item.GetString()));
                    }
                    modalities = array;
                    continue;
                }
                if (property.NameEquals("instructions"u8))
                {
                    instructions = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("voice"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    voice = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("output_audio_format"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    outputAudioFormat = new AudioFormat(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tools"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ToolCall> array = new List<ToolCall>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ToolCall.DeserializeToolCall(item, options));
                    }
                    tools = array;
                    continue;
                }
                if (property.NameEquals("tool_choice"u8))
                {
                    toolChoice = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("temperature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    temperature = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("max_output_tokens"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxOutputTokens = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ResponseCreateParams(
                commit,
                cancelPrevious,
                appendInputItems ?? new ChangeTrackingList<ConversationRequestItem>(),
                inputItems ?? new ChangeTrackingList<ConversationRequestItem>(),
                modalities ?? new ChangeTrackingList<InputModality>(),
                instructions,
                voice,
                outputAudioFormat,
                tools ?? new ChangeTrackingList<ToolCall>(),
                toolChoice,
                temperature,
                maxOutputTokens,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ResponseCreateParams>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResponseCreateParams>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ResponseCreateParams)} does not support writing '{options.Format}' format.");
            }
        }

        ResponseCreateParams IPersistableModel<ResponseCreateParams>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResponseCreateParams>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeResponseCreateParams(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ResponseCreateParams)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ResponseCreateParams>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ResponseCreateParams FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeResponseCreateParams(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
