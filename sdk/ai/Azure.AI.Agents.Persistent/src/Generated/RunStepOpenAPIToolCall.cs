// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Agents.Persistent
{
    /// <summary>
    /// A record of a call to an OpenAPI tool, issued by the model in evaluation of a defined tool, that represents
    /// executed OpenAPI operations.
    /// </summary>
    public partial class RunStepOpenAPIToolCall : RunStepToolCall
    {
        /// <summary> Initializes a new instance of <see cref="RunStepOpenAPIToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="openAPI"> Reserved for future use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="openAPI"/> is null. </exception>
        internal RunStepOpenAPIToolCall(string id, IReadOnlyDictionary<string, string> openAPI) : base(id)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(openAPI, nameof(openAPI));

            Type = "openapi";
            OpenAPI = openAPI;
        }

        /// <summary> Initializes a new instance of <see cref="RunStepOpenAPIToolCall"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="openAPI"> Reserved for future use. </param>
        internal RunStepOpenAPIToolCall(string type, string id, IDictionary<string, BinaryData> serializedAdditionalRawData, IReadOnlyDictionary<string, string> openAPI) : base(type, id, serializedAdditionalRawData)
        {
            OpenAPI = openAPI;
        }

        /// <summary> Initializes a new instance of <see cref="RunStepOpenAPIToolCall"/> for deserialization. </summary>
        internal RunStepOpenAPIToolCall()
        {
        }

        /// <summary> Reserved for future use. </summary>
        public IReadOnlyDictionary<string, string> OpenAPI { get; }
    }
}
