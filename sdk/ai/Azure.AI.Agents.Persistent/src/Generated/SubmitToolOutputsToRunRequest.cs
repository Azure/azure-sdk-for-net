// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> The SubmitToolOutputsToRunRequest. </summary>
    internal partial class SubmitToolOutputsToRunRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SubmitToolOutputsToRunRequest"/>. </summary>
        internal SubmitToolOutputsToRunRequest()
        {
            ToolOutputs = new ChangeTrackingList<StructuredToolOutput>();
            ToolApprovals = new ChangeTrackingList<ToolApproval>();
        }

        /// <summary> Initializes a new instance of <see cref="SubmitToolOutputsToRunRequest"/>. </summary>
        /// <param name="toolOutputs">
        /// A list of tools for which the outputs are being submitted
        /// Please note <see cref="StructuredToolOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ComputerToolOutput"/> and <see cref="ToolOutput"/>.
        /// </param>
        /// <param name="toolApprovals"> A list of tool approvals allowing data to be sent to tools. </param>
        /// <param name="stream"> If true, returns a stream of events that happen during the Run as SSE, terminating at `[DONE]`. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SubmitToolOutputsToRunRequest(IReadOnlyList<StructuredToolOutput> toolOutputs, IReadOnlyList<ToolApproval> toolApprovals, bool? stream, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ToolOutputs = toolOutputs;
            ToolApprovals = toolApprovals;
            Stream = stream;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// A list of tools for which the outputs are being submitted
        /// Please note <see cref="StructuredToolOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ComputerToolOutput"/> and <see cref="ToolOutput"/>.
        /// </summary>
        public IReadOnlyList<StructuredToolOutput> ToolOutputs { get; }
        /// <summary> A list of tool approvals allowing data to be sent to tools. </summary>
        public IReadOnlyList<ToolApproval> ToolApprovals { get; }
        /// <summary> If true, returns a stream of events that happen during the Run as SSE, terminating at `[DONE]`. </summary>
        public bool? Stream { get; }
    }
}
