// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> The possible values denoting the intended usage of a file. </summary>
    public readonly partial struct PersistentAgentFilePurpose : IEquatable<PersistentAgentFilePurpose>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PersistentAgentFilePurpose"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PersistentAgentFilePurpose(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FineTuneValue = "fine-tune";
        private const string FineTuneResultsValue = "fine-tune-results";
        private const string AgentsValue = "assistants";
        private const string AgentsOutputValue = "assistants_output";
        private const string BatchValue = "batch";
        private const string BatchOutputValue = "batch_output";
        private const string VisionValue = "vision";

        /// <summary> Indicates a file is used for fine tuning input. </summary>
        public static PersistentAgentFilePurpose FineTune { get; } = new PersistentAgentFilePurpose(FineTuneValue);
        /// <summary> Indicates a file is used for fine tuning results. </summary>
        public static PersistentAgentFilePurpose FineTuneResults { get; } = new PersistentAgentFilePurpose(FineTuneResultsValue);
        /// <summary> Indicates a file is used as input to agents. </summary>
        public static PersistentAgentFilePurpose Agents { get; } = new PersistentAgentFilePurpose(AgentsValue);
        /// <summary> Indicates a file is used as output by agents. </summary>
        public static PersistentAgentFilePurpose AgentsOutput { get; } = new PersistentAgentFilePurpose(AgentsOutputValue);
        /// <summary> Indicates a file is used as input to . </summary>
        public static PersistentAgentFilePurpose Batch { get; } = new PersistentAgentFilePurpose(BatchValue);
        /// <summary> Indicates a file is used as output by a vector store batch operation. </summary>
        public static PersistentAgentFilePurpose BatchOutput { get; } = new PersistentAgentFilePurpose(BatchOutputValue);
        /// <summary> Indicates a file is used as input to a vision operation. </summary>
        public static PersistentAgentFilePurpose Vision { get; } = new PersistentAgentFilePurpose(VisionValue);
        /// <summary> Determines if two <see cref="PersistentAgentFilePurpose"/> values are the same. </summary>
        public static bool operator ==(PersistentAgentFilePurpose left, PersistentAgentFilePurpose right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PersistentAgentFilePurpose"/> values are not the same. </summary>
        public static bool operator !=(PersistentAgentFilePurpose left, PersistentAgentFilePurpose right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PersistentAgentFilePurpose"/>. </summary>
        public static implicit operator PersistentAgentFilePurpose(string value) => new PersistentAgentFilePurpose(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PersistentAgentFilePurpose other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PersistentAgentFilePurpose other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
