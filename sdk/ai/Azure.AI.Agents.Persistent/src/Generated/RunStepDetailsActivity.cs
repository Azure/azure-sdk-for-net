// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> Represents the list of activities, associated with the given step. </summary>
    public partial class RunStepDetailsActivity
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RunStepDetailsActivity"/>. </summary>
        /// <param name="id"> The activity ID. </param>
        /// <param name="serverLabel"> Server label. </param>
        /// <param name="tools"> The supported function list. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="serverLabel"/> or <paramref name="tools"/> is null. </exception>
        internal RunStepDetailsActivity(string id, string serverLabel, IReadOnlyDictionary<string, ActivityFunctionDefinition> tools)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(serverLabel, nameof(serverLabel));
            Argument.AssertNotNull(tools, nameof(tools));

            Id = id;
            ServerLabel = serverLabel;
            Tools = tools;
        }

        /// <summary> Initializes a new instance of <see cref="RunStepDetailsActivity"/>. </summary>
        /// <param name="type"> The activity type, which is always 'mcp_list_tools'. </param>
        /// <param name="id"> The activity ID. </param>
        /// <param name="serverLabel"> Server label. </param>
        /// <param name="tools"> The supported function list. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RunStepDetailsActivity(RunStepDetailsActivityType type, string id, string serverLabel, IReadOnlyDictionary<string, ActivityFunctionDefinition> tools, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            Id = id;
            ServerLabel = serverLabel;
            Tools = tools;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RunStepDetailsActivity"/> for deserialization. </summary>
        internal RunStepDetailsActivity()
        {
        }

        /// <summary> The activity type, which is always 'mcp_list_tools'. </summary>
        public RunStepDetailsActivityType Type { get; } = RunStepDetailsActivityType.McpListTools;

        /// <summary> The activity ID. </summary>
        public string Id { get; }
        /// <summary> Server label. </summary>
        public string ServerLabel { get; }
        /// <summary> The supported function list. </summary>
        public IReadOnlyDictionary<string, ActivityFunctionDefinition> Tools { get; }
    }
}
