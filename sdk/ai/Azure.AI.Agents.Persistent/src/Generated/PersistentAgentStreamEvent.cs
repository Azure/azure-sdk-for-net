// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Agents.Persistent
{
    /// <summary>
    /// Each event in a server-sent events stream has an `event` and `data` property:
    ///
    /// ```
    /// event: thread.created
    /// data: {"id": "thread_123", "object": "thread", ...}
    /// ```
    ///
    /// We emit events whenever a new object is created, transitions to a new state, or is being
    /// streamed in parts (deltas). For example, we emit `thread.run.created` when a new run
    /// is created, `thread.run.completed` when a run completes, and so on. When an Agent chooses
    /// to create a message during a run, we emit a `thread.message.created event`, a
    /// `thread.message.in_progress` event, many `thread.message.delta` events, and finally a
    /// `thread.message.completed` event.
    ///
    /// We may add additional events over time, so we recommend handling unknown events gracefully
    /// in your code.
    /// </summary>
    public readonly partial struct PersistentAgentStreamEvent : IEquatable<PersistentAgentStreamEvent>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PersistentAgentStreamEvent"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PersistentAgentStreamEvent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ThreadCreatedValue = "thread.created";
        private const string ThreadRunCreatedValue = "thread.run.created";
        private const string ThreadRunQueuedValue = "thread.run.queued";
        private const string ThreadRunInProgressValue = "thread.run.in_progress";
        private const string ThreadRunRequiresActionValue = "thread.run.requires_action";
        private const string ThreadRunCompletedValue = "thread.run.completed";
        private const string ThreadRunIncompleteValue = "thread.run.incomplete";
        private const string ThreadRunFailedValue = "thread.run.failed";
        private const string ThreadRunCancellingValue = "thread.run.cancelling";
        private const string ThreadRunCancelledValue = "thread.run.cancelled";
        private const string ThreadRunExpiredValue = "thread.run.expired";
        private const string RunStepCreatedValue = "thread.run.step.created";
        private const string RunStepInProgressValue = "thread.run.step.in_progress";
        private const string RunStepDeltaValue = "thread.run.step.delta";
        private const string RunStepCompletedValue = "thread.run.step.completed";
        private const string RunStepFailedValue = "thread.run.step.failed";
        private const string RunStepCancelledValue = "thread.run.step.cancelled";
        private const string RunStepExpiredValue = "thread.run.step.expired";
        private const string MessageCreatedValue = "thread.message.created";
        private const string MessageInProgressValue = "thread.message.in_progress";
        private const string MessageDeltaValue = "thread.message.delta";
        private const string MessageCompletedValue = "thread.message.completed";
        private const string MessageIncompleteValue = "thread.message.incomplete";
        private const string ErrorValue = "error";
        private const string DoneValue = "done";

        /// <summary> Event sent when a new thread is created. The data of this event is of type AgentThread. </summary>
        public static PersistentAgentStreamEvent ThreadCreated { get; } = new PersistentAgentStreamEvent(ThreadCreatedValue);
        /// <summary> Event sent when a new run is created. The data of this event is of type ThreadRun. </summary>
        public static PersistentAgentStreamEvent ThreadRunCreated { get; } = new PersistentAgentStreamEvent(ThreadRunCreatedValue);
        /// <summary> Event sent when a run moves to `queued` status. The data of this event is of type ThreadRun. </summary>
        public static PersistentAgentStreamEvent ThreadRunQueued { get; } = new PersistentAgentStreamEvent(ThreadRunQueuedValue);
        /// <summary> Event sent when a run moves to `in_progress` status. The data of this event is of type ThreadRun. </summary>
        public static PersistentAgentStreamEvent ThreadRunInProgress { get; } = new PersistentAgentStreamEvent(ThreadRunInProgressValue);
        /// <summary> Event sent when a run moves to `requires_action` status. The data of this event is of type ThreadRun. </summary>
        public static PersistentAgentStreamEvent ThreadRunRequiresAction { get; } = new PersistentAgentStreamEvent(ThreadRunRequiresActionValue);
        /// <summary> Event sent when a run is completed. The data of this event is of type ThreadRun. </summary>
        public static PersistentAgentStreamEvent ThreadRunCompleted { get; } = new PersistentAgentStreamEvent(ThreadRunCompletedValue);
        /// <summary> Event sent when a run ends incomplete. The data of this event is of type ThreadRun. </summary>
        public static PersistentAgentStreamEvent ThreadRunIncomplete { get; } = new PersistentAgentStreamEvent(ThreadRunIncompleteValue);
        /// <summary> Event sent when a run fails. The data of this event is of type ThreadRun. </summary>
        public static PersistentAgentStreamEvent ThreadRunFailed { get; } = new PersistentAgentStreamEvent(ThreadRunFailedValue);
        /// <summary> Event sent when a run moves to `cancelling` status. The data of this event is of type ThreadRun. </summary>
        public static PersistentAgentStreamEvent ThreadRunCancelling { get; } = new PersistentAgentStreamEvent(ThreadRunCancellingValue);
        /// <summary> Event sent when a run is cancelled. The data of this event is of type ThreadRun. </summary>
        public static PersistentAgentStreamEvent ThreadRunCancelled { get; } = new PersistentAgentStreamEvent(ThreadRunCancelledValue);
        /// <summary> Event sent when a run is expired. The data of this event is of type ThreadRun. </summary>
        public static PersistentAgentStreamEvent ThreadRunExpired { get; } = new PersistentAgentStreamEvent(ThreadRunExpiredValue);
        /// <summary> Event sent when a new thread run step is created. The data of this event is of type RunStep. </summary>
        public static PersistentAgentStreamEvent RunStepCreated { get; } = new PersistentAgentStreamEvent(RunStepCreatedValue);
        /// <summary> Event sent when a run step moves to `in_progress` status. The data of this event is of type RunStep. </summary>
        public static PersistentAgentStreamEvent RunStepInProgress { get; } = new PersistentAgentStreamEvent(RunStepInProgressValue);
        /// <summary> Event sent when a run step is being streamed. The data of this event is of type RunStepDeltaChunk. </summary>
        public static PersistentAgentStreamEvent RunStepDelta { get; } = new PersistentAgentStreamEvent(RunStepDeltaValue);
        /// <summary> Event sent when a run step is completed. The data of this event is of type RunStep. </summary>
        public static PersistentAgentStreamEvent RunStepCompleted { get; } = new PersistentAgentStreamEvent(RunStepCompletedValue);
        /// <summary> Event sent when a run step fails. The data of this event is of type RunStep. </summary>
        public static PersistentAgentStreamEvent RunStepFailed { get; } = new PersistentAgentStreamEvent(RunStepFailedValue);
        /// <summary> Event sent when a run step is cancelled. The data of this event is of type RunStep. </summary>
        public static PersistentAgentStreamEvent RunStepCancelled { get; } = new PersistentAgentStreamEvent(RunStepCancelledValue);
        /// <summary> Event sent when a run step is expired. The data of this event is of type RunStep. </summary>
        public static PersistentAgentStreamEvent RunStepExpired { get; } = new PersistentAgentStreamEvent(RunStepExpiredValue);
        /// <summary> Event sent when a new message is created. The data of this event is of type ThreadMessage. </summary>
        public static PersistentAgentStreamEvent MessageCreated { get; } = new PersistentAgentStreamEvent(MessageCreatedValue);
        /// <summary> Event sent when a message moves to `in_progress` status. The data of this event is of type ThreadMessage. </summary>
        public static PersistentAgentStreamEvent MessageInProgress { get; } = new PersistentAgentStreamEvent(MessageInProgressValue);
        /// <summary> Event sent when a message is being streamed. The data of this event is of type MessageDeltaChunk. </summary>
        public static PersistentAgentStreamEvent MessageDelta { get; } = new PersistentAgentStreamEvent(MessageDeltaValue);
        /// <summary> Event sent when a message is completed. The data of this event is of type ThreadMessage. </summary>
        public static PersistentAgentStreamEvent MessageCompleted { get; } = new PersistentAgentStreamEvent(MessageCompletedValue);
        /// <summary> Event sent before a message is completed. The data of this event is of type ThreadMessage. </summary>
        public static PersistentAgentStreamEvent MessageIncomplete { get; } = new PersistentAgentStreamEvent(MessageIncompleteValue);
        /// <summary> Event sent when an error occurs, such as an internal server error or a timeout. </summary>
        public static PersistentAgentStreamEvent Error { get; } = new PersistentAgentStreamEvent(ErrorValue);
        /// <summary> Event sent when the stream is done. </summary>
        public static PersistentAgentStreamEvent Done { get; } = new PersistentAgentStreamEvent(DoneValue);
        /// <summary> Determines if two <see cref="PersistentAgentStreamEvent"/> values are the same. </summary>
        public static bool operator ==(PersistentAgentStreamEvent left, PersistentAgentStreamEvent right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PersistentAgentStreamEvent"/> values are not the same. </summary>
        public static bool operator !=(PersistentAgentStreamEvent left, PersistentAgentStreamEvent right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PersistentAgentStreamEvent"/>. </summary>
        public static implicit operator PersistentAgentStreamEvent(string value) => new PersistentAgentStreamEvent(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PersistentAgentStreamEvent other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PersistentAgentStreamEvent other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
