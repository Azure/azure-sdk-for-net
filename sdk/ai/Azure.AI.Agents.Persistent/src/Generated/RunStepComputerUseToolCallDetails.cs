// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> The detailed information about a computer use tool call. </summary>
    public partial class RunStepComputerUseToolCallDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RunStepComputerUseToolCallDetails"/>. </summary>
        /// <param name="action">
        /// The action to be performed by the computer use tool.
        /// Please note <see cref="ComputerUseAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ClickAction"/>, <see cref="DoubleClickAction"/>, <see cref="DragAction"/>, <see cref="KeyPressAction"/>, <see cref="MoveAction"/>, <see cref="ScreenshotAction"/>, <see cref="ScrollAction"/>, <see cref="TypeAction"/> and <see cref="WaitAction"/>.
        /// </param>
        /// <param name="pendingSafetyChecks"> Safety checks that are pending acknowledgment by the developer. </param>
        /// <param name="output"> The output from the computer use tool. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/>, <paramref name="pendingSafetyChecks"/> or <paramref name="output"/> is null. </exception>
        internal RunStepComputerUseToolCallDetails(ComputerUseAction action, IEnumerable<SafetyCheck> pendingSafetyChecks, ComputerScreenshot output)
        {
            Argument.AssertNotNull(action, nameof(action));
            Argument.AssertNotNull(pendingSafetyChecks, nameof(pendingSafetyChecks));
            Argument.AssertNotNull(output, nameof(output));

            Action = action;
            PendingSafetyChecks = pendingSafetyChecks.ToList();
            Output = output;
            AcknowledgedSafetyChecks = new ChangeTrackingList<SafetyCheck>();
        }

        /// <summary> Initializes a new instance of <see cref="RunStepComputerUseToolCallDetails"/>. </summary>
        /// <param name="action">
        /// The action to be performed by the computer use tool.
        /// Please note <see cref="ComputerUseAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ClickAction"/>, <see cref="DoubleClickAction"/>, <see cref="DragAction"/>, <see cref="KeyPressAction"/>, <see cref="MoveAction"/>, <see cref="ScreenshotAction"/>, <see cref="ScrollAction"/>, <see cref="TypeAction"/> and <see cref="WaitAction"/>.
        /// </param>
        /// <param name="pendingSafetyChecks"> Safety checks that are pending acknowledgment by the developer. </param>
        /// <param name="output"> The output from the computer use tool. </param>
        /// <param name="acknowledgedSafetyChecks"> Safety checks that have been acknowledged by the developer. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RunStepComputerUseToolCallDetails(ComputerUseAction action, IReadOnlyList<SafetyCheck> pendingSafetyChecks, ComputerScreenshot output, IReadOnlyList<SafetyCheck> acknowledgedSafetyChecks, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Action = action;
            PendingSafetyChecks = pendingSafetyChecks;
            Output = output;
            AcknowledgedSafetyChecks = acknowledgedSafetyChecks;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RunStepComputerUseToolCallDetails"/> for deserialization. </summary>
        internal RunStepComputerUseToolCallDetails()
        {
        }

        /// <summary>
        /// The action to be performed by the computer use tool.
        /// Please note <see cref="ComputerUseAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ClickAction"/>, <see cref="DoubleClickAction"/>, <see cref="DragAction"/>, <see cref="KeyPressAction"/>, <see cref="MoveAction"/>, <see cref="ScreenshotAction"/>, <see cref="ScrollAction"/>, <see cref="TypeAction"/> and <see cref="WaitAction"/>.
        /// </summary>
        public ComputerUseAction Action { get; }
        /// <summary> Safety checks that are pending acknowledgment by the developer. </summary>
        public IReadOnlyList<SafetyCheck> PendingSafetyChecks { get; }
        /// <summary> The output from the computer use tool. </summary>
        public ComputerScreenshot Output { get; }
        /// <summary> Safety checks that have been acknowledged by the developer. </summary>
        public IReadOnlyList<SafetyCheck> AcknowledgedSafetyChecks { get; }
    }
}
