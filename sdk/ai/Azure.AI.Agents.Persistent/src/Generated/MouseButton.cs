// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> The mouse button types supported by click actions. </summary>
    public readonly partial struct MouseButton : IEquatable<MouseButton>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MouseButton"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MouseButton(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LeftValue = "left";
        private const string RightValue = "right";
        private const string WheelValue = "wheel";
        private const string BackValue = "back";
        private const string ForwardValue = "forward";

        /// <summary> Left mouse button. </summary>
        public static MouseButton Left { get; } = new MouseButton(LeftValue);
        /// <summary> Right mouse button. </summary>
        public static MouseButton Right { get; } = new MouseButton(RightValue);
        /// <summary> Mouse wheel button. </summary>
        public static MouseButton Wheel { get; } = new MouseButton(WheelValue);
        /// <summary> Back mouse button. </summary>
        public static MouseButton Back { get; } = new MouseButton(BackValue);
        /// <summary> Forward mouse button. </summary>
        public static MouseButton Forward { get; } = new MouseButton(ForwardValue);
        /// <summary> Determines if two <see cref="MouseButton"/> values are the same. </summary>
        public static bool operator ==(MouseButton left, MouseButton right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MouseButton"/> values are not the same. </summary>
        public static bool operator !=(MouseButton left, MouseButton right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MouseButton"/>. </summary>
        public static implicit operator MouseButton(string value) => new MouseButton(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MouseButton other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MouseButton other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
