// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> Specifies the kind of content block within a message. Could be text, an image file, an external image URL, or an unknown future type. </summary>
    internal readonly partial struct MessageBlockType : IEquatable<MessageBlockType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MessageBlockType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MessageBlockType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TextValue = "text";
        private const string ImageFileValue = "image_file";
        private const string ImageUrlValue = "image_url";

        /// <summary> Indicates a block containing text content. </summary>
        public static MessageBlockType Text { get; } = new MessageBlockType(TextValue);
        /// <summary> Indicates a block referencing an internally uploaded image file. </summary>
        public static MessageBlockType ImageFile { get; } = new MessageBlockType(ImageFileValue);
        /// <summary> Indicates a block referencing an external image URL. </summary>
        public static MessageBlockType ImageUrl { get; } = new MessageBlockType(ImageUrlValue);
        /// <summary> Determines if two <see cref="MessageBlockType"/> values are the same. </summary>
        public static bool operator ==(MessageBlockType left, MessageBlockType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MessageBlockType"/> values are not the same. </summary>
        public static bool operator !=(MessageBlockType left, MessageBlockType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MessageBlockType"/>. </summary>
        public static implicit operator MessageBlockType(string value) => new MessageBlockType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MessageBlockType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MessageBlockType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
