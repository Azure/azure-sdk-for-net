// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> Available tool types for agents named tools. </summary>
    public readonly partial struct PersistentAgentsNamedToolChoiceType : IEquatable<PersistentAgentsNamedToolChoiceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PersistentAgentsNamedToolChoiceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PersistentAgentsNamedToolChoiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FunctionValue = "function";
        private const string CodeInterpreterValue = "code_interpreter";
        private const string FileSearchValue = "file_search";
        private const string BingGroundingValue = "bing_grounding";
        private const string AzureAISearchValue = "azure_ai_search";
        private const string ConnectedAgentValue = "connected_agent";

        /// <summary> Tool type `function`. </summary>
        public static PersistentAgentsNamedToolChoiceType Function { get; } = new PersistentAgentsNamedToolChoiceType(FunctionValue);
        /// <summary> Tool type `code_interpreter`. </summary>
        public static PersistentAgentsNamedToolChoiceType CodeInterpreter { get; } = new PersistentAgentsNamedToolChoiceType(CodeInterpreterValue);
        /// <summary> Tool type `file_search`. </summary>
        public static PersistentAgentsNamedToolChoiceType FileSearch { get; } = new PersistentAgentsNamedToolChoiceType(FileSearchValue);
        /// <summary> Tool type `bing_grounding`. </summary>
        public static PersistentAgentsNamedToolChoiceType BingGrounding { get; } = new PersistentAgentsNamedToolChoiceType(BingGroundingValue);
        /// <summary> Tool type `azure_ai_search`. </summary>
        public static PersistentAgentsNamedToolChoiceType AzureAISearch { get; } = new PersistentAgentsNamedToolChoiceType(AzureAISearchValue);
        /// <summary> Tool type `connected_agent`. </summary>
        public static PersistentAgentsNamedToolChoiceType ConnectedAgent { get; } = new PersistentAgentsNamedToolChoiceType(ConnectedAgentValue);
        /// <summary> Determines if two <see cref="PersistentAgentsNamedToolChoiceType"/> values are the same. </summary>
        public static bool operator ==(PersistentAgentsNamedToolChoiceType left, PersistentAgentsNamedToolChoiceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PersistentAgentsNamedToolChoiceType"/> values are not the same. </summary>
        public static bool operator !=(PersistentAgentsNamedToolChoiceType left, PersistentAgentsNamedToolChoiceType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PersistentAgentsNamedToolChoiceType"/>. </summary>
        public static implicit operator PersistentAgentsNamedToolChoiceType(string value) => new PersistentAgentsNamedToolChoiceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PersistentAgentsNamedToolChoiceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PersistentAgentsNamedToolChoiceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
