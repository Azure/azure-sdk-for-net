// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> A collection of keypresses the model would like to perform. </summary>
    public partial class KeyPressAction : ComputerUseAction
    {
        /// <summary> Initializes a new instance of <see cref="KeyPressAction"/>. </summary>
        /// <param name="keys"> The combination of keys the model is requesting to be pressed. This is an array of strings, each representing a key. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keys"/> is null. </exception>
        internal KeyPressAction(IEnumerable<string> keys)
        {
            Argument.AssertNotNull(keys, nameof(keys));

            Type = "keypress";
            Keys = keys.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="KeyPressAction"/>. </summary>
        /// <param name="type"> The type of computer use action. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="keys"> The combination of keys the model is requesting to be pressed. This is an array of strings, each representing a key. </param>
        internal KeyPressAction(string type, IDictionary<string, BinaryData> serializedAdditionalRawData, IReadOnlyList<string> keys) : base(type, serializedAdditionalRawData)
        {
            Keys = keys;
        }

        /// <summary> Initializes a new instance of <see cref="KeyPressAction"/> for deserialization. </summary>
        internal KeyPressAction()
        {
        }

        /// <summary> The combination of keys the model is requesting to be pressed. This is an array of strings, each representing a key. </summary>
        public IReadOnlyList<string> Keys { get; }
    }
}
