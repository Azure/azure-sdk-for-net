// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> The environment types supported by the computer use tool. </summary>
    public readonly partial struct ComputerUseEnvironment : IEquatable<ComputerUseEnvironment>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ComputerUseEnvironment"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComputerUseEnvironment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WindowsValue = "windows";
        private const string MacValue = "mac";
        private const string LinuxValue = "linux";
        private const string BrowserValue = "browser";

        /// <summary> Windows environment. </summary>
        public static ComputerUseEnvironment Windows { get; } = new ComputerUseEnvironment(WindowsValue);
        /// <summary> Mac environment. </summary>
        public static ComputerUseEnvironment Mac { get; } = new ComputerUseEnvironment(MacValue);
        /// <summary> Linux environment. </summary>
        public static ComputerUseEnvironment Linux { get; } = new ComputerUseEnvironment(LinuxValue);
        /// <summary> Browser environment. </summary>
        public static ComputerUseEnvironment Browser { get; } = new ComputerUseEnvironment(BrowserValue);
        /// <summary> Determines if two <see cref="ComputerUseEnvironment"/> values are the same. </summary>
        public static bool operator ==(ComputerUseEnvironment left, ComputerUseEnvironment right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComputerUseEnvironment"/> values are not the same. </summary>
        public static bool operator !=(ComputerUseEnvironment left, ComputerUseEnvironment right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ComputerUseEnvironment"/>. </summary>
        public static implicit operator ComputerUseEnvironment(string value) => new ComputerUseEnvironment(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComputerUseEnvironment other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComputerUseEnvironment other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
