// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> Search configuration for Bing Grounding. </summary>
    public partial class BingGroundingSearchConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BingGroundingSearchConfiguration"/>. </summary>
        /// <param name="connectionId"> Connection id for grounding with bing search. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> is null. </exception>
        public BingGroundingSearchConfiguration(string connectionId)
        {
            Argument.AssertNotNull(connectionId, nameof(connectionId));

            ConnectionId = connectionId;
        }

        /// <summary> Initializes a new instance of <see cref="BingGroundingSearchConfiguration"/>. </summary>
        /// <param name="connectionId"> Connection id for grounding with bing search. </param>
        /// <param name="market"> The market where the results come from. Typically, market is the country where the user is making the request from. However, it could be a different country if the user is not located in a country where Bing delivers results. The market must be in the form: `&lt;language&gt;-&lt;country/region&gt;` where `&lt;language&gt;` is an ISO 639-1 language code (neutral culture) and `&lt;country/region&gt;` is an ISO 3166 country/region (specific culture) code. For example, `en-US`. The string is case insensitive. For a list of possible market values, see [Market codes](https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/market-codes). If known, you are encouraged to always specify the market. Specifying the market helps Bing route the request and return an appropriate and optimal response. If you specify a market that is not listed in Market codes, Bing uses a best fit market code based on an internal mapping that is subject to change. </param>
        /// <param name="setLang">
        /// The language to use for user interface strings. You may specify the language using either a 2-letter or 4-letter code. Using 4-letter codes is preferred.
        /// For a list of supported language codes, see [Bing supported languages](https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/market-codes#bing-supported-language-codes).
        /// Bing loads the localized strings if this parameter contains a valid 2-letter neutral culture code (for example `fr`) or a valid 4-letter specific culture code (`fr-ca`). For example, for `fr-ca`, Bing loads the `fr` neutral culture code strings.
        /// If the parameter is not valid (for example, `zh`) or Bing doesn’t support the language (for example, `af`, `af-na`), Bing defaults to `en` (English).
        /// To specify the 2-letter code, set this parameter to an ISO 639-1 language code.
        /// To specify the 4-letter code, use the form `&lt;language&gt;-&lt;country/region&gt;` where `&lt;language&gt;` is an ISO 639-1 language code (neutral culture) and `&lt;country/region&gt;` is an ISO 3166 country/region (specific culture) code. For example, use `en-US` for United States English.
        /// Although optional, you should always specify the language. Typically, you set this parameter to the same language specified by the market value unless the user wants the user interface strings displayed in a different language.
        /// </param>
        /// <param name="count">
        /// The number of search results to return in the response. The default is 5 and the maximum value is 50. The actual number delivered may be less than requested.
        /// - It is possible for multiple pages to include some overlap in results.
        /// - This parameter affects only web page results. It's possible that AI model might not use all search results returned by Bing.
        /// </param>
        /// <param name="freshness">
        /// Filter search results by the following case-insensitive age values:
        /// - Day: Return webpages that Bing discovered within the last 24 hours.
        /// - Week: Return webpages that Bing discovered within the last 7 days.
        /// - Month: Return webpages that Bing discovered within the last 30 days. To get articles discovered by Bing during a specific timeframe, specify a date range in the form: `YYYY-MM-DD..YYYY-MM-DD`. For example, `freshness=2019-02-01..2019-05-30. To limit the results to a single date, set this parameter to a specific date. For example, freshness=2019-02-04`.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BingGroundingSearchConfiguration(string connectionId, string market, string setLang, long? count, string freshness, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ConnectionId = connectionId;
            Market = market;
            SetLang = setLang;
            Count = count;
            Freshness = freshness;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BingGroundingSearchConfiguration"/> for deserialization. </summary>
        internal BingGroundingSearchConfiguration()
        {
        }

        /// <summary> Connection id for grounding with bing search. </summary>
        public string ConnectionId { get; set; }
        /// <summary> The market where the results come from. Typically, market is the country where the user is making the request from. However, it could be a different country if the user is not located in a country where Bing delivers results. The market must be in the form: `&lt;language&gt;-&lt;country/region&gt;` where `&lt;language&gt;` is an ISO 639-1 language code (neutral culture) and `&lt;country/region&gt;` is an ISO 3166 country/region (specific culture) code. For example, `en-US`. The string is case insensitive. For a list of possible market values, see [Market codes](https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/market-codes). If known, you are encouraged to always specify the market. Specifying the market helps Bing route the request and return an appropriate and optimal response. If you specify a market that is not listed in Market codes, Bing uses a best fit market code based on an internal mapping that is subject to change. </summary>
        public string Market { get; set; }
        /// <summary>
        /// The language to use for user interface strings. You may specify the language using either a 2-letter or 4-letter code. Using 4-letter codes is preferred.
        /// For a list of supported language codes, see [Bing supported languages](https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/market-codes#bing-supported-language-codes).
        /// Bing loads the localized strings if this parameter contains a valid 2-letter neutral culture code (for example `fr`) or a valid 4-letter specific culture code (`fr-ca`). For example, for `fr-ca`, Bing loads the `fr` neutral culture code strings.
        /// If the parameter is not valid (for example, `zh`) or Bing doesn’t support the language (for example, `af`, `af-na`), Bing defaults to `en` (English).
        /// To specify the 2-letter code, set this parameter to an ISO 639-1 language code.
        /// To specify the 4-letter code, use the form `&lt;language&gt;-&lt;country/region&gt;` where `&lt;language&gt;` is an ISO 639-1 language code (neutral culture) and `&lt;country/region&gt;` is an ISO 3166 country/region (specific culture) code. For example, use `en-US` for United States English.
        /// Although optional, you should always specify the language. Typically, you set this parameter to the same language specified by the market value unless the user wants the user interface strings displayed in a different language.
        /// </summary>
        public string SetLang { get; set; }
        /// <summary>
        /// The number of search results to return in the response. The default is 5 and the maximum value is 50. The actual number delivered may be less than requested.
        /// - It is possible for multiple pages to include some overlap in results.
        /// - This parameter affects only web page results. It's possible that AI model might not use all search results returned by Bing.
        /// </summary>
        public long? Count { get; set; }
        /// <summary>
        /// Filter search results by the following case-insensitive age values:
        /// - Day: Return webpages that Bing discovered within the last 24 hours.
        /// - Week: Return webpages that Bing discovered within the last 7 days.
        /// - Month: Return webpages that Bing discovered within the last 30 days. To get articles discovered by Bing during a specific timeframe, specify a date range in the form: `YYYY-MM-DD..YYYY-MM-DD`. For example, `freshness=2019-02-01..2019-05-30. To limit the results to a single date, set this parameter to a specific date. For example, freshness=2019-02-04`.
        /// </summary>
        public string Freshness { get; set; }
    }
}
