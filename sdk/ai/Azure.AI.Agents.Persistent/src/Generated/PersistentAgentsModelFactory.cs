// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> Model factory for models. </summary>
    public static partial class PersistentAgentsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Persistent.AzureFunctionBinding"/>. </summary>
        /// <param name="type"> The type of binding, which is always 'storage_queue'. </param>
        /// <param name="storageQueue"> Storage queue. </param>
        /// <returns> A new <see cref="Persistent.AzureFunctionBinding"/> instance for mocking. </returns>
        public static AzureFunctionBinding AzureFunctionBinding(AzureFunctionBindingType type = default, AzureFunctionStorageQueue storageQueue = null)
        {
            return new AzureFunctionBinding(type, storageQueue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.AISearchIndexResource"/>. </summary>
        /// <param name="indexConnectionId"> An index connection id in an IndexResource attached to this agent. </param>
        /// <param name="indexName"> The name of an index in an IndexResource attached to this agent. </param>
        /// <param name="queryType"> Type of query in an AIIndexResource attached to this agent. </param>
        /// <param name="topK"> Number of documents to retrieve from search and present to the model. </param>
        /// <param name="filter"> filter string for search resource. </param>
        /// <param name="indexAssetId"> Index asset id for search resource. </param>
        /// <returns> A new <see cref="Persistent.AISearchIndexResource"/> instance for mocking. </returns>
        public static AISearchIndexResource AISearchIndexResource(string indexConnectionId = null, string indexName = null, AzureAISearchQueryType? queryType = null, int? topK = null, string filter = null, string indexAssetId = null)
        {
            return new AISearchIndexResource(
                indexConnectionId,
                indexName,
                queryType,
                topK,
                filter,
                indexAssetId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.ResponseFormatJsonSchemaType"/>. </summary>
        /// <param name="type"> Type. </param>
        /// <param name="jsonSchema"> The JSON schema, describing response format. </param>
        /// <returns> A new <see cref="Persistent.ResponseFormatJsonSchemaType"/> instance for mocking. </returns>
        public static ResponseFormatJsonSchemaType ResponseFormatJsonSchemaType(ResponseFormatJsonSchemaTypeType type = default, ResponseFormatJsonSchema jsonSchema = null)
        {
            return new ResponseFormatJsonSchemaType(type, jsonSchema, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.ThreadMessageOptions"/>. </summary>
        /// <param name="role">
        /// The role of the entity that is creating the message. Allowed values include:
        /// `user`, which indicates the message is sent by an actual user (and should be
        /// used in most cases to represent user-generated messages), and `assistant`,
        /// which indicates the message is generated by the agent (use this value to insert
        /// messages from the agent into the conversation).
        /// </param>
        /// <param name="content">
        /// The content of the initial message. This may be a basic string (if you only
        /// need text) or an array of typed content blocks (for example, text, image_file,
        /// image_url, and so on).
        /// </param>
        /// <param name="attachments"> A list of files attached to the message, and the tools they should be added to. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Persistent.ThreadMessageOptions"/> instance for mocking. </returns>
        public static ThreadMessageOptions ThreadMessageOptions(MessageRole role = default, BinaryData content = null, IEnumerable<MessageAttachment> attachments = null, IDictionary<string, string> metadata = null)
        {
            attachments ??= new List<MessageAttachment>();
            metadata ??= new Dictionary<string, string>();

            return new ThreadMessageOptions(role, content, attachments?.ToList(), metadata, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageInputTextBlock"/>. </summary>
        /// <param name="text"> The plain text content for this block. </param>
        /// <returns> A new <see cref="Persistent.MessageInputTextBlock"/> instance for mocking. </returns>
        public static MessageInputTextBlock MessageInputTextBlock(string text = null)
        {
            return new MessageInputTextBlock(MessageBlockType.Text, serializedAdditionalRawData: null, text);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageInputImageFileBlock"/>. </summary>
        /// <param name="imageFile"> Information about the referenced image file, including file ID and optional detail level. </param>
        /// <returns> A new <see cref="Persistent.MessageInputImageFileBlock"/> instance for mocking. </returns>
        public static MessageInputImageFileBlock MessageInputImageFileBlock(MessageImageFileParam imageFile = null)
        {
            return new MessageInputImageFileBlock(MessageBlockType.ImageFile, serializedAdditionalRawData: null, imageFile);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageImageFileParam"/>. </summary>
        /// <param name="fileId"> The ID of the previously uploaded image file. </param>
        /// <param name="detail"> Optional detail level for the image (auto, low, or high). </param>
        /// <returns> A new <see cref="Persistent.MessageImageFileParam"/> instance for mocking. </returns>
        public static MessageImageFileParam MessageImageFileParam(string fileId = null, ImageDetailLevel? detail = null)
        {
            return new MessageImageFileParam(fileId, detail, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageInputImageUriBlock"/>. </summary>
        /// <param name="imageUrl"> Information about the external image URL, including the URL and optional detail level. </param>
        /// <returns> A new <see cref="Persistent.MessageInputImageUriBlock"/> instance for mocking. </returns>
        public static MessageInputImageUriBlock MessageInputImageUriBlock(MessageImageUriParam imageUrl = null)
        {
            return new MessageInputImageUriBlock(MessageBlockType.ImageUrl, serializedAdditionalRawData: null, imageUrl);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageImageUriParam"/>. </summary>
        /// <param name="uri"> The publicly accessible URL of the external image. </param>
        /// <param name="detail"> Optional detail level for the image (auto, low, or high). Defaults to 'auto' if not specified. </param>
        /// <returns> A new <see cref="Persistent.MessageImageUriParam"/> instance for mocking. </returns>
        public static MessageImageUriParam MessageImageUriParam(string uri = null, ImageDetailLevel? detail = null)
        {
            return new MessageImageUriParam(uri, detail, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RequiredToolCall"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when submitting tool outputs. </param>
        /// <returns> A new <see cref="Persistent.RequiredToolCall"/> instance for mocking. </returns>
        public static RequiredToolCall RequiredToolCall(string type = null, string id = null)
        {
            return new UnknownRequiredToolCall(type, serializedAdditionalRawData: null, id);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RequiredMcpToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when submitting tool outputs. </param>
        /// <param name="arguments"> The arguments to use when invoking the mcp tool, as provided by the model. Arguments are presented as a JSON document that should be validated and parsed for evaluation. </param>
        /// <param name="name"> The name of the function used on the MCP server. </param>
        /// <param name="serverLabel"> The label of the MCP server. </param>
        /// <returns> A new <see cref="Persistent.RequiredMcpToolCall"/> instance for mocking. </returns>
        public static RequiredMcpToolCall RequiredMcpToolCall(string id = null, string arguments = null, string name = null, string serverLabel = null)
        {
            return new RequiredMcpToolCall(
                "mcp",
                serializedAdditionalRawData: null,
                id,
                arguments,
                name,
                serverLabel);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.SubmitToolApprovalAction"/>. </summary>
        /// <param name="submitToolApproval"> The details describing tools that should be approved to continue run. </param>
        /// <returns> A new <see cref="Persistent.SubmitToolApprovalAction"/> instance for mocking. </returns>
        public static SubmitToolApprovalAction SubmitToolApprovalAction(SubmitToolApprovalDetails submitToolApproval = null)
        {
            return new SubmitToolApprovalAction("submit_tool_approval", serializedAdditionalRawData: null, submitToolApproval);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.SubmitToolApprovalDetails"/>. </summary>
        /// <param name="toolCalls">
        /// The list of tool calls that must be approved for the agent thread run to continue.
        /// Please note <see cref="Persistent.RequiredToolCall"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.RequiredFunctionToolCall"/> and <see cref="Persistent.RequiredMcpToolCall"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.SubmitToolApprovalDetails"/> instance for mocking. </returns>
        public static SubmitToolApprovalDetails SubmitToolApprovalDetails(IEnumerable<RequiredToolCall> toolCalls = null)
        {
            toolCalls ??= new List<RequiredToolCall>();

            return new SubmitToolApprovalDetails(toolCalls?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunError"/>. </summary>
        /// <param name="code"> The status for the error. </param>
        /// <param name="message"> The human-readable text associated with the error. </param>
        /// <returns> A new <see cref="Persistent.RunError"/> instance for mocking. </returns>
        public static RunError RunError(string code = null, string message = null)
        {
            return new RunError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.IncompleteRunDetails"/>. </summary>
        /// <param name="reason"> The reason why the run is incomplete. This indicates which specific token limit was reached during the run. </param>
        /// <returns> A new <see cref="Persistent.IncompleteRunDetails"/> instance for mocking. </returns>
        public static IncompleteRunDetails IncompleteRunDetails(IncompleteDetailsReason reason = default)
        {
            return new IncompleteRunDetails(reason, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunCompletionUsage"/>. </summary>
        /// <param name="completionTokens"> Number of completion tokens used over the course of the run. </param>
        /// <param name="promptTokens"> Number of prompt tokens used over the course of the run. </param>
        /// <param name="totalTokens"> Total number of tokens used (prompt + completion). </param>
        /// <returns> A new <see cref="Persistent.RunCompletionUsage"/> instance for mocking. </returns>
        public static RunCompletionUsage RunCompletionUsage(long completionTokens = default, long promptTokens = default, long totalTokens = default)
        {
            return new RunCompletionUsage(completionTokens, promptTokens, totalTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageIncompleteDetails"/>. </summary>
        /// <param name="reason"> The provided reason describing why the message was marked as incomplete. </param>
        /// <returns> A new <see cref="Persistent.MessageIncompleteDetails"/> instance for mocking. </returns>
        public static MessageIncompleteDetails MessageIncompleteDetails(MessageIncompleteDetailsReason reason = default)
        {
            return new MessageIncompleteDetails(reason, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageTextAnnotation"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="text"> The textual content associated with this text annotation item. </param>
        /// <returns> A new <see cref="Persistent.MessageTextAnnotation"/> instance for mocking. </returns>
        public static MessageTextAnnotation MessageTextAnnotation(string type = null, string text = null)
        {
            return new UnknownMessageTextAnnotation(type, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageTextUriCitationAnnotation"/>. </summary>
        /// <param name="text"> The textual content associated with this text annotation item. </param>
        /// <param name="uriCitation"> The details of the URL citation. </param>
        /// <param name="startIndex"> The first text index associated with this text annotation. </param>
        /// <param name="endIndex"> The last text index associated with this text annotation. </param>
        /// <returns> A new <see cref="Persistent.MessageTextUriCitationAnnotation"/> instance for mocking. </returns>
        public static MessageTextUriCitationAnnotation MessageTextUriCitationAnnotation(string text = null, MessageTextUriCitationDetails uriCitation = null, int? startIndex = null, int? endIndex = null)
        {
            return new MessageTextUriCitationAnnotation(
                "url_citation",
                text,
                serializedAdditionalRawData: null,
                uriCitation,
                startIndex,
                endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageTextUriCitationDetails"/>. </summary>
        /// <param name="uri"> The URL associated with this citation. </param>
        /// <param name="title"> The title of the URL. </param>
        /// <returns> A new <see cref="Persistent.MessageTextUriCitationDetails"/> instance for mocking. </returns>
        public static MessageTextUriCitationDetails MessageTextUriCitationDetails(string uri = null, string title = null)
        {
            return new MessageTextUriCitationDetails(uri, title, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.ToolApproval"/>. </summary>
        /// <param name="toolCallId"> The ID of the tool call being resolved, as provided in the tool calls of a required action from a run. </param>
        /// <param name="approve"> The approval boolean value to be submitted. </param>
        /// <param name="headers"> Headers to be attached to the approval. </param>
        /// <returns> A new <see cref="Persistent.ToolApproval"/> instance for mocking. </returns>
        public static ToolApproval ToolApproval(string toolCallId = null, bool approve = default, IDictionary<string, string> headers = null)
        {
            headers ??= new Dictionary<string, string>();

            return new ToolApproval(toolCallId, approve, headers, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepMessageCreationDetails"/>. </summary>
        /// <param name="messageCreation"> Information about the message creation associated with this run step. </param>
        /// <returns> A new <see cref="Persistent.RunStepMessageCreationDetails"/> instance for mocking. </returns>
        public static RunStepMessageCreationDetails RunStepMessageCreationDetails(RunStepMessageCreationReference messageCreation = null)
        {
            return new RunStepMessageCreationDetails(RunStepType.MessageCreation, serializedAdditionalRawData: null, messageCreation);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepMessageCreationReference"/>. </summary>
        /// <param name="messageId"> The ID of the message created by this run step. </param>
        /// <returns> A new <see cref="Persistent.RunStepMessageCreationReference"/> instance for mocking. </returns>
        public static RunStepMessageCreationReference RunStepMessageCreationReference(string messageId = null)
        {
            return new RunStepMessageCreationReference(messageId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepToolCallDetails"/>. </summary>
        /// <param name="toolCalls">
        /// A list of tool call details for this run step.
        /// Please note <see cref="Persistent.RunStepToolCall"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.RunStepAzureAISearchToolCall"/>, <see cref="Persistent.RunStepBingCustomSearchToolCall"/>, <see cref="Persistent.RunStepBingGroundingToolCall"/>, <see cref="Persistent.RunStepBrowserAutomationToolCall"/>, <see cref="Persistent.RunStepCodeInterpreterToolCall"/>, <see cref="Persistent.RunStepConnectedAgentToolCall"/>, <see cref="Persistent.RunStepDeepResearchToolCall"/>, <see cref="Persistent.RunStepMicrosoftFabricToolCall"/>, <see cref="Persistent.RunStepFileSearchToolCall"/>, <see cref="Persistent.RunStepFunctionToolCall"/>, <see cref="Persistent.RunStepMcpToolCall"/>, <see cref="Persistent.RunStepOpenAPIToolCall"/> and <see cref="Persistent.RunStepSharepointToolCall"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.RunStepToolCallDetails"/> instance for mocking. </returns>
        public static RunStepToolCallDetails RunStepToolCallDetails(IEnumerable<RunStepToolCall> toolCalls = null)
        {
            toolCalls ??= new List<RunStepToolCall>();

            return new RunStepToolCallDetails(RunStepType.ToolCalls, serializedAdditionalRawData: null, toolCalls?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepToolCall"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <returns> A new <see cref="Persistent.RunStepToolCall"/> instance for mocking. </returns>
        public static RunStepToolCall RunStepToolCall(string type = null, string id = null)
        {
            return new UnknownRunStepToolCall(type, id, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepCodeInterpreterLogOutput"/>. </summary>
        /// <param name="logs"> The serialized log output emitted by the code interpreter. </param>
        /// <returns> A new <see cref="Persistent.RunStepCodeInterpreterLogOutput"/> instance for mocking. </returns>
        public static RunStepCodeInterpreterLogOutput RunStepCodeInterpreterLogOutput(string logs = null)
        {
            return new RunStepCodeInterpreterLogOutput("logs", serializedAdditionalRawData: null, logs);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepCodeInterpreterImageOutput"/>. </summary>
        /// <param name="image"> Referential information for the image associated with this output. </param>
        /// <returns> A new <see cref="Persistent.RunStepCodeInterpreterImageOutput"/> instance for mocking. </returns>
        public static RunStepCodeInterpreterImageOutput RunStepCodeInterpreterImageOutput(RunStepCodeInterpreterImageReference image = null)
        {
            return new RunStepCodeInterpreterImageOutput("image", serializedAdditionalRawData: null, image);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepCodeInterpreterImageReference"/>. </summary>
        /// <param name="fileId"> The ID of the file associated with this image. </param>
        /// <returns> A new <see cref="Persistent.RunStepCodeInterpreterImageReference"/> instance for mocking. </returns>
        public static RunStepCodeInterpreterImageReference RunStepCodeInterpreterImageReference(string fileId = null)
        {
            return new RunStepCodeInterpreterImageReference(fileId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepFileSearchToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="fileSearch"> For now, this is always going to be an empty object. </param>
        /// <returns> A new <see cref="Persistent.RunStepFileSearchToolCall"/> instance for mocking. </returns>
        public static RunStepFileSearchToolCall RunStepFileSearchToolCall(string id = null, RunStepFileSearchToolCallResults fileSearch = null)
        {
            return new RunStepFileSearchToolCall("file_search", id, serializedAdditionalRawData: null, fileSearch);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepFileSearchToolCallResults"/>. </summary>
        /// <param name="rankingOptions"> Ranking options for file search. </param>
        /// <param name="results"> The array of a file search results. </param>
        /// <returns> A new <see cref="Persistent.RunStepFileSearchToolCallResults"/> instance for mocking. </returns>
        public static RunStepFileSearchToolCallResults RunStepFileSearchToolCallResults(FileSearchRankingOptions rankingOptions = null, IEnumerable<RunStepFileSearchToolCallResult> results = null)
        {
            results ??= new List<RunStepFileSearchToolCallResult>();

            return new RunStepFileSearchToolCallResults(rankingOptions, results?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepFileSearchToolCallResult"/>. </summary>
        /// <param name="fileId"> The ID of the file that result was found in. </param>
        /// <param name="fileName"> The name of the file that result was found in. </param>
        /// <param name="score"> The score of the result. All values must be a floating point number between 0 and 1. </param>
        /// <param name="content"> The content of the result that was found. The content is only included if requested via the include query parameter. </param>
        /// <returns> A new <see cref="Persistent.RunStepFileSearchToolCallResult"/> instance for mocking. </returns>
        public static RunStepFileSearchToolCallResult RunStepFileSearchToolCallResult(string fileId = null, string fileName = null, float score = default, IEnumerable<FileSearchToolCallContent> content = null)
        {
            content ??= new List<FileSearchToolCallContent>();

            return new RunStepFileSearchToolCallResult(fileId, fileName, score, content?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.FileSearchToolCallContent"/>. </summary>
        /// <param name="type"> The type of the content. </param>
        /// <param name="text"> The text content of the file. </param>
        /// <returns> A new <see cref="Persistent.FileSearchToolCallContent"/> instance for mocking. </returns>
        public static FileSearchToolCallContent FileSearchToolCallContent(FileSearchToolCallContentType type = default, string text = null)
        {
            return new FileSearchToolCallContent(type, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepBingGroundingToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="bingGrounding"> Reserved for future use. </param>
        /// <returns> A new <see cref="Persistent.RunStepBingGroundingToolCall"/> instance for mocking. </returns>
        public static RunStepBingGroundingToolCall RunStepBingGroundingToolCall(string id = null, IReadOnlyDictionary<string, string> bingGrounding = null)
        {
            bingGrounding ??= new Dictionary<string, string>();

            return new RunStepBingGroundingToolCall("bing_grounding", id, serializedAdditionalRawData: null, bingGrounding);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepAzureAISearchToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="azureAISearch"> Reserved for future use. </param>
        /// <returns> A new <see cref="Persistent.RunStepAzureAISearchToolCall"/> instance for mocking. </returns>
        public static RunStepAzureAISearchToolCall RunStepAzureAISearchToolCall(string id = null, IReadOnlyDictionary<string, string> azureAISearch = null)
        {
            azureAISearch ??= new Dictionary<string, string>();

            return new RunStepAzureAISearchToolCall("azure_ai_search", id, serializedAdditionalRawData: null, azureAISearch);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepBrowserAutomationToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="browserAutomation"> Details of the browser automation tool call. </param>
        /// <returns> A new <see cref="Persistent.RunStepBrowserAutomationToolCall"/> instance for mocking. </returns>
        public static RunStepBrowserAutomationToolCall RunStepBrowserAutomationToolCall(string id = null, BrowserAutomationToolCallDetails browserAutomation = null)
        {
            return new RunStepBrowserAutomationToolCall("browser_automation", id, serializedAdditionalRawData: null, browserAutomation);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.BrowserAutomationToolCallDetails"/>. </summary>
        /// <param name="input"> The input provided to the Browser Automation tool. </param>
        /// <param name="output"> The output returned by the Browser Automation tool. </param>
        /// <param name="steps"> The steps the Browser Automation tool executed. </param>
        /// <returns> A new <see cref="Persistent.BrowserAutomationToolCallDetails"/> instance for mocking. </returns>
        public static BrowserAutomationToolCallDetails BrowserAutomationToolCallDetails(string input = null, string output = null, IEnumerable<BrowserAutomationToolCallStep> steps = null)
        {
            steps ??= new List<BrowserAutomationToolCallStep>();

            return new BrowserAutomationToolCallDetails(input, output, steps?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.BrowserAutomationToolCallStep"/>. </summary>
        /// <param name="lastStepResult"> The result of the last step executed with the Browser. </param>
        /// <param name="currentState"> The current state of execution with the Browser. </param>
        /// <param name="nextStep"> The next step to execute with the Browser. </param>
        /// <returns> A new <see cref="Persistent.BrowserAutomationToolCallStep"/> instance for mocking. </returns>
        public static BrowserAutomationToolCallStep BrowserAutomationToolCallStep(string lastStepResult = null, string currentState = null, string nextStep = null)
        {
            return new BrowserAutomationToolCallStep(lastStepResult, currentState, nextStep, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepMcpToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="arguments"> Arguments to the MCP tool call, as provided by the model. Arguments are presented as a JSON document that should be validated and parsed for evaluation. </param>
        /// <param name="name"> Name of the function used on the MCP server. </param>
        /// <param name="output"> Output of the MCP tool call. </param>
        /// <param name="serverLabel"> The label for the MCP server. </param>
        /// <returns> A new <see cref="Persistent.RunStepMcpToolCall"/> instance for mocking. </returns>
        public static RunStepMcpToolCall RunStepMcpToolCall(string id = null, string arguments = null, string name = null, string output = null, string serverLabel = null)
        {
            return new RunStepMcpToolCall(
                "mcp",
                id,
                serializedAdditionalRawData: null,
                arguments,
                name,
                output,
                serverLabel);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepSharepointToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="sharePoint"> Reserved for future use. </param>
        /// <returns> A new <see cref="Persistent.RunStepSharepointToolCall"/> instance for mocking. </returns>
        public static RunStepSharepointToolCall RunStepSharepointToolCall(string id = null, IReadOnlyDictionary<string, string> sharePoint = null)
        {
            sharePoint ??= new Dictionary<string, string>();

            return new RunStepSharepointToolCall("sharepoint_grounding", id, serializedAdditionalRawData: null, sharePoint);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepMicrosoftFabricToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="microsoftFabric"> Reserved for future use. </param>
        /// <returns> A new <see cref="Persistent.RunStepMicrosoftFabricToolCall"/> instance for mocking. </returns>
        public static RunStepMicrosoftFabricToolCall RunStepMicrosoftFabricToolCall(string id = null, IReadOnlyDictionary<string, string> microsoftFabric = null)
        {
            microsoftFabric ??= new Dictionary<string, string>();

            return new RunStepMicrosoftFabricToolCall("fabric_dataagent", id, serializedAdditionalRawData: null, microsoftFabric);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepBingCustomSearchToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="bingCustomSearch"> Reserved for future use. </param>
        /// <returns> A new <see cref="Persistent.RunStepBingCustomSearchToolCall"/> instance for mocking. </returns>
        public static RunStepBingCustomSearchToolCall RunStepBingCustomSearchToolCall(string id = null, IReadOnlyDictionary<string, string> bingCustomSearch = null)
        {
            bingCustomSearch ??= new Dictionary<string, string>();

            return new RunStepBingCustomSearchToolCall("bing_custom_search", id, serializedAdditionalRawData: null, bingCustomSearch);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepOpenAPIToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="openAPI"> Reserved for future use. </param>
        /// <returns> A new <see cref="Persistent.RunStepOpenAPIToolCall"/> instance for mocking. </returns>
        public static RunStepOpenAPIToolCall RunStepOpenAPIToolCall(string id = null, IReadOnlyDictionary<string, string> openAPI = null)
        {
            openAPI ??= new Dictionary<string, string>();

            return new RunStepOpenAPIToolCall("openapi", id, serializedAdditionalRawData: null, openAPI);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeepResearchToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="deepResearch"> The detailed information about the automated browser tasks performed by the model. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeepResearchToolCall"/> instance for mocking. </returns>
        public static RunStepDeepResearchToolCall RunStepDeepResearchToolCall(string id = null, RunStepDeepResearchToolCallDetails deepResearch = null)
        {
            return new RunStepDeepResearchToolCall("deep_research", id, serializedAdditionalRawData: null, deepResearch);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeepResearchToolCallDetails"/>. </summary>
        /// <param name="input"> The input provided by the model to the deep research tool. </param>
        /// <param name="output"> The final output for the deep research tool. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeepResearchToolCallDetails"/> instance for mocking. </returns>
        public static RunStepDeepResearchToolCallDetails RunStepDeepResearchToolCallDetails(string input = null, string output = null)
        {
            return new RunStepDeepResearchToolCallDetails(input, output, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepConnectedAgentToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="connectedAgent"> The connected agent step information. </param>
        /// <returns> A new <see cref="Persistent.RunStepConnectedAgentToolCall"/> instance for mocking. </returns>
        public static RunStepConnectedAgentToolCall RunStepConnectedAgentToolCall(string id = null, RunStepConnectedAgent connectedAgent = null)
        {
            return new RunStepConnectedAgentToolCall("connected_agent", id, serializedAdditionalRawData: null, connectedAgent);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepConnectedAgent"/>. </summary>
        /// <param name="name"> The name of connected agent. </param>
        /// <param name="arguments"> The JSON serialized query to the connected agent. </param>
        /// <param name="output"> The tool output. </param>
        /// <param name="runId"> The run ID used by the connected agent. </param>
        /// <param name="threadId"> The thread ID used by the connected agent. </param>
        /// <param name="agentId"> The ID of a connected agent. </param>
        /// <returns> A new <see cref="Persistent.RunStepConnectedAgent"/> instance for mocking. </returns>
        public static RunStepConnectedAgent RunStepConnectedAgent(string name = null, string arguments = null, string output = null, string runId = null, string threadId = null, string agentId = null)
        {
            return new RunStepConnectedAgent(
                name,
                arguments,
                output,
                runId,
                threadId,
                agentId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepError"/>. </summary>
        /// <param name="code"> The error code for this error. </param>
        /// <param name="message"> The human-readable text associated with this error. </param>
        /// <returns> A new <see cref="Persistent.RunStepError"/> instance for mocking. </returns>
        public static RunStepError RunStepError(RunStepErrorCode code = default, string message = null)
        {
            return new RunStepError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepCompletionUsage"/>. </summary>
        /// <param name="completionTokens"> Number of completion tokens used over the course of the run step. </param>
        /// <param name="promptTokens"> Number of prompt tokens used over the course of the run step. </param>
        /// <param name="totalTokens"> Total number of tokens used (prompt + completion). </param>
        /// <returns> A new <see cref="Persistent.RunStepCompletionUsage"/> instance for mocking. </returns>
        public static RunStepCompletionUsage RunStepCompletionUsage(long completionTokens = default, long promptTokens = default, long totalTokens = default)
        {
            return new RunStepCompletionUsage(completionTokens, promptTokens, totalTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.PersistentAgentsVectorStore"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store`. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store was created. </param>
        /// <param name="name"> The name of the vector store. </param>
        /// <param name="usageBytes"> The total number of bytes used by the files in the vector store. </param>
        /// <param name="fileCounts"> Files count grouped by status processed or being processed by this vector store. </param>
        /// <param name="status"> The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use. </param>
        /// <param name="expiresAfter"> Details on when this vector store expires. </param>
        /// <param name="expiresAt"> The Unix timestamp (in seconds) for when the vector store will expire. </param>
        /// <param name="lastActiveAt"> The Unix timestamp (in seconds) for when the vector store was last active. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Persistent.PersistentAgentsVectorStore"/> instance for mocking. </returns>
        public static PersistentAgentsVectorStore PersistentAgentsVectorStore(string id = null, PersistentAgentsVectorStoreObject @object = default, DateTimeOffset createdAt = default, string name = null, int usageBytes = default, VectorStoreFileCount fileCounts = null, VectorStoreStatus status = default, VectorStoreExpirationPolicy expiresAfter = null, DateTimeOffset? expiresAt = null, DateTimeOffset? lastActiveAt = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new PersistentAgentsVectorStore(
                id,
                @object,
                createdAt,
                name,
                usageBytes,
                fileCounts,
                status,
                expiresAfter,
                expiresAt,
                lastActiveAt,
                metadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreFileCount"/>. </summary>
        /// <param name="inProgress"> The number of files that are currently being processed. </param>
        /// <param name="completed"> The number of files that have been successfully processed. </param>
        /// <param name="failed"> The number of files that have failed to process. </param>
        /// <param name="cancelled"> The number of files that were cancelled. </param>
        /// <param name="total"> The total number of files. </param>
        /// <returns> A new <see cref="Persistent.VectorStoreFileCount"/> instance for mocking. </returns>
        public static VectorStoreFileCount VectorStoreFileCount(int inProgress = default, int completed = default, int failed = default, int cancelled = default, int total = default)
        {
            return new VectorStoreFileCount(
                inProgress,
                completed,
                failed,
                cancelled,
                total,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreStaticChunkingStrategyRequest"/>. </summary>
        /// <param name="static"> The options for the static chunking strategy. </param>
        /// <returns> A new <see cref="Persistent.VectorStoreStaticChunkingStrategyRequest"/> instance for mocking. </returns>
        public static VectorStoreStaticChunkingStrategyRequest VectorStoreStaticChunkingStrategyRequest(VectorStoreStaticChunkingStrategyOptions @static = null)
        {
            return new VectorStoreStaticChunkingStrategyRequest(VectorStoreChunkingStrategyRequestType.Static, serializedAdditionalRawData: null, @static);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreFile"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store.file`. </param>
        /// <param name="usageBytes">
        /// The total vector store usage in bytes. Note that this may be different from the original file
        /// size.
        /// </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store file was created. </param>
        /// <param name="vectorStoreId"> The ID of the vector store that the file is attached to. </param>
        /// <param name="status"> The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use. </param>
        /// <param name="lastError"> The last error associated with this vector store file. Will be `null` if there are no errors. </param>
        /// <param name="chunkingStrategy">
        /// The strategy used to chunk the file.
        /// Please note <see cref="VectorStoreChunkingStrategyResponse"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VectorStoreAutoChunkingStrategyResponse"/> and <see cref="Persistent.VectorStoreStaticChunkingStrategyResponse"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.VectorStoreFile"/> instance for mocking. </returns>
        public static VectorStoreFile VectorStoreFile(string id = null, VectorStoreFileObject @object = default, int usageBytes = default, DateTimeOffset createdAt = default, string vectorStoreId = null, VectorStoreFileStatus status = default, VectorStoreFileError lastError = null, VectorStoreChunkingStrategyResponse chunkingStrategy = null)
        {
            return new VectorStoreFile(
                id,
                @object,
                usageBytes,
                createdAt,
                vectorStoreId,
                status,
                lastError,
                chunkingStrategy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreFileError"/>. </summary>
        /// <param name="code"> One of `server_error` or `rate_limit_exceeded`. </param>
        /// <param name="message"> A human-readable description of the error. </param>
        /// <returns> A new <see cref="Persistent.VectorStoreFileError"/> instance for mocking. </returns>
        public static VectorStoreFileError VectorStoreFileError(VectorStoreFileErrorCode code = default, string message = null)
        {
            return new VectorStoreFileError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreStaticChunkingStrategyResponse"/>. </summary>
        /// <param name="static"> The options for the static chunking strategy. </param>
        /// <returns> A new <see cref="Persistent.VectorStoreStaticChunkingStrategyResponse"/> instance for mocking. </returns>
        public static VectorStoreStaticChunkingStrategyResponse VectorStoreStaticChunkingStrategyResponse(VectorStoreStaticChunkingStrategyOptions @static = null)
        {
            return new VectorStoreStaticChunkingStrategyResponse(VectorStoreChunkingStrategyResponseType.Static, serializedAdditionalRawData: null, @static);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreFileBatch"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store.file_batch`. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store files batch was created. </param>
        /// <param name="vectorStoreId"> The ID of the vector store that the file is attached to. </param>
        /// <param name="status"> The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`. </param>
        /// <param name="fileCounts"> Files count grouped by status processed or being processed by this vector store. </param>
        /// <returns> A new <see cref="Persistent.VectorStoreFileBatch"/> instance for mocking. </returns>
        public static VectorStoreFileBatch VectorStoreFileBatch(string id = null, VectorStoreFileBatchObject @object = default, DateTimeOffset createdAt = default, string vectorStoreId = null, VectorStoreFileBatchStatus status = default, VectorStoreFileCount fileCounts = null)
        {
            return new VectorStoreFileBatch(
                id,
                @object,
                createdAt,
                vectorStoreId,
                status,
                fileCounts,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaChunk"/>. </summary>
        /// <param name="id"> The identifier of the message, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `thread.message.delta`. </param>
        /// <param name="delta"> The delta containing the fields that have changed on the Message. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaChunk"/> instance for mocking. </returns>
        public static MessageDeltaChunk MessageDeltaChunk(string id = null, MessageDeltaChunkObject @object = default, MessageDelta delta = null)
        {
            return new MessageDeltaChunk(id, @object, delta, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDelta"/>. </summary>
        /// <param name="role"> The entity that produced the message. </param>
        /// <param name="content">
        /// The content of the message as an array of text and/or images.
        /// Please note <see cref="Persistent.MessageDeltaContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.MessageDeltaImageFileContent"/> and <see cref="Persistent.MessageDeltaTextContent"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.MessageDelta"/> instance for mocking. </returns>
        public static MessageDelta MessageDelta(MessageRole role = default, IEnumerable<MessageDeltaContent> content = null)
        {
            content ??= new List<MessageDeltaContent>();

            return new MessageDelta(role, content?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaContent"/>. </summary>
        /// <param name="index"> The index of the content part of the message. </param>
        /// <param name="type"> The type of content for this content part. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaContent"/> instance for mocking. </returns>
        public static MessageDeltaContent MessageDeltaContent(int index = default, string type = null)
        {
            return new UnknownMessageDeltaContent(index, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaImageFileContent"/>. </summary>
        /// <param name="index"> The index of the content part of the message. </param>
        /// <param name="imageFile"> The image_file data. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaImageFileContent"/> instance for mocking. </returns>
        public static MessageDeltaImageFileContent MessageDeltaImageFileContent(int index = default, MessageDeltaImageFileContentObject imageFile = null)
        {
            return new MessageDeltaImageFileContent(index, "image_file", serializedAdditionalRawData: null, imageFile);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaImageFileContentObject"/>. </summary>
        /// <param name="fileId"> The file ID of the image in the message content. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaImageFileContentObject"/> instance for mocking. </returns>
        public static MessageDeltaImageFileContentObject MessageDeltaImageFileContentObject(string fileId = null)
        {
            return new MessageDeltaImageFileContentObject(fileId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextContent"/>. </summary>
        /// <param name="index"> The index of the content part of the message. </param>
        /// <param name="text"> The text content details. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextContent"/> instance for mocking. </returns>
        public static MessageDeltaTextContent MessageDeltaTextContent(int index = default, MessageDeltaTextContentObject text = null)
        {
            return new MessageDeltaTextContent(index, "text", serializedAdditionalRawData: null, text);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextContentObject"/>. </summary>
        /// <param name="value"> The data that makes up the text. </param>
        /// <param name="annotations">
        /// Annotations for the text.
        /// Please note <see cref="Persistent.MessageDeltaTextAnnotation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.MessageDeltaTextFileCitationAnnotation"/>, <see cref="Persistent.MessageDeltaTextFilePathAnnotation"/> and <see cref="Persistent.MessageDeltaTextUriCitationAnnotation"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextContentObject"/> instance for mocking. </returns>
        public static MessageDeltaTextContentObject MessageDeltaTextContentObject(string value = null, IEnumerable<MessageDeltaTextAnnotation> annotations = null)
        {
            annotations ??= new List<MessageDeltaTextAnnotation>();

            return new MessageDeltaTextContentObject(value, annotations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="type"> The type of the text content annotation. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextAnnotation MessageDeltaTextAnnotation(int index = default, string type = null)
        {
            return new UnknownMessageDeltaTextAnnotation(index, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextUriCitationAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="uriCitation"> The details of the URL citation. </param>
        /// <param name="startIndex"> The first text index associated with this text annotation. </param>
        /// <param name="endIndex"> The last text index associated with this text annotation. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextUriCitationAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextUriCitationAnnotation MessageDeltaTextUriCitationAnnotation(int index = default, MessageDeltaTextUriCitationDetails uriCitation = null, int? startIndex = null, int? endIndex = null)
        {
            return new MessageDeltaTextUriCitationAnnotation(
                index,
                "url_citation",
                serializedAdditionalRawData: null,
                uriCitation,
                startIndex,
                endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextUriCitationDetails"/>. </summary>
        /// <param name="uri"> The URL associated with this citation. </param>
        /// <param name="title"> The title of the URL. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextUriCitationDetails"/> instance for mocking. </returns>
        public static MessageDeltaTextUriCitationDetails MessageDeltaTextUriCitationDetails(string uri = null, string title = null)
        {
            return new MessageDeltaTextUriCitationDetails(uri, title, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextFileCitationAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="fileCitation"> The file citation information. </param>
        /// <param name="text"> The text in the message content that needs to be replaced. </param>
        /// <param name="startIndex"> The start index of this annotation in the content text. </param>
        /// <param name="endIndex"> The end index of this annotation in the content text. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextFileCitationAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextFileCitationAnnotation MessageDeltaTextFileCitationAnnotation(int index = default, MessageDeltaTextFileCitationAnnotationObject fileCitation = null, string text = null, int? startIndex = null, int? endIndex = null)
        {
            return new MessageDeltaTextFileCitationAnnotation(
                index,
                "file_citation",
                serializedAdditionalRawData: null,
                fileCitation,
                text,
                startIndex,
                endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextFileCitationAnnotationObject"/>. </summary>
        /// <param name="fileId"> The ID of the specific file the citation is from. </param>
        /// <param name="quote"> The specific quote in the cited file. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextFileCitationAnnotationObject"/> instance for mocking. </returns>
        public static MessageDeltaTextFileCitationAnnotationObject MessageDeltaTextFileCitationAnnotationObject(string fileId = null, string quote = null)
        {
            return new MessageDeltaTextFileCitationAnnotationObject(fileId, quote, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextFilePathAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="filePath"> The file path information. </param>
        /// <param name="startIndex"> The start index of this annotation in the content text. </param>
        /// <param name="endIndex"> The end index of this annotation in the content text. </param>
        /// <param name="text"> The text in the message content that needs to be replaced. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextFilePathAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextFilePathAnnotation MessageDeltaTextFilePathAnnotation(int index = default, MessageDeltaTextFilePathAnnotationObject filePath = null, int? startIndex = null, int? endIndex = null, string text = null)
        {
            return new MessageDeltaTextFilePathAnnotation(
                index,
                "file_path",
                serializedAdditionalRawData: null,
                filePath,
                startIndex,
                endIndex,
                text);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextFilePathAnnotationObject"/>. </summary>
        /// <param name="fileId"> The file ID for the annotation. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextFilePathAnnotationObject"/> instance for mocking. </returns>
        public static MessageDeltaTextFilePathAnnotationObject MessageDeltaTextFilePathAnnotationObject(string fileId = null)
        {
            return new MessageDeltaTextFilePathAnnotationObject(fileId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaChunk"/>. </summary>
        /// <param name="id"> The identifier of the run step, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `thread.run.step.delta`. </param>
        /// <param name="delta"> The delta containing the fields that have changed on the run step. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaChunk"/> instance for mocking. </returns>
        public static RunStepDeltaChunk RunStepDeltaChunk(string id = null, RunStepDeltaChunkObject @object = default, RunStepDelta delta = null)
        {
            return new RunStepDeltaChunk(id, @object, delta, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDelta"/>. </summary>
        /// <param name="stepDetails">
        /// The details of the run step.
        /// Please note <see cref="RunStepDeltaDetail"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.RunStepDeltaMCPObject"/>, <see cref="Persistent.RunStepDeltaMessageCreation"/>, <see cref="Persistent.RunStepDeltaOpenAPIObject"/> and <see cref="Persistent.RunStepDeltaToolCallObject"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.RunStepDelta"/> instance for mocking. </returns>
        public static RunStepDelta RunStepDelta(RunStepDeltaDetail stepDetails = null)
        {
            return new RunStepDelta(stepDetails, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaMessageCreation"/>. </summary>
        /// <param name="messageCreation"> The message creation data. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaMessageCreation"/> instance for mocking. </returns>
        public static RunStepDeltaMessageCreation RunStepDeltaMessageCreation(RunStepDeltaMessageCreationObject messageCreation = null)
        {
            return new RunStepDeltaMessageCreation("message_creation", serializedAdditionalRawData: null, messageCreation);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaMessageCreationObject"/>. </summary>
        /// <param name="messageId"> The ID of the newly-created message. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaMessageCreationObject"/> instance for mocking. </returns>
        public static RunStepDeltaMessageCreationObject RunStepDeltaMessageCreationObject(string messageId = null)
        {
            return new RunStepDeltaMessageCreationObject(messageId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaToolCallObject"/>. </summary>
        /// <param name="toolCalls">
        /// The collection of tool calls for the tool call detail item.
        /// Please note <see cref="Persistent.RunStepDeltaToolCall"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.RunStepDeltaAzureAISearchToolCall"/>, <see cref="Persistent.RunStepDeltaBingGroundingToolCall"/>, <see cref="Persistent.RunStepDeltaCodeInterpreterToolCall"/>, <see cref="Persistent.RunStepDeltaConnectedAgentToolCall"/>, <see cref="Persistent.RunStepDeltaDeepResearchToolCall"/>, <see cref="Persistent.RunStepDeltaFileSearchToolCall"/>, <see cref="Persistent.RunStepDeltaFunctionToolCall"/>, <see cref="Persistent.RunStepDeltaMcpToolCall"/> and <see cref="Persistent.RunStepDeltaOpenAPIToolCall"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaToolCallObject"/> instance for mocking. </returns>
        public static RunStepDeltaToolCallObject RunStepDeltaToolCallObject(IEnumerable<RunStepDeltaToolCall> toolCalls = null)
        {
            toolCalls ??= new List<RunStepDeltaToolCall>();

            return new RunStepDeltaToolCallObject("tool_calls", serializedAdditionalRawData: null, toolCalls?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="type"> The type of the tool call detail item in a streaming run step's details. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaToolCall RunStepDeltaToolCall(int index = default, string id = null, string type = null)
        {
            return new UnknownRunStepDeltaToolCall(index, id, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaMcpToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="arguments"> The arguments for MCP call. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaMcpToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaMcpToolCall RunStepDeltaMcpToolCall(int index = default, string id = null, string arguments = null)
        {
            return new RunStepDeltaMcpToolCall(index, id, "mcp", serializedAdditionalRawData: null, arguments);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaOpenAPIToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="openAPI"> Reserved for future use. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaOpenAPIToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaOpenAPIToolCall RunStepDeltaOpenAPIToolCall(int index = default, string id = null, IReadOnlyDictionary<string, string> openAPI = null)
        {
            openAPI ??= new Dictionary<string, string>();

            return new RunStepDeltaOpenAPIToolCall(index, id, "openapi", serializedAdditionalRawData: null, openAPI);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaConnectedAgentToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="connectedAgent"> The collection of tool calls for the tool call detail item. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaConnectedAgentToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaConnectedAgentToolCall RunStepDeltaConnectedAgentToolCall(int index = default, string id = null, RunStepConnectedAgent connectedAgent = null)
        {
            return new RunStepDeltaConnectedAgentToolCall(index, id, "connected_agent", serializedAdditionalRawData: null, connectedAgent);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaFunctionToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="function"> The function data for the tool call. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaFunctionToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaFunctionToolCall RunStepDeltaFunctionToolCall(int index = default, string id = null, RunStepDeltaFunction function = null)
        {
            return new RunStepDeltaFunctionToolCall(index, id, "function", serializedAdditionalRawData: null, function);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaFunction"/>. </summary>
        /// <param name="name"> The name of the function. </param>
        /// <param name="arguments"> The arguments passed to the function as input. </param>
        /// <param name="output"> The output of the function, null if outputs have not yet been submitted. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaFunction"/> instance for mocking. </returns>
        public static RunStepDeltaFunction RunStepDeltaFunction(string name = null, string arguments = null, string output = null)
        {
            return new RunStepDeltaFunction(name, arguments, output, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaFileSearchToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="fileSearch"> Reserved for future use. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaFileSearchToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaFileSearchToolCall RunStepDeltaFileSearchToolCall(int index = default, string id = null, RunStepFileSearchToolCallResults fileSearch = null)
        {
            return new RunStepDeltaFileSearchToolCall(index, id, "file_search", serializedAdditionalRawData: null, fileSearch);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="codeInterpreter"> The Code Interpreter data for the tool call. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterToolCall RunStepDeltaCodeInterpreterToolCall(int index = default, string id = null, RunStepDeltaCodeInterpreterDetailItemObject codeInterpreter = null)
        {
            return new RunStepDeltaCodeInterpreterToolCall(index, id, "code_interpreter", serializedAdditionalRawData: null, codeInterpreter);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterDetailItemObject"/>. </summary>
        /// <param name="input"> The input into the Code Interpreter tool call. </param>
        /// <param name="outputs">
        /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more
        /// items, including text (`logs`) or images (`image`). Each of these are represented by a
        /// different object type.
        /// Please note <see cref="Persistent.RunStepDeltaCodeInterpreterOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.RunStepDeltaCodeInterpreterImageOutput"/> and <see cref="Persistent.RunStepDeltaCodeInterpreterLogOutput"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterDetailItemObject"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterDetailItemObject RunStepDeltaCodeInterpreterDetailItemObject(string input = null, IEnumerable<RunStepDeltaCodeInterpreterOutput> outputs = null)
        {
            outputs ??= new List<RunStepDeltaCodeInterpreterOutput>();

            return new RunStepDeltaCodeInterpreterDetailItemObject(input, outputs?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterOutput"/>. </summary>
        /// <param name="index"> The index of the output in the streaming run step tool call's Code Interpreter outputs array. </param>
        /// <param name="type"> The type of the streaming run step tool call's Code Interpreter output. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterOutput"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterOutput RunStepDeltaCodeInterpreterOutput(int index = default, string type = null)
        {
            return new UnknownRunStepDeltaCodeInterpreterOutput(index, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterLogOutput"/>. </summary>
        /// <param name="index"> The index of the output in the streaming run step tool call's Code Interpreter outputs array. </param>
        /// <param name="logs"> The text output from the Code Interpreter tool call. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterLogOutput"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterLogOutput RunStepDeltaCodeInterpreterLogOutput(int index = default, string logs = null)
        {
            return new RunStepDeltaCodeInterpreterLogOutput(index, "logs", serializedAdditionalRawData: null, logs);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterImageOutput"/>. </summary>
        /// <param name="index"> The index of the output in the streaming run step tool call's Code Interpreter outputs array. </param>
        /// <param name="image"> The image data for the Code Interpreter tool call output. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterImageOutput"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterImageOutput RunStepDeltaCodeInterpreterImageOutput(int index = default, RunStepDeltaCodeInterpreterImageOutputObject image = null)
        {
            return new RunStepDeltaCodeInterpreterImageOutput(index, "image", serializedAdditionalRawData: null, image);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterImageOutputObject"/>. </summary>
        /// <param name="fileId"> The file ID for the image. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterImageOutputObject"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterImageOutputObject RunStepDeltaCodeInterpreterImageOutputObject(string fileId = null)
        {
            return new RunStepDeltaCodeInterpreterImageOutputObject(fileId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaBingGroundingToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="bingGrounding"> Reserved for future use. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaBingGroundingToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaBingGroundingToolCall RunStepDeltaBingGroundingToolCall(int index = default, string id = null, IReadOnlyDictionary<string, string> bingGrounding = null)
        {
            bingGrounding ??= new Dictionary<string, string>();

            return new RunStepDeltaBingGroundingToolCall(index, id, "bing_grounding", serializedAdditionalRawData: null, bingGrounding);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaDeepResearchToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="deepResearch"> The details of DeepResearch tool call. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaDeepResearchToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaDeepResearchToolCall RunStepDeltaDeepResearchToolCall(int index = default, string id = null, RunStepDeepResearchToolCallDetails deepResearch = null)
        {
            return new RunStepDeltaDeepResearchToolCall(index, id, "deep_research", serializedAdditionalRawData: null, deepResearch);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaAzureAISearchToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="azureAISearch"> Reserved for future use. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaAzureAISearchToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaAzureAISearchToolCall RunStepDeltaAzureAISearchToolCall(int index = default, string id = null, IReadOnlyDictionary<string, string> azureAISearch = null)
        {
            azureAISearch ??= new Dictionary<string, string>();

            return new RunStepDeltaAzureAISearchToolCall(index, id, "azure_ai_search", serializedAdditionalRawData: null, azureAISearch);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaMCPObject"/>. </summary>
        /// <param name="toolCalls"> The collection of tool calls for the tool call detail item. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaMCPObject"/> instance for mocking. </returns>
        public static RunStepDeltaMCPObject RunStepDeltaMCPObject(IEnumerable<RunStepDeltaMcpToolCall> toolCalls = null)
        {
            toolCalls ??= new List<RunStepDeltaMcpToolCall>();

            return new RunStepDeltaMCPObject("mcp", serializedAdditionalRawData: null, toolCalls?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaOpenAPIObject"/>. </summary>
        /// <param name="toolCalls"> The collection of tool calls for the tool call detail item. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaOpenAPIObject"/> instance for mocking. </returns>
        public static RunStepDeltaOpenAPIObject RunStepDeltaOpenAPIObject(IEnumerable<RunStepDeltaOpenAPIToolCall> toolCalls = null)
        {
            toolCalls ??= new List<RunStepDeltaOpenAPIToolCall>();

            return new RunStepDeltaOpenAPIObject("openapi", serializedAdditionalRawData: null, toolCalls?.ToList());
        }
    }
}
