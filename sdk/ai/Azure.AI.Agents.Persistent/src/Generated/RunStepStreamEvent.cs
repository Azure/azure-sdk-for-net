// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> Run step operation related streaming events. </summary>
    public readonly partial struct RunStepStreamEvent : IEquatable<RunStepStreamEvent>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RunStepStreamEvent"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RunStepStreamEvent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatedValue = "thread.run.step.created";
        private const string InProgressValue = "thread.run.step.in_progress";
        private const string DeltaValue = "thread.run.step.delta";
        private const string CompletedValue = "thread.run.step.completed";
        private const string FailedValue = "thread.run.step.failed";
        private const string CancelledValue = "thread.run.step.cancelled";
        private const string ExpiredValue = "thread.run.step.expired";

        /// <summary> Event sent when a new thread run step is created. The data of this event is of type RunStep. </summary>
        public static RunStepStreamEvent Created { get; } = new RunStepStreamEvent(CreatedValue);
        /// <summary> Event sent when a run step moves to `in_progress` status. The data of this event is of type RunStep. </summary>
        public static RunStepStreamEvent InProgress { get; } = new RunStepStreamEvent(InProgressValue);
        /// <summary> Event sent when a run step is being streamed. The data of this event is of type RunStepDeltaChunk. </summary>
        public static RunStepStreamEvent Delta { get; } = new RunStepStreamEvent(DeltaValue);
        /// <summary> Event sent when a run step is completed. The data of this event is of type RunStep. </summary>
        public static RunStepStreamEvent Completed { get; } = new RunStepStreamEvent(CompletedValue);
        /// <summary> Event sent when a run step fails. The data of this event is of type RunStep. </summary>
        public static RunStepStreamEvent Failed { get; } = new RunStepStreamEvent(FailedValue);
        /// <summary> Event sent when a run step is cancelled. The data of this event is of type RunStep. </summary>
        public static RunStepStreamEvent Cancelled { get; } = new RunStepStreamEvent(CancelledValue);
        /// <summary> Event sent when a run step is expired. The data of this event is of type RunStep. </summary>
        public static RunStepStreamEvent Expired { get; } = new RunStepStreamEvent(ExpiredValue);
        /// <summary> Determines if two <see cref="RunStepStreamEvent"/> values are the same. </summary>
        public static bool operator ==(RunStepStreamEvent left, RunStepStreamEvent right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RunStepStreamEvent"/> values are not the same. </summary>
        public static bool operator !=(RunStepStreamEvent left, RunStepStreamEvent right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RunStepStreamEvent"/>. </summary>
        public static implicit operator RunStepStreamEvent(string value) => new RunStepStreamEvent(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RunStepStreamEvent other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RunStepStreamEvent other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
