// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> The data provided during a tool outputs submission to resolve pending tool calls and allow the model to continue. </summary>
    public partial class ToolApproval
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ToolApproval"/>. </summary>
        /// <param name="toolCallId"> The ID of the tool call being resolved, as provided in the tool calls of a required action from a run. </param>
        /// <param name="approve"> The approval boolean value to be submitted. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="toolCallId"/> is null. </exception>
        public ToolApproval(string toolCallId, bool approve)
        {
            Argument.AssertNotNull(toolCallId, nameof(toolCallId));

            ToolCallId = toolCallId;
            Approve = approve;
            Headers = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="ToolApproval"/>. </summary>
        /// <param name="toolCallId"> The ID of the tool call being resolved, as provided in the tool calls of a required action from a run. </param>
        /// <param name="approve"> The approval boolean value to be submitted. </param>
        /// <param name="headers"> Headers to be attached to the approval. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ToolApproval(string toolCallId, bool approve, IDictionary<string, string> headers, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ToolCallId = toolCallId;
            Approve = approve;
            Headers = headers;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ToolApproval"/> for deserialization. </summary>
        internal ToolApproval()
        {
        }

        /// <summary> The ID of the tool call being resolved, as provided in the tool calls of a required action from a run. </summary>
        public string ToolCallId { get; }
        /// <summary> The approval boolean value to be submitted. </summary>
        public bool Approve { get; }
        /// <summary> Headers to be attached to the approval. </summary>
        public IDictionary<string, string> Headers { get; }
    }
}
