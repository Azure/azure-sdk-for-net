// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> The extendable list of MCP approval requirements. </summary>
    public readonly partial struct MCPApprovalRequirement : IEquatable<MCPApprovalRequirement>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MCPApprovalRequirement"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MCPApprovalRequirement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NeverValue = "never";
        private const string AlwaysValue = "always";

        /// <summary> The approval is not required for any of the tools. </summary>
        public static MCPApprovalRequirement Never { get; } = new MCPApprovalRequirement(NeverValue);
        /// <summary> The approval is required for all tools. </summary>
        public static MCPApprovalRequirement Always { get; } = new MCPApprovalRequirement(AlwaysValue);
        /// <summary> Determines if two <see cref="MCPApprovalRequirement"/> values are the same. </summary>
        public static bool operator ==(MCPApprovalRequirement left, MCPApprovalRequirement right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MCPApprovalRequirement"/> values are not the same. </summary>
        public static bool operator !=(MCPApprovalRequirement left, MCPApprovalRequirement right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MCPApprovalRequirement"/>. </summary>
        public static implicit operator MCPApprovalRequirement(string value) => new MCPApprovalRequirement(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MCPApprovalRequirement other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MCPApprovalRequirement other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
