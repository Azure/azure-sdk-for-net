// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> The parameters used for activity function definition. </summary>
    public partial class ActivityFunctionParameters
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ActivityFunctionParameters"/>. </summary>
        /// <param name="properties"> The dictionary of function arguments. </param>
        /// <param name="required"> The list of the required parameters. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="properties"/> or <paramref name="required"/> is null. </exception>
        internal ActivityFunctionParameters(IReadOnlyDictionary<string, FunctionArgument> properties, IEnumerable<string> required)
        {
            Argument.AssertNotNull(properties, nameof(properties));
            Argument.AssertNotNull(required, nameof(required));

            Properties = properties;
            Required = required.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ActivityFunctionParameters"/>. </summary>
        /// <param name="type"> The parameter type, it is always object. </param>
        /// <param name="properties"> The dictionary of function arguments. </param>
        /// <param name="required"> The list of the required parameters. </param>
        /// <param name="additionalProperties"> If true the function has additional parameters. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ActivityFunctionParameters(ActivityFunctionParametersType type, IReadOnlyDictionary<string, FunctionArgument> properties, IReadOnlyList<string> required, bool? additionalProperties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            Properties = properties;
            Required = required;
            AdditionalProperties = additionalProperties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ActivityFunctionParameters"/> for deserialization. </summary>
        internal ActivityFunctionParameters()
        {
        }

        /// <summary> The parameter type, it is always object. </summary>
        public ActivityFunctionParametersType Type { get; } = ActivityFunctionParametersType.Object;

        /// <summary> The dictionary of function arguments. </summary>
        public IReadOnlyDictionary<string, FunctionArgument> Properties { get; }
        /// <summary> The list of the required parameters. </summary>
        public IReadOnlyList<string> Required { get; }
        /// <summary> If true the function has additional parameters. </summary>
        public bool? AdditionalProperties { get; }
    }
}
