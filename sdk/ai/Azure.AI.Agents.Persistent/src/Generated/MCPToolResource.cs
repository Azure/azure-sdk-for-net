// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> A set of resources that are used by the `mcp` tool. </summary>
    public partial class MCPToolResource
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MCPToolResource"/>. </summary>
        /// <param name="serverLabel"> The label for the MCP server. </param>
        /// <param name="headers"> The headers for the MCP server updates. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverLabel"/> or <paramref name="headers"/> is null. </exception>
        public MCPToolResource(string serverLabel, IDictionary<string, string> headers)
        {
            Argument.AssertNotNull(serverLabel, nameof(serverLabel));
            Argument.AssertNotNull(headers, nameof(headers));

            ServerLabel = serverLabel;
            Headers = headers;
        }

        /// <summary> Initializes a new instance of <see cref="MCPToolResource"/>. </summary>
        /// <param name="serverLabel"> The label for the MCP server. </param>
        /// <param name="headers"> The headers for the MCP server updates. </param>
        /// <param name="requireApproval"> Does MCP server require approval. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MCPToolResource(string serverLabel, IDictionary<string, string> headers, BinaryData requireApproval, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ServerLabel = serverLabel;
            Headers = headers;
            RequireApproval = requireApproval;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MCPToolResource"/> for deserialization. </summary>
        internal MCPToolResource()
        {
        }

        /// <summary> The label for the MCP server. </summary>
        public string ServerLabel { get; set; }
        /// <summary> The headers for the MCP server updates. </summary>
        public IDictionary<string, string> Headers { get; }
        /// <summary>
        /// Does MCP server require approval
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="string"/></description>
        /// </item>
        /// <item>
        /// <description>"never"</description>
        /// </item>
        /// <item>
        /// <description>"always"</description>
        /// </item>
        /// <item>
        /// <description><see cref="MCPApprovalPerTool"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData RequireApproval { get; set; }
    }
}
