// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Agents.Persistent.Samples
{
    public partial class Samples_PersistentAgentsAdministrationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_CreateAgentMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "jyrgfmhrrrngtonrmo",
                name = "zyldigcd",
                description = "dhjkjzixwadczfduxpodfrdhgz",
                instructions = "haeralumiezrrsaqzmbkkjcfxpqqog",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul"
            },
                        data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"jkrrjfupyxehwacylflmx"
            },
                        vector_stores = new object[]
            {
new
{
name = "bftl",
configuration = new
{
data_sources = new object[]
{
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "zkqk",
index_name = "yvxhjyiomlffkuboqokcojfd",
query_type = "simple",
top_k = 27,
filter = "jjbewpsjmygox",
index_asset_id = "iwfmzmxzh",
}
            },
                    },
                },
                temperature = 11F,
                top_p = 19F,
                metadata = new
                {
                    key8068 = "ebsxjdqlsifbuarpdcrwysf",
                },
            });
            Response response = client.CreateAgent(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_CreateAgentMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "jyrgfmhrrrngtonrmo",
                name = "zyldigcd",
                description = "dhjkjzixwadczfduxpodfrdhgz",
                instructions = "haeralumiezrrsaqzmbkkjcfxpqqog",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul"
            },
                        data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"jkrrjfupyxehwacylflmx"
            },
                        vector_stores = new object[]
            {
new
{
name = "bftl",
configuration = new
{
data_sources = new object[]
{
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "zkqk",
index_name = "yvxhjyiomlffkuboqokcojfd",
query_type = "simple",
top_k = 27,
filter = "jjbewpsjmygox",
index_asset_id = "iwfmzmxzh",
}
            },
                    },
                },
                temperature = 11F,
                top_p = 19F,
                metadata = new
                {
                    key8068 = "ebsxjdqlsifbuarpdcrwysf",
                },
            });
            Response response = await client.CreateAgentAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_CreateAgentMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = client.CreateAgent("jyrgfmhrrrngtonrmo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_CreateAgentMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = await client.CreateAgentAsync("jyrgfmhrrrngtonrmo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_CreateAgentMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "jyrgfmhrrrngtonrmo",
            });
            Response response = client.CreateAgent(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_CreateAgentMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "jyrgfmhrrrngtonrmo",
            });
            Response response = await client.CreateAgentAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_CreateAgentMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = client.CreateAgent("jyrgfmhrrrngtonrmo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_CreateAgentMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = await client.CreateAgentAsync("jyrgfmhrrrngtonrmo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_GetAgentMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response response = client.GetAgent("rzrtnsfncjtctybnxemiugavvf", (RequestContext)null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_GetAgentMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response response = await client.GetAgentAsync("rzrtnsfncjtctybnxemiugavvf", (RequestContext)null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_GetAgentMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = client.GetAgent("rzrtnsfncjtctybnxemiugavvf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_GetAgentMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = await client.GetAgentAsync("rzrtnsfncjtctybnxemiugavvf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_GetAgentMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response response = client.GetAgent("rzrtnsfncjtctybnxemiugavvf", (RequestContext)null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_GetAgentMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response response = await client.GetAgentAsync("rzrtnsfncjtctybnxemiugavvf", (RequestContext)null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_GetAgentMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = client.GetAgent("rzrtnsfncjtctybnxemiugavvf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_GetAgentMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = await client.GetAgentAsync("rzrtnsfncjtctybnxemiugavvf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_UpdateAgentMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "ovsqsbcptyb",
                name = "twuqmjwybuqaolohuuhwwgnmfxpwgj",
                description = "iosozem",
                instructions = "wvkhggyrkzvhx",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul"
            },
                        data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"jkrrjfupyxehwacylflmx"
            },
                        vector_stores = new object[]
            {
new
{
name = "bftl",
configuration = new
{
data_sources = new object[]
{
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "zkqk",
index_name = "yvxhjyiomlffkuboqokcojfd",
query_type = "simple",
top_k = 27,
filter = "jjbewpsjmygox",
index_asset_id = "iwfmzmxzh",
}
            },
                    },
                },
                temperature = 26F,
                top_p = 14F,
                metadata = new
                {
                    key11 = "mpbdrolmnthhjmjq",
                },
            });
            Response response = client.UpdateAgent("nibpceztzjbmfzoas", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_UpdateAgentMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                model = "ovsqsbcptyb",
                name = "twuqmjwybuqaolohuuhwwgnmfxpwgj",
                description = "iosozem",
                instructions = "wvkhggyrkzvhx",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul"
            },
                        data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"jkrrjfupyxehwacylflmx"
            },
                        vector_stores = new object[]
            {
new
{
name = "bftl",
configuration = new
{
data_sources = new object[]
{
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "zkqk",
index_name = "yvxhjyiomlffkuboqokcojfd",
query_type = "simple",
top_k = 27,
filter = "jjbewpsjmygox",
index_asset_id = "iwfmzmxzh",
}
            },
                    },
                },
                temperature = 26F,
                top_p = 14F,
                metadata = new
                {
                    key11 = "mpbdrolmnthhjmjq",
                },
            });
            Response response = await client.UpdateAgentAsync("nibpceztzjbmfzoas", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_UpdateAgentMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = client.UpdateAgent("nibpceztzjbmfzoas");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_UpdateAgentMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = await client.UpdateAgentAsync("nibpceztzjbmfzoas");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_UpdateAgentMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateAgent("nibpceztzjbmfzoas", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_UpdateAgentMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAgentAsync("nibpceztzjbmfzoas", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_UpdateAgentMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = client.UpdateAgent("nibpceztzjbmfzoas");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_UpdateAgentMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            Response<PersistentAgent> response = await client.UpdateAgentAsync("nibpceztzjbmfzoas");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgents_ListAgentsMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            foreach (BinaryData item in client.GetAgents(23, "asc", "ybuapkj", "yicprwkzcjbeirwuznafws", (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("model").ToString());
                Console.WriteLine(result.GetProperty("instructions").ToString());
                Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("tool_resources").ToString());
                Console.WriteLine(result.GetProperty("temperature").ToString());
                Console.WriteLine(result.GetProperty("top_p").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgents_ListAgentsMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAgentsAsync(23, "asc", "ybuapkj", "yicprwkzcjbeirwuznafws", (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("model").ToString());
                Console.WriteLine(result.GetProperty("instructions").ToString());
                Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("tool_resources").ToString());
                Console.WriteLine(result.GetProperty("temperature").ToString());
                Console.WriteLine(result.GetProperty("top_p").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgents_ListAgentsMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            foreach (PersistentAgent item in client.GetAgents())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgents_ListAgentsMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            await foreach (PersistentAgent item in client.GetAgentsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgents_ListAgentsMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            foreach (BinaryData item in client.GetAgents((int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("model").ToString());
                Console.WriteLine(result.GetProperty("instructions").ToString());
                Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("tool_resources").ToString());
                Console.WriteLine(result.GetProperty("temperature").ToString());
                Console.WriteLine(result.GetProperty("top_p").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgents_ListAgentsMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAgentsAsync((int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("model").ToString());
                Console.WriteLine(result.GetProperty("instructions").ToString());
                Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("tool_resources").ToString());
                Console.WriteLine(result.GetProperty("temperature").ToString());
                Console.WriteLine(result.GetProperty("top_p").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgents_ListAgentsMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            foreach (PersistentAgent item in client.GetAgents())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgents_ListAgentsMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PersistentAgentsAdministrationClient client = new PersistentAgentsAdministrationClient(endpoint, credential);

            await foreach (PersistentAgent item in client.GetAgentsAsync())
            {
            }
        }
    }
}
