// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Agents.Persistent.Samples
{
    public partial class Samples_Threads
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_CreateThread_ThreadsCreateThreadMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
attachments = new object[]
{
new
{
file_id = "uslxhectlaptpkjcxnjzhkzprso",
data_source = new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
tools = Array.Empty<object>(),
}
},
metadata = new
{
key3153 = "qn",
},
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul"
            },
                        data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"jkrrjfupyxehwacylflmx"
            },
                        vector_stores = new object[]
            {
new
{
name = "bftl",
configuration = new
{
data_sources = new object[]
{
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "zkqk",
index_name = "yvxhjyiomlffkuboqokcojfd",
query_type = "simple",
top_k = 27,
filter = "jjbewpsjmygox",
index_asset_id = "iwfmzmxzh",
}
            },
                    },
                },
                metadata = new
                {
                    key3592 = "ceowgmecukwwpkdpcolnctahhocsk",
                },
            });
            Response response = client.CreateThread(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_CreateThread_ThreadsCreateThreadMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
attachments = new object[]
{
new
{
file_id = "uslxhectlaptpkjcxnjzhkzprso",
data_source = new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
tools = Array.Empty<object>(),
}
},
metadata = new
{
key3153 = "qn",
},
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul"
            },
                        data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"jkrrjfupyxehwacylflmx"
            },
                        vector_stores = new object[]
            {
new
{
name = "bftl",
configuration = new
{
data_sources = new object[]
{
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "zkqk",
index_name = "yvxhjyiomlffkuboqokcojfd",
query_type = "simple",
top_k = 27,
filter = "jjbewpsjmygox",
index_asset_id = "iwfmzmxzh",
}
            },
                    },
                },
                metadata = new
                {
                    key3592 = "ceowgmecukwwpkdpcolnctahhocsk",
                },
            });
            Response response = await client.CreateThreadAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_CreateThread_ThreadsCreateThreadMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response<PersistentAgentThread> response = client.CreateThread();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_CreateThread_ThreadsCreateThreadMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response<PersistentAgentThread> response = await client.CreateThreadAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_GetThread_ThreadsGetThreadMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response response = client.GetThread("hxzrocmui", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_GetThread_ThreadsGetThreadMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response response = await client.GetThreadAsync("hxzrocmui", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_GetThread_ThreadsGetThreadMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response<PersistentAgentThread> response = client.GetThread("hxzrocmui");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_GetThread_ThreadsGetThreadMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response<PersistentAgentThread> response = await client.GetThreadAsync("hxzrocmui");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_GetThread_ThreadsGetThreadMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response response = client.GetThread("rhseczbsktxawm", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_GetThread_ThreadsGetThreadMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response response = await client.GetThreadAsync("rhseczbsktxawm", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_GetThread_ThreadsGetThreadMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response<PersistentAgentThread> response = client.GetThread("rhseczbsktxawm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_GetThread_ThreadsGetThreadMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response<PersistentAgentThread> response = await client.GetThreadAsync("rhseczbsktxawm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_UpdateThread_ThreadsUpdateThreadMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            using RequestContent content = RequestContent.Create(new
            {
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul"
            },
                        data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"jkrrjfupyxehwacylflmx"
            },
                        vector_stores = new object[]
            {
new
{
name = "bftl",
configuration = new
{
data_sources = new object[]
{
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "zkqk",
index_name = "yvxhjyiomlffkuboqokcojfd",
query_type = "simple",
top_k = 27,
filter = "jjbewpsjmygox",
index_asset_id = "iwfmzmxzh",
}
            },
                    },
                },
                metadata = new
                {
                    key519 = "wfrlgjrbfxnwuz",
                },
            });
            Response response = client.UpdateThread("rsiw", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_UpdateThread_ThreadsUpdateThreadMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            using RequestContent content = RequestContent.Create(new
            {
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul",
"nfbbvmtttxtmwzmjtkzhgul"
            },
                        data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"jkrrjfupyxehwacylflmx"
            },
                        vector_stores = new object[]
            {
new
{
name = "bftl",
configuration = new
{
data_sources = new object[]
{
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
},
},
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "zkqk",
index_name = "yvxhjyiomlffkuboqokcojfd",
query_type = "simple",
top_k = 27,
filter = "jjbewpsjmygox",
index_asset_id = "iwfmzmxzh",
}
            },
                    },
                },
                metadata = new
                {
                    key519 = "wfrlgjrbfxnwuz",
                },
            });
            Response response = await client.UpdateThreadAsync("rsiw", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_UpdateThread_ThreadsUpdateThreadMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response<PersistentAgentThread> response = client.UpdateThread("rsiw");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_UpdateThread_ThreadsUpdateThreadMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response<PersistentAgentThread> response = await client.UpdateThreadAsync("rsiw");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_UpdateThread_ThreadsUpdateThreadMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateThread("rsiw", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_UpdateThread_ThreadsUpdateThreadMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateThreadAsync("rsiw", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_UpdateThread_ThreadsUpdateThreadMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response<PersistentAgentThread> response = client.UpdateThread("rsiw");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_UpdateThread_ThreadsUpdateThreadMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            Response<PersistentAgentThread> response = await client.UpdateThreadAsync("rsiw");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_GetThreads_ThreadsListThreadsMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            foreach (BinaryData item in client.GetThreads(13, "asc", "qwsovpslduftmfinaxtskq", "ycnypgacaospvdmaffiwipymykd", (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("tool_resources").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_GetThreads_ThreadsListThreadsMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            await foreach (BinaryData item in client.GetThreadsAsync(13, "asc", "qwsovpslduftmfinaxtskq", "ycnypgacaospvdmaffiwipymykd", (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("tool_resources").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_GetThreads_ThreadsListThreadsMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            foreach (PersistentAgentThread item in client.GetThreads())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_GetThreads_ThreadsListThreadsMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            await foreach (PersistentAgentThread item in client.GetThreadsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_GetThreads_ThreadsListThreadsMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            foreach (BinaryData item in client.GetThreads((int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("tool_resources").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_GetThreads_ThreadsListThreadsMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            await foreach (BinaryData item in client.GetThreadsAsync((int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("tool_resources").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Threads_GetThreads_ThreadsListThreadsMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            foreach (PersistentAgentThread item in client.GetThreads())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Threads_GetThreads_ThreadsListThreadsMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Threads client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadsClient();

            await foreach (PersistentAgentThread item in client.GetThreadsAsync())
            {
            }
        }
    }
}
