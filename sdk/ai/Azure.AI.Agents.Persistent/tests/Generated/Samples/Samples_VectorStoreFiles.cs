// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Agents.Persistent.Samples
{
    public partial class Samples_VectorStoreFiles
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoreFiles_CreateVectorStoreFile_VectorStoreFilesCreateVectorStoreFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "emdzaopxo",
                data_source = new
                {
                    uri = "soctjzrqyjyxixlqr",
                    type = "uri_asset",
                },
            });
            Response response = client.CreateVectorStoreFile("kox", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoreFiles_CreateVectorStoreFile_VectorStoreFilesCreateVectorStoreFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "emdzaopxo",
                data_source = new
                {
                    uri = "soctjzrqyjyxixlqr",
                    type = "uri_asset",
                },
            });
            Response response = await client.CreateVectorStoreFileAsync("kox", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoreFiles_CreateVectorStoreFile_VectorStoreFilesCreateVectorStoreFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            Response<VectorStoreFile> response = client.CreateVectorStoreFile("kox");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoreFiles_CreateVectorStoreFile_VectorStoreFilesCreateVectorStoreFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            Response<VectorStoreFile> response = await client.CreateVectorStoreFileAsync("kox");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoreFiles_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            Response response = client.GetVectorStoreFile("bds", "qusinxkarhcskvxntuym", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoreFiles_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            Response response = await client.GetVectorStoreFileAsync("bds", "qusinxkarhcskvxntuym", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoreFiles_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            Response<VectorStoreFile> response = client.GetVectorStoreFile("bds", "qusinxkarhcskvxntuym");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoreFiles_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("bds", "qusinxkarhcskvxntuym");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoreFiles_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            Response response = client.GetVectorStoreFile("fakyvuniwxszpqxxcovnohhacypzp", "sar", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoreFiles_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            Response response = await client.GetVectorStoreFileAsync("fakyvuniwxszpqxxcovnohhacypzp", "sar", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoreFiles_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            Response<VectorStoreFile> response = client.GetVectorStoreFile("fakyvuniwxszpqxxcovnohhacypzp", "sar");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoreFiles_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("fakyvuniwxszpqxxcovnohhacypzp", "sar");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoreFiles_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            foreach (BinaryData item in client.GetVectorStoreFiles("nuppye", "in_progress", 8, "asc", "cayfrop", "rdxomcqockbejgfxd", (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoreFiles_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            await foreach (BinaryData item in client.GetVectorStoreFilesAsync("nuppye", "in_progress", 8, "asc", "cayfrop", "rdxomcqockbejgfxd", (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoreFiles_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            foreach (VectorStoreFile item in client.GetVectorStoreFiles("nuppye"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoreFiles_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            await foreach (VectorStoreFile item in client.GetVectorStoreFilesAsync("nuppye"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoreFiles_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            foreach (BinaryData item in client.GetVectorStoreFiles("rijuypqar", (string)null, (int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoreFiles_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            await foreach (BinaryData item in client.GetVectorStoreFilesAsync("rijuypqar", (string)null, (int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoreFiles_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            foreach (VectorStoreFile item in client.GetVectorStoreFiles("rijuypqar"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoreFiles_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoreFiles client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoreFilesClient();

            await foreach (VectorStoreFile item in client.GetVectorStoreFilesAsync("rijuypqar"))
            {
            }
        }
    }
}
