// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Agents.Persistent.Samples
{
    public partial class Samples_ThreadRuns
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_CreateRun_RunsCreateRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "jsgtmtrsdyptblawced",
                model = "yefdnxmqfpqutszahxptiqgatxohu",
                instructions = "jdhepydeilwuqxwgxliiiekqdbt",
                additional_instructions = "oyacdunpwfbtz",
                additional_messages = new object[]
            {
new
{
role = "user",
attachments = new object[]
{
new
{
file_id = "uslxhectlaptpkjcxnjzhkzprso",
data_source = new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
tools = Array.Empty<object>(),
}
},
metadata = new
{
key3153 = "qn",
},
}
            },
                tools = Array.Empty<object>(),
                stream = true,
                temperature = 8F,
                top_p = 3F,
                max_prompt_tokens = 21,
                max_completion_tokens = 12,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 6,
                },
                parallel_tool_calls = true,
                metadata = new
                {
                    key5117 = "vfjqhklfxpyyojenxqnitzynwpqt",
                },
            });
            Response response = client.CreateRun("hhkihlfdkkrjn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_CreateRun_RunsCreateRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "jsgtmtrsdyptblawced",
                model = "yefdnxmqfpqutszahxptiqgatxohu",
                instructions = "jdhepydeilwuqxwgxliiiekqdbt",
                additional_instructions = "oyacdunpwfbtz",
                additional_messages = new object[]
            {
new
{
role = "user",
attachments = new object[]
{
new
{
file_id = "uslxhectlaptpkjcxnjzhkzprso",
data_source = new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
tools = Array.Empty<object>(),
}
},
metadata = new
{
key3153 = "qn",
},
}
            },
                tools = Array.Empty<object>(),
                stream = true,
                temperature = 8F,
                top_p = 3F,
                max_prompt_tokens = 21,
                max_completion_tokens = 12,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 6,
                },
                parallel_tool_calls = true,
                metadata = new
                {
                    key5117 = "vfjqhklfxpyyojenxqnitzynwpqt",
                },
            });
            Response response = await client.CreateRunAsync("hhkihlfdkkrjn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_CreateRun_RunsCreateRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response<ThreadRun> response = client.CreateRun("hhkihlfdkkrjn", "jsgtmtrsdyptblawced");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_CreateRun_RunsCreateRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response<ThreadRun> response = await client.CreateRunAsync("hhkihlfdkkrjn", "jsgtmtrsdyptblawced");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_GetRun_RunsGetRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response response = client.GetRun("sqccjmfw", "acsobiqvtzctqgmfilzbouk", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_GetRun_RunsGetRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response response = await client.GetRunAsync("sqccjmfw", "acsobiqvtzctqgmfilzbouk", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_GetRun_RunsGetRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response<ThreadRun> response = client.GetRun("sqccjmfw", "acsobiqvtzctqgmfilzbouk");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_GetRun_RunsGetRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response<ThreadRun> response = await client.GetRunAsync("sqccjmfw", "acsobiqvtzctqgmfilzbouk");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_UpdateRun_RunsUpdateRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key5657 = "pzozpdyzydhspttzavjorh",
                },
            });
            Response response = client.UpdateRun("wnookprnxkufoddul", "aifrevvhqlpbxsdkflwkzpdlyewggr", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_UpdateRun_RunsUpdateRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key5657 = "pzozpdyzydhspttzavjorh",
                },
            });
            Response response = await client.UpdateRunAsync("wnookprnxkufoddul", "aifrevvhqlpbxsdkflwkzpdlyewggr", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_UpdateRun_RunsUpdateRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response<ThreadRun> response = client.UpdateRun("wnookprnxkufoddul", "aifrevvhqlpbxsdkflwkzpdlyewggr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_UpdateRun_RunsUpdateRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response<ThreadRun> response = await client.UpdateRunAsync("wnookprnxkufoddul", "aifrevvhqlpbxsdkflwkzpdlyewggr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_SubmitToolOutputsToRun_RunsSubmitToolOutputsToRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new
{
tool_call_id = "jccizgl",
output = "tfpajqwuaghahhyzmn",
}
            },
                stream = true,
            });
            Response response = client.SubmitToolOutputsToRun("fponkaqg", "qt", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_SubmitToolOutputsToRun_RunsSubmitToolOutputsToRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new
{
tool_call_id = "jccizgl",
output = "tfpajqwuaghahhyzmn",
}
            },
                stream = true,
            });
            Response response = await client.SubmitToolOutputsToRunAsync("fponkaqg", "qt", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_SubmitToolOutputsToRun_RunsSubmitToolOutputsToRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response response = client.SubmitToolOutputsToRun("fponkaqg", "qt", new ToolOutput[]
            {
                new ToolOutput
                {
                ToolCallId = "jccizgl",
                Output = "tfpajqwuaghahhyzmn",
                }
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_SubmitToolOutputsToRun_RunsSubmitToolOutputsToRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response response = await client.SubmitToolOutputsToRunAsync("fponkaqg", "qt", new ToolOutput[]
            {
                new ToolOutput
                {
                ToolCallId = "jccizgl",
                Output = "tfpajqwuaghahhyzmn",
                }
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_CancelRun_RunsCancelRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response response = client.CancelRun("cfgrrkaqlomzywojd", "dgpclan", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_CancelRun_RunsCancelRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response response = await client.CancelRunAsync("cfgrrkaqlomzywojd", "dgpclan", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_CancelRun_RunsCancelRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response<ThreadRun> response = client.CancelRun("cfgrrkaqlomzywojd", "dgpclan");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_CancelRun_RunsCancelRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            Response<ThreadRun> response = await client.CancelRunAsync("cfgrrkaqlomzywojd", "dgpclan");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_GetRuns_RunsListRunsMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            foreach (BinaryData item in client.GetRuns("luhcnx", 29, "asc", "lbxjqlfasgdfb", "ukgtkdgvuzzjlnjjdxotjvgw", (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("thread_id").ToString());
                Console.WriteLine(result.GetProperty("assistant_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("model").ToString());
                Console.WriteLine(result.GetProperty("instructions").ToString());
                Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("expires_at").ToString());
                Console.WriteLine(result.GetProperty("started_at").ToString());
                Console.WriteLine(result.GetProperty("completed_at").ToString());
                Console.WriteLine(result.GetProperty("cancelled_at").ToString());
                Console.WriteLine(result.GetProperty("failed_at").ToString());
                Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
                Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
                Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
                Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("tool_choice").ToString());
                Console.WriteLine(result.GetProperty("response_format").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_GetRuns_RunsListRunsMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            await foreach (BinaryData item in client.GetRunsAsync("luhcnx", 29, "asc", "lbxjqlfasgdfb", "ukgtkdgvuzzjlnjjdxotjvgw", (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("thread_id").ToString());
                Console.WriteLine(result.GetProperty("assistant_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("model").ToString());
                Console.WriteLine(result.GetProperty("instructions").ToString());
                Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("expires_at").ToString());
                Console.WriteLine(result.GetProperty("started_at").ToString());
                Console.WriteLine(result.GetProperty("completed_at").ToString());
                Console.WriteLine(result.GetProperty("cancelled_at").ToString());
                Console.WriteLine(result.GetProperty("failed_at").ToString());
                Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
                Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
                Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
                Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("tool_choice").ToString());
                Console.WriteLine(result.GetProperty("response_format").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("parallel_tool_calls").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Runs_GetRuns_RunsListRunsMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            foreach (ThreadRun item in client.GetRuns("luhcnx"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Runs_GetRuns_RunsListRunsMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ThreadRuns client = new PersistentAgentsAdministrationClient(endpoint, credential).GetThreadRunsClient();

            await foreach (ThreadRun item in client.GetRunsAsync("luhcnx"))
            {
            }
        }
    }
}
