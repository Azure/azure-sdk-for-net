<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateAsync(Evaluation,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key4462"] = new EvaluatorConfiguration("bodhxfmbqquu")
    {
        InitParams = { },
        DataMapping =
        {
            ["key6077"] = "rkegahkqoagtfoxuxizgo"
        },
    }
})
{
    Id = "qfkteoypwndeirixziosai",
    DisplayName = "lresoznoqbpwvsummatfyc",
    Description = "dfydblbzvilyvhdtqo",
    Tags =
    {
        ["key9950"] = "umaulvau"
    },
    Properties =
    {
        ["key6705"] = "eooztvyhcibkecr"
    },
};
Response<Evaluation> response = await client.CreateAsync(evaluation);
]]></code>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>());
Response<Evaluation> response = await client.CreateAsync(evaluation);
]]></code></example>
    </member>
    <member name="Create(Evaluation,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key4462"] = new EvaluatorConfiguration("bodhxfmbqquu")
    {
        InitParams = { },
        DataMapping =
        {
            ["key6077"] = "rkegahkqoagtfoxuxizgo"
        },
    }
})
{
    Id = "qfkteoypwndeirixziosai",
    DisplayName = "lresoznoqbpwvsummatfyc",
    Description = "dfydblbzvilyvhdtqo",
    Tags =
    {
        ["key9950"] = "umaulvau"
    },
    Properties =
    {
        ["key6705"] = "eooztvyhcibkecr"
    },
};
Response<Evaluation> response = client.Create(evaluation);
]]></code>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>());
Response<Evaluation> response = client.Create(evaluation);
]]></code></example>
    </member>
    <member name="CreateAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    id = "qfkteoypwndeirixziosai",
    displayName = "lresoznoqbpwvsummatfyc",
    description = "dfydblbzvilyvhdtqo",
    systemData = new object(),
    tags = new
    {
        key9950 = "umaulvau",
    },
    properties = new
    {
        key6705 = "eooztvyhcibkecr",
    },
    evaluators = new
    {
        key4462 = new
        {
            id = "bodhxfmbqquu",
            initParams = new object(),
            dataMapping = new
            {
                key6077 = "rkegahkqoagtfoxuxizgo",
            },
        },
    },
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    evaluators = new object(),
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="Create(RequestContent,RequestContext)">
      <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    id = "qfkteoypwndeirixziosai",
    displayName = "lresoznoqbpwvsummatfyc",
    description = "dfydblbzvilyvhdtqo",
    systemData = new object(),
    tags = new
    {
        key9950 = "umaulvau",
    },
    properties = new
    {
        key6705 = "eooztvyhcibkecr",
    },
    evaluators = new
    {
        key4462 = new
        {
            id = "bodhxfmbqquu",
            initParams = new object(),
            dataMapping = new
            {
                key6077 = "rkegahkqoagtfoxuxizgo",
            },
        },
    },
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    evaluators = new object(),
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="UpdateAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    tags = new
    {
        key6951 = "mirtkcesgent",
    },
    displayName = "zkystmqhvncvxnxrhahhulbui",
    description = "vl",
});
Response response = await client.UpdateAsync("8y", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code>
This sample shows how to call UpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateAsync("k_2M_E1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="Update(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Update and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    tags = new
    {
        key6951 = "mirtkcesgent",
    },
    displayName = "zkystmqhvncvxnxrhahhulbui",
    description = "vl",
});
Response response = client.Update("8y", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code>
This sample shows how to call Update and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.Update("k_2M_E1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetEvaluationAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetEvaluationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<Evaluation> response = await client.GetEvaluationAsync("93-");
]]></code>
This sample shows how to call GetEvaluationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<Evaluation> response = await client.GetEvaluationAsync("0_0");
]]></code></example>
    </member>
    <member name="GetEvaluation(string,CancellationToken)">
      <example>
This sample shows how to call GetEvaluation.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<Evaluation> response = client.GetEvaluation("93-");
]]></code>
This sample shows how to call GetEvaluation.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<Evaluation> response = client.GetEvaluation("0_0");
]]></code></example>
    </member>
    <member name="GetEvaluationAsync(string,RequestContext)">
      <example>
This sample shows how to call GetEvaluationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetEvaluationAsync("93-", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code>
This sample shows how to call GetEvaluationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetEvaluationAsync("0_0", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetEvaluation(string,RequestContext)">
      <example>
This sample shows how to call GetEvaluation and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetEvaluation("93-", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code>
This sample shows how to call GetEvaluation and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetEvaluation("0_0", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="CreateScheduleAsync(EvaluationSchedule,CancellationToken)">
      <example>
This sample shows how to call CreateScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

EvaluationSchedule body = new EvaluationSchedule(new AppInsightsConfiguration("<resourceId>", "<query>", "<serviceName>"), new Dictionary<string, EvaluatorConfiguration>
{
    ["key"] = new EvaluatorConfiguration("<id>")
}, new SamplingStrategy(123.45F));
Response<EvaluationSchedule> response = await client.CreateScheduleAsync(body);
]]></code>
This sample shows how to call CreateScheduleAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

EvaluationSchedule body = new EvaluationSchedule(new AppInsightsConfiguration("<resourceId>", "<query>", "<serviceName>"), new Dictionary<string, EvaluatorConfiguration>
{
    ["key"] = new EvaluatorConfiguration("<id>")
    {
        InitParams =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        DataMapping =
        {
            ["key"] = "<dataMapping>"
        },
    }
}, new SamplingStrategy(123.45F))
{
    Id = "<id>",
    DisplayName = "<displayName>",
    Description = "<description>",
    Tags =
    {
        ["key"] = "<tags>"
    },
    Properties =
    {
        ["key"] = "<properties>"
    },
    Recurrence = new Recurrence(Frequency.Month, 1234, new RecurrenceSchedule(new int[] { 1234 }, new int[] { 1234 }, new WeekDays[] { WeekDays.Monday }, new int[] { 1234 })),
    CronExpression = "<cronExpression>",
};
Response<EvaluationSchedule> response = await client.CreateScheduleAsync(body);
]]></code></example>
    </member>
    <member name="CreateSchedule(EvaluationSchedule,CancellationToken)">
      <example>
This sample shows how to call CreateSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

EvaluationSchedule body = new EvaluationSchedule(new AppInsightsConfiguration("<resourceId>", "<query>", "<serviceName>"), new Dictionary<string, EvaluatorConfiguration>
{
    ["key"] = new EvaluatorConfiguration("<id>")
}, new SamplingStrategy(123.45F));
Response<EvaluationSchedule> response = client.CreateSchedule(body);
]]></code>
This sample shows how to call CreateSchedule with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

EvaluationSchedule body = new EvaluationSchedule(new AppInsightsConfiguration("<resourceId>", "<query>", "<serviceName>"), new Dictionary<string, EvaluatorConfiguration>
{
    ["key"] = new EvaluatorConfiguration("<id>")
    {
        InitParams =
        {
            ["key"] = BinaryData.FromObjectAsJson(new object())
        },
        DataMapping =
        {
            ["key"] = "<dataMapping>"
        },
    }
}, new SamplingStrategy(123.45F))
{
    Id = "<id>",
    DisplayName = "<displayName>",
    Description = "<description>",
    Tags =
    {
        ["key"] = "<tags>"
    },
    Properties =
    {
        ["key"] = "<properties>"
    },
    Recurrence = new Recurrence(Frequency.Month, 1234, new RecurrenceSchedule(new int[] { 1234 }, new int[] { 1234 }, new WeekDays[] { WeekDays.Monday }, new int[] { 1234 })),
    CronExpression = "<cronExpression>",
};
Response<EvaluationSchedule> response = client.CreateSchedule(body);
]]></code></example>
    </member>
    <member name="CreateScheduleAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateScheduleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    data = new
    {
        resourceId = "<resourceId>",
        query = "<query>",
        serviceName = "<serviceName>",
        type = "app_insights",
    },
    evaluators = new
    {
        key = new
        {
            id = "<id>",
        },
    },
    samplingStrategy = new
    {
        rate = 123.45F,
    },
});
Response response = await client.CreateScheduleAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code>
This sample shows how to call CreateScheduleAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    id = "<id>",
    data = new
    {
        resourceId = "<resourceId>",
        query = "<query>",
        serviceName = "<serviceName>",
        type = "app_insights",
    },
    displayName = "<displayName>",
    description = "<description>",
    tags = new
    {
        key = "<tags>",
    },
    properties = new
    {
        key = "<properties>",
    },
    evaluators = new
    {
        key = new
        {
            id = "<id>",
            initParams = new
            {
                key = new object(),
            },
            dataMapping = new
            {
                key = "<dataMapping>",
            },
        },
    },
    recurrence = new
    {
        frequency = "Month",
        interval = 1234,
        schedule = new
        {
            hours = new object[]
            {
                1234
            },
            minutes = new object[]
            {
                1234
            },
            weekDays = new object[]
            {
                "Monday"
            },
            monthDays = new object[]
            {
                1234
            },
        },
    },
    cronExpression = "<cronExpression>",
    samplingStrategy = new
    {
        rate = 123.45F,
    },
});
Response response = await client.CreateScheduleAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
Console.WriteLine(result.GetProperty("cronExpression").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="CreateSchedule(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateSchedule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    data = new
    {
        resourceId = "<resourceId>",
        query = "<query>",
        serviceName = "<serviceName>",
        type = "app_insights",
    },
    evaluators = new
    {
        key = new
        {
            id = "<id>",
        },
    },
    samplingStrategy = new
    {
        rate = 123.45F,
    },
});
Response response = client.CreateSchedule(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code>
This sample shows how to call CreateSchedule with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    id = "<id>",
    data = new
    {
        resourceId = "<resourceId>",
        query = "<query>",
        serviceName = "<serviceName>",
        type = "app_insights",
    },
    displayName = "<displayName>",
    description = "<description>",
    tags = new
    {
        key = "<tags>",
    },
    properties = new
    {
        key = "<properties>",
    },
    evaluators = new
    {
        key = new
        {
            id = "<id>",
            initParams = new
            {
                key = new object(),
            },
            dataMapping = new
            {
                key = "<dataMapping>",
            },
        },
    },
    recurrence = new
    {
        frequency = "Month",
        interval = 1234,
        schedule = new
        {
            hours = new object[]
            {
                1234
            },
            minutes = new object[]
            {
                1234
            },
            weekDays = new object[]
            {
                "Monday"
            },
            monthDays = new object[]
            {
                1234
            },
        },
    },
    cronExpression = "<cronExpression>",
    samplingStrategy = new
    {
        rate = 123.45F,
    },
});
Response response = client.CreateSchedule(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
Console.WriteLine(result.GetProperty("cronExpression").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="GetScheduleAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<EvaluationSchedule> response = await client.GetScheduleAsync("<id>");
]]></code>
This sample shows how to call GetScheduleAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<EvaluationSchedule> response = await client.GetScheduleAsync("<id>");
]]></code></example>
    </member>
    <member name="GetSchedule(string,CancellationToken)">
      <example>
This sample shows how to call GetSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<EvaluationSchedule> response = client.GetSchedule("<id>");
]]></code>
This sample shows how to call GetSchedule with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<EvaluationSchedule> response = client.GetSchedule("<id>");
]]></code></example>
    </member>
    <member name="GetScheduleAsync(string,RequestContext)">
      <example>
This sample shows how to call GetScheduleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetScheduleAsync("<id>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code>
This sample shows how to call GetScheduleAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetScheduleAsync("<id>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
Console.WriteLine(result.GetProperty("cronExpression").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="GetSchedule(string,RequestContext)">
      <example>
This sample shows how to call GetSchedule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetSchedule("<id>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code>
This sample shows how to call GetSchedule with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetSchedule("<id>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
Console.WriteLine(result.GetProperty("cronExpression").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="DeleteScheduleAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteScheduleAsync("<id>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteScheduleAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteScheduleAsync("<id>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteSchedule(string,RequestContext)">
      <example>
This sample shows how to call DeleteSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteSchedule("<id>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteSchedule with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteSchedule("<id>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetEvaluationsAsync(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetEvaluationsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (Evaluation item in client.GetEvaluationsAsync())
{
}
]]></code>
This sample shows how to call GetEvaluationsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (Evaluation item in client.GetEvaluationsAsync())
{
}
]]></code></example>
    </member>
    <member name="GetEvaluations(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetEvaluations.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (Evaluation item in client.GetEvaluations())
{
}
]]></code>
This sample shows how to call GetEvaluations.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (Evaluation item in client.GetEvaluations())
{
}
]]></code></example>
    </member>
    <member name="GetEvaluationsAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetEvaluationsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetEvaluationsAsync(null, 20, 9, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code>
This sample shows how to call GetEvaluationsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetEvaluationsAsync(null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code></example>
    </member>
    <member name="GetEvaluations(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetEvaluations and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetEvaluations(null, 20, 9, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code>
This sample shows how to call GetEvaluations and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetEvaluations(null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code></example>
    </member>
    <member name="GetSchedulesAsync(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSchedulesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (EvaluationSchedule item in client.GetSchedulesAsync())
{
}
]]></code>
This sample shows how to call GetSchedulesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (EvaluationSchedule item in client.GetSchedulesAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetSchedules(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSchedules.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (EvaluationSchedule item in client.GetSchedules())
{
}
]]></code>
This sample shows how to call GetSchedules with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (EvaluationSchedule item in client.GetSchedules(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetSchedulesAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSchedulesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetSchedulesAsync(null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
}
]]></code>
This sample shows how to call GetSchedulesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetSchedulesAsync(1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
    Console.WriteLine(result.GetProperty("cronExpression").ToString());
    Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
}
]]></code></example>
    </member>
    <member name="GetSchedules(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSchedules and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetSchedules(null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
}
]]></code>
This sample shows how to call GetSchedules with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetSchedules(1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
    Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
    Console.WriteLine(result.GetProperty("cronExpression").ToString());
    Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
}
]]></code></example>
    </member>
    <member name="GetScheduleEvaluationsAsync(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetScheduleEvaluationsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (Evaluation item in client.GetScheduleEvaluationsAsync("<id>"))
{
}
]]></code>
This sample shows how to call GetScheduleEvaluationsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (Evaluation item in client.GetScheduleEvaluationsAsync("<id>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetScheduleEvaluations(string,int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetScheduleEvaluations.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (Evaluation item in client.GetScheduleEvaluations("<id>"))
{
}
]]></code>
This sample shows how to call GetScheduleEvaluations with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (Evaluation item in client.GetScheduleEvaluations("<id>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetScheduleEvaluationsAsync(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetScheduleEvaluationsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetScheduleEvaluationsAsync("<id>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code>
This sample shows how to call GetScheduleEvaluationsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetScheduleEvaluationsAsync("<id>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="GetScheduleEvaluations(string,int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetScheduleEvaluations and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetScheduleEvaluations("<id>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code>
This sample shows how to call GetScheduleEvaluations with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetScheduleEvaluations("<id>", 1234, 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>