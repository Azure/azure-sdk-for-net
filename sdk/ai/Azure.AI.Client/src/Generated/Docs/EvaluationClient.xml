<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetEvaluationAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetEvaluationAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

Response<Evaluation> response = await client.GetEvaluationAsync("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$");
]]></code></example>
    </member>
    <member name="GetEvaluation(string,CancellationToken)">
      <example>
This sample shows how to call GetEvaluation.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

Response<Evaluation> response = client.GetEvaluation("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$");
]]></code></example>
    </member>
    <member name="GetEvaluationAsync(string,RequestContext)">
      <example>
This sample shows how to call GetEvaluationAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetEvaluationAsync("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetEvaluation(string,RequestContext)">
      <example>
This sample shows how to call GetEvaluation and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

Response response = client.GetEvaluation("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="CreateAsync(Evaluation,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "yasufofyvvvrxyuhr");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key9653"] = new EvaluatorConfiguration("tocrsevtgwfevzkawsihymxun")
    {
        InitParams = { },
        DataMapping =
        {
            ["key7843"] = "iu"
        },
    }
})
{
    DisplayName = "ylirqymkfsrfvovglzgvguegajnu",
    Description = "wqtdvmxxcy",
    Tags =
    {
        ["key7128"] = "ndxwpinzrqbdgopaiiohe"
    },
    Properties =
    {
        ["key7217"] = "ihwrrrkaopcxcmdajlmvnbjpfomb"
    },
};
Response<Evaluation> response = await client.CreateAsync(evaluation);
]]></code></example>
    </member>
    <member name="Create(Evaluation,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "yasufofyvvvrxyuhr");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key9653"] = new EvaluatorConfiguration("tocrsevtgwfevzkawsihymxun")
    {
        InitParams = { },
        DataMapping =
        {
            ["key7843"] = "iu"
        },
    }
})
{
    DisplayName = "ylirqymkfsrfvovglzgvguegajnu",
    Description = "wqtdvmxxcy",
    Tags =
    {
        ["key7128"] = "ndxwpinzrqbdgopaiiohe"
    },
    Properties =
    {
        ["key7217"] = "ihwrrrkaopcxcmdajlmvnbjpfomb"
    },
};
Response<Evaluation> response = client.Create(evaluation);
]]></code></example>
    </member>
    <member name="CreateAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "yasufofyvvvrxyuhr");

using RequestContent content = RequestContent.Create(new
{
    displayName = "ylirqymkfsrfvovglzgvguegajnu",
    description = "wqtdvmxxcy",
    systemData = new object(),
    tags = new
    {
        key7128 = "ndxwpinzrqbdgopaiiohe",
    },
    properties = new
    {
        key7217 = "ihwrrrkaopcxcmdajlmvnbjpfomb",
    },
    evaluators = new
    {
        key9653 = new
        {
            id = "tocrsevtgwfevzkawsihymxun",
            initParams = new object(),
            dataMapping = new
            {
                key7843 = "iu",
            },
        },
    },
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="Create(RequestContent,RequestContext)">
      <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "yasufofyvvvrxyuhr");

using RequestContent content = RequestContent.Create(new
{
    displayName = "ylirqymkfsrfvovglzgvguegajnu",
    description = "wqtdvmxxcy",
    systemData = new object(),
    tags = new
    {
        key7128 = "ndxwpinzrqbdgopaiiohe",
    },
    properties = new
    {
        key7217 = "ihwrrrkaopcxcmdajlmvnbjpfomb",
    },
    evaluators = new
    {
        key9653 = new
        {
            id = "tocrsevtgwfevzkawsihymxun",
            initParams = new object(),
            dataMapping = new
            {
                key7843 = "iu",
            },
        },
    },
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="UpdateAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "tkcgtwopcqsbbuzkhbkxbj",
    description = "kprhmbdhjtdglzrgwyfvchuuvg",
    tags = new
    {
        key6615 = "xnfv",
    },
});
Response response = await client.UpdateAsync("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="Update(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Update and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "tkcgtwopcqsbbuzkhbkxbj",
    description = "kprhmbdhjtdglzrgwyfvchuuvg",
    tags = new
    {
        key6615 = "xnfv",
    },
});
Response response = client.Update("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetScheduleAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetScheduleAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

Response<EvaluationSchedule> response = await client.GetScheduleAsync(null);
]]></code></example>
    </member>
    <member name="GetSchedule(string,CancellationToken)">
      <example>
This sample shows how to call GetSchedule.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

Response<EvaluationSchedule> response = client.GetSchedule(null);
]]></code></example>
    </member>
    <member name="GetScheduleAsync(string,RequestContext)">
      <example>
This sample shows how to call GetScheduleAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetScheduleAsync(null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("query").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("serviceName").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="GetSchedule(string,RequestContext)">
      <example>
This sample shows how to call GetSchedule and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

Response response = client.GetSchedule(null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("query").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("serviceName").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplaceScheduleAsync(string,EvaluationSchedule,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceScheduleAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

EvaluationSchedule resource = new EvaluationSchedule(new ApplicationInsightsConfiguration(null, null, null), new Dictionary<string, EvaluatorConfiguration>
{
    ["key8500"] = new EvaluatorConfiguration("tocrsevtgwfevzkawsihymxun")
    {
        InitParams = { },
        DataMapping =
        {
            ["key7843"] = "iu"
        },
    }
}, null, new SamplingStrategy(17F))
{
    Description = "fdkzlyymirwpgnczwpopb",
    Tags =
    {
        ["key1442"] = "mevcd"
    },
    Properties =
    {
        ["key6062"] = "vdamafahkojuqpcjymbkzet"
    },
};
Response<EvaluationSchedule> response = await client.CreateOrReplaceScheduleAsync(null, resource);
]]></code></example>
    </member>
    <member name="CreateOrReplaceSchedule(string,EvaluationSchedule,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceSchedule.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

EvaluationSchedule resource = new EvaluationSchedule(new ApplicationInsightsConfiguration(null, null, null), new Dictionary<string, EvaluatorConfiguration>
{
    ["key8500"] = new EvaluatorConfiguration("tocrsevtgwfevzkawsihymxun")
    {
        InitParams = { },
        DataMapping =
        {
            ["key7843"] = "iu"
        },
    }
}, null, new SamplingStrategy(17F))
{
    Description = "fdkzlyymirwpgnczwpopb",
    Tags =
    {
        ["key1442"] = "mevcd"
    },
    Properties =
    {
        ["key6062"] = "vdamafahkojuqpcjymbkzet"
    },
};
Response<EvaluationSchedule> response = client.CreateOrReplaceSchedule(null, resource);
]]></code></example>
    </member>
    <member name="CreateOrReplaceScheduleAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceScheduleAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    data = new object(),
    description = "fdkzlyymirwpgnczwpopb",
    systemData = new object(),
    tags = new
    {
        key1442 = "mevcd",
    },
    properties = new
    {
        key6062 = "vdamafahkojuqpcjymbkzet",
    },
    evaluators = new
    {
        key8500 = new
        {
            id = "tocrsevtgwfevzkawsihymxun",
            initParams = new object(),
            dataMapping = new
            {
                key7843 = "iu",
            },
        },
    },
    samplingStrategy = new
    {
        rate = 17F,
    },
});
Response response = await client.CreateOrReplaceScheduleAsync(null, content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("query").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("serviceName").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplaceSchedule(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceSchedule and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    data = new object(),
    description = "fdkzlyymirwpgnczwpopb",
    systemData = new object(),
    tags = new
    {
        key1442 = "mevcd",
    },
    properties = new
    {
        key6062 = "vdamafahkojuqpcjymbkzet",
    },
    evaluators = new
    {
        key8500 = new
        {
            id = "tocrsevtgwfevzkawsihymxun",
            initParams = new object(),
            dataMapping = new
            {
                key7843 = "iu",
            },
        },
    },
    samplingStrategy = new
    {
        rate = 17F,
    },
});
Response response = client.CreateOrReplaceSchedule(null, content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("query").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("serviceName").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="DeleteScheduleAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteScheduleAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteScheduleAsync(null);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteSchedule(string,RequestContext)">
      <example>
This sample shows how to call DeleteSchedule.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteSchedule(null);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetEvaluationsAsync(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetEvaluationsAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

await foreach (Evaluation item in client.GetEvaluationsAsync())
{
}
]]></code></example>
    </member>
    <member name="GetEvaluations(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetEvaluations.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

foreach (Evaluation item in client.GetEvaluations())
{
}
]]></code></example>
    </member>
    <member name="GetEvaluationsAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetEvaluationsAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetEvaluationsAsync(null, 2, 30, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code></example>
    </member>
    <member name="GetEvaluations(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetEvaluations and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetEvaluations(null, 2, 30, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code></example>
    </member>
    <member name="GetSchedulesAsync(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSchedulesAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

await foreach (EvaluationSchedule item in client.GetSchedulesAsync())
{
}
]]></code></example>
    </member>
    <member name="GetSchedules(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSchedules.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

foreach (EvaluationSchedule item in client.GetSchedules())
{
}
]]></code></example>
    </member>
    <member name="GetSchedulesAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSchedulesAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetSchedulesAsync(null, 2, 30, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("resourceId").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("query").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("serviceName").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
}
]]></code></example>
    </member>
    <member name="GetSchedules(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSchedules and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
EvaluationClient client = new AzureAIClient(null, credential).GetEvaluationClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetSchedules(null, 2, 30, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("resourceId").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("query").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("serviceName").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>