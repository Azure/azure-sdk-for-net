// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Client.Models
{
    /// <summary> The possible values denoting the intended usage of a file. </summary>
    public readonly partial struct OpenAIFilePurpose : IEquatable<OpenAIFilePurpose>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OpenAIFilePurpose"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OpenAIFilePurpose(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FineTuneValue = "fine-tune";
        private const string FineTuneResultsValue = "fine-tune-results";
        private const string AgentsValue = "assistants";
        private const string AgentsOutputValue = "assistants_output";
        private const string BatchValue = "batch";
        private const string BatchOutputValue = "batch_output";
        private const string VisionValue = "vision";

        /// <summary> Indicates a file is used for fine tuning input. </summary>
        public static OpenAIFilePurpose FineTune { get; } = new OpenAIFilePurpose(FineTuneValue);
        /// <summary> Indicates a file is used for fine tuning results. </summary>
        public static OpenAIFilePurpose FineTuneResults { get; } = new OpenAIFilePurpose(FineTuneResultsValue);
        /// <summary> Indicates a file is used as input to agents. </summary>
        public static OpenAIFilePurpose Agents { get; } = new OpenAIFilePurpose(AgentsValue);
        /// <summary> Indicates a file is used as output by agents. </summary>
        public static OpenAIFilePurpose AgentsOutput { get; } = new OpenAIFilePurpose(AgentsOutputValue);
        /// <summary> Indicates a file is used as input to . </summary>
        public static OpenAIFilePurpose Batch { get; } = new OpenAIFilePurpose(BatchValue);
        /// <summary> Indicates a file is used as output by a vector store batch operation. </summary>
        public static OpenAIFilePurpose BatchOutput { get; } = new OpenAIFilePurpose(BatchOutputValue);
        /// <summary> Indicates a file is used as input to a vision operation. </summary>
        public static OpenAIFilePurpose Vision { get; } = new OpenAIFilePurpose(VisionValue);
        /// <summary> Determines if two <see cref="OpenAIFilePurpose"/> values are the same. </summary>
        public static bool operator ==(OpenAIFilePurpose left, OpenAIFilePurpose right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OpenAIFilePurpose"/> values are not the same. </summary>
        public static bool operator !=(OpenAIFilePurpose left, OpenAIFilePurpose right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OpenAIFilePurpose"/>. </summary>
        public static implicit operator OpenAIFilePurpose(string value) => new OpenAIFilePurpose(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OpenAIFilePurpose other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OpenAIFilePurpose other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
