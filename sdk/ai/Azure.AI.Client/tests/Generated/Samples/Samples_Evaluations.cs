// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.AI.Client.Models;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Client.Samples
{
    public partial class Samples_Evaluations
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_Create_EvaluationsCreateMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                id = "qfkteoypwndeirixziosai",
                displayName = "lresoznoqbpwvsummatfyc",
                description = "dfydblbzvilyvhdtqo",
                systemData = new object(),
                tags = new
                {
                    key9950 = "umaulvau",
                },
                properties = new
                {
                    key6705 = "eooztvyhcibkecr",
                },
                evaluators = new
                {
                    key4462 = new
                    {
                        id = "bodhxfmbqquu",
                        initParams = new object(),
                        dataMapping = new
                        {
                            key6077 = "rkegahkqoagtfoxuxizgo",
                        },
                    },
                },
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_Create_EvaluationsCreateMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                id = "qfkteoypwndeirixziosai",
                displayName = "lresoznoqbpwvsummatfyc",
                description = "dfydblbzvilyvhdtqo",
                systemData = new object(),
                tags = new
                {
                    key9950 = "umaulvau",
                },
                properties = new
                {
                    key6705 = "eooztvyhcibkecr",
                },
                evaluators = new
                {
                    key4462 = new
                    {
                        id = "bodhxfmbqquu",
                        initParams = new object(),
                        dataMapping = new
                        {
                            key6077 = "rkegahkqoagtfoxuxizgo",
                        },
                    },
                },
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_Create_EvaluationsCreateMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
            {
                ["key4462"] = new EvaluatorConfiguration("bodhxfmbqquu")
                {
                    InitParams = { },
                    DataMapping =
{
["key6077"] = "rkegahkqoagtfoxuxizgo"
},
                }
            })
            {
                Id = "qfkteoypwndeirixziosai",
                DisplayName = "lresoznoqbpwvsummatfyc",
                Description = "dfydblbzvilyvhdtqo",
                Tags =
{
["key9950"] = "umaulvau"
},
                Properties =
{
["key6705"] = "eooztvyhcibkecr"
},
            };
            Response<Evaluation> response = client.Create(evaluation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_Create_EvaluationsCreateMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
            {
                ["key4462"] = new EvaluatorConfiguration("bodhxfmbqquu")
                {
                    InitParams = { },
                    DataMapping =
{
["key6077"] = "rkegahkqoagtfoxuxizgo"
},
                }
            })
            {
                Id = "qfkteoypwndeirixziosai",
                DisplayName = "lresoznoqbpwvsummatfyc",
                Description = "dfydblbzvilyvhdtqo",
                Tags =
{
["key9950"] = "umaulvau"
},
                Properties =
{
["key6705"] = "eooztvyhcibkecr"
},
            };
            Response<Evaluation> response = await client.CreateAsync(evaluation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_Create_EvaluationsCreateMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                evaluators = new object(),
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_Create_EvaluationsCreateMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                evaluators = new object(),
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_Create_EvaluationsCreateMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>());
            Response<Evaluation> response = client.Create(evaluation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_Create_EvaluationsCreateMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>());
            Response<Evaluation> response = await client.CreateAsync(evaluation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_Update_EvaluationsUpdateMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tags = new
                {
                    key6951 = "mirtkcesgent",
                },
                displayName = "zkystmqhvncvxnxrhahhulbui",
                description = "vl",
            });
            Response response = client.Update("8y", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_Update_EvaluationsUpdateMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tags = new
                {
                    key6951 = "mirtkcesgent",
                },
                displayName = "zkystmqhvncvxnxrhahhulbui",
                description = "vl",
            });
            Response response = await client.UpdateAsync("8y", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_Update_EvaluationsUpdateMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update("k_2M_E1", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_Update_EvaluationsUpdateMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("k_2M_E1", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetEvaluation_EvaluationsGetMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetEvaluation("93-", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetEvaluation_EvaluationsGetMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetEvaluationAsync("93-", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetEvaluation_EvaluationsGetMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<Evaluation> response = client.GetEvaluation("93-");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetEvaluation_EvaluationsGetMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<Evaluation> response = await client.GetEvaluationAsync("93-");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetEvaluation_EvaluationsGetMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetEvaluation("0_0", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetEvaluation_EvaluationsGetMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetEvaluationAsync("0_0", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetEvaluation_EvaluationsGetMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<Evaluation> response = client.GetEvaluation("0_0");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetEvaluation_EvaluationsGetMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<Evaluation> response = await client.GetEvaluationAsync("0_0");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_CreateSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                data = new
                {
                    resourceId = "<resourceId>",
                    query = "<query>",
                    serviceName = "<serviceName>",
                    type = "app_insights",
                },
                evaluators = new
                {
                    key = new
                    {
                        id = "<id>",
                    },
                },
                samplingStrategy = new
                {
                    rate = 123.45F,
                },
            });
            Response response = client.CreateSchedule(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_CreateSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                data = new
                {
                    resourceId = "<resourceId>",
                    query = "<query>",
                    serviceName = "<serviceName>",
                    type = "app_insights",
                },
                evaluators = new
                {
                    key = new
                    {
                        id = "<id>",
                    },
                },
                samplingStrategy = new
                {
                    rate = 123.45F,
                },
            });
            Response response = await client.CreateScheduleAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_CreateSchedule_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            EvaluationSchedule body = new EvaluationSchedule(new AppInsightsConfiguration("<resourceId>", "<query>", "<serviceName>"), new Dictionary<string, EvaluatorConfiguration>
            {
                ["key"] = new EvaluatorConfiguration("<id>")
            }, new SamplingStrategy(123.45F));
            Response<EvaluationSchedule> response = client.CreateSchedule(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_CreateSchedule_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            EvaluationSchedule body = new EvaluationSchedule(new AppInsightsConfiguration("<resourceId>", "<query>", "<serviceName>"), new Dictionary<string, EvaluatorConfiguration>
            {
                ["key"] = new EvaluatorConfiguration("<id>")
            }, new SamplingStrategy(123.45F));
            Response<EvaluationSchedule> response = await client.CreateScheduleAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_CreateSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                data = new
                {
                    resourceId = "<resourceId>",
                    query = "<query>",
                    serviceName = "<serviceName>",
                    type = "app_insights",
                },
                displayName = "<displayName>",
                description = "<description>",
                tags = new
                {
                    key = "<tags>",
                },
                properties = new
                {
                    key = "<properties>",
                },
                evaluators = new
                {
                    key = new
                    {
                        id = "<id>",
                        initParams = new
                        {
                            key = new object(),
                        },
                        dataMapping = new
                        {
                            key = "<dataMapping>",
                        },
                    },
                },
                recurrence = new
                {
                    frequency = "Month",
                    interval = 1234,
                    schedule = new
                    {
                        hours = new object[]
            {
1234
            },
                        minutes = new object[]
            {
1234
            },
                        weekDays = new object[]
            {
"Monday"
            },
                        monthDays = new object[]
            {
1234
            },
                    },
                },
                cronExpression = "<cronExpression>",
                samplingStrategy = new
                {
                    rate = 123.45F,
                },
            });
            Response response = client.CreateSchedule(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
            Console.WriteLine(result.GetProperty("cronExpression").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_CreateSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                data = new
                {
                    resourceId = "<resourceId>",
                    query = "<query>",
                    serviceName = "<serviceName>",
                    type = "app_insights",
                },
                displayName = "<displayName>",
                description = "<description>",
                tags = new
                {
                    key = "<tags>",
                },
                properties = new
                {
                    key = "<properties>",
                },
                evaluators = new
                {
                    key = new
                    {
                        id = "<id>",
                        initParams = new
                        {
                            key = new object(),
                        },
                        dataMapping = new
                        {
                            key = "<dataMapping>",
                        },
                    },
                },
                recurrence = new
                {
                    frequency = "Month",
                    interval = 1234,
                    schedule = new
                    {
                        hours = new object[]
            {
1234
            },
                        minutes = new object[]
            {
1234
            },
                        weekDays = new object[]
            {
"Monday"
            },
                        monthDays = new object[]
            {
1234
            },
                    },
                },
                cronExpression = "<cronExpression>",
                samplingStrategy = new
                {
                    rate = 123.45F,
                },
            });
            Response response = await client.CreateScheduleAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
            Console.WriteLine(result.GetProperty("cronExpression").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_CreateSchedule_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            EvaluationSchedule body = new EvaluationSchedule(new AppInsightsConfiguration("<resourceId>", "<query>", "<serviceName>"), new Dictionary<string, EvaluatorConfiguration>
            {
                ["key"] = new EvaluatorConfiguration("<id>")
                {
                    InitParams =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                    DataMapping =
{
["key"] = "<dataMapping>"
},
                }
            }, new SamplingStrategy(123.45F))
            {
                Id = "<id>",
                DisplayName = "<displayName>",
                Description = "<description>",
                Tags =
{
["key"] = "<tags>"
},
                Properties =
{
["key"] = "<properties>"
},
                Recurrence = new Recurrence(Frequency.Month, 1234, new RecurrenceSchedule(new int[] { 1234 }, new int[] { 1234 }, new WeekDays[] { WeekDays.Monday }, new int[] { 1234 })),
                CronExpression = "<cronExpression>",
            };
            Response<EvaluationSchedule> response = client.CreateSchedule(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_CreateSchedule_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            EvaluationSchedule body = new EvaluationSchedule(new AppInsightsConfiguration("<resourceId>", "<query>", "<serviceName>"), new Dictionary<string, EvaluatorConfiguration>
            {
                ["key"] = new EvaluatorConfiguration("<id>")
                {
                    InitParams =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                    DataMapping =
{
["key"] = "<dataMapping>"
},
                }
            }, new SamplingStrategy(123.45F))
            {
                Id = "<id>",
                DisplayName = "<displayName>",
                Description = "<description>",
                Tags =
{
["key"] = "<tags>"
},
                Properties =
{
["key"] = "<properties>"
},
                Recurrence = new Recurrence(Frequency.Month, 1234, new RecurrenceSchedule(new int[] { 1234 }, new int[] { 1234 }, new WeekDays[] { WeekDays.Monday }, new int[] { 1234 })),
                CronExpression = "<cronExpression>",
            };
            Response<EvaluationSchedule> response = await client.CreateScheduleAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetSchedule("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetScheduleAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetSchedule_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<EvaluationSchedule> response = client.GetSchedule("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetSchedule_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<EvaluationSchedule> response = await client.GetScheduleAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetSchedule("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
            Console.WriteLine(result.GetProperty("cronExpression").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetScheduleAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
            Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
            Console.WriteLine(result.GetProperty("cronExpression").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetSchedule_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<EvaluationSchedule> response = client.GetSchedule("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetSchedule_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<EvaluationSchedule> response = await client.GetScheduleAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_DeleteSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteSchedule("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_DeleteSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteScheduleAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_DeleteSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteSchedule("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_DeleteSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteScheduleAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetEvaluations_EvaluationsListMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (BinaryData item in client.GetEvaluations(null, 20, 9, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetEvaluations_EvaluationsListMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (BinaryData item in client.GetEvaluationsAsync(null, 20, 9, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetEvaluations_EvaluationsListMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (Evaluation item in client.GetEvaluations())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetEvaluations_EvaluationsListMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (Evaluation item in client.GetEvaluationsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetEvaluations_EvaluationsListMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (BinaryData item in client.GetEvaluations(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetEvaluations_EvaluationsListMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (BinaryData item in client.GetEvaluationsAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetEvaluations_EvaluationsListMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (Evaluation item in client.GetEvaluations())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetEvaluations_EvaluationsListMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (Evaluation item in client.GetEvaluationsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetSchedules_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (BinaryData item in client.GetSchedules(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetSchedules_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (BinaryData item in client.GetSchedulesAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetSchedules_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (EvaluationSchedule item in client.GetSchedules())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetSchedules_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (EvaluationSchedule item in client.GetSchedulesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetSchedules_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (BinaryData item in client.GetSchedules(1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
                Console.WriteLine(result.GetProperty("cronExpression").ToString());
                Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetSchedules_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (BinaryData item in client.GetSchedulesAsync(1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
                Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
                Console.WriteLine(result.GetProperty("cronExpression").ToString());
                Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetSchedules_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (EvaluationSchedule item in client.GetSchedules(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetSchedules_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (EvaluationSchedule item in client.GetSchedulesAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetScheduleEvaluations_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (BinaryData item in client.GetScheduleEvaluations("<id>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetScheduleEvaluations_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (BinaryData item in client.GetScheduleEvaluationsAsync("<id>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetScheduleEvaluations_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (Evaluation item in client.GetScheduleEvaluations("<id>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetScheduleEvaluations_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (Evaluation item in client.GetScheduleEvaluationsAsync("<id>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetScheduleEvaluations_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (BinaryData item in client.GetScheduleEvaluations("<id>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetScheduleEvaluations_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (BinaryData item in client.GetScheduleEvaluationsAsync("<id>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_GetScheduleEvaluations_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (Evaluation item in client.GetScheduleEvaluations("<id>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_GetScheduleEvaluations_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (Evaluation item in client.GetScheduleEvaluationsAsync("<id>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }
    }
}
