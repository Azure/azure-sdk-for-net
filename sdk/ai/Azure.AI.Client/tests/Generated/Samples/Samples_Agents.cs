// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.AI.Client.Models;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Client.Samples
{
    public partial class Samples_Agents
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AgentsCreateAgent()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "kgubdmpuvhzjjfwaj",
            });
            Response response = client.CreateAgent(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AgentsCreateAgent_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "kgubdmpuvhzjjfwaj",
            });
            Response response = await client.CreateAgentAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AgentsCreateAgent_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.CreateAgent("kgubdmpuvhzjjfwaj");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AgentsCreateAgent_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.CreateAgentAsync("kgubdmpuvhzjjfwaj");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AgentsGetAgent()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetAgent("aorarcltzoneckqmfoluejbhgbm", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AgentsGetAgent_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetAgentAsync("aorarcltzoneckqmfoluejbhgbm", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AgentsGetAgent_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.GetAgent("aorarcltzoneckqmfoluejbhgbm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AgentsGetAgent_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.GetAgentAsync("aorarcltzoneckqmfoluejbhgbm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AgentsUpdateAgent()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateAgent("drivavkqxrpkaxwqjfiyaxdkytrpyo", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AgentsUpdateAgent_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAgentAsync("drivavkqxrpkaxwqjfiyaxdkytrpyo", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AgentsUpdateAgent_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.UpdateAgent("drivavkqxrpkaxwqjfiyaxdkytrpyo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AgentsUpdateAgent_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.UpdateAgentAsync("drivavkqxrpkaxwqjfiyaxdkytrpyo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThread_AgentsCreateThread()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateThread(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThread_AgentsCreateThread_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateThreadAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThread_AgentsCreateThread_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.CreateThread();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThread_AgentsCreateThread_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.CreateThreadAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetThread_AgentsGetThread()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetThread("tyfreqamibskuzfoyo", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetThread_AgentsGetThread_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetThreadAsync("tyfreqamibskuzfoyo", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetThread_AgentsGetThread_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.GetThread("tyfreqamibskuzfoyo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetThread_AgentsGetThread_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.GetThreadAsync("tyfreqamibskuzfoyo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateThread_AgentsUpdateThread()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateThread("jgyxjehvrgpipokdeyifitlfbidb", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateThread_AgentsUpdateThread_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateThreadAsync("jgyxjehvrgpipokdeyifitlfbidb", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateThread_AgentsUpdateThread_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.UpdateThread("jgyxjehvrgpipokdeyifitlfbidb");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateThread_AgentsUpdateThread_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.UpdateThreadAsync("jgyxjehvrgpipokdeyifitlfbidb");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateMessage_AgentsCreateMessage()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "qpdhdxo",
            });
            Response response = client.CreateMessage("xbhvabcrbxxkvgduotbrlzflyhzfqs", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateMessage_AgentsCreateMessage_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "qpdhdxo",
            });
            Response response = await client.CreateMessageAsync("xbhvabcrbxxkvgduotbrlzflyhzfqs", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateMessage_AgentsCreateMessage_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.CreateMessage("xbhvabcrbxxkvgduotbrlzflyhzfqs", MessageRole.User, "qpdhdxo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateMessage_AgentsCreateMessage_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.CreateMessageAsync("xbhvabcrbxxkvgduotbrlzflyhzfqs", MessageRole.User, "qpdhdxo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetMessage_AgentsGetMessage()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetMessage("secglofbhaocemzzskoeatl", "axpvtnmnjmpctkmnoswam", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetMessage_AgentsGetMessage_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetMessageAsync("secglofbhaocemzzskoeatl", "axpvtnmnjmpctkmnoswam", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetMessage_AgentsGetMessage_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.GetMessage("secglofbhaocemzzskoeatl", "axpvtnmnjmpctkmnoswam");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetMessage_AgentsGetMessage_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.GetMessageAsync("secglofbhaocemzzskoeatl", "axpvtnmnjmpctkmnoswam");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateMessage_AgentsUpdateMessage()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateMessage("ptewwjnlbwxlgmrwuaewu", "i", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateMessage_AgentsUpdateMessage_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateMessageAsync("ptewwjnlbwxlgmrwuaewu", "i", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateMessage_AgentsUpdateMessage_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.UpdateMessage("ptewwjnlbwxlgmrwuaewu", "i");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateMessage_AgentsUpdateMessage_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.UpdateMessageAsync("ptewwjnlbwxlgmrwuaewu", "i");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateRun_AgentsCreateRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "edviydkrqnjapocjydfbukm",
                model = "e",
                instructions = "llphgcevph",
                additional_instructions = "rditmqedmpzv",
                additional_messages = new object[]
            {
new Dictionary<string, object>
{
["id"] = "igxwspkkr",
["object"] = "thread.message",
["created_at"] = 14,
["thread_id"] = "wdhurfoa",
["status"] = "in_progress",
["incomplete_details"] = new
{
reason = "content_filter",
},
["completed_at"] = 15,
["incomplete_at"] = 12,
["role"] = "user",
["content"] = Array.Empty<object>(),
["assistant_id"] = "asscaznjc",
["run_id"] = "pwpnijksnuvlkphkiacvrchmradxdg",
["attachments"] = new object[]
{
new
{
file_id = "mvfwlptwylzrsgyl",
tools = new object[]
{
null
},
}
},
["metadata"] = new
{
key4165 = "tijsirnrvsmh",
}
}
            },
                tools = Array.Empty<object>(),
                stream = true,
                temperature = 7F,
                top_p = 20F,
                max_prompt_tokens = 19,
                max_completion_tokens = 30,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 4,
                },
                metadata = new
                {
                    key4871 = "wtdke",
                },
            });
            Response response = client.CreateRun("titpgvpkrtswgazxcziukwksc", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateRun_AgentsCreateRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "edviydkrqnjapocjydfbukm",
                model = "e",
                instructions = "llphgcevph",
                additional_instructions = "rditmqedmpzv",
                additional_messages = new object[]
            {
new Dictionary<string, object>
{
["id"] = "igxwspkkr",
["object"] = "thread.message",
["created_at"] = 14,
["thread_id"] = "wdhurfoa",
["status"] = "in_progress",
["incomplete_details"] = new
{
reason = "content_filter",
},
["completed_at"] = 15,
["incomplete_at"] = 12,
["role"] = "user",
["content"] = Array.Empty<object>(),
["assistant_id"] = "asscaznjc",
["run_id"] = "pwpnijksnuvlkphkiacvrchmradxdg",
["attachments"] = new object[]
{
new
{
file_id = "mvfwlptwylzrsgyl",
tools = new object[]
{
null
},
}
},
["metadata"] = new
{
key4165 = "tijsirnrvsmh",
}
}
            },
                tools = Array.Empty<object>(),
                stream = true,
                temperature = 7F,
                top_p = 20F,
                max_prompt_tokens = 19,
                max_completion_tokens = 30,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 4,
                },
                metadata = new
                {
                    key4871 = "wtdke",
                },
            });
            Response response = await client.CreateRunAsync("titpgvpkrtswgazxcziukwksc", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateRun_AgentsCreateRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.CreateRun("titpgvpkrtswgazxcziukwksc", "edviydkrqnjapocjydfbukm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateRun_AgentsCreateRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.CreateRunAsync("titpgvpkrtswgazxcziukwksc", "edviydkrqnjapocjydfbukm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRun_AgentsGetRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetRun("ilcsibdqbvldqyvmbjjtvirntap", "scpdacucqpuoqjihekkeolfpdyeea", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRun_AgentsGetRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetRunAsync("ilcsibdqbvldqyvmbjjtvirntap", "scpdacucqpuoqjihekkeolfpdyeea", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRun_AgentsGetRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.GetRun("ilcsibdqbvldqyvmbjjtvirntap", "scpdacucqpuoqjihekkeolfpdyeea");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRun_AgentsGetRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.GetRunAsync("ilcsibdqbvldqyvmbjjtvirntap", "scpdacucqpuoqjihekkeolfpdyeea");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateRun_AgentsUpdateRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key5931 = "ojeukdviplvt",
                },
            });
            Response response = client.UpdateRun("rtzvfjw", "ibopwyspzczc", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateRun_AgentsUpdateRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key5931 = "ojeukdviplvt",
                },
            });
            Response response = await client.UpdateRunAsync("rtzvfjw", "ibopwyspzczc", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateRun_AgentsUpdateRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.UpdateRun("rtzvfjw", "ibopwyspzczc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateRun_AgentsUpdateRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.UpdateRunAsync("rtzvfjw", "ibopwyspzczc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new
{
tool_call_id = "flwjfqlwyobzrqsr",
output = "bzgsvafsjpmngunow",
}
            },
                stream = true,
            });
            Response response = client.SubmitToolOutputsToRun("yosbqrdcijdcesgiveaq", "uebvrihwqaydtgeh", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new
{
tool_call_id = "flwjfqlwyobzrqsr",
output = "bzgsvafsjpmngunow",
}
            },
                stream = true,
            });
            Response response = await client.SubmitToolOutputsToRunAsync("yosbqrdcijdcesgiveaq", "uebvrihwqaydtgeh", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.SubmitToolOutputsToRun("yosbqrdcijdcesgiveaq", "uebvrihwqaydtgeh", new ToolOutput[]
            {
new ToolOutput
{
ToolCallId = "flwjfqlwyobzrqsr",
Output = "bzgsvafsjpmngunow",
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.SubmitToolOutputsToRunAsync("yosbqrdcijdcesgiveaq", "uebvrihwqaydtgeh", new ToolOutput[]
            {
new ToolOutput
{
ToolCallId = "flwjfqlwyobzrqsr",
Output = "bzgsvafsjpmngunow",
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelRun_AgentsCancelRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.CancelRun("sxximmrzssszbrz", "reoghmjcd", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelRun_AgentsCancelRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.CancelRunAsync("sxximmrzssszbrz", "reoghmjcd", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelRun_AgentsCancelRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.CancelRun("sxximmrzssszbrz", "reoghmjcd");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelRun_AgentsCancelRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.CancelRunAsync("sxximmrzssszbrz", "reoghmjcd");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "ycnmflszpe",
                thread = new
                {
                    messages = new object[]
            {
new
{
role = "user",
content = "qpdhdxo",
attachments = new object[]
{
new
{
file_id = "mvfwlptwylzrsgyl",
tools = new object[]
{
null
},
}
},
metadata = new
{
key5680 = "ucsj",
},
}
            },
                    tool_resources = new
                    {
                        code_interpreter = new
                        {
                            file_ids = new object[]
            {
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon"
            },
                        },
                        file_search = new
                        {
                            vector_store_ids = new object[]
            {
"kqlafrklwkuayr"
            },
                        },
                    },
                    metadata = new
                    {
                        key8298 = "ufsqvphcxlgdpnuety",
                    },
                },
                model = "hsaoekkcvbgjmzgdczhtlpced",
                instructions = "htnwuhzqgdxbebijhziazxmf",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"lwtankyeso",
"lwtankyeso",
"lwtankyeso"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"cdrtekcixiqcrfy"
            },
                    },
                },
                stream = true,
                temperature = 27F,
                top_p = 11F,
                max_prompt_tokens = 20,
                max_completion_tokens = 2,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 23,
                },
                metadata = new
                {
                    key277 = "wtjlphurkf",
                },
            });
            Response response = client.CreateThreadAndRun(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "ycnmflszpe",
                thread = new
                {
                    messages = new object[]
            {
new
{
role = "user",
content = "qpdhdxo",
attachments = new object[]
{
new
{
file_id = "mvfwlptwylzrsgyl",
tools = new object[]
{
null
},
}
},
metadata = new
{
key5680 = "ucsj",
},
}
            },
                    tool_resources = new
                    {
                        code_interpreter = new
                        {
                            file_ids = new object[]
            {
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon",
"kwlqzezdwrgsebon"
            },
                        },
                        file_search = new
                        {
                            vector_store_ids = new object[]
            {
"kqlafrklwkuayr"
            },
                        },
                    },
                    metadata = new
                    {
                        key8298 = "ufsqvphcxlgdpnuety",
                    },
                },
                model = "hsaoekkcvbgjmzgdczhtlpced",
                instructions = "htnwuhzqgdxbebijhziazxmf",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"lwtankyeso",
"lwtankyeso",
"lwtankyeso"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"cdrtekcixiqcrfy"
            },
                    },
                },
                stream = true,
                temperature = 27F,
                top_p = 11F,
                max_prompt_tokens = 20,
                max_completion_tokens = 2,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 23,
                },
                metadata = new
                {
                    key277 = "wtjlphurkf",
                },
            });
            Response response = await client.CreateThreadAndRunAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.CreateThreadAndRun("ycnmflszpe");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.CreateThreadAndRunAsync("ycnmflszpe");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunStep_AgentsGetRunStep()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetRunStep("jwopmhvryvcpltxhimyrvkcwel", "echizvrhsigfce", "kc", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunStep_AgentsGetRunStep_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetRunStepAsync("jwopmhvryvcpltxhimyrvkcwel", "echizvrhsigfce", "kc", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunStep_AgentsGetRunStep_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<RunStep> response = client.GetRunStep("jwopmhvryvcpltxhimyrvkcwel", "echizvrhsigfce", "kc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunStep_AgentsGetRunStep_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<RunStep> response = await client.GetRunStepAsync("jwopmhvryvcpltxhimyrvkcwel", "echizvrhsigfce", "kc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UploadFile_AgentsUploadFile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = null;
            Response response = client.UploadFile(content, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UploadFile_AgentsUploadFile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = null;
            Response response = await client.UploadFileAsync(content, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UploadFile_AgentsUploadFile_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = client.UploadFile((Stream)null, (OpenAIFilePurpose)null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UploadFile_AgentsUploadFile_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = await client.UploadFileAsync((Stream)null, (OpenAIFilePurpose)null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFile_AgentsGetFile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetFile("ahlwbnjjg", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFile_AgentsGetFile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetFileAsync("ahlwbnjjg", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFile_AgentsGetFile_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = client.GetFile("ahlwbnjjg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFile_AgentsGetFile_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = await client.GetFileAsync("ahlwbnjjg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFileContent_AgentsGetFileContent()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetFileContent("oudalhdmazgj", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("content").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFileContent_AgentsGetFileContent_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetFileContentAsync("oudalhdmazgj", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("content").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFileContent_AgentsGetFileContent_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<FileContentResponse> response = client.GetFileContent("oudalhdmazgj");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFileContent_AgentsGetFileContent_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<FileContentResponse> response = await client.GetFileContentAsync("oudalhdmazgj");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStores_AgentsListVectorStores()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStores(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStores_AgentsListVectorStores_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoresAsync(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStores_AgentsListVectorStores_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStores_AgentsListVectorStores_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStore_AgentsCreateVectorStore()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateVectorStore(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStore_AgentsCreateVectorStore_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateVectorStoreAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStore_AgentsCreateVectorStore_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.CreateVectorStore();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStore_AgentsCreateVectorStore_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.CreateVectorStoreAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStore_AgentsGetVectorStore()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStore("imldyfrenvwrdahxomrvypghklgzfm", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStore_AgentsGetVectorStore_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreAsync("imldyfrenvwrdahxomrvypghklgzfm", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStore_AgentsGetVectorStore_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.GetVectorStore("imldyfrenvwrdahxomrvypghklgzfm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStore_AgentsGetVectorStore_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.GetVectorStoreAsync("imldyfrenvwrdahxomrvypghklgzfm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_ModifyVectorStore_AgentsModifyVectorStore()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ModifyVectorStore("kvppqylqdvhzao", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_ModifyVectorStore_AgentsModifyVectorStore_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ModifyVectorStoreAsync("kvppqylqdvhzao", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_ModifyVectorStore_AgentsModifyVectorStore_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.ModifyVectorStore("kvppqylqdvhzao");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_ModifyVectorStore_AgentsModifyVectorStore_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.ModifyVectorStoreAsync("kvppqylqdvhzao");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStore_AgentsDeleteVectorStore()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteVectorStore("sshdziwghotwucptzhzgdxpggsedy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStore_AgentsDeleteVectorStore_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteVectorStoreAsync("sshdziwghotwucptzhzgdxpggsedy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStore_AgentsDeleteVectorStore_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("sshdziwghotwucptzhzgdxpggsedy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStore_AgentsDeleteVectorStore_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("sshdziwghotwucptzhzgdxpggsedy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFiles()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFiles("al", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFiles_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFilesAsync("al", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFiles_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("al");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFiles_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("al");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "xppxliqsswnnyrukfmsmf",
            });
            Response response = client.CreateVectorStoreFile("idpqwwckeqghniuwsifhtpjyjgiju", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "xppxliqsswnnyrukfmsmf",
            });
            Response response = await client.CreateVectorStoreFileAsync("idpqwwckeqghniuwsifhtpjyjgiju", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFile_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = client.CreateVectorStoreFile("idpqwwckeqghniuwsifhtpjyjgiju", "xppxliqsswnnyrukfmsmf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFile_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = await client.CreateVectorStoreFileAsync("idpqwwckeqghniuwsifhtpjyjgiju", "xppxliqsswnnyrukfmsmf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFile("tcpppckhbcqnmxcpqnsdhmocbfkvw", "swmxwhxjbntnayymmrrocysdsrio", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileAsync("tcpppckhbcqnmxcpqnsdhmocbfkvw", "swmxwhxjbntnayymmrrocysdsrio", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFile_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = client.GetVectorStoreFile("tcpppckhbcqnmxcpqnsdhmocbfkvw", "swmxwhxjbntnayymmrrocysdsrio");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFile_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("tcpppckhbcqnmxcpqnsdhmocbfkvw", "swmxwhxjbntnayymmrrocysdsrio");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteVectorStoreFile("hbnrqrcvbsowbuksdrtcqi", "vzshxliuznhftv", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteVectorStoreFileAsync("hbnrqrcvbsowbuksdrtcqi", "vzshxliuznhftv", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFile_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("hbnrqrcvbsowbuksdrtcqi", "vzshxliuznhftv");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFile_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("hbnrqrcvbsowbuksdrtcqi", "vzshxliuznhftv");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatch()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve"
            },
            });
            Response response = client.CreateVectorStoreFileBatch("wbzlofzqg", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatch_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve",
"cyletve"
            },
            });
            Response response = await client.CreateVectorStoreFileBatchAsync("wbzlofzqg", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatch_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("wbzlofzqg", new string[] { "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatch_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("wbzlofzqg", new string[] { "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve", "cyletve" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatch()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFileBatch("lbs", "zxqbzpge", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatch_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileBatchAsync("lbs", "zxqbzpge", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatch_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("lbs", "zxqbzpge");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatch_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("lbs", "zxqbzpge");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatch()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.CancelVectorStoreFileBatch("esqgxemsdquv", "ukjhmcvwhahdrhhiiyortbbjlhx", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatch_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.CancelVectorStoreFileBatchAsync("esqgxemsdquv", "ukjhmcvwhahdrhhiiyortbbjlhx", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatch_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("esqgxemsdquv", "ukjhmcvwhahdrhhiiyortbbjlhx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatch_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("esqgxemsdquv", "ukjhmcvwhahdrhhiiyortbbjlhx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFiles()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFileBatchFiles("vdelhyyzsgiavifhhzvtvqeqhhsuh", "gffqfjubkoliaarvbyq", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFiles_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileBatchFilesAsync("vdelhyyzsgiavifhhzvtvqeqhhsuh", "gffqfjubkoliaarvbyq", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFiles_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("vdelhyyzsgiavifhhzvtvqeqhhsuh", "gffqfjubkoliaarvbyq");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFiles_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("vdelhyyzsgiavifhhzvtvqeqhhsuh", "gffqfjubkoliaarvbyq");
        }
    }
}
