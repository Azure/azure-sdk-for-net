// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Projects1DP
{
    // Data plane generated sub-client.
    /// <summary>
    /// RUNS
    ///
    /// Interface is rooted at /runs.
    /// Includes standard resource operations + custom collection-level
    /// and instance-level actions (complete, stream).
    /// </summary>
    public partial class Runs
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly AzureKeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";
        private static readonly string[] AuthorizationScopes = new string[] { "https://cognitiveservices.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Runs for mocking. </summary>
        protected Runs()
        {
        }

        /// <summary> Initializes a new instance of Runs. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> Project endpoint in the form of: https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Runs(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Creates a new run. </summary>
        /// <param name="agent"> The agent responsible for generating the run. </param>
        /// <param name="input"> The list of input messages for the run. </param>
        /// <param name="threadId"> Optional identifier for an existing conversation thread. </param>
        /// <param name="metadata"> Optional metadata associated with the run request. </param>
        /// <param name="options"> Optional configuration for run generation. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agent"/> or <paramref name="input"/> is null. </exception>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateRunAsync(Agent,IEnumerable{ChatMessage},string,IReadOnlyDictionary{string,string},RunOptions,string,CancellationToken)']/*" />
        public virtual async Task<Response<Run>> CreateRunAsync(Agent agent, IEnumerable<ChatMessage> input, string threadId = null, IReadOnlyDictionary<string, string> metadata = null, RunOptions options = null, string userId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(agent, nameof(agent));
            Argument.AssertNotNull(input, nameof(input));

            CreateRunRequest createRunRequest = new CreateRunRequest(
                agent,
                input.ToList(),
                threadId,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                options,
                userId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateRunAsync(createRunRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(Run.FromResponse(response), response);
        }

        /// <summary> Creates a new run. </summary>
        /// <param name="agent"> The agent responsible for generating the run. </param>
        /// <param name="input"> The list of input messages for the run. </param>
        /// <param name="threadId"> Optional identifier for an existing conversation thread. </param>
        /// <param name="metadata"> Optional metadata associated with the run request. </param>
        /// <param name="options"> Optional configuration for run generation. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agent"/> or <paramref name="input"/> is null. </exception>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateRun(Agent,IEnumerable{ChatMessage},string,IReadOnlyDictionary{string,string},RunOptions,string,CancellationToken)']/*" />
        public virtual Response<Run> CreateRun(Agent agent, IEnumerable<ChatMessage> input, string threadId = null, IReadOnlyDictionary<string, string> metadata = null, RunOptions options = null, string userId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(agent, nameof(agent));
            Argument.AssertNotNull(input, nameof(input));

            CreateRunRequest createRunRequest = new CreateRunRequest(
                agent,
                input.ToList(),
                threadId,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                options,
                userId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateRun(createRunRequest.ToRequestContent(), context);
            return Response.FromValue(Run.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates a new run.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateRunAsync(Agent,IEnumerable{ChatMessage},string,IReadOnlyDictionary{string,string},RunOptions,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateRunAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateRunAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Runs.CreateRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRunRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a new run.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateRun(Agent,IEnumerable{ChatMessage},string,IReadOnlyDictionary{string,string},RunOptions,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateRun(RequestContent,RequestContext)']/*" />
        public virtual Response CreateRun(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Runs.CreateRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRunRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieves an existing run by its ID.
        /// @route("/run/{run_id}")
        /// </summary>
        /// <param name="runId"> Unique identifier for this run. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='GetRunAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<Run>> GetRunAsync(string runId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetRunAsync(runId, context).ConfigureAwait(false);
            return Response.FromValue(Run.FromResponse(response), response);
        }

        /// <summary>
        /// Retrieves an existing run by its ID.
        /// @route("/run/{run_id}")
        /// </summary>
        /// <param name="runId"> Unique identifier for this run. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='GetRun(string,CancellationToken)']/*" />
        public virtual Response<Run> GetRun(string runId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetRun(runId, context);
            return Response.FromValue(Run.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Retrieves an existing run by its ID.
        /// @route("/run/{run_id}")
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRunAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="runId"> Unique identifier for this run. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='GetRunAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetRunAsync(string runId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("Runs.GetRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRunRequest(runId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieves an existing run by its ID.
        /// @route("/run/{run_id}")
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRun(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="runId"> Unique identifier for this run. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='GetRun(string,RequestContext)']/*" />
        public virtual Response GetRun(string runId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("Runs.GetRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRunRequest(runId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates and waits for a run to finish, returning the completed Run (including its outputs). </summary>
        /// <param name="agent"> The agent responsible for generating the run. </param>
        /// <param name="input"> The list of input messages for the run. </param>
        /// <param name="threadId"> Optional identifier for an existing conversation thread. </param>
        /// <param name="metadata"> Optional metadata associated with the run request. </param>
        /// <param name="options"> Optional configuration for run generation. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agent"/> or <paramref name="input"/> is null. </exception>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateAndExecuteRunAsync(Agent,IEnumerable{ChatMessage},string,IReadOnlyDictionary{string,string},RunOptions,string,CancellationToken)']/*" />
        public virtual async Task<Response<Run>> CreateAndExecuteRunAsync(Agent agent, IEnumerable<ChatMessage> input, string threadId = null, IReadOnlyDictionary<string, string> metadata = null, RunOptions options = null, string userId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(agent, nameof(agent));
            Argument.AssertNotNull(input, nameof(input));

            CreateAndExecuteRunRequest createAndExecuteRunRequest = new CreateAndExecuteRunRequest(
                agent,
                input.ToList(),
                threadId,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                options,
                userId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateAndExecuteRunAsync(createAndExecuteRunRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(Run.FromResponse(response), response);
        }

        /// <summary> Creates and waits for a run to finish, returning the completed Run (including its outputs). </summary>
        /// <param name="agent"> The agent responsible for generating the run. </param>
        /// <param name="input"> The list of input messages for the run. </param>
        /// <param name="threadId"> Optional identifier for an existing conversation thread. </param>
        /// <param name="metadata"> Optional metadata associated with the run request. </param>
        /// <param name="options"> Optional configuration for run generation. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agent"/> or <paramref name="input"/> is null. </exception>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateAndExecuteRun(Agent,IEnumerable{ChatMessage},string,IReadOnlyDictionary{string,string},RunOptions,string,CancellationToken)']/*" />
        public virtual Response<Run> CreateAndExecuteRun(Agent agent, IEnumerable<ChatMessage> input, string threadId = null, IReadOnlyDictionary<string, string> metadata = null, RunOptions options = null, string userId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(agent, nameof(agent));
            Argument.AssertNotNull(input, nameof(input));

            CreateAndExecuteRunRequest createAndExecuteRunRequest = new CreateAndExecuteRunRequest(
                agent,
                input.ToList(),
                threadId,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                options,
                userId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateAndExecuteRun(createAndExecuteRunRequest.ToRequestContent(), context);
            return Response.FromValue(Run.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates and waits for a run to finish, returning the completed Run (including its outputs).
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAndExecuteRunAsync(Agent,IEnumerable{ChatMessage},string,IReadOnlyDictionary{string,string},RunOptions,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateAndExecuteRunAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateAndExecuteRunAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Runs.CreateAndExecuteRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateAndExecuteRunRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates and waits for a run to finish, returning the completed Run (including its outputs).
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAndExecuteRun(Agent,IEnumerable{ChatMessage},string,IReadOnlyDictionary{string,string},RunOptions,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateAndExecuteRun(RequestContent,RequestContext)']/*" />
        public virtual Response CreateAndExecuteRun(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Runs.CreateAndExecuteRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateAndExecuteRunRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create and stream run.
        /// @route("/run/stream")
        /// </summary>
        /// <param name="agentId"> Unique identifier for the agent responsible for the run. </param>
        /// <param name="createdAt"> Timestamp when the run was initiated (Unix time). </param>
        /// <param name="completedAt"> Timestamp when the run finished processing (Unix time). </param>
        /// <param name="runInputs"> The inputs that were used to start this run. </param>
        /// <param name="runOutputs"> The final outcome of this run, including status, output messages, token usage. </param>
        /// <param name="options"> Optional configuration for run generation. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="store"> Flag indicating whether to store the run and associated messages. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/>, <paramref name="runInputs"/> or <paramref name="runOutputs"/> is null. </exception>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateAndStreamRunAsync(string,long,long,RunInputs,RunOutputs,RunOptions,string,bool?,CancellationToken)']/*" />
        public virtual async Task<Response> CreateAndStreamRunAsync(string agentId, long createdAt, long completedAt, RunInputs runInputs, RunOutputs runOutputs, RunOptions options = null, string userId = null, bool? store = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(agentId, nameof(agentId));
            Argument.AssertNotNull(runInputs, nameof(runInputs));
            Argument.AssertNotNull(runOutputs, nameof(runOutputs));

            CreateAndStreamRunRequest createAndStreamRunRequest = new CreateAndStreamRunRequest(
                agentId,
                createdAt,
                completedAt,
                runInputs,
                runOutputs,
                options,
                userId,
                store,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateAndStreamRunAsync(createAndStreamRunRequest.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary>
        /// Create and stream run.
        /// @route("/run/stream")
        /// </summary>
        /// <param name="agentId"> Unique identifier for the agent responsible for the run. </param>
        /// <param name="createdAt"> Timestamp when the run was initiated (Unix time). </param>
        /// <param name="completedAt"> Timestamp when the run finished processing (Unix time). </param>
        /// <param name="runInputs"> The inputs that were used to start this run. </param>
        /// <param name="runOutputs"> The final outcome of this run, including status, output messages, token usage. </param>
        /// <param name="options"> Optional configuration for run generation. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="store"> Flag indicating whether to store the run and associated messages. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentId"/>, <paramref name="runInputs"/> or <paramref name="runOutputs"/> is null. </exception>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateAndStreamRun(string,long,long,RunInputs,RunOutputs,RunOptions,string,bool?,CancellationToken)']/*" />
        public virtual Response CreateAndStreamRun(string agentId, long createdAt, long completedAt, RunInputs runInputs, RunOutputs runOutputs, RunOptions options = null, string userId = null, bool? store = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(agentId, nameof(agentId));
            Argument.AssertNotNull(runInputs, nameof(runInputs));
            Argument.AssertNotNull(runOutputs, nameof(runOutputs));

            CreateAndStreamRunRequest createAndStreamRunRequest = new CreateAndStreamRunRequest(
                agentId,
                createdAt,
                completedAt,
                runInputs,
                runOutputs,
                options,
                userId,
                store,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateAndStreamRun(createAndStreamRunRequest.ToRequestContent(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Create and stream run.
        /// @route("/run/stream")
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAndStreamRunAsync(string,long,long,RunInputs,RunOutputs,RunOptions,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateAndStreamRunAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateAndStreamRunAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Runs.CreateAndStreamRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateAndStreamRunRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create and stream run.
        /// @route("/run/stream")
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAndStreamRun(string,long,long,RunInputs,RunOutputs,RunOptions,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='CreateAndStreamRun(RequestContent,RequestContext)']/*" />
        public virtual Response CreateAndStreamRun(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Runs.CreateAndStreamRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateAndStreamRunRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all run records, each containing runInputs and runOutputs.
        /// @route("/runs")
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='GetRunsAsync(CancellationToken)']/*" />
        public virtual AsyncPageable<Run> GetRunsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRunsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRunsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => Run.DeserializeRun(e), ClientDiagnostics, _pipeline, "Runs.GetRuns", "value", "nextLink", context);
        }

        /// <summary>
        /// Lists all run records, each containing runInputs and runOutputs.
        /// @route("/runs")
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='GetRuns(CancellationToken)']/*" />
        public virtual Pageable<Run> GetRuns(CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRunsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRunsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => Run.DeserializeRun(e), ClientDiagnostics, _pipeline, "Runs.GetRuns", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists all run records, each containing runInputs and runOutputs.
        /// @route("/runs")
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRunsAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='GetRunsAsync(RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetRunsAsync(RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRunsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRunsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Runs.GetRuns", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists all run records, each containing runInputs and runOutputs.
        /// @route("/runs")
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRuns(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/Runs.xml" path="doc/members/member[@name='GetRuns(RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetRuns(RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRunsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRunsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Runs.GetRuns", "value", "nextLink", context);
        }

        internal HttpMessage CreateCreateRunRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/runs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRunRequest(string runId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/runs/", false);
            uri.AppendPath(runId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateAndExecuteRunRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/runs/execute", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateAndStreamRunRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/runs:createAndStreamRun", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRunsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/runs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRunsNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
