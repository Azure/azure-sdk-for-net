// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Projects1DP
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIProjects1DPModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Projects1DP.Deployment"/>. </summary>
        /// <param name="type"> The type of the deployment. </param>
        /// <param name="name"> Name of the deployment. </param>
        /// <returns> A new <see cref="Projects1DP.Deployment"/> instance for mocking. </returns>
        public static Deployment Deployment(string type = null, string name = null)
        {
            return new UnknownDeployment(type == null ? default : new DeploymentType(type), name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.ModelDeployment"/>. </summary>
        /// <param name="name"> Name of the deployment. </param>
        /// <param name="modelName"> Publisher-specific name of the deployed model. </param>
        /// <param name="modelVersion"> Publisher-specific version of the deployed model. </param>
        /// <param name="modelPublisher"> Name of the deployed model's publisher. </param>
        /// <param name="capabilities"> Capabilities of deployed model. </param>
        /// <param name="sku"> Sku of the model deployment. </param>
        /// <param name="connectionName"> Name of the connection the deployment comes from. </param>
        /// <returns> A new <see cref="Projects1DP.ModelDeployment"/> instance for mocking. </returns>
        public static ModelDeployment ModelDeployment(string name = null, string modelName = null, string modelVersion = null, string modelPublisher = null, IReadOnlyDictionary<string, string> capabilities = null, Sku sku = null, string connectionName = null)
        {
            capabilities ??= new Dictionary<string, string>();

            return new ModelDeployment(
                DeploymentType.ModelDeployment,
                name,
                serializedAdditionalRawData: null,
                modelName,
                modelVersion,
                modelPublisher,
                capabilities,
                sku,
                connectionName);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.Sku"/>. </summary>
        /// <param name="capacity"> Sku capacity. </param>
        /// <param name="family"> Sku family. </param>
        /// <param name="name"> Sku name. </param>
        /// <param name="size"> Sku size. </param>
        /// <param name="tier"> Sku tier. </param>
        /// <returns> A new <see cref="Projects1DP.Sku"/> instance for mocking. </returns>
        public static Sku Sku(long capacity = default, string family = null, string name = null, string size = null, string tier = null)
        {
            return new Sku(
                capacity,
                family,
                name,
                size,
                tier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.Index"/>. </summary>
        /// <param name="type"> Type of index. </param>
        /// <param name="stage"> Asset stage. </param>
        /// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects1DP.Index"/> instance for mocking. </returns>
        public static Index Index(string type = null, string stage = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new UnknownIndex(
                type == null ? default : new IndexType(type),
                stage,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.AzureAISearchIndex"/>. </summary>
        /// <param name="stage"> Asset stage. </param>
        /// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="connectionName"> Name of connection to Azure AI Search. </param>
        /// <param name="indexName"> Name of index in Azure AI Search resource to attach. </param>
        /// <returns> A new <see cref="Projects1DP.AzureAISearchIndex"/> instance for mocking. </returns>
        public static AzureAISearchIndex AzureAISearchIndex(string stage = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null, string connectionName = null, string indexName = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AzureAISearchIndex(
                IndexType.AzureSearch,
                stage,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null,
                connectionName,
                indexName);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.ManagedAzureAISearchIndex"/>. </summary>
        /// <param name="stage"> Asset stage. </param>
        /// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="vectorStoreId"> Vector store id of managed index. </param>
        /// <returns> A new <see cref="Projects1DP.ManagedAzureAISearchIndex"/> instance for mocking. </returns>
        public static ManagedAzureAISearchIndex ManagedAzureAISearchIndex(string stage = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null, string vectorStoreId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ManagedAzureAISearchIndex(
                IndexType.ManagedAzureSearch,
                stage,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null,
                vectorStoreId);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.CosmosDBIndex"/>. </summary>
        /// <param name="stage"> Asset stage. </param>
        /// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="connectionName"> Name of connection to CosmosDB. </param>
        /// <param name="databaseName"> Name of the CosmosDB Database. </param>
        /// <param name="containerName"> Name of CosmosDB Container. </param>
        /// <param name="embeddingConfiguration"> Embedding model configuration. </param>
        /// <returns> A new <see cref="Projects1DP.CosmosDBIndex"/> instance for mocking. </returns>
        public static CosmosDBIndex CosmosDBIndex(string stage = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null, string connectionName = null, string databaseName = null, string containerName = null, EmbeddingConfiguration embeddingConfiguration = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBIndex(
                IndexType.CosmosDB,
                stage,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null,
                connectionName,
                databaseName,
                containerName,
                embeddingConfiguration);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.DatasetVersion"/>. </summary>
        /// <param name="datasetUri"> [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
        /// <param name="type"> Dataset type. </param>
        /// <param name="isReference"> Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted. </param>
        /// <param name="stage"> Asset stage. </param>
        /// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects1DP.DatasetVersion"/> instance for mocking. </returns>
        public static DatasetVersion DatasetVersion(string datasetUri = null, string type = null, bool? isReference = null, string stage = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new UnknownDatasetVersion(
                datasetUri,
                type == null ? default : new DatasetType(type),
                isReference,
                stage,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.FileDatasetVersion"/>. </summary>
        /// <param name="datasetUri"> [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
        /// <param name="isReference"> Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted. </param>
        /// <param name="stage"> Asset stage. </param>
        /// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="openAIPurpose"> Indicates OpenAI Purpose. FileDatasets created with this field will be compatible with OpenAI-specific features. </param>
        /// <returns> A new <see cref="Projects1DP.FileDatasetVersion"/> instance for mocking. </returns>
        public static FileDatasetVersion FileDatasetVersion(string datasetUri = null, bool? isReference = null, string stage = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null, string openAIPurpose = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FileDatasetVersion(
                datasetUri,
                DatasetType.UriFile,
                isReference,
                stage,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null,
                openAIPurpose);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.FolderDatasetVersion"/>. </summary>
        /// <param name="datasetUri"> [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
        /// <param name="isReference"> Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted. </param>
        /// <param name="stage"> Asset stage. </param>
        /// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="version"> The version of the resource. </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Projects1DP.FolderDatasetVersion"/> instance for mocking. </returns>
        public static FolderDatasetVersion FolderDatasetVersion(string datasetUri = null, bool? isReference = null, string stage = null, string id = null, string name = null, string version = null, string description = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FolderDatasetVersion(
                datasetUri,
                DatasetType.UriFolder,
                isReference,
                stage,
                id,
                name,
                version,
                description,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.PendingUploadRequest"/>. </summary>
        /// <param name="pendingUploadId"> If PendingUploadId is not provided, a random GUID will be used. </param>
        /// <param name="connectionName"> Name of Azure blob storage connection to use for generating temporary SAS token. </param>
        /// <param name="pendingUploadType"> TemporaryBlobReference is the only supported type. </param>
        /// <returns> A new <see cref="Projects1DP.PendingUploadRequest"/> instance for mocking. </returns>
        public static PendingUploadRequest PendingUploadRequest(string pendingUploadId = null, string connectionName = null, PendingUploadType pendingUploadType = default)
        {
            return new PendingUploadRequest(pendingUploadId, connectionName, pendingUploadType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.PendingUploadResponse"/>. </summary>
        /// <param name="blobReferenceForConsumption"> Container-level read, write, list SAS. </param>
        /// <param name="pendingUploadId"> ID for this upload request. </param>
        /// <param name="datasetVersion"> Version of dataset to be created if user did not specify version when initially creating upload. </param>
        /// <param name="pendingUploadType"> TemporaryBlobReference is the only supported type. </param>
        /// <returns> A new <see cref="Projects1DP.PendingUploadResponse"/> instance for mocking. </returns>
        public static PendingUploadResponse PendingUploadResponse(BlobReferenceForConsumption blobReferenceForConsumption = null, string pendingUploadId = null, string datasetVersion = null, PendingUploadType pendingUploadType = default)
        {
            return new PendingUploadResponse(blobReferenceForConsumption, pendingUploadId, datasetVersion, pendingUploadType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.BlobReferenceForConsumption"/>. </summary>
        /// <param name="blobUri"> Blob URI path for client to upload data. Example: https://blob.windows.core.net/Container/Path. </param>
        /// <param name="storageAccountArmId"> ARM ID of the storage account to use. </param>
        /// <param name="credential"> Credential info to access the storage account. </param>
        /// <returns> A new <see cref="Projects1DP.BlobReferenceForConsumption"/> instance for mocking. </returns>
        public static BlobReferenceForConsumption BlobReferenceForConsumption(string blobUri = null, string storageAccountArmId = null, SasCredential credential = null)
        {
            return new BlobReferenceForConsumption(blobUri, storageAccountArmId, credential, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.SasCredential"/>. </summary>
        /// <param name="sasToken"> SAS Token. </param>
        /// <returns> A new <see cref="Projects1DP.SasCredential"/> instance for mocking. </returns>
        public static SasCredential SasCredential(string sasToken = null)
        {
            return new SasCredential(CredentialType.SAS, serializedAdditionalRawData: null, sasToken);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.ApiKeyCredential"/>. </summary>
        /// <param name="apiKey"> API Key. </param>
        /// <returns> A new <see cref="Projects1DP.ApiKeyCredential"/> instance for mocking. </returns>
        public static ApiKeyCredential ApiKeyCredential(string apiKey = null)
        {
            return new ApiKeyCredential(CredentialType.ApiKey, serializedAdditionalRawData: null, apiKey);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.Evaluation"/>. </summary>
        /// <param name="id"> Identifier of the evaluation. </param>
        /// <param name="data">
        /// Data for evaluation.
        /// Please note <see cref="InputData"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="InputDataset"/>.
        /// </param>
        /// <param name="displayName"> Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. </param>
        /// <param name="description"> Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. </param>
        /// <param name="status"> Status of the evaluation. It is set by service and is read-only. </param>
        /// <param name="tags"> Evaluation's tags. Unlike properties, tags are fully mutable. </param>
        /// <param name="properties"> Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <returns> A new <see cref="Projects1DP.Evaluation"/> instance for mocking. </returns>
        public static Evaluation Evaluation(string id = null, InputData data = null, string displayName = null, string description = null, string status = null, IDictionary<string, string> tags = null, IDictionary<string, string> properties = null, IDictionary<string, EvaluatorConfiguration> evaluators = null)
        {
            tags ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();
            evaluators ??= new Dictionary<string, EvaluatorConfiguration>();

            return new Evaluation(
                id,
                data,
                displayName,
                description,
                status,
                tags,
                properties,
                evaluators,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.Connection"/>. </summary>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> Category of the connection. </param>
        /// <param name="target"> The connection URL to be used for this service. </param>
        /// <param name="metadata"> Metadata of the connection. </param>
        /// <returns> A new <see cref="Projects1DP.Connection"/> instance for mocking. </returns>
        public static Connection Connection(string name = null, ConnectionType type = default, string target = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new Connection(name, type, target, metadata, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.Agent"/>. </summary>
        /// <param name="agentId"> A unique identifier for the agent. </param>
        /// <param name="description"> A description of the agent; used for display purposes and to describe the agent. </param>
        /// <param name="metadata"> Arbitrary metadata associated with this agent. </param>
        /// <param name="name"> The name of the agent; used for display purposes and sent to the LLM to identify the agent. </param>
        /// <param name="agentModel">
        /// The model definition for this agent.
        /// Please note <see cref="AgentModel"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureAgentModel"/> and <see cref="OpenAIAgentModel"/>.
        /// </param>
        /// <param name="instructions"> Instructions provided to guide how this agent operates. </param>
        /// <param name="tools">
        /// A list of tool definitions available to the agent.
        /// Please note <see cref="AgentToolDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BingGroundingToolDefinition"/>, <see cref="CodeInterpreterToolDefinition"/>, <see cref="FileSearchToolDefinition"/> and <see cref="OpenApiToolDefinition"/>.
        /// </param>
        /// <param name="toolChoice">
        /// How the agent should choose among provided tools.
        /// Please note <see cref="ToolChoiceBehavior"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoToolChoiceBehavior"/>, <see cref="NoneToolChoiceBehavior"/> and <see cref="RequiredToolChoiceBehavior"/>.
        /// </param>
        /// <returns> A new <see cref="Projects1DP.Agent"/> instance for mocking. </returns>
        public static Agent Agent(string agentId = null, string description = null, IDictionary<string, string> metadata = null, string name = null, AgentModel agentModel = null, IEnumerable<DeveloperMessage> instructions = null, IEnumerable<AgentToolDefinition> tools = null, ToolChoiceBehavior toolChoice = null)
        {
            metadata ??= new Dictionary<string, string>();
            instructions ??= new List<DeveloperMessage>();
            tools ??= new List<AgentToolDefinition>();

            return new Agent(
                agentId,
                description,
                metadata,
                name,
                agentModel,
                instructions?.ToList(),
                tools?.ToList(),
                toolChoice,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.DeveloperMessage"/>. </summary>
        /// <param name="userId"> The ID of the user who created the message (if applicable). </param>
        /// <param name="agentId"> The ID of the agent who created the message (if applicable). </param>
        /// <param name="messageId"> A unique identifier for this message. </param>
        /// <param name="agentRunId"> A unique run ID, if this message was generated by a run process. </param>
        /// <param name="threadId"> The thread to which this message belongs. </param>
        /// <param name="content">
        /// The contents of the message.
        /// Please note <see cref="AIContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioContent"/>, <see cref="ContentFilterContent"/>, <see cref="FileContent"/>, <see cref="ImageContent"/>, <see cref="RefusalContent"/>, <see cref="TextContent"/>, <see cref="ToolCallContent"/>, <see cref="ToolResultContent"/> and <see cref="VideoContent"/>.
        /// </param>
        /// <param name="authorName"> An optional display name for the author. </param>
        /// <param name="createdAt"> The timestamp (in Unix time) when this message was created. </param>
        /// <param name="completedAt"> The timestamp (in Unix time) when this message was completed, if applicable. </param>
        /// <returns> A new <see cref="Projects1DP.DeveloperMessage"/> instance for mocking. </returns>
        public static DeveloperMessage DeveloperMessage(string userId = null, string agentId = null, string messageId = null, string agentRunId = null, string threadId = null, IEnumerable<AIContent> content = null, string authorName = null, long? createdAt = null, long? completedAt = null)
        {
            content ??= new List<AIContent>();

            return new DeveloperMessage(
                userId,
                agentId,
                messageId,
                agentRunId,
                threadId,
                Projects1DP.AuthorRole?.Developer,
                content?.ToList(),
                authorName,
                createdAt,
                completedAt,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.ChatMessage"/>. </summary>
        /// <param name="userId"> The ID of the user who created the message (if applicable). </param>
        /// <param name="agentId"> The ID of the agent who created the message (if applicable). </param>
        /// <param name="messageId"> A unique identifier for this message. </param>
        /// <param name="agentRunId"> A unique run ID, if this message was generated by a run process. </param>
        /// <param name="threadId"> The thread to which this message belongs. </param>
        /// <param name="role"> The role of this message's author. </param>
        /// <param name="content">
        /// The contents of the message.
        /// Please note <see cref="AIContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioContent"/>, <see cref="ContentFilterContent"/>, <see cref="FileContent"/>, <see cref="ImageContent"/>, <see cref="RefusalContent"/>, <see cref="TextContent"/>, <see cref="ToolCallContent"/>, <see cref="ToolResultContent"/> and <see cref="VideoContent"/>.
        /// </param>
        /// <param name="authorName"> An optional display name for the author. </param>
        /// <param name="createdAt"> The timestamp (in Unix time) when this message was created. </param>
        /// <param name="completedAt"> The timestamp (in Unix time) when this message was completed, if applicable. </param>
        /// <returns> A new <see cref="Projects1DP.ChatMessage"/> instance for mocking. </returns>
        public static ChatMessage ChatMessage(string userId = null, string agentId = null, string messageId = null, string agentRunId = null, string threadId = null, string role = null, IEnumerable<AIContent> content = null, string authorName = null, long? createdAt = null, long? completedAt = null)
        {
            content ??= new List<AIContent>();

            return new UnknownChatMessage(
                userId,
                agentId,
                messageId,
                agentRunId,
                threadId,
                role == null ? null : new AuthorRole?(role),
                content?.ToList(),
                authorName,
                createdAt,
                completedAt,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.UserMessage"/>. </summary>
        /// <param name="userId"> The ID of the user who created the message (if applicable). </param>
        /// <param name="agentId"> The ID of the agent who created the message (if applicable). </param>
        /// <param name="messageId"> A unique identifier for this message. </param>
        /// <param name="agentRunId"> A unique run ID, if this message was generated by a run process. </param>
        /// <param name="threadId"> The thread to which this message belongs. </param>
        /// <param name="content">
        /// The contents of the message.
        /// Please note <see cref="AIContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioContent"/>, <see cref="ContentFilterContent"/>, <see cref="FileContent"/>, <see cref="ImageContent"/>, <see cref="RefusalContent"/>, <see cref="TextContent"/>, <see cref="ToolCallContent"/>, <see cref="ToolResultContent"/> and <see cref="VideoContent"/>.
        /// </param>
        /// <param name="authorName"> An optional display name for the author. </param>
        /// <param name="createdAt"> The timestamp (in Unix time) when this message was created. </param>
        /// <param name="completedAt"> The timestamp (in Unix time) when this message was completed, if applicable. </param>
        /// <returns> A new <see cref="Projects1DP.UserMessage"/> instance for mocking. </returns>
        public static UserMessage UserMessage(string userId = null, string agentId = null, string messageId = null, string agentRunId = null, string threadId = null, IEnumerable<AIContent> content = null, string authorName = null, long? createdAt = null, long? completedAt = null)
        {
            content ??= new List<AIContent>();

            return new UserMessage(
                userId,
                agentId,
                messageId,
                agentRunId,
                threadId,
                Projects1DP.AuthorRole?.User,
                content?.ToList(),
                authorName,
                createdAt,
                completedAt,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.AgentMessage"/>. </summary>
        /// <param name="userId"> The ID of the user who created the message (if applicable). </param>
        /// <param name="agentId"> The ID of the agent who created the message (if applicable). </param>
        /// <param name="messageId"> A unique identifier for this message. </param>
        /// <param name="agentRunId"> A unique run ID, if this message was generated by a run process. </param>
        /// <param name="threadId"> The thread to which this message belongs. </param>
        /// <param name="content">
        /// The contents of the message.
        /// Please note <see cref="AIContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioContent"/>, <see cref="ContentFilterContent"/>, <see cref="FileContent"/>, <see cref="ImageContent"/>, <see cref="RefusalContent"/>, <see cref="TextContent"/>, <see cref="ToolCallContent"/>, <see cref="ToolResultContent"/> and <see cref="VideoContent"/>.
        /// </param>
        /// <param name="authorName"> An optional display name for the author. </param>
        /// <param name="createdAt"> The timestamp (in Unix time) when this message was created. </param>
        /// <param name="completedAt"> The timestamp (in Unix time) when this message was completed, if applicable. </param>
        /// <returns> A new <see cref="Projects1DP.AgentMessage"/> instance for mocking. </returns>
        public static AgentMessage AgentMessage(string userId = null, string agentId = null, string messageId = null, string agentRunId = null, string threadId = null, IEnumerable<AIContent> content = null, string authorName = null, long? createdAt = null, long? completedAt = null)
        {
            content ??= new List<AIContent>();

            return new AgentMessage(
                userId,
                agentId,
                messageId,
                agentRunId,
                threadId,
                Projects1DP.AuthorRole?.Agent,
                content?.ToList(),
                authorName,
                createdAt,
                completedAt,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.SystemMessage"/>. </summary>
        /// <param name="userId"> The ID of the user who created the message (if applicable). </param>
        /// <param name="agentId"> The ID of the agent who created the message (if applicable). </param>
        /// <param name="messageId"> A unique identifier for this message. </param>
        /// <param name="agentRunId"> A unique run ID, if this message was generated by a run process. </param>
        /// <param name="threadId"> The thread to which this message belongs. </param>
        /// <param name="content">
        /// The contents of the message.
        /// Please note <see cref="AIContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioContent"/>, <see cref="ContentFilterContent"/>, <see cref="FileContent"/>, <see cref="ImageContent"/>, <see cref="RefusalContent"/>, <see cref="TextContent"/>, <see cref="ToolCallContent"/>, <see cref="ToolResultContent"/> and <see cref="VideoContent"/>.
        /// </param>
        /// <param name="authorName"> An optional display name for the author. </param>
        /// <param name="createdAt"> The timestamp (in Unix time) when this message was created. </param>
        /// <param name="completedAt"> The timestamp (in Unix time) when this message was completed, if applicable. </param>
        /// <returns> A new <see cref="Projects1DP.SystemMessage"/> instance for mocking. </returns>
        public static SystemMessage SystemMessage(string userId = null, string agentId = null, string messageId = null, string agentRunId = null, string threadId = null, IEnumerable<AIContent> content = null, string authorName = null, long? createdAt = null, long? completedAt = null)
        {
            content ??= new List<AIContent>();

            return new SystemMessage(
                userId,
                agentId,
                messageId,
                agentRunId,
                threadId,
                Projects1DP.AuthorRole?.System,
                content?.ToList(),
                authorName,
                createdAt,
                completedAt,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.ToolMessage"/>. </summary>
        /// <param name="userId"> The ID of the user who created the message (if applicable). </param>
        /// <param name="agentId"> The ID of the agent who created the message (if applicable). </param>
        /// <param name="messageId"> A unique identifier for this message. </param>
        /// <param name="agentRunId"> A unique run ID, if this message was generated by a run process. </param>
        /// <param name="threadId"> The thread to which this message belongs. </param>
        /// <param name="content">
        /// The contents of the message.
        /// Please note <see cref="AIContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioContent"/>, <see cref="ContentFilterContent"/>, <see cref="FileContent"/>, <see cref="ImageContent"/>, <see cref="RefusalContent"/>, <see cref="TextContent"/>, <see cref="ToolCallContent"/>, <see cref="ToolResultContent"/> and <see cref="VideoContent"/>.
        /// </param>
        /// <param name="authorName"> An optional display name for the author. </param>
        /// <param name="createdAt"> The timestamp (in Unix time) when this message was created. </param>
        /// <param name="completedAt"> The timestamp (in Unix time) when this message was completed, if applicable. </param>
        /// <returns> A new <see cref="Projects1DP.ToolMessage"/> instance for mocking. </returns>
        public static ToolMessage ToolMessage(string userId = null, string agentId = null, string messageId = null, string agentRunId = null, string threadId = null, IEnumerable<AIContent> content = null, string authorName = null, long? createdAt = null, long? completedAt = null)
        {
            content ??= new List<AIContent>();

            return new ToolMessage(
                userId,
                agentId,
                messageId,
                agentRunId,
                threadId,
                Projects1DP.AuthorRole?.Tool,
                content?.ToList(),
                authorName,
                createdAt,
                completedAt,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.Run"/>. </summary>
        /// <param name="agentId"> Unique identifier for the agent responsible for the run. </param>
        /// <param name="runId"> Unique identifier for this run. </param>
        /// <param name="createdAt"> Timestamp when the run was initiated (Unix time). </param>
        /// <param name="completedAt"> Timestamp when the run finished processing (Unix time). </param>
        /// <param name="runInputs"> The inputs that were used to start this run. </param>
        /// <param name="runOutputs"> The final outcome of this run, including status, output messages, token usage. </param>
        /// <param name="options"> Optional configuration for run generation. </param>
        /// <param name="userId"> Identifier for the user making the request. </param>
        /// <param name="store"> Flag indicating whether to store the run and associated messages. </param>
        /// <returns> A new <see cref="Projects1DP.Run"/> instance for mocking. </returns>
        public static Run Run(string agentId = null, string runId = null, long createdAt = default, long completedAt = default, RunInputs runInputs = null, RunOutputs runOutputs = null, RunOptions options = null, string userId = null, bool? store = null)
        {
            return new Run(
                agentId,
                runId,
                createdAt,
                completedAt,
                runInputs,
                runOutputs,
                options,
                userId,
                store,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Projects1DP.Thread"/>. </summary>
        /// <param name="threadId"> A unique identifier for this thread. </param>
        /// <param name="messages">
        /// A list of messages in this thread.
        /// Please note <see cref="Projects1DP.ChatMessage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Projects1DP.AgentMessage"/>, <see cref="Projects1DP.DeveloperMessage"/>, <see cref="Projects1DP.SystemMessage"/>, <see cref="Projects1DP.ToolMessage"/> and <see cref="Projects1DP.UserMessage"/>.
        /// </param>
        /// <returns> A new <see cref="Projects1DP.Thread"/> instance for mocking. </returns>
        public static Thread Thread(string threadId = null, IEnumerable<ChatMessage> messages = null)
        {
            messages ??= new List<ChatMessage>();

            return new Thread(threadId, messages?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
