// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Inference
{
    /// <summary>
    /// A response format for Chat Completions that restricts responses to emitting valid JSON objects, with a
    /// JSON schema specified by the caller.
    /// </summary>
    internal partial class ChatCompletionsResponseFormatJsonSchema : ChatCompletionsResponseFormat
    {
        /// <summary> Initializes a new instance of <see cref="ChatCompletionsResponseFormatJsonSchema"/>. </summary>
        /// <param name="jsonSchema"> The definition of the required JSON schema in the response, and associated metadata. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jsonSchema"/> is null. </exception>
        public ChatCompletionsResponseFormatJsonSchema(ChatCompletionsResponseFormatJsonSchemaDefinition jsonSchema)
        {
            Argument.AssertNotNull(jsonSchema, nameof(jsonSchema));

            Type = "json_schema";
            JsonSchema = jsonSchema;
        }

        /// <summary> Initializes a new instance of <see cref="ChatCompletionsResponseFormatJsonSchema"/>. </summary>
        /// <param name="type"> The response format type to use for chat completions. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="jsonSchema"> The definition of the required JSON schema in the response, and associated metadata. </param>
        internal ChatCompletionsResponseFormatJsonSchema(string type, IDictionary<string, BinaryData> serializedAdditionalRawData, ChatCompletionsResponseFormatJsonSchemaDefinition jsonSchema) : base(type, serializedAdditionalRawData)
        {
            JsonSchema = jsonSchema;
        }

        /// <summary> Initializes a new instance of <see cref="ChatCompletionsResponseFormatJsonSchema"/> for deserialization. </summary>
        internal ChatCompletionsResponseFormatJsonSchema()
        {
        }

        /// <summary> The definition of the required JSON schema in the response, and associated metadata. </summary>
        public ChatCompletionsResponseFormatJsonSchemaDefinition JsonSchema { get; }
    }
}
