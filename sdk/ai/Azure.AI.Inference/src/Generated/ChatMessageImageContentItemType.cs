// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Inference
{
    /// <summary> The ChatMessageImageContentItemType. </summary>
    public readonly partial struct ChatMessageImageContentItemType : IEquatable<ChatMessageImageContentItemType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ChatMessageImageContentItemType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ChatMessageImageContentItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ImageUrlValue = "image_url";

        /// <summary> image_url. </summary>
        public static ChatMessageImageContentItemType ImageUrl { get; } = new ChatMessageImageContentItemType(ImageUrlValue);
        /// <summary> Determines if two <see cref="ChatMessageImageContentItemType"/> values are the same. </summary>
        public static bool operator ==(ChatMessageImageContentItemType left, ChatMessageImageContentItemType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ChatMessageImageContentItemType"/> values are not the same. </summary>
        public static bool operator !=(ChatMessageImageContentItemType left, ChatMessageImageContentItemType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ChatMessageImageContentItemType"/>. </summary>
        public static implicit operator ChatMessageImageContentItemType(string value) => new ChatMessageImageContentItemType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ChatMessageImageContentItemType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ChatMessageImageContentItemType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
