// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Inference
{
    /// <summary> The definition of the required JSON schema in the response, and associated metadata. </summary>
    internal partial class ChatCompletionsResponseFormatJsonSchemaDefinition
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ChatCompletionsResponseFormatJsonSchemaDefinition"/>. </summary>
        /// <param name="name"> The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. </param>
        /// <param name="schema"> The definition of the JSON schema. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="schema"/> is null. </exception>
        public ChatCompletionsResponseFormatJsonSchemaDefinition(string name, IDictionary<string, BinaryData> schema)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(schema, nameof(schema));

            Name = name;
            Schema = schema;
        }

        /// <summary> Initializes a new instance of <see cref="ChatCompletionsResponseFormatJsonSchemaDefinition"/>. </summary>
        /// <param name="name"> The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. </param>
        /// <param name="schema"> The definition of the JSON schema. </param>
        /// <param name="description"> A description of the response format, used by the AI model to determine how to generate responses in this format. </param>
        /// <param name="strict">
        /// Whether to enable strict schema adherence when generating the output.
        /// If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of
        /// JSON Schema is supported when `strict` is `true`.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ChatCompletionsResponseFormatJsonSchemaDefinition(string name, IDictionary<string, BinaryData> schema, string description, bool? strict, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Schema = schema;
            Description = description;
            Strict = strict;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ChatCompletionsResponseFormatJsonSchemaDefinition"/> for deserialization. </summary>
        internal ChatCompletionsResponseFormatJsonSchemaDefinition()
        {
        }

        /// <summary> The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. </summary>
        public string Name { get; }
        /// <summary>
        /// The definition of the JSON schema
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Schema { get; }
        /// <summary> A description of the response format, used by the AI model to determine how to generate responses in this format. </summary>
        public string Description { get; set; }
        /// <summary>
        /// Whether to enable strict schema adherence when generating the output.
        /// If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of
        /// JSON Schema is supported when `strict` is `true`.
        /// </summary>
        public bool? Strict { get; set; }
    }
}
