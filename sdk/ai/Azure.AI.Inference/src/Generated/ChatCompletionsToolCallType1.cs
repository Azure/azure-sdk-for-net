// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Inference
{
    /// <summary> The ChatCompletionsToolCallType1. </summary>
    public readonly partial struct ChatCompletionsToolCallType1 : IEquatable<ChatCompletionsToolCallType1>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ChatCompletionsToolCallType1"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ChatCompletionsToolCallType1(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FunctionValue = "function";

        /// <summary> function. </summary>
        public static ChatCompletionsToolCallType1 Function { get; } = new ChatCompletionsToolCallType1(FunctionValue);
        /// <summary> Determines if two <see cref="ChatCompletionsToolCallType1"/> values are the same. </summary>
        public static bool operator ==(ChatCompletionsToolCallType1 left, ChatCompletionsToolCallType1 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ChatCompletionsToolCallType1"/> values are not the same. </summary>
        public static bool operator !=(ChatCompletionsToolCallType1 left, ChatCompletionsToolCallType1 right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ChatCompletionsToolCallType1"/>. </summary>
        public static implicit operator ChatCompletionsToolCallType1(string value) => new ChatCompletionsToolCallType1(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ChatCompletionsToolCallType1 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ChatCompletionsToolCallType1 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
