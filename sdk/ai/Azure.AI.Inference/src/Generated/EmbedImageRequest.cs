// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Inference
{
    /// <summary> The EmbedImageRequest. </summary>
    internal partial class EmbedImageRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EmbedImageRequest"/>. </summary>
        /// <param name="input">
        /// Input image to embed. To embed multiple inputs in a single request, pass an array.
        /// The input must not exceed the max input tokens for the model.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public EmbedImageRequest(IEnumerable<EmbeddingInput> input)
        {
            Argument.AssertNotNull(input, nameof(input));

            Input = input.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="EmbedImageRequest"/>. </summary>
        /// <param name="input">
        /// Input image to embed. To embed multiple inputs in a single request, pass an array.
        /// The input must not exceed the max input tokens for the model.
        /// </param>
        /// <param name="dimensions">
        /// Optional. The number of dimensions the resulting output embeddings should have.
        /// Passing null causes the model to use its default value.
        /// Returns a 422 error if the model doesn't support the value or parameter.
        /// </param>
        /// <param name="encodingFormat">
        /// Optional. The number of dimensions the resulting output embeddings should have.
        /// Passing null causes the model to use its default value.
        /// Returns a 422 error if the model doesn't support the value or parameter.
        /// </param>
        /// <param name="inputType">
        /// Optional. The type of the input.
        /// Returns a 422 error if the model doesn't support the value or parameter.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EmbedImageRequest(IList<EmbeddingInput> input, int? dimensions, EmbeddingEncodingFormat? encodingFormat, EmbeddingInputType? inputType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Input = input;
            Dimensions = dimensions;
            EncodingFormat = encodingFormat;
            InputType = inputType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EmbedImageRequest"/> for deserialization. </summary>
        internal EmbedImageRequest()
        {
        }

        /// <summary>
        /// Input image to embed. To embed multiple inputs in a single request, pass an array.
        /// The input must not exceed the max input tokens for the model.
        /// </summary>
        public IList<EmbeddingInput> Input { get; }
        /// <summary>
        /// Optional. The number of dimensions the resulting output embeddings should have.
        /// Passing null causes the model to use its default value.
        /// Returns a 422 error if the model doesn't support the value or parameter.
        /// </summary>
        public int? Dimensions { get; set; }
        /// <summary>
        /// Optional. The number of dimensions the resulting output embeddings should have.
        /// Passing null causes the model to use its default value.
        /// Returns a 422 error if the model doesn't support the value or parameter.
        /// </summary>
        public EmbeddingEncodingFormat? EncodingFormat { get; set; }
        /// <summary>
        /// Optional. The type of the input.
        /// Returns a 422 error if the model doesn't support the value or parameter.
        /// </summary>
        public EmbeddingInputType? InputType { get; set; }
    }
}
