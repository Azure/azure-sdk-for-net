// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Inference
{
    /// <summary>
    /// The format of the embeddings result.
    /// Returns a 422 error if the model doesn't support the value or parameter.
    /// </summary>
    public readonly partial struct EmbeddingEncodingFormat : IEquatable<EmbeddingEncodingFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EmbeddingEncodingFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EmbeddingEncodingFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Base64Value = "base64";
        private const string BinaryValue = "binary";
        private const string FloatValue = "float";
        private const string Int8Value = "int8";
        private const string UbinaryValue = "ubinary";
        private const string Uint8Value = "uint8";

        /// <summary> Base64. </summary>
        public static EmbeddingEncodingFormat Base64 { get; } = new EmbeddingEncodingFormat(Base64Value);
        /// <summary> Binary. </summary>
        public static EmbeddingEncodingFormat Binary { get; } = new EmbeddingEncodingFormat(BinaryValue);
        /// <summary> Floating point. </summary>
        public static EmbeddingEncodingFormat Float { get; } = new EmbeddingEncodingFormat(FloatValue);
        /// <summary> Signed 8-bit integer. </summary>
        public static EmbeddingEncodingFormat Int8 { get; } = new EmbeddingEncodingFormat(Int8Value);
        /// <summary> ubinary. </summary>
        public static EmbeddingEncodingFormat Ubinary { get; } = new EmbeddingEncodingFormat(UbinaryValue);
        /// <summary> Unsigned 8-bit integer. </summary>
        public static EmbeddingEncodingFormat Uint8 { get; } = new EmbeddingEncodingFormat(Uint8Value);
        /// <summary> Determines if two <see cref="EmbeddingEncodingFormat"/> values are the same. </summary>
        public static bool operator ==(EmbeddingEncodingFormat left, EmbeddingEncodingFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EmbeddingEncodingFormat"/> values are not the same. </summary>
        public static bool operator !=(EmbeddingEncodingFormat left, EmbeddingEncodingFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EmbeddingEncodingFormat"/>. </summary>
        public static implicit operator EmbeddingEncodingFormat(string value) => new EmbeddingEncodingFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EmbeddingEncodingFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EmbeddingEncodingFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
