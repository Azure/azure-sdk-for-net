// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.Inference
{
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text/src/Generated/CharacterMaskPolicyType.Serialization.cs
    public partial class CharacterMaskPolicyType : IUtf8JsonSerializable, IJsonModel<CharacterMaskPolicyType>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CharacterMaskPolicyType>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CharacterMaskPolicyType>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
========
    internal partial class ChatMessageAudioDataContentItem : IUtf8JsonSerializable, IJsonModel<ChatMessageAudioDataContentItem>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ChatMessageAudioDataContentItem>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ChatMessageAudioDataContentItem>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
>>>>>>>> main:sdk/ai/Azure.AI.Inference/src/Generated/ChatMessageAudioDataContentItem.Serialization.cs
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text/src/Generated/CharacterMaskPolicyType.Serialization.cs
            var format = options.Format == "W" ? ((IPersistableModel<CharacterMaskPolicyType>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CharacterMaskPolicyType)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(RedactionCharacter))
            {
                writer.WritePropertyName("redactionCharacter"u8);
                writer.WriteStringValue(RedactionCharacter.Value.ToString());
            }
        }

        CharacterMaskPolicyType IJsonModel<CharacterMaskPolicyType>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CharacterMaskPolicyType>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CharacterMaskPolicyType)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCharacterMaskPolicyType(document.RootElement, options);
        }

        internal static CharacterMaskPolicyType DeserializeCharacterMaskPolicyType(JsonElement element, ModelReaderWriterOptions options = null)
========
            var format = options.Format == "W" ? ((IPersistableModel<ChatMessageAudioDataContentItem>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ChatMessageAudioDataContentItem)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("input_audio"u8);
            writer.WriteObjectValue(InputAudio, options);
        }

        ChatMessageAudioDataContentItem IJsonModel<ChatMessageAudioDataContentItem>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ChatMessageAudioDataContentItem>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ChatMessageAudioDataContentItem)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeChatMessageAudioDataContentItem(document.RootElement, options);
        }

        internal static ChatMessageAudioDataContentItem DeserializeChatMessageAudioDataContentItem(JsonElement element, ModelReaderWriterOptions options = null)
>>>>>>>> main:sdk/ai/Azure.AI.Inference/src/Generated/ChatMessageAudioDataContentItem.Serialization.cs
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text/src/Generated/CharacterMaskPolicyType.Serialization.cs
            RedactionCharacter? redactionCharacter = default;
            RedactionPolicyKind policyKind = default;
========
            ChatMessageInputAudio inputAudio = default;
            string type = default;
>>>>>>>> main:sdk/ai/Azure.AI.Inference/src/Generated/ChatMessageAudioDataContentItem.Serialization.cs
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text/src/Generated/CharacterMaskPolicyType.Serialization.cs
                if (property.NameEquals("redactionCharacter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    redactionCharacter = new RedactionCharacter(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("policyKind"u8))
                {
                    policyKind = new RedactionPolicyKind(property.Value.GetString());
========
                if (property.NameEquals("input_audio"u8))
                {
                    inputAudio = ChatMessageInputAudio.DeserializeChatMessageInputAudio(property.Value, options);
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
>>>>>>>> main:sdk/ai/Azure.AI.Inference/src/Generated/ChatMessageAudioDataContentItem.Serialization.cs
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text/src/Generated/CharacterMaskPolicyType.Serialization.cs
            return new CharacterMaskPolicyType(policyKind, serializedAdditionalRawData, redactionCharacter);
        }

        BinaryData IPersistableModel<CharacterMaskPolicyType>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CharacterMaskPolicyType>)this).GetFormatFromOptions(options) : options.Format;
========
            return new ChatMessageAudioDataContentItem(type, serializedAdditionalRawData, inputAudio);
        }

        BinaryData IPersistableModel<ChatMessageAudioDataContentItem>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ChatMessageAudioDataContentItem>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/ai/Azure.AI.Inference/src/Generated/ChatMessageAudioDataContentItem.Serialization.cs

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text/src/Generated/CharacterMaskPolicyType.Serialization.cs
                    throw new FormatException($"The model {nameof(CharacterMaskPolicyType)} does not support writing '{options.Format}' format.");
            }
        }

        CharacterMaskPolicyType IPersistableModel<CharacterMaskPolicyType>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CharacterMaskPolicyType>)this).GetFormatFromOptions(options) : options.Format;
========
                    throw new FormatException($"The model {nameof(ChatMessageAudioDataContentItem)} does not support writing '{options.Format}' format.");
            }
        }

        ChatMessageAudioDataContentItem IPersistableModel<ChatMessageAudioDataContentItem>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ChatMessageAudioDataContentItem>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/ai/Azure.AI.Inference/src/Generated/ChatMessageAudioDataContentItem.Serialization.cs

            switch (format)
            {
                case "J":
                    {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text/src/Generated/CharacterMaskPolicyType.Serialization.cs
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeCharacterMaskPolicyType(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CharacterMaskPolicyType)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CharacterMaskPolicyType>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new CharacterMaskPolicyType FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeCharacterMaskPolicyType(document.RootElement);
========
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeChatMessageAudioDataContentItem(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ChatMessageAudioDataContentItem)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ChatMessageAudioDataContentItem>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new ChatMessageAudioDataContentItem FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeChatMessageAudioDataContentItem(document.RootElement);
>>>>>>>> main:sdk/ai/Azure.AI.Inference/src/Generated/ChatMessageAudioDataContentItem.Serialization.cs
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
