// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Inference
{
    /// <summary> Represents an image with optional text. </summary>
    public partial class ImageEmbeddingInput
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ImageEmbeddingInput"/>. </summary>
        /// <param name="image"> The input image encoded in base64 string as a data URL. Example: `data:image/{format};base64,{data}`. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="image"/> is null. </exception>
        public ImageEmbeddingInput(string image)
        {
            Argument.AssertNotNull(image, nameof(image));

            Image = image;
        }

        /// <summary> Initializes a new instance of <see cref="ImageEmbeddingInput"/>. </summary>
        /// <param name="image"> The input image encoded in base64 string as a data URL. Example: `data:image/{format};base64,{data}`. </param>
        /// <param name="text">
        /// Optional. The text input to feed into the model (like DINO, CLIP).
        /// Returns a 422 error if the model doesn't support the value or parameter.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ImageEmbeddingInput(string image, string text, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Image = image;
            Text = text;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ImageEmbeddingInput"/> for deserialization. </summary>
        internal ImageEmbeddingInput()
        {
        }

        /// <summary> The input image encoded in base64 string as a data URL. Example: `data:image/{format};base64,{data}`. </summary>
        public string Image { get; }
        /// <summary>
        /// Optional. The text input to feed into the model (like DINO, CLIP).
        /// Returns a 422 error if the model doesn't support the value or parameter.
        /// </summary>
        public string Text { get; set; }
    }
}
