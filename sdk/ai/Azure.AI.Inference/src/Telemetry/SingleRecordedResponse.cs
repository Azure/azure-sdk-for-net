// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.Inference.Telemetry
{
    internal class SingleRecordedResponse : AbstractRecordedResponse
    {
        private readonly string[] _completions;
        /// <summary>
        /// Create the instance of Single recorded response.
        /// </summary>
        /// <param name="traceContent">If true the messges and function names will be recorded.</param>
        /// <param name="response"></param>
        public SingleRecordedResponse(ChatCompletions response, bool traceContent) {
            Id = response.Id;
            Model = response.Model;
            PromptTokens = response.Usage.PromptTokens;
            CompletionTokens = response.Usage.CompletionTokens;

            _completions = new string[response.Choices.Count];
            // Record the event for each response
            int i = 0;
            // For ChatCompletions we do not have single finish reason
            // we will take it from the last chat choice.
            if (response.Choices.Count > 0)
            
            foreach (ChatChoice choice in response.Choices)
            {
                if (choice.FinishReason != null)
                    FinishReason.Add(choice.FinishReason.ToString());
                var evt = new Dictionary<string, object> {
                    {"finish_reason", choice.FinishReason?.ToString() },
                    {"index", choice.Index},
                };
                var messageDict = new Dictionary<string, object>();
                if (traceContent)
                {
                    messageDict["content"] = choice.Message.Content;
                    evt["message"] = messageDict;
                }
                if (choice.Message.ToolCalls != null && choice.Message.ToolCalls.Count > 0)
                {
                    var calls = new List<Dictionary<string, object>>();
                    if (traceContent)
                    {
                        foreach (ChatCompletionsFunctionToolCall toolCall in choice.Message.ToolCalls)
                        {
                            calls.Add(JsonSerializer.Deserialize<Dictionary<string, object>>(toolCall.Arguments));
                        }
                    }
                    messageDict.Add("tool_calls", calls);
                    evt["message"] = messageDict;
                }
                _completions[i] = JsonSerializer.Serialize(evt);
                i++;
            }
        }

        public override string[] GetSerializedCompletions() { return _completions; }
    }
}
