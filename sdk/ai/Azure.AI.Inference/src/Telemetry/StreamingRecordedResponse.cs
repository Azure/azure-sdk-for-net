// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System.Collections.Generic;
using System.Text;
using System.Text.Json;

namespace Azure.AI.Inference.Telemetry
{
    internal class StreamingRecordedResponse : AbstractRecordedResponse
    {
        private StringBuilder m_contents = new();
        private Dictionary<string, StringBuilder> m_hshFunctionArgs = new();

        /// <summary>
        /// Construct the streaming response based on first returned item.
        /// </summary>
        public StreamingRecordedResponse(){}

        public void Update(StreamingChatCompletionsUpdate item)
        {
            Model = item.Model;
            Id = item.Id;
            if (item.FinishReason != null)
            {
                FinishReason = item.FinishReason.ToString();
            }
            if (item.Usage != null)
            {
                CompletionTokens = item.Usage.CompletionTokens;
                PromptTokens = item.Usage.PromptTokens;
            }
            if (!string.IsNullOrEmpty(item.ContentUpdate))
                m_contents.Append(item.ContentUpdate);
            if (string.IsNullOrEmpty(item.FunctionName) || string.IsNullOrEmpty(item.FunctionArgumentsUpdate))
                return;
            if (m_hshFunctionArgs.TryGetValue(item.FunctionName, out StringBuilder sbArgs))
            {
                sbArgs.Append(item.FunctionArgumentsUpdate);
            }
            else
            {
                m_hshFunctionArgs.Add(item.FunctionName, new StringBuilder(item.FunctionArgumentsUpdate));
            }
        }

        private List<Dictionary<string, object>> GetFuncArgs()
        {
            List<Dictionary<string, object>> listArgs = new();
            foreach (StringBuilder sb in m_hshFunctionArgs.Values)
            {
                if (sb.Length > 0)
                    listArgs.Add(JsonSerializer.Deserialize<Dictionary<string, object>>(sb.ToString()));
            }
            return listArgs;
        }

        public override string[] GetSerializedCompletions() {
            var messageDict = new Dictionary<string, object>
            {
                {"content", m_contents.ToString()}
            };
            var evt = new Dictionary<string, object> {
                {"message", messageDict },
                {"finish_reason", FinishReason },
                {"index", 0},
            };
            if (m_hshFunctionArgs.Count > 0)
            {
                messageDict.Add("tool_calls", GetFuncArgs());
            }
            return new string[] { JsonSerializer.Serialize(evt)};
        }
    }
}
