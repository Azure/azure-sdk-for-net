// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Text;
using System.Text.Json;

namespace Azure.AI.Inference.Telemetry
{
    internal class StreamingRecordedResponse : AbstractRecordedResponse
    {
        private readonly StringBuilder _contents = new();
        private readonly bool _traceContent;
        private bool _hasFuncCall;
        private readonly Dictionary<string, StringBuilder> _hshFunctionArgs = new();

        /// <summary>
        /// Construct the streaming response based on first returned item.
        /// <param name="traceContent">If true the messges and function names will be recorded.</param>
        /// </summary>
        public StreamingRecordedResponse(bool traceContent)
        {
            _traceContent = traceContent;
        }

        public void Update(StreamingChatCompletionsUpdate item)
        {
            IsEmpty = false;
            Model = item.Model;
            Id = item.Id;
            if (item.FinishReason != null)
            {
                FinishReason = item.FinishReason.ToString();
            }
            if (item.Usage != null)
            {
                CompletionTokens = item.Usage.CompletionTokens;
                PromptTokens = item.Usage.PromptTokens;
            }
            // Check that this update has a function call.
            bool updateHasFuncCall = !((string.IsNullOrEmpty(item.FunctionName) || string.IsNullOrEmpty(item.FunctionArgumentsUpdate)));
            // Set flag if any of updates has function call.
            _hasFuncCall = _hasFuncCall || updateHasFuncCall;
            if (_traceContent)
            {
                if (!string.IsNullOrEmpty(item.ContentUpdate))
                    _contents.Append(item.ContentUpdate);
                if (!updateHasFuncCall)
                    return;
                if (_hshFunctionArgs.TryGetValue(item.FunctionName, out StringBuilder sbArgs))
                {
                    sbArgs.Append(item.FunctionArgumentsUpdate);
                }
                else
                {
                    _hshFunctionArgs.Add(item.FunctionName, new StringBuilder(item.FunctionArgumentsUpdate));
                }
            }
        }

        private List<Dictionary<string, object>> GetFuncArgs()
        {
            List<Dictionary<string, object>> listArgs = new();
            foreach (StringBuilder sb in _hshFunctionArgs.Values)
            {
                if (sb.Length > 0)
                    listArgs.Add(JsonSerializer.Deserialize<Dictionary<string, object>>(sb.ToString()));
            }
            return listArgs;
        }

        public override string[] GetSerializedCompletions() {
            
            var evt = new Dictionary<string, object> {
                {"finish_reason", FinishReason },
                {"index", 0},
            };
            var messageDict = new Dictionary<string, object>();
            if (_traceContent)
            {
                messageDict["content"] = _contents.ToString();
                evt["message"] = messageDict;
            }
            if (_hasFuncCall)
            {
                if (_traceContent)
                    messageDict.Add("tool_calls", GetFuncArgs());
                else
                    messageDict.Add("tool_calls", new List<Dictionary<string, object>>());
                evt["message"] = messageDict;
            }
            return new string[] { JsonSerializer.Serialize(evt)};
        }
    }
}
