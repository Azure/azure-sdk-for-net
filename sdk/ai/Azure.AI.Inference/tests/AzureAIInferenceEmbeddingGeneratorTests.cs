// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Net.Http;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Inference;
using Azure.Core.Pipeline;
using Azure.Core.TestFramework;
using Microsoft.Extensions.Caching.Distributed;
using Microsoft.Extensions.Caching.Memory;
using NUnit.Framework;

namespace Microsoft.Extensions.AI
{
    public class AzureAIInferenceEmbeddingGeneratorTests
    {
        [RecordedTest]
        public void AsIEmbeddingGenerator_InvalidArgs_Throws()
        {
            var ex = Assert.Throws<ArgumentNullException>(() => ((EmbeddingsClient)null!).AsIEmbeddingGenerator());
            Assert.That(ex!.ParamName, Is.EqualTo("embeddingsClient"));

            EmbeddingsClient client = new(new("http://somewhere"), new AzureKeyCredential("key"));
            var ex2 = Assert.Throws<ArgumentException>(() => client.AsIEmbeddingGenerator("   "));
            Assert.That(ex2!.ParamName, Is.EqualTo("defaultModelId"));

            client.AsIEmbeddingGenerator(null);
        }

        [RecordedTest]
        public void AsIEmbeddingGenerator_AzureAIClient_ProducesExpectedMetadata()
        {
            Uri endpoint = new("http://localhost/some/endpoint");
            string model = "amazingModel";

            EmbeddingsClient client = new(endpoint, new AzureKeyCredential("key"));

            IEmbeddingGenerator<string, Embedding<float>> embeddingGenerator = client.AsIEmbeddingGenerator(model);
            var metadata = embeddingGenerator.GetService<EmbeddingGeneratorMetadata>();
            Assert.That(metadata?.ProviderName, Is.EqualTo("az.ai.inference"));
            Assert.That(metadata?.ProviderUri, Is.EqualTo(endpoint));
            Assert.That(metadata?.DefaultModelId, Is.EqualTo(model));
        }

        [RecordedTest]
        public void GetService_SuccessfullyReturnsUnderlyingClient()
        {
            var client = new EmbeddingsClient(new("http://somewhere"), new AzureKeyCredential("key"));
            var embeddingGenerator = client.AsIEmbeddingGenerator("model");

            Assert.That(embeddingGenerator, Is.SameAs(embeddingGenerator.GetService<IEmbeddingGenerator<string, Embedding<float>>>()));
            Assert.That(embeddingGenerator.GetService<EmbeddingsClient>(), Is.SameAs(client));

            using IEmbeddingGenerator<string, Embedding<float>> pipeline = embeddingGenerator
                .AsBuilder()
                .UseOpenTelemetry()
                .UseDistributedCache(new MemoryDistributedCache(Options.Options.Create(new MemoryDistributedCacheOptions())))
                .Build();

            Assert.That(pipeline.GetService<DistributedCachingEmbeddingGenerator<string, Embedding<float>>>(), Is.Not.Null);
            Assert.That(pipeline.GetService<CachingEmbeddingGenerator<string, Embedding<float>>>(), Is.Not.Null);
            Assert.That(pipeline.GetService<OpenTelemetryEmbeddingGenerator<string, Embedding<float>>>(), Is.Not.Null);

            Assert.That(pipeline.GetService<EmbeddingsClient>(), Is.SameAs(client));
            Assert.That(pipeline.GetService<IEmbeddingGenerator<string, Embedding<float>>>(), Is.TypeOf<OpenTelemetryEmbeddingGenerator<string, Embedding<float>>>());
        }

        [RecordedTest]
        public async Task GenerateAsync_ExpectedRequestResponse()
        {
            const string Input = """
            {"input":["hello, world!","red, white, blue"],"encoding_format":"base64","model":"text-embedding-3-small"}
            """;

            const string Output = """
            {
              "object": "list",
              "data": [
                {
                  "object": "embedding",
                  "index": 0,
                  "embedding": ""
                },
                {
                  "object": "embedding",
                  "index": 1,
                  "embedding": ""
                }
              ],
              "model": "text-embedding-3-small",
              "usage": {
                "prompt_tokens": 9,
                "total_tokens": 9
              }
            }
            """;

            using VerbatimHttpHandler handler = new(Input, Output);
            using HttpClient httpClient = new(handler);
            using IEmbeddingGenerator<string, Embedding<float>> generator = new EmbeddingsClient(new("http://somewhere"), new AzureKeyCredential("key"), new()
            {
                Transport = new HttpClientTransport(httpClient),
            }).AsIEmbeddingGenerator("text-embedding-3-small");

            var response = await generator.GenerateAsync([
                "hello, world!",
            "red, white, blue",
        ]);
            Assert.That(response, Is.Not.Null);
            Assert.That(response.Count, Is.EqualTo(2));

            Assert.That(response.Usage, Is.Not.Null);
            Assert.That(response.Usage!.InputTokenCount, Is.EqualTo(9));
            Assert.That(response.Usage.TotalTokenCount, Is.EqualTo(9));

            foreach (Embedding<float> e in response)
            {
                Assert.That(e.ModelId, Is.EqualTo("text-embedding-3-small"));
                Assert.That(e.CreatedAt, Is.Not.Null);
                Assert.That(e.Vector.Length, Is.EqualTo(1536));
                Assert.That(e.Vector.ToArray(), Has.Some.Not.EqualTo(0f));
            }
        }

        [RecordedTest]
        public async Task EmbeddingGenerationOptions_DoNotOverwrite_NotNullPropertiesInRawRepresentation()
        {
            const string Input = """
            {
              "input":["hello, world!","red, white, blue"],
              "dimensions":1536,
              "encoding_format":"base64",
              "model":"text-embedding-3-small"
            }
            """;

            const string Output = """
            {
              "object": "list",
              "data": [
                {
                  "object": "embedding",
                  "index": 0,
                  "embedding": ""
                },
                {
                  "object": "embedding",
                  "index": 1,
                  "embedding": ""
                }
              ],
              "model": "text-embedding-3-small"
            }
            """;

            using VerbatimHttpHandler handler = new(Input, Output);
            using HttpClient httpClient = new(handler);
            using IEmbeddingGenerator<string, Embedding<float>> generator = new EmbeddingsClient(new("http://somewhere"), new AzureKeyCredential("key"), new()
            {
                Transport = new HttpClientTransport(httpClient),
            }).AsIEmbeddingGenerator("text-embedding-3-large");

            var response = await generator.GenerateAsync([
                "hello, world!",
            "red, white, blue",
        ], new EmbeddingGenerationOptions
        {
            Dimensions = 3072,
            RawRepresentationFactory = (e) => new EmbeddingsOptions(input: [])
            {
                Dimensions = 1536,
                Model = "text-embedding-3-small",
                EncodingFormat = EmbeddingEncodingFormat.Single, // this will be overwritten, we only support base64.
            }
        });

            Assert.That(response, Is.Not.Null);

            foreach (Embedding<float> e in response)
            {
                Assert.That(e.ModelId, Is.EqualTo("text-embedding-3-small"));
                Assert.That(e.CreatedAt, Is.Not.Null);
                Assert.That(e.Vector.Length, Is.EqualTo(1536));
                Assert.That(e.Vector.ToArray(), Has.Some.Not.EqualTo(0f));
            }
        }
    }
}
