// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.QuestionAnswering.Models
{
    /// <summary> The EnvironmentType. </summary>
    public readonly partial struct EnvironmentType : IEquatable<EnvironmentType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnvironmentType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ProdValue = "Prod";
        private const string TestValue = "Test";

        /// <summary> Prod. </summary>
        public static EnvironmentType Prod { get; } = new EnvironmentType(ProdValue);
        /// <summary> Test. </summary>
        public static EnvironmentType Test { get; } = new EnvironmentType(TestValue);
        /// <summary> Determines if two <see cref="EnvironmentType"/> values are the same. </summary>
        public static bool operator ==(EnvironmentType left, EnvironmentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnvironmentType"/> values are not the same. </summary>
        public static bool operator !=(EnvironmentType left, EnvironmentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnvironmentType"/>. </summary>
        public static implicit operator EnvironmentType(string value) => new EnvironmentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnvironmentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnvironmentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
