// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.QuestionAnswering.Models
{
    public partial class Knowledgebase
    {
        internal static Knowledgebase DeserializeKnowledgebase(JsonElement element)
        {
            Optional<string> id = default;
            Optional<Uri> hostName = default;
            Optional<DateTimeOffset> lastAccessedTimestamp = default;
            Optional<DateTimeOffset> lastChangedTimestamp = default;
            Optional<DateTimeOffset> lastPublishedTimestamp = default;
            Optional<string> name = default;
            Optional<string> userId = default;
            Optional<IReadOnlyList<Uri>> urls = default;
            Optional<IReadOnlyList<string>> sources = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hostName = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lastAccessedTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastAccessedTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastChangedTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastChangedTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastPublishedTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastPublishedTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userId"))
                {
                    userId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("urls"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Uri> array = new List<Uri>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new Uri(item.GetString()));
                    }
                    urls = array;
                    continue;
                }
                if (property.NameEquals("sources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    sources = array;
                    continue;
                }
            }
            return new Knowledgebase(id.Value, hostName.Value, Optional.ToNullable(lastAccessedTimestamp), Optional.ToNullable(lastChangedTimestamp), Optional.ToNullable(lastPublishedTimestamp), name.Value, userId.Value, Optional.ToList(urls), Optional.ToList(sources));
        }
    }
}
