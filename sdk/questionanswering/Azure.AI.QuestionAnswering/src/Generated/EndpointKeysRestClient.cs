// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.AI.QuestionAnswering.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.QuestionAnswering
{
    internal partial class EndpointKeysRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of EndpointKeysRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt; qnamaker-resource-name &gt;.api.cognitiveservices.azure.com). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public EndpointKeysRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetKeysRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/qnamaker/v5.0-preview.2", false);
            uri.AppendPath("/endpointkeys", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets endpoint keys for an endpoint. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<EndpointKeysDTO>> GetKeysAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetKeysRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EndpointKeysDTO value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EndpointKeysDTO.DeserializeEndpointKeysDTO(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets endpoint keys for an endpoint. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<EndpointKeysDTO> GetKeys(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetKeysRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EndpointKeysDTO value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EndpointKeysDTO.DeserializeEndpointKeysDTO(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRefreshKeysRequest(string keyType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/qnamaker/v5.0-preview.2", false);
            uri.AppendPath("/endpointkeys/", false);
            uri.AppendPath(keyType, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Re-generates an endpoint key. </summary>
        /// <param name="keyType"> Type of Key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyType"/> is null. </exception>
        public async Task<Response<EndpointKeysDTO>> RefreshKeysAsync(string keyType, CancellationToken cancellationToken = default)
        {
            if (keyType == null)
            {
                throw new ArgumentNullException(nameof(keyType));
            }

            using var message = CreateRefreshKeysRequest(keyType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EndpointKeysDTO value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EndpointKeysDTO.DeserializeEndpointKeysDTO(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Re-generates an endpoint key. </summary>
        /// <param name="keyType"> Type of Key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyType"/> is null. </exception>
        public Response<EndpointKeysDTO> RefreshKeys(string keyType, CancellationToken cancellationToken = default)
        {
            if (keyType == null)
            {
                throw new ArgumentNullException(nameof(keyType));
            }

            using var message = CreateRefreshKeysRequest(keyType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EndpointKeysDTO value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EndpointKeysDTO.DeserializeEndpointKeysDTO(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
