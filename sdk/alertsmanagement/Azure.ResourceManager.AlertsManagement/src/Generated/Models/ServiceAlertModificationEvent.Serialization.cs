// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AlertsManagement.Models
{
    internal static partial class ServiceAlertModificationEventExtensions
    {
        public static string ToSerialString(this ServiceAlertModificationEvent value) => value switch
        {
            ServiceAlertModificationEvent.AlertCreated => "AlertCreated",
            ServiceAlertModificationEvent.StateChange => "StateChange",
            ServiceAlertModificationEvent.MonitorConditionChange => "MonitorConditionChange",
            ServiceAlertModificationEvent.SeverityChange => "SeverityChange",
            ServiceAlertModificationEvent.ActionRuleTriggered => "ActionRuleTriggered",
            ServiceAlertModificationEvent.ActionRuleSuppressed => "ActionRuleSuppressed",
            ServiceAlertModificationEvent.ActionsTriggered => "ActionsTriggered",
            ServiceAlertModificationEvent.ActionsSuppressed => "ActionsSuppressed",
            ServiceAlertModificationEvent.ActionsFailed => "ActionsFailed",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ServiceAlertModificationEvent value.")
        };

        public static ServiceAlertModificationEvent ToServiceAlertModificationEvent(this string value)
        {
            if (string.Equals(value, "AlertCreated", StringComparison.InvariantCultureIgnoreCase)) return ServiceAlertModificationEvent.AlertCreated;
            if (string.Equals(value, "StateChange", StringComparison.InvariantCultureIgnoreCase)) return ServiceAlertModificationEvent.StateChange;
            if (string.Equals(value, "MonitorConditionChange", StringComparison.InvariantCultureIgnoreCase)) return ServiceAlertModificationEvent.MonitorConditionChange;
            if (string.Equals(value, "SeverityChange", StringComparison.InvariantCultureIgnoreCase)) return ServiceAlertModificationEvent.SeverityChange;
            if (string.Equals(value, "ActionRuleTriggered", StringComparison.InvariantCultureIgnoreCase)) return ServiceAlertModificationEvent.ActionRuleTriggered;
            if (string.Equals(value, "ActionRuleSuppressed", StringComparison.InvariantCultureIgnoreCase)) return ServiceAlertModificationEvent.ActionRuleSuppressed;
            if (string.Equals(value, "ActionsTriggered", StringComparison.InvariantCultureIgnoreCase)) return ServiceAlertModificationEvent.ActionsTriggered;
            if (string.Equals(value, "ActionsSuppressed", StringComparison.InvariantCultureIgnoreCase)) return ServiceAlertModificationEvent.ActionsSuppressed;
            if (string.Equals(value, "ActionsFailed", StringComparison.InvariantCultureIgnoreCase)) return ServiceAlertModificationEvent.ActionsFailed;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ServiceAlertModificationEvent value.");
        }
    }
}
