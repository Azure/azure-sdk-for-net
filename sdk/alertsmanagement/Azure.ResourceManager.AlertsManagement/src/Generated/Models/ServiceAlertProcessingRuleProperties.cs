// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.AlertsManagement.Models
{
    /// <summary> Alert processing rule properties defining scopes, conditions and scheduling logic for alert processing rule. </summary>
    public partial class ServiceAlertProcessingRuleProperties
    {
        /// <summary> Initializes a new instance of ServiceAlertProcessingRuleProperties. </summary>
        /// <param name="scopes"> Scopes on which alert processing rule will apply. </param>
        /// <param name="actions">
        /// Actions to be applied.
        /// Please note <see cref="AlertProcessingAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AddActionGroups"/> and <see cref="RemoveAllActionGroups"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scopes"/> or <paramref name="actions"/> is null. </exception>
        public ServiceAlertProcessingRuleProperties(IEnumerable<string> scopes, IEnumerable<AlertProcessingAction> actions)
        {
            if (scopes == null)
            {
                throw new ArgumentNullException(nameof(scopes));
            }
            if (actions == null)
            {
                throw new ArgumentNullException(nameof(actions));
            }

            Scopes = scopes.ToList();
            Conditions = new ChangeTrackingList<AlertProcessingRuleCondition>();
            Actions = actions.ToList();
        }

        /// <summary> Initializes a new instance of ServiceAlertProcessingRuleProperties. </summary>
        /// <param name="scopes"> Scopes on which alert processing rule will apply. </param>
        /// <param name="conditions"> Conditions on which alerts will be filtered. </param>
        /// <param name="schedule"> Scheduling for alert processing rule. </param>
        /// <param name="actions">
        /// Actions to be applied.
        /// Please note <see cref="AlertProcessingAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AddActionGroups"/> and <see cref="RemoveAllActionGroups"/>.
        /// </param>
        /// <param name="description"> Description of alert processing rule. </param>
        /// <param name="isEnabled"> Indicates if the given alert processing rule is enabled or disabled. </param>
        internal ServiceAlertProcessingRuleProperties(IList<string> scopes, IList<AlertProcessingRuleCondition> conditions, AlertProcessingRuleSchedule schedule, IList<AlertProcessingAction> actions, string description, bool? isEnabled)
        {
            Scopes = scopes;
            Conditions = conditions;
            Schedule = schedule;
            Actions = actions;
            Description = description;
            IsEnabled = isEnabled;
        }

        /// <summary> Scopes on which alert processing rule will apply. </summary>
        public IList<string> Scopes { get; }
        /// <summary> Conditions on which alerts will be filtered. </summary>
        public IList<AlertProcessingRuleCondition> Conditions { get; }
        /// <summary> Scheduling for alert processing rule. </summary>
        public AlertProcessingRuleSchedule Schedule { get; set; }
        /// <summary>
        /// Actions to be applied.
        /// Please note <see cref="AlertProcessingAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AddActionGroups"/> and <see cref="RemoveAllActionGroups"/>.
        /// </summary>
        public IList<AlertProcessingAction> Actions { get; }
        /// <summary> Description of alert processing rule. </summary>
        public string Description { get; set; }
        /// <summary> Indicates if the given alert processing rule is enabled or disabled. </summary>
        public bool? IsEnabled { get; set; }
    }
}
