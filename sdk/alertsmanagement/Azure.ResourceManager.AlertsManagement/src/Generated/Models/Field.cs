// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AlertsManagement.Models
{
    /// <summary> Field for a given condition. </summary>
    public readonly partial struct Field : IEquatable<Field>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Field"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Field(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SeverityValue = "Severity";
        private const string MonitorServiceValue = "MonitorService";
        private const string MonitorConditionValue = "MonitorCondition";
        private const string SignalTypeValue = "SignalType";
        private const string TargetResourceTypeValue = "TargetResourceType";
        private const string TargetResourceValue = "TargetResource";
        private const string TargetResourceGroupValue = "TargetResourceGroup";
        private const string AlertRuleIdValue = "AlertRuleId";
        private const string AlertRuleNameValue = "AlertRuleName";
        private const string DescriptionValue = "Description";
        private const string AlertContextValue = "AlertContext";

        /// <summary> Severity. </summary>
        public static Field Severity { get; } = new Field(SeverityValue);
        /// <summary> MonitorService. </summary>
        public static Field MonitorService { get; } = new Field(MonitorServiceValue);
        /// <summary> MonitorCondition. </summary>
        public static Field MonitorCondition { get; } = new Field(MonitorConditionValue);
        /// <summary> SignalType. </summary>
        public static Field SignalType { get; } = new Field(SignalTypeValue);
        /// <summary> TargetResourceType. </summary>
        public static Field TargetResourceType { get; } = new Field(TargetResourceTypeValue);
        /// <summary> TargetResource. </summary>
        public static Field TargetResource { get; } = new Field(TargetResourceValue);
        /// <summary> TargetResourceGroup. </summary>
        public static Field TargetResourceGroup { get; } = new Field(TargetResourceGroupValue);
        /// <summary> AlertRuleId. </summary>
        public static Field AlertRuleId { get; } = new Field(AlertRuleIdValue);
        /// <summary> AlertRuleName. </summary>
        public static Field AlertRuleName { get; } = new Field(AlertRuleNameValue);
        /// <summary> Description. </summary>
        public static Field Description { get; } = new Field(DescriptionValue);
        /// <summary> AlertContext. </summary>
        public static Field AlertContext { get; } = new Field(AlertContextValue);
        /// <summary> Determines if two <see cref="Field"/> values are the same. </summary>
        public static bool operator ==(Field left, Field right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Field"/> values are not the same. </summary>
        public static bool operator !=(Field left, Field right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Field"/>. </summary>
        public static implicit operator Field(string value) => new Field(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Field other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Field other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
