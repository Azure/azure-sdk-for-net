// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AlertsManagement.Models
{
    /// <summary> The Severity. </summary>
    public readonly partial struct Severity : IEquatable<Severity>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Severity"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Severity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Sev0Value = "Sev0";
        private const string Sev1Value = "Sev1";
        private const string Sev2Value = "Sev2";
        private const string Sev3Value = "Sev3";
        private const string Sev4Value = "Sev4";

        /// <summary> Sev0. </summary>
        public static Severity Sev0 { get; } = new Severity(Sev0Value);
        /// <summary> Sev1. </summary>
        public static Severity Sev1 { get; } = new Severity(Sev1Value);
        /// <summary> Sev2. </summary>
        public static Severity Sev2 { get; } = new Severity(Sev2Value);
        /// <summary> Sev3. </summary>
        public static Severity Sev3 { get; } = new Severity(Sev3Value);
        /// <summary> Sev4. </summary>
        public static Severity Sev4 { get; } = new Severity(Sev4Value);
        /// <summary> Determines if two <see cref="Severity"/> values are the same. </summary>
        public static bool operator ==(Severity left, Severity right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Severity"/> values are not the same. </summary>
        public static bool operator !=(Severity left, Severity right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Severity"/>. </summary>
        public static implicit operator Severity(string value) => new Severity(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Severity other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Severity other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
