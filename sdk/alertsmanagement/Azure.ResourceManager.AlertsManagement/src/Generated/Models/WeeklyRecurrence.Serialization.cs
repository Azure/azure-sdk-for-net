// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AlertsManagement.Models
{
    public partial class WeeklyRecurrence : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("daysOfWeek");
            writer.WriteStartArray();
            foreach (var item in DaysOfWeek)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WritePropertyName("recurrenceType");
            writer.WriteStringValue(RecurrenceType.ToString());
            if (Optional.IsDefined(StartTime))
            {
                writer.WritePropertyName("startTime");
                writer.WriteStringValue(StartTime);
            }
            if (Optional.IsDefined(EndTime))
            {
                writer.WritePropertyName("endTime");
                writer.WriteStringValue(EndTime);
            }
            writer.WriteEndObject();
        }

        internal static WeeklyRecurrence DeserializeWeeklyRecurrence(JsonElement element)
        {
            IList<DaysOfWeek> daysOfWeek = default;
            RecurrenceType recurrenceType = default;
            Optional<string> startTime = default;
            Optional<string> endTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("daysOfWeek"))
                {
                    List<DaysOfWeek> array = new List<DaysOfWeek>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new DaysOfWeek(item.GetString()));
                    }
                    daysOfWeek = array;
                    continue;
                }
                if (property.NameEquals("recurrenceType"))
                {
                    recurrenceType = new RecurrenceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTime"))
                {
                    startTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("endTime"))
                {
                    endTime = property.Value.GetString();
                    continue;
                }
            }
            return new WeeklyRecurrence(recurrenceType, startTime.Value, endTime.Value, daysOfWeek);
        }
    }
}
