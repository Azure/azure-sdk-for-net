// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.AlertsManagement.Models
{
    /// <summary>
    /// Monthly recurrence object.
    /// Serialized Name: MonthlyRecurrence
    /// </summary>
    public partial class AlertProcessingRuleMonthlyRecurrence : AlertProcessingRuleRecurrence
    {
        /// <summary> Initializes a new instance of AlertProcessingRuleMonthlyRecurrence. </summary>
        /// <param name="daysOfMonth">
        /// Specifies the values for monthly recurrence pattern.
        /// Serialized Name: MonthlyRecurrence.daysOfMonth
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="daysOfMonth"/> is null. </exception>
        public AlertProcessingRuleMonthlyRecurrence(IEnumerable<int> daysOfMonth)
        {
            if (daysOfMonth == null)
            {
                throw new ArgumentNullException(nameof(daysOfMonth));
            }

            DaysOfMonth = daysOfMonth.ToList();
            RecurrenceType = RecurrenceType.Monthly;
        }

        /// <summary> Initializes a new instance of AlertProcessingRuleMonthlyRecurrence. </summary>
        /// <param name="recurrenceType">
        /// Specifies when the recurrence should be applied.
        /// Serialized Name: Recurrence.recurrenceType
        /// </param>
        /// <param name="startOn">
        /// Start time for recurrence.
        /// Serialized Name: Recurrence.startTime
        /// </param>
        /// <param name="endOn">
        /// End time for recurrence.
        /// Serialized Name: Recurrence.endTime
        /// </param>
        /// <param name="daysOfMonth">
        /// Specifies the values for monthly recurrence pattern.
        /// Serialized Name: MonthlyRecurrence.daysOfMonth
        /// </param>
        internal AlertProcessingRuleMonthlyRecurrence(RecurrenceType recurrenceType, DateTimeOffset? startOn, DateTimeOffset? endOn, IList<int> daysOfMonth) : base(recurrenceType, startOn, endOn)
        {
            DaysOfMonth = daysOfMonth;
            RecurrenceType = recurrenceType;
        }

        /// <summary>
        /// Specifies the values for monthly recurrence pattern.
        /// Serialized Name: MonthlyRecurrence.daysOfMonth
        /// </summary>
        public IList<int> DaysOfMonth { get; }
    }
}
