// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AlertsManagement.Models
{
    public partial class AlertProcessingRuleSchedule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(EffectiveFrom))
            {
                writer.WritePropertyName("effectiveFrom");
                writer.WriteStringValue(EffectiveFrom.Value);
            }
            if (Optional.IsDefined(EffectiveUntil))
            {
                writer.WritePropertyName("effectiveUntil");
                writer.WriteStringValue(EffectiveUntil.Value);
            }
            if (Optional.IsDefined(TimeZone))
            {
                writer.WritePropertyName("timeZone");
                writer.WriteStringValue(TimeZone);
            }
            if (Optional.IsCollectionDefined(Recurrences))
            {
                writer.WritePropertyName("recurrences");
                writer.WriteStartArray();
                foreach (var item in Recurrences)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AlertProcessingRuleSchedule DeserializeAlertProcessingRuleSchedule(JsonElement element)
        {
            Optional<DateTimeOffset> effectiveFrom = default;
            Optional<DateTimeOffset> effectiveUntil = default;
            Optional<string> timeZone = default;
            Optional<IList<AlertProcessingRuleRecurrence>> recurrences = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("effectiveFrom"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    effectiveFrom = property.Value.GetDateTimeOffset();
                    continue;
                }
                if (property.NameEquals("effectiveUntil"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    effectiveUntil = property.Value.GetDateTimeOffset();
                    continue;
                }
                if (property.NameEquals("timeZone"))
                {
                    timeZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recurrences"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AlertProcessingRuleRecurrence> array = new List<AlertProcessingRuleRecurrence>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AlertProcessingRuleRecurrence.DeserializeAlertProcessingRuleRecurrence(item));
                    }
                    recurrences = array;
                    continue;
                }
            }
            return new AlertProcessingRuleSchedule(Optional.ToNullable(effectiveFrom), Optional.ToNullable(effectiveUntil), timeZone.Value, Optional.ToList(recurrences));
        }
    }
}
