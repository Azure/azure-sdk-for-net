// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AlertsManagement.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AlertsManagement
{
    /// <summary>
    /// A Class representing an Alert along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct an <see cref="AlertResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetAlertResource method.
    /// Otherwise you can get one from its parent resource <see cref="SubscriptionResource" /> using the GetAlert method.
    /// </summary>
    public partial class AlertResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="AlertResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string alertId)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _alertClientDiagnostics;
        private readonly AlertsRestOperations _alertRestClient;
        private readonly AlertData _data;

        /// <summary> Initializes a new instance of the <see cref="AlertResource"/> class for mocking. </summary>
        protected AlertResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "AlertResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal AlertResource(ArmClient client, AlertData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="AlertResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal AlertResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _alertClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AlertsManagement", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string alertApiVersion);
            _alertRestClient = new AlertsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, alertApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.AlertsManagement/alerts";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual AlertData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get information related to a specific alert
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}
        /// Operation Id: Alerts_GetById
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AlertResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _alertClientDiagnostics.CreateScope("AlertResource.Get");
            scope.Start();
            try
            {
                var response = await _alertRestClient.GetByIdAsync(Id.SubscriptionId, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AlertResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get information related to a specific alert
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}
        /// Operation Id: Alerts_GetById
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AlertResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _alertClientDiagnostics.CreateScope("AlertResource.Get");
            scope.Start();
            try
            {
                var response = _alertRestClient.GetById(Id.SubscriptionId, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AlertResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Change the state of an alert.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate
        /// Operation Id: Alerts_ChangeState
        /// </summary>
        /// <param name="newState"> New state of the alert. </param>
        /// <param name="comment"> reason of change alert state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AlertResource>> ChangeStateAsync(AlertState newState, string comment = null, CancellationToken cancellationToken = default)
        {
            using var scope = _alertClientDiagnostics.CreateScope("AlertResource.ChangeState");
            scope.Start();
            try
            {
                var response = await _alertRestClient.ChangeStateAsync(Id.SubscriptionId, Id.Name, newState, comment, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new AlertResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Change the state of an alert.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate
        /// Operation Id: Alerts_ChangeState
        /// </summary>
        /// <param name="newState"> New state of the alert. </param>
        /// <param name="comment"> reason of change alert state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AlertResource> ChangeState(AlertState newState, string comment = null, CancellationToken cancellationToken = default)
        {
            using var scope = _alertClientDiagnostics.CreateScope("AlertResource.ChangeState");
            scope.Start();
            try
            {
                var response = _alertRestClient.ChangeState(Id.SubscriptionId, Id.Name, newState, comment, cancellationToken);
                return Response.FromValue(new AlertResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history
        /// Operation Id: Alerts_GetHistory
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AlertModification>> GetHistoryAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _alertClientDiagnostics.CreateScope("AlertResource.GetHistory");
            scope.Start();
            try
            {
                var response = await _alertRestClient.GetHistoryAsync(Id.SubscriptionId, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history
        /// Operation Id: Alerts_GetHistory
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AlertModification> GetHistory(CancellationToken cancellationToken = default)
        {
            using var scope = _alertClientDiagnostics.CreateScope("AlertResource.GetHistory");
            scope.Start();
            try
            {
                var response = _alertRestClient.GetHistory(Id.SubscriptionId, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
