// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.AlertsManagement.Models;
using Azure.ResourceManager.Resources;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using NUnit.Framework;

namespace Azure.ResourceManager.AlertsManagement.Tests.Scenario
{
    [TestFixture]
    public class AlertsTests : AlertsManagementManagementTestBase
    {
        public AlertsTests() : base(true)
        {
        }

        [TestCase]
        public async Task AlertStateChangeTest()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            //ResourceGroupResource rg = await CreateResourceGroup(subscription, "testRg", AzureLocation.WestUS);
            string resourceName = Recording.GenerateAssetName("Alert");

            //string alertId = "63d67c2c-7a2e-4da1-bb90-da475144ac62";

            AlertState StateNew = new AlertState("New");
            ServiceAlertResource alertWithStateNew = null;
            AsyncPageable<ServiceAlertResource> alertsWithStateNew = subscription.GetServiceAlerts().GetAllAsync(alertState: StateNew);
            await foreach (ServiceAlertResource alert in alertsWithStateNew)
            {
                Console.WriteLine(alert.Data.Name);
                // Perform state change operation
                var alertPostStateChange = await alert.ChangeStateAsync(new AlertState("Closed"));

                // Verify the state change operation was successful
                var alertPostStateChangeContent = alertPostStateChange.GetRawResponse().Content;
                string arraystring = alertPostStateChangeContent.ToString();
                var alertchange = JsonConvert.DeserializeObject<JObject>(arraystring);
                string state = alertchange["properties"]["essentials"]["alertState"].ToString();
                Assert.AreEqual(state, "Closed");

                alertWithStateNew = alert;
                break;
            }

            // Get History of alerts
            Response<ServiceAlertModification> history = await alertWithStateNew.GetHistoryAsync();
            CheckHistoryContainsStateChangeEvent(AlertModification alertHistory);
            foreach (var item in history.Value.Modifications)
            {

            }
        }

        private void CheckHistoryContainsStateChangeEvent(AlertModification alertHistory)
        {
            bool eventFound = false;

            IList<AlertModificationItem> modifications = history.Value.Modifications;
            foreach (var item in modifications)
            {
                if (item.ModificationEvent == AlertModificationEvent.StateChange)
                {
                    Assert.Equal(AlertState.New, item.OldValue);
                    Assert.Equal(AlertState.Closed, item.NewValue);
                    eventFound = true;
                    break;
                }
            }

            if (!eventFound)
            {
                throw new Exception("Test Failed : State update event not found in alert history.");
            }
        }
    }
}
