// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AlertsManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SmartDetectorAlertRulesOperations.
    /// </summary>
    public static partial class SmartDetectorAlertRulesOperationsExtensions
    {
            /// <summary>
            /// List all the existing Smart Detector alert rules within the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expandDetector'>
            /// Indicates if Smart Detector should be expanded.
            /// </param>
            public static IPage<AlertRule> List(this ISmartDetectorAlertRulesOperations operations, bool? expandDetector = default(bool?))
            {
                return operations.ListAsync(expandDetector).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the existing Smart Detector alert rules within the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expandDetector'>
            /// Indicates if Smart Detector should be expanded.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AlertRule>> ListAsync(this ISmartDetectorAlertRulesOperations operations, bool? expandDetector = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(expandDetector, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the existing Smart Detector alert rules within the subscription
            /// and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expandDetector'>
            /// Indicates if Smart Detector should be expanded.
            /// </param>
            public static IPage<AlertRule> ListByResourceGroup(this ISmartDetectorAlertRulesOperations operations, string resourceGroupName, bool? expandDetector = default(bool?))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, expandDetector).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the existing Smart Detector alert rules within the subscription
            /// and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expandDetector'>
            /// Indicates if Smart Detector should be expanded.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AlertRule>> ListByResourceGroupAsync(this ISmartDetectorAlertRulesOperations operations, string resourceGroupName, bool? expandDetector = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, expandDetector, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific Smart Detector alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the alert rule.
            /// </param>
            /// <param name='expandDetector'>
            /// Indicates if Smart Detector should be expanded.
            /// </param>
            public static AlertRule Get(this ISmartDetectorAlertRulesOperations operations, string resourceGroupName, string alertRuleName, bool? expandDetector = default(bool?))
            {
                return operations.GetAsync(resourceGroupName, alertRuleName, expandDetector).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Smart Detector alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the alert rule.
            /// </param>
            /// <param name='expandDetector'>
            /// Indicates if Smart Detector should be expanded.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertRule> GetAsync(this ISmartDetectorAlertRulesOperations operations, string resourceGroupName, string alertRuleName, bool? expandDetector = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, alertRuleName, expandDetector, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a Smart Detector alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the alert rule.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the operation.
            /// </param>
            public static AlertRule CreateOrUpdate(this ISmartDetectorAlertRulesOperations operations, string resourceGroupName, string alertRuleName, AlertRule parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, alertRuleName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Smart Detector alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the alert rule.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertRule> CreateOrUpdateAsync(this ISmartDetectorAlertRulesOperations operations, string resourceGroupName, string alertRuleName, AlertRule parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, alertRuleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch a specific Smart Detector alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the alert rule.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the operation.
            /// </param>
            public static AlertRule Patch(this ISmartDetectorAlertRulesOperations operations, string resourceGroupName, string alertRuleName, AlertRulePatchObject parameters)
            {
                return operations.PatchAsync(resourceGroupName, alertRuleName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch a specific Smart Detector alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the alert rule.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertRule> PatchAsync(this ISmartDetectorAlertRulesOperations operations, string resourceGroupName, string alertRuleName, AlertRulePatchObject parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(resourceGroupName, alertRuleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing Smart Detector alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the alert rule.
            /// </param>
            public static void Delete(this ISmartDetectorAlertRulesOperations operations, string resourceGroupName, string alertRuleName)
            {
                operations.DeleteAsync(resourceGroupName, alertRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing Smart Detector alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the alert rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISmartDetectorAlertRulesOperations operations, string resourceGroupName, string alertRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, alertRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List all the existing Smart Detector alert rules within the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AlertRule> ListNext(this ISmartDetectorAlertRulesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the existing Smart Detector alert rules within the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AlertRule>> ListNextAsync(this ISmartDetectorAlertRulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the existing Smart Detector alert rules within the subscription
            /// and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AlertRule> ListByResourceGroupNext(this ISmartDetectorAlertRulesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the existing Smart Detector alert rules within the subscription
            /// and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AlertRule>> ListByResourceGroupNextAsync(this ISmartDetectorAlertRulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
