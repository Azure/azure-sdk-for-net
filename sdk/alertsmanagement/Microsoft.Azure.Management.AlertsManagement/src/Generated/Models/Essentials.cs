// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AlertsManagement.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// This object contains consistent fields across different monitor
    /// services.
    /// </summary>
    public partial class Essentials
    {
        /// <summary>
        /// Initializes a new instance of the Essentials class.
        /// </summary>
        public Essentials()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Essentials class.
        /// </summary>
        /// <param name="severity">Severity of alert Sev0 being highest and
        /// Sev4 being lowest. Possible values include: 'Sev0', 'Sev1', 'Sev2',
        /// 'Sev3', 'Sev4'</param>
        /// <param name="signalType">The type of signal the alert is based on,
        /// which could be metrics, logs or activity logs. Possible values
        /// include: 'Metric', 'Log', 'Unknown'</param>
        /// <param name="alertState">Alert object state, which can be modified
        /// by the user. Possible values include: 'New', 'Acknowledged',
        /// 'Closed'</param>
        /// <param name="monitorCondition">Condition of the rule at the monitor
        /// service. It represents whether the underlying conditions have
        /// crossed the defined alert rule thresholds. Possible values include:
        /// 'Fired', 'Resolved'</param>
        /// <param name="targetResource">Target ARM resource, on which alert
        /// got created.</param>
        /// <param name="targetResourceName">Name of the target ARM resource
        /// name, on which alert got created.</param>
        /// <param name="targetResourceGroup">Resource group of target ARM
        /// resource, on which alert got created.</param>
        /// <param name="targetResourceType">Resource type of target ARM
        /// resource, on which alert got created.</param>
        /// <param name="monitorService">Monitor service on which the
        /// rule(monitor) is set. Possible values include: 'Application
        /// Insights', 'ActivityLog Administrative', 'ActivityLog Security',
        /// 'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog
        /// Autoscale', 'Log Analytics', 'Nagios', 'Platform', 'SCOM',
        /// 'ServiceHealth', 'SmartDetector', 'VM Insights', 'Zabbix'</param>
        /// <param name="alertRule">Rule(monitor) which fired alert instance.
        /// Depending on the monitor service,  this would be ARM id or name of
        /// the rule.</param>
        /// <param name="sourceCreatedId">Unique Id created by monitor service
        /// for each alert instance. This could be used to track the issue at
        /// the monitor service, in case of Nagios, Zabbix, SCOM etc.</param>
        /// <param name="smartGroupId">Unique Id of the smart group</param>
        /// <param name="smartGroupingReason">Verbose reason describing the
        /// reason why this alert instance is added to a smart group</param>
        /// <param name="startDateTime">Creation time(ISO-8601 format) of alert
        /// instance.</param>
        /// <param name="lastModifiedDateTime">Last modification time(ISO-8601
        /// format) of alert instance.</param>
        /// <param name="monitorConditionResolvedDateTime">Resolved
        /// time(ISO-8601 format) of alert instance. This will be updated when
        /// monitor service resolves the alert instance because the rule
        /// condition is no longer met.</param>
        /// <param name="lastModifiedUserName">User who last modified the
        /// alert, in case of monitor service updates user would be 'system',
        /// otherwise name of the user.</param>
        public Essentials(string severity = default(string), string signalType = default(string), string alertState = default(string), string monitorCondition = default(string), string targetResource = default(string), string targetResourceName = default(string), string targetResourceGroup = default(string), string targetResourceType = default(string), string monitorService = default(string), string alertRule = default(string), string sourceCreatedId = default(string), string smartGroupId = default(string), string smartGroupingReason = default(string), System.DateTime? startDateTime = default(System.DateTime?), System.DateTime? lastModifiedDateTime = default(System.DateTime?), System.DateTime? monitorConditionResolvedDateTime = default(System.DateTime?), string lastModifiedUserName = default(string))
        {
            Severity = severity;
            SignalType = signalType;
            AlertState = alertState;
            MonitorCondition = monitorCondition;
            TargetResource = targetResource;
            TargetResourceName = targetResourceName;
            TargetResourceGroup = targetResourceGroup;
            TargetResourceType = targetResourceType;
            MonitorService = monitorService;
            AlertRule = alertRule;
            SourceCreatedId = sourceCreatedId;
            SmartGroupId = smartGroupId;
            SmartGroupingReason = smartGroupingReason;
            StartDateTime = startDateTime;
            LastModifiedDateTime = lastModifiedDateTime;
            MonitorConditionResolvedDateTime = monitorConditionResolvedDateTime;
            LastModifiedUserName = lastModifiedUserName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets severity of alert Sev0 being highest and Sev4 being lowest.
        /// Possible values include: 'Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4'
        /// </summary>
        [JsonProperty(PropertyName = "severity")]
        public string Severity { get; private set; }

        /// <summary>
        /// Gets the type of signal the alert is based on, which could be
        /// metrics, logs or activity logs. Possible values include: 'Metric',
        /// 'Log', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "signalType")]
        public string SignalType { get; private set; }

        /// <summary>
        /// Gets alert object state, which can be modified by the user.
        /// Possible values include: 'New', 'Acknowledged', 'Closed'
        /// </summary>
        [JsonProperty(PropertyName = "alertState")]
        public string AlertState { get; private set; }

        /// <summary>
        /// Gets condition of the rule at the monitor service. It represents
        /// whether the underlying conditions have crossed the defined alert
        /// rule thresholds. Possible values include: 'Fired', 'Resolved'
        /// </summary>
        [JsonProperty(PropertyName = "monitorCondition")]
        public string MonitorCondition { get; private set; }

        /// <summary>
        /// Gets or sets target ARM resource, on which alert got created.
        /// </summary>
        [JsonProperty(PropertyName = "targetResource")]
        public string TargetResource { get; set; }

        /// <summary>
        /// Gets or sets name of the target ARM resource name, on which alert
        /// got created.
        /// </summary>
        [JsonProperty(PropertyName = "targetResourceName")]
        public string TargetResourceName { get; set; }

        /// <summary>
        /// Gets or sets resource group of target ARM resource, on which alert
        /// got created.
        /// </summary>
        [JsonProperty(PropertyName = "targetResourceGroup")]
        public string TargetResourceGroup { get; set; }

        /// <summary>
        /// Gets or sets resource type of target ARM resource, on which alert
        /// got created.
        /// </summary>
        [JsonProperty(PropertyName = "targetResourceType")]
        public string TargetResourceType { get; set; }

        /// <summary>
        /// Gets monitor service on which the rule(monitor) is set. Possible
        /// values include: 'Application Insights', 'ActivityLog
        /// Administrative', 'ActivityLog Security', 'ActivityLog
        /// Recommendation', 'ActivityLog Policy', 'ActivityLog Autoscale',
        /// 'Log Analytics', 'Nagios', 'Platform', 'SCOM', 'ServiceHealth',
        /// 'SmartDetector', 'VM Insights', 'Zabbix'
        /// </summary>
        [JsonProperty(PropertyName = "monitorService")]
        public string MonitorService { get; private set; }

        /// <summary>
        /// Gets rule(monitor) which fired alert instance. Depending on the
        /// monitor service,  this would be ARM id or name of the rule.
        /// </summary>
        [JsonProperty(PropertyName = "alertRule")]
        public string AlertRule { get; private set; }

        /// <summary>
        /// Gets unique Id created by monitor service for each alert instance.
        /// This could be used to track the issue at the monitor service, in
        /// case of Nagios, Zabbix, SCOM etc.
        /// </summary>
        [JsonProperty(PropertyName = "sourceCreatedId")]
        public string SourceCreatedId { get; private set; }

        /// <summary>
        /// Gets unique Id of the smart group
        /// </summary>
        [JsonProperty(PropertyName = "smartGroupId")]
        public string SmartGroupId { get; private set; }

        /// <summary>
        /// Gets verbose reason describing the reason why this alert instance
        /// is added to a smart group
        /// </summary>
        [JsonProperty(PropertyName = "smartGroupingReason")]
        public string SmartGroupingReason { get; private set; }

        /// <summary>
        /// Gets creation time(ISO-8601 format) of alert instance.
        /// </summary>
        [JsonProperty(PropertyName = "startDateTime")]
        public System.DateTime? StartDateTime { get; private set; }

        /// <summary>
        /// Gets last modification time(ISO-8601 format) of alert instance.
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public System.DateTime? LastModifiedDateTime { get; private set; }

        /// <summary>
        /// Gets resolved time(ISO-8601 format) of alert instance. This will be
        /// updated when monitor service resolves the alert instance because
        /// the rule condition is no longer met.
        /// </summary>
        [JsonProperty(PropertyName = "monitorConditionResolvedDateTime")]
        public System.DateTime? MonitorConditionResolvedDateTime { get; private set; }

        /// <summary>
        /// Gets user who last modified the alert, in case of monitor service
        /// updates user would be 'system', otherwise name of the user.
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedUserName")]
        public string LastModifiedUserName { get; private set; }

    }
}
