// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AlertsManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Alert processing rule properties defining scopes, conditions and
    /// scheduling logic for alert processing rule.
    /// </summary>
    public partial class AlertProcessingRuleProperties
    {
        /// <summary>
        /// Initializes a new instance of the AlertProcessingRuleProperties
        /// class.
        /// </summary>
        public AlertProcessingRuleProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AlertProcessingRuleProperties
        /// class.
        /// </summary>
        /// <param name="scopes">Scopes on which alert processing rule will
        /// apply.</param>
        /// <param name="actions">Actions to be applied.</param>
        /// <param name="conditions">Conditions on which alerts will be
        /// filtered.</param>
        /// <param name="schedule">Scheduling for alert processing
        /// rule.</param>
        /// <param name="description">Description of alert processing
        /// rule.</param>
        /// <param name="enabled">Indicates if the given alert processing rule
        /// is enabled or disabled.</param>
        public AlertProcessingRuleProperties(IList<string> scopes, IList<Action> actions, IList<Condition> conditions = default(IList<Condition>), Schedule schedule = default(Schedule), string description = default(string), bool? enabled = default(bool?))
        {
            Scopes = scopes;
            Conditions = conditions;
            Schedule = schedule;
            Actions = actions;
            Description = description;
            Enabled = enabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets scopes on which alert processing rule will apply.
        /// </summary>
        [JsonProperty(PropertyName = "scopes")]
        public IList<string> Scopes { get; set; }

        /// <summary>
        /// Gets or sets conditions on which alerts will be filtered.
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public IList<Condition> Conditions { get; set; }

        /// <summary>
        /// Gets or sets scheduling for alert processing rule.
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public Schedule Schedule { get; set; }

        /// <summary>
        /// Gets or sets actions to be applied.
        /// </summary>
        [JsonProperty(PropertyName = "actions")]
        public IList<Action> Actions { get; set; }

        /// <summary>
        /// Gets or sets description of alert processing rule.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets indicates if the given alert processing rule is
        /// enabled or disabled.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Scopes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Scopes");
            }
            if (Actions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Actions");
            }
            if (Schedule != null)
            {
                Schedule.Validate();
            }
        }
    }
}
