// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AlertsManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Scheduling configuration for a given alert processing rule.
    /// </summary>
    public partial class Schedule
    {
        /// <summary>
        /// Initializes a new instance of the Schedule class.
        /// </summary>
        public Schedule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Schedule class.
        /// </summary>
        /// <param name="effectiveFrom">Scheduling effective from time.
        /// Date-Time in ISO-8601 format without timezone suffix.</param>
        /// <param name="effectiveUntil">Scheduling effective until time.
        /// Date-Time in ISO-8601 format without timezone suffix.</param>
        /// <param name="timeZone">Scheduling time zone.</param>
        /// <param name="recurrences">List of recurrences.</param>
        public Schedule(string effectiveFrom = default(string), string effectiveUntil = default(string), string timeZone = default(string), IList<Recurrence> recurrences = default(IList<Recurrence>))
        {
            EffectiveFrom = effectiveFrom;
            EffectiveUntil = effectiveUntil;
            TimeZone = timeZone;
            Recurrences = recurrences;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets scheduling effective from time. Date-Time in ISO-8601
        /// format without timezone suffix.
        /// </summary>
        [JsonProperty(PropertyName = "effectiveFrom")]
        public string EffectiveFrom { get; set; }

        /// <summary>
        /// Gets or sets scheduling effective until time. Date-Time in ISO-8601
        /// format without timezone suffix.
        /// </summary>
        [JsonProperty(PropertyName = "effectiveUntil")]
        public string EffectiveUntil { get; set; }

        /// <summary>
        /// Gets or sets scheduling time zone.
        /// </summary>
        [JsonProperty(PropertyName = "timeZone")]
        public string TimeZone { get; set; }

        /// <summary>
        /// Gets or sets list of recurrences.
        /// </summary>
        [JsonProperty(PropertyName = "recurrences")]
        public IList<Recurrence> Recurrences { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EffectiveFrom != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(EffectiveFrom, "^(?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "EffectiveFrom", "^(?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))$");
                }
            }
            if (EffectiveUntil != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(EffectiveUntil, "^(?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "EffectiveUntil", "^(?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))$");
                }
            }
        }
    }
}
