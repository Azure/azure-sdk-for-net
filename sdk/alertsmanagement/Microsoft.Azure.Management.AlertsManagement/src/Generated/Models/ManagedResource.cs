// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AlertsManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An azure managed resource object
    /// </summary>
    public partial class ManagedResource : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ManagedResource class.
        /// </summary>
        public ManagedResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedResource class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="id">Azure resource Id</param>
        /// <param name="type">Azure resource type</param>
        /// <param name="name">Azure resource name</param>
        /// <param name="tags">Resource tags</param>
        public ManagedResource(string location, string id = default(string), string type = default(string), string name = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
            : base(id, type, name)
        {
            Location = location;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets resource location
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets resource tags
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
        }
    }
}
