// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AlertsManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The alert rule information
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class AlertRule : AzureResource
    {
        /// <summary>
        /// Initializes a new instance of the AlertRule class.
        /// </summary>
        public AlertRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AlertRule class.
        /// </summary>
        /// <param name="state">The alert rule state. Possible values include:
        /// 'Enabled', 'Disabled'</param>
        /// <param name="severity">The alert rule severity. Possible values
        /// include: 'Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4'</param>
        /// <param name="frequency">The alert rule frequency in ISO8601 format.
        /// The time granularity must be in minutes and minimum value is 5
        /// minutes.</param>
        /// <param name="detector">The alert rule's detector.</param>
        /// <param name="scope">The alert rule resources scope.</param>
        /// <param name="actionGroups">The alert rule actions.</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="type">The resource type.</param>
        /// <param name="name">The resource name.</param>
        /// <param name="location">The resource location.</param>
        /// <param name="tags">The resource tags.</param>
        /// <param name="description">The alert rule description.</param>
        /// <param name="throttling">The alert rule throttling
        /// information.</param>
        public AlertRule(string state, string severity, System.TimeSpan frequency, Detector detector, IList<string> scope, ActionGroupsInformation actionGroups, string id = default(string), string type = default(string), string name = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string description = default(string), ThrottlingInformation throttling = default(ThrottlingInformation))
            : base(id, type, name, location, tags)
        {
            Description = description;
            State = state;
            Severity = severity;
            Frequency = frequency;
            Detector = detector;
            Scope = scope;
            ActionGroups = actionGroups;
            Throttling = throttling;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the alert rule description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the alert rule state. Possible values include:
        /// 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the alert rule severity. Possible values include:
        /// 'Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4'
        /// </summary>
        [JsonProperty(PropertyName = "properties.severity")]
        public string Severity { get; set; }

        /// <summary>
        /// Gets or sets the alert rule frequency in ISO8601 format. The time
        /// granularity must be in minutes and minimum value is 5 minutes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.frequency")]
        public System.TimeSpan Frequency { get; set; }

        /// <summary>
        /// Gets or sets the alert rule's detector.
        /// </summary>
        [JsonProperty(PropertyName = "properties.detector")]
        public Detector Detector { get; set; }

        /// <summary>
        /// Gets or sets the alert rule resources scope.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scope")]
        public IList<string> Scope { get; set; }

        /// <summary>
        /// Gets or sets the alert rule actions.
        /// </summary>
        [JsonProperty(PropertyName = "properties.actionGroups")]
        public ActionGroupsInformation ActionGroups { get; set; }

        /// <summary>
        /// Gets or sets the alert rule throttling information.
        /// </summary>
        [JsonProperty(PropertyName = "properties.throttling")]
        public ThrottlingInformation Throttling { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (State == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "State");
            }
            if (Severity == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Severity");
            }
            if (Detector == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Detector");
            }
            if (Scope == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Scope");
            }
            if (ActionGroups == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ActionGroups");
            }
            if (Detector != null)
            {
                Detector.Validate();
            }
            if (ActionGroups != null)
            {
                ActionGroups.Validate();
            }
        }
    }
}
