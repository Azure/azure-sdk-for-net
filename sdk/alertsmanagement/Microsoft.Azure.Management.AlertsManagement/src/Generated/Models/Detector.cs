// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AlertsManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The detector information. By default this is not populated, unless it's
    /// specified in expandDetector
    /// </summary>
    public partial class Detector
    {
        /// <summary>
        /// Initializes a new instance of the Detector class.
        /// </summary>
        public Detector()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Detector class.
        /// </summary>
        /// <param name="id">The detector id.</param>
        /// <param name="parameters">The detector's parameters.'</param>
        /// <param name="name">The Smart Detector name. By default this is not
        /// populated, unless it's specified in expandDetector</param>
        /// <param name="description">The Smart Detector description. By
        /// default this is not populated, unless it's specified in
        /// expandDetector</param>
        /// <param name="supportedResourceTypes">The Smart Detector supported
        /// resource types. By default this is not populated, unless it's
        /// specified in expandDetector</param>
        /// <param name="imagePaths">The Smart Detector image path. By default
        /// this is not populated, unless it's specified in
        /// expandDetector</param>
        public Detector(string id, IDictionary<string, object> parameters = default(IDictionary<string, object>), string name = default(string), string description = default(string), IList<string> supportedResourceTypes = default(IList<string>), IList<string> imagePaths = default(IList<string>))
        {
            Id = id;
            Parameters = parameters;
            Name = name;
            Description = description;
            SupportedResourceTypes = supportedResourceTypes;
            ImagePaths = imagePaths;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the detector id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the detector's parameters.'
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IDictionary<string, object> Parameters { get; set; }

        /// <summary>
        /// Gets or sets the Smart Detector name. By default this is not
        /// populated, unless it's specified in expandDetector
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Smart Detector description. By default this is not
        /// populated, unless it's specified in expandDetector
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the Smart Detector supported resource types. By
        /// default this is not populated, unless it's specified in
        /// expandDetector
        /// </summary>
        [JsonProperty(PropertyName = "supportedResourceTypes")]
        public IList<string> SupportedResourceTypes { get; set; }

        /// <summary>
        /// Gets or sets the Smart Detector image path. By default this is not
        /// populated, unless it's specified in expandDetector
        /// </summary>
        [JsonProperty(PropertyName = "imagePaths")]
        public IList<string> ImagePaths { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
        }
    }
}
