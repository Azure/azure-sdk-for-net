// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Elastic.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Company information of the user to be passed to partners.
    /// </summary>
    public partial class CompanyInfo
    {
        /// <summary>
        /// Initializes a new instance of the CompanyInfo class.
        /// </summary>
        public CompanyInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CompanyInfo class.
        /// </summary>
        /// <param name="domain">Domain of the company</param>
        /// <param name="business">Business of the company</param>
        /// <param name="employeesNumber">Number of employees in the
        /// company</param>
        /// <param name="state">State of the company location.</param>
        /// <param name="country">Country of the company location.</param>
        public CompanyInfo(string domain = default(string), string business = default(string), string employeesNumber = default(string), string state = default(string), string country = default(string))
        {
            Domain = domain;
            Business = business;
            EmployeesNumber = employeesNumber;
            State = state;
            Country = country;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets domain of the company
        /// </summary>
        [JsonProperty(PropertyName = "domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or sets business of the company
        /// </summary>
        [JsonProperty(PropertyName = "business")]
        public string Business { get; set; }

        /// <summary>
        /// Gets or sets number of employees in the company
        /// </summary>
        [JsonProperty(PropertyName = "employeesNumber")]
        public string EmployeesNumber { get; set; }

        /// <summary>
        /// Gets or sets state of the company location.
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets country of the company location.
        /// </summary>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Domain != null)
            {
                if (Domain.Length > 250)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Domain", 250);
                }
            }
            if (Business != null)
            {
                if (Business.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Business", 50);
                }
            }
            if (EmployeesNumber != null)
            {
                if (EmployeesNumber.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "EmployeesNumber", 20);
                }
            }
            if (State != null)
            {
                if (State.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "State", 50);
                }
            }
            if (Country != null)
            {
                if (Country.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Country", 50);
                }
            }
        }
    }
}
