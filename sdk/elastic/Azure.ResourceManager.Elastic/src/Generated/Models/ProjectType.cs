// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Elastic.Models
{
    /// <summary> Project type; ex: Elasticsearch / Observability / Security. </summary>
    public readonly partial struct ProjectType : IEquatable<ProjectType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProjectType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProjectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ElasticsearchValue = "Elasticsearch";
        private const string ObservabilityValue = "Observability";
        private const string SecurityValue = "Security";
        private const string NotApplicableValue = "NotApplicable";

        /// <summary> Elasticsearch. </summary>
        public static ProjectType Elasticsearch { get; } = new ProjectType(ElasticsearchValue);
        /// <summary> Observability. </summary>
        public static ProjectType Observability { get; } = new ProjectType(ObservabilityValue);
        /// <summary> Security. </summary>
        public static ProjectType Security { get; } = new ProjectType(SecurityValue);
        /// <summary> NotApplicable. </summary>
        public static ProjectType NotApplicable { get; } = new ProjectType(NotApplicableValue);
        /// <summary> Determines if two <see cref="ProjectType"/> values are the same. </summary>
        public static bool operator ==(ProjectType left, ProjectType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProjectType"/> values are not the same. </summary>
        public static bool operator !=(ProjectType left, ProjectType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ProjectType"/>. </summary>
        public static implicit operator ProjectType(string value) => new ProjectType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProjectType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProjectType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
