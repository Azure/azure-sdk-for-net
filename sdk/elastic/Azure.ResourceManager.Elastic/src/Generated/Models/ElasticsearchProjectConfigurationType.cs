// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Elastic.Models
{
    /// <summary> Configuration type of the Elasticsearch project. </summary>
    public readonly partial struct ElasticsearchProjectConfigurationType : IEquatable<ElasticsearchProjectConfigurationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ElasticsearchProjectConfigurationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ElasticsearchProjectConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GeneralPurposeValue = "GeneralPurpose";
        private const string VectorValue = "Vector";
        private const string TimeSeriesValue = "TimeSeries";
        private const string NotApplicableValue = "NotApplicable";

        /// <summary> GeneralPurpose. </summary>
        public static ElasticsearchProjectConfigurationType GeneralPurpose { get; } = new ElasticsearchProjectConfigurationType(GeneralPurposeValue);
        /// <summary> Vector. </summary>
        public static ElasticsearchProjectConfigurationType Vector { get; } = new ElasticsearchProjectConfigurationType(VectorValue);
        /// <summary> TimeSeries. </summary>
        public static ElasticsearchProjectConfigurationType TimeSeries { get; } = new ElasticsearchProjectConfigurationType(TimeSeriesValue);
        /// <summary> NotApplicable. </summary>
        public static ElasticsearchProjectConfigurationType NotApplicable { get; } = new ElasticsearchProjectConfigurationType(NotApplicableValue);
        /// <summary> Determines if two <see cref="ElasticsearchProjectConfigurationType"/> values are the same. </summary>
        public static bool operator ==(ElasticsearchProjectConfigurationType left, ElasticsearchProjectConfigurationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ElasticsearchProjectConfigurationType"/> values are not the same. </summary>
        public static bool operator !=(ElasticsearchProjectConfigurationType left, ElasticsearchProjectConfigurationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ElasticsearchProjectConfigurationType"/>. </summary>
        public static implicit operator ElasticsearchProjectConfigurationType(string value) => new ElasticsearchProjectConfigurationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ElasticsearchProjectConfigurationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ElasticsearchProjectConfigurationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
