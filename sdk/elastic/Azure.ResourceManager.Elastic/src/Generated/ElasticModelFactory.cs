// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Elastic;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Elastic.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ElasticModelFactory
    {
        /// <summary> Initializes a new instance of ElasticMonitorResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="skuName"> SKU of the monitor resource. </param>
        /// <param name="properties"> Properties of the monitor resource. </param>
        /// <param name="identity"> Identity properties of the monitor resource. Current supported identity types: SystemAssigned. </param>
        /// <returns> A new <see cref="Elastic.ElasticMonitorResourceData"/> instance for mocking. </returns>
        public static ElasticMonitorResourceData ElasticMonitorResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string skuName = null, MonitorProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ElasticMonitorResourceData(id, name, resourceType, systemData, tags, location, skuName != null ? new ResourceSku(skuName) : null, properties, identity);
        }

        /// <summary> Initializes a new instance of MonitorProperties. </summary>
        /// <param name="provisioningState"> Provisioning state of the monitor resource. </param>
        /// <param name="monitoringStatus"> Flag specifying if the resource monitoring is enabled or disabled. </param>
        /// <param name="elasticProperties"> Elastic cloud properties. </param>
        /// <param name="userInfo"> User information. </param>
        /// <param name="liftrResourceCategory"></param>
        /// <param name="liftrResourcePreference"> The priority of the resource. </param>
        /// <returns> A new <see cref="Models.MonitorProperties"/> instance for mocking. </returns>
        public static MonitorProperties MonitorProperties(ProvisioningState? provisioningState = null, MonitoringStatus? monitoringStatus = null, ElasticProperties elasticProperties = null, UserInfo userInfo = null, LiftrResourceCategory? liftrResourceCategory = null, int? liftrResourcePreference = null)
        {
            return new MonitorProperties(provisioningState, monitoringStatus, elasticProperties, userInfo, liftrResourceCategory, liftrResourcePreference);
        }

        /// <summary> Initializes a new instance of ElasticProperties. </summary>
        /// <param name="elasticCloudUser"> Details of the user&apos;s elastic account. </param>
        /// <param name="elasticCloudDeployment"> Details of the elastic cloud deployment. </param>
        /// <returns> A new <see cref="Models.ElasticProperties"/> instance for mocking. </returns>
        public static ElasticProperties ElasticProperties(ElasticCloudUser elasticCloudUser = null, ElasticCloudDeployment elasticCloudDeployment = null)
        {
            return new ElasticProperties(elasticCloudUser, elasticCloudDeployment);
        }

        /// <summary> Initializes a new instance of ElasticCloudUser. </summary>
        /// <param name="emailAddress"> Email of the Elastic User Account. </param>
        /// <param name="id"> User Id of the elastic account of the User. </param>
        /// <param name="elasticCloudSsoDefaultUri"> Elastic cloud default dashboard sso URL of the Elastic user account. </param>
        /// <returns> A new <see cref="Models.ElasticCloudUser"/> instance for mocking. </returns>
        public static ElasticCloudUser ElasticCloudUser(string emailAddress = null, string id = null, Uri elasticCloudSsoDefaultUri = null)
        {
            return new ElasticCloudUser(emailAddress, id, elasticCloudSsoDefaultUri);
        }

        /// <summary> Initializes a new instance of ElasticCloudDeployment. </summary>
        /// <param name="name"> Elastic deployment name. </param>
        /// <param name="deploymentId"> Elastic deployment Id. </param>
        /// <param name="azureSubscriptionId"> Associated Azure subscription Id for the elastic deployment. </param>
        /// <param name="elasticsearchRegion"> Region where Deployment at Elastic side took place. </param>
        /// <param name="elasticsearchServiceUri"> Elasticsearch ingestion endpoint of the Elastic deployment. </param>
        /// <param name="kibanaServiceUri"> Kibana endpoint of the Elastic deployment. </param>
        /// <param name="kibanaSsoUri"> Kibana dashboard sso URL of the Elastic deployment. </param>
        /// <returns> A new <see cref="Models.ElasticCloudDeployment"/> instance for mocking. </returns>
        public static ElasticCloudDeployment ElasticCloudDeployment(string name = null, string deploymentId = null, string azureSubscriptionId = null, string elasticsearchRegion = null, Uri elasticsearchServiceUri = null, Uri kibanaServiceUri = null, Uri kibanaSsoUri = null)
        {
            return new ElasticCloudDeployment(name, deploymentId, azureSubscriptionId, elasticsearchRegion, elasticsearchServiceUri, kibanaServiceUri, kibanaSsoUri);
        }

        /// <summary> Initializes a new instance of UserInfo. </summary>
        /// <param name="firstName"> First name of the user. </param>
        /// <param name="lastName"> Last name of the user. </param>
        /// <param name="companyName"> Company name of the user. </param>
        /// <param name="emailAddress"> Email of the user used by Elastic for contacting them if needed. </param>
        /// <param name="companyInfo"> Company information of the user to be passed to partners. </param>
        /// <returns> A new <see cref="Models.UserInfo"/> instance for mocking. </returns>
        public static UserInfo UserInfo(string firstName = null, string lastName = null, string companyName = null, string emailAddress = null, CompanyInfo companyInfo = null)
        {
            return new UserInfo(firstName, lastName, companyName, emailAddress, companyInfo);
        }

        /// <summary> Initializes a new instance of CompanyInfo. </summary>
        /// <param name="domain"> Domain of the company. </param>
        /// <param name="business"> Business of the company. </param>
        /// <param name="employeesNumber"> Number of employees in the company. </param>
        /// <param name="state"> State of the company location. </param>
        /// <param name="country"> Country of the company location. </param>
        /// <returns> A new <see cref="Models.CompanyInfo"/> instance for mocking. </returns>
        public static CompanyInfo CompanyInfo(string domain = null, string business = null, string employeesNumber = null, string state = null, string country = null)
        {
            return new CompanyInfo(domain, business, employeesNumber, state, country);
        }

        /// <summary> Initializes a new instance of MonitoredResource. </summary>
        /// <param name="id"> The ARM id of the resource. </param>
        /// <param name="sendingLogs"> Flag indicating the status of the resource for sending logs operation to Elastic. </param>
        /// <param name="reasonForLogsStatus"> Reason for why the resource is sending logs (or why it is not sending). </param>
        /// <returns> A new <see cref="Models.MonitoredResource"/> instance for mocking. </returns>
        public static MonitoredResource MonitoredResource(string id = null, SendingLog? sendingLogs = null, string reasonForLogsStatus = null)
        {
            return new MonitoredResource(id, sendingLogs, reasonForLogsStatus);
        }

        /// <summary> Initializes a new instance of DeploymentInfoResponse. </summary>
        /// <param name="status"> The Elastic deployment status. </param>
        /// <param name="version"> Version of the elasticsearch in Elastic cloud deployment. </param>
        /// <param name="memoryCapacity"> RAM capacity of the elasticsearch in Elastic cloud deployment. </param>
        /// <param name="diskCapacity"> Disk capacity of the elasticsearch in Elastic cloud deployment. </param>
        /// <returns> A new <see cref="Models.DeploymentInfoResponse"/> instance for mocking. </returns>
        public static DeploymentInfoResponse DeploymentInfoResponse(ElasticDeploymentStatus? status = null, string version = null, string memoryCapacity = null, string diskCapacity = null)
        {
            return new DeploymentInfoResponse(status, version, memoryCapacity, diskCapacity);
        }

        /// <summary> Initializes a new instance of MonitoringTagRuleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the monitoring tag rules. </param>
        /// <returns> A new <see cref="Elastic.MonitoringTagRuleData"/> instance for mocking. </returns>
        public static MonitoringTagRuleData MonitoringTagRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MonitoringTagRulesProperties properties = null)
        {
            return new MonitoringTagRuleData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MonitoringTagRulesProperties. </summary>
        /// <param name="provisioningState"> Provisioning state of the monitoring tag rules. </param>
        /// <param name="logRules"> Rules for sending logs. </param>
        /// <returns> A new <see cref="Models.MonitoringTagRulesProperties"/> instance for mocking. </returns>
        public static MonitoringTagRulesProperties MonitoringTagRulesProperties(ProvisioningState? provisioningState = null, LogRules logRules = null)
        {
            return new MonitoringTagRulesProperties(provisioningState, logRules);
        }

        /// <summary> Initializes a new instance of LogRules. </summary>
        /// <param name="sendAadLogs"> Flag specifying if AAD logs should be sent for the Monitor resource. </param>
        /// <param name="sendSubscriptionLogs"> Flag specifying if subscription logs should be sent for the Monitor resource. </param>
        /// <param name="sendActivityLogs"> Flag specifying if activity logs from Azure resources should be sent for the Monitor resource. </param>
        /// <param name="filteringTags"> List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags. </param>
        /// <returns> A new <see cref="Models.LogRules"/> instance for mocking. </returns>
        public static LogRules LogRules(bool? sendAadLogs = null, bool? sendSubscriptionLogs = null, bool? sendActivityLogs = null, IEnumerable<FilteringTag> filteringTags = null)
        {
            filteringTags ??= new List<FilteringTag>();

            return new LogRules(sendAadLogs, sendSubscriptionLogs, sendActivityLogs, filteringTags?.ToList());
        }

        /// <summary> Initializes a new instance of FilteringTag. </summary>
        /// <param name="name"> The name (also known as the key) of the tag. </param>
        /// <param name="value"> The value of the tag. </param>
        /// <param name="action"> Valid actions for a filtering tag. </param>
        /// <returns> A new <see cref="Models.FilteringTag"/> instance for mocking. </returns>
        public static FilteringTag FilteringTag(string name = null, string value = null, TagAction? action = null)
        {
            return new FilteringTag(name, value, action);
        }

        /// <summary> Initializes a new instance of VmResources. </summary>
        /// <param name="vmResourceId"> The ARM id of the VM resource. </param>
        /// <returns> A new <see cref="Models.VmResources"/> instance for mocking. </returns>
        public static VmResources VmResources(string vmResourceId = null)
        {
            return new VmResources(vmResourceId);
        }

        /// <summary> Initializes a new instance of VmIngestionDetailsResponse. </summary>
        /// <param name="cloudId"> The cloudId of given Elastic monitor resource. </param>
        /// <param name="ingestionKey"> Ingestion details to install agent on given VM. </param>
        /// <returns> A new <see cref="Models.VmIngestionDetailsResponse"/> instance for mocking. </returns>
        public static VmIngestionDetailsResponse VmIngestionDetailsResponse(string cloudId = null, string ingestionKey = null)
        {
            return new VmIngestionDetailsResponse(cloudId, ingestionKey);
        }
    }
}
