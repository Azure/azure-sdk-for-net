// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Elastic.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmElasticModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Elastic.ElasticMonitorData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="kind"> The kind of the Elastic resource - observability, security, search etc. </param>
        /// <param name="skuName"> SKU of the monitor resource. </param>
        /// <param name="properties"> Properties of the monitor resource. </param>
        /// <param name="identity"> Identity properties of the monitor resource. Current supported identity types: SystemAssigned. </param>
        /// <returns> A new <see cref="Elastic.ElasticMonitorData"/> instance for mocking. </returns>
        public static ElasticMonitorData ElasticMonitorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string kind = null, string skuName = null, ElasticMonitorProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ElasticMonitorData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                kind,
                skuName != null ? new ElasticSku(skuName, serializedAdditionalRawData: null) : null,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticMonitorProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the monitor resource. </param>
        /// <param name="monitoringStatus"> Flag specifying if the resource monitoring is enabled or disabled. </param>
        /// <param name="elasticProperties"> Elastic cloud properties. </param>
        /// <param name="userInfo"> User information. </param>
        /// <param name="planDetails"> Plan details of the monitor resource. </param>
        /// <param name="version"> Version of elastic of the monitor resource. </param>
        /// <param name="subscriptionState"> State of the Azure Subscription containing the monitor resource. </param>
        /// <param name="saaSAzureSubscriptionStatus"> Status of Azure Subscription where Marketplace SaaS is located. </param>
        /// <param name="sourceCampaignName"> Name of the marketing campaign. </param>
        /// <param name="sourceCampaignId"> A unique identifier associated with the campaign. </param>
        /// <param name="liftrResourceCategory"></param>
        /// <param name="liftrResourcePreference"> The priority of the resource. </param>
        /// <param name="isApiKeyGenerated"> Flag to determine if User API Key has to be generated and shared. </param>
        /// <param name="hostingType"> Hosting type of the monitor resource - either Hosted deployments OR Serverless Projects. </param>
        /// <param name="projectDetails"> Project details of the monitor resource IF it belongs to Serverless offer kind. </param>
        /// <returns> A new <see cref="Models.ElasticMonitorProperties"/> instance for mocking. </returns>
        public static ElasticMonitorProperties ElasticMonitorProperties(ElasticProvisioningState? provisioningState = null, ElasticMonitoringStatus? monitoringStatus = null, ElasticCloudProperties elasticProperties = null, ElasticUserInfo userInfo = null, ElasticPlanDetails planDetails = null, string version = null, string subscriptionState = null, string saaSAzureSubscriptionStatus = null, string sourceCampaignName = null, string sourceCampaignId = null, ElasticLiftrResourceCategory? liftrResourceCategory = null, int? liftrResourcePreference = null, bool? isApiKeyGenerated = null, HostingType? hostingType = null, ProjectDetails projectDetails = null)
        {
            return new ElasticMonitorProperties(
                provisioningState,
                monitoringStatus,
                elasticProperties,
                userInfo,
                planDetails,
                version,
                subscriptionState,
                saaSAzureSubscriptionStatus,
                sourceCampaignName,
                sourceCampaignId,
                liftrResourceCategory,
                liftrResourcePreference,
                isApiKeyGenerated,
                hostingType,
                projectDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticCloudUser"/>. </summary>
        /// <param name="emailAddress"> Email of the Elastic User Account. </param>
        /// <param name="id"> User Id of the elastic account of the User. </param>
        /// <param name="elasticCloudSsoDefaultUri"> Elastic cloud default dashboard sso URL of the Elastic user account. </param>
        /// <returns> A new <see cref="Models.ElasticCloudUser"/> instance for mocking. </returns>
        public static ElasticCloudUser ElasticCloudUser(string emailAddress = null, string id = null, Uri elasticCloudSsoDefaultUri = null)
        {
            return new ElasticCloudUser(emailAddress, id, elasticCloudSsoDefaultUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticCloudDeployment"/>. </summary>
        /// <param name="name"> Elastic deployment name. </param>
        /// <param name="deploymentId"> Elastic deployment Id. </param>
        /// <param name="azureSubscriptionId"> Associated Azure subscription Id for the elastic deployment. </param>
        /// <param name="elasticsearchRegion"> Region where Deployment at Elastic side took place. </param>
        /// <param name="elasticsearchServiceUri"> Elasticsearch ingestion endpoint of the Elastic deployment. </param>
        /// <param name="kibanaServiceUri"> Kibana endpoint of the Elastic deployment. </param>
        /// <param name="kibanaSsoUri"> Kibana dashboard sso URL of the Elastic deployment. </param>
        /// <returns> A new <see cref="Models.ElasticCloudDeployment"/> instance for mocking. </returns>
        public static ElasticCloudDeployment ElasticCloudDeployment(string name = null, string deploymentId = null, string azureSubscriptionId = null, string elasticsearchRegion = null, Uri elasticsearchServiceUri = null, Uri kibanaServiceUri = null, Uri kibanaSsoUri = null)
        {
            return new ElasticCloudDeployment(
                name,
                deploymentId,
                azureSubscriptionId,
                elasticsearchRegion,
                elasticsearchServiceUri,
                kibanaServiceUri,
                kibanaSsoUri,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticVersion"/>. </summary>
        /// <param name="availableVersion"> Elastic Version Properties. </param>
        /// <returns> A new <see cref="Models.ElasticVersion"/> instance for mocking. </returns>
        public static ElasticVersion ElasticVersion(string availableVersion = null)
        {
            return new ElasticVersion(availableVersion != null ? new ElasticVersionProperties(availableVersion, serializedAdditionalRawData: null) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Elastic.MonitoredSubscriptionPropertyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The request to update subscriptions needed to be monitored by the Elastic monitor resource. </param>
        /// <returns> A new <see cref="Elastic.MonitoredSubscriptionPropertyData"/> instance for mocking. </returns>
        public static MonitoredSubscriptionPropertyData MonitoredSubscriptionPropertyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SubscriptionList properties = null)
        {
            return new MonitoredSubscriptionPropertyData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SubscriptionList"/>. </summary>
        /// <param name="operation"> The operation for the patch on the resource. </param>
        /// <param name="monitoredSubscriptionList"> List of subscriptions and the state of the monitoring. </param>
        /// <param name="provisioningState"> Provisioning State of the resource. </param>
        /// <returns> A new <see cref="Models.SubscriptionList"/> instance for mocking. </returns>
        public static SubscriptionList SubscriptionList(Operation? operation = null, IEnumerable<MonitoredSubscription> monitoredSubscriptionList = null, ElasticProvisioningState? provisioningState = null)
        {
            monitoredSubscriptionList ??= new List<MonitoredSubscription>();

            return new SubscriptionList(operation, monitoredSubscriptionList?.ToList(), provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticTagRuleProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the monitoring tag rules. </param>
        /// <param name="logRules"> Rules for sending logs. </param>
        /// <returns> A new <see cref="Models.ElasticTagRuleProperties"/> instance for mocking. </returns>
        public static ElasticTagRuleProperties ElasticTagRuleProperties(ElasticProvisioningState? provisioningState = null, ElasticLogRules logRules = null)
        {
            return new ElasticTagRuleProperties(provisioningState, logRules, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MonitoredResourceInfo"/>. </summary>
        /// <param name="id"> The ARM id of the resource. </param>
        /// <param name="sendingLogs"> Flag indicating the status of the resource for sending logs operation to Elastic. </param>
        /// <param name="reasonForLogsStatus"> Reason for why the resource is sending logs (or why it is not sending). </param>
        /// <returns> A new <see cref="Models.MonitoredResourceInfo"/> instance for mocking. </returns>
        public static MonitoredResourceInfo MonitoredResourceInfo(ResourceIdentifier id = null, SendingLogsStatus? sendingLogs = null, string reasonForLogsStatus = null)
        {
            return new MonitoredResourceInfo(id, sendingLogs, reasonForLogsStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticDeploymentInfoResult"/>. </summary>
        /// <param name="status"> The Elastic deployment status. </param>
        /// <param name="version"> Version of the elasticsearch in Elastic cloud deployment. </param>
        /// <param name="memoryCapacity"> RAM capacity of the elasticsearch in Elastic cloud deployment. </param>
        /// <param name="diskCapacity"> Disk capacity of the elasticsearch in Elastic cloud deployment. </param>
        /// <param name="elasticsearchEndPoint"> Elasticsearch endpoint in Elastic cloud deployment. This is either the aliased_endpoint if available, or the service_url otherwise. </param>
        /// <param name="deploymentUri"> Deployment URL of the elasticsearch in Elastic cloud deployment. </param>
        /// <param name="marketplaceSaasInfo"> Marketplace SaaS Info of the resource. </param>
        /// <param name="projectType"> Project Type - Applicable for Serverless only. </param>
        /// <param name="configurationType"> ConfigurationType Type - Applicable for Serverless only. </param>
        /// <returns> A new <see cref="Models.ElasticDeploymentInfoResult"/> instance for mocking. </returns>
        public static ElasticDeploymentInfoResult ElasticDeploymentInfoResult(ElasticDeploymentStatus? status = null, string version = null, string memoryCapacity = null, string diskCapacity = null, string elasticsearchEndPoint = null, Uri deploymentUri = null, MarketplaceSaaSInfo marketplaceSaasInfo = null, string projectType = null, string configurationType = null)
        {
            return new ElasticDeploymentInfoResult(
                status,
                version,
                memoryCapacity,
                diskCapacity,
                elasticsearchEndPoint,
                deploymentUri,
                marketplaceSaasInfo,
                projectType,
                configurationType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceSaaSInfo"/>. </summary>
        /// <param name="marketplaceSubscription"> Marketplace Subscription. </param>
        /// <param name="marketplaceName"> Marketplace Subscription Details: SAAS Name. </param>
        /// <param name="marketplaceResourceId"> Marketplace Subscription Details: Resource URI. </param>
        /// <param name="marketplaceStatus"> Marketplace Subscription Details: SaaS Subscription Status. </param>
        /// <param name="billedAzureSubscriptionId"> The Azure Subscription ID to which the Marketplace Subscription belongs and gets billed into. </param>
        /// <param name="isSubscribed"> Flag specifying if the Marketplace status is subscribed or not. </param>
        /// <returns> A new <see cref="Models.MarketplaceSaaSInfo"/> instance for mocking. </returns>
        public static MarketplaceSaaSInfo MarketplaceSaaSInfo(MarketplaceSaaSInfoMarketplaceSubscription marketplaceSubscription = null, string marketplaceName = null, string marketplaceResourceId = null, string marketplaceStatus = null, string billedAzureSubscriptionId = null, bool? isSubscribed = null)
        {
            return new MarketplaceSaaSInfo(
                marketplaceSubscription,
                marketplaceName,
                marketplaceResourceId,
                marketplaceStatus,
                billedAzureSubscriptionId,
                isSubscribed,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceSaaSInfoMarketplaceSubscription"/>. </summary>
        /// <param name="id"> Marketplace Subscription Id. This is a GUID-formatted string. </param>
        /// <param name="publisherId"> Publisher Id of the Marketplace offer. </param>
        /// <param name="offerId"> Offer Id of the Marketplace offer,. </param>
        /// <returns> A new <see cref="Models.MarketplaceSaaSInfoMarketplaceSubscription"/> instance for mocking. </returns>
        public static MarketplaceSaaSInfoMarketplaceSubscription MarketplaceSaaSInfoMarketplaceSubscription(string id = null, string publisherId = null, string offerId = null)
        {
            return new MarketplaceSaaSInfoMarketplaceSubscription(id, publisherId, offerId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticExternalUserCreationResult"/>. </summary>
        /// <param name="isCreated"> Shows if user is created or updated. </param>
        /// <returns> A new <see cref="Models.ElasticExternalUserCreationResult"/> instance for mocking. </returns>
        public static ElasticExternalUserCreationResult ElasticExternalUserCreationResult(bool? isCreated = null)
        {
            return new ElasticExternalUserCreationResult(isCreated, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticBillingInfoResult"/>. </summary>
        /// <param name="marketplaceSaasInfo"> Marketplace Subscription details. </param>
        /// <param name="partnerBillingEntity"> Partner Billing Entity details: Organization Info. </param>
        /// <returns> A new <see cref="Models.ElasticBillingInfoResult"/> instance for mocking. </returns>
        public static ElasticBillingInfoResult ElasticBillingInfoResult(MarketplaceSaaSInfo marketplaceSaasInfo = null, PartnerBillingEntity partnerBillingEntity = null)
        {
            return new ElasticBillingInfoResult(marketplaceSaasInfo, partnerBillingEntity, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PartnerBillingEntity"/>. </summary>
        /// <param name="id"> The Elastic Organization Id. </param>
        /// <param name="name"> The Elastic Organization Name. </param>
        /// <param name="partnerEntityUri"> Link to the elastic organization page. </param>
        /// <returns> A new <see cref="Models.PartnerBillingEntity"/> instance for mocking. </returns>
        public static PartnerBillingEntity PartnerBillingEntity(string id = null, string name = null, Uri partnerEntityUri = null)
        {
            return new PartnerBillingEntity(id, name, partnerEntityUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConnectedPartnerResourceInfo"/>. </summary>
        /// <param name="properties"> Connected Partner Resource Properties. </param>
        /// <returns> A new <see cref="Models.ConnectedPartnerResourceInfo"/> instance for mocking. </returns>
        public static ConnectedPartnerResourceInfo ConnectedPartnerResourceInfo(ConnectedPartnerResourceProperties properties = null)
        {
            return new ConnectedPartnerResourceInfo(properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConnectedPartnerResourceProperties"/>. </summary>
        /// <param name="partnerDeploymentName"> Elastic resource name. </param>
        /// <param name="partnerDeploymentUri"> URL of the resource in Elastic cloud. </param>
        /// <param name="azureResourceId"> The azure resource Id of the resource. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="connectedPartnerResourcePropertiesType"> The hosting type of the resource. </param>
        /// <returns> A new <see cref="Models.ConnectedPartnerResourceProperties"/> instance for mocking. </returns>
        public static ConnectedPartnerResourceProperties ConnectedPartnerResourceProperties(string partnerDeploymentName = null, Uri partnerDeploymentUri = null, ResourceIdentifier azureResourceId = null, AzureLocation? location = null, string connectedPartnerResourcePropertiesType = null)
        {
            return new ConnectedPartnerResourceProperties(
                partnerDeploymentName,
                partnerDeploymentUri,
                azureResourceId,
                location,
                connectedPartnerResourcePropertiesType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Elastic.ElasticOpenAIIntegrationData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Open AI Integration details. </param>
        /// <returns> A new <see cref="Elastic.ElasticOpenAIIntegrationData"/> instance for mocking. </returns>
        public static ElasticOpenAIIntegrationData ElasticOpenAIIntegrationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ElasticOpenAIIntegrationProperties properties = null)
        {
            return new ElasticOpenAIIntegrationData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticOpenAIIntegrationProperties"/>. </summary>
        /// <param name="openAIResourceId"> The resource name of Open AI resource. </param>
        /// <param name="openAIResourceEndpoint"> The API endpoint for Open AI resource. </param>
        /// <param name="openAIConnectorId"> The connector id of Open AI resource. </param>
        /// <param name="key"> Value of API key for Open AI resource. </param>
        /// <param name="lastRefreshOn"> Last Update Timestamp for key updation. </param>
        /// <returns> A new <see cref="Models.ElasticOpenAIIntegrationProperties"/> instance for mocking. </returns>
        public static ElasticOpenAIIntegrationProperties ElasticOpenAIIntegrationProperties(string openAIResourceId = null, string openAIResourceEndpoint = null, string openAIConnectorId = null, string key = null, DateTimeOffset? lastRefreshOn = null)
        {
            return new ElasticOpenAIIntegrationProperties(
                openAIResourceId,
                openAIResourceEndpoint,
                openAIConnectorId,
                key,
                lastRefreshOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticOpenAIIntegrationStatusResult"/>. </summary>
        /// <param name="elasticOpenAIIntegrationStatus"> Status of the OpenAI Integration. </param>
        /// <returns> A new <see cref="Models.ElasticOpenAIIntegrationStatusResult"/> instance for mocking. </returns>
        public static ElasticOpenAIIntegrationStatusResult ElasticOpenAIIntegrationStatusResult(string elasticOpenAIIntegrationStatus = null)
        {
            return new ElasticOpenAIIntegrationStatusResult(elasticOpenAIIntegrationStatus != null ? new ElasticOpenAIIntegrationStatusProperties(elasticOpenAIIntegrationStatus, serializedAdditionalRawData: null) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Elastic.ElasticTagRuleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the monitoring tag rules. </param>
        /// <returns> A new <see cref="Elastic.ElasticTagRuleData"/> instance for mocking. </returns>
        public static ElasticTagRuleData ElasticTagRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ElasticTagRuleProperties properties = null)
        {
            return new ElasticTagRuleData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticVmResourceInfo"/>. </summary>
        /// <param name="vmResourceId"> The ARM id of the VM resource. </param>
        /// <returns> A new <see cref="Models.ElasticVmResourceInfo"/> instance for mocking. </returns>
        public static ElasticVmResourceInfo ElasticVmResourceInfo(ResourceIdentifier vmResourceId = null)
        {
            return new ElasticVmResourceInfo(vmResourceId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VmIngestionDetailsResult"/>. </summary>
        /// <param name="cloudId"> The cloudId of given Elastic monitor resource. </param>
        /// <param name="ingestionKey"> Ingestion details to install agent on given VM. </param>
        /// <returns> A new <see cref="Models.VmIngestionDetailsResult"/> instance for mocking. </returns>
        public static VmIngestionDetailsResult VmIngestionDetailsResult(string cloudId = null, string ingestionKey = null)
        {
            return new VmIngestionDetailsResult(cloudId, ingestionKey, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UpgradableVersionListResult"/>. </summary>
        /// <param name="currentVersion"> Current version of the elastic monitor. </param>
        /// <param name="upgradableVersions"> Stack Versions that this version can upgrade to. </param>
        /// <returns> A new <see cref="Models.UpgradableVersionListResult"/> instance for mocking. </returns>
        public static UpgradableVersionListResult UpgradableVersionListResult(string currentVersion = null, IEnumerable<string> upgradableVersions = null)
        {
            upgradableVersions ??= new List<string>();

            return new UpgradableVersionListResult(currentVersion, upgradableVersions?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticTrafficFilterListResult"/>. </summary>
        /// <param name="rulesets"> List of elastic traffic filters in the account. </param>
        /// <returns> A new <see cref="Models.ElasticTrafficFilterListResult"/> instance for mocking. </returns>
        public static ElasticTrafficFilterListResult ElasticTrafficFilterListResult(IEnumerable<ElasticTrafficFilter> rulesets = null)
        {
            rulesets ??= new List<ElasticTrafficFilter>();

            return new ElasticTrafficFilterListResult(rulesets?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticTrafficFilter"/>. </summary>
        /// <param name="id"> Id of the elastic filter. </param>
        /// <param name="name"> Name of the elastic filter. </param>
        /// <param name="description"> Description of the elastic filter. </param>
        /// <param name="region"> Region of the elastic filter. </param>
        /// <param name="filterType"> Type of the elastic filter. </param>
        /// <param name="doesIncludeByDefault"> IncludeByDefault for the elastic filter. </param>
        /// <param name="rules"> Rules in the elastic filter. </param>
        /// <returns> A new <see cref="Models.ElasticTrafficFilter"/> instance for mocking. </returns>
        public static ElasticTrafficFilter ElasticTrafficFilter(string id = null, string name = null, string description = null, string region = null, ElasticFilterType? filterType = null, bool? doesIncludeByDefault = null, IEnumerable<ElasticTrafficFilterRule> rules = null)
        {
            rules ??= new List<ElasticTrafficFilterRule>();

            return new ElasticTrafficFilter(
                id,
                name,
                description,
                region,
                filterType,
                doesIncludeByDefault,
                rules?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticTrafficFilterRule"/>. </summary>
        /// <param name="source"> IP of the elastic filter rule. </param>
        /// <param name="description"> Description of the elastic filter rule. </param>
        /// <param name="azureEndpointGuid"> Guid of Private Endpoint in the elastic filter rule. </param>
        /// <param name="azureEndpointName"> Name of the Private Endpoint in the elastic filter rule. </param>
        /// <param name="id"> Id of the elastic filter rule. </param>
        /// <returns> A new <see cref="Models.ElasticTrafficFilterRule"/> instance for mocking. </returns>
        public static ElasticTrafficFilterRule ElasticTrafficFilterRule(string source = null, string description = null, string azureEndpointGuid = null, string azureEndpointName = null, string id = null)
        {
            return new ElasticTrafficFilterRule(
                source,
                description,
                azureEndpointGuid,
                azureEndpointName,
                id,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticUserApiKeyResult"/>. </summary>
        /// <param name="elasticUserApiKey"></param>
        /// <returns> A new <see cref="Models.ElasticUserApiKeyResult"/> instance for mocking. </returns>
        public static ElasticUserApiKeyResult ElasticUserApiKeyResult(string elasticUserApiKey = null)
        {
            return new ElasticUserApiKeyResult(elasticUserApiKey != null ? new ElasticUserApiKeyProperties(elasticUserApiKey, serializedAdditionalRawData: null) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticOrganizationToAzureSubscriptionMappingResult"/>. </summary>
        /// <param name="properties"> The properties of Azure Subscription ID to which the Organization of the logged in user belongs and gets billed into. </param>
        /// <returns> A new <see cref="Models.ElasticOrganizationToAzureSubscriptionMappingResult"/> instance for mocking. </returns>
        public static ElasticOrganizationToAzureSubscriptionMappingResult ElasticOrganizationToAzureSubscriptionMappingResult(ElasticOrganizationToAzureSubscriptionMappingProperties properties = null)
        {
            return new ElasticOrganizationToAzureSubscriptionMappingResult(properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticOrganizationToAzureSubscriptionMappingProperties"/>. </summary>
        /// <param name="billedAzureSubscriptionId"> The Azure Subscription ID to which the Organization belongs and gets billed into. This is empty for a new user OR a user without an Elastic Organization. </param>
        /// <param name="marketplaceSaasInfo"> Marketplace SaaS Info of the resource. </param>
        /// <param name="elasticOrganizationId"> The Elastic Organization Id. </param>
        /// <param name="elasticOrganizationName"> The Elastic Organization Name. </param>
        /// <returns> A new <see cref="Models.ElasticOrganizationToAzureSubscriptionMappingProperties"/> instance for mocking. </returns>
        public static ElasticOrganizationToAzureSubscriptionMappingProperties ElasticOrganizationToAzureSubscriptionMappingProperties(string billedAzureSubscriptionId = null, MarketplaceSaaSInfo marketplaceSaasInfo = null, string elasticOrganizationId = null, string elasticOrganizationName = null)
        {
            return new ElasticOrganizationToAzureSubscriptionMappingProperties(billedAzureSubscriptionId, marketplaceSaasInfo, elasticOrganizationId, elasticOrganizationName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Elastic.ElasticMonitorData" />. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="skuName"> SKU of the monitor resource. </param>
        /// <param name="properties"> Properties of the monitor resource. </param>
        /// <param name="identity"> Identity properties of the monitor resource. Current supported identity types: SystemAssigned. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.Elastic.ElasticMonitorData" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static ElasticMonitorData ElasticMonitorData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, string skuName, ElasticMonitorProperties properties, ManagedServiceIdentity identity)
        {
            return ElasticMonitorData(id: id, name: name, resourceType: resourceType, systemData: systemData, tags: tags, location: location, kind: default, skuName: skuName, properties: properties, identity: identity);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Elastic.Models.ElasticMonitorProperties" />. </summary>
        /// <param name="provisioningState"> Provisioning state of the monitor resource. </param>
        /// <param name="monitoringStatus"> Flag specifying if the resource monitoring is enabled or disabled. </param>
        /// <param name="elasticProperties"> Elastic cloud properties. </param>
        /// <param name="userInfo"> User information. </param>
        /// <param name="planDetails"> Plan details of the monitor resource. </param>
        /// <param name="version"> Version of elastic of the monitor resource. </param>
        /// <param name="subscriptionState"> State of the Azure Subscription containing the monitor resource. </param>
        /// <param name="saaSAzureSubscriptionStatus"> Status of Azure Subscription where Marketplace SaaS is located. </param>
        /// <param name="sourceCampaignName"> Name of the marketing campaign. </param>
        /// <param name="sourceCampaignId"> A unique identifier associated with the campaign. </param>
        /// <param name="liftrResourceCategory"></param>
        /// <param name="liftrResourcePreference"> The priority of the resource. </param>
        /// <param name="isApiKeyGenerated"> Flag to determine if User API Key has to be generated and shared. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.Elastic.Models.ElasticMonitorProperties" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static ElasticMonitorProperties ElasticMonitorProperties(ElasticProvisioningState? provisioningState, ElasticMonitoringStatus? monitoringStatus, ElasticCloudProperties elasticProperties, ElasticUserInfo userInfo, ElasticPlanDetails planDetails, string version, string subscriptionState, string saaSAzureSubscriptionStatus, string sourceCampaignName, string sourceCampaignId, ElasticLiftrResourceCategory? liftrResourceCategory, int? liftrResourcePreference, bool? isApiKeyGenerated)
        {
            return ElasticMonitorProperties(provisioningState: provisioningState, monitoringStatus: monitoringStatus, elasticProperties: elasticProperties, userInfo: userInfo, planDetails: planDetails, version: version, subscriptionState: subscriptionState, saaSAzureSubscriptionStatus: saaSAzureSubscriptionStatus, sourceCampaignName: sourceCampaignName, sourceCampaignId: sourceCampaignId, liftrResourceCategory: liftrResourceCategory, liftrResourcePreference: liftrResourcePreference, isApiKeyGenerated: isApiKeyGenerated, hostingType: default, projectDetails: default);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Elastic.Models.ElasticDeploymentInfoResult" />. </summary>
        /// <param name="status"> The Elastic deployment status. </param>
        /// <param name="version"> Version of the elasticsearch in Elastic cloud deployment. </param>
        /// <param name="memoryCapacity"> RAM capacity of the elasticsearch in Elastic cloud deployment. </param>
        /// <param name="diskCapacity"> Disk capacity of the elasticsearch in Elastic cloud deployment. </param>
        /// <param name="elasticsearchEndPoint"> Elasticsearch endpoint in Elastic cloud deployment. This is either the aliased_endpoint if available, or the service_url otherwise. </param>
        /// <param name="deploymentUri"> Deployment URL of the elasticsearch in Elastic cloud deployment. </param>
        /// <param name="marketplaceSaasInfo"> Marketplace SaaS Info of the resource. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.Elastic.Models.ElasticDeploymentInfoResult" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static ElasticDeploymentInfoResult ElasticDeploymentInfoResult(ElasticDeploymentStatus? status, string version, string memoryCapacity, string diskCapacity, string elasticsearchEndPoint, Uri deploymentUri, MarketplaceSaaSInfo marketplaceSaasInfo)
        {
            return ElasticDeploymentInfoResult(status: status, version: version, memoryCapacity: memoryCapacity, diskCapacity: diskCapacity, elasticsearchEndPoint: elasticsearchEndPoint, deploymentUri: deploymentUri, marketplaceSaasInfo: marketplaceSaasInfo, projectType: default, configurationType: default);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Elastic.Models.ConnectedPartnerResourceProperties" />. </summary>
        /// <param name="partnerDeploymentName"> Elastic deployment name. </param>
        /// <param name="partnerDeploymentUri"> Deployment URL of the elasticsearch in Elastic cloud deployment. </param>
        /// <param name="azureResourceId"> The azure resource Id of the deployment. </param>
        /// <param name="location"> The location of the deployment. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.Elastic.Models.ConnectedPartnerResourceProperties" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static ConnectedPartnerResourceProperties ConnectedPartnerResourceProperties(string partnerDeploymentName, Uri partnerDeploymentUri, ResourceIdentifier azureResourceId, AzureLocation? location)
        {
            return ConnectedPartnerResourceProperties(partnerDeploymentName: partnerDeploymentName, partnerDeploymentUri: partnerDeploymentUri, azureResourceId: azureResourceId, location: location, connectedPartnerResourcePropertiesType: default);
        }
    }
}
