// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Advisor.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The metadata entity contract.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class MetadataEntity
    {
        /// <summary>
        /// Initializes a new instance of the MetadataEntity class.
        /// </summary>
        public MetadataEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetadataEntity class.
        /// </summary>
        /// <param name="id">The resource Id of the metadata entity.</param>
        /// <param name="type">The type of the metadata entity.</param>
        /// <param name="name">The name of the metadata entity.</param>
        /// <param name="displayName">The display name.</param>
        /// <param name="dependsOn">The list of keys on which this entity
        /// depends on.</param>
        /// <param name="applicableScenarios">The list of scenarios applicable
        /// to this metadata entity.</param>
        /// <param name="supportedValues">The list of supported values.</param>
        public MetadataEntity(string id = default(string), string type = default(string), string name = default(string), string displayName = default(string), IList<string> dependsOn = default(IList<string>), IList<string> applicableScenarios = default(IList<string>), IList<MetadataSupportedValueDetail> supportedValues = default(IList<MetadataSupportedValueDetail>))
        {
            Id = id;
            Type = type;
            Name = name;
            DisplayName = displayName;
            DependsOn = dependsOn;
            ApplicableScenarios = applicableScenarios;
            SupportedValues = supportedValues;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resource Id of the metadata entity.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the type of the metadata entity.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the name of the metadata entity.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the display name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the list of keys on which this entity depends on.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dependsOn")]
        public IList<string> DependsOn { get; set; }

        /// <summary>
        /// Gets or sets the list of scenarios applicable to this metadata
        /// entity.
        /// </summary>
        [JsonProperty(PropertyName = "properties.applicableScenarios")]
        public IList<string> ApplicableScenarios { get; set; }

        /// <summary>
        /// Gets or sets the list of supported values.
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportedValues")]
        public IList<MetadataSupportedValueDetail> SupportedValues { get; set; }

    }
}
