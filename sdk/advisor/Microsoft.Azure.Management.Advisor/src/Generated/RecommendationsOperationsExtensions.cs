// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Advisor
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RecommendationsOperations.
    /// </summary>
    public static partial class RecommendationsOperationsExtensions
    {
            /// <summary>
            /// Initiates the recommendation generation or computation process for a
            /// subscription. This operation is asynchronous. The generated recommendations
            /// are stored in a cache in the Advisor service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static RecommendationsGenerateHeaders Generate(this IRecommendationsOperations operations)
            {
                return operations.GenerateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiates the recommendation generation or computation process for a
            /// subscription. This operation is asynchronous. The generated recommendations
            /// are stored in a cache in the Advisor service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecommendationsGenerateHeaders> GenerateAsync(this IRecommendationsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Retrieves the status of the recommendation computation or generation
            /// process. Invoke this API after calling the generation recommendation. The
            /// URI of this API is returned in the Location field of the response header.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// The operation ID, which can be found from the Location field in the
            /// generate recommendation response header.
            /// </param>
            public static void GetGenerateStatus(this IRecommendationsOperations operations, System.Guid operationId)
            {
                operations.GetGenerateStatusAsync(operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the status of the recommendation computation or generation
            /// process. Invoke this API after calling the generation recommendation. The
            /// URI of this API is returned in the Location field of the response header.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// The operation ID, which can be found from the Location field in the
            /// generate recommendation response header.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetGenerateStatusAsync(this IRecommendationsOperations operations, System.Guid operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetGenerateStatusWithHttpMessagesAsync(operationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Obtains cached recommendations for a subscription. The recommendations are
            /// generated or computed by invoking generateRecommendations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply to the recommendations.
            /// </param>
            /// <param name='top'>
            /// The number of recommendations per page if a paged version of this API is
            /// being used.
            /// </param>
            /// <param name='skipToken'>
            /// The page-continuation token to use with a paged version of this API.
            /// </param>
            public static IPage<ResourceRecommendationBase> List(this IRecommendationsOperations operations, string filter = default(string), int? top = default(int?), string skipToken = default(string))
            {
                return operations.ListAsync(filter, top, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtains cached recommendations for a subscription. The recommendations are
            /// generated or computed by invoking generateRecommendations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply to the recommendations.
            /// </param>
            /// <param name='top'>
            /// The number of recommendations per page if a paged version of this API is
            /// being used.
            /// </param>
            /// <param name='skipToken'>
            /// The page-continuation token to use with a paged version of this API.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceRecommendationBase>> ListAsync(this IRecommendationsOperations operations, string filter = default(string), int? top = default(int?), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(filter, top, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Obtains details of a cached recommendation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource Manager identifier of the resource to
            /// which the recommendation applies.
            /// </param>
            /// <param name='recommendationId'>
            /// The recommendation ID.
            /// </param>
            public static ResourceRecommendationBase Get(this IRecommendationsOperations operations, string resourceUri, string recommendationId)
            {
                return operations.GetAsync(resourceUri, recommendationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtains details of a cached recommendation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource Manager identifier of the resource to
            /// which the recommendation applies.
            /// </param>
            /// <param name='recommendationId'>
            /// The recommendation ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceRecommendationBase> GetAsync(this IRecommendationsOperations operations, string resourceUri, string recommendationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceUri, recommendationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Obtains cached recommendations for a subscription. The recommendations are
            /// generated or computed by invoking generateRecommendations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceRecommendationBase> ListNext(this IRecommendationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtains cached recommendations for a subscription. The recommendations are
            /// generated or computed by invoking generateRecommendations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceRecommendationBase>> ListNextAsync(this IRecommendationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
