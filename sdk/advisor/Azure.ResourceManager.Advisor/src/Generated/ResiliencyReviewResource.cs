// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Advisor.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Advisor
{
    /// <summary>
    /// A Class representing a ResiliencyReview along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="ResiliencyReviewResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetResiliencyReviewResource method.
    /// Otherwise you can get one from its parent resource <see cref="SubscriptionResource"/> using the GetResiliencyReview method.
    /// </summary>
    public partial class ResiliencyReviewResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="ResiliencyReviewResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="reviewId"> The reviewId. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string reviewId)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _resiliencyReviewClientDiagnostics;
        private readonly ResiliencyReviewsRestOperations _resiliencyReviewRestClient;
        private readonly ClientDiagnostics _triageRecommendationsClientDiagnostics;
        private readonly TriageRecommendationsRestOperations _triageRecommendationsRestClient;
        private readonly ClientDiagnostics _triageResourcesClientDiagnostics;
        private readonly TriageResourcesRestOperations _triageResourcesRestClient;
        private readonly ResiliencyReviewData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Advisor/resiliencyReviews";

        /// <summary> Initializes a new instance of the <see cref="ResiliencyReviewResource"/> class for mocking. </summary>
        protected ResiliencyReviewResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResiliencyReviewResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal ResiliencyReviewResource(ArmClient client, ResiliencyReviewData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="ResiliencyReviewResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ResiliencyReviewResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _resiliencyReviewClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Advisor", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string resiliencyReviewApiVersion);
            _resiliencyReviewRestClient = new ResiliencyReviewsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, resiliencyReviewApiVersion);
            _triageRecommendationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Advisor", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _triageRecommendationsRestClient = new TriageRecommendationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _triageResourcesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Advisor", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _triageResourcesRestClient = new TriageResourcesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual ResiliencyReviewData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get existing Azure Advisor resiliency review by id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ResiliencyReview_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ResiliencyReviewResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ResiliencyReviewResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _resiliencyReviewClientDiagnostics.CreateScope("ResiliencyReviewResource.Get");
            scope.Start();
            try
            {
                var response = await _resiliencyReviewRestClient.GetAsync(Id.SubscriptionId, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ResiliencyReviewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get existing Azure Advisor resiliency review by id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ResiliencyReview_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ResiliencyReviewResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ResiliencyReviewResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _resiliencyReviewClientDiagnostics.CreateScope("ResiliencyReviewResource.Get");
            scope.Start();
            try
            {
                var response = _resiliencyReviewRestClient.Get(Id.SubscriptionId, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ResiliencyReviewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an existing recommendation by id for an existing Azure Advisor Resiliency Review Id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageRecommendation_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> is null. </exception>
        public virtual async Task<Response<TriageRecommendation>> GetTriageRecommendationAsync(string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var scope = _triageRecommendationsClientDiagnostics.CreateScope("ResiliencyReviewResource.GetTriageRecommendation");
            scope.Start();
            try
            {
                var response = await _triageRecommendationsRestClient.GetAsync(Id.SubscriptionId, Id.Name, recommendationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an existing recommendation by id for an existing Azure Advisor Resiliency Review Id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageRecommendation_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> is null. </exception>
        public virtual Response<TriageRecommendation> GetTriageRecommendation(string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var scope = _triageRecommendationsClientDiagnostics.CreateScope("ResiliencyReviewResource.GetTriageRecommendation");
            scope.Start();
            try
            {
                var response = _triageRecommendationsRestClient.Get(Id.SubscriptionId, Id.Name, recommendationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get list of recommendations for an existing Azure Advisor Resiliency Review Id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageRecommendation_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of items to be included in the result. </param>
        /// <param name="skip"> The number of items to skip before starting to collect the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TriageRecommendation"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TriageRecommendation> GetTriageRecommendationsAsync(int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _triageRecommendationsRestClient.CreateListRequest(Id.SubscriptionId, Id.Name, top, skip);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _triageRecommendationsRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.Name, top, skip);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => TriageRecommendation.DeserializeTriageRecommendation(e), _triageRecommendationsClientDiagnostics, Pipeline, "ResiliencyReviewResource.GetTriageRecommendations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get list of recommendations for an existing Azure Advisor Resiliency Review Id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageRecommendation_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of items to be included in the result. </param>
        /// <param name="skip"> The number of items to skip before starting to collect the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TriageRecommendation"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TriageRecommendation> GetTriageRecommendations(int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _triageRecommendationsRestClient.CreateListRequest(Id.SubscriptionId, Id.Name, top, skip);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _triageRecommendationsRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.Name, top, skip);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => TriageRecommendation.DeserializeTriageRecommendation(e), _triageRecommendationsClientDiagnostics, Pipeline, "ResiliencyReviewResource.GetTriageRecommendations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Approve a triage recommendation for a given id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/approve</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageRecommendations_ApproveTriageRecommendation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> is null. </exception>
        public virtual async Task<Response> ApproveTriageRecommendationTriageRecommendationAsync(string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var scope = _triageRecommendationsClientDiagnostics.CreateScope("ResiliencyReviewResource.ApproveTriageRecommendationTriageRecommendation");
            scope.Start();
            try
            {
                var response = await _triageRecommendationsRestClient.ApproveTriageRecommendationAsync(Id.SubscriptionId, Id.Name, recommendationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Approve a triage recommendation for a given id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/approve</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageRecommendations_ApproveTriageRecommendation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> is null. </exception>
        public virtual Response ApproveTriageRecommendationTriageRecommendation(string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var scope = _triageRecommendationsClientDiagnostics.CreateScope("ResiliencyReviewResource.ApproveTriageRecommendationTriageRecommendation");
            scope.Start();
            try
            {
                var response = _triageRecommendationsRestClient.ApproveTriageRecommendation(Id.SubscriptionId, Id.Name, recommendationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Reject an existing triage recommendation for a given id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/reject</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageRecommendations_RejectTriageRecommendation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="recommendationRejectBody"> JSON object that contains reason for rejecting triage recommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> or <paramref name="recommendationRejectBody"/> is null. </exception>
        public virtual async Task<Response> RejectTriageRecommendationTriageRecommendationAsync(string recommendationId, RecommendationRejectBody recommendationRejectBody, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));
            Argument.AssertNotNull(recommendationRejectBody, nameof(recommendationRejectBody));

            using var scope = _triageRecommendationsClientDiagnostics.CreateScope("ResiliencyReviewResource.RejectTriageRecommendationTriageRecommendation");
            scope.Start();
            try
            {
                var response = await _triageRecommendationsRestClient.RejectTriageRecommendationAsync(Id.SubscriptionId, Id.Name, recommendationId, recommendationRejectBody, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Reject an existing triage recommendation for a given id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/reject</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageRecommendations_RejectTriageRecommendation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="recommendationRejectBody"> JSON object that contains reason for rejecting triage recommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> or <paramref name="recommendationRejectBody"/> is null. </exception>
        public virtual Response RejectTriageRecommendationTriageRecommendation(string recommendationId, RecommendationRejectBody recommendationRejectBody, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));
            Argument.AssertNotNull(recommendationRejectBody, nameof(recommendationRejectBody));

            using var scope = _triageRecommendationsClientDiagnostics.CreateScope("ResiliencyReviewResource.RejectTriageRecommendationTriageRecommendation");
            scope.Start();
            try
            {
                var response = _triageRecommendationsRestClient.RejectTriageRecommendation(Id.SubscriptionId, Id.Name, recommendationId, recommendationRejectBody, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Reset an existing triage recommendation for a given id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/reset</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageRecommendations_ResetTriageRecommendation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> is null. </exception>
        public virtual async Task<Response> ResetTriageRecommendationTriageRecommendationAsync(string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var scope = _triageRecommendationsClientDiagnostics.CreateScope("ResiliencyReviewResource.ResetTriageRecommendationTriageRecommendation");
            scope.Start();
            try
            {
                var response = await _triageRecommendationsRestClient.ResetTriageRecommendationAsync(Id.SubscriptionId, Id.Name, recommendationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Reset an existing triage recommendation for a given id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/reset</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageRecommendations_ResetTriageRecommendation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> is null. </exception>
        public virtual Response ResetTriageRecommendationTriageRecommendation(string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var scope = _triageRecommendationsClientDiagnostics.CreateScope("ResiliencyReviewResource.ResetTriageRecommendationTriageRecommendation");
            scope.Start();
            try
            {
                var response = _triageRecommendationsRestClient.ResetTriageRecommendation(Id.SubscriptionId, Id.Name, recommendationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a triage resource for a given review and recommendation.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/providers/Microsoft.Advisor/triageResources/{recommendationResourceId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The triage resource id. </param>
        /// <param name="recommendationResourceId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> or <paramref name="recommendationResourceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> or <paramref name="recommendationResourceId"/> is null. </exception>
        public virtual async Task<Response<TriageResource>> GetTriageResourceAsync(string recommendationId, string recommendationResourceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));
            Argument.AssertNotNullOrEmpty(recommendationResourceId, nameof(recommendationResourceId));

            using var scope = _triageResourcesClientDiagnostics.CreateScope("ResiliencyReviewResource.GetTriageResource");
            scope.Start();
            try
            {
                var response = await _triageResourcesRestClient.GetAsync(Id.SubscriptionId, Id.Name, recommendationId, recommendationResourceId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a triage resource for a given review and recommendation.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/providers/Microsoft.Advisor/triageResources/{recommendationResourceId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The triage resource id. </param>
        /// <param name="recommendationResourceId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> or <paramref name="recommendationResourceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> or <paramref name="recommendationResourceId"/> is null. </exception>
        public virtual Response<TriageResource> GetTriageResource(string recommendationId, string recommendationResourceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));
            Argument.AssertNotNullOrEmpty(recommendationResourceId, nameof(recommendationResourceId));

            using var scope = _triageResourcesClientDiagnostics.CreateScope("ResiliencyReviewResource.GetTriageResource");
            scope.Start();
            try
            {
                var response = _triageResourcesRestClient.Get(Id.SubscriptionId, Id.Name, recommendationId, recommendationResourceId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List all triage resources that belong to a review and recommendation.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/providers/Microsoft.Advisor/triageResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageResource_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> is null. </exception>
        /// <returns> An async collection of <see cref="TriageResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TriageResource> GetTriageResourcesAsync(string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _triageResourcesRestClient.CreateListRequest(Id.SubscriptionId, Id.Name, recommendationId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _triageResourcesRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.Name, recommendationId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => TriageResource.DeserializeTriageResource(e), _triageResourcesClientDiagnostics, Pipeline, "ResiliencyReviewResource.GetTriageResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all triage resources that belong to a review and recommendation.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}/providers/Microsoft.Advisor/triageRecommendations/{recommendationId}/providers/Microsoft.Advisor/triageResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TriageResource_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendationId"/> is null. </exception>
        /// <returns> A collection of <see cref="TriageResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TriageResource> GetTriageResources(string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _triageResourcesRestClient.CreateListRequest(Id.SubscriptionId, Id.Name, recommendationId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _triageResourcesRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.Name, recommendationId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => TriageResource.DeserializeTriageResource(e), _triageResourcesClientDiagnostics, Pipeline, "ResiliencyReviewResource.GetTriageResources", "value", "nextLink", cancellationToken);
        }
    }
}
