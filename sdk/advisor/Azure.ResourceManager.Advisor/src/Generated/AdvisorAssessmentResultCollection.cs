// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Advisor
{
    /// <summary>
    /// A class representing a collection of <see cref="AdvisorAssessmentResultResource"/> and their operations.
    /// Each <see cref="AdvisorAssessmentResultResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get an <see cref="AdvisorAssessmentResultCollection"/> instance call the GetAdvisorAssessmentResults method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class AdvisorAssessmentResultCollection : ArmCollection, IEnumerable<AdvisorAssessmentResultResource>, IAsyncEnumerable<AdvisorAssessmentResultResource>
    {
        private readonly ClientDiagnostics _advisorAssessmentResultAssessmentResultsClientDiagnostics;
        private readonly AssessmentResultsRestOperations _advisorAssessmentResultAssessmentResultsRestClient;

        /// <summary> Initializes a new instance of the <see cref="AdvisorAssessmentResultCollection"/> class for mocking. </summary>
        protected AdvisorAssessmentResultCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AdvisorAssessmentResultCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AdvisorAssessmentResultCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _advisorAssessmentResultAssessmentResultsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Advisor", AdvisorAssessmentResultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AdvisorAssessmentResultResource.ResourceType, out string advisorAssessmentResultAssessmentResultsApiVersion);
            _advisorAssessmentResultAssessmentResultsRestClient = new AssessmentResultsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, advisorAssessmentResultAssessmentResultsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or Overwrite Azure Advisor assessment resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/assessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentResult_Put</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorAssessmentResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="assessmentName"> Advisor assessment name. </param>
        /// <param name="data"> The Azure Advisor assessment data structure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<AdvisorAssessmentResultResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string assessmentName, AdvisorAssessmentResultData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _advisorAssessmentResultAssessmentResultsClientDiagnostics.CreateScope("AdvisorAssessmentResultCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _advisorAssessmentResultAssessmentResultsRestClient.PutAsync(Id.SubscriptionId, assessmentName, data, cancellationToken).ConfigureAwait(false);
                var uri = _advisorAssessmentResultAssessmentResultsRestClient.CreatePutRequestUri(Id.SubscriptionId, assessmentName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new AdvisorArmOperation<AdvisorAssessmentResultResource>(Response.FromValue(new AdvisorAssessmentResultResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or Overwrite Azure Advisor assessment resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/assessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentResult_Put</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorAssessmentResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="assessmentName"> Advisor assessment name. </param>
        /// <param name="data"> The Azure Advisor assessment data structure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<AdvisorAssessmentResultResource> CreateOrUpdate(WaitUntil waitUntil, string assessmentName, AdvisorAssessmentResultData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _advisorAssessmentResultAssessmentResultsClientDiagnostics.CreateScope("AdvisorAssessmentResultCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _advisorAssessmentResultAssessmentResultsRestClient.Put(Id.SubscriptionId, assessmentName, data, cancellationToken);
                var uri = _advisorAssessmentResultAssessmentResultsRestClient.CreatePutRequestUri(Id.SubscriptionId, assessmentName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new AdvisorArmOperation<AdvisorAssessmentResultResource>(Response.FromValue(new AdvisorAssessmentResultResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a existing Azure Advisor assessment.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/assessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentResult_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorAssessmentResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentName"> Advisor assessment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual async Task<Response<AdvisorAssessmentResultResource>> GetAsync(string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var scope = _advisorAssessmentResultAssessmentResultsClientDiagnostics.CreateScope("AdvisorAssessmentResultCollection.Get");
            scope.Start();
            try
            {
                var response = await _advisorAssessmentResultAssessmentResultsRestClient.GetAsync(Id.SubscriptionId, assessmentName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AdvisorAssessmentResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a existing Azure Advisor assessment.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/assessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentResult_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorAssessmentResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentName"> Advisor assessment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual Response<AdvisorAssessmentResultResource> Get(string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var scope = _advisorAssessmentResultAssessmentResultsClientDiagnostics.CreateScope("AdvisorAssessmentResultCollection.Get");
            scope.Start();
            try
            {
                var response = _advisorAssessmentResultAssessmentResultsRestClient.Get(Id.SubscriptionId, assessmentName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AdvisorAssessmentResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get list of Azure Advisor assessment.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/assessments</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentResult_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorAssessmentResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> Limit the result to the specified number of rows. </param>
        /// <param name="skiptoken"> The page-continuation token to use with a paged version of this API. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AdvisorAssessmentResultResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AdvisorAssessmentResultResource> GetAllAsync(string top = null, string skiptoken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _advisorAssessmentResultAssessmentResultsRestClient.CreateListRequest(Id.SubscriptionId, top, skiptoken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _advisorAssessmentResultAssessmentResultsRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, top, skiptoken);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new AdvisorAssessmentResultResource(Client, AdvisorAssessmentResultData.DeserializeAdvisorAssessmentResultData(e)), _advisorAssessmentResultAssessmentResultsClientDiagnostics, Pipeline, "AdvisorAssessmentResultCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get list of Azure Advisor assessment.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/assessments</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentResult_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorAssessmentResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> Limit the result to the specified number of rows. </param>
        /// <param name="skiptoken"> The page-continuation token to use with a paged version of this API. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AdvisorAssessmentResultResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AdvisorAssessmentResultResource> GetAll(string top = null, string skiptoken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _advisorAssessmentResultAssessmentResultsRestClient.CreateListRequest(Id.SubscriptionId, top, skiptoken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _advisorAssessmentResultAssessmentResultsRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, top, skiptoken);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new AdvisorAssessmentResultResource(Client, AdvisorAssessmentResultData.DeserializeAdvisorAssessmentResultData(e)), _advisorAssessmentResultAssessmentResultsClientDiagnostics, Pipeline, "AdvisorAssessmentResultCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/assessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentResult_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorAssessmentResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentName"> Advisor assessment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var scope = _advisorAssessmentResultAssessmentResultsClientDiagnostics.CreateScope("AdvisorAssessmentResultCollection.Exists");
            scope.Start();
            try
            {
                var response = await _advisorAssessmentResultAssessmentResultsRestClient.GetAsync(Id.SubscriptionId, assessmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/assessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentResult_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorAssessmentResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentName"> Advisor assessment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual Response<bool> Exists(string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var scope = _advisorAssessmentResultAssessmentResultsClientDiagnostics.CreateScope("AdvisorAssessmentResultCollection.Exists");
            scope.Start();
            try
            {
                var response = _advisorAssessmentResultAssessmentResultsRestClient.Get(Id.SubscriptionId, assessmentName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/assessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentResult_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorAssessmentResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentName"> Advisor assessment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual async Task<NullableResponse<AdvisorAssessmentResultResource>> GetIfExistsAsync(string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var scope = _advisorAssessmentResultAssessmentResultsClientDiagnostics.CreateScope("AdvisorAssessmentResultCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _advisorAssessmentResultAssessmentResultsRestClient.GetAsync(Id.SubscriptionId, assessmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<AdvisorAssessmentResultResource>(response.GetRawResponse());
                return Response.FromValue(new AdvisorAssessmentResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/assessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentResult_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorAssessmentResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentName"> Advisor assessment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual NullableResponse<AdvisorAssessmentResultResource> GetIfExists(string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var scope = _advisorAssessmentResultAssessmentResultsClientDiagnostics.CreateScope("AdvisorAssessmentResultCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _advisorAssessmentResultAssessmentResultsRestClient.Get(Id.SubscriptionId, assessmentName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<AdvisorAssessmentResultResource>(response.GetRawResponse());
                return Response.FromValue(new AdvisorAssessmentResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AdvisorAssessmentResultResource> IEnumerable<AdvisorAssessmentResultResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AdvisorAssessmentResultResource> IAsyncEnumerable<AdvisorAssessmentResultResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
