// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Advisor
{
    public partial class AdvisorAssessmentResultData : IUtf8JsonSerializable, IJsonModel<AdvisorAssessmentResultData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AdvisorAssessmentResultData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AdvisorAssessmentResultData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AdvisorAssessmentResultData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AdvisorAssessmentResultData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(WorkloadId))
            {
                writer.WritePropertyName("workloadId"u8);
                writer.WriteStringValue(WorkloadId);
            }
            if (options.Format != "W" && Optional.IsDefined(WorkloadName))
            {
                writer.WritePropertyName("workloadName"u8);
                writer.WriteStringValue(WorkloadName);
            }
            if (options.Format != "W" && Optional.IsDefined(AssessmentId))
            {
                writer.WritePropertyName("assessmentId"u8);
                writer.WriteStringValue(AssessmentId);
            }
            if (options.Format != "W" && Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(TypeId))
            {
                writer.WritePropertyName("typeId"u8);
                writer.WriteStringValue(TypeId);
            }
            if (options.Format != "W" && Optional.IsDefined(Score))
            {
                writer.WritePropertyName("score"u8);
                writer.WriteNumberValue(Score.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State);
            }
            if (options.Format != "W" && Optional.IsDefined(TypeVersion))
            {
                writer.WritePropertyName("typeVersion"u8);
                writer.WriteStringValue(TypeVersion);
            }
            if (Optional.IsDefined(Locale))
            {
                writer.WritePropertyName("locale"u8);
                writer.WriteStringValue(Locale);
            }
            writer.WriteEndObject();
        }

        AdvisorAssessmentResultData IJsonModel<AdvisorAssessmentResultData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AdvisorAssessmentResultData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AdvisorAssessmentResultData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAdvisorAssessmentResultData(document.RootElement, options);
        }

        internal static AdvisorAssessmentResultData DeserializeAdvisorAssessmentResultData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            string workloadId = default;
            string workloadName = default;
            string assessmentId = default;
            string description = default;
            string typeId = default;
            int? score = default;
            string state = default;
            string typeVersion = default;
            string locale = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerAdvisorContext.Default);
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("workloadId"u8))
                        {
                            workloadId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("workloadName"u8))
                        {
                            workloadName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("assessmentId"u8))
                        {
                            assessmentId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("typeId"u8))
                        {
                            typeId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("score"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            score = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("state"u8))
                        {
                            state = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("typeVersion"u8))
                        {
                            typeVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("locale"u8))
                        {
                            locale = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AdvisorAssessmentResultData(
                id,
                name,
                type,
                systemData,
                workloadId,
                workloadName,
                assessmentId,
                description,
                typeId,
                score,
                state,
                typeVersion,
                locale,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AdvisorAssessmentResultData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AdvisorAssessmentResultData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerAdvisorContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AdvisorAssessmentResultData)} does not support writing '{options.Format}' format.");
            }
        }

        AdvisorAssessmentResultData IPersistableModel<AdvisorAssessmentResultData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AdvisorAssessmentResultData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAdvisorAssessmentResultData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AdvisorAssessmentResultData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AdvisorAssessmentResultData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
