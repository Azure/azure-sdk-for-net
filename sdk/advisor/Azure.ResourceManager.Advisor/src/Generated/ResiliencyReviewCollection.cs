// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Advisor
{
    /// <summary>
    /// A class representing a collection of <see cref="ResiliencyReviewResource"/> and their operations.
    /// Each <see cref="ResiliencyReviewResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get a <see cref="ResiliencyReviewCollection"/> instance call the GetResiliencyReviews method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class ResiliencyReviewCollection : ArmCollection, IEnumerable<ResiliencyReviewResource>, IAsyncEnumerable<ResiliencyReviewResource>
    {
        private readonly ClientDiagnostics _resiliencyReviewClientDiagnostics;
        private readonly ResiliencyReviewsRestOperations _resiliencyReviewRestClient;

        /// <summary> Initializes a new instance of the <see cref="ResiliencyReviewCollection"/> class for mocking. </summary>
        protected ResiliencyReviewCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResiliencyReviewCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ResiliencyReviewCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _resiliencyReviewClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Advisor", ResiliencyReviewResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResiliencyReviewResource.ResourceType, out string resiliencyReviewApiVersion);
            _resiliencyReviewRestClient = new ResiliencyReviewsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, resiliencyReviewApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get existing Azure Advisor resiliency review by id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ResiliencyReview_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ResiliencyReviewResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="reviewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="reviewId"/> is null. </exception>
        public virtual async Task<Response<ResiliencyReviewResource>> GetAsync(string reviewId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));

            using var scope = _resiliencyReviewClientDiagnostics.CreateScope("ResiliencyReviewCollection.Get");
            scope.Start();
            try
            {
                var response = await _resiliencyReviewRestClient.GetAsync(Id.SubscriptionId, reviewId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ResiliencyReviewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get existing Azure Advisor resiliency review by id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ResiliencyReview_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ResiliencyReviewResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="reviewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="reviewId"/> is null. </exception>
        public virtual Response<ResiliencyReviewResource> Get(string reviewId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));

            using var scope = _resiliencyReviewClientDiagnostics.CreateScope("ResiliencyReviewCollection.Get");
            scope.Start();
            try
            {
                var response = _resiliencyReviewRestClient.Get(Id.SubscriptionId, reviewId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ResiliencyReviewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get list of Azure Advisor resiliency reviews.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ResiliencyReview_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ResiliencyReviewResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of items to be included in the result. </param>
        /// <param name="skip"> The number of items to skip before starting to collect the result set. </param>
        /// <param name="filter"> The filter to apply.&lt;br&gt;Filter can be applied to properties ['reviewStatus', 'reviewId'] with operators ['eq', 'and', 'or'].&lt;br&gt;Example:&lt;br&gt;- $filter=reviewStatus eq 'New'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ResiliencyReviewResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ResiliencyReviewResource> GetAllAsync(int? top = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _resiliencyReviewRestClient.CreateListRequest(Id.SubscriptionId, top, skip, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _resiliencyReviewRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, top, skip, filter);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ResiliencyReviewResource(Client, ResiliencyReviewData.DeserializeResiliencyReviewData(e)), _resiliencyReviewClientDiagnostics, Pipeline, "ResiliencyReviewCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get list of Azure Advisor resiliency reviews.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ResiliencyReview_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ResiliencyReviewResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of items to be included in the result. </param>
        /// <param name="skip"> The number of items to skip before starting to collect the result set. </param>
        /// <param name="filter"> The filter to apply.&lt;br&gt;Filter can be applied to properties ['reviewStatus', 'reviewId'] with operators ['eq', 'and', 'or'].&lt;br&gt;Example:&lt;br&gt;- $filter=reviewStatus eq 'New'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ResiliencyReviewResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ResiliencyReviewResource> GetAll(int? top = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _resiliencyReviewRestClient.CreateListRequest(Id.SubscriptionId, top, skip, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _resiliencyReviewRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, top, skip, filter);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ResiliencyReviewResource(Client, ResiliencyReviewData.DeserializeResiliencyReviewData(e)), _resiliencyReviewClientDiagnostics, Pipeline, "ResiliencyReviewCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ResiliencyReview_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ResiliencyReviewResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="reviewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="reviewId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string reviewId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));

            using var scope = _resiliencyReviewClientDiagnostics.CreateScope("ResiliencyReviewCollection.Exists");
            scope.Start();
            try
            {
                var response = await _resiliencyReviewRestClient.GetAsync(Id.SubscriptionId, reviewId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ResiliencyReview_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ResiliencyReviewResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="reviewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="reviewId"/> is null. </exception>
        public virtual Response<bool> Exists(string reviewId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));

            using var scope = _resiliencyReviewClientDiagnostics.CreateScope("ResiliencyReviewCollection.Exists");
            scope.Start();
            try
            {
                var response = _resiliencyReviewRestClient.Get(Id.SubscriptionId, reviewId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ResiliencyReview_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ResiliencyReviewResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="reviewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="reviewId"/> is null. </exception>
        public virtual async Task<NullableResponse<ResiliencyReviewResource>> GetIfExistsAsync(string reviewId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));

            using var scope = _resiliencyReviewClientDiagnostics.CreateScope("ResiliencyReviewCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _resiliencyReviewRestClient.GetAsync(Id.SubscriptionId, reviewId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ResiliencyReviewResource>(response.GetRawResponse());
                return Response.FromValue(new ResiliencyReviewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/resiliencyReviews/{reviewId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ResiliencyReview_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ResiliencyReviewResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="reviewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="reviewId"/> is null. </exception>
        public virtual NullableResponse<ResiliencyReviewResource> GetIfExists(string reviewId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));

            using var scope = _resiliencyReviewClientDiagnostics.CreateScope("ResiliencyReviewCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _resiliencyReviewRestClient.Get(Id.SubscriptionId, reviewId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ResiliencyReviewResource>(response.GetRawResponse());
                return Response.FromValue(new ResiliencyReviewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ResiliencyReviewResource> IEnumerable<ResiliencyReviewResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ResiliencyReviewResource> IAsyncEnumerable<ResiliencyReviewResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
