// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Advisor
{
    /// <summary>
    /// A class representing a collection of <see cref="AdvisorScoreEntityResource"/> and their operations.
    /// Each <see cref="AdvisorScoreEntityResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get an <see cref="AdvisorScoreEntityCollection"/> instance call the GetAdvisorScoreEntities method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class AdvisorScoreEntityCollection : ArmCollection, IEnumerable<AdvisorScoreEntityResource>, IAsyncEnumerable<AdvisorScoreEntityResource>
    {
        private readonly ClientDiagnostics _advisorScoreEntityClientDiagnostics;
        private readonly AdvisorScoreEntitiesRestOperations _advisorScoreEntityRestClient;

        /// <summary> Initializes a new instance of the <see cref="AdvisorScoreEntityCollection"/> class for mocking. </summary>
        protected AdvisorScoreEntityCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AdvisorScoreEntityCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AdvisorScoreEntityCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _advisorScoreEntityClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Advisor", AdvisorScoreEntityResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AdvisorScoreEntityResource.ResourceType, out string advisorScoreEntityApiVersion);
            _advisorScoreEntityRestClient = new AdvisorScoreEntitiesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, advisorScoreEntityApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets the advisor score.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/advisorScore/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AdvisorScoreEntity_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorScoreEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The scope of Advisor score entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public virtual async Task<Response<AdvisorScoreEntityResource>> GetAsync(string name, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = _advisorScoreEntityClientDiagnostics.CreateScope("AdvisorScoreEntityCollection.Get");
            scope.Start();
            try
            {
                var response = await _advisorScoreEntityRestClient.GetAsync(Id.SubscriptionId, name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AdvisorScoreEntityResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the advisor score.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/advisorScore/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AdvisorScoreEntity_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorScoreEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The scope of Advisor score entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public virtual Response<AdvisorScoreEntityResource> Get(string name, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = _advisorScoreEntityClientDiagnostics.CreateScope("AdvisorScoreEntityCollection.Get");
            scope.Start();
            try
            {
                var response = _advisorScoreEntityRestClient.Get(Id.SubscriptionId, name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AdvisorScoreEntityResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the list of advisor scores.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/advisorScore</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AdvisorScoreEntity_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorScoreEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AdvisorScoreEntityResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AdvisorScoreEntityResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _advisorScoreEntityRestClient.CreateListRequest(Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, null, e => new AdvisorScoreEntityResource(Client, AdvisorScoreEntityData.DeserializeAdvisorScoreEntityData(e)), _advisorScoreEntityClientDiagnostics, Pipeline, "AdvisorScoreEntityCollection.GetAll", "value", null, cancellationToken);
        }

        /// <summary>
        /// Gets the list of advisor scores.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/advisorScore</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AdvisorScoreEntity_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorScoreEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AdvisorScoreEntityResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AdvisorScoreEntityResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _advisorScoreEntityRestClient.CreateListRequest(Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, null, e => new AdvisorScoreEntityResource(Client, AdvisorScoreEntityData.DeserializeAdvisorScoreEntityData(e)), _advisorScoreEntityClientDiagnostics, Pipeline, "AdvisorScoreEntityCollection.GetAll", "value", null, cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/advisorScore/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AdvisorScoreEntity_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorScoreEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The scope of Advisor score entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string name, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = _advisorScoreEntityClientDiagnostics.CreateScope("AdvisorScoreEntityCollection.Exists");
            scope.Start();
            try
            {
                var response = await _advisorScoreEntityRestClient.GetAsync(Id.SubscriptionId, name, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/advisorScore/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AdvisorScoreEntity_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorScoreEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The scope of Advisor score entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public virtual Response<bool> Exists(string name, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = _advisorScoreEntityClientDiagnostics.CreateScope("AdvisorScoreEntityCollection.Exists");
            scope.Start();
            try
            {
                var response = _advisorScoreEntityRestClient.Get(Id.SubscriptionId, name, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/advisorScore/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AdvisorScoreEntity_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorScoreEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The scope of Advisor score entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public virtual async Task<NullableResponse<AdvisorScoreEntityResource>> GetIfExistsAsync(string name, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = _advisorScoreEntityClientDiagnostics.CreateScope("AdvisorScoreEntityCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _advisorScoreEntityRestClient.GetAsync(Id.SubscriptionId, name, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<AdvisorScoreEntityResource>(response.GetRawResponse());
                return Response.FromValue(new AdvisorScoreEntityResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/advisorScore/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AdvisorScoreEntity_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AdvisorScoreEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The scope of Advisor score entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public virtual NullableResponse<AdvisorScoreEntityResource> GetIfExists(string name, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            using var scope = _advisorScoreEntityClientDiagnostics.CreateScope("AdvisorScoreEntityCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _advisorScoreEntityRestClient.Get(Id.SubscriptionId, name, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<AdvisorScoreEntityResource>(response.GetRawResponse());
                return Response.FromValue(new AdvisorScoreEntityResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AdvisorScoreEntityResource> IEnumerable<AdvisorScoreEntityResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AdvisorScoreEntityResource> IAsyncEnumerable<AdvisorScoreEntityResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
