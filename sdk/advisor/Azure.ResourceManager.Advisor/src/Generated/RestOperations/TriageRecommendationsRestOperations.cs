// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Advisor.Models;

namespace Azure.ResourceManager.Advisor
{
    internal partial class TriageRecommendationsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of TriageRecommendationsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public TriageRecommendationsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2025-05-01-preview";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string reviewId, string recommendationId)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/resiliencyReviews/", false);
            uri.AppendPath(reviewId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/triageRecommendations/", false);
            uri.AppendPath(recommendationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string reviewId, string recommendationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/resiliencyReviews/", false);
            uri.AppendPath(reviewId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/triageRecommendations/", false);
            uri.AppendPath(recommendationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get an existing recommendation by id for an existing Azure Advisor Resiliency Review Id. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<TriageRecommendation>> GetAsync(string subscriptionId, string reviewId, string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var message = CreateGetRequest(subscriptionId, reviewId, recommendationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TriageRecommendation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = TriageRecommendation.DeserializeTriageRecommendation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get an existing recommendation by id for an existing Azure Advisor Resiliency Review Id. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<TriageRecommendation> Get(string subscriptionId, string reviewId, string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var message = CreateGetRequest(subscriptionId, reviewId, recommendationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TriageRecommendation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = TriageRecommendation.DeserializeTriageRecommendation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListRequestUri(string subscriptionId, string reviewId, int? top, int? skip)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/resiliencyReviews/", false);
            uri.AppendPath(reviewId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/triageRecommendations", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            return uri;
        }

        internal HttpMessage CreateListRequest(string subscriptionId, string reviewId, int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/resiliencyReviews/", false);
            uri.AppendPath(reviewId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/triageRecommendations", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get list of recommendations for an existing Azure Advisor Resiliency Review Id. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="top"> The number of items to be included in the result. </param>
        /// <param name="skip"> The number of items to skip before starting to collect the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="reviewId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="reviewId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<TriageRecommendationCollection>> ListAsync(string subscriptionId, string reviewId, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));

            using var message = CreateListRequest(subscriptionId, reviewId, top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TriageRecommendationCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = TriageRecommendationCollection.DeserializeTriageRecommendationCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get list of recommendations for an existing Azure Advisor Resiliency Review Id. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="top"> The number of items to be included in the result. </param>
        /// <param name="skip"> The number of items to skip before starting to collect the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="reviewId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="reviewId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<TriageRecommendationCollection> List(string subscriptionId, string reviewId, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));

            using var message = CreateListRequest(subscriptionId, reviewId, top, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TriageRecommendationCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = TriageRecommendationCollection.DeserializeTriageRecommendationCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateApproveTriageRecommendationRequestUri(string subscriptionId, string reviewId, string recommendationId)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/resiliencyReviews/", false);
            uri.AppendPath(reviewId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/triageRecommendations/", false);
            uri.AppendPath(recommendationId, true);
            uri.AppendPath("/approve", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateApproveTriageRecommendationRequest(string subscriptionId, string reviewId, string recommendationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/resiliencyReviews/", false);
            uri.AppendPath(reviewId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/triageRecommendations/", false);
            uri.AppendPath(recommendationId, true);
            uri.AppendPath("/approve", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Approve a triage recommendation for a given id. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> ApproveTriageRecommendationAsync(string subscriptionId, string reviewId, string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var message = CreateApproveTriageRecommendationRequest(subscriptionId, reviewId, recommendationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Approve a triage recommendation for a given id. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response ApproveTriageRecommendation(string subscriptionId, string reviewId, string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var message = CreateApproveTriageRecommendationRequest(subscriptionId, reviewId, recommendationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateRejectTriageRecommendationRequestUri(string subscriptionId, string reviewId, string recommendationId, RecommendationRejectBody recommendationRejectBody)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/resiliencyReviews/", false);
            uri.AppendPath(reviewId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/triageRecommendations/", false);
            uri.AppendPath(recommendationId, true);
            uri.AppendPath("/reject", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateRejectTriageRecommendationRequest(string subscriptionId, string reviewId, string recommendationId, RecommendationRejectBody recommendationRejectBody)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/resiliencyReviews/", false);
            uri.AppendPath(reviewId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/triageRecommendations/", false);
            uri.AppendPath(recommendationId, true);
            uri.AppendPath("/reject", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(recommendationRejectBody, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Reject an existing triage recommendation for a given id. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="recommendationRejectBody"> JSON object that contains reason for rejecting triage recommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/>, <paramref name="recommendationId"/> or <paramref name="recommendationRejectBody"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> RejectTriageRecommendationAsync(string subscriptionId, string reviewId, string recommendationId, RecommendationRejectBody recommendationRejectBody, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));
            Argument.AssertNotNull(recommendationRejectBody, nameof(recommendationRejectBody));

            using var message = CreateRejectTriageRecommendationRequest(subscriptionId, reviewId, recommendationId, recommendationRejectBody);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Reject an existing triage recommendation for a given id. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="recommendationRejectBody"> JSON object that contains reason for rejecting triage recommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/>, <paramref name="recommendationId"/> or <paramref name="recommendationRejectBody"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response RejectTriageRecommendation(string subscriptionId, string reviewId, string recommendationId, RecommendationRejectBody recommendationRejectBody, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));
            Argument.AssertNotNull(recommendationRejectBody, nameof(recommendationRejectBody));

            using var message = CreateRejectTriageRecommendationRequest(subscriptionId, reviewId, recommendationId, recommendationRejectBody);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateResetTriageRecommendationRequestUri(string subscriptionId, string reviewId, string recommendationId)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/resiliencyReviews/", false);
            uri.AppendPath(reviewId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/triageRecommendations/", false);
            uri.AppendPath(recommendationId, true);
            uri.AppendPath("/reset", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateResetTriageRecommendationRequest(string subscriptionId, string reviewId, string recommendationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/resiliencyReviews/", false);
            uri.AppendPath(reviewId, true);
            uri.AppendPath("/providers/Microsoft.Advisor/triageRecommendations/", false);
            uri.AppendPath(recommendationId, true);
            uri.AppendPath("/reset", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Reset an existing triage recommendation for a given id. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> ResetTriageRecommendationAsync(string subscriptionId, string reviewId, string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var message = CreateResetTriageRecommendationRequest(subscriptionId, reviewId, recommendationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Reset an existing triage recommendation for a given id. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="recommendationId"> The name of the TriageRecommendation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="reviewId"/> or <paramref name="recommendationId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response ResetTriageRecommendation(string subscriptionId, string reviewId, string recommendationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));
            Argument.AssertNotNullOrEmpty(recommendationId, nameof(recommendationId));

            using var message = CreateResetTriageRecommendationRequest(subscriptionId, reviewId, recommendationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListNextPageRequestUri(string nextLink, string subscriptionId, string reviewId, int? top, int? skip)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, string subscriptionId, string reviewId, int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get list of recommendations for an existing Azure Advisor Resiliency Review Id. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="top"> The number of items to be included in the result. </param>
        /// <param name="skip"> The number of items to skip before starting to collect the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/> or <paramref name="reviewId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="reviewId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<TriageRecommendationCollection>> ListNextPageAsync(string nextLink, string subscriptionId, string reviewId, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));

            using var message = CreateListNextPageRequest(nextLink, subscriptionId, reviewId, top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TriageRecommendationCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = TriageRecommendationCollection.DeserializeTriageRecommendationCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get list of recommendations for an existing Azure Advisor Resiliency Review Id. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="reviewId"> Existing review id. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). </param>
        /// <param name="top"> The number of items to be included in the result. </param>
        /// <param name="skip"> The number of items to skip before starting to collect the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/> or <paramref name="reviewId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="reviewId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<TriageRecommendationCollection> ListNextPage(string nextLink, string subscriptionId, string reviewId, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(reviewId, nameof(reviewId));

            using var message = CreateListNextPageRequest(nextLink, subscriptionId, reviewId, top, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TriageRecommendationCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = TriageRecommendationCollection.DeserializeTriageRecommendationCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
