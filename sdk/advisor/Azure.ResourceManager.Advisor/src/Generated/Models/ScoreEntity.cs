// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Advisor.Models
{
    /// <summary> The details of Advisor Score. </summary>
    public partial class ScoreEntity
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ScoreEntity"/>. </summary>
        internal ScoreEntity()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ScoreEntity"/>. </summary>
        /// <param name="date"> The date score was calculated. </param>
        /// <param name="score"> The percentage score. </param>
        /// <param name="consumptionUnits"> The consumption units for the score. </param>
        /// <param name="impactedResourceCount"> The number of impacted resources. </param>
        /// <param name="potentialScoreIncrease"> The potential percentage increase in overall score at subscription level once all recommendations in this scope are implemented. </param>
        /// <param name="categoryCount"> The count of impacted categories. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ScoreEntity(string date, float? score, float? consumptionUnits, float? impactedResourceCount, float? potentialScoreIncrease, float? categoryCount, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Date = date;
            Score = score;
            ConsumptionUnits = consumptionUnits;
            ImpactedResourceCount = impactedResourceCount;
            PotentialScoreIncrease = potentialScoreIncrease;
            CategoryCount = categoryCount;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The date score was calculated. </summary>
        public string Date { get; }
        /// <summary> The percentage score. </summary>
        public float? Score { get; }
        /// <summary> The consumption units for the score. </summary>
        public float? ConsumptionUnits { get; }
        /// <summary> The number of impacted resources. </summary>
        public float? ImpactedResourceCount { get; }
        /// <summary> The potential percentage increase in overall score at subscription level once all recommendations in this scope are implemented. </summary>
        public float? PotentialScoreIncrease { get; }
        /// <summary> The count of impacted categories. </summary>
        public float? CategoryCount { get; }
    }
}
