// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Advisor.Models
{
    /// <summary> Minimum duration for Advisor low CPU utilization evaluation. Valid only for subscriptions. Valid values: 7 (default), 14, 21, 30, 60 or 90. </summary>
    public readonly partial struct MinimumDuration : IEquatable<MinimumDuration>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MinimumDuration"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MinimumDuration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string _7Value = "7";
        private const string _14Value = "14";
        private const string _21Value = "21";
        private const string _30Value = "30";
        private const string _60Value = "60";
        private const string _90Value = "90";

        /// <summary> 7. </summary>
        public static MinimumDuration _7 { get; } = new MinimumDuration(_7Value);
        /// <summary> 14. </summary>
        public static MinimumDuration _14 { get; } = new MinimumDuration(_14Value);
        /// <summary> 21. </summary>
        public static MinimumDuration _21 { get; } = new MinimumDuration(_21Value);
        /// <summary> 30. </summary>
        public static MinimumDuration _30 { get; } = new MinimumDuration(_30Value);
        /// <summary> 60. </summary>
        public static MinimumDuration _60 { get; } = new MinimumDuration(_60Value);
        /// <summary> 90. </summary>
        public static MinimumDuration _90 { get; } = new MinimumDuration(_90Value);
        /// <summary> Determines if two <see cref="MinimumDuration"/> values are the same. </summary>
        public static bool operator ==(MinimumDuration left, MinimumDuration right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MinimumDuration"/> values are not the same. </summary>
        public static bool operator !=(MinimumDuration left, MinimumDuration right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MinimumDuration"/>. </summary>
        public static implicit operator MinimumDuration(string value) => new MinimumDuration(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MinimumDuration other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MinimumDuration other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
