// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Advisor.Models
{
    /// <summary> The tracked properties of a Recommendation. </summary>
    public partial class TrackedRecommendationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TrackedRecommendationProperties"/>. </summary>
        public TrackedRecommendationProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="TrackedRecommendationProperties"/>. </summary>
        /// <param name="state"> The state of the Recommendation. </param>
        /// <param name="postponedOn"> The time the Recommendation was postponed until. </param>
        /// <param name="reason"> The reason the state of the Recommendation was changed. </param>
        /// <param name="priority"> The Priority of the Recommendation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TrackedRecommendationProperties(RecommendationState? state, DateTimeOffset? postponedOn, RecommendationStateChangeReason? reason, RecommendationPriority? priority, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            State = state;
            PostponedOn = postponedOn;
            Reason = reason;
            Priority = priority;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The state of the Recommendation. </summary>
        public RecommendationState? State { get; set; }
        /// <summary> The time the Recommendation was postponed until. </summary>
        public DateTimeOffset? PostponedOn { get; set; }
        /// <summary> The reason the state of the Recommendation was changed. </summary>
        public RecommendationStateChangeReason? Reason { get; set; }
        /// <summary> The Priority of the Recommendation. </summary>
        public RecommendationPriority? Priority { get; set; }
    }
}
