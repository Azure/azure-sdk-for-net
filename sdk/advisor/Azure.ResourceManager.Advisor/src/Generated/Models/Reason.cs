// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Advisor.Models
{
    /// <summary> The reason the state of the Recommendation was changed. </summary>
    public readonly partial struct Reason : IEquatable<Reason>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Reason"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Reason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ExcessiveInvestmentValue = "ExcessiveInvestment";
        private const string TooComplexValue = "TooComplex";
        private const string AlternativeSolutionValue = "AlternativeSolution";
        private const string IncompatibleValue = "Incompatible";
        private const string UnclearValue = "Unclear";
        private const string RiskAcceptedValue = "RiskAccepted";

        /// <summary> ExcessiveInvestment. </summary>
        public static Reason ExcessiveInvestment { get; } = new Reason(ExcessiveInvestmentValue);
        /// <summary> TooComplex. </summary>
        public static Reason TooComplex { get; } = new Reason(TooComplexValue);
        /// <summary> AlternativeSolution. </summary>
        public static Reason AlternativeSolution { get; } = new Reason(AlternativeSolutionValue);
        /// <summary> Incompatible. </summary>
        public static Reason Incompatible { get; } = new Reason(IncompatibleValue);
        /// <summary> Unclear. </summary>
        public static Reason Unclear { get; } = new Reason(UnclearValue);
        /// <summary> RiskAccepted. </summary>
        public static Reason RiskAccepted { get; } = new Reason(RiskAcceptedValue);
        /// <summary> Determines if two <see cref="Reason"/> values are the same. </summary>
        public static bool operator ==(Reason left, Reason right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Reason"/> values are not the same. </summary>
        public static bool operator !=(Reason left, Reason right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Reason"/>. </summary>
        public static implicit operator Reason(string value) => new Reason(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Reason other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Reason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
