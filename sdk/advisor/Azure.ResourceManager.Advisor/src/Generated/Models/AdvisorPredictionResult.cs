// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Advisor.Models
{
    /// <summary> Response used by predictions. </summary>
    public partial class AdvisorPredictionResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AdvisorPredictionResult"/>. </summary>
        internal AdvisorPredictionResult()
        {
            ExtendedProperties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="AdvisorPredictionResult"/>. </summary>
        /// <param name="extendedProperties"> Extended properties. </param>
        /// <param name="predictionType"> Type of the prediction. </param>
        /// <param name="category"> The category of the recommendation. </param>
        /// <param name="impact"> The business impact of the recommendation. </param>
        /// <param name="impactedField"> The resource type identified by Advisor. </param>
        /// <param name="lastUpdatedOn"> The most recent time that Advisor checked the validity of the recommendation. </param>
        /// <param name="shortDescription"> A summary of the recommendation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AdvisorPredictionResult(IReadOnlyDictionary<string, BinaryData> extendedProperties, PredictionType? predictionType, RecommendationCategory? category, RecommendationBusinessImpact? impact, string impactedField, DateTimeOffset? lastUpdatedOn, ShortDescription shortDescription, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ExtendedProperties = extendedProperties;
            PredictionType = predictionType;
            Category = category;
            Impact = impact;
            ImpactedField = impactedField;
            LastUpdatedOn = lastUpdatedOn;
            ShortDescription = shortDescription;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Extended properties
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> ExtendedProperties { get; }
        /// <summary> Type of the prediction. </summary>
        public PredictionType? PredictionType { get; }
        /// <summary> The category of the recommendation. </summary>
        public RecommendationCategory? Category { get; }
        /// <summary> The business impact of the recommendation. </summary>
        public RecommendationBusinessImpact? Impact { get; }
        /// <summary> The resource type identified by Advisor. </summary>
        public string ImpactedField { get; }
        /// <summary> The most recent time that Advisor checked the validity of the recommendation. </summary>
        public DateTimeOffset? LastUpdatedOn { get; }
        /// <summary> A summary of the recommendation. </summary>
        public ShortDescription ShortDescription { get; }
    }
}
