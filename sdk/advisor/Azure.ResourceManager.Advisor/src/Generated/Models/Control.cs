// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Advisor.Models
{
    /// <summary> Control type for recommendation. </summary>
    public readonly partial struct Control : IEquatable<Control>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Control"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Control(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HighAvailabilityValue = "HighAvailability";
        private const string BusinessContinuityValue = "BusinessContinuity";
        private const string DisasterRecoveryValue = "DisasterRecovery";
        private const string ScalabilityValue = "Scalability";
        private const string MonitoringAndAlertingValue = "MonitoringAndAlerting";
        private const string ServiceUpgradeAndRetirementValue = "ServiceUpgradeAndRetirement";
        private const string OtherValue = "Other";
        private const string PrioritizedRecommendationsValue = "PrioritizedRecommendations";
        private const string PersonalizedValue = "Personalized";

        /// <summary> HighAvailability. </summary>
        public static Control HighAvailability { get; } = new Control(HighAvailabilityValue);
        /// <summary> BusinessContinuity. </summary>
        public static Control BusinessContinuity { get; } = new Control(BusinessContinuityValue);
        /// <summary> DisasterRecovery. </summary>
        public static Control DisasterRecovery { get; } = new Control(DisasterRecoveryValue);
        /// <summary> Scalability. </summary>
        public static Control Scalability { get; } = new Control(ScalabilityValue);
        /// <summary> MonitoringAndAlerting. </summary>
        public static Control MonitoringAndAlerting { get; } = new Control(MonitoringAndAlertingValue);
        /// <summary> ServiceUpgradeAndRetirement. </summary>
        public static Control ServiceUpgradeAndRetirement { get; } = new Control(ServiceUpgradeAndRetirementValue);
        /// <summary> Other. </summary>
        public static Control Other { get; } = new Control(OtherValue);
        /// <summary> PrioritizedRecommendations. </summary>
        public static Control PrioritizedRecommendations { get; } = new Control(PrioritizedRecommendationsValue);
        /// <summary> Personalized. </summary>
        public static Control Personalized { get; } = new Control(PersonalizedValue);
        /// <summary> Determines if two <see cref="Control"/> values are the same. </summary>
        public static bool operator ==(Control left, Control right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Control"/> values are not the same. </summary>
        public static bool operator !=(Control left, Control right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Control"/>. </summary>
        public static implicit operator Control(string value) => new Control(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Control other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Control other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
