// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Advisor.Models
{
    public partial class ScoreEntity : IUtf8JsonSerializable, IJsonModel<ScoreEntity>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ScoreEntity>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ScoreEntity>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ScoreEntity>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ScoreEntity)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Date))
            {
                writer.WritePropertyName("date"u8);
                writer.WriteStringValue(Date);
            }
            if (Optional.IsDefined(Score))
            {
                writer.WritePropertyName("score"u8);
                writer.WriteNumberValue(Score.Value);
            }
            if (Optional.IsDefined(ConsumptionUnits))
            {
                writer.WritePropertyName("consumptionUnits"u8);
                writer.WriteNumberValue(ConsumptionUnits.Value);
            }
            if (Optional.IsDefined(ImpactedResourceCount))
            {
                writer.WritePropertyName("impactedResourceCount"u8);
                writer.WriteNumberValue(ImpactedResourceCount.Value);
            }
            if (Optional.IsDefined(PotentialScoreIncrease))
            {
                writer.WritePropertyName("potentialScoreIncrease"u8);
                writer.WriteNumberValue(PotentialScoreIncrease.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CategoryCount))
            {
                writer.WritePropertyName("categoryCount"u8);
                writer.WriteNumberValue(CategoryCount.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ScoreEntity IJsonModel<ScoreEntity>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ScoreEntity>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ScoreEntity)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeScoreEntity(document.RootElement, options);
        }

        internal static ScoreEntity DeserializeScoreEntity(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string date = default;
            float? score = default;
            float? consumptionUnits = default;
            float? impactedResourceCount = default;
            float? potentialScoreIncrease = default;
            float? categoryCount = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("date"u8))
                {
                    date = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("score"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    score = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("consumptionUnits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    consumptionUnits = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("impactedResourceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    impactedResourceCount = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("potentialScoreIncrease"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    potentialScoreIncrease = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("categoryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    categoryCount = property.Value.GetSingle();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ScoreEntity(
                date,
                score,
                consumptionUnits,
                impactedResourceCount,
                potentialScoreIncrease,
                categoryCount,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ScoreEntity>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ScoreEntity>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerAdvisorContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ScoreEntity)} does not support writing '{options.Format}' format.");
            }
        }

        ScoreEntity IPersistableModel<ScoreEntity>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ScoreEntity>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeScoreEntity(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ScoreEntity)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ScoreEntity>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
