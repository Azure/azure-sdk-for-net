// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Advisor.Models
{
    /// <summary> Control type for recommendation. </summary>
    public readonly partial struct RecommendationControlType : IEquatable<RecommendationControlType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RecommendationControlType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RecommendationControlType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HighAvailabilityValue = "HighAvailability";
        private const string BusinessContinuityValue = "BusinessContinuity";
        private const string DisasterRecoveryValue = "DisasterRecovery";
        private const string ScalabilityValue = "Scalability";
        private const string MonitoringAndAlertingValue = "MonitoringAndAlerting";
        private const string ServiceUpgradeAndRetirementValue = "ServiceUpgradeAndRetirement";
        private const string OtherValue = "Other";
        private const string PrioritizedRecommendationsValue = "PrioritizedRecommendations";
        private const string PersonalizedValue = "Personalized";

        /// <summary> HighAvailability. </summary>
        public static RecommendationControlType HighAvailability { get; } = new RecommendationControlType(HighAvailabilityValue);
        /// <summary> BusinessContinuity. </summary>
        public static RecommendationControlType BusinessContinuity { get; } = new RecommendationControlType(BusinessContinuityValue);
        /// <summary> DisasterRecovery. </summary>
        public static RecommendationControlType DisasterRecovery { get; } = new RecommendationControlType(DisasterRecoveryValue);
        /// <summary> Scalability. </summary>
        public static RecommendationControlType Scalability { get; } = new RecommendationControlType(ScalabilityValue);
        /// <summary> MonitoringAndAlerting. </summary>
        public static RecommendationControlType MonitoringAndAlerting { get; } = new RecommendationControlType(MonitoringAndAlertingValue);
        /// <summary> ServiceUpgradeAndRetirement. </summary>
        public static RecommendationControlType ServiceUpgradeAndRetirement { get; } = new RecommendationControlType(ServiceUpgradeAndRetirementValue);
        /// <summary> Other. </summary>
        public static RecommendationControlType Other { get; } = new RecommendationControlType(OtherValue);
        /// <summary> PrioritizedRecommendations. </summary>
        public static RecommendationControlType PrioritizedRecommendations { get; } = new RecommendationControlType(PrioritizedRecommendationsValue);
        /// <summary> Personalized. </summary>
        public static RecommendationControlType Personalized { get; } = new RecommendationControlType(PersonalizedValue);
        /// <summary> Determines if two <see cref="RecommendationControlType"/> values are the same. </summary>
        public static bool operator ==(RecommendationControlType left, RecommendationControlType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RecommendationControlType"/> values are not the same. </summary>
        public static bool operator !=(RecommendationControlType left, RecommendationControlType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RecommendationControlType"/>. </summary>
        public static implicit operator RecommendationControlType(string value) => new RecommendationControlType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RecommendationControlType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RecommendationControlType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
