// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Advisor.Models
{
    /// <summary> Recommendation priority name enum. </summary>
    public readonly partial struct RecommendationPriorityName : IEquatable<RecommendationPriorityName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RecommendationPriorityName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RecommendationPriorityName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HighValue = "High";
        private const string MediumValue = "Medium";
        private const string LowValue = "Low";

        /// <summary> High. </summary>
        public static RecommendationPriorityName High { get; } = new RecommendationPriorityName(HighValue);
        /// <summary> Medium. </summary>
        public static RecommendationPriorityName Medium { get; } = new RecommendationPriorityName(MediumValue);
        /// <summary> Low. </summary>
        public static RecommendationPriorityName Low { get; } = new RecommendationPriorityName(LowValue);
        /// <summary> Determines if two <see cref="RecommendationPriorityName"/> values are the same. </summary>
        public static bool operator ==(RecommendationPriorityName left, RecommendationPriorityName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RecommendationPriorityName"/> values are not the same. </summary>
        public static bool operator !=(RecommendationPriorityName left, RecommendationPriorityName right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RecommendationPriorityName"/>. </summary>
        public static implicit operator RecommendationPriorityName(string value) => new RecommendationPriorityName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RecommendationPriorityName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RecommendationPriorityName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
