// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Advisor.Models
{
    /// <summary> The state of the Recommendation. </summary>
    public readonly partial struct State : IEquatable<State>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="State"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ApprovedValue = "Approved";
        private const string RejectedValue = "Rejected";
        private const string PendingValue = "Pending";
        private const string InProgressValue = "InProgress";
        private const string PostponedValue = "Postponed";
        private const string DismissedValue = "Dismissed";
        private const string CompletedValue = "Completed";

        /// <summary> Approved. </summary>
        public static State Approved { get; } = new State(ApprovedValue);
        /// <summary> Rejected. </summary>
        public static State Rejected { get; } = new State(RejectedValue);
        /// <summary> Pending. </summary>
        public static State Pending { get; } = new State(PendingValue);
        /// <summary> InProgress. </summary>
        public static State InProgress { get; } = new State(InProgressValue);
        /// <summary> Postponed. </summary>
        public static State Postponed { get; } = new State(PostponedValue);
        /// <summary> Dismissed. </summary>
        public static State Dismissed { get; } = new State(DismissedValue);
        /// <summary> Completed. </summary>
        public static State Completed { get; } = new State(CompletedValue);
        /// <summary> Determines if two <see cref="State"/> values are the same. </summary>
        public static bool operator ==(State left, State right) => left.Equals(right);
        /// <summary> Determines if two <see cref="State"/> values are not the same. </summary>
        public static bool operator !=(State left, State right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="State"/>. </summary>
        public static implicit operator State(string value) => new State(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is State other && Equals(other);
        /// <inheritdoc />
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
