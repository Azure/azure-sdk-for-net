// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.QnaMaker.Models
{
    internal partial class QnASearchResult
    {
        internal static QnASearchResult DeserializeQnASearchResult(JsonElement element)
        {
            Optional<IReadOnlyList<string>> questions = default;
            Optional<string> answer = default;
            Optional<float> score = default;
            Optional<int> id = default;
            Optional<string> source = default;
            Optional<IReadOnlyList<MetadataDTO>> metadata = default;
            Optional<QnASearchResultContext> context = default;
            Optional<QnASearchResultAnswerSpan> answerSpan = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("questions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    questions = array;
                    continue;
                }
                if (property.NameEquals("answer"))
                {
                    answer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("score"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    score = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    id = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("source"))
                {
                    source = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metadata"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataDTO> array = new List<MetadataDTO>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataDTO.DeserializeMetadataDTO(item));
                    }
                    metadata = array;
                    continue;
                }
                if (property.NameEquals("context"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    context = QnASearchResultContext.DeserializeQnASearchResultContext(property.Value);
                    continue;
                }
                if (property.NameEquals("answerSpan"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    answerSpan = QnASearchResultAnswerSpan.DeserializeQnASearchResultAnswerSpan(property.Value);
                    continue;
                }
            }
            return new QnASearchResult(Optional.ToList(questions), answer.Value, Optional.ToNullable(score), Optional.ToNullable(id), source.Value, Optional.ToList(metadata), context.Value, answerSpan.Value);
        }
    }
}
