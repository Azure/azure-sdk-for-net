// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.QnaMaker.Models
{
    /// <summary> The Enum4. </summary>
    public readonly partial struct Enum4 : IEquatable<Enum4>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Enum4"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Enum4(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TextElementsV8Value = "TextElements_v8";
        private const string UnicodeCodePointValue = "UnicodeCodePoint";
        private const string Utf16CodeUnitValue = "Utf16CodeUnit";

        /// <summary> TextElements_v8. </summary>
        public static Enum4 TextElementsV8 { get; } = new Enum4(TextElementsV8Value);
        /// <summary> UnicodeCodePoint. </summary>
        public static Enum4 UnicodeCodePoint { get; } = new Enum4(UnicodeCodePointValue);
        /// <summary> Utf16CodeUnit. </summary>
        public static Enum4 Utf16CodeUnit { get; } = new Enum4(Utf16CodeUnitValue);
        /// <summary> Determines if two <see cref="Enum4"/> values are the same. </summary>
        public static bool operator ==(Enum4 left, Enum4 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Enum4"/> values are not the same. </summary>
        public static bool operator !=(Enum4 left, Enum4 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Enum4"/>. </summary>
        public static implicit operator Enum4(string value) => new Enum4(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Enum4 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Enum4 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
