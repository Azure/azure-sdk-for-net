// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.QnaMaker.Models
{
    internal partial class QnAdto : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteNumberValue(Id.Value);
            }
            writer.WritePropertyName("answer");
            writer.WriteStringValue(Answer);
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source");
                writer.WriteStringValue(Source);
            }
            writer.WritePropertyName("questions");
            writer.WriteStartArray();
            foreach (var item in Questions)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Metadata))
            {
                writer.WritePropertyName("metadata");
                writer.WriteStartArray();
                foreach (var item in Metadata)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Context))
            {
                writer.WritePropertyName("context");
                writer.WriteObjectValue(Context);
            }
            if (Optional.IsDefined(LastUpdatedTimestamp))
            {
                writer.WritePropertyName("lastUpdatedTimestamp");
                writer.WriteStringValue(LastUpdatedTimestamp);
            }
            writer.WriteEndObject();
        }

        internal static QnAdto DeserializeQnAdto(JsonElement element)
        {
            Optional<int> id = default;
            string answer = default;
            Optional<string> source = default;
            IList<string> questions = default;
            Optional<IList<MetadataDTO>> metadata = default;
            Optional<QnAdtoContext> context = default;
            Optional<string> lastUpdatedTimestamp = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    id = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("answer"))
                {
                    answer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("source"))
                {
                    source = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("questions"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    questions = array;
                    continue;
                }
                if (property.NameEquals("metadata"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataDTO> array = new List<MetadataDTO>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataDTO.DeserializeMetadataDTO(item));
                    }
                    metadata = array;
                    continue;
                }
                if (property.NameEquals("context"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    context = QnAdtoContext.DeserializeQnAdtoContext(property.Value);
                    continue;
                }
                if (property.NameEquals("lastUpdatedTimestamp"))
                {
                    lastUpdatedTimestamp = property.Value.GetString();
                    continue;
                }
            }
            return new QnAdto(Optional.ToNullable(id), answer, source.Value, questions, Optional.ToList(metadata), context.Value, lastUpdatedTimestamp.Value);
        }
    }
}
