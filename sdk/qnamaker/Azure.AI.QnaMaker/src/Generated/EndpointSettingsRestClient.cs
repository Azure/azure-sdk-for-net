// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.AI.QnaMaker.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.QnaMaker
{
    internal partial class EndpointSettingsRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of EndpointSettingsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt; qnamaker-resource-name &gt;.api.cognitiveservices.azure.com). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public EndpointSettingsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetSettingsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/qnamaker/v5.0-preview.2", false);
            uri.AppendPath("/endpointSettings", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets endpoint settings for an endpoint. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<EndpointSettingsDTO>> GetSettingsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSettingsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EndpointSettingsDTO value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EndpointSettingsDTO.DeserializeEndpointSettingsDTO(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets endpoint settings for an endpoint. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<EndpointSettingsDTO> GetSettings(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSettingsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EndpointSettingsDTO value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EndpointSettingsDTO.DeserializeEndpointSettingsDTO(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateSettingsRequest(EndpointSettingsDTO endpointSettingsPayload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRaw("/qnamaker/v5.0-preview.2", false);
            uri.AppendPath("/endpointSettings", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(endpointSettingsPayload);
            request.Content = content;
            return message;
        }

        /// <summary> Updates endpoint settings for an endpoint. </summary>
        /// <param name="endpointSettingsPayload"> Post body of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpointSettingsPayload"/> is null. </exception>
        public async Task<Response> UpdateSettingsAsync(EndpointSettingsDTO endpointSettingsPayload, CancellationToken cancellationToken = default)
        {
            if (endpointSettingsPayload == null)
            {
                throw new ArgumentNullException(nameof(endpointSettingsPayload));
            }

            using var message = CreateUpdateSettingsRequest(endpointSettingsPayload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates endpoint settings for an endpoint. </summary>
        /// <param name="endpointSettingsPayload"> Post body of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpointSettingsPayload"/> is null. </exception>
        public Response UpdateSettings(EndpointSettingsDTO endpointSettingsPayload, CancellationToken cancellationToken = default)
        {
            if (endpointSettingsPayload == null)
            {
                throw new ArgumentNullException(nameof(endpointSettingsPayload));
            }

            using var message = CreateUpdateSettingsRequest(endpointSettingsPayload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
