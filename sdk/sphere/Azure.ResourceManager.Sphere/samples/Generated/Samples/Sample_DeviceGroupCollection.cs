// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Sphere;
using Azure.ResourceManager.Sphere.Models;

namespace Azure.ResourceManager.Sphere.Samples
{
    public partial class Sample_DeviceGroupCollection
    {
        // DeviceGroups_ListByProduct
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_DeviceGroupsListByProduct()
        {
            // Generated from example definition: specification/sphere/resource-manager/Microsoft.AzureSphere/preview/2022-09-01-preview/examples/GetDeviceGroups.json
            // this example is just showing the usage of "DeviceGroups_ListByProduct" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ProductResource created on azure
            // for more information of creating ProductResource, please refer to the document of ProductResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "MyResourceGroup1";
            string catalogName = "MyCatalog1";
            string productName = "MyProduct1";
            ResourceIdentifier productResourceId = ProductResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, catalogName, productName);
            ProductResource product = client.GetProductResource(productResourceId);

            // get the collection of this DeviceGroupResource
            DeviceGroupCollection collection = product.GetDeviceGroups();

            // invoke the operation and iterate over the result
            await foreach (DeviceGroupResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DeviceGroupData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // DeviceGroups_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_DeviceGroupsGet()
        {
            // Generated from example definition: specification/sphere/resource-manager/Microsoft.AzureSphere/preview/2022-09-01-preview/examples/GetDeviceGroup.json
            // this example is just showing the usage of "DeviceGroups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ProductResource created on azure
            // for more information of creating ProductResource, please refer to the document of ProductResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "MyResourceGroup1";
            string catalogName = "MyCatalog1";
            string productName = "MyProduct1";
            ResourceIdentifier productResourceId = ProductResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, catalogName, productName);
            ProductResource product = client.GetProductResource(productResourceId);

            // get the collection of this DeviceGroupResource
            DeviceGroupCollection collection = product.GetDeviceGroups();

            // invoke the operation
            string deviceGroupName = "MyDeviceGroup1";
            DeviceGroupResource result = await collection.GetAsync(deviceGroupName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DeviceGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DeviceGroups_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_DeviceGroupsGet()
        {
            // Generated from example definition: specification/sphere/resource-manager/Microsoft.AzureSphere/preview/2022-09-01-preview/examples/GetDeviceGroup.json
            // this example is just showing the usage of "DeviceGroups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ProductResource created on azure
            // for more information of creating ProductResource, please refer to the document of ProductResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "MyResourceGroup1";
            string catalogName = "MyCatalog1";
            string productName = "MyProduct1";
            ResourceIdentifier productResourceId = ProductResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, catalogName, productName);
            ProductResource product = client.GetProductResource(productResourceId);

            // get the collection of this DeviceGroupResource
            DeviceGroupCollection collection = product.GetDeviceGroups();

            // invoke the operation
            string deviceGroupName = "MyDeviceGroup1";
            bool result = await collection.ExistsAsync(deviceGroupName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // DeviceGroups_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_DeviceGroupsCreateOrUpdate()
        {
            // Generated from example definition: specification/sphere/resource-manager/Microsoft.AzureSphere/preview/2022-09-01-preview/examples/PutDeviceGroup.json
            // this example is just showing the usage of "DeviceGroups_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ProductResource created on azure
            // for more information of creating ProductResource, please refer to the document of ProductResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "MyResourceGroup1";
            string catalogName = "MyCatalog1";
            string productName = "MyProduct1";
            ResourceIdentifier productResourceId = ProductResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, catalogName, productName);
            ProductResource product = client.GetProductResource(productResourceId);

            // get the collection of this DeviceGroupResource
            DeviceGroupCollection collection = product.GetDeviceGroups();

            // invoke the operation
            string deviceGroupName = "MyDeviceGroup1";
            DeviceGroupData data = new DeviceGroupData()
            {
                Description = "Description for MyDeviceGroup1",
                OSFeedType = OSFeedType.Retail,
                UpdatePolicy = UpdatePolicy.UpdateAll,
            };
            ArmOperation<DeviceGroupResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, deviceGroupName, data);
            DeviceGroupResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DeviceGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
