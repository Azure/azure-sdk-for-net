// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sphere.Models
{
    /// <summary> Image type values. </summary>
    public readonly partial struct ImageType : IEquatable<ImageType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImageType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidImageTypeValue = "InvalidImageType";
        private const string OneBlValue = "OneBl";
        private const string PlutonRuntimeValue = "PlutonRuntime";
        private const string WifiFirmwareValue = "WifiFirmware";
        private const string SecurityMonitorValue = "SecurityMonitor";
        private const string NormalWorldLoaderValue = "NormalWorldLoader";
        private const string NormalWorldDtbValue = "NormalWorldDtb";
        private const string NormalWorldKernelValue = "NormalWorldKernel";
        private const string RootFsValue = "RootFs";
        private const string ServicesValue = "Services";
        private const string ApplicationsValue = "Applications";
        private const string FwConfigValue = "FwConfig";
        private const string BootManifestValue = "BootManifest";
        private const string NwfsValue = "Nwfs";
        private const string TrustedKeystoreValue = "TrustedKeystore";
        private const string PolicyValue = "Policy";
        private const string CustomerBoardConfigValue = "CustomerBoardConfig";
        private const string UpdateCertStoreValue = "UpdateCertStore";
        private const string BaseSystemUpdateManifestValue = "BaseSystemUpdateManifest";
        private const string FirmwareUpdateManifestValue = "FirmwareUpdateManifest";
        private const string CustomerUpdateManifestValue = "CustomerUpdateManifest";
        private const string RecoveryManifestValue = "RecoveryManifest";
        private const string ManifestSetValue = "ManifestSet";
        private const string OtherValue = "Other";

        /// <summary> Invalid image. </summary>
        public static ImageType InvalidImageType { get; } = new ImageType(InvalidImageTypeValue);
        /// <summary> One Bl image type. </summary>
        public static ImageType OneBl { get; } = new ImageType(OneBlValue);
        /// <summary> Pluton image type. </summary>
        public static ImageType PlutonRuntime { get; } = new ImageType(PlutonRuntimeValue);
        /// <summary> Wifi firmware image type. </summary>
        public static ImageType WifiFirmware { get; } = new ImageType(WifiFirmwareValue);
        /// <summary> Security monitor image type. </summary>
        public static ImageType SecurityMonitor { get; } = new ImageType(SecurityMonitorValue);
        /// <summary> Normal world loader image type. </summary>
        public static ImageType NormalWorldLoader { get; } = new ImageType(NormalWorldLoaderValue);
        /// <summary> Normal world dtb image type. </summary>
        public static ImageType NormalWorldDtb { get; } = new ImageType(NormalWorldDtbValue);
        /// <summary> Normal world kernel image type. </summary>
        public static ImageType NormalWorldKernel { get; } = new ImageType(NormalWorldKernelValue);
        /// <summary> Root FS image type. </summary>
        public static ImageType RootFs { get; } = new ImageType(RootFsValue);
        /// <summary> Services image type. </summary>
        public static ImageType Services { get; } = new ImageType(ServicesValue);
        /// <summary> Applications image type. </summary>
        public static ImageType Applications { get; } = new ImageType(ApplicationsValue);
        /// <summary> FW config image type. </summary>
        public static ImageType FwConfig { get; } = new ImageType(FwConfigValue);
        /// <summary> Boot manifest image type. </summary>
        public static ImageType BootManifest { get; } = new ImageType(BootManifestValue);
        /// <summary> Nwfs image type. </summary>
        public static ImageType Nwfs { get; } = new ImageType(NwfsValue);
        /// <summary> Trusted key store image type. </summary>
        public static ImageType TrustedKeystore { get; } = new ImageType(TrustedKeystoreValue);
        /// <summary> Policy image type. </summary>
        public static ImageType Policy { get; } = new ImageType(PolicyValue);
        /// <summary> Customer board config image type. </summary>
        public static ImageType CustomerBoardConfig { get; } = new ImageType(CustomerBoardConfigValue);
        /// <summary> Update certificate store image type. </summary>
        public static ImageType UpdateCertStore { get; } = new ImageType(UpdateCertStoreValue);
        /// <summary> Base system update manifest image type. </summary>
        public static ImageType BaseSystemUpdateManifest { get; } = new ImageType(BaseSystemUpdateManifestValue);
        /// <summary> Firmware update manifest image type. </summary>
        public static ImageType FirmwareUpdateManifest { get; } = new ImageType(FirmwareUpdateManifestValue);
        /// <summary> Customer update manifest image type. </summary>
        public static ImageType CustomerUpdateManifest { get; } = new ImageType(CustomerUpdateManifestValue);
        /// <summary> Recovery manifest image type. </summary>
        public static ImageType RecoveryManifest { get; } = new ImageType(RecoveryManifestValue);
        /// <summary> manifest set image type. </summary>
        public static ImageType ManifestSet { get; } = new ImageType(ManifestSetValue);
        /// <summary> Other image type. </summary>
        public static ImageType Other { get; } = new ImageType(OtherValue);
        /// <summary> Determines if two <see cref="ImageType"/> values are the same. </summary>
        public static bool operator ==(ImageType left, ImageType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImageType"/> values are not the same. </summary>
        public static bool operator !=(ImageType left, ImageType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ImageType"/>. </summary>
        public static implicit operator ImageType(string value) => new ImageType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImageType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImageType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
