// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Sphere.Models
{
    public partial class SphereDeviceInsight : IUtf8JsonSerializable, IModelJsonSerializable<SphereDeviceInsight>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<SphereDeviceInsight>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<SphereDeviceInsight>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("deviceId"u8);
            writer.WriteStringValue(DeviceId);
            writer.WritePropertyName("description"u8);
            writer.WriteStringValue(Description);
            writer.WritePropertyName("startTimestampUtc"u8);
            writer.WriteStringValue(StartTimestampUtc, "O");
            writer.WritePropertyName("endTimestampUtc"u8);
            writer.WriteStringValue(EndTimestampUtc, "O");
            writer.WritePropertyName("eventCategory"u8);
            writer.WriteStringValue(EventCategory);
            writer.WritePropertyName("eventClass"u8);
            writer.WriteStringValue(EventClass);
            writer.WritePropertyName("eventType"u8);
            writer.WriteStringValue(EventType);
            writer.WritePropertyName("eventCount"u8);
            writer.WriteNumberValue(EventCount);
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static SphereDeviceInsight DeserializeSphereDeviceInsight(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string deviceId = default;
            string description = default;
            DateTimeOffset startTimestampUtc = default;
            DateTimeOffset endTimestampUtc = default;
            string eventCategory = default;
            string eventClass = default;
            string eventType = default;
            int eventCount = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deviceId"u8))
                {
                    deviceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startTimestampUtc"u8))
                {
                    startTimestampUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTimestampUtc"u8))
                {
                    endTimestampUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("eventCategory"u8))
                {
                    eventCategory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eventClass"u8))
                {
                    eventClass = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eventType"u8))
                {
                    eventType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eventCount"u8))
                {
                    eventCount = property.Value.GetInt32();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new SphereDeviceInsight(deviceId, description, startTimestampUtc, endTimestampUtc, eventCategory, eventClass, eventType, eventCount, rawData);
        }

        SphereDeviceInsight IModelJsonSerializable<SphereDeviceInsight>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeSphereDeviceInsight(doc.RootElement, options);
        }

        BinaryData IModelSerializable<SphereDeviceInsight>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        SphereDeviceInsight IModelSerializable<SphereDeviceInsight>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeSphereDeviceInsight(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="SphereDeviceInsight"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="SphereDeviceInsight"/> to convert. </param>
        public static implicit operator RequestContent(SphereDeviceInsight model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="SphereDeviceInsight"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator SphereDeviceInsight(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeSphereDeviceInsight(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
