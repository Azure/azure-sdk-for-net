// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text;
using System;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService
{
    public partial class SiteLogsConfigData : IModelJsonSerializable<SiteLogsConfigData>
    {
        void IModelJsonSerializable<SiteLogsConfigData>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options) => ((IUtf8JsonSerializable)this).Write(writer);

        SiteLogsConfigData IModelJsonSerializable<SiteLogsConfigData>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeSiteLogsConfigData(doc.RootElement);
        }

        BinaryData IModelSerializable<SiteLogsConfigData>.Serialize(ModelSerializerOptions options) => (options.Format.ToString()) switch
        {
            "J" or "W" => ModelSerializer.SerializeCore(this, options),
            "bicep" => SerializeBicep(options),
            _ => throw new FormatException($"Unsupported format {options.Format}")
        };

        SiteLogsConfigData IModelSerializable<SiteLogsConfigData>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            using var document = JsonDocument.Parse(data);
            return DeserializeSiteLogsConfigData(document.RootElement);
        }

        private BinaryData SerializeBicep(ModelSerializerOptions options)
        {
            var sb = new StringBuilder();
            sb.AppendLine($"  name: 'logs'");
            sb.AppendLine($"  properties: {{");
            sb.AppendLine($"    applicationLogs: {{");
            sb.AppendChildObject(ApplicationLogs, options, true, 4);
            sb.AppendLine($"    }}");
            sb.AppendLine($"    detailedErrorMessages: {{");
            sb.AppendLine($"      enabled: {IsDetailedErrorMessagesEnabled.ToString().ToLower()}");
            sb.AppendLine($"    }}");
            sb.AppendLine($"    failedRequestsTracing: {{");
            sb.AppendLine($"      enabled: {IsFailedRequestsTracingEnabled.ToString().ToLower()}");
            sb.AppendLine($"    }}");
            sb.AppendLine($"    httpLogs: {{");
            sb.AppendChildObject(HttpLogs, options, true, 4);
            sb.AppendLine($"    }}");
            sb.AppendLine($"  }}");
            return BinaryData.FromString(sb.ToString());
        }
    }
}
