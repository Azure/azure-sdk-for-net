// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AppService
{
    /// <summary> This is the base client representation of the following resources <see cref="CertificateOrderDetectorResource" />, <see cref="HostingEnvironmentDetectorResource" />, <see cref="SiteDetectorResource" /> or <see cref="SiteSlotDetectorResource" />. </summary>
    public abstract partial class AppServiceDetectorResource : ArmResource
    {
        internal static AppServiceDetectorResource GetResource(ArmClient client, AppServiceDetectorData data)
        {
            if (IsCertificateOrderDetectorResource(data.Id))
            {
                return new CertificateOrderDetectorResource(client, data);
            }
            if (IsHostingEnvironmentDetectorResource(data.Id))
            {
                return new HostingEnvironmentDetectorResource(client, data);
            }
            if (IsSiteDetectorResource(data.Id))
            {
                return new SiteDetectorResource(client, data);
            }
            if (IsSiteSlotDetectorResource(data.Id))
            {
                return new SiteSlotDetectorResource(client, data);
            }
            throw new InvalidOperationException($"The resource identifier {data.Id} cannot be recognized as one of the following resource candidates: CertificateOrderDetectorResource, HostingEnvironmentDetectorResource, SiteDetectorResource or SiteSlotDetectorResource");
        }

        private static bool IsCertificateOrderDetectorResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != CertificateOrderDetectorResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsHostingEnvironmentDetectorResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != HostingEnvironmentDetectorResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsSiteDetectorResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != SiteDetectorResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private static bool IsSiteSlotDetectorResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != SiteSlotDetectorResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.ResourceType != ResourceGroupResource.ResourceType)
            {
                return false;
            }
            return true;
        }

        private readonly AppServiceDetectorData _data;

        /// <summary> Initializes a new instance of the <see cref="AppServiceDetectorResource"/> class for mocking. </summary>
        protected AppServiceDetectorResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "AppServiceDetectorResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal AppServiceDetectorResource(ArmClient client, AppServiceDetectorData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="AppServiceDetectorResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal AppServiceDetectorResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual AppServiceDetectorData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        /// <summary> The core implementation for operation Get. </summary>
        /// <param name="startTime"> The start time for detector response. </param>
        /// <param name="endTime"> The end time for the detector response. </param>
        /// <param name="timeGrain"> The time grain for the detector response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected abstract Task<Response<AppServiceDetectorResource>> GetCoreAsync(DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default);

        /// <summary> The default implementation for operation Get. </summary>
        /// <param name="startTime"> The start time for detector response. </param>
        /// <param name="endTime"> The end time for the detector response. </param>
        /// <param name="timeGrain"> The time grain for the detector response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public async Task<Response<AppServiceDetectorResource>> GetAsync(DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            return await GetCoreAsync(startTime, endTime, timeGrain, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> The core implementation for operation Get. </summary>
        /// <param name="startTime"> The start time for detector response. </param>
        /// <param name="endTime"> The end time for the detector response. </param>
        /// <param name="timeGrain"> The time grain for the detector response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected abstract Response<AppServiceDetectorResource> GetCore(DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default);

        /// <summary> The default implementation for operation Get. </summary>
        /// <param name="startTime"> The start time for detector response. </param>
        /// <param name="endTime"> The end time for the detector response. </param>
        /// <param name="timeGrain"> The time grain for the detector response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public Response<AppServiceDetectorResource> Get(DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            return GetCore(startTime, endTime, timeGrain, cancellationToken);
        }
    }
}
