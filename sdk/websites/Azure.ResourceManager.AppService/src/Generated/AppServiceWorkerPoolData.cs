// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService
{
    /// <summary>
    /// A class representing the AppServiceWorkerPool data model.
    /// Worker pool of an App Service Environment ARM resource.
    /// </summary>
    public partial class AppServiceWorkerPoolData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AppServiceWorkerPoolData"/>. </summary>
        public AppServiceWorkerPoolData()
        {
            InstanceNames = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="AppServiceWorkerPoolData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="sku"> Description of a SKU for a scalable resource. </param>
        /// <param name="workerSizeId"> Worker size ID for referencing this worker pool. </param>
        /// <param name="computeMode"> Shared or dedicated app hosting. </param>
        /// <param name="workerSize"> VM size of the worker pool instances. </param>
        /// <param name="workerCount"> Number of instances in the worker pool. </param>
        /// <param name="instanceNames"> Names of all instances in the worker pool (read only). </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AppServiceWorkerPoolData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, AppServiceSkuDescription sku, int? workerSizeId, ComputeModeOption? computeMode, string workerSize, int? workerCount, IReadOnlyList<string> instanceNames, string kind, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Sku = sku;
            WorkerSizeId = workerSizeId;
            ComputeMode = computeMode;
            WorkerSize = workerSize;
            WorkerCount = workerCount;
            InstanceNames = instanceNames;
            Kind = kind;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Description of a SKU for a scalable resource. </summary>
        public AppServiceSkuDescription Sku { get; set; }
        /// <summary> Worker size ID for referencing this worker pool. </summary>
        public int? WorkerSizeId { get; set; }
        /// <summary> Shared or dedicated app hosting. </summary>
        public ComputeModeOption? ComputeMode { get; set; }
        /// <summary> VM size of the worker pool instances. </summary>
        public string WorkerSize { get; set; }
        /// <summary> Number of instances in the worker pool. </summary>
        public int? WorkerCount { get; set; }
        /// <summary> Names of all instances in the worker pool (read only). </summary>
        public IReadOnlyList<string> InstanceNames { get; }
        /// <summary> Kind of resource. </summary>
        public string Kind { get; set; }
    }
}
