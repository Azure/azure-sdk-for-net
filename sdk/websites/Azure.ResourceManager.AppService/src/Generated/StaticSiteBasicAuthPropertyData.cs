// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService
{
    /// <summary>
    /// A class representing the StaticSiteBasicAuthProperty data model.
    /// Static site basic auth properties ARM resource.
    /// </summary>
    public partial class StaticSiteBasicAuthPropertyData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StaticSiteBasicAuthPropertyData"/>. </summary>
        public StaticSiteBasicAuthPropertyData()
        {
            Environments = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="StaticSiteBasicAuthPropertyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="password"> The password for basic auth. </param>
        /// <param name="secretUri"> Url to the secret in Key Vault. </param>
        /// <param name="applicableEnvironmentsMode"> State indicating if basic auth is enabled and for what environments it is active. </param>
        /// <param name="environments"> The list of enabled environments for Basic Auth if ApplicableEnvironmentsMode is set to SpecifiedEnvironments. </param>
        /// <param name="secretState"> State indicating if basic auth has a secret and what type it is. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StaticSiteBasicAuthPropertyData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string password, Uri secretUri, string applicableEnvironmentsMode, IList<string> environments, string secretState, string kind, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Password = password;
            SecretUri = secretUri;
            ApplicableEnvironmentsMode = applicableEnvironmentsMode;
            Environments = environments;
            SecretState = secretState;
            Kind = kind;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The password for basic auth. </summary>
        [WirePath("properties.password")]
        public string Password { get; set; }
        /// <summary> Url to the secret in Key Vault. </summary>
        [WirePath("properties.secretUrl")]
        public Uri SecretUri { get; set; }
        /// <summary> State indicating if basic auth is enabled and for what environments it is active. </summary>
        [WirePath("properties.applicableEnvironmentsMode")]
        public string ApplicableEnvironmentsMode { get; set; }
        /// <summary> The list of enabled environments for Basic Auth if ApplicableEnvironmentsMode is set to SpecifiedEnvironments. </summary>
        [WirePath("properties.environments")]
        public IList<string> Environments { get; }
        /// <summary> State indicating if basic auth has a secret and what type it is. </summary>
        [WirePath("properties.secretState")]
        public string SecretState { get; }
        /// <summary> Kind of resource. </summary>
        [WirePath("kind")]
        public string Kind { get; set; }
    }
}
