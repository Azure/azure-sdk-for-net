// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using Azure;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AppService
{
    /// <summary> A class to add extension methods to Tenant. </summary>
    public static partial class TenantExtensions
    {
        #region User
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        public static User GetUser(this Tenant tenant)
        {
            return GetExtensionClient(tenant).GetUser();
        }
        #endregion

        #region SourceControl
        /// <summary> Gets an object representing a SourceControlCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="SourceControlCollection" /> object. </returns>
        public static SourceControlCollection GetSourceControls(this Tenant tenant)
        {
            return new SourceControlCollection(tenant);
        }
        #endregion

        private static TenantExtensionClient GetExtensionClient(Tenant tenant)
        {
            return tenant.GetCachedClient((armClient) =>
            {
                return new TenantExtensionClient(armClient, tenant.Id);
            }
            );
        }

        /// RequestPath: /providers/Microsoft.CertificateRegistration/operations
        /// ContextualPath: /
        /// OperationId: CertificateRegistrationProvider_ListOperations
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CsmOperationDescription> GetOperationsCertificateRegistrationProvidersAsync(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsCertificateRegistrationProvidersAsync(cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.CertificateRegistration/operations
        /// ContextualPath: /
        /// OperationId: CertificateRegistrationProvider_ListOperations
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static Pageable<CsmOperationDescription> GetOperationsCertificateRegistrationProviders(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsCertificateRegistrationProviders(cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.DomainRegistration/operations
        /// ContextualPath: /
        /// OperationId: DomainRegistrationProvider_ListOperations
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CsmOperationDescription> GetOperationsDomainRegistrationProvidersAsync(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsDomainRegistrationProvidersAsync(cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.DomainRegistration/operations
        /// ContextualPath: /
        /// OperationId: DomainRegistrationProvider_ListOperations
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static Pageable<CsmOperationDescription> GetOperationsDomainRegistrationProviders(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsDomainRegistrationProviders(cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/availableStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetAvailableStacks
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="osTypeSelected"> The ProviderOsTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ApplicationStackResource> GetAvailableStacksProvidersAsync(this Tenant tenant, ProviderOsTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetAvailableStacksProvidersAsync(osTypeSelected, cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/availableStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetAvailableStacks
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="osTypeSelected"> The ProviderOsTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static Pageable<ApplicationStackResource> GetAvailableStacksProviders(this Tenant tenant, ProviderOsTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetAvailableStacksProviders(osTypeSelected, cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/functionAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetFunctionAppStacks
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<FunctionAppStack> GetFunctionAppStacksProvidersAsync(this Tenant tenant, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetFunctionAppStacksProvidersAsync(stackOsType, cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/functionAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetFunctionAppStacks
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static Pageable<FunctionAppStack> GetFunctionAppStacksProviders(this Tenant tenant, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetFunctionAppStacksProviders(stackOsType, cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/locations/{location}/functionAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetFunctionAppStacksForLocation
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="location"> Function App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="System.ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="System.ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<FunctionAppStack> GetFunctionAppStacksForLocationProvidersAsync(this Tenant tenant, string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetFunctionAppStacksForLocationProvidersAsync(location, stackOsType, cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/locations/{location}/functionAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetFunctionAppStacksForLocation
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="location"> Function App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="System.ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="System.ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static Pageable<FunctionAppStack> GetFunctionAppStacksForLocationProviders(this Tenant tenant, string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetFunctionAppStacksForLocationProviders(location, stackOsType, cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/locations/{location}/webAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetWebAppStacksForLocation
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="location"> Web App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="System.ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="System.ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<WebAppStack> GetWebAppStacksForLocationProvidersAsync(this Tenant tenant, string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetWebAppStacksForLocationProvidersAsync(location, stackOsType, cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/locations/{location}/webAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetWebAppStacksForLocation
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="location"> Web App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="System.ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="System.ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static Pageable<WebAppStack> GetWebAppStacksForLocationProviders(this Tenant tenant, string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetWebAppStacksForLocationProviders(location, stackOsType, cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/operations
        /// ContextualPath: /
        /// OperationId: Provider_ListOperations
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CsmOperationDescription> GetOperationsProvidersAsync(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsProvidersAsync(cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/operations
        /// ContextualPath: /
        /// OperationId: Provider_ListOperations
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static Pageable<CsmOperationDescription> GetOperationsProviders(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsProviders(cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/webAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetWebAppStacks
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<WebAppStack> GetWebAppStacksProvidersAsync(this Tenant tenant, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetWebAppStacksProvidersAsync(stackOsType, cancellationToken);
        }

        /// RequestPath: /providers/Microsoft.Web/webAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetWebAppStacks
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static Pageable<WebAppStack> GetWebAppStacksProviders(this Tenant tenant, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetWebAppStacksProviders(stackOsType, cancellationToken);
        }
    }
}
