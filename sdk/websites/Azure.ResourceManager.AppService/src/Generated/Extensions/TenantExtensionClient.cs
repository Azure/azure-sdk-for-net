// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.AppService
{
    /// <summary> A class to add extension methods to Tenant. </summary>
    internal partial class TenantExtensionClient : ArmResource
    {
        private ClientDiagnostics _certificateRegistrationProviderClientDiagnostics;
        private CertificateRegistrationProviderRestOperations _certificateRegistrationProviderRestClient;
        private ClientDiagnostics _domainRegistrationProviderClientDiagnostics;
        private DomainRegistrationProviderRestOperations _domainRegistrationProviderRestClient;
        private ClientDiagnostics _providerClientDiagnostics;
        private ProviderRestOperations _providerRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantExtensionClient"/> class for mocking. </summary>
        protected TenantExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics CertificateRegistrationProviderClientDiagnostics => _certificateRegistrationProviderClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private CertificateRegistrationProviderRestOperations CertificateRegistrationProviderRestClient => _certificateRegistrationProviderRestClient ??= new CertificateRegistrationProviderRestOperations(CertificateRegistrationProviderClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics DomainRegistrationProviderClientDiagnostics => _domainRegistrationProviderClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private DomainRegistrationProviderRestOperations DomainRegistrationProviderRestClient => _domainRegistrationProviderRestClient ??= new DomainRegistrationProviderRestOperations(DomainRegistrationProviderClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics ProviderClientDiagnostics => _providerClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private ProviderRestOperations ProviderRestClient => _providerRestClient ??= new ProviderRestOperations(ProviderClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            Client.TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets an object representing a User along with the instance operations that can be performed on it in the TenantExtensionClient. </summary>
        /// <returns> Returns a <see cref="User" /> object. </returns>
        public virtual User GetUser()
        {
            return new User(Client, new ResourceIdentifier(Id.ToString() + "/providers/Microsoft.Web/publishingUsers/web"));
        }

        /// <summary> Gets a collection of SourceControls in the SourceControl. </summary>
        /// <returns> An object representing collection of SourceControls and their operations over a SourceControl. </returns>
        public virtual SourceControlCollection GetSourceControls()
        {
            return new SourceControlCollection(Client, Id);
        }

        /// RequestPath: /providers/Microsoft.CertificateRegistration/operations
        /// ContextualPath: /
        /// OperationId: CertificateRegistrationProvider_ListOperations
        /// <summary> Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CsmOperationDescription> GetOperationsCertificateRegistrationProvidersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CsmOperationDescription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CertificateRegistrationProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsCertificateRegistrationProviders");
                scope.Start();
                try
                {
                    var response = await CertificateRegistrationProviderRestClient.ListOperationsAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CsmOperationDescription>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CertificateRegistrationProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsCertificateRegistrationProviders");
                scope.Start();
                try
                {
                    var response = await CertificateRegistrationProviderRestClient.ListOperationsNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.CertificateRegistration/operations
        /// ContextualPath: /
        /// OperationId: CertificateRegistrationProvider_ListOperations
        /// <summary> Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CsmOperationDescription> GetOperationsCertificateRegistrationProviders(CancellationToken cancellationToken = default)
        {
            Page<CsmOperationDescription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CertificateRegistrationProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsCertificateRegistrationProviders");
                scope.Start();
                try
                {
                    var response = CertificateRegistrationProviderRestClient.ListOperations(cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CsmOperationDescription> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CertificateRegistrationProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsCertificateRegistrationProviders");
                scope.Start();
                try
                {
                    var response = CertificateRegistrationProviderRestClient.ListOperationsNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.DomainRegistration/operations
        /// ContextualPath: /
        /// OperationId: DomainRegistrationProvider_ListOperations
        /// <summary> Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CsmOperationDescription> GetOperationsDomainRegistrationProvidersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CsmOperationDescription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DomainRegistrationProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsDomainRegistrationProviders");
                scope.Start();
                try
                {
                    var response = await DomainRegistrationProviderRestClient.ListOperationsAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CsmOperationDescription>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DomainRegistrationProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsDomainRegistrationProviders");
                scope.Start();
                try
                {
                    var response = await DomainRegistrationProviderRestClient.ListOperationsNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.DomainRegistration/operations
        /// ContextualPath: /
        /// OperationId: DomainRegistrationProvider_ListOperations
        /// <summary> Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CsmOperationDescription> GetOperationsDomainRegistrationProviders(CancellationToken cancellationToken = default)
        {
            Page<CsmOperationDescription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DomainRegistrationProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsDomainRegistrationProviders");
                scope.Start();
                try
                {
                    var response = DomainRegistrationProviderRestClient.ListOperations(cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CsmOperationDescription> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DomainRegistrationProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsDomainRegistrationProviders");
                scope.Start();
                try
                {
                    var response = DomainRegistrationProviderRestClient.ListOperationsNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/availableStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetAvailableStacks
        /// <summary> Description for Get available application frameworks and their versions. </summary>
        /// <param name="osTypeSelected"> The ProviderOsTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApplicationStackResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApplicationStackResource> GetAvailableStacksProvidersAsync(ProviderOsTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ApplicationStackResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetAvailableStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetAvailableStacksAsync(osTypeSelected, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ApplicationStackResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetAvailableStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetAvailableStacksNextPageAsync(nextLink, osTypeSelected, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/availableStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetAvailableStacks
        /// <summary> Description for Get available application frameworks and their versions. </summary>
        /// <param name="osTypeSelected"> The ProviderOsTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApplicationStackResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApplicationStackResource> GetAvailableStacksProviders(ProviderOsTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            Page<ApplicationStackResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetAvailableStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetAvailableStacks(osTypeSelected, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ApplicationStackResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetAvailableStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetAvailableStacksNextPage(nextLink, osTypeSelected, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/functionAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetFunctionAppStacks
        /// <summary> Description for Get available Function app frameworks and their versions. </summary>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<FunctionAppStack> GetFunctionAppStacksProvidersAsync(ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<FunctionAppStack>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetFunctionAppStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetFunctionAppStacksAsync(stackOsType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<FunctionAppStack>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetFunctionAppStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetFunctionAppStacksNextPageAsync(nextLink, stackOsType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/functionAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetFunctionAppStacks
        /// <summary> Description for Get available Function app frameworks and their versions. </summary>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<FunctionAppStack> GetFunctionAppStacksProviders(ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            Page<FunctionAppStack> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetFunctionAppStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetFunctionAppStacks(stackOsType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<FunctionAppStack> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetFunctionAppStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetFunctionAppStacksNextPage(nextLink, stackOsType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/locations/{location}/functionAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetFunctionAppStacksForLocation
        /// <summary> Description for Get available Function app frameworks and their versions for location. </summary>
        /// <param name="location"> Function App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<FunctionAppStack> GetFunctionAppStacksForLocationProvidersAsync(string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<FunctionAppStack>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetFunctionAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetFunctionAppStacksForLocationAsync(location, stackOsType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<FunctionAppStack>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetFunctionAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetFunctionAppStacksForLocationNextPageAsync(nextLink, location, stackOsType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/locations/{location}/functionAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetFunctionAppStacksForLocation
        /// <summary> Description for Get available Function app frameworks and their versions for location. </summary>
        /// <param name="location"> Function App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<FunctionAppStack> GetFunctionAppStacksForLocationProviders(string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            Page<FunctionAppStack> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetFunctionAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetFunctionAppStacksForLocation(location, stackOsType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<FunctionAppStack> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetFunctionAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetFunctionAppStacksForLocationNextPage(nextLink, location, stackOsType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/locations/{location}/webAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetWebAppStacksForLocation
        /// <summary> Description for Get available Web app frameworks and their versions for location. </summary>
        /// <param name="location"> Web App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WebAppStack> GetWebAppStacksForLocationProvidersAsync(string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<WebAppStack>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetWebAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetWebAppStacksForLocationAsync(location, stackOsType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WebAppStack>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetWebAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetWebAppStacksForLocationNextPageAsync(nextLink, location, stackOsType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/locations/{location}/webAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetWebAppStacksForLocation
        /// <summary> Description for Get available Web app frameworks and their versions for location. </summary>
        /// <param name="location"> Web App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WebAppStack> GetWebAppStacksForLocationProviders(string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            Page<WebAppStack> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetWebAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetWebAppStacksForLocation(location, stackOsType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WebAppStack> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetWebAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetWebAppStacksForLocationNextPage(nextLink, location, stackOsType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/operations
        /// ContextualPath: /
        /// OperationId: Provider_ListOperations
        /// <summary> Description for Gets all available operations for the Microsoft.Web resource provider. Also exposes resource metric definitions. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CsmOperationDescription> GetOperationsProvidersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CsmOperationDescription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.ListOperationsAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CsmOperationDescription>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.ListOperationsNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/operations
        /// ContextualPath: /
        /// OperationId: Provider_ListOperations
        /// <summary> Description for Gets all available operations for the Microsoft.Web resource provider. Also exposes resource metric definitions. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CsmOperationDescription> GetOperationsProviders(CancellationToken cancellationToken = default)
        {
            Page<CsmOperationDescription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.ListOperations(cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CsmOperationDescription> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetOperationsProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.ListOperationsNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/webAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetWebAppStacks
        /// <summary> Description for Get available Web app frameworks and their versions. </summary>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WebAppStack> GetWebAppStacksProvidersAsync(ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<WebAppStack>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetWebAppStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetWebAppStacksAsync(stackOsType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WebAppStack>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetWebAppStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetWebAppStacksNextPageAsync(nextLink, stackOsType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Web/webAppStacks
        /// ContextualPath: /
        /// OperationId: Provider_GetWebAppStacks
        /// <summary> Description for Get available Web app frameworks and their versions. </summary>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WebAppStack> GetWebAppStacksProviders(ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            Page<WebAppStack> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetWebAppStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetWebAppStacks(stackOsType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WebAppStack> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantExtensionClient.GetWebAppStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetWebAppStacksNextPage(nextLink, stackOsType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
