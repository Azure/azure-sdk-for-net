// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;

namespace Azure.ResourceManager.AppService
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _certificateRegistrationProviderClientDiagnostics;
        private CertificateRegistrationProviderRestOperations _certificateRegistrationProviderRestClient;
        private ClientDiagnostics _domainRegistrationProviderClientDiagnostics;
        private DomainRegistrationProviderRestOperations _domainRegistrationProviderRestClient;
        private ClientDiagnostics _providerClientDiagnostics;
        private ProviderRestOperations _providerRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics CertificateRegistrationProviderClientDiagnostics => _certificateRegistrationProviderClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private CertificateRegistrationProviderRestOperations CertificateRegistrationProviderRestClient => _certificateRegistrationProviderRestClient ??= new CertificateRegistrationProviderRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics DomainRegistrationProviderClientDiagnostics => _domainRegistrationProviderClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private DomainRegistrationProviderRestOperations DomainRegistrationProviderRestClient => _domainRegistrationProviderRestClient ??= new DomainRegistrationProviderRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ProviderClientDiagnostics => _providerClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ProviderRestOperations ProviderRestClient => _providerRestClient ??= new ProviderRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets an object representing a UserResource along with the instance operations that can be performed on it in the TenantResource. </summary>
        /// <returns> Returns a <see cref="UserResource" /> object. </returns>
        public virtual UserResource GetUser()
        {
            return new UserResource(Client, new ResourceIdentifier(Id.ToString() + "/providers/Microsoft.Web/publishingUsers/web"));
        }

        /// <summary> Gets a collection of SourceControlResources in the TenantResource. </summary>
        /// <returns> An object representing collection of SourceControlResources and their operations over a SourceControlResource. </returns>
        public virtual SourceControlCollection GetSourceControls()
        {
            return GetCachedClient(Client => new SourceControlCollection(Client, Id));
        }

        /// <summary>
        /// Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider
        /// Request Path: /providers/Microsoft.CertificateRegistration/operations
        /// Operation Id: CertificateRegistrationProvider_ListOperations
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CsmOperationDescription> GetOperationsCertificateRegistrationProvidersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CsmOperationDescription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CertificateRegistrationProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsCertificateRegistrationProviders");
                scope.Start();
                try
                {
                    var response = await CertificateRegistrationProviderRestClient.ListOperationsAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CsmOperationDescription>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CertificateRegistrationProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsCertificateRegistrationProviders");
                scope.Start();
                try
                {
                    var response = await CertificateRegistrationProviderRestClient.ListOperationsNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider
        /// Request Path: /providers/Microsoft.CertificateRegistration/operations
        /// Operation Id: CertificateRegistrationProvider_ListOperations
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CsmOperationDescription> GetOperationsCertificateRegistrationProviders(CancellationToken cancellationToken = default)
        {
            Page<CsmOperationDescription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CertificateRegistrationProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsCertificateRegistrationProviders");
                scope.Start();
                try
                {
                    var response = CertificateRegistrationProviderRestClient.ListOperations(cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CsmOperationDescription> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CertificateRegistrationProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsCertificateRegistrationProviders");
                scope.Start();
                try
                {
                    var response = CertificateRegistrationProviderRestClient.ListOperationsNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider
        /// Request Path: /providers/Microsoft.DomainRegistration/operations
        /// Operation Id: DomainRegistrationProvider_ListOperations
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CsmOperationDescription> GetOperationsDomainRegistrationProvidersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CsmOperationDescription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DomainRegistrationProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsDomainRegistrationProviders");
                scope.Start();
                try
                {
                    var response = await DomainRegistrationProviderRestClient.ListOperationsAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CsmOperationDescription>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DomainRegistrationProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsDomainRegistrationProviders");
                scope.Start();
                try
                {
                    var response = await DomainRegistrationProviderRestClient.ListOperationsNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider
        /// Request Path: /providers/Microsoft.DomainRegistration/operations
        /// Operation Id: DomainRegistrationProvider_ListOperations
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CsmOperationDescription> GetOperationsDomainRegistrationProviders(CancellationToken cancellationToken = default)
        {
            Page<CsmOperationDescription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DomainRegistrationProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsDomainRegistrationProviders");
                scope.Start();
                try
                {
                    var response = DomainRegistrationProviderRestClient.ListOperations(cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CsmOperationDescription> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DomainRegistrationProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsDomainRegistrationProviders");
                scope.Start();
                try
                {
                    var response = DomainRegistrationProviderRestClient.ListOperationsNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/availableStacks
        /// Operation Id: Provider_GetAvailableStacks
        /// </summary>
        /// <param name="osTypeSelected"> The ProviderOSTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApplicationStackResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApplicationStackResource> GetAvailableStacksProvidersAsync(ProviderOSTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ApplicationStackResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAvailableStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetAvailableStacksAsync(osTypeSelected, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ApplicationStackResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAvailableStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetAvailableStacksNextPageAsync(nextLink, osTypeSelected, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/availableStacks
        /// Operation Id: Provider_GetAvailableStacks
        /// </summary>
        /// <param name="osTypeSelected"> The ProviderOSTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApplicationStackResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApplicationStackResource> GetAvailableStacksProviders(ProviderOSTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            Page<ApplicationStackResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAvailableStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetAvailableStacks(osTypeSelected, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ApplicationStackResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAvailableStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetAvailableStacksNextPage(nextLink, osTypeSelected, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/functionAppStacks
        /// Operation Id: Provider_GetFunctionAppStacks
        /// </summary>
        /// <param name="stackOSType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<FunctionAppStack> GetFunctionAppStacksProvidersAsync(ProviderStackOSType? stackOSType = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<FunctionAppStack>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetFunctionAppStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetFunctionAppStacksAsync(stackOSType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<FunctionAppStack>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetFunctionAppStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetFunctionAppStacksNextPageAsync(nextLink, stackOSType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/functionAppStacks
        /// Operation Id: Provider_GetFunctionAppStacks
        /// </summary>
        /// <param name="stackOSType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<FunctionAppStack> GetFunctionAppStacksProviders(ProviderStackOSType? stackOSType = null, CancellationToken cancellationToken = default)
        {
            Page<FunctionAppStack> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetFunctionAppStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetFunctionAppStacks(stackOSType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<FunctionAppStack> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetFunctionAppStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetFunctionAppStacksNextPage(nextLink, stackOSType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions for location
        /// Request Path: /providers/Microsoft.Web/locations/{location}/functionAppStacks
        /// Operation Id: Provider_GetFunctionAppStacksForLocation
        /// </summary>
        /// <param name="location"> Function App stack location. </param>
        /// <param name="stackOSType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<FunctionAppStack> GetFunctionAppStacksForLocationProvidersAsync(AzureLocation location, ProviderStackOSType? stackOSType = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<FunctionAppStack>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetFunctionAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetFunctionAppStacksForLocationAsync(location, stackOSType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<FunctionAppStack>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetFunctionAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetFunctionAppStacksForLocationNextPageAsync(nextLink, location, stackOSType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions for location
        /// Request Path: /providers/Microsoft.Web/locations/{location}/functionAppStacks
        /// Operation Id: Provider_GetFunctionAppStacksForLocation
        /// </summary>
        /// <param name="location"> Function App stack location. </param>
        /// <param name="stackOSType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<FunctionAppStack> GetFunctionAppStacksForLocationProviders(AzureLocation location, ProviderStackOSType? stackOSType = null, CancellationToken cancellationToken = default)
        {
            Page<FunctionAppStack> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetFunctionAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetFunctionAppStacksForLocation(location, stackOSType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<FunctionAppStack> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetFunctionAppStacksForLocationProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetFunctionAppStacksForLocationNextPage(nextLink, location, stackOSType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions for location
        /// Request Path: /providers/Microsoft.Web/locations/{location}/webAppStacks
        /// Operation Id: Provider_GetWebAppStacksForLocation
        /// </summary>
        /// <param name="location"> Web App stack location. </param>
        /// <param name="stackOSType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WebAppStack> GetWebAppStacksByLocationAsync(AzureLocation location, ProviderStackOSType? stackOSType = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<WebAppStack>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetWebAppStacksByLocation");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetWebAppStacksForLocationAsync(location, stackOSType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WebAppStack>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetWebAppStacksByLocation");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetWebAppStacksForLocationNextPageAsync(nextLink, location, stackOSType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions for location
        /// Request Path: /providers/Microsoft.Web/locations/{location}/webAppStacks
        /// Operation Id: Provider_GetWebAppStacksForLocation
        /// </summary>
        /// <param name="location"> Web App stack location. </param>
        /// <param name="stackOSType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WebAppStack> GetWebAppStacksByLocation(AzureLocation location, ProviderStackOSType? stackOSType = null, CancellationToken cancellationToken = default)
        {
            Page<WebAppStack> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetWebAppStacksByLocation");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetWebAppStacksForLocation(location, stackOSType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WebAppStack> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetWebAppStacksByLocation");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetWebAppStacksForLocationNextPage(nextLink, location, stackOSType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Gets all available operations for the Microsoft.Web resource provider. Also exposes resource metric definitions
        /// Request Path: /providers/Microsoft.Web/operations
        /// Operation Id: Provider_ListOperations
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CsmOperationDescription> GetOperationsProvidersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CsmOperationDescription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.ListOperationsAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CsmOperationDescription>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.ListOperationsNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Gets all available operations for the Microsoft.Web resource provider. Also exposes resource metric definitions
        /// Request Path: /providers/Microsoft.Web/operations
        /// Operation Id: Provider_ListOperations
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CsmOperationDescription> GetOperationsProviders(CancellationToken cancellationToken = default)
        {
            Page<CsmOperationDescription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.ListOperations(cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CsmOperationDescription> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperationsProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.ListOperationsNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/webAppStacks
        /// Operation Id: Provider_GetWebAppStacks
        /// </summary>
        /// <param name="stackOSType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WebAppStack> GetWebAppStacksProvidersAsync(ProviderStackOSType? stackOSType = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<WebAppStack>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetWebAppStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetWebAppStacksAsync(stackOSType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WebAppStack>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetWebAppStacksProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetWebAppStacksNextPageAsync(nextLink, stackOSType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/webAppStacks
        /// Operation Id: Provider_GetWebAppStacks
        /// </summary>
        /// <param name="stackOSType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WebAppStack> GetWebAppStacksProviders(ProviderStackOSType? stackOSType = null, CancellationToken cancellationToken = default)
        {
            Page<WebAppStack> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetWebAppStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetWebAppStacks(stackOSType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WebAppStack> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetWebAppStacksProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetWebAppStacksNextPage(nextLink, stackOSType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
