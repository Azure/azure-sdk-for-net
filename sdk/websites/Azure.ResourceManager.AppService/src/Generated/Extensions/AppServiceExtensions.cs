// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AppService
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.AppService. </summary>
    public static partial class AppServiceExtensions
    {
        private static TenantExtensionClient GetExtensionClient(Tenant tenant)
        {
            return tenant.GetCachedClient((client) =>
            {
                return new TenantExtensionClient(client, tenant.Id);
            }
            );
        }

        /// <summary> Gets an object representing a User along with the instance operations that can be performed on it in the TenantExtensions. </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="User" /> object. </returns>
        public static User GetUser(this Tenant tenant)
        {
            return GetExtensionClient(tenant).GetUser();
        }

        /// <summary> Gets a collection of SourceControls in the SourceControl. </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SourceControls and their operations over a SourceControl. </returns>
        public static SourceControlCollection GetSourceControls(this Tenant tenant)
        {
            return GetExtensionClient(tenant).GetSourceControls();
        }

        /// <summary>
        /// Description for Gets source control token
        /// Request Path: /providers/Microsoft.Web/sourcecontrols/{sourceControlType}
        /// Operation Id: GetSourceControl
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="sourceControlType"> Type of source control. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sourceControlType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceControlType"/> is null. </exception>
        public static async Task<Response<SourceControl>> GetSourceControlAsync(this Tenant tenant, string sourceControlType, CancellationToken cancellationToken = default)
        {
            return await tenant.GetSourceControls().GetAsync(sourceControlType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Gets source control token
        /// Request Path: /providers/Microsoft.Web/sourcecontrols/{sourceControlType}
        /// Operation Id: GetSourceControl
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="sourceControlType"> Type of source control. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sourceControlType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceControlType"/> is null. </exception>
        public static Response<SourceControl> GetSourceControl(this Tenant tenant, string sourceControlType, CancellationToken cancellationToken = default)
        {
            return tenant.GetSourceControls().Get(sourceControlType, cancellationToken);
        }

        /// <summary>
        /// Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider
        /// Request Path: /providers/Microsoft.CertificateRegistration/operations
        /// Operation Id: CertificateRegistrationProvider_ListOperations
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CsmOperationDescription> GetOperationsCertificateRegistrationProvidersAsync(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsCertificateRegistrationProvidersAsync(cancellationToken);
        }

        /// <summary>
        /// Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider
        /// Request Path: /providers/Microsoft.CertificateRegistration/operations
        /// Operation Id: CertificateRegistrationProvider_ListOperations
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CsmOperationDescription> GetOperationsCertificateRegistrationProviders(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsCertificateRegistrationProviders(cancellationToken);
        }

        /// <summary>
        /// Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider
        /// Request Path: /providers/Microsoft.DomainRegistration/operations
        /// Operation Id: DomainRegistrationProvider_ListOperations
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CsmOperationDescription> GetOperationsDomainRegistrationProvidersAsync(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsDomainRegistrationProvidersAsync(cancellationToken);
        }

        /// <summary>
        /// Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider
        /// Request Path: /providers/Microsoft.DomainRegistration/operations
        /// Operation Id: DomainRegistrationProvider_ListOperations
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CsmOperationDescription> GetOperationsDomainRegistrationProviders(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsDomainRegistrationProviders(cancellationToken);
        }

        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/availableStacks
        /// Operation Id: Provider_GetAvailableStacks
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="osTypeSelected"> The ProviderOsTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApplicationStackResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ApplicationStackResource> GetAvailableStacksProvidersAsync(this Tenant tenant, ProviderOsTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetAvailableStacksProvidersAsync(osTypeSelected, cancellationToken);
        }

        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/availableStacks
        /// Operation Id: Provider_GetAvailableStacks
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="osTypeSelected"> The ProviderOsTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApplicationStackResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ApplicationStackResource> GetAvailableStacksProviders(this Tenant tenant, ProviderOsTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetAvailableStacksProviders(osTypeSelected, cancellationToken);
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/functionAppStacks
        /// Operation Id: Provider_GetFunctionAppStacks
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<FunctionAppStack> GetFunctionAppStacksProvidersAsync(this Tenant tenant, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetFunctionAppStacksProvidersAsync(stackOsType, cancellationToken);
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/functionAppStacks
        /// Operation Id: Provider_GetFunctionAppStacks
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<FunctionAppStack> GetFunctionAppStacksProviders(this Tenant tenant, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetFunctionAppStacksProviders(stackOsType, cancellationToken);
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions for location
        /// Request Path: /providers/Microsoft.Web/locations/{location}/functionAppStacks
        /// Operation Id: Provider_GetFunctionAppStacksForLocation
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="location"> Function App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<FunctionAppStack> GetFunctionAppStacksForLocationProvidersAsync(this Tenant tenant, string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(tenant).GetFunctionAppStacksForLocationProvidersAsync(location, stackOsType, cancellationToken);
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions for location
        /// Request Path: /providers/Microsoft.Web/locations/{location}/functionAppStacks
        /// Operation Id: Provider_GetFunctionAppStacksForLocation
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="location"> Function App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="FunctionAppStack" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<FunctionAppStack> GetFunctionAppStacksForLocationProviders(this Tenant tenant, string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(tenant).GetFunctionAppStacksForLocationProviders(location, stackOsType, cancellationToken);
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions for location
        /// Request Path: /providers/Microsoft.Web/locations/{location}/webAppStacks
        /// Operation Id: Provider_GetWebAppStacksForLocation
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="location"> Web App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<WebAppStack> GetWebAppStacksForLocationProvidersAsync(this Tenant tenant, string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(tenant).GetWebAppStacksForLocationProvidersAsync(location, stackOsType, cancellationToken);
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions for location
        /// Request Path: /providers/Microsoft.Web/locations/{location}/webAppStacks
        /// Operation Id: Provider_GetWebAppStacksForLocation
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="location"> Web App stack location. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<WebAppStack> GetWebAppStacksForLocationProviders(this Tenant tenant, string location, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(tenant).GetWebAppStacksForLocationProviders(location, stackOsType, cancellationToken);
        }

        /// <summary>
        /// Description for Gets all available operations for the Microsoft.Web resource provider. Also exposes resource metric definitions
        /// Request Path: /providers/Microsoft.Web/operations
        /// Operation Id: Provider_ListOperations
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CsmOperationDescription> GetOperationsProvidersAsync(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsProvidersAsync(cancellationToken);
        }

        /// <summary>
        /// Description for Gets all available operations for the Microsoft.Web resource provider. Also exposes resource metric definitions
        /// Request Path: /providers/Microsoft.Web/operations
        /// Operation Id: Provider_ListOperations
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CsmOperationDescription" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CsmOperationDescription> GetOperationsProviders(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsProviders(cancellationToken);
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/webAppStacks
        /// Operation Id: Provider_GetWebAppStacks
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<WebAppStack> GetWebAppStacksProvidersAsync(this Tenant tenant, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetWebAppStacksProvidersAsync(stackOsType, cancellationToken);
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions
        /// Request Path: /providers/Microsoft.Web/webAppStacks
        /// Operation Id: Provider_GetWebAppStacks
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="stackOsType"> Stack OS Type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WebAppStack" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<WebAppStack> GetWebAppStacksProviders(this Tenant tenant, ProviderStackOsType? stackOsType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetWebAppStacksProviders(stackOsType, cancellationToken);
        }

        private static SubscriptionExtensionClient GetExtensionClient(Subscription subscription)
        {
            return subscription.GetCachedClient((client) =>
            {
                return new SubscriptionExtensionClient(client, subscription.Id);
            }
            );
        }

        /// <summary> Gets a collection of TopLevelDomains in the TopLevelDomain. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of TopLevelDomains and their operations over a TopLevelDomain. </returns>
        public static TopLevelDomainCollection GetTopLevelDomains(this Subscription subscription)
        {
            return GetExtensionClient(subscription).GetTopLevelDomains();
        }

        /// <summary>
        /// Description for Get details of a top-level domain.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}
        /// Operation Id: TopLevelDomains_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the top-level domain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static async Task<Response<TopLevelDomain>> GetTopLevelDomainAsync(this Subscription subscription, string name, CancellationToken cancellationToken = default)
        {
            return await subscription.GetTopLevelDomains().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Get details of a top-level domain.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}
        /// Operation Id: TopLevelDomains_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the top-level domain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static Response<TopLevelDomain> GetTopLevelDomain(this Subscription subscription, string name, CancellationToken cancellationToken = default)
        {
            return subscription.GetTopLevelDomains().Get(name, cancellationToken);
        }

        /// <summary> Gets a collection of DeletedSites in the DeletedSite. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DeletedSites and their operations over a DeletedSite. </returns>
        public static DeletedSiteCollection GetDeletedSites(this Subscription subscription)
        {
            return GetExtensionClient(subscription).GetDeletedSites();
        }

        /// <summary>
        /// Description for Get deleted app for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
        /// Operation Id: Global_GetDeletedWebApp
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="deletedSiteId"> The numeric ID of the deleted app, e.g. 12345. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deletedSiteId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deletedSiteId"/> is null. </exception>
        public static async Task<Response<DeletedSite>> GetDeletedSiteAsync(this Subscription subscription, string deletedSiteId, CancellationToken cancellationToken = default)
        {
            return await subscription.GetDeletedSites().GetAsync(deletedSiteId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Get deleted app for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
        /// Operation Id: Global_GetDeletedWebApp
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="deletedSiteId"> The numeric ID of the deleted app, e.g. 12345. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deletedSiteId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deletedSiteId"/> is null. </exception>
        public static Response<DeletedSite> GetDeletedSite(this Subscription subscription, string deletedSiteId, CancellationToken cancellationToken = default)
        {
            return subscription.GetDeletedSites().Get(deletedSiteId, cancellationToken);
        }

        /// <summary>
        /// Description for List all certificate orders in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders
        /// Operation Id: AppServiceCertificateOrders_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AppServiceCertificateOrder" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AppServiceCertificateOrder> GetAppServiceCertificateOrdersAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAppServiceCertificateOrdersAsync(cancellationToken);
        }

        /// <summary>
        /// Description for List all certificate orders in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders
        /// Operation Id: AppServiceCertificateOrders_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AppServiceCertificateOrder" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AppServiceCertificateOrder> GetAppServiceCertificateOrders(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAppServiceCertificateOrders(cancellationToken);
        }

        /// <summary>
        /// Description for Validate information for a certificate order.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation
        /// Operation Id: AppServiceCertificateOrders_ValidatePurchaseInformation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="appServiceCertificateOrder"> Information for a certificate order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appServiceCertificateOrder"/> is null. </exception>
        public static async Task<Response> ValidatePurchaseInformationAppServiceCertificateOrderAsync(this Subscription subscription, AppServiceCertificateOrderData appServiceCertificateOrder, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(appServiceCertificateOrder, nameof(appServiceCertificateOrder));

            return await GetExtensionClient(subscription).ValidatePurchaseInformationAppServiceCertificateOrderAsync(appServiceCertificateOrder, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Validate information for a certificate order.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation
        /// Operation Id: AppServiceCertificateOrders_ValidatePurchaseInformation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="appServiceCertificateOrder"> Information for a certificate order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appServiceCertificateOrder"/> is null. </exception>
        public static Response ValidatePurchaseInformationAppServiceCertificateOrder(this Subscription subscription, AppServiceCertificateOrderData appServiceCertificateOrder, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(appServiceCertificateOrder, nameof(appServiceCertificateOrder));

            return GetExtensionClient(subscription).ValidatePurchaseInformationAppServiceCertificateOrder(appServiceCertificateOrder, cancellationToken);
        }

        /// <summary>
        /// Description for Check if a domain is available for registration.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability
        /// Operation Id: Domains_CheckAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="identifier"> Name of the domain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public static async Task<Response<DomainAvailabilityCheckResult>> CheckAvailabilityDomainAsync(this Subscription subscription, NameIdentifier identifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(identifier, nameof(identifier));

            return await GetExtensionClient(subscription).CheckAvailabilityDomainAsync(identifier, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Check if a domain is available for registration.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability
        /// Operation Id: Domains_CheckAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="identifier"> Name of the domain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public static Response<DomainAvailabilityCheckResult> CheckAvailabilityDomain(this Subscription subscription, NameIdentifier identifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(identifier, nameof(identifier));

            return GetExtensionClient(subscription).CheckAvailabilityDomain(identifier, cancellationToken);
        }

        /// <summary>
        /// Description for Get all domains in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains
        /// Operation Id: Domains_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AppServiceDomain" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AppServiceDomain> GetAppServiceDomainsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAppServiceDomainsAsync(cancellationToken);
        }

        /// <summary>
        /// Description for Get all domains in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains
        /// Operation Id: Domains_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AppServiceDomain" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AppServiceDomain> GetAppServiceDomains(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAppServiceDomains(cancellationToken);
        }

        /// <summary>
        /// Description for Generate a single sign-on request for the domain management portal.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest
        /// Operation Id: Domains_GetControlCenterSsoRequest
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static async Task<Response<DomainControlCenterSsoRequest>> GetControlCenterSsoRequestDomainAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return await GetExtensionClient(subscription).GetControlCenterSsoRequestDomainAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Generate a single sign-on request for the domain management portal.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest
        /// Operation Id: Domains_GetControlCenterSsoRequest
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static Response<DomainControlCenterSsoRequest> GetControlCenterSsoRequestDomain(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetControlCenterSsoRequestDomain(cancellationToken);
        }

        /// <summary>
        /// Description for Get domain name recommendations based on keywords.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations
        /// Operation Id: Domains_ListRecommendations
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="parameters"> Search parameters for domain name recommendations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        /// <returns> An async collection of <see cref="NameIdentifier" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<NameIdentifier> GetRecommendationsDomainsAsync(this Subscription subscription, DomainRecommendationSearchParameters parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(parameters, nameof(parameters));

            return GetExtensionClient(subscription).GetRecommendationsDomainsAsync(parameters, cancellationToken);
        }

        /// <summary>
        /// Description for Get domain name recommendations based on keywords.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations
        /// Operation Id: Domains_ListRecommendations
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="parameters"> Search parameters for domain name recommendations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        /// <returns> A collection of <see cref="NameIdentifier" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<NameIdentifier> GetRecommendationsDomains(this Subscription subscription, DomainRecommendationSearchParameters parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(parameters, nameof(parameters));

            return GetExtensionClient(subscription).GetRecommendationsDomains(parameters, cancellationToken);
        }

        /// <summary>
        /// Description for Get all App Service Environments for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments
        /// Operation Id: AppServiceEnvironments_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AppServiceEnvironment" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AppServiceEnvironment> GetAppServiceEnvironmentsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAppServiceEnvironmentsAsync(cancellationToken);
        }

        /// <summary>
        /// Description for Get all App Service Environments for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments
        /// Operation Id: AppServiceEnvironments_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AppServiceEnvironment" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AppServiceEnvironment> GetAppServiceEnvironments(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAppServiceEnvironments(cancellationToken);
        }

        /// <summary>
        /// Description for Get all App Service plans for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms
        /// Operation Id: AppServicePlans_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="detailed">
        /// Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan properties. The default is &lt;code&gt;false&lt;/code&gt;, which returns a subset of the properties.
        ///  Retrieval of all properties may increase the API latency.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AppServicePlan" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AppServicePlan> GetAppServicePlansAsync(this Subscription subscription, bool? detailed = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAppServicePlansAsync(detailed, cancellationToken);
        }

        /// <summary>
        /// Description for Get all App Service plans for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms
        /// Operation Id: AppServicePlans_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="detailed">
        /// Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan properties. The default is &lt;code&gt;false&lt;/code&gt;, which returns a subset of the properties.
        ///  Retrieval of all properties may increase the API latency.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AppServicePlan" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AppServicePlan> GetAppServicePlans(this Subscription subscription, bool? detailed = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAppServicePlans(detailed, cancellationToken);
        }

        /// <summary>
        /// Description for Get all certificates for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates
        /// Operation Id: Certificates_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="filter"> Return only information specified in the filter (using OData syntax). For example: $filter=KeyVaultId eq &apos;KeyVaultId&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Certificate" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<Certificate> GetCertificatesAsync(this Subscription subscription, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetCertificatesAsync(filter, cancellationToken);
        }

        /// <summary>
        /// Description for Get all certificates for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates
        /// Operation Id: Certificates_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="filter"> Return only information specified in the filter (using OData syntax). For example: $filter=KeyVaultId eq &apos;KeyVaultId&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Certificate" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<Certificate> GetCertificates(this Subscription subscription, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetCertificates(filter, cancellationToken);
        }

        /// <summary>
        /// Description for Get all deleted apps for a subscription at location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/deletedSites
        /// Operation Id: DeletedWebApps_ListByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="DeletedSite" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DeletedSite> GetDeletedSitesByLocationAsync(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetDeletedSitesByLocationAsync(location, cancellationToken);
        }

        /// <summary>
        /// Description for Get all deleted apps for a subscription at location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/deletedSites
        /// Operation Id: DeletedWebApps_ListByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="DeletedSite" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DeletedSite> GetDeletedSitesByLocation(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetDeletedSitesByLocation(location, cancellationToken);
        }

        /// <summary>
        /// Description for Get deleted app for a subscription at location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/deletedSites/{deletedSiteId}
        /// Operation Id: DeletedWebApps_GetDeletedWebAppByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The String to use. </param>
        /// <param name="deletedSiteId"> The numeric ID of the deleted app, e.g. 12345. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> or <paramref name="deletedSiteId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="deletedSiteId"/> is null. </exception>
        public static async Task<Response<DeletedSite>> GetDeletedWebAppByLocationDeletedWebAppAsync(this Subscription subscription, string location, string deletedSiteId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNullOrEmpty(deletedSiteId, nameof(deletedSiteId));

            return await GetExtensionClient(subscription).GetDeletedWebAppByLocationDeletedWebAppAsync(location, deletedSiteId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Get deleted app for a subscription at location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/deletedSites/{deletedSiteId}
        /// Operation Id: DeletedWebApps_GetDeletedWebAppByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The String to use. </param>
        /// <param name="deletedSiteId"> The numeric ID of the deleted app, e.g. 12345. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> or <paramref name="deletedSiteId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="deletedSiteId"/> is null. </exception>
        public static Response<DeletedSite> GetDeletedWebAppByLocationDeletedWebApp(this Subscription subscription, string location, string deletedSiteId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNullOrEmpty(deletedSiteId, nameof(deletedSiteId));

            return GetExtensionClient(subscription).GetDeletedWebAppByLocationDeletedWebApp(location, deletedSiteId, cancellationToken);
        }

        /// <summary>
        /// Description for Gets an operation in a subscription and given region
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/operations/{operationId}
        /// Operation Id: Global_GetSubscriptionOperationWithAsyncResponse
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> Location name. </param>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="operationId"/> is null. </exception>
        public static async Task<Response> GetSubscriptionOperationWithAsyncResponseGlobalAsync(this Subscription subscription, string location, string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            return await GetExtensionClient(subscription).GetSubscriptionOperationWithAsyncResponseGlobalAsync(location, operationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Gets an operation in a subscription and given region
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/operations/{operationId}
        /// Operation Id: Global_GetSubscriptionOperationWithAsyncResponse
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> Location name. </param>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="operationId"/> is null. </exception>
        public static Response GetSubscriptionOperationWithAsyncResponseGlobal(this Subscription subscription, string location, string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            return GetExtensionClient(subscription).GetSubscriptionOperationWithAsyncResponseGlobal(location, operationId, cancellationToken);
        }

        /// <summary>
        /// Description for Get all Kubernetes Environments for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/kubeEnvironments
        /// Operation Id: KubeEnvironments_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="KubeEnvironment" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<KubeEnvironment> GetKubeEnvironmentsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetKubeEnvironmentsAsync(cancellationToken);
        }

        /// <summary>
        /// Description for Get all Kubernetes Environments for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/kubeEnvironments
        /// Operation Id: KubeEnvironments_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="KubeEnvironment" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<KubeEnvironment> GetKubeEnvironments(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetKubeEnvironments(cancellationToken);
        }

        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/availableStacks
        /// Operation Id: Provider_GetAvailableStacksOnPrem
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="osTypeSelected"> The ProviderOsTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApplicationStackResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ApplicationStackResource> GetAvailableStacksOnPremProvidersAsync(this Subscription subscription, ProviderOsTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAvailableStacksOnPremProvidersAsync(osTypeSelected, cancellationToken);
        }

        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/availableStacks
        /// Operation Id: Provider_GetAvailableStacksOnPrem
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="osTypeSelected"> The ProviderOsTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApplicationStackResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ApplicationStackResource> GetAvailableStacksOnPremProviders(this Subscription subscription, ProviderOsTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAvailableStacksOnPremProviders(osTypeSelected, cancellationToken);
        }

        /// <summary>
        /// Description for List all recommendations for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations
        /// Operation Id: Recommendations_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="featured"> Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. </param>
        /// <param name="filter"> Filter is specified by using OData syntax. Example: $filter=channel eq &apos;Api&apos; or channel eq &apos;Notification&apos; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&apos;[PT1H|PT1M|P1D]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AppServiceRecommendation" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AppServiceRecommendation> GetRecommendationsAsync(this Subscription subscription, bool? featured = null, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetRecommendationsAsync(featured, filter, cancellationToken);
        }

        /// <summary>
        /// Description for List all recommendations for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations
        /// Operation Id: Recommendations_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="featured"> Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. </param>
        /// <param name="filter"> Filter is specified by using OData syntax. Example: $filter=channel eq &apos;Api&apos; or channel eq &apos;Notification&apos; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&apos;[PT1H|PT1M|P1D]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AppServiceRecommendation" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AppServiceRecommendation> GetRecommendations(this Subscription subscription, bool? featured = null, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetRecommendations(featured, filter, cancellationToken);
        }

        /// <summary>
        /// Description for Reset all recommendation opt-out settings for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset
        /// Operation Id: Recommendations_ResetAllFilters
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static async Task<Response> ResetAllFiltersRecommendationAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return await GetExtensionClient(subscription).ResetAllFiltersRecommendationAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Reset all recommendation opt-out settings for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset
        /// Operation Id: Recommendations_ResetAllFilters
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static Response ResetAllFiltersRecommendation(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).ResetAllFiltersRecommendation(cancellationToken);
        }

        /// <summary>
        /// Description for Disables the specified rule so it will not apply to a subscription in the future.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/{name}/disable
        /// Operation Id: Recommendations_DisableRecommendationForSubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="name"> Rule name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static async Task<Response> DisableRecommendationForSubscriptionRecommendationAsync(this Subscription subscription, string name, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            return await GetExtensionClient(subscription).DisableRecommendationForSubscriptionRecommendationAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Disables the specified rule so it will not apply to a subscription in the future.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/{name}/disable
        /// Operation Id: Recommendations_DisableRecommendationForSubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="name"> Rule name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static Response DisableRecommendationForSubscriptionRecommendation(this Subscription subscription, string name, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            return GetExtensionClient(subscription).DisableRecommendationForSubscriptionRecommendation(name, cancellationToken);
        }

        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/resourceHealthMetadata
        /// Operation Id: ResourceHealthMetadata_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SiteResourceHealthMetadata" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SiteResourceHealthMetadata> GetAllResourceHealthMetadataAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAllResourceHealthMetadataAsync(cancellationToken);
        }

        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/resourceHealthMetadata
        /// Operation Id: ResourceHealthMetadata_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SiteResourceHealthMetadata" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SiteResourceHealthMetadata> GetAllResourceHealthMetadata(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAllResourceHealthMetadata(cancellationToken);
        }

        /// <summary>
        /// Description for Gets a list of meters for a given location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/billingMeters
        /// Operation Id: ListBillingMeters
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="billingLocation"> Azure Location of billable resource. </param>
        /// <param name="osType"> App Service OS type meters used for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BillingMeter" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<BillingMeter> GetBillingMetersAsync(this Subscription subscription, string billingLocation = null, string osType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetBillingMetersAsync(billingLocation, osType, cancellationToken);
        }

        /// <summary>
        /// Description for Gets a list of meters for a given location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/billingMeters
        /// Operation Id: ListBillingMeters
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="billingLocation"> Azure Location of billable resource. </param>
        /// <param name="osType"> App Service OS type meters used for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BillingMeter" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<BillingMeter> GetBillingMeters(this Subscription subscription, string billingLocation = null, string osType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetBillingMeters(billingLocation, osType, cancellationToken);
        }

        /// <summary>
        /// Description for Check if a resource name is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability
        /// Operation Id: CheckNameAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="name"> Resource name to verify. </param>
        /// <param name="type"> Resource type used for verification. </param>
        /// <param name="isFqdn"> Is fully qualified domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static async Task<Response<ResourceNameAvailability>> CheckAppServiceNameAvailabilityAsync(this Subscription subscription, string name, CheckNameResourceTypes type, bool? isFqdn = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            return await GetExtensionClient(subscription).CheckAppServiceNameAvailabilityAsync(name, type, isFqdn, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Check if a resource name is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability
        /// Operation Id: CheckNameAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="name"> Resource name to verify. </param>
        /// <param name="type"> Resource type used for verification. </param>
        /// <param name="isFqdn"> Is fully qualified domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static Response<ResourceNameAvailability> CheckAppServiceNameAvailability(this Subscription subscription, string name, CheckNameResourceTypes type, bool? isFqdn = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            return GetExtensionClient(subscription).CheckAppServiceNameAvailability(name, type, isFqdn, cancellationToken);
        }

        /// <summary>
        /// Description for Gets list of available geo regions plus ministamps
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/deploymentLocations
        /// Operation Id: GetSubscriptionDeploymentLocations
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static async Task<Response<DeploymentLocations>> GetSubscriptionDeploymentLocationsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return await GetExtensionClient(subscription).GetSubscriptionDeploymentLocationsAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Gets list of available geo regions plus ministamps
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/deploymentLocations
        /// Operation Id: GetSubscriptionDeploymentLocations
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static Response<DeploymentLocations> GetSubscriptionDeploymentLocations(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetSubscriptionDeploymentLocations(cancellationToken);
        }

        /// <summary>
        /// Description for Get a list of available geographical regions.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions
        /// Operation Id: ListGeoRegions
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="sku"> Name of SKU used to filter the regions. </param>
        /// <param name="linuxWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Linux workers. </param>
        /// <param name="xenonWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Xenon workers. </param>
        /// <param name="linuxDynamicWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Linux Consumption Workers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="GeoRegion" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<GeoRegion> GetGeoRegionsAsync(this Subscription subscription, AppServiceSkuName? sku = null, bool? linuxWorkersEnabled = null, bool? xenonWorkersEnabled = null, bool? linuxDynamicWorkersEnabled = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetGeoRegionsAsync(sku, linuxWorkersEnabled, xenonWorkersEnabled, linuxDynamicWorkersEnabled, cancellationToken);
        }

        /// <summary>
        /// Description for Get a list of available geographical regions.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions
        /// Operation Id: ListGeoRegions
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="sku"> Name of SKU used to filter the regions. </param>
        /// <param name="linuxWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Linux workers. </param>
        /// <param name="xenonWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Xenon workers. </param>
        /// <param name="linuxDynamicWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Linux Consumption Workers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="GeoRegion" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<GeoRegion> GetGeoRegions(this Subscription subscription, AppServiceSkuName? sku = null, bool? linuxWorkersEnabled = null, bool? xenonWorkersEnabled = null, bool? linuxDynamicWorkersEnabled = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetGeoRegions(sku, linuxWorkersEnabled, xenonWorkersEnabled, linuxDynamicWorkersEnabled, cancellationToken);
        }

        /// <summary>
        /// Description for List all apps that are assigned to a hostname.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/listSitesAssignedToHostName
        /// Operation Id: ListSiteIdentifiersAssignedToHostName
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="nameIdentifier"> Hostname information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nameIdentifier"/> is null. </exception>
        /// <returns> An async collection of <see cref="SiteDomainOwnershipIdentifier" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SiteDomainOwnershipIdentifier> GetSiteIdentifiersAssignedToHostNameAsync(this Subscription subscription, NameIdentifier nameIdentifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nameIdentifier, nameof(nameIdentifier));

            return GetExtensionClient(subscription).GetSiteIdentifiersAssignedToHostNameAsync(nameIdentifier, cancellationToken);
        }

        /// <summary>
        /// Description for List all apps that are assigned to a hostname.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/listSitesAssignedToHostName
        /// Operation Id: ListSiteIdentifiersAssignedToHostName
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="nameIdentifier"> Hostname information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nameIdentifier"/> is null. </exception>
        /// <returns> A collection of <see cref="SiteDomainOwnershipIdentifier" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SiteDomainOwnershipIdentifier> GetSiteIdentifiersAssignedToHostName(this Subscription subscription, NameIdentifier nameIdentifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nameIdentifier, nameof(nameIdentifier));

            return GetExtensionClient(subscription).GetSiteIdentifiersAssignedToHostName(nameIdentifier, cancellationToken);
        }

        /// <summary>
        /// Description for List all premier add-on offers.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers
        /// Operation Id: ListPremierAddOnOffers
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PremierAddOnOffer" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PremierAddOnOffer> GetPremierAddOnOffersAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPremierAddOnOffersAsync(cancellationToken);
        }

        /// <summary>
        /// Description for List all premier add-on offers.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers
        /// Operation Id: ListPremierAddOnOffers
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PremierAddOnOffer" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PremierAddOnOffer> GetPremierAddOnOffers(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPremierAddOnOffers(cancellationToken);
        }

        /// <summary>
        /// Description for List all SKUs.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/skus
        /// Operation Id: ListSkus
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static async Task<Response<SkuInfos>> GetSkusAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return await GetExtensionClient(subscription).GetSkusAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for List all SKUs.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/skus
        /// Operation Id: ListSkus
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static Response<SkuInfos> GetSkus(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetSkus(cancellationToken);
        }

        /// <summary>
        /// Description for Verifies if this VNET is compatible with an App Service Environment by analyzing the Network Security Group rules.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/verifyHostingEnvironmentVnet
        /// Operation Id: VerifyHostingEnvironmentVnet
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="parameters"> VNET information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public static async Task<Response<VnetValidationFailureDetails>> VerifyHostingEnvironmentVnetAsync(this Subscription subscription, VnetParameters parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(parameters, nameof(parameters));

            return await GetExtensionClient(subscription).VerifyHostingEnvironmentVnetAsync(parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Verifies if this VNET is compatible with an App Service Environment by analyzing the Network Security Group rules.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/verifyHostingEnvironmentVnet
        /// Operation Id: VerifyHostingEnvironmentVnet
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="parameters"> VNET information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public static Response<VnetValidationFailureDetails> VerifyHostingEnvironmentVnet(this Subscription subscription, VnetParameters parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(parameters, nameof(parameters));

            return GetExtensionClient(subscription).VerifyHostingEnvironmentVnet(parameters, cancellationToken);
        }

        /// <summary>
        /// Description for Generates a preview workflow file for the static site
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/previewStaticSiteWorkflowFile
        /// Operation Id: StaticSites_PreviewWorkflow
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> Location where you plan to create the static site. </param>
        /// <param name="staticSitesWorkflowPreviewRequest"> A JSON representation of the StaticSitesWorkflowPreviewRequest properties. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="staticSitesWorkflowPreviewRequest"/> is null. </exception>
        public static async Task<Response<StaticSitesWorkflowPreview>> PreviewWorkflowStaticSiteAsync(this Subscription subscription, string location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNull(staticSitesWorkflowPreviewRequest, nameof(staticSitesWorkflowPreviewRequest));

            return await GetExtensionClient(subscription).PreviewWorkflowStaticSiteAsync(location, staticSitesWorkflowPreviewRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Generates a preview workflow file for the static site
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/previewStaticSiteWorkflowFile
        /// Operation Id: StaticSites_PreviewWorkflow
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> Location where you plan to create the static site. </param>
        /// <param name="staticSitesWorkflowPreviewRequest"> A JSON representation of the StaticSitesWorkflowPreviewRequest properties. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="staticSitesWorkflowPreviewRequest"/> is null. </exception>
        public static Response<StaticSitesWorkflowPreview> PreviewWorkflowStaticSite(this Subscription subscription, string location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNull(staticSitesWorkflowPreviewRequest, nameof(staticSitesWorkflowPreviewRequest));

            return GetExtensionClient(subscription).PreviewWorkflowStaticSite(location, staticSitesWorkflowPreviewRequest, cancellationToken);
        }

        /// <summary>
        /// Description for Get all Static Sites for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/staticSites
        /// Operation Id: StaticSites_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="StaticSiteARMResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<StaticSiteARMResource> GetStaticSiteARMResourcesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetStaticSiteARMResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// Description for Get all Static Sites for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/staticSites
        /// Operation Id: StaticSites_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="StaticSiteARMResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<StaticSiteARMResource> GetStaticSiteARMResources(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetStaticSiteARMResources(cancellationToken);
        }

        /// <summary>
        /// Description for Get all apps for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/sites
        /// Operation Id: WebApps_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WebSite" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<WebSite> GetWebSitesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetWebSitesAsync(cancellationToken);
        }

        /// <summary>
        /// Description for Get all apps for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/sites
        /// Operation Id: WebApps_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WebSite" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<WebSite> GetWebSites(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetWebSites(cancellationToken);
        }

        private static ResourceGroupExtensionClient GetExtensionClient(ResourceGroup resourceGroup)
        {
            return resourceGroup.GetCachedClient((client) =>
            {
                return new ResourceGroupExtensionClient(client, resourceGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of AppServiceCertificateOrders in the AppServiceCertificateOrder. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AppServiceCertificateOrders and their operations over a AppServiceCertificateOrder. </returns>
        public static AppServiceCertificateOrderCollection GetAppServiceCertificateOrders(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetAppServiceCertificateOrders();
        }

        /// <summary>
        /// Description for Get a certificate order.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}
        /// Operation Id: AppServiceCertificateOrders_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="certificateOrderName"> Name of the certificate order.. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="certificateOrderName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateOrderName"/> is null. </exception>
        public static async Task<Response<AppServiceCertificateOrder>> GetAppServiceCertificateOrderAsync(this ResourceGroup resourceGroup, string certificateOrderName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetAppServiceCertificateOrders().GetAsync(certificateOrderName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Get a certificate order.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}
        /// Operation Id: AppServiceCertificateOrders_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="certificateOrderName"> Name of the certificate order.. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="certificateOrderName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateOrderName"/> is null. </exception>
        public static Response<AppServiceCertificateOrder> GetAppServiceCertificateOrder(this ResourceGroup resourceGroup, string certificateOrderName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetAppServiceCertificateOrders().Get(certificateOrderName, cancellationToken);
        }

        /// <summary> Gets a collection of AppServiceDomains in the AppServiceDomain. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AppServiceDomains and their operations over a AppServiceDomain. </returns>
        public static AppServiceDomainCollection GetAppServiceDomains(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetAppServiceDomains();
        }

        /// <summary>
        /// Description for Get a domain.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}
        /// Operation Id: Domains_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="domainName"> Name of the domain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="domainName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="domainName"/> is null. </exception>
        public static async Task<Response<AppServiceDomain>> GetAppServiceDomainAsync(this ResourceGroup resourceGroup, string domainName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetAppServiceDomains().GetAsync(domainName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Get a domain.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}
        /// Operation Id: Domains_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="domainName"> Name of the domain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="domainName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="domainName"/> is null. </exception>
        public static Response<AppServiceDomain> GetAppServiceDomain(this ResourceGroup resourceGroup, string domainName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetAppServiceDomains().Get(domainName, cancellationToken);
        }

        /// <summary> Gets a collection of AppServiceEnvironments in the AppServiceEnvironment. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AppServiceEnvironments and their operations over a AppServiceEnvironment. </returns>
        public static AppServiceEnvironmentCollection GetAppServiceEnvironments(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetAppServiceEnvironments();
        }

        /// <summary>
        /// Description for Get the properties of an App Service Environment.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}
        /// Operation Id: AppServiceEnvironments_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the App Service Environment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static async Task<Response<AppServiceEnvironment>> GetAppServiceEnvironmentAsync(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetAppServiceEnvironments().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Get the properties of an App Service Environment.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}
        /// Operation Id: AppServiceEnvironments_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the App Service Environment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static Response<AppServiceEnvironment> GetAppServiceEnvironment(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetAppServiceEnvironments().Get(name, cancellationToken);
        }

        /// <summary> Gets a collection of AppServicePlans in the AppServicePlan. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AppServicePlans and their operations over a AppServicePlan. </returns>
        public static AppServicePlanCollection GetAppServicePlans(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetAppServicePlans();
        }

        /// <summary>
        /// Description for Get an App Service plan.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}
        /// Operation Id: AppServicePlans_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the App Service plan. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static async Task<Response<AppServicePlan>> GetAppServicePlanAsync(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetAppServicePlans().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Get an App Service plan.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}
        /// Operation Id: AppServicePlans_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the App Service plan. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static Response<AppServicePlan> GetAppServicePlan(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetAppServicePlans().Get(name, cancellationToken);
        }

        /// <summary> Gets a collection of Certificates in the Certificate. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of Certificates and their operations over a Certificate. </returns>
        public static CertificateCollection GetCertificates(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetCertificates();
        }

        /// <summary>
        /// Description for Get a certificate.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}
        /// Operation Id: Certificates_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static async Task<Response<Certificate>> GetCertificateAsync(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetCertificates().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Get a certificate.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}
        /// Operation Id: Certificates_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static Response<Certificate> GetCertificate(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetCertificates().Get(name, cancellationToken);
        }

        /// <summary> Gets a collection of KubeEnvironments in the KubeEnvironment. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of KubeEnvironments and their operations over a KubeEnvironment. </returns>
        public static KubeEnvironmentCollection GetKubeEnvironments(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetKubeEnvironments();
        }

        /// <summary>
        /// Description for Get the properties of a Kubernetes Environment.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/kubeEnvironments/{name}
        /// Operation Id: KubeEnvironments_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the Kubernetes Environment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static async Task<Response<KubeEnvironment>> GetKubeEnvironmentAsync(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetKubeEnvironments().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Get the properties of a Kubernetes Environment.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/kubeEnvironments/{name}
        /// Operation Id: KubeEnvironments_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the Kubernetes Environment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static Response<KubeEnvironment> GetKubeEnvironment(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetKubeEnvironments().Get(name, cancellationToken);
        }

        /// <summary> Gets a collection of StaticSiteARMResources in the StaticSiteARMResource. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of StaticSiteARMResources and their operations over a StaticSiteARMResource. </returns>
        public static StaticSiteARMResourceCollection GetStaticSiteARMResources(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetStaticSiteARMResources();
        }

        /// <summary>
        /// Description for Gets the details of a static site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}
        /// Operation Id: StaticSites_GetStaticSite
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the static site. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static async Task<Response<StaticSiteARMResource>> GetStaticSiteARMResourceAsync(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetStaticSiteARMResources().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Gets the details of a static site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}
        /// Operation Id: StaticSites_GetStaticSite
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the static site. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static Response<StaticSiteARMResource> GetStaticSiteARMResource(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetStaticSiteARMResources().Get(name, cancellationToken);
        }

        /// <summary> Gets a collection of WebSites in the WebSite. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of WebSites and their operations over a WebSite. </returns>
        public static WebSiteCollection GetWebSites(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetWebSites();
        }

        /// <summary>
        /// Description for Gets the details of a web, mobile, or API app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}
        /// Operation Id: WebApps_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static async Task<Response<WebSite>> GetWebSiteAsync(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetWebSites().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Gets the details of a web, mobile, or API app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}
        /// Operation Id: WebApps_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static Response<WebSite> GetWebSite(this ResourceGroup resourceGroup, string name, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetWebSites().Get(name, cancellationToken);
        }

        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the resource group in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/resourceHealthMetadata
        /// Operation Id: ResourceHealthMetadata_ListByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SiteResourceHealthMetadata" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SiteResourceHealthMetadata> GetAllResourceHealthMetadataAsync(this ResourceGroup resourceGroup, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroup).GetAllResourceHealthMetadataAsync(cancellationToken);
        }

        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the resource group in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/resourceHealthMetadata
        /// Operation Id: ResourceHealthMetadata_ListByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SiteResourceHealthMetadata" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SiteResourceHealthMetadata> GetAllResourceHealthMetadata(this ResourceGroup resourceGroup, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroup).GetAllResourceHealthMetadata(cancellationToken);
        }

        /// <summary>
        /// Description for Move resources between resource groups.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources
        /// Operation Id: Move
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="moveResourceEnvelope"> Object that represents the resource to move. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="moveResourceEnvelope"/> is null. </exception>
        public static async Task<Response> MoveAsync(this ResourceGroup resourceGroup, CsmMoveResourceEnvelope moveResourceEnvelope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(moveResourceEnvelope, nameof(moveResourceEnvelope));

            return await GetExtensionClient(resourceGroup).MoveAsync(moveResourceEnvelope, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Move resources between resource groups.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources
        /// Operation Id: Move
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="moveResourceEnvelope"> Object that represents the resource to move. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="moveResourceEnvelope"/> is null. </exception>
        public static Response Move(this ResourceGroup resourceGroup, CsmMoveResourceEnvelope moveResourceEnvelope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(moveResourceEnvelope, nameof(moveResourceEnvelope));

            return GetExtensionClient(resourceGroup).Move(moveResourceEnvelope, cancellationToken);
        }

        /// <summary>
        /// Description for Validate if a resource can be created.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/validate
        /// Operation Id: Validate
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="validateRequest"> Request with the resources to validate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validateRequest"/> is null. </exception>
        public static async Task<Response<ValidateResponse>> ValidateAsync(this ResourceGroup resourceGroup, ValidateRequest validateRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(validateRequest, nameof(validateRequest));

            return await GetExtensionClient(resourceGroup).ValidateAsync(validateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Validate if a resource can be created.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/validate
        /// Operation Id: Validate
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="validateRequest"> Request with the resources to validate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validateRequest"/> is null. </exception>
        public static Response<ValidateResponse> Validate(this ResourceGroup resourceGroup, ValidateRequest validateRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(validateRequest, nameof(validateRequest));

            return GetExtensionClient(resourceGroup).Validate(validateRequest, cancellationToken);
        }

        /// <summary>
        /// Description for Validate whether a resource can be moved.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/validateMoveResources
        /// Operation Id: ValidateMove
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="moveResourceEnvelope"> Object that represents the resource to move. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="moveResourceEnvelope"/> is null. </exception>
        public static async Task<Response> ValidateMoveAsync(this ResourceGroup resourceGroup, CsmMoveResourceEnvelope moveResourceEnvelope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(moveResourceEnvelope, nameof(moveResourceEnvelope));

            return await GetExtensionClient(resourceGroup).ValidateMoveAsync(moveResourceEnvelope, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Description for Validate whether a resource can be moved.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/validateMoveResources
        /// Operation Id: ValidateMove
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="moveResourceEnvelope"> Object that represents the resource to move. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="moveResourceEnvelope"/> is null. </exception>
        public static Response ValidateMove(this ResourceGroup resourceGroup, CsmMoveResourceEnvelope moveResourceEnvelope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(moveResourceEnvelope, nameof(moveResourceEnvelope));

            return GetExtensionClient(resourceGroup).ValidateMove(moveResourceEnvelope, cancellationToken);
        }

        #region AppServiceCertificateOrder
        /// <summary>
        /// Gets an object representing an <see cref="AppServiceCertificateOrder" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppServiceCertificateOrder.CreateResourceIdentifier" /> to create an <see cref="AppServiceCertificateOrder" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppServiceCertificateOrder" /> object. </returns>
        public static AppServiceCertificateOrder GetAppServiceCertificateOrder(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppServiceCertificateOrder.ValidateResourceId(id);
                return new AppServiceCertificateOrder(client, id);
            }
            );
        }
        #endregion

        #region AppServiceCertificateResource
        /// <summary>
        /// Gets an object representing an <see cref="AppServiceCertificateResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppServiceCertificateResource.CreateResourceIdentifier" /> to create an <see cref="AppServiceCertificateResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppServiceCertificateResource" /> object. </returns>
        public static AppServiceCertificateResource GetAppServiceCertificateResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppServiceCertificateResource.ValidateResourceId(id);
                return new AppServiceCertificateResource(client, id);
            }
            );
        }
        #endregion

        #region CertificateOrderDetector
        /// <summary>
        /// Gets an object representing a <see cref="CertificateOrderDetector" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CertificateOrderDetector.CreateResourceIdentifier" /> to create a <see cref="CertificateOrderDetector" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CertificateOrderDetector" /> object. </returns>
        public static CertificateOrderDetector GetCertificateOrderDetector(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CertificateOrderDetector.ValidateResourceId(id);
                return new CertificateOrderDetector(client, id);
            }
            );
        }
        #endregion

        #region HostingEnvironmentDetector
        /// <summary>
        /// Gets an object representing a <see cref="HostingEnvironmentDetector" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HostingEnvironmentDetector.CreateResourceIdentifier" /> to create a <see cref="HostingEnvironmentDetector" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HostingEnvironmentDetector" /> object. </returns>
        public static HostingEnvironmentDetector GetHostingEnvironmentDetector(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HostingEnvironmentDetector.ValidateResourceId(id);
                return new HostingEnvironmentDetector(client, id);
            }
            );
        }
        #endregion

        #region SiteDetector
        /// <summary>
        /// Gets an object representing a <see cref="SiteDetector" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteDetector.CreateResourceIdentifier" /> to create a <see cref="SiteDetector" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteDetector" /> object. </returns>
        public static SiteDetector GetSiteDetector(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteDetector.ValidateResourceId(id);
                return new SiteDetector(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotDetector
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotDetector" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotDetector.CreateResourceIdentifier" /> to create a <see cref="SiteSlotDetector" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotDetector" /> object. </returns>
        public static SiteSlotDetector GetSiteSlotDetector(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotDetector.ValidateResourceId(id);
                return new SiteSlotDetector(client, id);
            }
            );
        }
        #endregion

        #region AppServiceDomain
        /// <summary>
        /// Gets an object representing an <see cref="AppServiceDomain" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppServiceDomain.CreateResourceIdentifier" /> to create an <see cref="AppServiceDomain" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppServiceDomain" /> object. </returns>
        public static AppServiceDomain GetAppServiceDomain(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppServiceDomain.ValidateResourceId(id);
                return new AppServiceDomain(client, id);
            }
            );
        }
        #endregion

        #region DomainOwnershipIdentifier
        /// <summary>
        /// Gets an object representing a <see cref="DomainOwnershipIdentifier" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DomainOwnershipIdentifier.CreateResourceIdentifier" /> to create a <see cref="DomainOwnershipIdentifier" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DomainOwnershipIdentifier" /> object. </returns>
        public static DomainOwnershipIdentifier GetDomainOwnershipIdentifier(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DomainOwnershipIdentifier.ValidateResourceId(id);
                return new DomainOwnershipIdentifier(client, id);
            }
            );
        }
        #endregion

        #region TopLevelDomain
        /// <summary>
        /// Gets an object representing a <see cref="TopLevelDomain" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TopLevelDomain.CreateResourceIdentifier" /> to create a <see cref="TopLevelDomain" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TopLevelDomain" /> object. </returns>
        public static TopLevelDomain GetTopLevelDomain(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                TopLevelDomain.ValidateResourceId(id);
                return new TopLevelDomain(client, id);
            }
            );
        }
        #endregion

        #region AppServiceEnvironment
        /// <summary>
        /// Gets an object representing an <see cref="AppServiceEnvironment" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppServiceEnvironment.CreateResourceIdentifier" /> to create an <see cref="AppServiceEnvironment" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppServiceEnvironment" /> object. </returns>
        public static AppServiceEnvironment GetAppServiceEnvironment(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppServiceEnvironment.ValidateResourceId(id);
                return new AppServiceEnvironment(client, id);
            }
            );
        }
        #endregion

        #region AseV3NetworkingConfiguration
        /// <summary>
        /// Gets an object representing an <see cref="AseV3NetworkingConfiguration" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AseV3NetworkingConfiguration.CreateResourceIdentifier" /> to create an <see cref="AseV3NetworkingConfiguration" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AseV3NetworkingConfiguration" /> object. </returns>
        public static AseV3NetworkingConfiguration GetAseV3NetworkingConfiguration(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AseV3NetworkingConfiguration.ValidateResourceId(id);
                return new AseV3NetworkingConfiguration(client, id);
            }
            );
        }
        #endregion

        #region HostingEnvironmentMultiRolePool
        /// <summary>
        /// Gets an object representing a <see cref="HostingEnvironmentMultiRolePool" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HostingEnvironmentMultiRolePool.CreateResourceIdentifier" /> to create a <see cref="HostingEnvironmentMultiRolePool" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HostingEnvironmentMultiRolePool" /> object. </returns>
        public static HostingEnvironmentMultiRolePool GetHostingEnvironmentMultiRolePool(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HostingEnvironmentMultiRolePool.ValidateResourceId(id);
                return new HostingEnvironmentMultiRolePool(client, id);
            }
            );
        }
        #endregion

        #region HostingEnvironmentWorkerPool
        /// <summary>
        /// Gets an object representing a <see cref="HostingEnvironmentWorkerPool" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HostingEnvironmentWorkerPool.CreateResourceIdentifier" /> to create a <see cref="HostingEnvironmentWorkerPool" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HostingEnvironmentWorkerPool" /> object. </returns>
        public static HostingEnvironmentWorkerPool GetHostingEnvironmentWorkerPool(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HostingEnvironmentWorkerPool.ValidateResourceId(id);
                return new HostingEnvironmentWorkerPool(client, id);
            }
            );
        }
        #endregion

        #region HostingEnvironmentPrivateEndpointConnection
        /// <summary>
        /// Gets an object representing a <see cref="HostingEnvironmentPrivateEndpointConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HostingEnvironmentPrivateEndpointConnection.CreateResourceIdentifier" /> to create a <see cref="HostingEnvironmentPrivateEndpointConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HostingEnvironmentPrivateEndpointConnection" /> object. </returns>
        public static HostingEnvironmentPrivateEndpointConnection GetHostingEnvironmentPrivateEndpointConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HostingEnvironmentPrivateEndpointConnection.ValidateResourceId(id);
                return new HostingEnvironmentPrivateEndpointConnection(client, id);
            }
            );
        }
        #endregion

        #region StaticSitePrivateEndpointConnection
        /// <summary>
        /// Gets an object representing a <see cref="StaticSitePrivateEndpointConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="StaticSitePrivateEndpointConnection.CreateResourceIdentifier" /> to create a <see cref="StaticSitePrivateEndpointConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="StaticSitePrivateEndpointConnection" /> object. </returns>
        public static StaticSitePrivateEndpointConnection GetStaticSitePrivateEndpointConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                StaticSitePrivateEndpointConnection.ValidateResourceId(id);
                return new StaticSitePrivateEndpointConnection(client, id);
            }
            );
        }
        #endregion

        #region SitePrivateEndpointConnection
        /// <summary>
        /// Gets an object representing a <see cref="SitePrivateEndpointConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SitePrivateEndpointConnection.CreateResourceIdentifier" /> to create a <see cref="SitePrivateEndpointConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SitePrivateEndpointConnection" /> object. </returns>
        public static SitePrivateEndpointConnection GetSitePrivateEndpointConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SitePrivateEndpointConnection.ValidateResourceId(id);
                return new SitePrivateEndpointConnection(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotPrivateEndpointConnection
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotPrivateEndpointConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotPrivateEndpointConnection.CreateResourceIdentifier" /> to create a <see cref="SiteSlotPrivateEndpointConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotPrivateEndpointConnection" /> object. </returns>
        public static SiteSlotPrivateEndpointConnection GetSiteSlotPrivateEndpointConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotPrivateEndpointConnection.ValidateResourceId(id);
                return new SiteSlotPrivateEndpointConnection(client, id);
            }
            );
        }
        #endregion

        #region AppServicePlan
        /// <summary>
        /// Gets an object representing an <see cref="AppServicePlan" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppServicePlan.CreateResourceIdentifier" /> to create an <see cref="AppServicePlan" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppServicePlan" /> object. </returns>
        public static AppServicePlan GetAppServicePlan(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppServicePlan.ValidateResourceId(id);
                return new AppServicePlan(client, id);
            }
            );
        }
        #endregion

        #region ServerfarmHybridConnectionNamespaceRelay
        /// <summary>
        /// Gets an object representing a <see cref="ServerfarmHybridConnectionNamespaceRelay" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerfarmHybridConnectionNamespaceRelay.CreateResourceIdentifier" /> to create a <see cref="ServerfarmHybridConnectionNamespaceRelay" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerfarmHybridConnectionNamespaceRelay" /> object. </returns>
        public static ServerfarmHybridConnectionNamespaceRelay GetServerfarmHybridConnectionNamespaceRelay(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerfarmHybridConnectionNamespaceRelay.ValidateResourceId(id);
                return new ServerfarmHybridConnectionNamespaceRelay(client, id);
            }
            );
        }
        #endregion

        #region SiteHybridConnectionNamespaceRelay
        /// <summary>
        /// Gets an object representing a <see cref="SiteHybridConnectionNamespaceRelay" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteHybridConnectionNamespaceRelay.CreateResourceIdentifier" /> to create a <see cref="SiteHybridConnectionNamespaceRelay" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteHybridConnectionNamespaceRelay" /> object. </returns>
        public static SiteHybridConnectionNamespaceRelay GetSiteHybridConnectionNamespaceRelay(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteHybridConnectionNamespaceRelay.ValidateResourceId(id);
                return new SiteHybridConnectionNamespaceRelay(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotHybridConnectionNamespaceRelay
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotHybridConnectionNamespaceRelay" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotHybridConnectionNamespaceRelay.CreateResourceIdentifier" /> to create a <see cref="SiteSlotHybridConnectionNamespaceRelay" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotHybridConnectionNamespaceRelay" /> object. </returns>
        public static SiteSlotHybridConnectionNamespaceRelay GetSiteSlotHybridConnectionNamespaceRelay(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotHybridConnectionNamespaceRelay.ValidateResourceId(id);
                return new SiteSlotHybridConnectionNamespaceRelay(client, id);
            }
            );
        }
        #endregion

        #region HybridConnectionLimits
        /// <summary>
        /// Gets an object representing a <see cref="HybridConnectionLimits" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HybridConnectionLimits.CreateResourceIdentifier" /> to create a <see cref="HybridConnectionLimits" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridConnectionLimits" /> object. </returns>
        public static HybridConnectionLimits GetHybridConnectionLimits(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HybridConnectionLimits.ValidateResourceId(id);
                return new HybridConnectionLimits(client, id);
            }
            );
        }
        #endregion

        #region ServerfarmVirtualNetworkConnection
        /// <summary>
        /// Gets an object representing a <see cref="ServerfarmVirtualNetworkConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerfarmVirtualNetworkConnection.CreateResourceIdentifier" /> to create a <see cref="ServerfarmVirtualNetworkConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerfarmVirtualNetworkConnection" /> object. </returns>
        public static ServerfarmVirtualNetworkConnection GetServerfarmVirtualNetworkConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerfarmVirtualNetworkConnection.ValidateResourceId(id);
                return new ServerfarmVirtualNetworkConnection(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotVirtualNetworkConnection
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotVirtualNetworkConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotVirtualNetworkConnection.CreateResourceIdentifier" /> to create a <see cref="SiteSlotVirtualNetworkConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotVirtualNetworkConnection" /> object. </returns>
        public static SiteSlotVirtualNetworkConnection GetSiteSlotVirtualNetworkConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotVirtualNetworkConnection.ValidateResourceId(id);
                return new SiteSlotVirtualNetworkConnection(client, id);
            }
            );
        }
        #endregion

        #region SiteVirtualNetworkConnection
        /// <summary>
        /// Gets an object representing a <see cref="SiteVirtualNetworkConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteVirtualNetworkConnection.CreateResourceIdentifier" /> to create a <see cref="SiteVirtualNetworkConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteVirtualNetworkConnection" /> object. </returns>
        public static SiteVirtualNetworkConnection GetSiteVirtualNetworkConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteVirtualNetworkConnection.ValidateResourceId(id);
                return new SiteVirtualNetworkConnection(client, id);
            }
            );
        }
        #endregion

        #region ServerfarmVirtualNetworkConnectionGateway
        /// <summary>
        /// Gets an object representing a <see cref="ServerfarmVirtualNetworkConnectionGateway" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerfarmVirtualNetworkConnectionGateway.CreateResourceIdentifier" /> to create a <see cref="ServerfarmVirtualNetworkConnectionGateway" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerfarmVirtualNetworkConnectionGateway" /> object. </returns>
        public static ServerfarmVirtualNetworkConnectionGateway GetServerfarmVirtualNetworkConnectionGateway(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerfarmVirtualNetworkConnectionGateway.ValidateResourceId(id);
                return new ServerfarmVirtualNetworkConnectionGateway(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotVirtualNetworkConnectionGateway
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotVirtualNetworkConnectionGateway" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotVirtualNetworkConnectionGateway.CreateResourceIdentifier" /> to create a <see cref="SiteSlotVirtualNetworkConnectionGateway" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotVirtualNetworkConnectionGateway" /> object. </returns>
        public static SiteSlotVirtualNetworkConnectionGateway GetSiteSlotVirtualNetworkConnectionGateway(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotVirtualNetworkConnectionGateway.ValidateResourceId(id);
                return new SiteSlotVirtualNetworkConnectionGateway(client, id);
            }
            );
        }
        #endregion

        #region SiteVirtualNetworkConnectionGateway
        /// <summary>
        /// Gets an object representing a <see cref="SiteVirtualNetworkConnectionGateway" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteVirtualNetworkConnectionGateway.CreateResourceIdentifier" /> to create a <see cref="SiteVirtualNetworkConnectionGateway" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteVirtualNetworkConnectionGateway" /> object. </returns>
        public static SiteVirtualNetworkConnectionGateway GetSiteVirtualNetworkConnectionGateway(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteVirtualNetworkConnectionGateway.ValidateResourceId(id);
                return new SiteVirtualNetworkConnectionGateway(client, id);
            }
            );
        }
        #endregion

        #region Certificate
        /// <summary>
        /// Gets an object representing a <see cref="Certificate" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="Certificate.CreateResourceIdentifier" /> to create a <see cref="Certificate" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="Certificate" /> object. </returns>
        public static Certificate GetCertificate(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                Certificate.ValidateResourceId(id);
                return new Certificate(client, id);
            }
            );
        }
        #endregion

        #region SiteDiagnostic
        /// <summary>
        /// Gets an object representing a <see cref="SiteDiagnostic" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteDiagnostic.CreateResourceIdentifier" /> to create a <see cref="SiteDiagnostic" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteDiagnostic" /> object. </returns>
        public static SiteDiagnostic GetSiteDiagnostic(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteDiagnostic.ValidateResourceId(id);
                return new SiteDiagnostic(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotDiagnostic
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotDiagnostic" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotDiagnostic.CreateResourceIdentifier" /> to create a <see cref="SiteSlotDiagnostic" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotDiagnostic" /> object. </returns>
        public static SiteSlotDiagnostic GetSiteSlotDiagnostic(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotDiagnostic.ValidateResourceId(id);
                return new SiteSlotDiagnostic(client, id);
            }
            );
        }
        #endregion

        #region SiteDiagnosticAnalysis
        /// <summary>
        /// Gets an object representing a <see cref="SiteDiagnosticAnalysis" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteDiagnosticAnalysis.CreateResourceIdentifier" /> to create a <see cref="SiteDiagnosticAnalysis" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteDiagnosticAnalysis" /> object. </returns>
        public static SiteDiagnosticAnalysis GetSiteDiagnosticAnalysis(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteDiagnosticAnalysis.ValidateResourceId(id);
                return new SiteDiagnosticAnalysis(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotDiagnosticAnalysis
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotDiagnosticAnalysis" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotDiagnosticAnalysis.CreateResourceIdentifier" /> to create a <see cref="SiteSlotDiagnosticAnalysis" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotDiagnosticAnalysis" /> object. </returns>
        public static SiteSlotDiagnosticAnalysis GetSiteSlotDiagnosticAnalysis(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotDiagnosticAnalysis.ValidateResourceId(id);
                return new SiteSlotDiagnosticAnalysis(client, id);
            }
            );
        }
        #endregion

        #region SiteDiagnosticDetector
        /// <summary>
        /// Gets an object representing a <see cref="SiteDiagnosticDetector" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteDiagnosticDetector.CreateResourceIdentifier" /> to create a <see cref="SiteDiagnosticDetector" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteDiagnosticDetector" /> object. </returns>
        public static SiteDiagnosticDetector GetSiteDiagnosticDetector(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteDiagnosticDetector.ValidateResourceId(id);
                return new SiteDiagnosticDetector(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotDiagnosticDetector
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotDiagnosticDetector" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotDiagnosticDetector.CreateResourceIdentifier" /> to create a <see cref="SiteSlotDiagnosticDetector" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotDiagnosticDetector" /> object. </returns>
        public static SiteSlotDiagnosticDetector GetSiteSlotDiagnosticDetector(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotDiagnosticDetector.ValidateResourceId(id);
                return new SiteSlotDiagnosticDetector(client, id);
            }
            );
        }
        #endregion

        #region DeletedSite
        /// <summary>
        /// Gets an object representing a <see cref="DeletedSite" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DeletedSite.CreateResourceIdentifier" /> to create a <see cref="DeletedSite" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DeletedSite" /> object. </returns>
        public static DeletedSite GetDeletedSite(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DeletedSite.ValidateResourceId(id);
                return new DeletedSite(client, id);
            }
            );
        }
        #endregion

        #region KubeEnvironment
        /// <summary>
        /// Gets an object representing a <see cref="KubeEnvironment" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="KubeEnvironment.CreateResourceIdentifier" /> to create a <see cref="KubeEnvironment" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="KubeEnvironment" /> object. </returns>
        public static KubeEnvironment GetKubeEnvironment(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                KubeEnvironment.ValidateResourceId(id);
                return new KubeEnvironment(client, id);
            }
            );
        }
        #endregion

        #region HostingEnvironmentRecommendation
        /// <summary>
        /// Gets an object representing a <see cref="HostingEnvironmentRecommendation" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HostingEnvironmentRecommendation.CreateResourceIdentifier" /> to create a <see cref="HostingEnvironmentRecommendation" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HostingEnvironmentRecommendation" /> object. </returns>
        public static HostingEnvironmentRecommendation GetHostingEnvironmentRecommendation(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HostingEnvironmentRecommendation.ValidateResourceId(id);
                return new HostingEnvironmentRecommendation(client, id);
            }
            );
        }
        #endregion

        #region SiteRecommendation
        /// <summary>
        /// Gets an object representing a <see cref="SiteRecommendation" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteRecommendation.CreateResourceIdentifier" /> to create a <see cref="SiteRecommendation" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteRecommendation" /> object. </returns>
        public static SiteRecommendation GetSiteRecommendation(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteRecommendation.ValidateResourceId(id);
                return new SiteRecommendation(client, id);
            }
            );
        }
        #endregion

        #region SiteResourceHealthMetadata
        /// <summary>
        /// Gets an object representing a <see cref="SiteResourceHealthMetadata" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteResourceHealthMetadata.CreateResourceIdentifier" /> to create a <see cref="SiteResourceHealthMetadata" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteResourceHealthMetadata" /> object. </returns>
        public static SiteResourceHealthMetadata GetSiteResourceHealthMetadata(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteResourceHealthMetadata.ValidateResourceId(id);
                return new SiteResourceHealthMetadata(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotResourceHealthMetadata
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotResourceHealthMetadata" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotResourceHealthMetadata.CreateResourceIdentifier" /> to create a <see cref="SiteSlotResourceHealthMetadata" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotResourceHealthMetadata" /> object. </returns>
        public static SiteSlotResourceHealthMetadata GetSiteSlotResourceHealthMetadata(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotResourceHealthMetadata.ValidateResourceId(id);
                return new SiteSlotResourceHealthMetadata(client, id);
            }
            );
        }
        #endregion

        #region User
        /// <summary>
        /// Gets an object representing an <see cref="User" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="User.CreateResourceIdentifier" /> to create an <see cref="User" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="User" /> object. </returns>
        public static User GetUser(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                User.ValidateResourceId(id);
                return new User(client, id);
            }
            );
        }
        #endregion

        #region SourceControl
        /// <summary>
        /// Gets an object representing a <see cref="SourceControl" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SourceControl.CreateResourceIdentifier" /> to create a <see cref="SourceControl" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SourceControl" /> object. </returns>
        public static SourceControl GetSourceControl(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SourceControl.ValidateResourceId(id);
                return new SourceControl(client, id);
            }
            );
        }
        #endregion

        #region StaticSiteARMResource
        /// <summary>
        /// Gets an object representing a <see cref="StaticSiteARMResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="StaticSiteARMResource.CreateResourceIdentifier" /> to create a <see cref="StaticSiteARMResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="StaticSiteARMResource" /> object. </returns>
        public static StaticSiteARMResource GetStaticSiteARMResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                StaticSiteARMResource.ValidateResourceId(id);
                return new StaticSiteARMResource(client, id);
            }
            );
        }
        #endregion

        #region StaticSiteBuildARMResource
        /// <summary>
        /// Gets an object representing a <see cref="StaticSiteBuildARMResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="StaticSiteBuildARMResource.CreateResourceIdentifier" /> to create a <see cref="StaticSiteBuildARMResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="StaticSiteBuildARMResource" /> object. </returns>
        public static StaticSiteBuildARMResource GetStaticSiteBuildARMResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                StaticSiteBuildARMResource.ValidateResourceId(id);
                return new StaticSiteBuildARMResource(client, id);
            }
            );
        }
        #endregion

        #region StaticSiteBuildUserProvidedFunctionApp
        /// <summary>
        /// Gets an object representing a <see cref="StaticSiteBuildUserProvidedFunctionApp" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="StaticSiteBuildUserProvidedFunctionApp.CreateResourceIdentifier" /> to create a <see cref="StaticSiteBuildUserProvidedFunctionApp" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="StaticSiteBuildUserProvidedFunctionApp" /> object. </returns>
        public static StaticSiteBuildUserProvidedFunctionApp GetStaticSiteBuildUserProvidedFunctionApp(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                StaticSiteBuildUserProvidedFunctionApp.ValidateResourceId(id);
                return new StaticSiteBuildUserProvidedFunctionApp(client, id);
            }
            );
        }
        #endregion

        #region StaticSiteUserProvidedFunctionApp
        /// <summary>
        /// Gets an object representing a <see cref="StaticSiteUserProvidedFunctionApp" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="StaticSiteUserProvidedFunctionApp.CreateResourceIdentifier" /> to create a <see cref="StaticSiteUserProvidedFunctionApp" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="StaticSiteUserProvidedFunctionApp" /> object. </returns>
        public static StaticSiteUserProvidedFunctionApp GetStaticSiteUserProvidedFunctionApp(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                StaticSiteUserProvidedFunctionApp.ValidateResourceId(id);
                return new StaticSiteUserProvidedFunctionApp(client, id);
            }
            );
        }
        #endregion

        #region StaticSiteCustomDomainOverviewARMResource
        /// <summary>
        /// Gets an object representing a <see cref="StaticSiteCustomDomainOverviewARMResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="StaticSiteCustomDomainOverviewARMResource.CreateResourceIdentifier" /> to create a <see cref="StaticSiteCustomDomainOverviewARMResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="StaticSiteCustomDomainOverviewARMResource" /> object. </returns>
        public static StaticSiteCustomDomainOverviewARMResource GetStaticSiteCustomDomainOverviewARMResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                StaticSiteCustomDomainOverviewARMResource.ValidateResourceId(id);
                return new StaticSiteCustomDomainOverviewARMResource(client, id);
            }
            );
        }
        #endregion

        #region WebSite
        /// <summary>
        /// Gets an object representing a <see cref="WebSite" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WebSite.CreateResourceIdentifier" /> to create a <see cref="WebSite" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WebSite" /> object. </returns>
        public static WebSite GetWebSite(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                WebSite.ValidateResourceId(id);
                return new WebSite(client, id);
            }
            );
        }
        #endregion

        #region SiteSlot
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlot" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlot.CreateResourceIdentifier" /> to create a <see cref="SiteSlot" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlot" /> object. </returns>
        public static SiteSlot GetSiteSlot(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlot.ValidateResourceId(id);
                return new SiteSlot(client, id);
            }
            );
        }
        #endregion

        #region SiteBackup
        /// <summary>
        /// Gets an object representing a <see cref="SiteBackup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteBackup.CreateResourceIdentifier" /> to create a <see cref="SiteBackup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteBackup" /> object. </returns>
        public static SiteBackup GetSiteBackup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteBackup.ValidateResourceId(id);
                return new SiteBackup(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotBackup
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotBackup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotBackup.CreateResourceIdentifier" /> to create a <see cref="SiteSlotBackup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotBackup" /> object. </returns>
        public static SiteSlotBackup GetSiteSlotBackup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotBackup.ValidateResourceId(id);
                return new SiteSlotBackup(client, id);
            }
            );
        }
        #endregion

        #region BasicPublishingCredentialsPolicyFtp
        /// <summary>
        /// Gets an object representing a <see cref="BasicPublishingCredentialsPolicyFtp" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BasicPublishingCredentialsPolicyFtp.CreateResourceIdentifier" /> to create a <see cref="BasicPublishingCredentialsPolicyFtp" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BasicPublishingCredentialsPolicyFtp" /> object. </returns>
        public static BasicPublishingCredentialsPolicyFtp GetBasicPublishingCredentialsPolicyFtp(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                BasicPublishingCredentialsPolicyFtp.ValidateResourceId(id);
                return new BasicPublishingCredentialsPolicyFtp(client, id);
            }
            );
        }
        #endregion

        #region ScmSiteBasicPublishingCredentialsPolicy
        /// <summary>
        /// Gets an object representing a <see cref="ScmSiteBasicPublishingCredentialsPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ScmSiteBasicPublishingCredentialsPolicy.CreateResourceIdentifier" /> to create a <see cref="ScmSiteBasicPublishingCredentialsPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ScmSiteBasicPublishingCredentialsPolicy" /> object. </returns>
        public static ScmSiteBasicPublishingCredentialsPolicy GetScmSiteBasicPublishingCredentialsPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ScmSiteBasicPublishingCredentialsPolicy.ValidateResourceId(id);
                return new ScmSiteBasicPublishingCredentialsPolicy(client, id);
            }
            );
        }
        #endregion

        #region FtpSiteSlotBasicPublishingCredentialsPolicy
        /// <summary>
        /// Gets an object representing a <see cref="FtpSiteSlotBasicPublishingCredentialsPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="FtpSiteSlotBasicPublishingCredentialsPolicy.CreateResourceIdentifier" /> to create a <see cref="FtpSiteSlotBasicPublishingCredentialsPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="FtpSiteSlotBasicPublishingCredentialsPolicy" /> object. </returns>
        public static FtpSiteSlotBasicPublishingCredentialsPolicy GetFtpSiteSlotBasicPublishingCredentialsPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                FtpSiteSlotBasicPublishingCredentialsPolicy.ValidateResourceId(id);
                return new FtpSiteSlotBasicPublishingCredentialsPolicy(client, id);
            }
            );
        }
        #endregion

        #region ScmSiteSlotBasicPublishingCredentialsPolicy
        /// <summary>
        /// Gets an object representing a <see cref="ScmSiteSlotBasicPublishingCredentialsPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ScmSiteSlotBasicPublishingCredentialsPolicy.CreateResourceIdentifier" /> to create a <see cref="ScmSiteSlotBasicPublishingCredentialsPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ScmSiteSlotBasicPublishingCredentialsPolicy" /> object. </returns>
        public static ScmSiteSlotBasicPublishingCredentialsPolicy GetScmSiteSlotBasicPublishingCredentialsPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ScmSiteSlotBasicPublishingCredentialsPolicy.ValidateResourceId(id);
                return new ScmSiteSlotBasicPublishingCredentialsPolicy(client, id);
            }
            );
        }
        #endregion

        #region SiteConfigAppsetting
        /// <summary>
        /// Gets an object representing a <see cref="SiteConfigAppsetting" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteConfigAppsetting.CreateResourceIdentifier" /> to create a <see cref="SiteConfigAppsetting" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteConfigAppsetting" /> object. </returns>
        public static SiteConfigAppsetting GetSiteConfigAppsetting(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteConfigAppsetting.ValidateResourceId(id);
                return new SiteConfigAppsetting(client, id);
            }
            );
        }
        #endregion

        #region SiteConfigConnectionString
        /// <summary>
        /// Gets an object representing a <see cref="SiteConfigConnectionString" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteConfigConnectionString.CreateResourceIdentifier" /> to create a <see cref="SiteConfigConnectionString" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteConfigConnectionString" /> object. </returns>
        public static SiteConfigConnectionString GetSiteConfigConnectionString(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteConfigConnectionString.ValidateResourceId(id);
                return new SiteConfigConnectionString(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotConfigAppSetting
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotConfigAppSetting" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotConfigAppSetting.CreateResourceIdentifier" /> to create a <see cref="SiteSlotConfigAppSetting" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotConfigAppSetting" /> object. </returns>
        public static SiteSlotConfigAppSetting GetSiteSlotConfigAppSetting(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotConfigAppSetting.ValidateResourceId(id);
                return new SiteSlotConfigAppSetting(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotConfigConnectionString
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotConfigConnectionString" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotConfigConnectionString.CreateResourceIdentifier" /> to create a <see cref="SiteSlotConfigConnectionString" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotConfigConnectionString" /> object. </returns>
        public static SiteSlotConfigConnectionString GetSiteSlotConfigConnectionString(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotConfigConnectionString.ValidateResourceId(id);
                return new SiteSlotConfigConnectionString(client, id);
            }
            );
        }
        #endregion

        #region LogsSiteConfig
        /// <summary>
        /// Gets an object representing a <see cref="LogsSiteConfig" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LogsSiteConfig.CreateResourceIdentifier" /> to create a <see cref="LogsSiteConfig" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LogsSiteConfig" /> object. </returns>
        public static LogsSiteConfig GetLogsSiteConfig(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LogsSiteConfig.ValidateResourceId(id);
                return new LogsSiteConfig(client, id);
            }
            );
        }
        #endregion

        #region LogsSiteSlotConfig
        /// <summary>
        /// Gets an object representing a <see cref="LogsSiteSlotConfig" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LogsSiteSlotConfig.CreateResourceIdentifier" /> to create a <see cref="LogsSiteSlotConfig" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LogsSiteSlotConfig" /> object. </returns>
        public static LogsSiteSlotConfig GetLogsSiteSlotConfig(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LogsSiteSlotConfig.ValidateResourceId(id);
                return new LogsSiteSlotConfig(client, id);
            }
            );
        }
        #endregion

        #region SlotConfigNamesResource
        /// <summary>
        /// Gets an object representing a <see cref="SlotConfigNamesResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SlotConfigNamesResource.CreateResourceIdentifier" /> to create a <see cref="SlotConfigNamesResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SlotConfigNamesResource" /> object. </returns>
        public static SlotConfigNamesResource GetSlotConfigNamesResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SlotConfigNamesResource.ValidateResourceId(id);
                return new SlotConfigNamesResource(client, id);
            }
            );
        }
        #endregion

        #region WebSiteConfig
        /// <summary>
        /// Gets an object representing a <see cref="WebSiteConfig" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WebSiteConfig.CreateResourceIdentifier" /> to create a <see cref="WebSiteConfig" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WebSiteConfig" /> object. </returns>
        public static WebSiteConfig GetWebSiteConfig(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                WebSiteConfig.ValidateResourceId(id);
                return new WebSiteConfig(client, id);
            }
            );
        }
        #endregion

        #region SiteConfigSnapshot
        /// <summary>
        /// Gets an object representing a <see cref="SiteConfigSnapshot" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteConfigSnapshot.CreateResourceIdentifier" /> to create a <see cref="SiteConfigSnapshot" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteConfigSnapshot" /> object. </returns>
        public static SiteConfigSnapshot GetSiteConfigSnapshot(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteConfigSnapshot.ValidateResourceId(id);
                return new SiteConfigSnapshot(client, id);
            }
            );
        }
        #endregion

        #region WebSiteSlotConfig
        /// <summary>
        /// Gets an object representing a <see cref="WebSiteSlotConfig" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WebSiteSlotConfig.CreateResourceIdentifier" /> to create a <see cref="WebSiteSlotConfig" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WebSiteSlotConfig" /> object. </returns>
        public static WebSiteSlotConfig GetWebSiteSlotConfig(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                WebSiteSlotConfig.ValidateResourceId(id);
                return new WebSiteSlotConfig(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotConfigSnapshot
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotConfigSnapshot" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotConfigSnapshot.CreateResourceIdentifier" /> to create a <see cref="SiteSlotConfigSnapshot" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotConfigSnapshot" /> object. </returns>
        public static SiteSlotConfigSnapshot GetSiteSlotConfigSnapshot(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotConfigSnapshot.ValidateResourceId(id);
                return new SiteSlotConfigSnapshot(client, id);
            }
            );
        }
        #endregion

        #region SiteContinuousWebJob
        /// <summary>
        /// Gets an object representing a <see cref="SiteContinuousWebJob" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteContinuousWebJob.CreateResourceIdentifier" /> to create a <see cref="SiteContinuousWebJob" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteContinuousWebJob" /> object. </returns>
        public static SiteContinuousWebJob GetSiteContinuousWebJob(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteContinuousWebJob.ValidateResourceId(id);
                return new SiteContinuousWebJob(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotContinuousWebJob
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotContinuousWebJob" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotContinuousWebJob.CreateResourceIdentifier" /> to create a <see cref="SiteSlotContinuousWebJob" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotContinuousWebJob" /> object. </returns>
        public static SiteSlotContinuousWebJob GetSiteSlotContinuousWebJob(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotContinuousWebJob.ValidateResourceId(id);
                return new SiteSlotContinuousWebJob(client, id);
            }
            );
        }
        #endregion

        #region SiteDeployment
        /// <summary>
        /// Gets an object representing a <see cref="SiteDeployment" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteDeployment.CreateResourceIdentifier" /> to create a <see cref="SiteDeployment" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteDeployment" /> object. </returns>
        public static SiteDeployment GetSiteDeployment(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteDeployment.ValidateResourceId(id);
                return new SiteDeployment(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotDeployment
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotDeployment" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotDeployment.CreateResourceIdentifier" /> to create a <see cref="SiteSlotDeployment" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotDeployment" /> object. </returns>
        public static SiteSlotDeployment GetSiteSlotDeployment(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotDeployment.ValidateResourceId(id);
                return new SiteSlotDeployment(client, id);
            }
            );
        }
        #endregion

        #region SiteDomainOwnershipIdentifier
        /// <summary>
        /// Gets an object representing a <see cref="SiteDomainOwnershipIdentifier" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteDomainOwnershipIdentifier.CreateResourceIdentifier" /> to create a <see cref="SiteDomainOwnershipIdentifier" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteDomainOwnershipIdentifier" /> object. </returns>
        public static SiteDomainOwnershipIdentifier GetSiteDomainOwnershipIdentifier(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteDomainOwnershipIdentifier.ValidateResourceId(id);
                return new SiteDomainOwnershipIdentifier(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotDomainOwnershipIdentifier
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotDomainOwnershipIdentifier" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotDomainOwnershipIdentifier.CreateResourceIdentifier" /> to create a <see cref="SiteSlotDomainOwnershipIdentifier" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotDomainOwnershipIdentifier" /> object. </returns>
        public static SiteSlotDomainOwnershipIdentifier GetSiteSlotDomainOwnershipIdentifier(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotDomainOwnershipIdentifier.ValidateResourceId(id);
                return new SiteSlotDomainOwnershipIdentifier(client, id);
            }
            );
        }
        #endregion

        #region SiteExtension
        /// <summary>
        /// Gets an object representing a <see cref="SiteExtension" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteExtension.CreateResourceIdentifier" /> to create a <see cref="SiteExtension" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteExtension" /> object. </returns>
        public static SiteExtension GetSiteExtension(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteExtension.ValidateResourceId(id);
                return new SiteExtension(client, id);
            }
            );
        }
        #endregion

        #region SiteInstanceExtension
        /// <summary>
        /// Gets an object representing a <see cref="SiteInstanceExtension" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteInstanceExtension.CreateResourceIdentifier" /> to create a <see cref="SiteInstanceExtension" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteInstanceExtension" /> object. </returns>
        public static SiteInstanceExtension GetSiteInstanceExtension(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteInstanceExtension.ValidateResourceId(id);
                return new SiteInstanceExtension(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotExtension
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotExtension" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotExtension.CreateResourceIdentifier" /> to create a <see cref="SiteSlotExtension" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotExtension" /> object. </returns>
        public static SiteSlotExtension GetSiteSlotExtension(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotExtension.ValidateResourceId(id);
                return new SiteSlotExtension(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotInstanceExtension
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotInstanceExtension" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotInstanceExtension.CreateResourceIdentifier" /> to create a <see cref="SiteSlotInstanceExtension" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotInstanceExtension" /> object. </returns>
        public static SiteSlotInstanceExtension GetSiteSlotInstanceExtension(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotInstanceExtension.ValidateResourceId(id);
                return new SiteSlotInstanceExtension(client, id);
            }
            );
        }
        #endregion

        #region SiteFunction
        /// <summary>
        /// Gets an object representing a <see cref="SiteFunction" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteFunction.CreateResourceIdentifier" /> to create a <see cref="SiteFunction" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteFunction" /> object. </returns>
        public static SiteFunction GetSiteFunction(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteFunction.ValidateResourceId(id);
                return new SiteFunction(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotFunction
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotFunction" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotFunction.CreateResourceIdentifier" /> to create a <see cref="SiteSlotFunction" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotFunction" /> object. </returns>
        public static SiteSlotFunction GetSiteSlotFunction(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotFunction.ValidateResourceId(id);
                return new SiteSlotFunction(client, id);
            }
            );
        }
        #endregion

        #region SiteHostNameBinding
        /// <summary>
        /// Gets an object representing a <see cref="SiteHostNameBinding" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteHostNameBinding.CreateResourceIdentifier" /> to create a <see cref="SiteHostNameBinding" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteHostNameBinding" /> object. </returns>
        public static SiteHostNameBinding GetSiteHostNameBinding(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteHostNameBinding.ValidateResourceId(id);
                return new SiteHostNameBinding(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotHostNameBinding
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotHostNameBinding" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotHostNameBinding.CreateResourceIdentifier" /> to create a <see cref="SiteSlotHostNameBinding" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotHostNameBinding" /> object. </returns>
        public static SiteSlotHostNameBinding GetSiteSlotHostNameBinding(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotHostNameBinding.ValidateResourceId(id);
                return new SiteSlotHostNameBinding(client, id);
            }
            );
        }
        #endregion

        #region SiteHybridConnection
        /// <summary>
        /// Gets an object representing a <see cref="SiteHybridConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteHybridConnection.CreateResourceIdentifier" /> to create a <see cref="SiteHybridConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteHybridConnection" /> object. </returns>
        public static SiteHybridConnection GetSiteHybridConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteHybridConnection.ValidateResourceId(id);
                return new SiteHybridConnection(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotHybridconnection
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotHybridconnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotHybridconnection.CreateResourceIdentifier" /> to create a <see cref="SiteSlotHybridconnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotHybridconnection" /> object. </returns>
        public static SiteSlotHybridconnection GetSiteSlotHybridconnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotHybridconnection.ValidateResourceId(id);
                return new SiteSlotHybridconnection(client, id);
            }
            );
        }
        #endregion

        #region SiteInstance
        /// <summary>
        /// Gets an object representing a <see cref="SiteInstance" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteInstance.CreateResourceIdentifier" /> to create a <see cref="SiteInstance" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteInstance" /> object. </returns>
        public static SiteInstance GetSiteInstance(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteInstance.ValidateResourceId(id);
                return new SiteInstance(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotInstance
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotInstance" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotInstance.CreateResourceIdentifier" /> to create a <see cref="SiteSlotInstance" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotInstance" /> object. </returns>
        public static SiteSlotInstance GetSiteSlotInstance(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotInstance.ValidateResourceId(id);
                return new SiteSlotInstance(client, id);
            }
            );
        }
        #endregion

        #region SiteInstanceProcess
        /// <summary>
        /// Gets an object representing a <see cref="SiteInstanceProcess" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteInstanceProcess.CreateResourceIdentifier" /> to create a <see cref="SiteInstanceProcess" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteInstanceProcess" /> object. </returns>
        public static SiteInstanceProcess GetSiteInstanceProcess(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteInstanceProcess.ValidateResourceId(id);
                return new SiteInstanceProcess(client, id);
            }
            );
        }
        #endregion

        #region SiteProcess
        /// <summary>
        /// Gets an object representing a <see cref="SiteProcess" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteProcess.CreateResourceIdentifier" /> to create a <see cref="SiteProcess" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteProcess" /> object. </returns>
        public static SiteProcess GetSiteProcess(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteProcess.ValidateResourceId(id);
                return new SiteProcess(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotInstanceProcess
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotInstanceProcess" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotInstanceProcess.CreateResourceIdentifier" /> to create a <see cref="SiteSlotInstanceProcess" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotInstanceProcess" /> object. </returns>
        public static SiteSlotInstanceProcess GetSiteSlotInstanceProcess(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotInstanceProcess.ValidateResourceId(id);
                return new SiteSlotInstanceProcess(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotProcess
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotProcess" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotProcess.CreateResourceIdentifier" /> to create a <see cref="SiteSlotProcess" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotProcess" /> object. </returns>
        public static SiteSlotProcess GetSiteSlotProcess(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotProcess.ValidateResourceId(id);
                return new SiteSlotProcess(client, id);
            }
            );
        }
        #endregion

        #region SiteInstanceProcessModule
        /// <summary>
        /// Gets an object representing a <see cref="SiteInstanceProcessModule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteInstanceProcessModule.CreateResourceIdentifier" /> to create a <see cref="SiteInstanceProcessModule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteInstanceProcessModule" /> object. </returns>
        public static SiteInstanceProcessModule GetSiteInstanceProcessModule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteInstanceProcessModule.ValidateResourceId(id);
                return new SiteInstanceProcessModule(client, id);
            }
            );
        }
        #endregion

        #region SiteProcessModule
        /// <summary>
        /// Gets an object representing a <see cref="SiteProcessModule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteProcessModule.CreateResourceIdentifier" /> to create a <see cref="SiteProcessModule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteProcessModule" /> object. </returns>
        public static SiteProcessModule GetSiteProcessModule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteProcessModule.ValidateResourceId(id);
                return new SiteProcessModule(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotInstanceProcessModule
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotInstanceProcessModule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotInstanceProcessModule.CreateResourceIdentifier" /> to create a <see cref="SiteSlotInstanceProcessModule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotInstanceProcessModule" /> object. </returns>
        public static SiteSlotInstanceProcessModule GetSiteSlotInstanceProcessModule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotInstanceProcessModule.ValidateResourceId(id);
                return new SiteSlotInstanceProcessModule(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotProcessModule
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotProcessModule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotProcessModule.CreateResourceIdentifier" /> to create a <see cref="SiteSlotProcessModule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotProcessModule" /> object. </returns>
        public static SiteSlotProcessModule GetSiteSlotProcessModule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotProcessModule.ValidateResourceId(id);
                return new SiteSlotProcessModule(client, id);
            }
            );
        }
        #endregion

        #region SiteNetworkConfig
        /// <summary>
        /// Gets an object representing a <see cref="SiteNetworkConfig" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteNetworkConfig.CreateResourceIdentifier" /> to create a <see cref="SiteNetworkConfig" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteNetworkConfig" /> object. </returns>
        public static SiteNetworkConfig GetSiteNetworkConfig(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteNetworkConfig.ValidateResourceId(id);
                return new SiteNetworkConfig(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotNetworkConfig
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotNetworkConfig" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotNetworkConfig.CreateResourceIdentifier" /> to create a <see cref="SiteSlotNetworkConfig" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotNetworkConfig" /> object. </returns>
        public static SiteSlotNetworkConfig GetSiteSlotNetworkConfig(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotNetworkConfig.ValidateResourceId(id);
                return new SiteSlotNetworkConfig(client, id);
            }
            );
        }
        #endregion

        #region SitePremierAddon
        /// <summary>
        /// Gets an object representing a <see cref="SitePremierAddon" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SitePremierAddon.CreateResourceIdentifier" /> to create a <see cref="SitePremierAddon" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SitePremierAddon" /> object. </returns>
        public static SitePremierAddon GetSitePremierAddon(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SitePremierAddon.ValidateResourceId(id);
                return new SitePremierAddon(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotPremierAddOn
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotPremierAddOn" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotPremierAddOn.CreateResourceIdentifier" /> to create a <see cref="SiteSlotPremierAddOn" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotPremierAddOn" /> object. </returns>
        public static SiteSlotPremierAddOn GetSiteSlotPremierAddOn(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotPremierAddOn.ValidateResourceId(id);
                return new SiteSlotPremierAddOn(client, id);
            }
            );
        }
        #endregion

        #region SitePrivateAccess
        /// <summary>
        /// Gets an object representing a <see cref="SitePrivateAccess" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SitePrivateAccess.CreateResourceIdentifier" /> to create a <see cref="SitePrivateAccess" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SitePrivateAccess" /> object. </returns>
        public static SitePrivateAccess GetSitePrivateAccess(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SitePrivateAccess.ValidateResourceId(id);
                return new SitePrivateAccess(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotPrivateAccess
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotPrivateAccess" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotPrivateAccess.CreateResourceIdentifier" /> to create a <see cref="SiteSlotPrivateAccess" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotPrivateAccess" /> object. </returns>
        public static SiteSlotPrivateAccess GetSiteSlotPrivateAccess(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotPrivateAccess.ValidateResourceId(id);
                return new SiteSlotPrivateAccess(client, id);
            }
            );
        }
        #endregion

        #region SitePublicCertificate
        /// <summary>
        /// Gets an object representing a <see cref="SitePublicCertificate" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SitePublicCertificate.CreateResourceIdentifier" /> to create a <see cref="SitePublicCertificate" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SitePublicCertificate" /> object. </returns>
        public static SitePublicCertificate GetSitePublicCertificate(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SitePublicCertificate.ValidateResourceId(id);
                return new SitePublicCertificate(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotPublicCertificate
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotPublicCertificate" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotPublicCertificate.CreateResourceIdentifier" /> to create a <see cref="SiteSlotPublicCertificate" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotPublicCertificate" /> object. </returns>
        public static SiteSlotPublicCertificate GetSiteSlotPublicCertificate(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotPublicCertificate.ValidateResourceId(id);
                return new SiteSlotPublicCertificate(client, id);
            }
            );
        }
        #endregion

        #region SiteSiteextension
        /// <summary>
        /// Gets an object representing a <see cref="SiteSiteextension" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSiteextension.CreateResourceIdentifier" /> to create a <see cref="SiteSiteextension" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSiteextension" /> object. </returns>
        public static SiteSiteextension GetSiteSiteextension(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSiteextension.ValidateResourceId(id);
                return new SiteSiteextension(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotSiteextension
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotSiteextension" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotSiteextension.CreateResourceIdentifier" /> to create a <see cref="SiteSlotSiteextension" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotSiteextension" /> object. </returns>
        public static SiteSlotSiteextension GetSiteSlotSiteextension(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotSiteextension.ValidateResourceId(id);
                return new SiteSlotSiteextension(client, id);
            }
            );
        }
        #endregion

        #region MigrateMySqlStatus
        /// <summary>
        /// Gets an object representing a <see cref="MigrateMySqlStatus" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MigrateMySqlStatus.CreateResourceIdentifier" /> to create a <see cref="MigrateMySqlStatus" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MigrateMySqlStatus" /> object. </returns>
        public static MigrateMySqlStatus GetMigrateMySqlStatus(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MigrateMySqlStatus.ValidateResourceId(id);
                return new MigrateMySqlStatus(client, id);
            }
            );
        }
        #endregion

        #region NetworkFeatures
        /// <summary>
        /// Gets an object representing a <see cref="NetworkFeatures" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NetworkFeatures.CreateResourceIdentifier" /> to create a <see cref="NetworkFeatures" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NetworkFeatures" /> object. </returns>
        public static NetworkFeatures GetNetworkFeatures(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NetworkFeatures.ValidateResourceId(id);
                return new NetworkFeatures(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotSourcecontrol
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotSourcecontrol" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotSourcecontrol.CreateResourceIdentifier" /> to create a <see cref="SiteSlotSourcecontrol" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotSourcecontrol" /> object. </returns>
        public static SiteSlotSourcecontrol GetSiteSlotSourcecontrol(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotSourcecontrol.ValidateResourceId(id);
                return new SiteSlotSourcecontrol(client, id);
            }
            );
        }
        #endregion

        #region SiteSourceControl
        /// <summary>
        /// Gets an object representing a <see cref="SiteSourceControl" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSourceControl.CreateResourceIdentifier" /> to create a <see cref="SiteSourceControl" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSourceControl" /> object. </returns>
        public static SiteSourceControl GetSiteSourceControl(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSourceControl.ValidateResourceId(id);
                return new SiteSourceControl(client, id);
            }
            );
        }
        #endregion

        #region SiteTriggeredwebJob
        /// <summary>
        /// Gets an object representing a <see cref="SiteTriggeredwebJob" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteTriggeredwebJob.CreateResourceIdentifier" /> to create a <see cref="SiteTriggeredwebJob" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteTriggeredwebJob" /> object. </returns>
        public static SiteTriggeredwebJob GetSiteTriggeredwebJob(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteTriggeredwebJob.ValidateResourceId(id);
                return new SiteTriggeredwebJob(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotTriggeredWebJob
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotTriggeredWebJob" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotTriggeredWebJob.CreateResourceIdentifier" /> to create a <see cref="SiteSlotTriggeredWebJob" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotTriggeredWebJob" /> object. </returns>
        public static SiteSlotTriggeredWebJob GetSiteSlotTriggeredWebJob(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotTriggeredWebJob.ValidateResourceId(id);
                return new SiteSlotTriggeredWebJob(client, id);
            }
            );
        }
        #endregion

        #region SiteTriggeredWebJobHistory
        /// <summary>
        /// Gets an object representing a <see cref="SiteTriggeredWebJobHistory" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteTriggeredWebJobHistory.CreateResourceIdentifier" /> to create a <see cref="SiteTriggeredWebJobHistory" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteTriggeredWebJobHistory" /> object. </returns>
        public static SiteTriggeredWebJobHistory GetSiteTriggeredWebJobHistory(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteTriggeredWebJobHistory.ValidateResourceId(id);
                return new SiteTriggeredWebJobHistory(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotTriggeredWebJobHistory
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotTriggeredWebJobHistory" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotTriggeredWebJobHistory.CreateResourceIdentifier" /> to create a <see cref="SiteSlotTriggeredWebJobHistory" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotTriggeredWebJobHistory" /> object. </returns>
        public static SiteSlotTriggeredWebJobHistory GetSiteSlotTriggeredWebJobHistory(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotTriggeredWebJobHistory.ValidateResourceId(id);
                return new SiteSlotTriggeredWebJobHistory(client, id);
            }
            );
        }
        #endregion

        #region SiteSlotWebJob
        /// <summary>
        /// Gets an object representing a <see cref="SiteSlotWebJob" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteSlotWebJob.CreateResourceIdentifier" /> to create a <see cref="SiteSlotWebJob" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteSlotWebJob" /> object. </returns>
        public static SiteSlotWebJob GetSiteSlotWebJob(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteSlotWebJob.ValidateResourceId(id);
                return new SiteSlotWebJob(client, id);
            }
            );
        }
        #endregion

        #region SiteWebJob
        /// <summary>
        /// Gets an object representing a <see cref="SiteWebJob" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteWebJob.CreateResourceIdentifier" /> to create a <see cref="SiteWebJob" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteWebJob" /> object. </returns>
        public static SiteWebJob GetSiteWebJob(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SiteWebJob.ValidateResourceId(id);
                return new SiteWebJob(client, id);
            }
            );
        }
        #endregion
    }
}
