// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.AppService
{
    /// <summary> A class to add extension methods to Subscription. </summary>
    internal partial class SubscriptionExtensionClient : ArmResource
    {
        private ClientDiagnostics _appServiceCertificateOrderClientDiagnostics;
        private AppServiceCertificateOrdersRestOperations _appServiceCertificateOrderRestClient;
        private ClientDiagnostics _appServiceCertificateOrdersClientDiagnostics;
        private AppServiceCertificateOrdersRestOperations _appServiceCertificateOrdersRestClient;
        private ClientDiagnostics _domainsClientDiagnostics;
        private DomainsRestOperations _domainsRestClient;
        private ClientDiagnostics _appServiceDomainDomainsClientDiagnostics;
        private DomainsRestOperations _appServiceDomainDomainsRestClient;
        private ClientDiagnostics _appServiceEnvironmentClientDiagnostics;
        private AppServiceEnvironmentsRestOperations _appServiceEnvironmentRestClient;
        private ClientDiagnostics _appServicePlanClientDiagnostics;
        private AppServicePlansRestOperations _appServicePlanRestClient;
        private ClientDiagnostics _certificateClientDiagnostics;
        private CertificatesRestOperations _certificateRestClient;
        private ClientDiagnostics _deletedSiteDeletedWebAppsClientDiagnostics;
        private DeletedWebAppsRestOperations _deletedSiteDeletedWebAppsRestClient;
        private ClientDiagnostics _deletedSiteGlobalClientDiagnostics;
        private GlobalRestOperations _deletedSiteGlobalRestClient;
        private ClientDiagnostics _kubeEnvironmentClientDiagnostics;
        private KubeEnvironmentsRestOperations _kubeEnvironmentRestClient;
        private ClientDiagnostics _providerClientDiagnostics;
        private ProviderRestOperations _providerRestClient;
        private ClientDiagnostics _recommendationsClientDiagnostics;
        private RecommendationsRestOperations _recommendationsRestClient;
        private ClientDiagnostics _resourceHealthMetadataClientDiagnostics;
        private ResourceHealthMetadataRestOperations _resourceHealthMetadataRestClient;
        private ClientDiagnostics _defaultClientDiagnostics;
        private WebSiteManagementRestOperations _defaultRestClient;
        private ClientDiagnostics _staticSitesClientDiagnostics;
        private StaticSitesRestOperations _staticSitesRestClient;
        private ClientDiagnostics _staticSiteARMResourceStaticSitesClientDiagnostics;
        private StaticSitesRestOperations _staticSiteARMResourceStaticSitesRestClient;
        private ClientDiagnostics _webSiteWebAppsClientDiagnostics;
        private WebAppsRestOperations _webSiteWebAppsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionExtensionClient"/> class for mocking. </summary>
        protected SubscriptionExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics AppServiceCertificateOrderClientDiagnostics => _appServiceCertificateOrderClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", AppServiceCertificateOrder.ResourceType.Namespace, DiagnosticOptions);
        private AppServiceCertificateOrdersRestOperations AppServiceCertificateOrderRestClient => _appServiceCertificateOrderRestClient ??= new AppServiceCertificateOrdersRestOperations(AppServiceCertificateOrderClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(AppServiceCertificateOrder.ResourceType));
        private ClientDiagnostics AppServiceCertificateOrdersClientDiagnostics => _appServiceCertificateOrdersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private AppServiceCertificateOrdersRestOperations AppServiceCertificateOrdersRestClient => _appServiceCertificateOrdersRestClient ??= new AppServiceCertificateOrdersRestOperations(AppServiceCertificateOrdersClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics DomainsClientDiagnostics => _domainsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private DomainsRestOperations DomainsRestClient => _domainsRestClient ??= new DomainsRestOperations(DomainsClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics AppServiceDomainDomainsClientDiagnostics => _appServiceDomainDomainsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", AppServiceDomain.ResourceType.Namespace, DiagnosticOptions);
        private DomainsRestOperations AppServiceDomainDomainsRestClient => _appServiceDomainDomainsRestClient ??= new DomainsRestOperations(AppServiceDomainDomainsClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(AppServiceDomain.ResourceType));
        private ClientDiagnostics AppServiceEnvironmentClientDiagnostics => _appServiceEnvironmentClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", AppServiceEnvironment.ResourceType.Namespace, DiagnosticOptions);
        private AppServiceEnvironmentsRestOperations AppServiceEnvironmentRestClient => _appServiceEnvironmentRestClient ??= new AppServiceEnvironmentsRestOperations(AppServiceEnvironmentClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(AppServiceEnvironment.ResourceType));
        private ClientDiagnostics AppServicePlanClientDiagnostics => _appServicePlanClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", AppServicePlan.ResourceType.Namespace, DiagnosticOptions);
        private AppServicePlansRestOperations AppServicePlanRestClient => _appServicePlanRestClient ??= new AppServicePlansRestOperations(AppServicePlanClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(AppServicePlan.ResourceType));
        private ClientDiagnostics CertificateClientDiagnostics => _certificateClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", Certificate.ResourceType.Namespace, DiagnosticOptions);
        private CertificatesRestOperations CertificateRestClient => _certificateRestClient ??= new CertificatesRestOperations(CertificateClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(Certificate.ResourceType));
        private ClientDiagnostics DeletedSiteDeletedWebAppsClientDiagnostics => _deletedSiteDeletedWebAppsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", DeletedSite.ResourceType.Namespace, DiagnosticOptions);
        private DeletedWebAppsRestOperations DeletedSiteDeletedWebAppsRestClient => _deletedSiteDeletedWebAppsRestClient ??= new DeletedWebAppsRestOperations(DeletedSiteDeletedWebAppsClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(DeletedSite.ResourceType));
        private ClientDiagnostics DeletedSiteGlobalClientDiagnostics => _deletedSiteGlobalClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", DeletedSite.ResourceType.Namespace, DiagnosticOptions);
        private GlobalRestOperations DeletedSiteGlobalRestClient => _deletedSiteGlobalRestClient ??= new GlobalRestOperations(DeletedSiteGlobalClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(DeletedSite.ResourceType));
        private ClientDiagnostics KubeEnvironmentClientDiagnostics => _kubeEnvironmentClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", KubeEnvironment.ResourceType.Namespace, DiagnosticOptions);
        private KubeEnvironmentsRestOperations KubeEnvironmentRestClient => _kubeEnvironmentRestClient ??= new KubeEnvironmentsRestOperations(KubeEnvironmentClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(KubeEnvironment.ResourceType));
        private ClientDiagnostics ProviderClientDiagnostics => _providerClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private ProviderRestOperations ProviderRestClient => _providerRestClient ??= new ProviderRestOperations(ProviderClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics RecommendationsClientDiagnostics => _recommendationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private RecommendationsRestOperations RecommendationsRestClient => _recommendationsRestClient ??= new RecommendationsRestOperations(RecommendationsClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics ResourceHealthMetadataClientDiagnostics => _resourceHealthMetadataClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private ResourceHealthMetadataRestOperations ResourceHealthMetadataRestClient => _resourceHealthMetadataRestClient ??= new ResourceHealthMetadataRestOperations(ResourceHealthMetadataClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics DefaultClientDiagnostics => _defaultClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private WebSiteManagementRestOperations DefaultRestClient => _defaultRestClient ??= new WebSiteManagementRestOperations(DefaultClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics StaticSitesClientDiagnostics => _staticSitesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private StaticSitesRestOperations StaticSitesRestClient => _staticSitesRestClient ??= new StaticSitesRestOperations(StaticSitesClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics StaticSiteARMResourceStaticSitesClientDiagnostics => _staticSiteARMResourceStaticSitesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", StaticSiteARMResource.ResourceType.Namespace, DiagnosticOptions);
        private StaticSitesRestOperations StaticSiteARMResourceStaticSitesRestClient => _staticSiteARMResourceStaticSitesRestClient ??= new StaticSitesRestOperations(StaticSiteARMResourceStaticSitesClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(StaticSiteARMResource.ResourceType));
        private ClientDiagnostics WebSiteWebAppsClientDiagnostics => _webSiteWebAppsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AppService", WebSite.ResourceType.Namespace, DiagnosticOptions);
        private WebAppsRestOperations WebSiteWebAppsRestClient => _webSiteWebAppsRestClient ??= new WebAppsRestOperations(WebSiteWebAppsClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, GetApiVersionOrNull(WebSite.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            Client.TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of TopLevelDomains in the TopLevelDomain. </summary>
        /// <returns> An object representing collection of TopLevelDomains and their operations over a TopLevelDomain. </returns>
        public virtual TopLevelDomainCollection GetTopLevelDomains()
        {
            return new TopLevelDomainCollection(Client, Id);
        }

        /// <summary> Gets a collection of DeletedSites in the DeletedSite. </summary>
        /// <returns> An object representing collection of DeletedSites and their operations over a DeletedSite. </returns>
        public virtual DeletedSiteCollection GetDeletedSites()
        {
            return new DeletedSiteCollection(Client, Id);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AppServiceCertificateOrders_List
        /// <summary> Description for List all certificate orders in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AppServiceCertificateOrder" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AppServiceCertificateOrder> GetAppServiceCertificateOrdersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AppServiceCertificateOrder>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AppServiceCertificateOrderClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceCertificateOrders");
                scope.Start();
                try
                {
                    var response = await AppServiceCertificateOrderRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceCertificateOrder(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AppServiceCertificateOrder>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AppServiceCertificateOrderClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceCertificateOrders");
                scope.Start();
                try
                {
                    var response = await AppServiceCertificateOrderRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceCertificateOrder(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AppServiceCertificateOrders_List
        /// <summary> Description for List all certificate orders in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AppServiceCertificateOrder" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AppServiceCertificateOrder> GetAppServiceCertificateOrders(CancellationToken cancellationToken = default)
        {
            Page<AppServiceCertificateOrder> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AppServiceCertificateOrderClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceCertificateOrders");
                scope.Start();
                try
                {
                    var response = AppServiceCertificateOrderRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceCertificateOrder(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AppServiceCertificateOrder> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AppServiceCertificateOrderClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceCertificateOrders");
                scope.Start();
                try
                {
                    var response = AppServiceCertificateOrderRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceCertificateOrder(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AppServiceCertificateOrders_ValidatePurchaseInformation
        /// <summary> Description for Validate information for a certificate order. </summary>
        /// <param name="appServiceCertificateOrder"> Information for a certificate order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> ValidatePurchaseInformationAppServiceCertificateOrderAsync(AppServiceCertificateOrderData appServiceCertificateOrder, CancellationToken cancellationToken = default)
        {
            using var scope = AppServiceCertificateOrdersClientDiagnostics.CreateScope("SubscriptionExtensionClient.ValidatePurchaseInformationAppServiceCertificateOrder");
            scope.Start();
            try
            {
                var response = await AppServiceCertificateOrdersRestClient.ValidatePurchaseInformationAsync(Id.SubscriptionId, appServiceCertificateOrder, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AppServiceCertificateOrders_ValidatePurchaseInformation
        /// <summary> Description for Validate information for a certificate order. </summary>
        /// <param name="appServiceCertificateOrder"> Information for a certificate order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ValidatePurchaseInformationAppServiceCertificateOrder(AppServiceCertificateOrderData appServiceCertificateOrder, CancellationToken cancellationToken = default)
        {
            using var scope = AppServiceCertificateOrdersClientDiagnostics.CreateScope("SubscriptionExtensionClient.ValidatePurchaseInformationAppServiceCertificateOrder");
            scope.Start();
            try
            {
                var response = AppServiceCertificateOrdersRestClient.ValidatePurchaseInformation(Id.SubscriptionId, appServiceCertificateOrder, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Domains_CheckAvailability
        /// <summary> Description for Check if a domain is available for registration. </summary>
        /// <param name="identifier"> Name of the domain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<DomainAvailabilityCheckResult>> CheckAvailabilityDomainAsync(NameIdentifier identifier, CancellationToken cancellationToken = default)
        {
            using var scope = DomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.CheckAvailabilityDomain");
            scope.Start();
            try
            {
                var response = await DomainsRestClient.CheckAvailabilityAsync(Id.SubscriptionId, identifier, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Domains_CheckAvailability
        /// <summary> Description for Check if a domain is available for registration. </summary>
        /// <param name="identifier"> Name of the domain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DomainAvailabilityCheckResult> CheckAvailabilityDomain(NameIdentifier identifier, CancellationToken cancellationToken = default)
        {
            using var scope = DomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.CheckAvailabilityDomain");
            scope.Start();
            try
            {
                var response = DomainsRestClient.CheckAvailability(Id.SubscriptionId, identifier, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Domains_List
        /// <summary> Description for Get all domains in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AppServiceDomain" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AppServiceDomain> GetAppServiceDomainsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AppServiceDomain>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AppServiceDomainDomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceDomains");
                scope.Start();
                try
                {
                    var response = await AppServiceDomainDomainsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceDomain(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AppServiceDomain>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AppServiceDomainDomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceDomains");
                scope.Start();
                try
                {
                    var response = await AppServiceDomainDomainsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceDomain(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Domains_List
        /// <summary> Description for Get all domains in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AppServiceDomain" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AppServiceDomain> GetAppServiceDomains(CancellationToken cancellationToken = default)
        {
            Page<AppServiceDomain> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AppServiceDomainDomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceDomains");
                scope.Start();
                try
                {
                    var response = AppServiceDomainDomainsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceDomain(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AppServiceDomain> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AppServiceDomainDomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceDomains");
                scope.Start();
                try
                {
                    var response = AppServiceDomainDomainsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceDomain(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Domains_GetControlCenterSsoRequest
        /// <summary> Description for Generate a single sign-on request for the domain management portal. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<DomainControlCenterSsoRequest>> GetControlCenterSsoRequestDomainAsync(CancellationToken cancellationToken = default)
        {
            using var scope = DomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetControlCenterSsoRequestDomain");
            scope.Start();
            try
            {
                var response = await DomainsRestClient.GetControlCenterSsoRequestAsync(Id.SubscriptionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Domains_GetControlCenterSsoRequest
        /// <summary> Description for Generate a single sign-on request for the domain management portal. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DomainControlCenterSsoRequest> GetControlCenterSsoRequestDomain(CancellationToken cancellationToken = default)
        {
            using var scope = DomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetControlCenterSsoRequestDomain");
            scope.Start();
            try
            {
                var response = DomainsRestClient.GetControlCenterSsoRequest(Id.SubscriptionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Domains_ListRecommendations
        /// <summary> Description for Get domain name recommendations based on keywords. </summary>
        /// <param name="parameters"> Search parameters for domain name recommendations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NameIdentifier" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NameIdentifier> GetRecommendationsDomainsAsync(DomainRecommendationSearchParameters parameters, CancellationToken cancellationToken = default)
        {
            async Task<Page<NameIdentifier>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetRecommendationsDomains");
                scope.Start();
                try
                {
                    var response = await DomainsRestClient.ListRecommendationsAsync(Id.SubscriptionId, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<NameIdentifier>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetRecommendationsDomains");
                scope.Start();
                try
                {
                    var response = await DomainsRestClient.ListRecommendationsNextPageAsync(nextLink, Id.SubscriptionId, parameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Domains_ListRecommendations
        /// <summary> Description for Get domain name recommendations based on keywords. </summary>
        /// <param name="parameters"> Search parameters for domain name recommendations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NameIdentifier" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NameIdentifier> GetRecommendationsDomains(DomainRecommendationSearchParameters parameters, CancellationToken cancellationToken = default)
        {
            Page<NameIdentifier> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetRecommendationsDomains");
                scope.Start();
                try
                {
                    var response = DomainsRestClient.ListRecommendations(Id.SubscriptionId, parameters, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<NameIdentifier> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DomainsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetRecommendationsDomains");
                scope.Start();
                try
                {
                    var response = DomainsRestClient.ListRecommendationsNextPage(nextLink, Id.SubscriptionId, parameters, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AppServiceEnvironments_List
        /// <summary> Description for Get all App Service Environments for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AppServiceEnvironment" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AppServiceEnvironment> GetAppServiceEnvironmentsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AppServiceEnvironment>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AppServiceEnvironmentClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceEnvironments");
                scope.Start();
                try
                {
                    var response = await AppServiceEnvironmentRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceEnvironment(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AppServiceEnvironment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AppServiceEnvironmentClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceEnvironments");
                scope.Start();
                try
                {
                    var response = await AppServiceEnvironmentRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceEnvironment(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AppServiceEnvironments_List
        /// <summary> Description for Get all App Service Environments for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AppServiceEnvironment" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AppServiceEnvironment> GetAppServiceEnvironments(CancellationToken cancellationToken = default)
        {
            Page<AppServiceEnvironment> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AppServiceEnvironmentClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceEnvironments");
                scope.Start();
                try
                {
                    var response = AppServiceEnvironmentRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceEnvironment(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AppServiceEnvironment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AppServiceEnvironmentClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServiceEnvironments");
                scope.Start();
                try
                {
                    var response = AppServiceEnvironmentRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServiceEnvironment(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AppServicePlans_List
        /// <summary> Description for Get all App Service plans for a subscription. </summary>
        /// <param name="detailed">
        /// Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan properties. The default is &lt;code&gt;false&lt;/code&gt;, which returns a subset of the properties.
        ///  Retrieval of all properties may increase the API latency.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AppServicePlan" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AppServicePlan> GetAppServicePlansAsync(bool? detailed = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AppServicePlan>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AppServicePlanClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServicePlans");
                scope.Start();
                try
                {
                    var response = await AppServicePlanRestClient.ListAsync(Id.SubscriptionId, detailed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServicePlan(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AppServicePlan>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AppServicePlanClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServicePlans");
                scope.Start();
                try
                {
                    var response = await AppServicePlanRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, detailed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServicePlan(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: AppServicePlans_List
        /// <summary> Description for Get all App Service plans for a subscription. </summary>
        /// <param name="detailed">
        /// Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan properties. The default is &lt;code&gt;false&lt;/code&gt;, which returns a subset of the properties.
        ///  Retrieval of all properties may increase the API latency.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AppServicePlan" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AppServicePlan> GetAppServicePlans(bool? detailed = null, CancellationToken cancellationToken = default)
        {
            Page<AppServicePlan> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AppServicePlanClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServicePlans");
                scope.Start();
                try
                {
                    var response = AppServicePlanRestClient.List(Id.SubscriptionId, detailed, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServicePlan(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AppServicePlan> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AppServicePlanClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAppServicePlans");
                scope.Start();
                try
                {
                    var response = AppServicePlanRestClient.ListNextPage(nextLink, Id.SubscriptionId, detailed, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AppServicePlan(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Certificates_List
        /// <summary> Description for Get all certificates for a subscription. </summary>
        /// <param name="filter"> Return only information specified in the filter (using OData syntax). For example: $filter=KeyVaultId eq &apos;KeyVaultId&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Certificate" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Certificate> GetCertificatesAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Certificate>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CertificateClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetCertificates");
                scope.Start();
                try
                {
                    var response = await CertificateRestClient.ListAsync(Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Certificate(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Certificate>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CertificateClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetCertificates");
                scope.Start();
                try
                {
                    var response = await CertificateRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Certificate(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Certificates_List
        /// <summary> Description for Get all certificates for a subscription. </summary>
        /// <param name="filter"> Return only information specified in the filter (using OData syntax). For example: $filter=KeyVaultId eq &apos;KeyVaultId&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Certificate" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Certificate> GetCertificates(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<Certificate> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CertificateClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetCertificates");
                scope.Start();
                try
                {
                    var response = CertificateRestClient.List(Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Certificate(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Certificate> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CertificateClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetCertificates");
                scope.Start();
                try
                {
                    var response = CertificateRestClient.ListNextPage(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Certificate(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/deletedSites
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: DeletedWebApps_ListByLocation
        /// <summary> Description for Get all deleted apps for a subscription at location. </summary>
        /// <param name="location"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DeletedSite" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DeletedSite> GetDeletedSitesByLocationAsync(string location, CancellationToken cancellationToken = default)
        {
            async Task<Page<DeletedSite>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DeletedSiteDeletedWebAppsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDeletedSitesByLocation");
                scope.Start();
                try
                {
                    var response = await DeletedSiteDeletedWebAppsRestClient.ListByLocationAsync(Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DeletedSite(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeletedSite>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DeletedSiteDeletedWebAppsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDeletedSitesByLocation");
                scope.Start();
                try
                {
                    var response = await DeletedSiteDeletedWebAppsRestClient.ListByLocationNextPageAsync(nextLink, Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DeletedSite(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/deletedSites
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: DeletedWebApps_ListByLocation
        /// <summary> Description for Get all deleted apps for a subscription at location. </summary>
        /// <param name="location"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DeletedSite" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DeletedSite> GetDeletedSitesByLocation(string location, CancellationToken cancellationToken = default)
        {
            Page<DeletedSite> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DeletedSiteDeletedWebAppsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDeletedSitesByLocation");
                scope.Start();
                try
                {
                    var response = DeletedSiteDeletedWebAppsRestClient.ListByLocation(Id.SubscriptionId, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DeletedSite(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeletedSite> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DeletedSiteDeletedWebAppsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDeletedSitesByLocation");
                scope.Start();
                try
                {
                    var response = DeletedSiteDeletedWebAppsRestClient.ListByLocationNextPage(nextLink, Id.SubscriptionId, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DeletedSite(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/deletedSites/{deletedSiteId}
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: DeletedWebApps_GetDeletedWebAppByLocation
        /// <summary> Description for Get deleted app for a subscription at location. </summary>
        /// <param name="location"> The String to use. </param>
        /// <param name="deletedSiteId"> The numeric ID of the deleted app, e.g. 12345. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<DeletedSite>> GetDeletedWebAppByLocationDeletedWebAppAsync(string location, string deletedSiteId, CancellationToken cancellationToken = default)
        {
            using var scope = DeletedSiteDeletedWebAppsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDeletedWebAppByLocationDeletedWebApp");
            scope.Start();
            try
            {
                var response = await DeletedSiteDeletedWebAppsRestClient.GetDeletedWebAppByLocationAsync(Id.SubscriptionId, location, deletedSiteId, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new DeletedSite(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/deletedSites/{deletedSiteId}
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: DeletedWebApps_GetDeletedWebAppByLocation
        /// <summary> Description for Get deleted app for a subscription at location. </summary>
        /// <param name="location"> The String to use. </param>
        /// <param name="deletedSiteId"> The numeric ID of the deleted app, e.g. 12345. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeletedSite> GetDeletedWebAppByLocationDeletedWebApp(string location, string deletedSiteId, CancellationToken cancellationToken = default)
        {
            using var scope = DeletedSiteDeletedWebAppsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetDeletedWebAppByLocationDeletedWebApp");
            scope.Start();
            try
            {
                var response = DeletedSiteDeletedWebAppsRestClient.GetDeletedWebAppByLocation(Id.SubscriptionId, location, deletedSiteId, cancellationToken);
                return Response.FromValue(new DeletedSite(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/operations/{operationId}
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Global_GetSubscriptionOperationWithAsyncResponse
        /// <summary> Description for Gets an operation in a subscription and given region. </summary>
        /// <param name="location"> Location name. </param>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> GetSubscriptionOperationWithAsyncResponseGlobalAsync(string location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = DeletedSiteGlobalClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetSubscriptionOperationWithAsyncResponseGlobal");
            scope.Start();
            try
            {
                var response = await DeletedSiteGlobalRestClient.GetSubscriptionOperationWithAsyncResponseAsync(Id.SubscriptionId, location, operationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/operations/{operationId}
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Global_GetSubscriptionOperationWithAsyncResponse
        /// <summary> Description for Gets an operation in a subscription and given region. </summary>
        /// <param name="location"> Location name. </param>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetSubscriptionOperationWithAsyncResponseGlobal(string location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = DeletedSiteGlobalClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetSubscriptionOperationWithAsyncResponseGlobal");
            scope.Start();
            try
            {
                var response = DeletedSiteGlobalRestClient.GetSubscriptionOperationWithAsyncResponse(Id.SubscriptionId, location, operationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/kubeEnvironments
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: KubeEnvironments_ListBySubscription
        /// <summary> Description for Get all Kubernetes Environments for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="KubeEnvironment" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<KubeEnvironment> GetKubeEnvironmentsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<KubeEnvironment>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = KubeEnvironmentClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetKubeEnvironments");
                scope.Start();
                try
                {
                    var response = await KubeEnvironmentRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new KubeEnvironment(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<KubeEnvironment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = KubeEnvironmentClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetKubeEnvironments");
                scope.Start();
                try
                {
                    var response = await KubeEnvironmentRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new KubeEnvironment(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/kubeEnvironments
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: KubeEnvironments_ListBySubscription
        /// <summary> Description for Get all Kubernetes Environments for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="KubeEnvironment" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<KubeEnvironment> GetKubeEnvironments(CancellationToken cancellationToken = default)
        {
            Page<KubeEnvironment> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = KubeEnvironmentClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetKubeEnvironments");
                scope.Start();
                try
                {
                    var response = KubeEnvironmentRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new KubeEnvironment(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<KubeEnvironment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = KubeEnvironmentClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetKubeEnvironments");
                scope.Start();
                try
                {
                    var response = KubeEnvironmentRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new KubeEnvironment(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/availableStacks
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Provider_GetAvailableStacksOnPrem
        /// <summary> Description for Get available application frameworks and their versions. </summary>
        /// <param name="osTypeSelected"> The ProviderOsTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApplicationStackResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApplicationStackResource> GetAvailableStacksOnPremProvidersAsync(ProviderOsTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ApplicationStackResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAvailableStacksOnPremProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetAvailableStacksOnPremAsync(Id.SubscriptionId, osTypeSelected, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ApplicationStackResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAvailableStacksOnPremProviders");
                scope.Start();
                try
                {
                    var response = await ProviderRestClient.GetAvailableStacksOnPremNextPageAsync(nextLink, Id.SubscriptionId, osTypeSelected, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/availableStacks
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Provider_GetAvailableStacksOnPrem
        /// <summary> Description for Get available application frameworks and their versions. </summary>
        /// <param name="osTypeSelected"> The ProviderOsTypeSelected to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApplicationStackResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApplicationStackResource> GetAvailableStacksOnPremProviders(ProviderOsTypeSelected? osTypeSelected = null, CancellationToken cancellationToken = default)
        {
            Page<ApplicationStackResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAvailableStacksOnPremProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetAvailableStacksOnPrem(Id.SubscriptionId, osTypeSelected, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ApplicationStackResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProviderClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAvailableStacksOnPremProviders");
                scope.Start();
                try
                {
                    var response = ProviderRestClient.GetAvailableStacksOnPremNextPage(nextLink, Id.SubscriptionId, osTypeSelected, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Recommendations_List
        /// <summary> Description for List all recommendations for a subscription. </summary>
        /// <param name="featured"> Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. </param>
        /// <param name="filter"> Filter is specified by using OData syntax. Example: $filter=channel eq &apos;Api&apos; or channel eq &apos;Notification&apos; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&apos;[PT1H|PT1M|P1D]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AppServiceRecommendation" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AppServiceRecommendation> GetRecommendationsAsync(bool? featured = null, string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AppServiceRecommendation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = RecommendationsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetRecommendations");
                scope.Start();
                try
                {
                    var response = await RecommendationsRestClient.ListAsync(Id.SubscriptionId, featured, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AppServiceRecommendation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = RecommendationsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetRecommendations");
                scope.Start();
                try
                {
                    var response = await RecommendationsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, featured, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Recommendations_List
        /// <summary> Description for List all recommendations for a subscription. </summary>
        /// <param name="featured"> Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. </param>
        /// <param name="filter"> Filter is specified by using OData syntax. Example: $filter=channel eq &apos;Api&apos; or channel eq &apos;Notification&apos; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&apos;[PT1H|PT1M|P1D]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AppServiceRecommendation" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AppServiceRecommendation> GetRecommendations(bool? featured = null, string filter = null, CancellationToken cancellationToken = default)
        {
            Page<AppServiceRecommendation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = RecommendationsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetRecommendations");
                scope.Start();
                try
                {
                    var response = RecommendationsRestClient.List(Id.SubscriptionId, featured, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AppServiceRecommendation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = RecommendationsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetRecommendations");
                scope.Start();
                try
                {
                    var response = RecommendationsRestClient.ListNextPage(nextLink, Id.SubscriptionId, featured, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Recommendations_ResetAllFilters
        /// <summary> Description for Reset all recommendation opt-out settings for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> ResetAllFiltersRecommendationAsync(CancellationToken cancellationToken = default)
        {
            using var scope = RecommendationsClientDiagnostics.CreateScope("SubscriptionExtensionClient.ResetAllFiltersRecommendation");
            scope.Start();
            try
            {
                var response = await RecommendationsRestClient.ResetAllFiltersAsync(Id.SubscriptionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Recommendations_ResetAllFilters
        /// <summary> Description for Reset all recommendation opt-out settings for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ResetAllFiltersRecommendation(CancellationToken cancellationToken = default)
        {
            using var scope = RecommendationsClientDiagnostics.CreateScope("SubscriptionExtensionClient.ResetAllFiltersRecommendation");
            scope.Start();
            try
            {
                var response = RecommendationsRestClient.ResetAllFilters(Id.SubscriptionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/{name}/disable
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Recommendations_DisableRecommendationForSubscription
        /// <summary> Description for Disables the specified rule so it will not apply to a subscription in the future. </summary>
        /// <param name="name"> Rule name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> DisableRecommendationForSubscriptionRecommendationAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = RecommendationsClientDiagnostics.CreateScope("SubscriptionExtensionClient.DisableRecommendationForSubscriptionRecommendation");
            scope.Start();
            try
            {
                var response = await RecommendationsRestClient.DisableRecommendationForSubscriptionAsync(Id.SubscriptionId, name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/{name}/disable
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: Recommendations_DisableRecommendationForSubscription
        /// <summary> Description for Disables the specified rule so it will not apply to a subscription in the future. </summary>
        /// <param name="name"> Rule name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DisableRecommendationForSubscriptionRecommendation(string name, CancellationToken cancellationToken = default)
        {
            using var scope = RecommendationsClientDiagnostics.CreateScope("SubscriptionExtensionClient.DisableRecommendationForSubscriptionRecommendation");
            scope.Start();
            try
            {
                var response = RecommendationsRestClient.DisableRecommendationForSubscription(Id.SubscriptionId, name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/resourceHealthMetadata
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ResourceHealthMetadata_List
        /// <summary> Description for List all ResourceHealthMetadata for all sites in the subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SiteResourceHealthMetadata" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SiteResourceHealthMetadata> GetAllResourceHealthMetadataAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SiteResourceHealthMetadata>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ResourceHealthMetadataClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAllResourceHealthMetadata");
                scope.Start();
                try
                {
                    var response = await ResourceHealthMetadataRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteResourceHealthMetadata(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SiteResourceHealthMetadata>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ResourceHealthMetadataClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAllResourceHealthMetadata");
                scope.Start();
                try
                {
                    var response = await ResourceHealthMetadataRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteResourceHealthMetadata(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/resourceHealthMetadata
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ResourceHealthMetadata_List
        /// <summary> Description for List all ResourceHealthMetadata for all sites in the subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SiteResourceHealthMetadata" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SiteResourceHealthMetadata> GetAllResourceHealthMetadata(CancellationToken cancellationToken = default)
        {
            Page<SiteResourceHealthMetadata> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ResourceHealthMetadataClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAllResourceHealthMetadata");
                scope.Start();
                try
                {
                    var response = ResourceHealthMetadataRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteResourceHealthMetadata(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SiteResourceHealthMetadata> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ResourceHealthMetadataClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetAllResourceHealthMetadata");
                scope.Start();
                try
                {
                    var response = ResourceHealthMetadataRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteResourceHealthMetadata(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/billingMeters
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ListBillingMeters
        /// <summary> Description for Gets a list of meters for a given location. </summary>
        /// <param name="billingLocation"> Azure Location of billable resource. </param>
        /// <param name="osType"> App Service OS type meters used for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BillingMeter" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BillingMeter> GetBillingMetersAsync(string billingLocation = null, string osType = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<BillingMeter>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetBillingMeters");
                scope.Start();
                try
                {
                    var response = await DefaultRestClient.ListBillingMetersAsync(Id.SubscriptionId, billingLocation, osType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<BillingMeter>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetBillingMeters");
                scope.Start();
                try
                {
                    var response = await DefaultRestClient.ListBillingMetersNextPageAsync(nextLink, Id.SubscriptionId, billingLocation, osType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/billingMeters
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ListBillingMeters
        /// <summary> Description for Gets a list of meters for a given location. </summary>
        /// <param name="billingLocation"> Azure Location of billable resource. </param>
        /// <param name="osType"> App Service OS type meters used for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BillingMeter" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BillingMeter> GetBillingMeters(string billingLocation = null, string osType = null, CancellationToken cancellationToken = default)
        {
            Page<BillingMeter> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetBillingMeters");
                scope.Start();
                try
                {
                    var response = DefaultRestClient.ListBillingMeters(Id.SubscriptionId, billingLocation, osType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<BillingMeter> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetBillingMeters");
                scope.Start();
                try
                {
                    var response = DefaultRestClient.ListBillingMetersNextPage(nextLink, Id.SubscriptionId, billingLocation, osType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: CheckNameAvailability
        /// <summary> Description for Check if a resource name is available. </summary>
        /// <param name="name"> Resource name to verify. </param>
        /// <param name="type"> Resource type used for verification. </param>
        /// <param name="isFqdn"> Is fully qualified domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<ResourceNameAvailability>> CheckAppServiceNameAvailabilityAsync(string name, CheckNameResourceTypes type, bool? isFqdn = null, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.CheckAppServiceNameAvailability");
            scope.Start();
            try
            {
                var response = await DefaultRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, name, type, isFqdn, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: CheckNameAvailability
        /// <summary> Description for Check if a resource name is available. </summary>
        /// <param name="name"> Resource name to verify. </param>
        /// <param name="type"> Resource type used for verification. </param>
        /// <param name="isFqdn"> Is fully qualified domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ResourceNameAvailability> CheckAppServiceNameAvailability(string name, CheckNameResourceTypes type, bool? isFqdn = null, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.CheckAppServiceNameAvailability");
            scope.Start();
            try
            {
                var response = DefaultRestClient.CheckNameAvailability(Id.SubscriptionId, name, type, isFqdn, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/deploymentLocations
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: GetSubscriptionDeploymentLocations
        /// <summary> Description for Gets list of available geo regions plus ministamps. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<DeploymentLocations>> GetSubscriptionDeploymentLocationsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetSubscriptionDeploymentLocations");
            scope.Start();
            try
            {
                var response = await DefaultRestClient.GetSubscriptionDeploymentLocationsAsync(Id.SubscriptionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/deploymentLocations
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: GetSubscriptionDeploymentLocations
        /// <summary> Description for Gets list of available geo regions plus ministamps. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeploymentLocations> GetSubscriptionDeploymentLocations(CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetSubscriptionDeploymentLocations");
            scope.Start();
            try
            {
                var response = DefaultRestClient.GetSubscriptionDeploymentLocations(Id.SubscriptionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ListGeoRegions
        /// <summary> Description for Get a list of available geographical regions. </summary>
        /// <param name="sku"> Name of SKU used to filter the regions. </param>
        /// <param name="linuxWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Linux workers. </param>
        /// <param name="xenonWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Xenon workers. </param>
        /// <param name="linuxDynamicWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Linux Consumption Workers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="GeoRegion" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<GeoRegion> GetGeoRegionsAsync(SkuName? sku = null, bool? linuxWorkersEnabled = null, bool? xenonWorkersEnabled = null, bool? linuxDynamicWorkersEnabled = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<GeoRegion>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetGeoRegions");
                scope.Start();
                try
                {
                    var response = await DefaultRestClient.ListGeoRegionsAsync(Id.SubscriptionId, sku, linuxWorkersEnabled, xenonWorkersEnabled, linuxDynamicWorkersEnabled, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<GeoRegion>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetGeoRegions");
                scope.Start();
                try
                {
                    var response = await DefaultRestClient.ListGeoRegionsNextPageAsync(nextLink, Id.SubscriptionId, sku, linuxWorkersEnabled, xenonWorkersEnabled, linuxDynamicWorkersEnabled, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ListGeoRegions
        /// <summary> Description for Get a list of available geographical regions. </summary>
        /// <param name="sku"> Name of SKU used to filter the regions. </param>
        /// <param name="linuxWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Linux workers. </param>
        /// <param name="xenonWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Xenon workers. </param>
        /// <param name="linuxDynamicWorkersEnabled"> Specify &lt;code&gt;true&lt;/code&gt; if you want to filter to only regions that support Linux Consumption Workers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="GeoRegion" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<GeoRegion> GetGeoRegions(SkuName? sku = null, bool? linuxWorkersEnabled = null, bool? xenonWorkersEnabled = null, bool? linuxDynamicWorkersEnabled = null, CancellationToken cancellationToken = default)
        {
            Page<GeoRegion> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetGeoRegions");
                scope.Start();
                try
                {
                    var response = DefaultRestClient.ListGeoRegions(Id.SubscriptionId, sku, linuxWorkersEnabled, xenonWorkersEnabled, linuxDynamicWorkersEnabled, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<GeoRegion> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetGeoRegions");
                scope.Start();
                try
                {
                    var response = DefaultRestClient.ListGeoRegionsNextPage(nextLink, Id.SubscriptionId, sku, linuxWorkersEnabled, xenonWorkersEnabled, linuxDynamicWorkersEnabled, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/listSitesAssignedToHostName
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ListSiteIdentifiersAssignedToHostName
        /// <summary> Description for List all apps that are assigned to a hostname. </summary>
        /// <param name="nameIdentifier"> Hostname information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SiteDomainOwnershipIdentifier" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SiteDomainOwnershipIdentifier> GetSiteIdentifiersAssignedToHostNameAsync(NameIdentifier nameIdentifier, CancellationToken cancellationToken = default)
        {
            async Task<Page<SiteDomainOwnershipIdentifier>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetSiteIdentifiersAssignedToHostName");
                scope.Start();
                try
                {
                    var response = await DefaultRestClient.ListSiteIdentifiersAssignedToHostNameAsync(Id.SubscriptionId, nameIdentifier, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteDomainOwnershipIdentifier(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SiteDomainOwnershipIdentifier>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetSiteIdentifiersAssignedToHostName");
                scope.Start();
                try
                {
                    var response = await DefaultRestClient.ListSiteIdentifiersAssignedToHostNameNextPageAsync(nextLink, Id.SubscriptionId, nameIdentifier, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteDomainOwnershipIdentifier(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/listSitesAssignedToHostName
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ListSiteIdentifiersAssignedToHostName
        /// <summary> Description for List all apps that are assigned to a hostname. </summary>
        /// <param name="nameIdentifier"> Hostname information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SiteDomainOwnershipIdentifier" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SiteDomainOwnershipIdentifier> GetSiteIdentifiersAssignedToHostName(NameIdentifier nameIdentifier, CancellationToken cancellationToken = default)
        {
            Page<SiteDomainOwnershipIdentifier> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetSiteIdentifiersAssignedToHostName");
                scope.Start();
                try
                {
                    var response = DefaultRestClient.ListSiteIdentifiersAssignedToHostName(Id.SubscriptionId, nameIdentifier, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteDomainOwnershipIdentifier(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SiteDomainOwnershipIdentifier> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetSiteIdentifiersAssignedToHostName");
                scope.Start();
                try
                {
                    var response = DefaultRestClient.ListSiteIdentifiersAssignedToHostNameNextPage(nextLink, Id.SubscriptionId, nameIdentifier, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteDomainOwnershipIdentifier(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ListPremierAddOnOffers
        /// <summary> Description for List all premier add-on offers. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PremierAddOnOffer" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PremierAddOnOffer> GetPremierAddOnOffersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PremierAddOnOffer>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetPremierAddOnOffers");
                scope.Start();
                try
                {
                    var response = await DefaultRestClient.ListPremierAddOnOffersAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PremierAddOnOffer>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetPremierAddOnOffers");
                scope.Start();
                try
                {
                    var response = await DefaultRestClient.ListPremierAddOnOffersNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ListPremierAddOnOffers
        /// <summary> Description for List all premier add-on offers. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PremierAddOnOffer" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PremierAddOnOffer> GetPremierAddOnOffers(CancellationToken cancellationToken = default)
        {
            Page<PremierAddOnOffer> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetPremierAddOnOffers");
                scope.Start();
                try
                {
                    var response = DefaultRestClient.ListPremierAddOnOffers(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PremierAddOnOffer> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetPremierAddOnOffers");
                scope.Start();
                try
                {
                    var response = DefaultRestClient.ListPremierAddOnOffersNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/skus
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ListSkus
        /// <summary> Description for List all SKUs. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SkuInfos>> GetSkusAsync(CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetSkus");
            scope.Start();
            try
            {
                var response = await DefaultRestClient.ListSkusAsync(Id.SubscriptionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/skus
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: ListSkus
        /// <summary> Description for List all SKUs. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SkuInfos> GetSkus(CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetSkus");
            scope.Start();
            try
            {
                var response = DefaultRestClient.ListSkus(Id.SubscriptionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/verifyHostingEnvironmentVnet
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: VerifyHostingEnvironmentVnet
        /// <summary> Description for Verifies if this VNET is compatible with an App Service Environment by analyzing the Network Security Group rules. </summary>
        /// <param name="parameters"> VNET information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<VnetValidationFailureDetails>> VerifyHostingEnvironmentVnetAsync(VnetParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.VerifyHostingEnvironmentVnet");
            scope.Start();
            try
            {
                var response = await DefaultRestClient.VerifyHostingEnvironmentVnetAsync(Id.SubscriptionId, parameters, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/verifyHostingEnvironmentVnet
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: VerifyHostingEnvironmentVnet
        /// <summary> Description for Verifies if this VNET is compatible with an App Service Environment by analyzing the Network Security Group rules. </summary>
        /// <param name="parameters"> VNET information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<VnetValidationFailureDetails> VerifyHostingEnvironmentVnet(VnetParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionExtensionClient.VerifyHostingEnvironmentVnet");
            scope.Start();
            try
            {
                var response = DefaultRestClient.VerifyHostingEnvironmentVnet(Id.SubscriptionId, parameters, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/previewStaticSiteWorkflowFile
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: StaticSites_PreviewWorkflow
        /// <summary> Description for Generates a preview workflow file for the static site. </summary>
        /// <param name="location"> Location where you plan to create the static site. </param>
        /// <param name="staticSitesWorkflowPreviewRequest"> A JSON representation of the StaticSitesWorkflowPreviewRequest properties. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<StaticSitesWorkflowPreview>> PreviewWorkflowStaticSiteAsync(string location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest, CancellationToken cancellationToken = default)
        {
            using var scope = StaticSitesClientDiagnostics.CreateScope("SubscriptionExtensionClient.PreviewWorkflowStaticSite");
            scope.Start();
            try
            {
                var response = await StaticSitesRestClient.PreviewWorkflowAsync(Id.SubscriptionId, location, staticSitesWorkflowPreviewRequest, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/previewStaticSiteWorkflowFile
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: StaticSites_PreviewWorkflow
        /// <summary> Description for Generates a preview workflow file for the static site. </summary>
        /// <param name="location"> Location where you plan to create the static site. </param>
        /// <param name="staticSitesWorkflowPreviewRequest"> A JSON representation of the StaticSitesWorkflowPreviewRequest properties. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<StaticSitesWorkflowPreview> PreviewWorkflowStaticSite(string location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest, CancellationToken cancellationToken = default)
        {
            using var scope = StaticSitesClientDiagnostics.CreateScope("SubscriptionExtensionClient.PreviewWorkflowStaticSite");
            scope.Start();
            try
            {
                var response = StaticSitesRestClient.PreviewWorkflow(Id.SubscriptionId, location, staticSitesWorkflowPreviewRequest, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/staticSites
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: StaticSites_List
        /// <summary> Description for Get all Static Sites for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="StaticSiteARMResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<StaticSiteARMResource> GetStaticSiteARMResourcesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<StaticSiteARMResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = StaticSiteARMResourceStaticSitesClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetStaticSiteARMResources");
                scope.Start();
                try
                {
                    var response = await StaticSiteARMResourceStaticSitesRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new StaticSiteARMResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<StaticSiteARMResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = StaticSiteARMResourceStaticSitesClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetStaticSiteARMResources");
                scope.Start();
                try
                {
                    var response = await StaticSiteARMResourceStaticSitesRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new StaticSiteARMResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/staticSites
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: StaticSites_List
        /// <summary> Description for Get all Static Sites for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="StaticSiteARMResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<StaticSiteARMResource> GetStaticSiteARMResources(CancellationToken cancellationToken = default)
        {
            Page<StaticSiteARMResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = StaticSiteARMResourceStaticSitesClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetStaticSiteARMResources");
                scope.Start();
                try
                {
                    var response = StaticSiteARMResourceStaticSitesRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new StaticSiteARMResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<StaticSiteARMResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = StaticSiteARMResourceStaticSitesClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetStaticSiteARMResources");
                scope.Start();
                try
                {
                    var response = StaticSiteARMResourceStaticSitesRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new StaticSiteARMResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/sites
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: WebApps_List
        /// <summary> Description for Get all apps for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WebSite" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WebSite> GetWebSitesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WebSite>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = WebSiteWebAppsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetWebSites");
                scope.Start();
                try
                {
                    var response = await WebSiteWebAppsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WebSite(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WebSite>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = WebSiteWebAppsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetWebSites");
                scope.Start();
                try
                {
                    var response = await WebSiteWebAppsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WebSite(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.Web/sites
        /// ContextualPath: /subscriptions/{subscriptionId}
        /// OperationId: WebApps_List
        /// <summary> Description for Get all apps for a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WebSite" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WebSite> GetWebSites(CancellationToken cancellationToken = default)
        {
            Page<WebSite> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = WebSiteWebAppsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetWebSites");
                scope.Start();
                try
                {
                    var response = WebSiteWebAppsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WebSite(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WebSite> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = WebSiteWebAppsClientDiagnostics.CreateScope("SubscriptionExtensionClient.GetWebSites");
                scope.Start();
                try
                {
                    var response = WebSiteWebAppsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WebSite(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
