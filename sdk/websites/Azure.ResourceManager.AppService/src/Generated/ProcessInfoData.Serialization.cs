// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService
{
    public partial class ProcessInfoData : IUtf8JsonSerializable, IJsonModel<ProcessInfoData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ProcessInfoData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ProcessInfoData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProcessInfoData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProcessInfoData)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(Identifier))
            {
                writer.WritePropertyName("identifier"u8);
                writer.WriteNumberValue(Identifier.Value);
            }
            if (Optional.IsDefined(DeploymentName))
            {
                writer.WritePropertyName("deployment_name"u8);
                writer.WriteStringValue(DeploymentName);
            }
            if (Optional.IsDefined(Href))
            {
                writer.WritePropertyName("href"u8);
                writer.WriteStringValue(Href);
            }
            if (Optional.IsDefined(Minidump))
            {
                writer.WritePropertyName("minidump"u8);
                writer.WriteStringValue(Minidump);
            }
            if (Optional.IsDefined(IsProfileRunning))
            {
                writer.WritePropertyName("is_profile_running"u8);
                writer.WriteBooleanValue(IsProfileRunning.Value);
            }
            if (Optional.IsDefined(IsIisProfileRunning))
            {
                writer.WritePropertyName("is_iis_profile_running"u8);
                writer.WriteBooleanValue(IsIisProfileRunning.Value);
            }
            if (Optional.IsDefined(IisProfileTimeoutInSeconds))
            {
                writer.WritePropertyName("iis_profile_timeout_in_seconds"u8);
                writer.WriteNumberValue(IisProfileTimeoutInSeconds.Value);
            }
            if (Optional.IsDefined(Parent))
            {
                writer.WritePropertyName("parent"u8);
                writer.WriteStringValue(Parent);
            }
            if (Optional.IsCollectionDefined(Children))
            {
                writer.WritePropertyName("children"u8);
                writer.WriteStartArray();
                foreach (var item in Children)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Threads))
            {
                writer.WritePropertyName("threads"u8);
                writer.WriteStartArray();
                foreach (var item in Threads)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(OpenFileHandles))
            {
                writer.WritePropertyName("open_file_handles"u8);
                writer.WriteStartArray();
                foreach (var item in OpenFileHandles)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Modules))
            {
                writer.WritePropertyName("modules"u8);
                writer.WriteStartArray();
                foreach (var item in Modules)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(FileName))
            {
                writer.WritePropertyName("file_name"u8);
                writer.WriteStringValue(FileName);
            }
            if (Optional.IsDefined(CommandLine))
            {
                writer.WritePropertyName("command_line"u8);
                writer.WriteStringValue(CommandLine);
            }
            if (Optional.IsDefined(UserName))
            {
                writer.WritePropertyName("user_name"u8);
                writer.WriteStringValue(UserName);
            }
            if (Optional.IsDefined(HandleCount))
            {
                writer.WritePropertyName("handle_count"u8);
                writer.WriteNumberValue(HandleCount.Value);
            }
            if (Optional.IsDefined(ModuleCount))
            {
                writer.WritePropertyName("module_count"u8);
                writer.WriteNumberValue(ModuleCount.Value);
            }
            if (Optional.IsDefined(ThreadCount))
            {
                writer.WritePropertyName("thread_count"u8);
                writer.WriteNumberValue(ThreadCount.Value);
            }
            if (Optional.IsDefined(StartOn))
            {
                writer.WritePropertyName("start_time"u8);
                writer.WriteStringValue(StartOn.Value, "O");
            }
            if (Optional.IsDefined(TotalCpuTime))
            {
                writer.WritePropertyName("total_cpu_time"u8);
                writer.WriteStringValue(TotalCpuTime);
            }
            if (Optional.IsDefined(UserCpuTime))
            {
                writer.WritePropertyName("user_cpu_time"u8);
                writer.WriteStringValue(UserCpuTime);
            }
            if (Optional.IsDefined(PrivilegedCpuTime))
            {
                writer.WritePropertyName("privileged_cpu_time"u8);
                writer.WriteStringValue(PrivilegedCpuTime);
            }
            if (Optional.IsDefined(WorkingSet))
            {
                writer.WritePropertyName("working_set"u8);
                writer.WriteNumberValue(WorkingSet.Value);
            }
            if (Optional.IsDefined(PeakWorkingSet))
            {
                writer.WritePropertyName("peak_working_set"u8);
                writer.WriteNumberValue(PeakWorkingSet.Value);
            }
            if (Optional.IsDefined(PrivateMemory))
            {
                writer.WritePropertyName("private_memory"u8);
                writer.WriteNumberValue(PrivateMemory.Value);
            }
            if (Optional.IsDefined(VirtualMemory))
            {
                writer.WritePropertyName("virtual_memory"u8);
                writer.WriteNumberValue(VirtualMemory.Value);
            }
            if (Optional.IsDefined(PeakVirtualMemory))
            {
                writer.WritePropertyName("peak_virtual_memory"u8);
                writer.WriteNumberValue(PeakVirtualMemory.Value);
            }
            if (Optional.IsDefined(PagedSystemMemory))
            {
                writer.WritePropertyName("paged_system_memory"u8);
                writer.WriteNumberValue(PagedSystemMemory.Value);
            }
            if (Optional.IsDefined(NonPagedSystemMemory))
            {
                writer.WritePropertyName("non_paged_system_memory"u8);
                writer.WriteNumberValue(NonPagedSystemMemory.Value);
            }
            if (Optional.IsDefined(PagedMemory))
            {
                writer.WritePropertyName("paged_memory"u8);
                writer.WriteNumberValue(PagedMemory.Value);
            }
            if (Optional.IsDefined(PeakPagedMemory))
            {
                writer.WritePropertyName("peak_paged_memory"u8);
                writer.WriteNumberValue(PeakPagedMemory.Value);
            }
            if (Optional.IsDefined(TimeStamp))
            {
                writer.WritePropertyName("time_stamp"u8);
                writer.WriteStringValue(TimeStamp.Value, "O");
            }
            if (Optional.IsCollectionDefined(EnvironmentVariables))
            {
                writer.WritePropertyName("environment_variables"u8);
                writer.WriteStartObject();
                foreach (var item in EnvironmentVariables)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(IsScmSite))
            {
                writer.WritePropertyName("is_scm_site"u8);
                writer.WriteBooleanValue(IsScmSite.Value);
            }
            if (Optional.IsDefined(IsWebjob))
            {
                writer.WritePropertyName("is_webjob"u8);
                writer.WriteBooleanValue(IsWebjob.Value);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ProcessInfoData IJsonModel<ProcessInfoData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProcessInfoData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProcessInfoData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeProcessInfoData(document.RootElement, options);
        }

        internal static ProcessInfoData DeserializeProcessInfoData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            int? identifier = default;
            string deploymentName = default;
            string href = default;
            string minidump = default;
            bool? isProfileRunning = default;
            bool? isIisProfileRunning = default;
            double? iisProfileTimeoutInSeconds = default;
            string parent = default;
            IList<string> children = default;
            IList<ProcessThreadInfo> threads = default;
            IList<string> openFileHandles = default;
            IList<ProcessModuleInfoData> modules = default;
            string fileName = default;
            string commandLine = default;
            string userName = default;
            int? handleCount = default;
            int? moduleCount = default;
            int? threadCount = default;
            DateTimeOffset? startTime = default;
            string totalCpuTime = default;
            string userCpuTime = default;
            string privilegedCpuTime = default;
            long? workingSet = default;
            long? peakWorkingSet = default;
            long? privateMemory = default;
            long? virtualMemory = default;
            long? peakVirtualMemory = default;
            long? pagedSystemMemory = default;
            long? nonPagedSystemMemory = default;
            long? pagedMemory = default;
            long? peakPagedMemory = default;
            DateTimeOffset? timeStamp = default;
            IDictionary<string, string> environmentVariables = default;
            bool? isScmSite = default;
            bool? isWebjob = default;
            string description = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("identifier"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            identifier = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("deployment_name"u8))
                        {
                            deploymentName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("href"u8))
                        {
                            href = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("minidump"u8))
                        {
                            minidump = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("is_profile_running"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isProfileRunning = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("is_iis_profile_running"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isIisProfileRunning = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("iis_profile_timeout_in_seconds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            iisProfileTimeoutInSeconds = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("parent"u8))
                        {
                            parent = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("children"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            children = array;
                            continue;
                        }
                        if (property0.NameEquals("threads"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ProcessThreadInfo> array = new List<ProcessThreadInfo>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ProcessThreadInfo.DeserializeProcessThreadInfo(item, options));
                            }
                            threads = array;
                            continue;
                        }
                        if (property0.NameEquals("open_file_handles"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            openFileHandles = array;
                            continue;
                        }
                        if (property0.NameEquals("modules"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ProcessModuleInfoData> array = new List<ProcessModuleInfoData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ProcessModuleInfoData.DeserializeProcessModuleInfoData(item, options));
                            }
                            modules = array;
                            continue;
                        }
                        if (property0.NameEquals("file_name"u8))
                        {
                            fileName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("command_line"u8))
                        {
                            commandLine = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("user_name"u8))
                        {
                            userName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("handle_count"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            handleCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("module_count"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            moduleCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("thread_count"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            threadCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("start_time"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            startTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("total_cpu_time"u8))
                        {
                            totalCpuTime = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("user_cpu_time"u8))
                        {
                            userCpuTime = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("privileged_cpu_time"u8))
                        {
                            privilegedCpuTime = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("working_set"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            workingSet = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("peak_working_set"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            peakWorkingSet = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("private_memory"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            privateMemory = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("virtual_memory"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            virtualMemory = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("peak_virtual_memory"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            peakVirtualMemory = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("paged_system_memory"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            pagedSystemMemory = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("non_paged_system_memory"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            nonPagedSystemMemory = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("paged_memory"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            pagedMemory = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("peak_paged_memory"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            peakPagedMemory = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("time_stamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeStamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("environment_variables"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            environmentVariables = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("is_scm_site"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isScmSite = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("is_webjob"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isWebjob = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ProcessInfoData(
                id,
                name,
                type,
                systemData,
                identifier,
                deploymentName,
                href,
                minidump,
                isProfileRunning,
                isIisProfileRunning,
                iisProfileTimeoutInSeconds,
                parent,
                children ?? new ChangeTrackingList<string>(),
                threads ?? new ChangeTrackingList<ProcessThreadInfo>(),
                openFileHandles ?? new ChangeTrackingList<string>(),
                modules ?? new ChangeTrackingList<ProcessModuleInfoData>(),
                fileName,
                commandLine,
                userName,
                handleCount,
                moduleCount,
                threadCount,
                startTime,
                totalCpuTime,
                userCpuTime,
                privilegedCpuTime,
                workingSet,
                peakWorkingSet,
                privateMemory,
                virtualMemory,
                peakVirtualMemory,
                pagedSystemMemory,
                nonPagedSystemMemory,
                pagedMemory,
                peakPagedMemory,
                timeStamp,
                environmentVariables ?? new ChangeTrackingDictionary<string, string>(),
                isScmSite,
                isWebjob,
                description,
                kind,
                serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Name), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  name: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Name))
                {
                    builder.Append("  name: ");
                    if (Name.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Name}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Name}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Kind), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  kind: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Kind))
                {
                    builder.Append("  kind: ");
                    if (Kind.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Kind}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Kind}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Id), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  id: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Id))
                {
                    builder.Append("  id: ");
                    builder.AppendLine($"'{Id.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SystemData), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  systemData: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SystemData))
                {
                    builder.Append("  systemData: ");
                    builder.AppendLine($"'{SystemData.ToString()}'");
                }
            }

            builder.Append("  properties:");
            builder.AppendLine(" {");
            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Identifier), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    identifier: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Identifier))
                {
                    builder.Append("    identifier: ");
                    builder.AppendLine($"{Identifier.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DeploymentName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    deployment_name: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(DeploymentName))
                {
                    builder.Append("    deployment_name: ");
                    if (DeploymentName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{DeploymentName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{DeploymentName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Href), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    href: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Href))
                {
                    builder.Append("    href: ");
                    if (Href.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Href}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Href}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Minidump), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    minidump: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Minidump))
                {
                    builder.Append("    minidump: ");
                    if (Minidump.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Minidump}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Minidump}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsProfileRunning), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    is_profile_running: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(IsProfileRunning))
                {
                    builder.Append("    is_profile_running: ");
                    var boolValue = IsProfileRunning.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsIisProfileRunning), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    is_iis_profile_running: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(IsIisProfileRunning))
                {
                    builder.Append("    is_iis_profile_running: ");
                    var boolValue = IsIisProfileRunning.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IisProfileTimeoutInSeconds), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    iis_profile_timeout_in_seconds: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(IisProfileTimeoutInSeconds))
                {
                    builder.Append("    iis_profile_timeout_in_seconds: ");
                    builder.AppendLine($"'{IisProfileTimeoutInSeconds.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Parent), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    parent: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Parent))
                {
                    builder.Append("    parent: ");
                    if (Parent.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Parent}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Parent}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Children), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    children: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(Children))
                {
                    if (Children.Any())
                    {
                        builder.Append("    children: ");
                        builder.AppendLine("[");
                        foreach (var item in Children)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("      '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"      '{item}'");
                            }
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Threads), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    threads: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(Threads))
                {
                    if (Threads.Any())
                    {
                        builder.Append("    threads: ");
                        builder.AppendLine("[");
                        foreach (var item in Threads)
                        {
                            BicepSerializationHelpers.AppendChildObject(builder, item, options, 6, true, "    threads: ");
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(OpenFileHandles), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    open_file_handles: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(OpenFileHandles))
                {
                    if (OpenFileHandles.Any())
                    {
                        builder.Append("    open_file_handles: ");
                        builder.AppendLine("[");
                        foreach (var item in OpenFileHandles)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("      '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"      '{item}'");
                            }
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Modules), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    modules: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(Modules))
                {
                    if (Modules.Any())
                    {
                        builder.Append("    modules: ");
                        builder.AppendLine("[");
                        foreach (var item in Modules)
                        {
                            BicepSerializationHelpers.AppendChildObject(builder, item, options, 6, true, "    modules: ");
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(FileName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    file_name: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(FileName))
                {
                    builder.Append("    file_name: ");
                    if (FileName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{FileName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{FileName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(CommandLine), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    command_line: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(CommandLine))
                {
                    builder.Append("    command_line: ");
                    if (CommandLine.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{CommandLine}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{CommandLine}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(UserName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    user_name: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(UserName))
                {
                    builder.Append("    user_name: ");
                    if (UserName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{UserName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{UserName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(HandleCount), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    handle_count: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(HandleCount))
                {
                    builder.Append("    handle_count: ");
                    builder.AppendLine($"{HandleCount.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ModuleCount), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    module_count: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ModuleCount))
                {
                    builder.Append("    module_count: ");
                    builder.AppendLine($"{ModuleCount.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ThreadCount), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    thread_count: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ThreadCount))
                {
                    builder.Append("    thread_count: ");
                    builder.AppendLine($"{ThreadCount.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(StartOn), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    start_time: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(StartOn))
                {
                    builder.Append("    start_time: ");
                    var formattedDateTimeString = TypeFormatters.ToString(StartOn.Value, "o");
                    builder.AppendLine($"'{formattedDateTimeString}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TotalCpuTime), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    total_cpu_time: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(TotalCpuTime))
                {
                    builder.Append("    total_cpu_time: ");
                    if (TotalCpuTime.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{TotalCpuTime}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{TotalCpuTime}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(UserCpuTime), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    user_cpu_time: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(UserCpuTime))
                {
                    builder.Append("    user_cpu_time: ");
                    if (UserCpuTime.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{UserCpuTime}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{UserCpuTime}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PrivilegedCpuTime), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    privileged_cpu_time: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PrivilegedCpuTime))
                {
                    builder.Append("    privileged_cpu_time: ");
                    if (PrivilegedCpuTime.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{PrivilegedCpuTime}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{PrivilegedCpuTime}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(WorkingSet), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    working_set: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(WorkingSet))
                {
                    builder.Append("    working_set: ");
                    builder.AppendLine($"'{WorkingSet.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PeakWorkingSet), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    peak_working_set: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PeakWorkingSet))
                {
                    builder.Append("    peak_working_set: ");
                    builder.AppendLine($"'{PeakWorkingSet.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PrivateMemory), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    private_memory: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PrivateMemory))
                {
                    builder.Append("    private_memory: ");
                    builder.AppendLine($"'{PrivateMemory.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(VirtualMemory), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    virtual_memory: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(VirtualMemory))
                {
                    builder.Append("    virtual_memory: ");
                    builder.AppendLine($"'{VirtualMemory.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PeakVirtualMemory), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    peak_virtual_memory: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PeakVirtualMemory))
                {
                    builder.Append("    peak_virtual_memory: ");
                    builder.AppendLine($"'{PeakVirtualMemory.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PagedSystemMemory), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    paged_system_memory: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PagedSystemMemory))
                {
                    builder.Append("    paged_system_memory: ");
                    builder.AppendLine($"'{PagedSystemMemory.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(NonPagedSystemMemory), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    non_paged_system_memory: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(NonPagedSystemMemory))
                {
                    builder.Append("    non_paged_system_memory: ");
                    builder.AppendLine($"'{NonPagedSystemMemory.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PagedMemory), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    paged_memory: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PagedMemory))
                {
                    builder.Append("    paged_memory: ");
                    builder.AppendLine($"'{PagedMemory.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PeakPagedMemory), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    peak_paged_memory: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PeakPagedMemory))
                {
                    builder.Append("    peak_paged_memory: ");
                    builder.AppendLine($"'{PeakPagedMemory.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TimeStamp), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    time_stamp: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(TimeStamp))
                {
                    builder.Append("    time_stamp: ");
                    var formattedDateTimeString = TypeFormatters.ToString(TimeStamp.Value, "o");
                    builder.AppendLine($"'{formattedDateTimeString}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(EnvironmentVariables), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    environment_variables: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(EnvironmentVariables))
                {
                    if (EnvironmentVariables.Any())
                    {
                        builder.Append("    environment_variables: ");
                        builder.AppendLine("{");
                        foreach (var item in EnvironmentVariables)
                        {
                            builder.Append($"        '{item.Key}': ");
                            if (item.Value == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Value.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("'''");
                                builder.AppendLine($"{item.Value}'''");
                            }
                            else
                            {
                                builder.AppendLine($"'{item.Value}'");
                            }
                        }
                        builder.AppendLine("    }");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsScmSite), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    is_scm_site: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(IsScmSite))
                {
                    builder.Append("    is_scm_site: ");
                    var boolValue = IsScmSite.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsWebjob), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    is_webjob: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(IsWebjob))
                {
                    builder.Append("    is_webjob: ");
                    var boolValue = IsWebjob.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Description), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    description: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Description))
                {
                    builder.Append("    description: ");
                    if (Description.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Description}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Description}'");
                    }
                }
            }

            builder.AppendLine("  }");
            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        BinaryData IPersistableModel<ProcessInfoData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProcessInfoData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ProcessInfoData)} does not support writing '{options.Format}' format.");
            }
        }

        ProcessInfoData IPersistableModel<ProcessInfoData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProcessInfoData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeProcessInfoData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ProcessInfoData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ProcessInfoData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
