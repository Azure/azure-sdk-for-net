// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.AppService
{
    /// <summary> A Class representing a TopLevelDomain along with the instance operations that can be performed on it. </summary>
    public partial class TopLevelDomain : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="TopLevelDomain"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string name)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _topLevelDomainClientDiagnostics;
        private readonly TopLevelDomainsRestOperations _topLevelDomainRestClient;
        private readonly TopLevelDomainData _data;

        /// <summary> Initializes a new instance of the <see cref="TopLevelDomain"/> class for mocking. </summary>
        protected TopLevelDomain()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "TopLevelDomain"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal TopLevelDomain(ArmClient client, TopLevelDomainData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="TopLevelDomain"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TopLevelDomain(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _topLevelDomainClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AppService", ResourceType.Namespace, DiagnosticOptions);
            Client.TryGetApiVersion(ResourceType, out string topLevelDomainApiVersion);
            _topLevelDomainRestClient = new TopLevelDomainsRestOperations(_topLevelDomainClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, topLevelDomainApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.DomainRegistration/topLevelDomains";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual TopLevelDomainData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}
        /// OperationId: TopLevelDomains_Get
        /// <summary> Description for Get details of a top-level domain. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<TopLevelDomain>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _topLevelDomainClientDiagnostics.CreateScope("TopLevelDomain.Get");
            scope.Start();
            try
            {
                var response = await _topLevelDomainRestClient.GetAsync(Id.SubscriptionId, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _topLevelDomainClientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new TopLevelDomain(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}
        /// OperationId: TopLevelDomains_Get
        /// <summary> Description for Get details of a top-level domain. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TopLevelDomain> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _topLevelDomainClientDiagnostics.CreateScope("TopLevelDomain.Get");
            scope.Start();
            try
            {
                var response = _topLevelDomainRestClient.Get(Id.SubscriptionId, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _topLevelDomainClientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TopLevelDomain(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}/listAgreements
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}
        /// OperationId: TopLevelDomains_ListAgreements
        /// <summary> Description for Gets all legal agreements that user needs to accept before purchasing a domain. </summary>
        /// <param name="agreementOption"> Domain agreement options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agreementOption"/> is null. </exception>
        /// <returns> An async collection of <see cref="TldLegalAgreement" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TldLegalAgreement> GetAgreementsAsync(TopLevelDomainAgreementOption agreementOption, CancellationToken cancellationToken = default)
        {
            if (agreementOption == null)
            {
                throw new ArgumentNullException(nameof(agreementOption));
            }

            async Task<Page<TldLegalAgreement>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _topLevelDomainClientDiagnostics.CreateScope("TopLevelDomain.GetAgreements");
                scope.Start();
                try
                {
                    var response = await _topLevelDomainRestClient.ListAgreementsAsync(Id.SubscriptionId, Id.Name, agreementOption, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<TldLegalAgreement>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _topLevelDomainClientDiagnostics.CreateScope("TopLevelDomain.GetAgreements");
                scope.Start();
                try
                {
                    var response = await _topLevelDomainRestClient.ListAgreementsNextPageAsync(nextLink, Id.SubscriptionId, Id.Name, agreementOption, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}/listAgreements
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}
        /// OperationId: TopLevelDomains_ListAgreements
        /// <summary> Description for Gets all legal agreements that user needs to accept before purchasing a domain. </summary>
        /// <param name="agreementOption"> Domain agreement options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agreementOption"/> is null. </exception>
        /// <returns> A collection of <see cref="TldLegalAgreement" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TldLegalAgreement> GetAgreements(TopLevelDomainAgreementOption agreementOption, CancellationToken cancellationToken = default)
        {
            if (agreementOption == null)
            {
                throw new ArgumentNullException(nameof(agreementOption));
            }

            Page<TldLegalAgreement> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _topLevelDomainClientDiagnostics.CreateScope("TopLevelDomain.GetAgreements");
                scope.Start();
                try
                {
                    var response = _topLevelDomainRestClient.ListAgreements(Id.SubscriptionId, Id.Name, agreementOption, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<TldLegalAgreement> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _topLevelDomainClientDiagnostics.CreateScope("TopLevelDomain.GetAgreements");
                scope.Start();
                try
                {
                    var response = _topLevelDomainRestClient.ListAgreementsNextPage(nextLink, Id.SubscriptionId, Id.Name, agreementOption, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
