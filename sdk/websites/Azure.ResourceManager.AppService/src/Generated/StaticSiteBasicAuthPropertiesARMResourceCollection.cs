// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.AppService.Models;

namespace Azure.ResourceManager.AppService
{
    /// <summary>
    /// A class representing a collection of <see cref="StaticSiteBasicAuthPropertiesARMResource"/> and their operations.
    /// Each <see cref="StaticSiteBasicAuthPropertiesARMResource"/> in the collection will belong to the same instance of <see cref="StaticSiteResource"/>.
    /// To get a <see cref="StaticSiteBasicAuthPropertiesARMResourceCollection"/> instance call the GetStaticSiteBasicAuthPropertiesARMResources method from an instance of <see cref="StaticSiteResource"/>.
    /// </summary>
    public partial class StaticSiteBasicAuthPropertiesARMResourceCollection : ArmCollection, IEnumerable<StaticSiteBasicAuthPropertiesARMResource>, IAsyncEnumerable<StaticSiteBasicAuthPropertiesARMResource>
    {
        private readonly ClientDiagnostics _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics;
        private readonly StaticSitesRestOperations _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient;

        /// <summary> Initializes a new instance of the <see cref="StaticSiteBasicAuthPropertiesARMResourceCollection"/> class for mocking. </summary>
        protected StaticSiteBasicAuthPropertiesARMResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="StaticSiteBasicAuthPropertiesARMResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal StaticSiteBasicAuthPropertiesARMResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AppService", StaticSiteBasicAuthPropertiesARMResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(StaticSiteBasicAuthPropertiesARMResource.ResourceType, out string staticSiteBasicAuthPropertiesARMResourceStaticSitesApiVersion);
            _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient = new StaticSitesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, staticSiteBasicAuthPropertiesARMResourceStaticSitesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != StaticSiteResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, StaticSiteResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Description for Adds or updates basic auth for a static site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/basicAuth/{basicAuthName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticSites_CreateOrUpdateBasicAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticSiteBasicAuthPropertiesARMResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="basicAuthName"> name of the basic auth entry. </param>
        /// <param name="data"> A JSON representation of the basic auth properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<StaticSiteBasicAuthPropertiesARMResource>> CreateOrUpdateAsync(WaitUntil waitUntil, BasicAuthName basicAuthName, StaticSiteBasicAuthPropertiesARMResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics.CreateScope("StaticSiteBasicAuthPropertiesARMResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.CreateOrUpdateBasicAuthAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, basicAuthName, data, cancellationToken).ConfigureAwait(false);
                var uri = _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.CreateCreateOrUpdateBasicAuthRequestUri(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, basicAuthName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new AppServiceArmOperation<StaticSiteBasicAuthPropertiesARMResource>(Response.FromValue(new StaticSiteBasicAuthPropertiesARMResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Adds or updates basic auth for a static site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/basicAuth/{basicAuthName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticSites_CreateOrUpdateBasicAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticSiteBasicAuthPropertiesARMResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="basicAuthName"> name of the basic auth entry. </param>
        /// <param name="data"> A JSON representation of the basic auth properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<StaticSiteBasicAuthPropertiesARMResource> CreateOrUpdate(WaitUntil waitUntil, BasicAuthName basicAuthName, StaticSiteBasicAuthPropertiesARMResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics.CreateScope("StaticSiteBasicAuthPropertiesARMResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.CreateOrUpdateBasicAuth(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, basicAuthName, data, cancellationToken);
                var uri = _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.CreateCreateOrUpdateBasicAuthRequestUri(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, basicAuthName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new AppServiceArmOperation<StaticSiteBasicAuthPropertiesARMResource>(Response.FromValue(new StaticSiteBasicAuthPropertiesARMResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the basic auth properties for a static site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/basicAuth/{basicAuthName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticSites_GetBasicAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticSiteBasicAuthPropertiesARMResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="basicAuthName"> name of the basic auth entry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<StaticSiteBasicAuthPropertiesARMResource>> GetAsync(BasicAuthName basicAuthName, CancellationToken cancellationToken = default)
        {
            using var scope = _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics.CreateScope("StaticSiteBasicAuthPropertiesARMResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.GetBasicAuthAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, basicAuthName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new StaticSiteBasicAuthPropertiesARMResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the basic auth properties for a static site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/basicAuth/{basicAuthName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticSites_GetBasicAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticSiteBasicAuthPropertiesARMResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="basicAuthName"> name of the basic auth entry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<StaticSiteBasicAuthPropertiesARMResource> Get(BasicAuthName basicAuthName, CancellationToken cancellationToken = default)
        {
            using var scope = _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics.CreateScope("StaticSiteBasicAuthPropertiesARMResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.GetBasicAuth(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, basicAuthName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new StaticSiteBasicAuthPropertiesARMResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the basic auth properties for a static site as a collection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/basicAuth</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticSites_ListBasicAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticSiteBasicAuthPropertiesARMResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="StaticSiteBasicAuthPropertiesARMResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<StaticSiteBasicAuthPropertiesARMResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.CreateListBasicAuthRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.CreateListBasicAuthNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new StaticSiteBasicAuthPropertiesARMResource(Client, StaticSiteBasicAuthPropertiesARMResourceData.DeserializeStaticSiteBasicAuthPropertiesARMResourceData(e)), _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics, Pipeline, "StaticSiteBasicAuthPropertiesARMResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Description for Gets the basic auth properties for a static site as a collection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/basicAuth</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticSites_ListBasicAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticSiteBasicAuthPropertiesARMResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="StaticSiteBasicAuthPropertiesARMResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<StaticSiteBasicAuthPropertiesARMResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.CreateListBasicAuthRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.CreateListBasicAuthNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new StaticSiteBasicAuthPropertiesARMResource(Client, StaticSiteBasicAuthPropertiesARMResourceData.DeserializeStaticSiteBasicAuthPropertiesARMResourceData(e)), _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics, Pipeline, "StaticSiteBasicAuthPropertiesARMResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/basicAuth/{basicAuthName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticSites_GetBasicAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticSiteBasicAuthPropertiesARMResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="basicAuthName"> name of the basic auth entry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(BasicAuthName basicAuthName, CancellationToken cancellationToken = default)
        {
            using var scope = _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics.CreateScope("StaticSiteBasicAuthPropertiesARMResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.GetBasicAuthAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, basicAuthName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/basicAuth/{basicAuthName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticSites_GetBasicAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticSiteBasicAuthPropertiesARMResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="basicAuthName"> name of the basic auth entry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(BasicAuthName basicAuthName, CancellationToken cancellationToken = default)
        {
            using var scope = _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics.CreateScope("StaticSiteBasicAuthPropertiesARMResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.GetBasicAuth(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, basicAuthName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/basicAuth/{basicAuthName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticSites_GetBasicAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticSiteBasicAuthPropertiesARMResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="basicAuthName"> name of the basic auth entry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<NullableResponse<StaticSiteBasicAuthPropertiesARMResource>> GetIfExistsAsync(BasicAuthName basicAuthName, CancellationToken cancellationToken = default)
        {
            using var scope = _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics.CreateScope("StaticSiteBasicAuthPropertiesARMResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.GetBasicAuthAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, basicAuthName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<StaticSiteBasicAuthPropertiesARMResource>(response.GetRawResponse());
                return Response.FromValue(new StaticSiteBasicAuthPropertiesARMResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/basicAuth/{basicAuthName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticSites_GetBasicAuth</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticSiteBasicAuthPropertiesARMResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="basicAuthName"> name of the basic auth entry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NullableResponse<StaticSiteBasicAuthPropertiesARMResource> GetIfExists(BasicAuthName basicAuthName, CancellationToken cancellationToken = default)
        {
            using var scope = _staticSiteBasicAuthPropertiesARMResourceStaticSitesClientDiagnostics.CreateScope("StaticSiteBasicAuthPropertiesARMResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _staticSiteBasicAuthPropertiesARMResourceStaticSitesRestClient.GetBasicAuth(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, basicAuthName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<StaticSiteBasicAuthPropertiesARMResource>(response.GetRawResponse());
                return Response.FromValue(new StaticSiteBasicAuthPropertiesARMResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<StaticSiteBasicAuthPropertiesARMResource> IEnumerable<StaticSiteBasicAuthPropertiesARMResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<StaticSiteBasicAuthPropertiesARMResource> IAsyncEnumerable<StaticSiteBasicAuthPropertiesARMResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
