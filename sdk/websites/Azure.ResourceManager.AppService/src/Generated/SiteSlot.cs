// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.AppService
{
    /// <summary> A Class representing a SiteSlot along with the instance operations that can be performed on it. </summary>
    public partial class SiteSlot : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="SiteSlot"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string name, string slot)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _siteSlotWebAppsClientDiagnostics;
        private readonly WebAppsRestOperations _siteSlotWebAppsRestClient;
        private readonly WebSiteData _data;

        /// <summary> Initializes a new instance of the <see cref="SiteSlot"/> class for mocking. </summary>
        protected SiteSlot()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "SiteSlot"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal SiteSlot(ArmClient client, WebSiteData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="SiteSlot"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SiteSlot(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _siteSlotWebAppsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AppService", ResourceType.Namespace, DiagnosticOptions);
            TryGetApiVersion(ResourceType, out string siteSlotWebAppsApiVersion);
            _siteSlotWebAppsRestClient = new WebAppsRestOperations(_siteSlotWebAppsClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, siteSlotWebAppsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Web/sites/slots";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual WebSiteData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of SiteSlotDetectors in the SiteSlotDetector. </summary>
        /// <returns> An object representing collection of SiteSlotDetectors and their operations over a SiteSlotDetector. </returns>
        public virtual SiteSlotDetectorCollection GetSiteSlotDetectors()
        {
            return new SiteSlotDetectorCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotPrivateEndpointConnections in the SiteSlotPrivateEndpointConnection. </summary>
        /// <returns> An object representing collection of SiteSlotPrivateEndpointConnections and their operations over a SiteSlotPrivateEndpointConnection. </returns>
        public virtual SiteSlotPrivateEndpointConnectionCollection GetSiteSlotPrivateEndpointConnections()
        {
            return new SiteSlotPrivateEndpointConnectionCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotHybridConnectionNamespaceRelays in the SiteSlotHybridConnectionNamespaceRelay. </summary>
        /// <returns> An object representing collection of SiteSlotHybridConnectionNamespaceRelays and their operations over a SiteSlotHybridConnectionNamespaceRelay. </returns>
        public virtual SiteSlotHybridConnectionNamespaceRelayCollection GetSiteSlotHybridConnectionNamespaceRelays()
        {
            return new SiteSlotHybridConnectionNamespaceRelayCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotVirtualNetworkConnections in the SiteSlotVirtualNetworkConnection. </summary>
        /// <returns> An object representing collection of SiteSlotVirtualNetworkConnections and their operations over a SiteSlotVirtualNetworkConnection. </returns>
        public virtual SiteSlotVirtualNetworkConnectionCollection GetSiteSlotVirtualNetworkConnections()
        {
            return new SiteSlotVirtualNetworkConnectionCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotDiagnostics in the SiteSlotDiagnostic. </summary>
        /// <returns> An object representing collection of SiteSlotDiagnostics and their operations over a SiteSlotDiagnostic. </returns>
        public virtual SiteSlotDiagnosticCollection GetSiteSlotDiagnostics()
        {
            return new SiteSlotDiagnosticCollection(Client, Id);
        }

        /// <summary> Gets an object representing a SiteSlotResourceHealthMetadata along with the instance operations that can be performed on it in the SiteSlot. </summary>
        /// <returns> Returns a <see cref="SiteSlotResourceHealthMetadata" /> object. </returns>
        public virtual SiteSlotResourceHealthMetadata GetSiteSlotResourceHealthMetadata()
        {
            return new SiteSlotResourceHealthMetadata(Client, new ResourceIdentifier(Id.ToString() + "/resourceHealthMetadata/default"));
        }

        /// <summary> Gets a collection of SiteSlotBackups in the SiteSlotBackup. </summary>
        /// <returns> An object representing collection of SiteSlotBackups and their operations over a SiteSlotBackup. </returns>
        public virtual SiteSlotBackupCollection GetSiteSlotBackups()
        {
            return new SiteSlotBackupCollection(Client, Id);
        }

        /// <summary> Gets an object representing a FtpSiteSlotBasicPublishingCredentialsPolicy along with the instance operations that can be performed on it in the SiteSlot. </summary>
        /// <returns> Returns a <see cref="FtpSiteSlotBasicPublishingCredentialsPolicy" /> object. </returns>
        public virtual FtpSiteSlotBasicPublishingCredentialsPolicy GetFtpSiteSlotBasicPublishingCredentialsPolicy()
        {
            return new FtpSiteSlotBasicPublishingCredentialsPolicy(Client, new ResourceIdentifier(Id.ToString() + "/basicPublishingCredentialsPolicies/ftp"));
        }

        /// <summary> Gets an object representing a ScmSiteSlotBasicPublishingCredentialsPolicy along with the instance operations that can be performed on it in the SiteSlot. </summary>
        /// <returns> Returns a <see cref="ScmSiteSlotBasicPublishingCredentialsPolicy" /> object. </returns>
        public virtual ScmSiteSlotBasicPublishingCredentialsPolicy GetScmSiteSlotBasicPublishingCredentialsPolicy()
        {
            return new ScmSiteSlotBasicPublishingCredentialsPolicy(Client, new ResourceIdentifier(Id.ToString() + "/basicPublishingCredentialsPolicies/scm"));
        }

        /// <summary> Gets a collection of SiteSlotConfigAppSettings in the SiteSlotConfigAppSetting. </summary>
        /// <returns> An object representing collection of SiteSlotConfigAppSettings and their operations over a SiteSlotConfigAppSetting. </returns>
        public virtual SiteSlotConfigAppSettingCollection GetSiteSlotConfigAppSettings()
        {
            return new SiteSlotConfigAppSettingCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotConfigConnectionStrings in the SiteSlotConfigConnectionString. </summary>
        /// <returns> An object representing collection of SiteSlotConfigConnectionStrings and their operations over a SiteSlotConfigConnectionString. </returns>
        public virtual SiteSlotConfigConnectionStringCollection GetSiteSlotConfigConnectionStrings()
        {
            return new SiteSlotConfigConnectionStringCollection(Client, Id);
        }

        /// <summary> Gets an object representing a LogsSiteSlotConfig along with the instance operations that can be performed on it in the SiteSlot. </summary>
        /// <returns> Returns a <see cref="LogsSiteSlotConfig" /> object. </returns>
        public virtual LogsSiteSlotConfig GetLogsSiteSlotConfig()
        {
            return new LogsSiteSlotConfig(Client, new ResourceIdentifier(Id.ToString() + "/config/logs"));
        }

        /// <summary> Gets an object representing a WebSiteSlotConfig along with the instance operations that can be performed on it in the SiteSlot. </summary>
        /// <returns> Returns a <see cref="WebSiteSlotConfig" /> object. </returns>
        public virtual WebSiteSlotConfig GetWebSiteSlotConfig()
        {
            return new WebSiteSlotConfig(Client, new ResourceIdentifier(Id.ToString() + "/config/web"));
        }

        /// <summary> Gets a collection of SiteSlotContinuousWebJobs in the SiteSlotContinuousWebJob. </summary>
        /// <returns> An object representing collection of SiteSlotContinuousWebJobs and their operations over a SiteSlotContinuousWebJob. </returns>
        public virtual SiteSlotContinuousWebJobCollection GetSiteSlotContinuousWebJobs()
        {
            return new SiteSlotContinuousWebJobCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotDeployments in the SiteSlotDeployment. </summary>
        /// <returns> An object representing collection of SiteSlotDeployments and their operations over a SiteSlotDeployment. </returns>
        public virtual SiteSlotDeploymentCollection GetSiteSlotDeployments()
        {
            return new SiteSlotDeploymentCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotDomainOwnershipIdentifiers in the SiteSlotDomainOwnershipIdentifier. </summary>
        /// <returns> An object representing collection of SiteSlotDomainOwnershipIdentifiers and their operations over a SiteSlotDomainOwnershipIdentifier. </returns>
        public virtual SiteSlotDomainOwnershipIdentifierCollection GetSiteSlotDomainOwnershipIdentifiers()
        {
            return new SiteSlotDomainOwnershipIdentifierCollection(Client, Id);
        }

        /// <summary> Gets an object representing a SiteSlotExtension along with the instance operations that can be performed on it in the SiteSlot. </summary>
        /// <returns> Returns a <see cref="SiteSlotExtension" /> object. </returns>
        public virtual SiteSlotExtension GetSiteSlotExtension()
        {
            return new SiteSlotExtension(Client, new ResourceIdentifier(Id.ToString() + "/extensions/MSDeploy"));
        }

        /// <summary> Gets a collection of SiteSlotFunctions in the SiteSlotFunction. </summary>
        /// <returns> An object representing collection of SiteSlotFunctions and their operations over a SiteSlotFunction. </returns>
        public virtual SiteSlotFunctionCollection GetSiteSlotFunctions()
        {
            return new SiteSlotFunctionCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotHostNameBindings in the SiteSlotHostNameBinding. </summary>
        /// <returns> An object representing collection of SiteSlotHostNameBindings and their operations over a SiteSlotHostNameBinding. </returns>
        public virtual SiteSlotHostNameBindingCollection GetSiteSlotHostNameBindings()
        {
            return new SiteSlotHostNameBindingCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotHybridconnections in the SiteSlotHybridconnection. </summary>
        /// <returns> An object representing collection of SiteSlotHybridconnections and their operations over a SiteSlotHybridconnection. </returns>
        public virtual SiteSlotHybridconnectionCollection GetSiteSlotHybridconnections()
        {
            return new SiteSlotHybridconnectionCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotInstances in the SiteSlotInstance. </summary>
        /// <returns> An object representing collection of SiteSlotInstances and their operations over a SiteSlotInstance. </returns>
        public virtual SiteSlotInstanceCollection GetSiteSlotInstances()
        {
            return new SiteSlotInstanceCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotProcesses in the SiteSlotProcess. </summary>
        /// <returns> An object representing collection of SiteSlotProcesses and their operations over a SiteSlotProcess. </returns>
        public virtual SiteSlotProcessCollection GetSiteSlotProcesses()
        {
            return new SiteSlotProcessCollection(Client, Id);
        }

        /// <summary> Gets an object representing a SiteSlotNetworkConfig along with the instance operations that can be performed on it in the SiteSlot. </summary>
        /// <returns> Returns a <see cref="SiteSlotNetworkConfig" /> object. </returns>
        public virtual SiteSlotNetworkConfig GetSiteSlotNetworkConfig()
        {
            return new SiteSlotNetworkConfig(Client, new ResourceIdentifier(Id.ToString() + "/networkConfig/virtualNetwork"));
        }

        /// <summary> Gets a collection of SiteSlotPremierAddOns in the SiteSlotPremierAddOn. </summary>
        /// <returns> An object representing collection of SiteSlotPremierAddOns and their operations over a SiteSlotPremierAddOn. </returns>
        public virtual SiteSlotPremierAddOnCollection GetSiteSlotPremierAddOns()
        {
            return new SiteSlotPremierAddOnCollection(Client, Id);
        }

        /// <summary> Gets an object representing a SiteSlotPrivateAccess along with the instance operations that can be performed on it in the SiteSlot. </summary>
        /// <returns> Returns a <see cref="SiteSlotPrivateAccess" /> object. </returns>
        public virtual SiteSlotPrivateAccess GetSiteSlotPrivateAccess()
        {
            return new SiteSlotPrivateAccess(Client, new ResourceIdentifier(Id.ToString() + "/privateAccess/virtualNetworks"));
        }

        /// <summary> Gets a collection of SiteSlotPublicCertificates in the SiteSlotPublicCertificate. </summary>
        /// <returns> An object representing collection of SiteSlotPublicCertificates and their operations over a SiteSlotPublicCertificate. </returns>
        public virtual SiteSlotPublicCertificateCollection GetSiteSlotPublicCertificates()
        {
            return new SiteSlotPublicCertificateCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotSiteextensions in the SiteSlotSiteextension. </summary>
        /// <returns> An object representing collection of SiteSlotSiteextensions and their operations over a SiteSlotSiteextension. </returns>
        public virtual SiteSlotSiteextensionCollection GetSiteSlotSiteextensions()
        {
            return new SiteSlotSiteextensionCollection(Client, Id);
        }

        /// <summary> Gets an object representing a MigrateMySqlStatus along with the instance operations that can be performed on it in the SiteSlot. </summary>
        /// <returns> Returns a <see cref="MigrateMySqlStatus" /> object. </returns>
        public virtual MigrateMySqlStatus GetMigrateMySqlStatus()
        {
            return new MigrateMySqlStatus(Client, new ResourceIdentifier(Id.ToString() + "/migratemysql/status"));
        }

        /// <summary> Gets a collection of NetworkFeatures in the NetworkFeatures. </summary>
        /// <returns> An object representing collection of NetworkFeatures and their operations over a NetworkFeatures. </returns>
        public virtual NetworkFeaturesCollection GetNetworkFeatures()
        {
            return new NetworkFeaturesCollection(Client, Id);
        }

        /// <summary> Gets an object representing a SiteSlotSourcecontrol along with the instance operations that can be performed on it in the SiteSlot. </summary>
        /// <returns> Returns a <see cref="SiteSlotSourcecontrol" /> object. </returns>
        public virtual SiteSlotSourcecontrol GetSiteSlotSourcecontrol()
        {
            return new SiteSlotSourcecontrol(Client, new ResourceIdentifier(Id.ToString() + "/sourcecontrols/web"));
        }

        /// <summary> Gets a collection of SiteTriggeredwebJobs in the SiteTriggeredwebJob. </summary>
        /// <returns> An object representing collection of SiteTriggeredwebJobs and their operations over a SiteTriggeredwebJob. </returns>
        public virtual SiteTriggeredwebJobCollection GetSiteTriggeredwebJobs()
        {
            return new SiteTriggeredwebJobCollection(Client, Id);
        }

        /// <summary> Gets a collection of SiteSlotWebJobs in the SiteSlotWebJob. </summary>
        /// <returns> An object representing collection of SiteSlotWebJobs and their operations over a SiteSlotWebJob. </returns>
        public virtual SiteSlotWebJobCollection GetSiteSlotWebJobs()
        {
            return new SiteSlotWebJobCollection(Client, Id);
        }

        /// <summary>
        /// Description for Gets the details of a web, mobile, or API app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_GetSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SiteSlot>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.Get");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.GetSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _siteSlotWebAppsClientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new SiteSlot(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the details of a web, mobile, or API app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_GetSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SiteSlot> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.Get");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.GetSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _siteSlotWebAppsClientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SiteSlot(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Deletes a web, mobile, or API app, or one of the deployment slots.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_DeleteSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="deleteMetrics"> If true, web app metrics are also deleted. </param>
        /// <param name="deleteEmptyServerFarm"> Specify false if you want to keep empty App Service plan. By default, empty App Service plan is deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<ArmOperation> DeleteAsync(bool waitForCompletion, bool? deleteMetrics = null, bool? deleteEmptyServerFarm = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.Delete");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.DeleteSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, deleteMetrics, deleteEmptyServerFarm, cancellationToken).ConfigureAwait(false);
                var operation = new AppServiceArmOperation(response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Deletes a web, mobile, or API app, or one of the deployment slots.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_DeleteSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="deleteMetrics"> If true, web app metrics are also deleted. </param>
        /// <param name="deleteEmptyServerFarm"> Specify false if you want to keep empty App Service plan. By default, empty App Service plan is deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(bool waitForCompletion, bool? deleteMetrics = null, bool? deleteEmptyServerFarm = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.Delete");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.DeleteSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, deleteMetrics, deleteEmptyServerFarm, cancellationToken);
                var operation = new AppServiceArmOperation(response);
                if (waitForCompletion)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_UpdateSlot
        /// </summary>
        /// <param name="siteEnvelope"> A JSON representation of the app properties. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="siteEnvelope"/> is null. </exception>
        public async virtual Task<Response<SiteSlot>> UpdateAsync(SitePatchResource siteEnvelope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(siteEnvelope, nameof(siteEnvelope));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.Update");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.UpdateSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, siteEnvelope, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SiteSlot(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_UpdateSlot
        /// </summary>
        /// <param name="siteEnvelope"> A JSON representation of the app properties. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="siteEnvelope"/> is null. </exception>
        public virtual Response<SiteSlot> Update(SitePatchResource siteEnvelope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(siteEnvelope, nameof(siteEnvelope));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.Update");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.UpdateSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, siteEnvelope, cancellationToken);
                return Response.FromValue(new SiteSlot(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Analyze a custom hostname.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname
        /// Operation Id: WebApps_AnalyzeCustomHostnameSlot
        /// </summary>
        /// <param name="hostName"> Custom hostname. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<CustomHostnameAnalysisResult>> AnalyzeCustomHostnameSlotAsync(string hostName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.AnalyzeCustomHostnameSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.AnalyzeCustomHostnameSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, hostName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Analyze a custom hostname.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname
        /// Operation Id: WebApps_AnalyzeCustomHostnameSlot
        /// </summary>
        /// <param name="hostName"> Custom hostname. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CustomHostnameAnalysisResult> AnalyzeCustomHostnameSlot(string hostName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.AnalyzeCustomHostnameSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.AnalyzeCustomHostnameSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, hostName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Applies the configuration settings from the target slot onto the current slot.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig
        /// Operation Id: WebApps_ApplySlotConfigurationSlot
        /// </summary>
        /// <param name="slotSwapEntity"> JSON object that contains the target slot name. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="slotSwapEntity"/> is null. </exception>
        public async virtual Task<Response> ApplySlotConfigurationSlotAsync(CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(slotSwapEntity, nameof(slotSwapEntity));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.ApplySlotConfigurationSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ApplySlotConfigurationSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, slotSwapEntity, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Applies the configuration settings from the target slot onto the current slot.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig
        /// Operation Id: WebApps_ApplySlotConfigurationSlot
        /// </summary>
        /// <param name="slotSwapEntity"> JSON object that contains the target slot name. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="slotSwapEntity"/> is null. </exception>
        public virtual Response ApplySlotConfigurationSlot(CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(slotSwapEntity, nameof(slotSwapEntity));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.ApplySlotConfigurationSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ApplySlotConfigurationSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, slotSwapEntity, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Creates a backup of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup
        /// Operation Id: WebApps_BackupSlot
        /// </summary>
        /// <param name="request"> Backup configuration. You can use the JSON response from the POST action as input here. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public async virtual Task<Response<SiteBackup>> BackupSlotAsync(BackupRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.BackupSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.BackupSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, request, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SiteBackup(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Creates a backup of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup
        /// Operation Id: WebApps_BackupSlot
        /// </summary>
        /// <param name="request"> Backup configuration. You can use the JSON response from the POST action as input here. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public virtual Response<SiteBackup> BackupSlot(BackupRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.BackupSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.BackupSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, request, cancellationToken);
                return Response.FromValue(new SiteBackup(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for List the configurations of an app
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config
        /// Operation Id: WebApps_ListConfigurationsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WebSiteConfig" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WebSiteConfig> GetConfigurationsSlotAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WebSiteConfig>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetConfigurationsSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListConfigurationsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WebSiteConfig(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WebSiteConfig>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetConfigurationsSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListConfigurationsSlotNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WebSiteConfig(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for List the configurations of an app
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config
        /// Operation Id: WebApps_ListConfigurationsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WebSiteConfig" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WebSiteConfig> GetConfigurationsSlot(CancellationToken cancellationToken = default)
        {
            Page<WebSiteConfig> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetConfigurationsSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListConfigurationsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WebSiteConfig(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WebSiteConfig> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetConfigurationsSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListConfigurationsSlotNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WebSiteConfig(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Replaces the application settings of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings
        /// Operation Id: WebApps_UpdateApplicationSettingsSlot
        /// </summary>
        /// <param name="appSettings"> Application settings of the app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appSettings"/> is null. </exception>
        public async virtual Task<Response<StringDictionary>> UpdateApplicationSettingsSlotAsync(StringDictionary appSettings, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(appSettings, nameof(appSettings));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateApplicationSettingsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.UpdateApplicationSettingsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, appSettings, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Replaces the application settings of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings
        /// Operation Id: WebApps_UpdateApplicationSettingsSlot
        /// </summary>
        /// <param name="appSettings"> Application settings of the app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="appSettings"/> is null. </exception>
        public virtual Response<StringDictionary> UpdateApplicationSettingsSlot(StringDictionary appSettings, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(appSettings, nameof(appSettings));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateApplicationSettingsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.UpdateApplicationSettingsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, appSettings, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the application settings of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list
        /// Operation Id: WebApps_ListApplicationSettingsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<StringDictionary>> GetApplicationSettingsSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetApplicationSettingsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListApplicationSettingsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the application settings of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list
        /// Operation Id: WebApps_ListApplicationSettingsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<StringDictionary> GetApplicationSettingsSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetApplicationSettingsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListApplicationSettingsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Updates the Authentication / Authorization settings associated with web app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings
        /// Operation Id: WebApps_UpdateAuthSettingsSlot
        /// </summary>
        /// <param name="siteAuthSettings"> Auth settings associated with web app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="siteAuthSettings"/> is null. </exception>
        public async virtual Task<Response<SiteAuthSettings>> UpdateAuthSettingsSlotAsync(SiteAuthSettings siteAuthSettings, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(siteAuthSettings, nameof(siteAuthSettings));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateAuthSettingsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.UpdateAuthSettingsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, siteAuthSettings, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Updates the Authentication / Authorization settings associated with web app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings
        /// Operation Id: WebApps_UpdateAuthSettingsSlot
        /// </summary>
        /// <param name="siteAuthSettings"> Auth settings associated with web app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="siteAuthSettings"/> is null. </exception>
        public virtual Response<SiteAuthSettings> UpdateAuthSettingsSlot(SiteAuthSettings siteAuthSettings, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(siteAuthSettings, nameof(siteAuthSettings));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateAuthSettingsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.UpdateAuthSettingsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, siteAuthSettings, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the Authentication/Authorization settings of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list
        /// Operation Id: WebApps_GetAuthSettingsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SiteAuthSettings>> GetAuthSettingsSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetAuthSettingsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.GetAuthSettingsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the Authentication/Authorization settings of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list
        /// Operation Id: WebApps_GetAuthSettingsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SiteAuthSettings> GetAuthSettingsSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetAuthSettingsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.GetAuthSettingsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Updates site&apos;s Authentication / Authorization settings for apps via the V2 format
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettingsV2
        /// Operation Id: WebApps_UpdateAuthSettingsV2Slot
        /// </summary>
        /// <param name="siteAuthSettingsV2"> Auth settings associated with web app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="siteAuthSettingsV2"/> is null. </exception>
        public async virtual Task<Response<SiteAuthSettingsV2>> UpdateAuthSettingsV2SlotAsync(SiteAuthSettingsV2 siteAuthSettingsV2, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(siteAuthSettingsV2, nameof(siteAuthSettingsV2));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateAuthSettingsV2Slot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.UpdateAuthSettingsV2SlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, siteAuthSettingsV2, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Updates site&apos;s Authentication / Authorization settings for apps via the V2 format
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettingsV2
        /// Operation Id: WebApps_UpdateAuthSettingsV2Slot
        /// </summary>
        /// <param name="siteAuthSettingsV2"> Auth settings associated with web app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="siteAuthSettingsV2"/> is null. </exception>
        public virtual Response<SiteAuthSettingsV2> UpdateAuthSettingsV2Slot(SiteAuthSettingsV2 siteAuthSettingsV2, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(siteAuthSettingsV2, nameof(siteAuthSettingsV2));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateAuthSettingsV2Slot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.UpdateAuthSettingsV2Slot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, siteAuthSettingsV2, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets site&apos;s Authentication / Authorization settings for apps via the V2 format
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettingsV2/list
        /// Operation Id: WebApps_GetAuthSettingsV2Slot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SiteAuthSettingsV2>> GetAuthSettingsV2SlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetAuthSettingsV2Slot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.GetAuthSettingsV2SlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets site&apos;s Authentication / Authorization settings for apps via the V2 format
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettingsV2/list
        /// Operation Id: WebApps_GetAuthSettingsV2Slot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SiteAuthSettingsV2> GetAuthSettingsV2Slot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetAuthSettingsV2Slot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.GetAuthSettingsV2Slot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Updates the Azure storage account configurations of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts
        /// Operation Id: WebApps_UpdateAzureStorageAccountsSlot
        /// </summary>
        /// <param name="azureStorageAccounts"> Azure storage accounts of the app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="azureStorageAccounts"/> is null. </exception>
        public async virtual Task<Response<AzureStoragePropertyDictionaryResource>> UpdateAzureStorageAccountsSlotAsync(AzureStoragePropertyDictionaryResource azureStorageAccounts, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(azureStorageAccounts, nameof(azureStorageAccounts));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateAzureStorageAccountsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.UpdateAzureStorageAccountsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, azureStorageAccounts, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Updates the Azure storage account configurations of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts
        /// Operation Id: WebApps_UpdateAzureStorageAccountsSlot
        /// </summary>
        /// <param name="azureStorageAccounts"> Azure storage accounts of the app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="azureStorageAccounts"/> is null. </exception>
        public virtual Response<AzureStoragePropertyDictionaryResource> UpdateAzureStorageAccountsSlot(AzureStoragePropertyDictionaryResource azureStorageAccounts, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(azureStorageAccounts, nameof(azureStorageAccounts));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateAzureStorageAccountsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.UpdateAzureStorageAccountsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, azureStorageAccounts, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the Azure storage account configurations of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list
        /// Operation Id: WebApps_ListAzureStorageAccountsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<AzureStoragePropertyDictionaryResource>> GetAzureStorageAccountsSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetAzureStorageAccountsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListAzureStorageAccountsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the Azure storage account configurations of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list
        /// Operation Id: WebApps_ListAzureStorageAccountsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AzureStoragePropertyDictionaryResource> GetAzureStorageAccountsSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetAzureStorageAccountsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListAzureStorageAccountsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Updates the backup configuration of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup
        /// Operation Id: WebApps_UpdateBackupConfigurationSlot
        /// </summary>
        /// <param name="request"> Edited backup configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public async virtual Task<Response<BackupRequest>> UpdateBackupConfigurationSlotAsync(BackupRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateBackupConfigurationSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.UpdateBackupConfigurationSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, request, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Updates the backup configuration of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup
        /// Operation Id: WebApps_UpdateBackupConfigurationSlot
        /// </summary>
        /// <param name="request"> Edited backup configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public virtual Response<BackupRequest> UpdateBackupConfigurationSlot(BackupRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateBackupConfigurationSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.UpdateBackupConfigurationSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, request, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Deletes the backup configuration of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup
        /// Operation Id: WebApps_DeleteBackupConfigurationSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> DeleteBackupConfigurationSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.DeleteBackupConfigurationSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.DeleteBackupConfigurationSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Deletes the backup configuration of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup
        /// Operation Id: WebApps_DeleteBackupConfigurationSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteBackupConfigurationSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.DeleteBackupConfigurationSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.DeleteBackupConfigurationSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the backup configuration of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list
        /// Operation Id: WebApps_GetBackupConfigurationSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<BackupRequest>> GetBackupConfigurationSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetBackupConfigurationSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.GetBackupConfigurationSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the backup configuration of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list
        /// Operation Id: WebApps_GetBackupConfigurationSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BackupRequest> GetBackupConfigurationSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetBackupConfigurationSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.GetBackupConfigurationSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Replaces the connection strings of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings
        /// Operation Id: WebApps_UpdateConnectionStringsSlot
        /// </summary>
        /// <param name="connectionStrings"> Connection strings of the app or deployment slot. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionStrings"/> is null. </exception>
        public async virtual Task<Response<ConnectionStringDictionary>> UpdateConnectionStringsSlotAsync(ConnectionStringDictionary connectionStrings, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(connectionStrings, nameof(connectionStrings));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateConnectionStringsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.UpdateConnectionStringsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, connectionStrings, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Replaces the connection strings of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings
        /// Operation Id: WebApps_UpdateConnectionStringsSlot
        /// </summary>
        /// <param name="connectionStrings"> Connection strings of the app or deployment slot. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionStrings"/> is null. </exception>
        public virtual Response<ConnectionStringDictionary> UpdateConnectionStringsSlot(ConnectionStringDictionary connectionStrings, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(connectionStrings, nameof(connectionStrings));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateConnectionStringsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.UpdateConnectionStringsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, connectionStrings, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the connection strings of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list
        /// Operation Id: WebApps_ListConnectionStringsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<ConnectionStringDictionary>> GetConnectionStringsSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetConnectionStringsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListConnectionStringsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the connection strings of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list
        /// Operation Id: WebApps_ListConnectionStringsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ConnectionStringDictionary> GetConnectionStringsSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetConnectionStringsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListConnectionStringsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Replaces the metadata of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata
        /// Operation Id: WebApps_UpdateMetadataSlot
        /// </summary>
        /// <param name="metadata"> Edited metadata of the app or deployment slot. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="metadata"/> is null. </exception>
        public async virtual Task<Response<StringDictionary>> UpdateMetadataSlotAsync(StringDictionary metadata, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(metadata, nameof(metadata));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateMetadataSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.UpdateMetadataSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, metadata, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Replaces the metadata of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata
        /// Operation Id: WebApps_UpdateMetadataSlot
        /// </summary>
        /// <param name="metadata"> Edited metadata of the app or deployment slot. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="metadata"/> is null. </exception>
        public virtual Response<StringDictionary> UpdateMetadataSlot(StringDictionary metadata, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(metadata, nameof(metadata));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateMetadataSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.UpdateMetadataSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, metadata, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the metadata of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list
        /// Operation Id: WebApps_ListMetadataSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<StringDictionary>> GetMetadataSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetMetadataSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListMetadataSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the metadata of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list
        /// Operation Id: WebApps_ListMetadataSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<StringDictionary> GetMetadataSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetMetadataSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListMetadataSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the Git/FTP publishing credentials of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list
        /// Operation Id: WebApps_ListPublishingCredentialsSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<ArmOperation<User>> GetPublishingCredentialsSlotAsync(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPublishingCredentialsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListPublishingCredentialsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new AppServiceArmOperation<User>(new UserOperationSource(Client), _siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateListPublishingCredentialsSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the Git/FTP publishing credentials of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list
        /// Operation Id: WebApps_ListPublishingCredentialsSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<User> GetPublishingCredentialsSlot(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPublishingCredentialsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListPublishingCredentialsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new AppServiceArmOperation<User>(new UserOperationSource(Client), _siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateListPublishingCredentialsSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Updates the Push settings associated with web app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings
        /// Operation Id: WebApps_UpdateSitePushSettingsSlot
        /// </summary>
        /// <param name="pushSettings"> Push settings associated with web app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pushSettings"/> is null. </exception>
        public async virtual Task<Response<PushSettings>> UpdateSitePushSettingsSlotAsync(PushSettings pushSettings, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(pushSettings, nameof(pushSettings));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateSitePushSettingsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.UpdateSitePushSettingsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, pushSettings, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Updates the Push settings associated with web app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings
        /// Operation Id: WebApps_UpdateSitePushSettingsSlot
        /// </summary>
        /// <param name="pushSettings"> Push settings associated with web app. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pushSettings"/> is null. </exception>
        public virtual Response<PushSettings> UpdateSitePushSettingsSlot(PushSettings pushSettings, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(pushSettings, nameof(pushSettings));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.UpdateSitePushSettingsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.UpdateSitePushSettingsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, pushSettings, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the Push settings associated with web app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list
        /// Operation Id: WebApps_ListSitePushSettingsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<PushSettings>> GetSitePushSettingsSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSitePushSettingsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListSitePushSettingsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the Push settings associated with web app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list
        /// Operation Id: WebApps_ListSitePushSettingsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PushSettings> GetSitePushSettingsSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSitePushSettingsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListSitePushSettingsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the last lines of docker logs for the given site
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs
        /// Operation Id: WebApps_GetWebSiteContainerLogsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<Stream>> GetWebSiteContainerLogsSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetWebSiteContainerLogsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.GetWebSiteContainerLogsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the last lines of docker logs for the given site
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs
        /// Operation Id: WebApps_GetWebSiteContainerLogsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Stream> GetWebSiteContainerLogsSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetWebSiteContainerLogsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.GetWebSiteContainerLogsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the ZIP archived docker log files for the given site
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download
        /// Operation Id: WebApps_GetContainerLogsZipSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<Stream>> GetContainerLogsZipSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetContainerLogsZipSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.GetContainerLogsZipSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the ZIP archived docker log files for the given site
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download
        /// Operation Id: WebApps_GetContainerLogsZipSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Stream> GetContainerLogsZipSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetContainerLogsZipSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.GetContainerLogsZipSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup
        /// Operation Id: WebApps_DiscoverBackupSlot
        /// </summary>
        /// <param name="request"> A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public async virtual Task<Response<RestoreRequest>> DiscoverBackupSlotAsync(RestoreRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.DiscoverBackupSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.DiscoverBackupSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, request, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup
        /// Operation Id: WebApps_DiscoverBackupSlot
        /// </summary>
        /// <param name="request"> A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public virtual Response<RestoreRequest> DiscoverBackupSlot(RestoreRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.DiscoverBackupSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.DiscoverBackupSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, request, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Fetch a short lived token that can be exchanged for a master key.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token
        /// Operation Id: WebApps_GetFunctionsAdminTokenSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<string>> GetFunctionsAdminTokenSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetFunctionsAdminTokenSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.GetFunctionsAdminTokenSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Fetch a short lived token that can be exchanged for a master key.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token
        /// Operation Id: WebApps_GetFunctionsAdminTokenSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<string> GetFunctionsAdminTokenSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetFunctionsAdminTokenSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.GetFunctionsAdminTokenSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Get host secrets for a function app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listkeys
        /// Operation Id: WebApps_ListHostKeysSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<HostKeys>> GetHostKeysSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetHostKeysSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListHostKeysSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Get host secrets for a function app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listkeys
        /// Operation Id: WebApps_ListHostKeysSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<HostKeys> GetHostKeysSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetHostKeysSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListHostKeysSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listsyncstatus
        /// Operation Id: WebApps_ListSyncStatusSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> GetSyncStatusSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSyncStatusSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListSyncStatusSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listsyncstatus
        /// Operation Id: WebApps_ListSyncStatusSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetSyncStatusSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSyncStatusSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListSyncStatusSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/sync
        /// Operation Id: WebApps_SyncFunctionsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> SyncFunctionsSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.SyncFunctionsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.SyncFunctionsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/sync
        /// Operation Id: WebApps_SyncFunctionsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SyncFunctionsSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.SyncFunctionsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.SyncFunctionsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Add or update a host level secret.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}
        /// Operation Id: WebApps_CreateOrUpdateHostSecretSlot
        /// </summary>
        /// <param name="keyType"> The type of host key. </param>
        /// <param name="keyName"> The name of the key. </param>
        /// <param name="key"> The key to create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyType"/> or <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyType"/>, <paramref name="keyName"/> or <paramref name="key"/> is null. </exception>
        public async virtual Task<Response<KeyInfo>> CreateOrUpdateHostSecretSlotAsync(string keyType, string keyName, KeyInfo key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyType, nameof(keyType));
            Argument.AssertNotNullOrEmpty(keyName, nameof(keyName));
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.CreateOrUpdateHostSecretSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.CreateOrUpdateHostSecretSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, keyType, keyName, key, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Add or update a host level secret.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}
        /// Operation Id: WebApps_CreateOrUpdateHostSecretSlot
        /// </summary>
        /// <param name="keyType"> The type of host key. </param>
        /// <param name="keyName"> The name of the key. </param>
        /// <param name="key"> The key to create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyType"/> or <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyType"/>, <paramref name="keyName"/> or <paramref name="key"/> is null. </exception>
        public virtual Response<KeyInfo> CreateOrUpdateHostSecretSlot(string keyType, string keyName, KeyInfo key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyType, nameof(keyType));
            Argument.AssertNotNullOrEmpty(keyName, nameof(keyName));
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.CreateOrUpdateHostSecretSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.CreateOrUpdateHostSecretSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, keyType, keyName, key, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Delete a host level secret.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}
        /// Operation Id: WebApps_DeleteHostSecretSlot
        /// </summary>
        /// <param name="keyType"> The type of host key. </param>
        /// <param name="keyName"> The name of the key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyType"/> or <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyType"/> or <paramref name="keyName"/> is null. </exception>
        public async virtual Task<Response> DeleteHostSecretSlotAsync(string keyType, string keyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyType, nameof(keyType));
            Argument.AssertNotNullOrEmpty(keyName, nameof(keyName));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.DeleteHostSecretSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.DeleteHostSecretSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, keyType, keyName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Delete a host level secret.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}
        /// Operation Id: WebApps_DeleteHostSecretSlot
        /// </summary>
        /// <param name="keyType"> The type of host key. </param>
        /// <param name="keyName"> The name of the key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyType"/> or <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyType"/> or <paramref name="keyName"/> is null. </exception>
        public virtual Response DeleteHostSecretSlot(string keyType, string keyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyType, nameof(keyType));
            Argument.AssertNotNullOrEmpty(keyName, nameof(keyName));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.DeleteHostSecretSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.DeleteHostSecretSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, keyType, keyName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays
        /// Operation Id: WebApps_ListHybridConnectionsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<ServerfarmHybridConnectionNamespaceRelay>> GetHybridConnectionsSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetHybridConnectionsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListHybridConnectionsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new ServerfarmHybridConnectionNamespaceRelay(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays
        /// Operation Id: WebApps_ListHybridConnectionsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServerfarmHybridConnectionNamespaceRelay> GetHybridConnectionsSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetHybridConnectionsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListHybridConnectionsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return Response.FromValue(new ServerfarmHybridConnectionNamespaceRelay(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection
        /// Operation Id: WebApps_ListRelayServiceConnectionsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SiteHybridConnection>> GetRelayServiceConnectionsSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetRelayServiceConnectionsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListRelayServiceConnectionsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SiteHybridConnection(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection
        /// Operation Id: WebApps_ListRelayServiceConnectionsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SiteHybridConnection> GetRelayServiceConnectionsSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetRelayServiceConnectionsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListRelayServiceConnectionsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return Response.FromValue(new SiteHybridConnection(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Shows whether an app can be cloned to another resource group or subscription.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable
        /// Operation Id: WebApps_IsCloneableSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SiteCloneability>> IsCloneableSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.IsCloneableSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.IsCloneableSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Shows whether an app can be cloned to another resource group or subscription.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable
        /// Operation Id: WebApps_IsCloneableSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SiteCloneability> IsCloneableSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.IsCloneableSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.IsCloneableSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets existing backups of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listbackups
        /// Operation Id: WebApps_ListSiteBackupsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SiteBackup" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SiteBackup> GetSiteBackupsSlotAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SiteBackup>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSiteBackupsSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListSiteBackupsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteBackup(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SiteBackup>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSiteBackupsSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListSiteBackupsSlotNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteBackup(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Gets existing backups of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listbackups
        /// Operation Id: WebApps_ListSiteBackupsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SiteBackup" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SiteBackup> GetSiteBackupsSlot(CancellationToken cancellationToken = default)
        {
            Page<SiteBackup> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSiteBackupsSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListSiteBackupsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteBackup(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SiteBackup> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSiteBackupsSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListSiteBackupsSlotNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SiteBackup(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus
        /// Operation Id: WebApps_ListSyncFunctionTriggersSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<FunctionSecrets>> GetSyncFunctionTriggersSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSyncFunctionTriggersSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListSyncFunctionTriggersSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus
        /// Operation Id: WebApps_ListSyncFunctionTriggersSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<FunctionSecrets> GetSyncFunctionTriggersSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSyncFunctionTriggersSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListSyncFunctionTriggersSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}
        /// Operation Id: WebApps_GetNetworkTraceOperationSlot
        /// </summary>
        /// <param name="operationId"> GUID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <returns> An async collection of <see cref="NetworkTrace" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NetworkTrace> GetNetworkTraceOperationSlotAsync(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            async Task<Page<NetworkTrace>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetNetworkTraceOperationSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.GetNetworkTraceOperationSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, operationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}
        /// Operation Id: WebApps_GetNetworkTraceOperationSlot
        /// </summary>
        /// <param name="operationId"> GUID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <returns> A collection of <see cref="NetworkTrace" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NetworkTrace> GetNetworkTraceOperationSlot(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            Page<NetworkTrace> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetNetworkTraceOperationSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.GetNetworkTraceOperationSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, operationId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Description for Start capturing network packets for the site (To be deprecated).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start
        /// Operation Id: WebApps_StartWebSiteNetworkTraceSlot
        /// </summary>
        /// <param name="durationInSeconds"> The duration to keep capturing in seconds. </param>
        /// <param name="maxFrameLength"> The maximum frame length in bytes (Optional). </param>
        /// <param name="sasUrl"> The Blob URL to store capture file. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<string>> StartWebSiteNetworkTraceSlotAsync(int? durationInSeconds = null, int? maxFrameLength = null, string sasUrl = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StartWebSiteNetworkTraceSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.StartWebSiteNetworkTraceSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, durationInSeconds, maxFrameLength, sasUrl, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Start capturing network packets for the site (To be deprecated).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start
        /// Operation Id: WebApps_StartWebSiteNetworkTraceSlot
        /// </summary>
        /// <param name="durationInSeconds"> The duration to keep capturing in seconds. </param>
        /// <param name="maxFrameLength"> The maximum frame length in bytes (Optional). </param>
        /// <param name="sasUrl"> The Blob URL to store capture file. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<string> StartWebSiteNetworkTraceSlot(int? durationInSeconds = null, int? maxFrameLength = null, string sasUrl = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StartWebSiteNetworkTraceSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.StartWebSiteNetworkTraceSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, durationInSeconds, maxFrameLength, sasUrl, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation
        /// Operation Id: WebApps_StartWebSiteNetworkTraceOperationSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="durationInSeconds"> The duration to keep capturing in seconds. </param>
        /// <param name="maxFrameLength"> The maximum frame length in bytes (Optional). </param>
        /// <param name="sasUrl"> The Blob URL to store capture file. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<ArmOperation<IList<NetworkTrace>>> StartWebSiteNetworkTraceOperationSlotAsync(bool waitForCompletion, int? durationInSeconds = null, int? maxFrameLength = null, string sasUrl = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StartWebSiteNetworkTraceOperationSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.StartWebSiteNetworkTraceOperationSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, durationInSeconds, maxFrameLength, sasUrl, cancellationToken).ConfigureAwait(false);
                var operation = new AppServiceArmOperation<IList<NetworkTrace>>(new IListOperationSource(), _siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateStartWebSiteNetworkTraceOperationSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, durationInSeconds, maxFrameLength, sasUrl).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation
        /// Operation Id: WebApps_StartWebSiteNetworkTraceOperationSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="durationInSeconds"> The duration to keep capturing in seconds. </param>
        /// <param name="maxFrameLength"> The maximum frame length in bytes (Optional). </param>
        /// <param name="sasUrl"> The Blob URL to store capture file. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<IList<NetworkTrace>> StartWebSiteNetworkTraceOperationSlot(bool waitForCompletion, int? durationInSeconds = null, int? maxFrameLength = null, string sasUrl = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StartWebSiteNetworkTraceOperationSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.StartWebSiteNetworkTraceOperationSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, durationInSeconds, maxFrameLength, sasUrl, cancellationToken);
                var operation = new AppServiceArmOperation<IList<NetworkTrace>>(new IListOperationSource(), _siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateStartWebSiteNetworkTraceOperationSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, durationInSeconds, maxFrameLength, sasUrl).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop
        /// Operation Id: WebApps_StopWebSiteNetworkTraceSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> StopWebSiteNetworkTraceSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StopWebSiteNetworkTraceSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.StopWebSiteNetworkTraceSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop
        /// Operation Id: WebApps_StopWebSiteNetworkTraceSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response StopWebSiteNetworkTraceSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StopWebSiteNetworkTraceSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.StopWebSiteNetworkTraceSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}
        /// Operation Id: WebApps_GetNetworkTracesSlot
        /// </summary>
        /// <param name="operationId"> GUID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <returns> An async collection of <see cref="NetworkTrace" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NetworkTrace> GetNetworkTracesSlotAsync(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            async Task<Page<NetworkTrace>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetNetworkTracesSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.GetNetworkTracesSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, operationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}
        /// Operation Id: WebApps_GetNetworkTracesSlot
        /// </summary>
        /// <param name="operationId"> GUID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <returns> A collection of <see cref="NetworkTrace" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NetworkTrace> GetNetworkTracesSlot(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            Page<NetworkTrace> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetNetworkTracesSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.GetNetworkTracesSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, operationId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}
        /// Operation Id: WebApps_GetNetworkTraceOperationSlotV2
        /// </summary>
        /// <param name="operationId"> GUID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <returns> An async collection of <see cref="NetworkTrace" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NetworkTrace> GetNetworkTraceOperationSlotV2Async(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            async Task<Page<NetworkTrace>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetNetworkTraceOperationSlotV2");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.GetNetworkTraceOperationSlotV2Async(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, operationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}
        /// Operation Id: WebApps_GetNetworkTraceOperationSlotV2
        /// </summary>
        /// <param name="operationId"> GUID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <returns> A collection of <see cref="NetworkTrace" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NetworkTrace> GetNetworkTraceOperationSlotV2(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            Page<NetworkTrace> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetNetworkTraceOperationSlotV2");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.GetNetworkTraceOperationSlotV2(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, operationId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}
        /// Operation Id: WebApps_GetNetworkTracesSlotV2
        /// </summary>
        /// <param name="operationId"> GUID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <returns> An async collection of <see cref="NetworkTrace" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NetworkTrace> GetNetworkTracesSlotV2Async(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            async Task<Page<NetworkTrace>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetNetworkTracesSlotV2");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.GetNetworkTracesSlotV2Async(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, operationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}
        /// Operation Id: WebApps_GetNetworkTracesSlotV2
        /// </summary>
        /// <param name="operationId"> GUID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <returns> A collection of <see cref="NetworkTrace" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NetworkTrace> GetNetworkTracesSlotV2(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            Page<NetworkTrace> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetNetworkTracesSlotV2");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.GetNetworkTracesSlotV2(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, operationId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Description for Generates a new publishing password for an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword
        /// Operation Id: WebApps_GenerateNewSitePublishingPasswordSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> GenerateNewSitePublishingPasswordSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GenerateNewSitePublishingPasswordSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.GenerateNewSitePublishingPasswordSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Generates a new publishing password for an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword
        /// Operation Id: WebApps_GenerateNewSitePublishingPasswordSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GenerateNewSitePublishingPasswordSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GenerateNewSitePublishingPasswordSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.GenerateNewSitePublishingPasswordSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets perfmon counters for web app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters
        /// Operation Id: WebApps_ListPerfMonCountersSlot
        /// </summary>
        /// <param name="filter"> Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&apos;[Hour|Minute|Day]&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PerfMonResponse" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PerfMonResponse> GetPerfMonCountersSlotAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PerfMonResponse>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPerfMonCountersSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListPerfMonCountersSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PerfMonResponse>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPerfMonCountersSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListPerfMonCountersSlotNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Gets perfmon counters for web app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters
        /// Operation Id: WebApps_ListPerfMonCountersSlot
        /// </summary>
        /// <param name="filter"> Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&apos;[Hour|Minute|Day]&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PerfMonResponse" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PerfMonResponse> GetPerfMonCountersSlot(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<PerfMonResponse> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPerfMonCountersSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListPerfMonCountersSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PerfMonResponse> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPerfMonCountersSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListPerfMonCountersSlotNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Gets web app&apos;s event logs.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging
        /// Operation Id: WebApps_GetSitePhpErrorLogFlagSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SitePhpErrorLogFlag>> GetSitePhpErrorLogFlagSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSitePhpErrorLogFlagSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.GetSitePhpErrorLogFlagSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets web app&apos;s event logs.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging
        /// Operation Id: WebApps_GetSitePhpErrorLogFlagSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SitePhpErrorLogFlag> GetSitePhpErrorLogFlagSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSitePhpErrorLogFlagSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.GetSitePhpErrorLogFlagSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the premier add-ons of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons
        /// Operation Id: WebApps_ListPremierAddOnsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SitePremierAddon>> GetPremierAddOnsSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPremierAddOnsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListPremierAddOnsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SitePremierAddon(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the premier add-ons of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons
        /// Operation Id: WebApps_ListPremierAddOnsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SitePremierAddon> GetPremierAddOnsSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPremierAddOnsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListPremierAddOnsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return Response.FromValue(new SitePremierAddon(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the private link resources
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateLinkResources
        /// Operation Id: WebApps_GetPrivateLinkResourcesSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PrivateLinkResource> GetPrivateLinkResourcesSlotAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PrivateLinkResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPrivateLinkResourcesSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.GetPrivateLinkResourcesSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Description for Gets the private link resources
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateLinkResources
        /// Operation Id: WebApps_GetPrivateLinkResourcesSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PrivateLinkResource> GetPrivateLinkResourcesSlot(CancellationToken cancellationToken = default)
        {
            Page<PrivateLinkResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPrivateLinkResourcesSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.GetPrivateLinkResourcesSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Description for Gets the publishing profile for an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml
        /// Operation Id: WebApps_ListPublishingProfileXmlWithSecretsSlot
        /// </summary>
        /// <param name="publishingProfileOptions"> Specifies publishingProfileOptions for publishing profile. For example, use {&quot;format&quot;: &quot;FileZilla3&quot;} to get a FileZilla publishing profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publishingProfileOptions"/> is null. </exception>
        public async virtual Task<Response<Stream>> GetPublishingProfileXmlWithSecretsSlotAsync(CsmPublishingProfileOptions publishingProfileOptions, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(publishingProfileOptions, nameof(publishingProfileOptions));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPublishingProfileXmlWithSecretsSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ListPublishingProfileXmlWithSecretsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, publishingProfileOptions, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the publishing profile for an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml
        /// Operation Id: WebApps_ListPublishingProfileXmlWithSecretsSlot
        /// </summary>
        /// <param name="publishingProfileOptions"> Specifies publishingProfileOptions for publishing profile. For example, use {&quot;format&quot;: &quot;FileZilla3&quot;} to get a FileZilla publishing profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publishingProfileOptions"/> is null. </exception>
        public virtual Response<Stream> GetPublishingProfileXmlWithSecretsSlot(CsmPublishingProfileOptions publishingProfileOptions, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(publishingProfileOptions, nameof(publishingProfileOptions));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetPublishingProfileXmlWithSecretsSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ListPublishingProfileXmlWithSecretsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, publishingProfileOptions, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig
        /// Operation Id: WebApps_ResetSlotConfigurationSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> ResetSlotConfigurationSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.ResetSlotConfigurationSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.ResetSlotConfigurationSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig
        /// Operation Id: WebApps_ResetSlotConfigurationSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ResetSlotConfigurationSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.ResetSlotConfigurationSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.ResetSlotConfigurationSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Restarts an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart
        /// Operation Id: WebApps_RestartSlot
        /// </summary>
        /// <param name="softRestart"> Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app. </param>
        /// <param name="synchronous"> Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> RestartSlotAsync(bool? softRestart = null, bool? synchronous = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.RestartSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.RestartSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, softRestart, synchronous, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Restarts an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart
        /// Operation Id: WebApps_RestartSlot
        /// </summary>
        /// <param name="softRestart"> Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app. </param>
        /// <param name="synchronous"> Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RestartSlot(bool? softRestart = null, bool? synchronous = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.RestartSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.RestartSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, softRestart, synchronous, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Restores an app from a backup blob in Azure Storage.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob
        /// Operation Id: WebApps_RestoreFromBackupBlobSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="request"> Information on restore request . </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public async virtual Task<ArmOperation> RestoreFromBackupBlobSlotAsync(bool waitForCompletion, RestoreRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.RestoreFromBackupBlobSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.RestoreFromBackupBlobSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, request, cancellationToken).ConfigureAwait(false);
                var operation = new AppServiceArmOperation(_siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateRestoreFromBackupBlobSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, request).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Restores an app from a backup blob in Azure Storage.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob
        /// Operation Id: WebApps_RestoreFromBackupBlobSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="request"> Information on restore request . </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public virtual ArmOperation RestoreFromBackupBlobSlot(bool waitForCompletion, RestoreRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.RestoreFromBackupBlobSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.RestoreFromBackupBlobSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, request, cancellationToken);
                var operation = new AppServiceArmOperation(_siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateRestoreFromBackupBlobSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, request).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Restores a deleted web app to this web app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp
        /// Operation Id: WebApps_RestoreFromDeletedAppSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="restoreRequest"> Deleted web app restore information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="restoreRequest"/> is null. </exception>
        public async virtual Task<ArmOperation> RestoreFromDeletedAppSlotAsync(bool waitForCompletion, DeletedAppRestoreRequest restoreRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(restoreRequest, nameof(restoreRequest));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.RestoreFromDeletedAppSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.RestoreFromDeletedAppSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, restoreRequest, cancellationToken).ConfigureAwait(false);
                var operation = new AppServiceArmOperation(_siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateRestoreFromDeletedAppSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, restoreRequest).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Restores a deleted web app to this web app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp
        /// Operation Id: WebApps_RestoreFromDeletedAppSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="restoreRequest"> Deleted web app restore information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="restoreRequest"/> is null. </exception>
        public virtual ArmOperation RestoreFromDeletedAppSlot(bool waitForCompletion, DeletedAppRestoreRequest restoreRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(restoreRequest, nameof(restoreRequest));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.RestoreFromDeletedAppSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.RestoreFromDeletedAppSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, restoreRequest, cancellationToken);
                var operation = new AppServiceArmOperation(_siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateRestoreFromDeletedAppSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, restoreRequest).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Restores a web app from a snapshot.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot
        /// Operation Id: WebApps_RestoreSnapshotSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="restoreRequest"> Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="restoreRequest"/> is null. </exception>
        public async virtual Task<ArmOperation> RestoreSnapshotSlotAsync(bool waitForCompletion, SnapshotRestoreRequest restoreRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(restoreRequest, nameof(restoreRequest));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.RestoreSnapshotSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.RestoreSnapshotSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, restoreRequest, cancellationToken).ConfigureAwait(false);
                var operation = new AppServiceArmOperation(_siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateRestoreSnapshotSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, restoreRequest).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Restores a web app from a snapshot.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot
        /// Operation Id: WebApps_RestoreSnapshotSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="restoreRequest"> Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="restoreRequest"/> is null. </exception>
        public virtual ArmOperation RestoreSnapshotSlot(bool waitForCompletion, SnapshotRestoreRequest restoreRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(restoreRequest, nameof(restoreRequest));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.RestoreSnapshotSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.RestoreSnapshotSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, restoreRequest, cancellationToken);
                var operation = new AppServiceArmOperation(_siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateRestoreSnapshotSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, restoreRequest).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Get the difference in configuration settings between two web app slots.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs
        /// Operation Id: WebApps_ListSlotDifferencesSlot
        /// </summary>
        /// <param name="slotSwapEntity"> JSON object that contains the target slot name. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="slotSwapEntity"/> is null. </exception>
        /// <returns> An async collection of <see cref="SlotDifference" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SlotDifference> GetSlotDifferencesSlotAsync(CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(slotSwapEntity, nameof(slotSwapEntity));

            async Task<Page<SlotDifference>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSlotDifferencesSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListSlotDifferencesSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, slotSwapEntity, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SlotDifference>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSlotDifferencesSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListSlotDifferencesSlotNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, slotSwapEntity, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Get the difference in configuration settings between two web app slots.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs
        /// Operation Id: WebApps_ListSlotDifferencesSlot
        /// </summary>
        /// <param name="slotSwapEntity"> JSON object that contains the target slot name. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="slotSwapEntity"/> is null. </exception>
        /// <returns> A collection of <see cref="SlotDifference" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SlotDifference> GetSlotDifferencesSlot(CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(slotSwapEntity, nameof(slotSwapEntity));

            Page<SlotDifference> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSlotDifferencesSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListSlotDifferencesSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, slotSwapEntity, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SlotDifference> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSlotDifferencesSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListSlotDifferencesSlotNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, slotSwapEntity, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Swaps two deployment slots of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap
        /// Operation Id: WebApps_SwapSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="slotSwapEntity"> JSON object that contains the target slot name. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="slotSwapEntity"/> is null. </exception>
        public async virtual Task<ArmOperation> SwapSlotAsync(bool waitForCompletion, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(slotSwapEntity, nameof(slotSwapEntity));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.SwapSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.SwapSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, slotSwapEntity, cancellationToken).ConfigureAwait(false);
                var operation = new AppServiceArmOperation(_siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateSwapSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, slotSwapEntity).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Swaps two deployment slots of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap
        /// Operation Id: WebApps_SwapSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="slotSwapEntity"> JSON object that contains the target slot name. See example. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="slotSwapEntity"/> is null. </exception>
        public virtual ArmOperation SwapSlot(bool waitForCompletion, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(slotSwapEntity, nameof(slotSwapEntity));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.SwapSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.SwapSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, slotSwapEntity, cancellationToken);
                var operation = new AppServiceArmOperation(_siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateSwapSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, slotSwapEntity).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots
        /// Operation Id: WebApps_ListSnapshotsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Snapshot" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Snapshot> GetSnapshotsSlotAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Snapshot>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSnapshotsSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListSnapshotsSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Snapshot>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSnapshotsSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListSnapshotsSlotNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots
        /// Operation Id: WebApps_ListSnapshotsSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Snapshot" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Snapshot> GetSnapshotsSlot(CancellationToken cancellationToken = default)
        {
            Page<Snapshot> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSnapshotsSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListSnapshotsSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Snapshot> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSnapshotsSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListSnapshotsSlotNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user from DRSecondary endpoint.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr
        /// Operation Id: WebApps_ListSnapshotsFromDRSecondarySlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Snapshot" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Snapshot> GetSnapshotsFromDRSecondarySlotAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Snapshot>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSnapshotsFromDRSecondarySlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListSnapshotsFromDRSecondarySlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Snapshot>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSnapshotsFromDRSecondarySlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListSnapshotsFromDRSecondarySlotNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user from DRSecondary endpoint.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr
        /// Operation Id: WebApps_ListSnapshotsFromDRSecondarySlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Snapshot" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Snapshot> GetSnapshotsFromDRSecondarySlot(CancellationToken cancellationToken = default)
        {
            Page<Snapshot> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSnapshotsFromDRSecondarySlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListSnapshotsFromDRSecondarySlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Snapshot> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetSnapshotsFromDRSecondarySlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListSnapshotsFromDRSecondarySlotNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Starts an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start
        /// Operation Id: WebApps_StartSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> StartSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StartSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.StartSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Starts an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start
        /// Operation Id: WebApps_StartSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response StartSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StartSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.StartSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace
        /// Operation Id: WebApps_StartNetworkTraceSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="durationInSeconds"> The duration to keep capturing in seconds. </param>
        /// <param name="maxFrameLength"> The maximum frame length in bytes (Optional). </param>
        /// <param name="sasUrl"> The Blob URL to store capture file. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<ArmOperation<IList<NetworkTrace>>> StartNetworkTraceSlotAsync(bool waitForCompletion, int? durationInSeconds = null, int? maxFrameLength = null, string sasUrl = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StartNetworkTraceSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.StartNetworkTraceSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, durationInSeconds, maxFrameLength, sasUrl, cancellationToken).ConfigureAwait(false);
                var operation = new AppServiceArmOperation<IList<NetworkTrace>>(new IListOperationSource(), _siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateStartNetworkTraceSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, durationInSeconds, maxFrameLength, sasUrl).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace
        /// Operation Id: WebApps_StartNetworkTraceSlot
        /// </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="durationInSeconds"> The duration to keep capturing in seconds. </param>
        /// <param name="maxFrameLength"> The maximum frame length in bytes (Optional). </param>
        /// <param name="sasUrl"> The Blob URL to store capture file. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<IList<NetworkTrace>> StartNetworkTraceSlot(bool waitForCompletion, int? durationInSeconds = null, int? maxFrameLength = null, string sasUrl = null, CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StartNetworkTraceSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.StartNetworkTraceSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, durationInSeconds, maxFrameLength, sasUrl, cancellationToken);
                var operation = new AppServiceArmOperation<IList<NetworkTrace>>(new IListOperationSource(), _siteSlotWebAppsClientDiagnostics, Pipeline, _siteSlotWebAppsRestClient.CreateStartNetworkTraceSlotRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, durationInSeconds, maxFrameLength, sasUrl).Request, response, OperationFinalStateVia.Location);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Stops an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop
        /// Operation Id: WebApps_StopSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> StopSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StopSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.StopSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Stops an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop
        /// Operation Id: WebApps_StopSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response StopSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StopSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.StopSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace
        /// Operation Id: WebApps_StopNetworkTraceSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> StopNetworkTraceSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StopNetworkTraceSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.StopNetworkTraceSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace
        /// Operation Id: WebApps_StopNetworkTraceSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response StopNetworkTraceSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.StopNetworkTraceSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.StopNetworkTraceSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Sync web app repository.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync
        /// Operation Id: WebApps_SyncRepositorySlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> SyncRepositorySlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.SyncRepositorySlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.SyncRepositorySlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Sync web app repository.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync
        /// Operation Id: WebApps_SyncRepositorySlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SyncRepositorySlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.SyncRepositorySlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.SyncRepositorySlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers
        /// Operation Id: WebApps_SyncFunctionTriggersSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> SyncFunctionTriggersSlotAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.SyncFunctionTriggersSlot");
            scope.Start();
            try
            {
                var response = await _siteSlotWebAppsRestClient.SyncFunctionTriggersSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers
        /// Operation Id: WebApps_SyncFunctionTriggersSlot
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SyncFunctionTriggersSlot(CancellationToken cancellationToken = default)
        {
            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.SyncFunctionTriggersSlot");
            scope.Start();
            try
            {
                var response = _siteSlotWebAppsRestClient.SyncFunctionTriggersSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets the quota usage information of an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages
        /// Operation Id: WebApps_ListUsagesSlot
        /// </summary>
        /// <param name="filter"> Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq &apos;Metric1&apos; or name.value eq &apos;Metric2&apos;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&apos;[Hour|Minute|Day]&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CsmUsageQuota" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CsmUsageQuota> GetUsagesSlotAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<CsmUsageQuota>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetUsagesSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListUsagesSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CsmUsageQuota>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetUsagesSlot");
                scope.Start();
                try
                {
                    var response = await _siteSlotWebAppsRestClient.ListUsagesSlotNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for Gets the quota usage information of an app (or deployment slot, if specified).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages
        /// Operation Id: WebApps_ListUsagesSlot
        /// </summary>
        /// <param name="filter"> Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq &apos;Metric1&apos; or name.value eq &apos;Metric2&apos;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&apos;[Hour|Minute|Day]&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CsmUsageQuota" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CsmUsageQuota> GetUsagesSlot(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<CsmUsageQuota> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetUsagesSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListUsagesSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CsmUsageQuota> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.GetUsagesSlot");
                scope.Start();
                try
                {
                    var response = _siteSlotWebAppsRestClient.ListUsagesSlotNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_GetSlot
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public async virtual Task<Response<SiteSlot>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.AddTag");
            scope.Start();
            try
            {
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues[key] = value;
                await TagResource.CreateOrUpdateAsync(true, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _siteSlotWebAppsRestClient.GetSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SiteSlot(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_GetSlot
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<SiteSlot> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.AddTag");
            scope.Start();
            try
            {
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.TagValues[key] = value;
                TagResource.CreateOrUpdate(true, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _siteSlotWebAppsRestClient.GetSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return Response.FromValue(new SiteSlot(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_GetSlot
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public async virtual Task<Response<SiteSlot>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.SetTags");
            scope.Start();
            try
            {
                await TagResource.DeleteAsync(true, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues.ReplaceWith(tags);
                await TagResource.CreateOrUpdateAsync(true, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _siteSlotWebAppsRestClient.GetSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SiteSlot(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_GetSlot
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<SiteSlot> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.SetTags");
            scope.Start();
            try
            {
                TagResource.Delete(true, cancellationToken: cancellationToken);
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.TagValues.ReplaceWith(tags);
                TagResource.CreateOrUpdate(true, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _siteSlotWebAppsRestClient.GetSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return Response.FromValue(new SiteSlot(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_GetSlot
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public async virtual Task<Response<SiteSlot>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues.Remove(key);
                await TagResource.CreateOrUpdateAsync(true, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _siteSlotWebAppsRestClient.GetSlotAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SiteSlot(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
        /// Operation Id: WebApps_GetSlot
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<SiteSlot> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _siteSlotWebAppsClientDiagnostics.CreateScope("SiteSlot.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.TagValues.Remove(key);
                TagResource.CreateOrUpdate(true, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _siteSlotWebAppsRestClient.GetSlot(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return Response.FromValue(new SiteSlot(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
