// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;

namespace Azure.ResourceManager.AppService
{
    /// <summary>
    /// A Class representing a WorkflowRunAction along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="WorkflowRunActionResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetWorkflowRunActionResource method.
    /// Otherwise you can get one from its parent resource <see cref="WorkflowRunResource" /> using the GetWorkflowRunAction method.
    /// </summary>
    public partial class WorkflowRunActionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="WorkflowRunActionResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string name, string workflowName, string runName, string actionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _workflowRunActionClientDiagnostics;
        private readonly WorkflowRunActionsRestOperations _workflowRunActionRestClient;
        private readonly WorkflowRunActionData _data;

        /// <summary> Initializes a new instance of the <see cref="WorkflowRunActionResource"/> class for mocking. </summary>
        protected WorkflowRunActionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "WorkflowRunActionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal WorkflowRunActionResource(ArmClient client, WorkflowRunActionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="WorkflowRunActionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal WorkflowRunActionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _workflowRunActionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AppService", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string workflowRunActionApiVersion);
            _workflowRunActionRestClient = new WorkflowRunActionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, workflowRunActionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Web/sites/hostruntime/webhooks/api/workflows/runs/actions";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual WorkflowRunActionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResources in the WorkflowRunAction. </summary>
        /// <returns> An object representing collection of SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResources and their operations over a SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource. </returns>
        public virtual SiteHostruntimeWebhookApiWorkflowRunActionRepetitionCollection GetSiteHostruntimeWebhookApiWorkflowRunActionRepetitions()
        {
            return GetCachedClient(Client => new SiteHostruntimeWebhookApiWorkflowRunActionRepetitionCollection(Client, Id));
        }

        /// <summary>
        /// Get a workflow run action repetition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}
        /// Operation Id: WorkflowRunActionRepetitions_Get
        /// </summary>
        /// <param name="repetitionName"> The workflow repetition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="repetitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="repetitionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource>> GetSiteHostruntimeWebhookApiWorkflowRunActionRepetitionAsync(string repetitionName, CancellationToken cancellationToken = default)
        {
            return await GetSiteHostruntimeWebhookApiWorkflowRunActionRepetitions().GetAsync(repetitionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a workflow run action repetition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}
        /// Operation Id: WorkflowRunActionRepetitions_Get
        /// </summary>
        /// <param name="repetitionName"> The workflow repetition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="repetitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="repetitionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SiteHostruntimeWebhookApiWorkflowRunActionRepetitionResource> GetSiteHostruntimeWebhookApiWorkflowRunActionRepetition(string repetitionName, CancellationToken cancellationToken = default)
        {
            return GetSiteHostruntimeWebhookApiWorkflowRunActionRepetitions().Get(repetitionName, cancellationToken);
        }

        /// <summary> Gets a collection of SiteHostruntimeWebhookApiWorkflowRunActionScopeRepetitionResources in the WorkflowRunAction. </summary>
        /// <returns> An object representing collection of SiteHostruntimeWebhookApiWorkflowRunActionScopeRepetitionResources and their operations over a SiteHostruntimeWebhookApiWorkflowRunActionScopeRepetitionResource. </returns>
        public virtual SiteHostruntimeWebhookApiWorkflowRunActionScopeRepetitionCollection GetSiteHostruntimeWebhookApiWorkflowRunActionScopeRepetitions()
        {
            return GetCachedClient(Client => new SiteHostruntimeWebhookApiWorkflowRunActionScopeRepetitionCollection(Client, Id));
        }

        /// <summary>
        /// Get a workflow run action scoped repetition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions/{repetitionName}
        /// Operation Id: WorkflowRunActionScopeRepetitions_Get
        /// </summary>
        /// <param name="repetitionName"> The workflow repetition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="repetitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="repetitionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SiteHostruntimeWebhookApiWorkflowRunActionScopeRepetitionResource>> GetSiteHostruntimeWebhookApiWorkflowRunActionScopeRepetitionAsync(string repetitionName, CancellationToken cancellationToken = default)
        {
            return await GetSiteHostruntimeWebhookApiWorkflowRunActionScopeRepetitions().GetAsync(repetitionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a workflow run action scoped repetition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions/{repetitionName}
        /// Operation Id: WorkflowRunActionScopeRepetitions_Get
        /// </summary>
        /// <param name="repetitionName"> The workflow repetition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="repetitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="repetitionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SiteHostruntimeWebhookApiWorkflowRunActionScopeRepetitionResource> GetSiteHostruntimeWebhookApiWorkflowRunActionScopeRepetition(string repetitionName, CancellationToken cancellationToken = default)
        {
            return GetSiteHostruntimeWebhookApiWorkflowRunActionScopeRepetitions().Get(repetitionName, cancellationToken);
        }

        /// <summary>
        /// Gets a workflow run action.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}
        /// Operation Id: WorkflowRunActions_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<WorkflowRunActionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _workflowRunActionClientDiagnostics.CreateScope("WorkflowRunActionResource.Get");
            scope.Start();
            try
            {
                var response = await _workflowRunActionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkflowRunActionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a workflow run action.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}
        /// Operation Id: WorkflowRunActions_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkflowRunActionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _workflowRunActionClientDiagnostics.CreateScope("WorkflowRunActionResource.Get");
            scope.Start();
            try
            {
                var response = _workflowRunActionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkflowRunActionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists a workflow run expression trace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/listExpressionTraces
        /// Operation Id: WorkflowRunActions_ListExpressionTraces
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExpressionRoot" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExpressionRoot> GetExpressionTracesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ExpressionRoot>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _workflowRunActionClientDiagnostics.CreateScope("WorkflowRunActionResource.GetExpressionTraces");
                scope.Start();
                try
                {
                    var response = await _workflowRunActionRestClient.ListExpressionTracesAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Inputs, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ExpressionRoot>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _workflowRunActionClientDiagnostics.CreateScope("WorkflowRunActionResource.GetExpressionTraces");
                scope.Start();
                try
                {
                    var response = await _workflowRunActionRestClient.ListExpressionTracesNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Inputs, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists a workflow run expression trace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/listExpressionTraces
        /// Operation Id: WorkflowRunActions_ListExpressionTraces
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExpressionRoot" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExpressionRoot> GetExpressionTraces(CancellationToken cancellationToken = default)
        {
            Page<ExpressionRoot> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _workflowRunActionClientDiagnostics.CreateScope("WorkflowRunActionResource.GetExpressionTraces");
                scope.Start();
                try
                {
                    var response = _workflowRunActionRestClient.ListExpressionTraces(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Inputs, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ExpressionRoot> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _workflowRunActionClientDiagnostics.CreateScope("WorkflowRunActionResource.GetExpressionTraces");
                scope.Start();
                try
                {
                    var response = _workflowRunActionRestClient.ListExpressionTracesNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Inputs, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
