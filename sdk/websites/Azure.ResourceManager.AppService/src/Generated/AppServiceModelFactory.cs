// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure;
using Azure.Core;
using Azure.ResourceManager.AppService;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class AppServiceModelFactory
    {
        /// <summary> Initializes a new instance of AppServiceCertificateOrderData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="certificates"> State of the Key Vault secret. </param>
        /// <param name="distinguishedName"> Certificate distinguished name. </param>
        /// <param name="domainVerificationToken"> Domain verification token. </param>
        /// <param name="validityInYears"> Duration in years (must be 1). </param>
        /// <param name="keySize"> Certificate key size. </param>
        /// <param name="productType"> Certificate product type. </param>
        /// <param name="isAutoRenew"> &lt;code&gt;true&lt;/code&gt; if the certificate should be automatically renewed when it expires; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="provisioningState"> Status of certificate order. </param>
        /// <param name="status"> Current order status. </param>
        /// <param name="signedCertificate"> Signed certificate. </param>
        /// <param name="csr"> Last CSR that was created for this order. </param>
        /// <param name="intermediate"> Intermediate certificate. </param>
        /// <param name="root"> Root certificate. </param>
        /// <param name="serialNumber"> Current serial number of the certificate. </param>
        /// <param name="lastCertificateIssuedOn"> Certificate last issuance time. </param>
        /// <param name="expireOn"> Certificate expiration time. </param>
        /// <param name="isPrivateKeyExternal"> &lt;code&gt;true&lt;/code&gt; if private key is external; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="appServiceCertificateNotRenewableReasons"> Reasons why App Service Certificate is not renewable at the current moment. </param>
        /// <param name="nextAutoRenewTimeStamp"> Time stamp when the certificate would be auto renewed next. </param>
        /// <param name="contact"> Contact info. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppServiceCertificateOrderData"/> instance for mocking. </returns>
        public static AppServiceCertificateOrderData AppServiceCertificateOrderData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IDictionary<string, AppServiceCertificateProperties> certificates = null, string distinguishedName = null, string domainVerificationToken = null, int? validityInYears = null, int? keySize = null, CertificateProductType? productType = null, bool? isAutoRenew = null, ProvisioningState? provisioningState = null, CertificateOrderStatus? status = null, AppServiceCertificateDetails signedCertificate = null, string csr = null, AppServiceCertificateDetails intermediate = null, AppServiceCertificateDetails root = null, string serialNumber = null, DateTimeOffset? lastCertificateIssuedOn = null, DateTimeOffset? expireOn = null, bool? isPrivateKeyExternal = null, IEnumerable<AppServiceCertificateNotRenewableReason> appServiceCertificateNotRenewableReasons = null, DateTimeOffset? nextAutoRenewTimeStamp = null, CertificateOrderContact contact = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();
            certificates ??= new Dictionary<string, AppServiceCertificateProperties>();
            appServiceCertificateNotRenewableReasons ??= new List<AppServiceCertificateNotRenewableReason>();

            return new AppServiceCertificateOrderData(id, name, resourceType, systemData, tags, location, certificates, distinguishedName, domainVerificationToken, validityInYears, keySize, productType, isAutoRenew, provisioningState, status, signedCertificate, csr, intermediate, root, serialNumber, lastCertificateIssuedOn, expireOn, isPrivateKeyExternal, appServiceCertificateNotRenewableReasons?.ToList(), nextAutoRenewTimeStamp, contact, kind);
        }

        /// <summary> Initializes a new instance of AppServiceCertificateProperties. </summary>
        /// <param name="keyVaultId"> Key Vault resource Id. </param>
        /// <param name="keyVaultSecretName"> Key Vault secret name. </param>
        /// <param name="provisioningState"> Status of the Key Vault secret. </param>
        /// <returns> A new <see cref="Models.AppServiceCertificateProperties"/> instance for mocking. </returns>
        public static AppServiceCertificateProperties AppServiceCertificateProperties(ResourceIdentifier keyVaultId = null, string keyVaultSecretName = null, KeyVaultSecretStatus? provisioningState = null)
        {
            return new AppServiceCertificateProperties(keyVaultId, keyVaultSecretName, provisioningState);
        }

        /// <summary> Initializes a new instance of AppServiceCertificateDetails. </summary>
        /// <param name="version"> Certificate Version. </param>
        /// <param name="serialNumber"> Certificate Serial Number. </param>
        /// <param name="thumbprint"> Certificate Thumbprint. </param>
        /// <param name="subject"> Certificate Subject. </param>
        /// <param name="notBefore"> Date Certificate is valid from. </param>
        /// <param name="notAfter"> Date Certificate is valid to. </param>
        /// <param name="signatureAlgorithm"> Certificate Signature algorithm. </param>
        /// <param name="issuer"> Certificate Issuer. </param>
        /// <param name="rawData"> Raw certificate data. </param>
        /// <returns> A new <see cref="Models.AppServiceCertificateDetails"/> instance for mocking. </returns>
        public static AppServiceCertificateDetails AppServiceCertificateDetails(int? version = null, string serialNumber = null, BinaryData thumbprint = null, string subject = null, DateTimeOffset? notBefore = null, DateTimeOffset? notAfter = null, string signatureAlgorithm = null, string issuer = null, string rawData = null)
        {
            return new AppServiceCertificateDetails(version, serialNumber, thumbprint, subject, notBefore, notAfter, signatureAlgorithm, issuer, rawData);
        }

        /// <summary> Initializes a new instance of CertificateOrderContact. </summary>
        /// <param name="email"></param>
        /// <param name="nameFirst"></param>
        /// <param name="nameLast"></param>
        /// <param name="phone"></param>
        /// <returns> A new <see cref="Models.CertificateOrderContact"/> instance for mocking. </returns>
        public static CertificateOrderContact CertificateOrderContact(string email = null, string nameFirst = null, string nameLast = null, string phone = null)
        {
            return new CertificateOrderContact(email, nameFirst, nameLast, phone);
        }

        /// <summary> Initializes a new instance of AppServiceCertificateOrderPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="certificates"> State of the Key Vault secret. </param>
        /// <param name="distinguishedName"> Certificate distinguished name. </param>
        /// <param name="domainVerificationToken"> Domain verification token. </param>
        /// <param name="validityInYears"> Duration in years (must be 1). </param>
        /// <param name="keySize"> Certificate key size. </param>
        /// <param name="productType"> Certificate product type. </param>
        /// <param name="isAutoRenew"> &lt;code&gt;true&lt;/code&gt; if the certificate should be automatically renewed when it expires; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="provisioningState"> Status of certificate order. </param>
        /// <param name="status"> Current order status. </param>
        /// <param name="signedCertificate"> Signed certificate. </param>
        /// <param name="csr"> Last CSR that was created for this order. </param>
        /// <param name="intermediate"> Intermediate certificate. </param>
        /// <param name="root"> Root certificate. </param>
        /// <param name="serialNumber"> Current serial number of the certificate. </param>
        /// <param name="lastCertificateIssuanceOn"> Certificate last issuance time. </param>
        /// <param name="expireOn"> Certificate expiration time. </param>
        /// <param name="isPrivateKeyExternal"> &lt;code&gt;true&lt;/code&gt; if private key is external; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="appServiceCertificateNotRenewableReasons"> Reasons why App Service Certificate is not renewable at the current moment. </param>
        /// <param name="nextAutoRenewalTimeStamp"> Time stamp when the certificate would be auto renewed next. </param>
        /// <param name="contact"> Contact info. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceCertificateOrderPatch"/> instance for mocking. </returns>
        public static AppServiceCertificateOrderPatch AppServiceCertificateOrderPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, AppServiceCertificateProperties> certificates = null, string distinguishedName = null, string domainVerificationToken = null, int? validityInYears = null, int? keySize = null, CertificateProductType? productType = null, bool? isAutoRenew = null, ProvisioningState? provisioningState = null, CertificateOrderStatus? status = null, AppServiceCertificateDetails signedCertificate = null, string csr = null, AppServiceCertificateDetails intermediate = null, AppServiceCertificateDetails root = null, string serialNumber = null, DateTimeOffset? lastCertificateIssuanceOn = null, DateTimeOffset? expireOn = null, bool? isPrivateKeyExternal = null, IEnumerable<AppServiceCertificateNotRenewableReason> appServiceCertificateNotRenewableReasons = null, DateTimeOffset? nextAutoRenewalTimeStamp = null, CertificateOrderContact contact = null, string kind = null)
        {
            certificates ??= new Dictionary<string, AppServiceCertificateProperties>();
            appServiceCertificateNotRenewableReasons ??= new List<AppServiceCertificateNotRenewableReason>();

            return new AppServiceCertificateOrderPatch(id, name, resourceType, systemData, certificates, distinguishedName, domainVerificationToken, validityInYears, keySize, productType, isAutoRenew, provisioningState, status, signedCertificate, csr, intermediate, root, serialNumber, lastCertificateIssuanceOn, expireOn, isPrivateKeyExternal, appServiceCertificateNotRenewableReasons?.ToList(), nextAutoRenewalTimeStamp, contact, kind);
        }

        /// <summary> Initializes a new instance of AppServiceCertificateData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="keyVaultId"> Key Vault resource Id. </param>
        /// <param name="keyVaultSecretName"> Key Vault secret name. </param>
        /// <param name="provisioningState"> Status of the Key Vault secret. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppServiceCertificateData"/> instance for mocking. </returns>
        public static AppServiceCertificateData AppServiceCertificateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ResourceIdentifier keyVaultId = null, string keyVaultSecretName = null, KeyVaultSecretStatus? provisioningState = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AppServiceCertificateData(id, name, resourceType, systemData, tags, location, keyVaultId, keyVaultSecretName, provisioningState, kind);
        }

        /// <summary> Initializes a new instance of AppServiceCertificatePatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="keyVaultId"> Key Vault resource Id. </param>
        /// <param name="keyVaultSecretName"> Key Vault secret name. </param>
        /// <param name="provisioningState"> Status of the Key Vault secret. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceCertificatePatch"/> instance for mocking. </returns>
        public static AppServiceCertificatePatch AppServiceCertificatePatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier keyVaultId = null, string keyVaultSecretName = null, KeyVaultSecretStatus? provisioningState = null, string kind = null)
        {
            return new AppServiceCertificatePatch(id, name, resourceType, systemData, keyVaultId, keyVaultSecretName, provisioningState, kind);
        }

        /// <summary> Initializes a new instance of ReissueCertificateOrderContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="keySize"> Certificate Key Size. </param>
        /// <param name="delayExistingRevokeInHours"> Delay in hours to revoke existing certificate after the new certificate is issued. </param>
        /// <param name="csr"> Csr to be used for re-key operation. </param>
        /// <param name="isPrivateKeyExternal"> Should we change the ASC type (from managed private key to external private key and vice versa). </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.ReissueCertificateOrderContent"/> instance for mocking. </returns>
        public static ReissueCertificateOrderContent ReissueCertificateOrderContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? keySize = null, int? delayExistingRevokeInHours = null, string csr = null, bool? isPrivateKeyExternal = null, string kind = null)
        {
            return new ReissueCertificateOrderContent(id, name, resourceType, systemData, keySize, delayExistingRevokeInHours, csr, isPrivateKeyExternal, kind);
        }

        /// <summary> Initializes a new instance of RenewCertificateOrderContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="keySize"> Certificate Key Size. </param>
        /// <param name="csr"> Csr to be used for re-key operation. </param>
        /// <param name="isPrivateKeyExternal"> Should we change the ASC type (from managed private key to external private key and vice versa). </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.RenewCertificateOrderContent"/> instance for mocking. </returns>
        public static RenewCertificateOrderContent RenewCertificateOrderContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? keySize = null, string csr = null, bool? isPrivateKeyExternal = null, string kind = null)
        {
            return new RenewCertificateOrderContent(id, name, resourceType, systemData, keySize, csr, isPrivateKeyExternal, kind);
        }

        /// <summary> Initializes a new instance of AppServiceDomainNameIdentifier. </summary>
        /// <param name="name"> Name of the object. </param>
        /// <returns> A new <see cref="Models.AppServiceDomainNameIdentifier"/> instance for mocking. </returns>
        public static AppServiceDomainNameIdentifier AppServiceDomainNameIdentifier(string name = null)
        {
            return new AppServiceDomainNameIdentifier(name);
        }

        /// <summary> Initializes a new instance of SiteSeal. </summary>
        /// <param name="html"> HTML snippet. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="html"/> is null. </exception>
        /// <returns> A new <see cref="Models.SiteSeal"/> instance for mocking. </returns>
        public static SiteSeal SiteSeal(string html = null)
        {
            if (html == null)
            {
                throw new ArgumentNullException(nameof(html));
            }

            return new SiteSeal(html);
        }

        /// <summary> Initializes a new instance of CertificateOrderAction. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="actionType"> Action type. </param>
        /// <param name="createdOn"> Time at which the certificate action was performed. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.CertificateOrderAction"/> instance for mocking. </returns>
        public static CertificateOrderAction CertificateOrderAction(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CertificateOrderActionType? actionType = null, DateTimeOffset? createdOn = null, string kind = null)
        {
            return new CertificateOrderAction(id, name, resourceType, systemData, actionType, createdOn, kind);
        }

        /// <summary> Initializes a new instance of AppServiceCertificateEmail. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="emailId"> Email id. </param>
        /// <param name="timeStamp"> Time stamp. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceCertificateEmail"/> instance for mocking. </returns>
        public static AppServiceCertificateEmail AppServiceCertificateEmail(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string emailId = null, DateTimeOffset? timeStamp = null, string kind = null)
        {
            return new AppServiceCertificateEmail(id, name, resourceType, systemData, emailId, timeStamp, kind);
        }

        /// <summary> Initializes a new instance of AppServiceDetectorData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="metadata"> metadata for the detector. </param>
        /// <param name="dataset"> Data Set. </param>
        /// <param name="status"> Indicates status of the most severe insight. </param>
        /// <param name="dataProvidersMetadata"> Additional configuration for different data providers to be used by the UI. </param>
        /// <param name="suggestedUtterances"> Suggested utterances where the detector can be applicable. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppServiceDetectorData"/> instance for mocking. </returns>
        public static AppServiceDetectorData AppServiceDetectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DetectorInfo metadata = null, IEnumerable<DiagnosticDataset> dataset = null, AppServiceStatusInfo status = null, IEnumerable<DataProviderMetadata> dataProvidersMetadata = null, QueryUtterancesResults suggestedUtterances = null, string kind = null)
        {
            dataset ??= new List<DiagnosticDataset>();
            dataProvidersMetadata ??= new List<DataProviderMetadata>();

            return new AppServiceDetectorData(id, name, resourceType, systemData, metadata, dataset?.ToList(), status, dataProvidersMetadata?.ToList(), suggestedUtterances, kind);
        }

        /// <summary> Initializes a new instance of DetectorInfo. </summary>
        /// <param name="id"> Id of detector. </param>
        /// <param name="name"> Name of detector. </param>
        /// <param name="description"> Short description of the detector and its purpose. </param>
        /// <param name="author"> Author of the detector. </param>
        /// <param name="category"> Problem category. This serves for organizing group for detectors. </param>
        /// <param name="supportTopicList"> List of Support Topics for which this detector is enabled. </param>
        /// <param name="analysisType"> Analysis Types for which this detector should apply to. </param>
        /// <param name="detectorType"> Whether this detector is an Analysis Detector or not. </param>
        /// <param name="score"> Defines score of a detector to power ML based matching. </param>
        /// <returns> A new <see cref="Models.DetectorInfo"/> instance for mocking. </returns>
        public static DetectorInfo DetectorInfo(string id = null, string name = null, string description = null, string author = null, string category = null, IEnumerable<DetectorSupportTopic> supportTopicList = null, IEnumerable<string> analysisType = null, DetectorType? detectorType = null, float? score = null)
        {
            supportTopicList ??= new List<DetectorSupportTopic>();
            analysisType ??= new List<string>();

            return new DetectorInfo(id, name, description, author, category, supportTopicList?.ToList(), analysisType?.ToList(), detectorType, score);
        }

        /// <summary> Initializes a new instance of DetectorSupportTopic. </summary>
        /// <param name="id"> Support Topic Id. </param>
        /// <param name="pesId"> Unique resource Id. </param>
        /// <returns> A new <see cref="Models.DetectorSupportTopic"/> instance for mocking. </returns>
        public static DetectorSupportTopic DetectorSupportTopic(string id = null, ResourceIdentifier pesId = null)
        {
            return new DetectorSupportTopic(id, pesId);
        }

        /// <summary> Initializes a new instance of DiagnosticDataset. </summary>
        /// <param name="table"> Data in table form. </param>
        /// <param name="renderingProperties"> Properties that describe how the table should be rendered. </param>
        /// <returns> A new <see cref="Models.DiagnosticDataset"/> instance for mocking. </returns>
        public static DiagnosticDataset DiagnosticDataset(DataTableResponseObject table = null, DiagnosticDataRendering renderingProperties = null)
        {
            return new DiagnosticDataset(table, renderingProperties);
        }

        /// <summary> Initializes a new instance of DataTableResponseObject. </summary>
        /// <param name="tableName"> Name of the table. </param>
        /// <param name="columns"> List of columns with data types. </param>
        /// <param name="rows"> Raw row values. </param>
        /// <returns> A new <see cref="Models.DataTableResponseObject"/> instance for mocking. </returns>
        public static DataTableResponseObject DataTableResponseObject(string tableName = null, IEnumerable<DataTableResponseColumn> columns = null, IEnumerable<IList<string>> rows = null)
        {
            columns ??= new List<DataTableResponseColumn>();
            rows ??= new List<IList<string>>();

            return new DataTableResponseObject(tableName, columns?.ToList(), rows?.ToList());
        }

        /// <summary> Initializes a new instance of DataTableResponseColumn. </summary>
        /// <param name="columnName"> Name of the column. </param>
        /// <param name="dataType"> Data type which looks like &apos;String&apos; or &apos;Int32&apos;. </param>
        /// <param name="columnType"> Column Type. </param>
        /// <returns> A new <see cref="Models.DataTableResponseColumn"/> instance for mocking. </returns>
        public static DataTableResponseColumn DataTableResponseColumn(string columnName = null, string dataType = null, string columnType = null)
        {
            return new DataTableResponseColumn(columnName, dataType, columnType);
        }

        /// <summary> Initializes a new instance of DiagnosticDataRendering. </summary>
        /// <param name="renderingType"> Rendering Type. </param>
        /// <param name="title"> Title of data. </param>
        /// <param name="description"> Description of the data that will help it be interpreted. </param>
        /// <returns> A new <see cref="Models.DiagnosticDataRendering"/> instance for mocking. </returns>
        public static DiagnosticDataRendering DiagnosticDataRendering(DiagnosticDataRenderingType? renderingType = null, string title = null, string description = null)
        {
            return new DiagnosticDataRendering(renderingType, title, description);
        }

        /// <summary> Initializes a new instance of AppServiceStatusInfo. </summary>
        /// <param name="message"> Descriptive message. </param>
        /// <param name="statusId"> Level of the most severe insight generated by the detector. </param>
        /// <returns> A new <see cref="Models.AppServiceStatusInfo"/> instance for mocking. </returns>
        public static AppServiceStatusInfo AppServiceStatusInfo(string message = null, DetectorInsightStatus? statusId = null)
        {
            return new AppServiceStatusInfo(message, statusId);
        }

        /// <summary> Initializes a new instance of DataProviderMetadata. </summary>
        /// <param name="providerName"></param>
        /// <param name="propertyBag"> Settings for the data provider. </param>
        /// <returns> A new <see cref="Models.DataProviderMetadata"/> instance for mocking. </returns>
        public static DataProviderMetadata DataProviderMetadata(string providerName = null, IEnumerable<DataProviderKeyValuePair> propertyBag = null)
        {
            propertyBag ??= new List<DataProviderKeyValuePair>();

            return new DataProviderMetadata(providerName, propertyBag?.ToList());
        }

        /// <summary> Initializes a new instance of DataProviderKeyValuePair. </summary>
        /// <param name="key"></param>
        /// <param name="value"> Any object. </param>
        /// <returns> A new <see cref="Models.DataProviderKeyValuePair"/> instance for mocking. </returns>
        public static DataProviderKeyValuePair DataProviderKeyValuePair(string key = null, BinaryData value = null)
        {
            return new DataProviderKeyValuePair(key, value);
        }

        /// <summary> Initializes a new instance of QueryUtterancesResults. </summary>
        /// <param name="query"> Search Query. </param>
        /// <param name="results"> Array of utterance results for search query. </param>
        /// <returns> A new <see cref="Models.QueryUtterancesResults"/> instance for mocking. </returns>
        public static QueryUtterancesResults QueryUtterancesResults(string query = null, IEnumerable<QueryUtterancesResult> results = null)
        {
            results ??= new List<QueryUtterancesResult>();

            return new QueryUtterancesResults(query, results?.ToList());
        }

        /// <summary> Initializes a new instance of QueryUtterancesResult. </summary>
        /// <param name="sampleUtterance"> A sample utterance. </param>
        /// <param name="score"> Score of a sample utterance. </param>
        /// <returns> A new <see cref="Models.QueryUtterancesResult"/> instance for mocking. </returns>
        public static QueryUtterancesResult QueryUtterancesResult(SampleUtterance sampleUtterance = null, float? score = null)
        {
            return new QueryUtterancesResult(sampleUtterance, score);
        }

        /// <summary> Initializes a new instance of SampleUtterance. </summary>
        /// <param name="text"> Text attribute of sample utterance. </param>
        /// <param name="links"> Links attribute of sample utterance. </param>
        /// <param name="qid"> Question id of sample utterance (for stackoverflow questions titles). </param>
        /// <returns> A new <see cref="Models.SampleUtterance"/> instance for mocking. </returns>
        public static SampleUtterance SampleUtterance(string text = null, IEnumerable<string> links = null, string qid = null)
        {
            links ??= new List<string>();

            return new SampleUtterance(text, links?.ToList(), qid);
        }

        /// <summary> Initializes a new instance of CsmOperationDescription. </summary>
        /// <param name="name"></param>
        /// <param name="isDataAction"></param>
        /// <param name="display"> Meta data about operation used for display in portal. </param>
        /// <param name="origin"></param>
        /// <param name="csmOperationDescriptionServiceSpecification"> Properties available for a Microsoft.Web resource provider operation. </param>
        /// <returns> A new <see cref="Models.CsmOperationDescription"/> instance for mocking. </returns>
        public static CsmOperationDescription CsmOperationDescription(string name = null, bool? isDataAction = null, CsmOperationDisplay display = null, string origin = null, ServiceSpecification csmOperationDescriptionServiceSpecification = null)
        {
            return new CsmOperationDescription(name, isDataAction, display, origin, new CsmOperationDescriptionProperties(csmOperationDescriptionServiceSpecification));
        }

        /// <summary> Initializes a new instance of CsmOperationDisplay. </summary>
        /// <param name="provider"></param>
        /// <param name="resource"></param>
        /// <param name="operation"></param>
        /// <param name="description"></param>
        /// <returns> A new <see cref="Models.CsmOperationDisplay"/> instance for mocking. </returns>
        public static CsmOperationDisplay CsmOperationDisplay(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new CsmOperationDisplay(provider, resource, operation, description);
        }

        /// <summary> Initializes a new instance of ServiceSpecification. </summary>
        /// <param name="metricSpecifications"></param>
        /// <param name="logSpecifications"></param>
        /// <returns> A new <see cref="Models.ServiceSpecification"/> instance for mocking. </returns>
        public static ServiceSpecification ServiceSpecification(IEnumerable<MetricSpecification> metricSpecifications = null, IEnumerable<LogSpecification> logSpecifications = null)
        {
            metricSpecifications ??= new List<MetricSpecification>();
            logSpecifications ??= new List<LogSpecification>();

            return new ServiceSpecification(metricSpecifications?.ToList(), logSpecifications?.ToList());
        }

        /// <summary> Initializes a new instance of MetricSpecification. </summary>
        /// <param name="name"></param>
        /// <param name="displayName"></param>
        /// <param name="displayDescription"></param>
        /// <param name="unit"></param>
        /// <param name="aggregationType"></param>
        /// <param name="isInstanceLevelAggregationSupported"></param>
        /// <param name="isRegionalMdmAccountEnabled"></param>
        /// <param name="sourceMdmAccount"></param>
        /// <param name="sourceMdmNamespace"></param>
        /// <param name="metricFilterPattern"></param>
        /// <param name="fillGapWithZero"></param>
        /// <param name="isInternal"></param>
        /// <param name="dimensions"></param>
        /// <param name="category"></param>
        /// <param name="availabilities"></param>
        /// <param name="supportedTimeGrainTypes"></param>
        /// <param name="supportedAggregationTypes"></param>
        /// <returns> A new <see cref="Models.MetricSpecification"/> instance for mocking. </returns>
        public static MetricSpecification MetricSpecification(string name = null, string displayName = null, string displayDescription = null, string unit = null, string aggregationType = null, bool? isInstanceLevelAggregationSupported = null, bool? isRegionalMdmAccountEnabled = null, string sourceMdmAccount = null, string sourceMdmNamespace = null, string metricFilterPattern = null, bool? fillGapWithZero = null, bool? isInternal = null, IEnumerable<MetricDimension> dimensions = null, string category = null, IEnumerable<MetricAvailability> availabilities = null, IEnumerable<string> supportedTimeGrainTypes = null, IEnumerable<string> supportedAggregationTypes = null)
        {
            dimensions ??= new List<MetricDimension>();
            availabilities ??= new List<MetricAvailability>();
            supportedTimeGrainTypes ??= new List<string>();
            supportedAggregationTypes ??= new List<string>();

            return new MetricSpecification(name, displayName, displayDescription, unit, aggregationType, isInstanceLevelAggregationSupported, isRegionalMdmAccountEnabled, sourceMdmAccount, sourceMdmNamespace, metricFilterPattern, fillGapWithZero, isInternal, dimensions?.ToList(), category, availabilities?.ToList(), supportedTimeGrainTypes?.ToList(), supportedAggregationTypes?.ToList());
        }

        /// <summary> Initializes a new instance of MetricDimension. </summary>
        /// <param name="name"></param>
        /// <param name="displayName"></param>
        /// <param name="internalName"></param>
        /// <param name="isToBeExportedForShoebox"></param>
        /// <returns> A new <see cref="Models.MetricDimension"/> instance for mocking. </returns>
        public static MetricDimension MetricDimension(string name = null, string displayName = null, string internalName = null, bool? isToBeExportedForShoebox = null)
        {
            return new MetricDimension(name, displayName, internalName, isToBeExportedForShoebox);
        }

        /// <summary> Initializes a new instance of MetricAvailability. </summary>
        /// <param name="timeGrain"></param>
        /// <param name="blobDuration"></param>
        /// <returns> A new <see cref="Models.MetricAvailability"/> instance for mocking. </returns>
        public static MetricAvailability MetricAvailability(string timeGrain = null, TimeSpan? blobDuration = null)
        {
            return new MetricAvailability(timeGrain, blobDuration);
        }

        /// <summary> Initializes a new instance of LogSpecification. </summary>
        /// <param name="name"></param>
        /// <param name="displayName"></param>
        /// <param name="blobDuration"></param>
        /// <param name="logFilterPattern"></param>
        /// <returns> A new <see cref="Models.LogSpecification"/> instance for mocking. </returns>
        public static LogSpecification LogSpecification(string name = null, string displayName = null, TimeSpan? blobDuration = null, string logFilterPattern = null)
        {
            return new LogSpecification(name, displayName, blobDuration, logFilterPattern);
        }

        /// <summary> Initializes a new instance of DomainAvailabilityCheckResult. </summary>
        /// <param name="name"> Name of the domain. </param>
        /// <param name="isAvailable"> &lt;code&gt;true&lt;/code&gt; if domain can be purchased using CreateDomain API; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="domainType"> Valid values are Regular domain: Azure will charge the full price of domain registration, SoftDeleted: Purchasing this domain will simply restore it and this operation will not cost anything. </param>
        /// <returns> A new <see cref="Models.DomainAvailabilityCheckResult"/> instance for mocking. </returns>
        public static DomainAvailabilityCheckResult DomainAvailabilityCheckResult(string name = null, bool? isAvailable = null, AppServiceDomainType? domainType = null)
        {
            return new DomainAvailabilityCheckResult(name, isAvailable, domainType);
        }

        /// <summary> Initializes a new instance of AppServiceDomainData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="contactAdmin"> Administrative contact. </param>
        /// <param name="contactBilling"> Billing contact. </param>
        /// <param name="contactRegistrant"> Registrant contact. </param>
        /// <param name="contactTech"> Technical contact. </param>
        /// <param name="registrationStatus"> Domain registration status. </param>
        /// <param name="provisioningState"> Domain provisioning state. </param>
        /// <param name="nameServers"> Name servers. </param>
        /// <param name="isDomainPrivacyEnabled"> &lt;code&gt;true&lt;/code&gt; if domain privacy is enabled for this domain; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="createdOn"> Domain creation timestamp. </param>
        /// <param name="expireOn"> Domain expiration timestamp. </param>
        /// <param name="lastRenewedOn"> Timestamp when the domain was renewed last time. </param>
        /// <param name="isAutoRenew"> &lt;code&gt;true&lt;/code&gt; if the domain should be automatically renewed; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isDnsRecordManagementReady">
        /// &lt;code&gt;true&lt;/code&gt; if Azure can assign this domain to App Service apps; otherwise, &lt;code&gt;false&lt;/code&gt;. This value will be &lt;code&gt;true&lt;/code&gt; if domain registration status is active and 
        ///  it is hosted on name servers Azure has programmatic access to.
        /// </param>
        /// <param name="managedHostNames"> All hostnames derived from the domain and assigned to Azure resources. </param>
        /// <param name="consent"> Legal agreement consent. </param>
        /// <param name="domainNotRenewableReasons"> Reasons why domain is not renewable. </param>
        /// <param name="dnsType"> Current DNS type. </param>
        /// <param name="dnsZoneId"> Azure DNS Zone to use. </param>
        /// <param name="targetDnsType"> Target DNS type (would be used for migration). </param>
        /// <param name="authCode"></param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppServiceDomainData"/> instance for mocking. </returns>
        public static AppServiceDomainData AppServiceDomainData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, RegistrationContactInfo contactAdmin = null, RegistrationContactInfo contactBilling = null, RegistrationContactInfo contactRegistrant = null, RegistrationContactInfo contactTech = null, AppServiceDomainStatus? registrationStatus = null, ProvisioningState? provisioningState = null, IEnumerable<string> nameServers = null, bool? isDomainPrivacyEnabled = null, DateTimeOffset? createdOn = null, DateTimeOffset? expireOn = null, DateTimeOffset? lastRenewedOn = null, bool? isAutoRenew = null, bool? isDnsRecordManagementReady = null, IEnumerable<AppServiceHostName> managedHostNames = null, DomainPurchaseConsent consent = null, IEnumerable<DomainNotRenewableReason> domainNotRenewableReasons = null, AppServiceDnsType? dnsType = null, string dnsZoneId = null, AppServiceDnsType? targetDnsType = null, string authCode = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();
            nameServers ??= new List<string>();
            managedHostNames ??= new List<AppServiceHostName>();
            domainNotRenewableReasons ??= new List<DomainNotRenewableReason>();

            return new AppServiceDomainData(id, name, resourceType, systemData, tags, location, contactAdmin, contactBilling, contactRegistrant, contactTech, registrationStatus, provisioningState, nameServers?.ToList(), isDomainPrivacyEnabled, createdOn, expireOn, lastRenewedOn, isAutoRenew, isDnsRecordManagementReady, managedHostNames?.ToList(), consent, domainNotRenewableReasons?.ToList(), dnsType, dnsZoneId, targetDnsType, authCode, kind);
        }

        /// <summary> Initializes a new instance of RegistrationContactInfo. </summary>
        /// <param name="addressMailing"> Mailing address. </param>
        /// <param name="email"> Email address. </param>
        /// <param name="fax"> Fax number. </param>
        /// <param name="jobTitle"> Job title. </param>
        /// <param name="nameFirst"> First name. </param>
        /// <param name="nameLast"> Last name. </param>
        /// <param name="nameMiddle"> Middle name. </param>
        /// <param name="organization"> Organization contact belongs to. </param>
        /// <param name="phone"> Phone number. </param>
        /// <returns> A new <see cref="Models.RegistrationContactInfo"/> instance for mocking. </returns>
        public static RegistrationContactInfo RegistrationContactInfo(RegistrationAddressInfo addressMailing = null, string email = null, string fax = null, string jobTitle = null, string nameFirst = null, string nameLast = null, string nameMiddle = null, string organization = null, string phone = null)
        {
            return new RegistrationContactInfo(addressMailing, email, fax, jobTitle, nameFirst, nameLast, nameMiddle, organization, phone);
        }

        /// <summary> Initializes a new instance of RegistrationAddressInfo. </summary>
        /// <param name="address1"> First line of an Address. </param>
        /// <param name="address2"> The second line of the Address. Optional. </param>
        /// <param name="city"> The city for the address. </param>
        /// <param name="country"> The country for the address. </param>
        /// <param name="postalCode"> The postal code for the address. </param>
        /// <param name="state"> The state or province for the address. </param>
        /// <returns> A new <see cref="Models.RegistrationAddressInfo"/> instance for mocking. </returns>
        public static RegistrationAddressInfo RegistrationAddressInfo(string address1 = null, string address2 = null, string city = null, string country = null, string postalCode = null, string state = null)
        {
            return new RegistrationAddressInfo(address1, address2, city, country, postalCode, state);
        }

        /// <summary> Initializes a new instance of AppServiceHostName. </summary>
        /// <param name="name"> Name of the hostname. </param>
        /// <param name="siteNames"> List of apps the hostname is assigned to. This list will have more than one app only if the hostname is pointing to a Traffic Manager. </param>
        /// <param name="azureResourceName"> Name of the Azure resource the hostname is assigned to. If it is assigned to a Traffic Manager then it will be the Traffic Manager name otherwise it will be the app name. </param>
        /// <param name="azureResourceType"> Type of the Azure resource the hostname is assigned to. </param>
        /// <param name="customHostNameDnsRecordType"> Type of the DNS record. </param>
        /// <param name="hostNameType"> Type of the hostname. </param>
        /// <returns> A new <see cref="Models.AppServiceHostName"/> instance for mocking. </returns>
        public static AppServiceHostName AppServiceHostName(string name = null, IEnumerable<string> siteNames = null, string azureResourceName = null, AppServiceResourceType? azureResourceType = null, CustomHostNameDnsRecordType? customHostNameDnsRecordType = null, AppServiceHostNameType? hostNameType = null)
        {
            siteNames ??= new List<string>();

            return new AppServiceHostName(name, siteNames?.ToList(), azureResourceName, azureResourceType, customHostNameDnsRecordType, hostNameType);
        }

        /// <summary> Initializes a new instance of DomainPurchaseConsent. </summary>
        /// <param name="agreementKeys"> List of applicable legal agreement keys. This list can be retrieved using ListLegalAgreements API under &lt;code&gt;TopLevelDomain&lt;/code&gt; resource. </param>
        /// <param name="agreedBy"> Client IP address. </param>
        /// <param name="agreedOn"> Timestamp when the agreements were accepted. </param>
        /// <returns> A new <see cref="Models.DomainPurchaseConsent"/> instance for mocking. </returns>
        public static DomainPurchaseConsent DomainPurchaseConsent(IEnumerable<string> agreementKeys = null, string agreedBy = null, DateTimeOffset? agreedOn = null)
        {
            agreementKeys ??= new List<string>();

            return new DomainPurchaseConsent(agreementKeys?.ToList(), agreedBy, agreedOn);
        }

        /// <summary> Initializes a new instance of DomainControlCenterSsoRequestInfo. </summary>
        /// <param name="uri"> URL where the single sign-on request is to be made. </param>
        /// <param name="postParameterKey"> Post parameter key. </param>
        /// <param name="postParameterValue"> Post parameter value. Client should use &apos;application/x-www-form-urlencoded&apos; encoding for this value. </param>
        /// <returns> A new <see cref="Models.DomainControlCenterSsoRequestInfo"/> instance for mocking. </returns>
        public static DomainControlCenterSsoRequestInfo DomainControlCenterSsoRequestInfo(Uri uri = null, string postParameterKey = null, string postParameterValue = null)
        {
            return new DomainControlCenterSsoRequestInfo(uri, postParameterKey, postParameterValue);
        }

        /// <summary> Initializes a new instance of AppServiceDomainPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="contactAdmin"> Administrative contact. </param>
        /// <param name="contactBilling"> Billing contact. </param>
        /// <param name="contactRegistrant"> Registrant contact. </param>
        /// <param name="contactTech"> Technical contact. </param>
        /// <param name="registrationStatus"> Domain registration status. </param>
        /// <param name="provisioningState"> Domain provisioning state. </param>
        /// <param name="nameServers"> Name servers. </param>
        /// <param name="isDomainPrivacyEnabled"> &lt;code&gt;true&lt;/code&gt; if domain privacy is enabled for this domain; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="createdOn"> Domain creation timestamp. </param>
        /// <param name="expireOn"> Domain expiration timestamp. </param>
        /// <param name="lastRenewedOn"> Timestamp when the domain was renewed last time. </param>
        /// <param name="isAutoRenew"> &lt;code&gt;true&lt;/code&gt; if the domain should be automatically renewed; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isReadyForDnsRecordManagement">
        /// &lt;code&gt;true&lt;/code&gt; if Azure can assign this domain to App Service apps; otherwise, &lt;code&gt;false&lt;/code&gt;. This value will be &lt;code&gt;true&lt;/code&gt; if domain registration status is active and 
        ///  it is hosted on name servers Azure has programmatic access to.
        /// </param>
        /// <param name="managedHostNames"> All hostnames derived from the domain and assigned to Azure resources. </param>
        /// <param name="consent"> Legal agreement consent. </param>
        /// <param name="domainNotRenewableReasons"> Reasons why domain is not renewable. </param>
        /// <param name="dnsType"> Current DNS type. </param>
        /// <param name="dnsZoneId"> Azure DNS Zone to use. </param>
        /// <param name="targetDnsType"> Target DNS type (would be used for migration). </param>
        /// <param name="authCode"></param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceDomainPatch"/> instance for mocking. </returns>
        public static AppServiceDomainPatch AppServiceDomainPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RegistrationContactInfo contactAdmin = null, RegistrationContactInfo contactBilling = null, RegistrationContactInfo contactRegistrant = null, RegistrationContactInfo contactTech = null, AppServiceDomainStatus? registrationStatus = null, ProvisioningState? provisioningState = null, IEnumerable<string> nameServers = null, bool? isDomainPrivacyEnabled = null, DateTimeOffset? createdOn = null, DateTimeOffset? expireOn = null, DateTimeOffset? lastRenewedOn = null, bool? isAutoRenew = null, bool? isReadyForDnsRecordManagement = null, IEnumerable<AppServiceHostName> managedHostNames = null, DomainPurchaseConsent consent = null, IEnumerable<DomainNotRenewableReason> domainNotRenewableReasons = null, AppServiceDnsType? dnsType = null, string dnsZoneId = null, AppServiceDnsType? targetDnsType = null, string authCode = null, string kind = null)
        {
            nameServers ??= new List<string>();
            managedHostNames ??= new List<AppServiceHostName>();
            domainNotRenewableReasons ??= new List<DomainNotRenewableReason>();

            return new AppServiceDomainPatch(id, name, resourceType, systemData, contactAdmin, contactBilling, contactRegistrant, contactTech, registrationStatus, provisioningState, nameServers?.ToList(), isDomainPrivacyEnabled, createdOn, expireOn, lastRenewedOn, isAutoRenew, isReadyForDnsRecordManagement, managedHostNames?.ToList(), consent, domainNotRenewableReasons?.ToList(), dnsType, dnsZoneId, targetDnsType, authCode, kind);
        }

        /// <summary> Initializes a new instance of DomainOwnershipIdentifierData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="ownershipId"> Ownership Id. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.DomainOwnershipIdentifierData"/> instance for mocking. </returns>
        public static DomainOwnershipIdentifierData DomainOwnershipIdentifierData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string ownershipId = null, string kind = null)
        {
            return new DomainOwnershipIdentifierData(id, name, resourceType, systemData, ownershipId, kind);
        }

        /// <summary> Initializes a new instance of TopLevelDomainData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="isDomainPrivacySupported"> If &lt;code&gt;true&lt;/code&gt;, then the top level domain supports domain privacy; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.TopLevelDomainData"/> instance for mocking. </returns>
        public static TopLevelDomainData TopLevelDomainData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? isDomainPrivacySupported = null, string kind = null)
        {
            return new TopLevelDomainData(id, name, resourceType, systemData, isDomainPrivacySupported, kind);
        }

        /// <summary> Initializes a new instance of TldLegalAgreement. </summary>
        /// <param name="agreementKey"> Unique identifier for the agreement. </param>
        /// <param name="title"> Agreement title. </param>
        /// <param name="content"> Agreement details. </param>
        /// <param name="uri"> URL where a copy of the agreement details is hosted. </param>
        /// <returns> A new <see cref="Models.TldLegalAgreement"/> instance for mocking. </returns>
        public static TldLegalAgreement TldLegalAgreement(string agreementKey = null, string title = null, string content = null, Uri uri = null)
        {
            return new TldLegalAgreement(agreementKey, title, content, uri);
        }

        /// <summary> Initializes a new instance of AppServiceEnvironmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> Provisioning state of the App Service Environment. </param>
        /// <param name="status"> Current status of the App Service Environment. </param>
        /// <param name="virtualNetwork"> Description of the Virtual Network. </param>
        /// <param name="internalLoadBalancingMode"> Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. </param>
        /// <param name="multiSize"> Front-end VM size, e.g. &quot;Medium&quot;, &quot;Large&quot;. </param>
        /// <param name="multiRoleCount"> Number of front-end instances. </param>
        /// <param name="ipSslAddressCount"> Number of IP SSL addresses reserved for the App Service Environment. </param>
        /// <param name="dnsSuffix"> DNS suffix of the App Service Environment. </param>
        /// <param name="maximumNumberOfMachines"> Maximum number of VMs in the App Service Environment. </param>
        /// <param name="frontEndScaleFactor"> Scale factor for front-ends. </param>
        /// <param name="isSuspended">
        /// &lt;code&gt;true&lt;/code&gt; if the App Service Environment is suspended; otherwise, &lt;code&gt;false&lt;/code&gt;. The environment can be suspended, e.g. when the management endpoint is no longer available
        ///  (most likely because NSG blocked the incoming traffic).
        /// </param>
        /// <param name="clusterSettings"> Custom settings for changing the behavior of the App Service Environment. </param>
        /// <param name="userWhitelistedIPRanges"> User added ip ranges to whitelist on ASE db. </param>
        /// <param name="hasLinuxWorkers"> Flag that displays whether an ASE has linux workers or not. </param>
        /// <param name="dedicatedHostCount"> Dedicated Host Count. </param>
        /// <param name="isZoneRedundant"> Whether or not this App Service Environment is zone-redundant. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppServiceEnvironmentData"/> instance for mocking. </returns>
        public static AppServiceEnvironmentData AppServiceEnvironmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? provisioningState = null, HostingEnvironmentStatus? status = null, AppServiceVirtualNetworkProfile virtualNetwork = null, LoadBalancingMode? internalLoadBalancingMode = null, string multiSize = null, int? multiRoleCount = null, int? ipSslAddressCount = null, string dnsSuffix = null, int? maximumNumberOfMachines = null, int? frontEndScaleFactor = null, bool? isSuspended = null, IEnumerable<AppServiceNameValuePair> clusterSettings = null, IEnumerable<string> userWhitelistedIPRanges = null, bool? hasLinuxWorkers = null, int? dedicatedHostCount = null, bool? isZoneRedundant = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();
            clusterSettings ??= new List<AppServiceNameValuePair>();
            userWhitelistedIPRanges ??= new List<string>();

            return new AppServiceEnvironmentData(id, name, resourceType, systemData, tags, location, provisioningState, status, virtualNetwork, internalLoadBalancingMode, multiSize, multiRoleCount, ipSslAddressCount, dnsSuffix, maximumNumberOfMachines, frontEndScaleFactor, isSuspended, clusterSettings?.ToList(), userWhitelistedIPRanges?.ToList(), hasLinuxWorkers, dedicatedHostCount, isZoneRedundant, kind);
        }

        /// <summary> Initializes a new instance of AppServiceEnvironmentProperties. </summary>
        /// <param name="provisioningState"> Provisioning state of the App Service Environment. </param>
        /// <param name="status"> Current status of the App Service Environment. </param>
        /// <param name="virtualNetwork"> Description of the Virtual Network. </param>
        /// <param name="internalLoadBalancingMode"> Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. </param>
        /// <param name="multiSize"> Front-end VM size, e.g. &quot;Medium&quot;, &quot;Large&quot;. </param>
        /// <param name="multiRoleCount"> Number of front-end instances. </param>
        /// <param name="ipSslAddressCount"> Number of IP SSL addresses reserved for the App Service Environment. </param>
        /// <param name="dnsSuffix"> DNS suffix of the App Service Environment. </param>
        /// <param name="maximumNumberOfMachines"> Maximum number of VMs in the App Service Environment. </param>
        /// <param name="frontEndScaleFactor"> Scale factor for front-ends. </param>
        /// <param name="isSuspended">
        /// &lt;code&gt;true&lt;/code&gt; if the App Service Environment is suspended; otherwise, &lt;code&gt;false&lt;/code&gt;. The environment can be suspended, e.g. when the management endpoint is no longer available
        ///  (most likely because NSG blocked the incoming traffic).
        /// </param>
        /// <param name="clusterSettings"> Custom settings for changing the behavior of the App Service Environment. </param>
        /// <param name="userWhitelistedIPRanges"> User added ip ranges to whitelist on ASE db. </param>
        /// <param name="hasLinuxWorkers"> Flag that displays whether an ASE has linux workers or not. </param>
        /// <param name="dedicatedHostCount"> Dedicated Host Count. </param>
        /// <param name="isZoneRedundant"> Whether or not this App Service Environment is zone-redundant. </param>
        /// <returns> A new <see cref="Models.AppServiceEnvironmentProperties"/> instance for mocking. </returns>
        public static AppServiceEnvironmentProperties AppServiceEnvironmentProperties(ProvisioningState? provisioningState = null, HostingEnvironmentStatus? status = null, AppServiceVirtualNetworkProfile virtualNetwork = null, LoadBalancingMode? internalLoadBalancingMode = null, string multiSize = null, int? multiRoleCount = null, int? ipSslAddressCount = null, string dnsSuffix = null, int? maximumNumberOfMachines = null, int? frontEndScaleFactor = null, bool? isSuspended = null, IEnumerable<AppServiceNameValuePair> clusterSettings = null, IEnumerable<string> userWhitelistedIPRanges = null, bool? hasLinuxWorkers = null, int? dedicatedHostCount = null, bool? isZoneRedundant = null)
        {
            clusterSettings ??= new List<AppServiceNameValuePair>();
            userWhitelistedIPRanges ??= new List<string>();

            return new AppServiceEnvironmentProperties(provisioningState, status, virtualNetwork, internalLoadBalancingMode, multiSize, multiRoleCount, ipSslAddressCount, dnsSuffix, maximumNumberOfMachines, frontEndScaleFactor, isSuspended, clusterSettings?.ToList(), userWhitelistedIPRanges?.ToList(), hasLinuxWorkers, dedicatedHostCount, isZoneRedundant);
        }

        /// <summary> Initializes a new instance of AppServiceVirtualNetworkProfile. </summary>
        /// <param name="id"> Resource id of the Virtual Network. </param>
        /// <param name="name"> Name of the Virtual Network (read-only). </param>
        /// <param name="resourceType"> Resource type of the Virtual Network (read-only). </param>
        /// <param name="subnet"> Subnet within the Virtual Network. </param>
        /// <returns> A new <see cref="Models.AppServiceVirtualNetworkProfile"/> instance for mocking. </returns>
        public static AppServiceVirtualNetworkProfile AppServiceVirtualNetworkProfile(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null, string subnet = null)
        {
            return new AppServiceVirtualNetworkProfile(id, name, resourceType, subnet);
        }

        /// <summary> Initializes a new instance of AppServiceNameValuePair. </summary>
        /// <param name="name"> Pair name. </param>
        /// <param name="value"> Pair value. </param>
        /// <returns> A new <see cref="Models.AppServiceNameValuePair"/> instance for mocking. </returns>
        public static AppServiceNameValuePair AppServiceNameValuePair(string name = null, string value = null)
        {
            return new AppServiceNameValuePair(name, value);
        }

        /// <summary> Initializes a new instance of AppServiceEnvironmentPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning state of the App Service Environment. </param>
        /// <param name="status"> Current status of the App Service Environment. </param>
        /// <param name="virtualNetwork"> Description of the Virtual Network. </param>
        /// <param name="internalLoadBalancingMode"> Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. </param>
        /// <param name="multiSize"> Front-end VM size, e.g. &quot;Medium&quot;, &quot;Large&quot;. </param>
        /// <param name="multiRoleCount"> Number of front-end instances. </param>
        /// <param name="ipSslAddressCount"> Number of IP SSL addresses reserved for the App Service Environment. </param>
        /// <param name="dnsSuffix"> DNS suffix of the App Service Environment. </param>
        /// <param name="maximumNumberOfMachines"> Maximum number of VMs in the App Service Environment. </param>
        /// <param name="frontEndScaleFactor"> Scale factor for front-ends. </param>
        /// <param name="isSuspended">
        /// &lt;code&gt;true&lt;/code&gt; if the App Service Environment is suspended; otherwise, &lt;code&gt;false&lt;/code&gt;. The environment can be suspended, e.g. when the management endpoint is no longer available
        ///  (most likely because NSG blocked the incoming traffic).
        /// </param>
        /// <param name="clusterSettings"> Custom settings for changing the behavior of the App Service Environment. </param>
        /// <param name="userWhitelistedIPRanges"> User added ip ranges to whitelist on ASE db. </param>
        /// <param name="hasLinuxWorkers"> Flag that displays whether an ASE has linux workers or not. </param>
        /// <param name="dedicatedHostCount"> Dedicated Host Count. </param>
        /// <param name="isZoneRedundant"> Whether or not this App Service Environment is zone-redundant. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceEnvironmentPatch"/> instance for mocking. </returns>
        public static AppServiceEnvironmentPatch AppServiceEnvironmentPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ProvisioningState? provisioningState = null, HostingEnvironmentStatus? status = null, AppServiceVirtualNetworkProfile virtualNetwork = null, LoadBalancingMode? internalLoadBalancingMode = null, string multiSize = null, int? multiRoleCount = null, int? ipSslAddressCount = null, string dnsSuffix = null, int? maximumNumberOfMachines = null, int? frontEndScaleFactor = null, bool? isSuspended = null, IEnumerable<AppServiceNameValuePair> clusterSettings = null, IEnumerable<string> userWhitelistedIPRanges = null, bool? hasLinuxWorkers = null, int? dedicatedHostCount = null, bool? isZoneRedundant = null, string kind = null)
        {
            clusterSettings ??= new List<AppServiceNameValuePair>();
            userWhitelistedIPRanges ??= new List<string>();

            return new AppServiceEnvironmentPatch(id, name, resourceType, systemData, provisioningState, status, virtualNetwork, internalLoadBalancingMode, multiSize, multiRoleCount, ipSslAddressCount, dnsSuffix, maximumNumberOfMachines, frontEndScaleFactor, isSuspended, clusterSettings?.ToList(), userWhitelistedIPRanges?.ToList(), hasLinuxWorkers, dedicatedHostCount, isZoneRedundant, kind);
        }

        /// <summary> Initializes a new instance of StampCapacity. </summary>
        /// <param name="name"> Name of the stamp. </param>
        /// <param name="availableCapacity"> Available capacity (# of machines, bytes of storage etc...). </param>
        /// <param name="totalCapacity"> Total capacity (# of machines, bytes of storage etc...). </param>
        /// <param name="unit"> Name of the unit. </param>
        /// <param name="computeMode"> Shared/dedicated workers. </param>
        /// <param name="workerSize"> Size of the machines. </param>
        /// <param name="workerSizeId">
        /// Size ID of machines: 
        /// 0 - Small
        /// 1 - Medium
        /// 2 - Large
        /// </param>
        /// <param name="excludeFromCapacityAllocation">
        /// If &lt;code&gt;true&lt;/code&gt;, it includes basic apps.
        /// Basic apps are not used for capacity allocation.
        /// </param>
        /// <param name="isApplicableForAllComputeModes"> &lt;code&gt;true&lt;/code&gt; if capacity is applicable for all apps; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="siteMode"> Shared or Dedicated. </param>
        /// <param name="isLinux"> Is this a linux stamp capacity. </param>
        /// <returns> A new <see cref="Models.StampCapacity"/> instance for mocking. </returns>
        public static StampCapacity StampCapacity(string name = null, long? availableCapacity = null, long? totalCapacity = null, string unit = null, ComputeModeOption? computeMode = null, WorkerSizeOption? workerSize = null, int? workerSizeId = null, bool? excludeFromCapacityAllocation = null, bool? isApplicableForAllComputeModes = null, string siteMode = null, bool? isLinux = null)
        {
            return new StampCapacity(name, availableCapacity, totalCapacity, unit, computeMode, workerSize, workerSizeId, excludeFromCapacityAllocation, isApplicableForAllComputeModes, siteMode, isLinux);
        }

        /// <summary> Initializes a new instance of AppServiceEnvironmentAddressResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="serviceIPAddress"> Main public virtual IP. </param>
        /// <param name="internalIPAddress"> Virtual Network internal IP address of the App Service Environment if it is in internal load-balancing mode. </param>
        /// <param name="outboundIPAddresses"> IP addresses appearing on outbound connections. </param>
        /// <param name="virtualIPMappings"> Additional virtual IPs. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceEnvironmentAddressResult"/> instance for mocking. </returns>
        public static AppServiceEnvironmentAddressResult AppServiceEnvironmentAddressResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IPAddress serviceIPAddress = null, IPAddress internalIPAddress = null, IEnumerable<IPAddress> outboundIPAddresses = null, IEnumerable<VirtualIPMapping> virtualIPMappings = null, string kind = null)
        {
            outboundIPAddresses ??= new List<IPAddress>();
            virtualIPMappings ??= new List<VirtualIPMapping>();

            return new AppServiceEnvironmentAddressResult(id, name, resourceType, systemData, serviceIPAddress, internalIPAddress, outboundIPAddresses?.ToList(), virtualIPMappings?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of VirtualIPMapping. </summary>
        /// <param name="virtualIP"> Virtual IP address. </param>
        /// <param name="internalHttpPort"> Internal HTTP port. </param>
        /// <param name="internalHttpsPort"> Internal HTTPS port. </param>
        /// <param name="isInUse"> Is virtual IP mapping in use. </param>
        /// <param name="serviceName"> name of the service that virtual IP is assigned to. </param>
        /// <returns> A new <see cref="Models.VirtualIPMapping"/> instance for mocking. </returns>
        public static VirtualIPMapping VirtualIPMapping(string virtualIP = null, int? internalHttpPort = null, int? internalHttpsPort = null, bool? isInUse = null, string serviceName = null)
        {
            return new VirtualIPMapping(virtualIP, internalHttpPort, internalHttpsPort, isInUse, serviceName);
        }

        /// <summary> Initializes a new instance of AseV3NetworkingConfigurationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="windowsOutboundIPAddresses"></param>
        /// <param name="linuxOutboundIPAddresses"></param>
        /// <param name="externalInboundIPAddresses"></param>
        /// <param name="internalInboundIPAddresses"></param>
        /// <param name="allowNewPrivateEndpointConnections"> Property to enable and disable new private endpoint connection creation on ASE. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AseV3NetworkingConfigurationData"/> instance for mocking. </returns>
        public static AseV3NetworkingConfigurationData AseV3NetworkingConfigurationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<IPAddress> windowsOutboundIPAddresses = null, IEnumerable<IPAddress> linuxOutboundIPAddresses = null, IEnumerable<IPAddress> externalInboundIPAddresses = null, IEnumerable<IPAddress> internalInboundIPAddresses = null, bool? allowNewPrivateEndpointConnections = null, string kind = null)
        {
            windowsOutboundIPAddresses ??= new List<IPAddress>();
            linuxOutboundIPAddresses ??= new List<IPAddress>();
            externalInboundIPAddresses ??= new List<IPAddress>();
            internalInboundIPAddresses ??= new List<IPAddress>();

            return new AseV3NetworkingConfigurationData(id, name, resourceType, systemData, windowsOutboundIPAddresses?.ToList(), linuxOutboundIPAddresses?.ToList(), externalInboundIPAddresses?.ToList(), internalInboundIPAddresses?.ToList(), allowNewPrivateEndpointConnections, kind);
        }

        /// <summary> Initializes a new instance of HostingEnvironmentDiagnostics. </summary>
        /// <param name="name"> Name/identifier of the diagnostics. </param>
        /// <param name="diagnosticsOutput"> Diagnostics output. </param>
        /// <returns> A new <see cref="Models.HostingEnvironmentDiagnostics"/> instance for mocking. </returns>
        public static HostingEnvironmentDiagnostics HostingEnvironmentDiagnostics(string name = null, string diagnosticsOutput = null)
        {
            return new HostingEnvironmentDiagnostics(name, diagnosticsOutput);
        }

        /// <summary> Initializes a new instance of InboundEnvironmentEndpoint. </summary>
        /// <param name="description"> Short text describing the purpose of the network traffic. </param>
        /// <param name="endpoints"> The IP addresses that network traffic will originate from in cidr notation. </param>
        /// <param name="ports"> The ports that network traffic will arrive to the App Service Environment at. </param>
        /// <returns> A new <see cref="Models.InboundEnvironmentEndpoint"/> instance for mocking. </returns>
        public static InboundEnvironmentEndpoint InboundEnvironmentEndpoint(string description = null, IEnumerable<string> endpoints = null, IEnumerable<string> ports = null)
        {
            endpoints ??= new List<string>();
            ports ??= new List<string>();

            return new InboundEnvironmentEndpoint(description, endpoints?.ToList(), ports?.ToList());
        }

        /// <summary> Initializes a new instance of AppServiceWorkerPoolData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="sku"> Description of a SKU for a scalable resource. </param>
        /// <param name="workerSizeId"> Worker size ID for referencing this worker pool. </param>
        /// <param name="computeMode"> Shared or dedicated app hosting. </param>
        /// <param name="workerSize"> VM size of the worker pool instances. </param>
        /// <param name="workerCount"> Number of instances in the worker pool. </param>
        /// <param name="instanceNames"> Names of all instances in the worker pool (read only). </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppServiceWorkerPoolData"/> instance for mocking. </returns>
        public static AppServiceWorkerPoolData AppServiceWorkerPoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AppServiceSkuDescription sku = null, int? workerSizeId = null, ComputeModeOption? computeMode = null, string workerSize = null, int? workerCount = null, IEnumerable<string> instanceNames = null, string kind = null)
        {
            instanceNames ??= new List<string>();

            return new AppServiceWorkerPoolData(id, name, resourceType, systemData, sku, workerSizeId, computeMode, workerSize, workerCount, instanceNames?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of AppServiceSkuDescription. </summary>
        /// <param name="name"> Name of the resource SKU. </param>
        /// <param name="tier"> Service tier of the resource SKU. </param>
        /// <param name="size"> Size specifier of the resource SKU. </param>
        /// <param name="family"> Family code of the resource SKU. </param>
        /// <param name="capacity"> Current number of instances assigned to the resource. </param>
        /// <param name="skuCapacity"> Min, max, and default scale values of the SKU. </param>
        /// <param name="locations"> Locations of the SKU. </param>
        /// <param name="capabilities"> Capabilities of the SKU, e.g., is traffic manager enabled?. </param>
        /// <returns> A new <see cref="Models.AppServiceSkuDescription"/> instance for mocking. </returns>
        public static AppServiceSkuDescription AppServiceSkuDescription(string name = null, string tier = null, string size = null, string family = null, int? capacity = null, AppServiceSkuCapacity skuCapacity = null, IEnumerable<AzureLocation> locations = null, IEnumerable<AppServiceSkuCapability> capabilities = null)
        {
            locations ??= new List<AzureLocation>();
            capabilities ??= new List<AppServiceSkuCapability>();

            return new AppServiceSkuDescription(name, tier, size, family, capacity, skuCapacity, locations?.ToList(), capabilities?.ToList());
        }

        /// <summary> Initializes a new instance of AppServiceSkuCapacity. </summary>
        /// <param name="minimum"> Minimum number of workers for this App Service plan SKU. </param>
        /// <param name="maximum"> Maximum number of workers for this App Service plan SKU. </param>
        /// <param name="elasticMaximum"> Maximum number of Elastic workers for this App Service plan SKU. </param>
        /// <param name="default"> Default number of workers for this App Service plan SKU. </param>
        /// <param name="scaleType"> Available scale configurations for an App Service plan. </param>
        /// <returns> A new <see cref="Models.AppServiceSkuCapacity"/> instance for mocking. </returns>
        public static AppServiceSkuCapacity AppServiceSkuCapacity(int? minimum = null, int? maximum = null, int? elasticMaximum = null, int? @default = null, string scaleType = null)
        {
            return new AppServiceSkuCapacity(minimum, maximum, elasticMaximum, @default, scaleType);
        }

        /// <summary> Initializes a new instance of AppServiceSkuCapability. </summary>
        /// <param name="name"> Name of the SKU capability. </param>
        /// <param name="value"> Value of the SKU capability. </param>
        /// <param name="reason"> Reason of the SKU capability. </param>
        /// <returns> A new <see cref="Models.AppServiceSkuCapability"/> instance for mocking. </returns>
        public static AppServiceSkuCapability AppServiceSkuCapability(string name = null, string value = null, string reason = null)
        {
            return new AppServiceSkuCapability(name, value, reason);
        }

        /// <summary> Initializes a new instance of ResourceMetricDefinition. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="unit"> Unit of the metric. </param>
        /// <param name="primaryAggregationType"> Primary aggregation type. </param>
        /// <param name="metricAvailabilities"> List of time grains supported for the metric together with retention period. </param>
        /// <param name="resourceUri"> Resource URI. </param>
        /// <param name="properties"> Resource metric definition properties. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.ResourceMetricDefinition"/> instance for mocking. </returns>
        public static ResourceMetricDefinition ResourceMetricDefinition(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string unit = null, string primaryAggregationType = null, IEnumerable<ResourceMetricAvailability> metricAvailabilities = null, Uri resourceUri = null, IReadOnlyDictionary<string, string> properties = null, string kind = null)
        {
            metricAvailabilities ??= new List<ResourceMetricAvailability>();
            properties ??= new Dictionary<string, string>();

            return new ResourceMetricDefinition(id, name, resourceType, systemData, unit, primaryAggregationType, metricAvailabilities?.ToList(), resourceUri, properties, kind);
        }

        /// <summary> Initializes a new instance of ResourceMetricAvailability. </summary>
        /// <param name="timeGrain"> Time grain . </param>
        /// <param name="retention"> Retention period for the current time grain. </param>
        /// <returns> A new <see cref="Models.ResourceMetricAvailability"/> instance for mocking. </returns>
        public static ResourceMetricAvailability ResourceMetricAvailability(string timeGrain = null, string retention = null)
        {
            return new ResourceMetricAvailability(timeGrain, retention);
        }

        /// <summary> Initializes a new instance of AppServicePoolSkuInfo. </summary>
        /// <param name="resourceType"> Resource type that this SKU applies to. </param>
        /// <param name="sku"> Name and tier of the SKU. </param>
        /// <param name="capacity"> Min, max, and default scale values of the SKU. </param>
        /// <returns> A new <see cref="Models.AppServicePoolSkuInfo"/> instance for mocking. </returns>
        public static AppServicePoolSkuInfo AppServicePoolSkuInfo(ResourceType? resourceType = null, AppServiceSkuDescription sku = null, AppServiceSkuCapacity capacity = null)
        {
            return new AppServicePoolSkuInfo(resourceType, sku, capacity);
        }

        /// <summary> Initializes a new instance of AppServiceUsage. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="displayName"> Friendly name shown in the UI. </param>
        /// <param name="resourceName"> Name of the quota resource. </param>
        /// <param name="unit"> Units of measurement for the quota resource. </param>
        /// <param name="currentValue"> The current value of the resource counter. </param>
        /// <param name="limit"> The resource limit. </param>
        /// <param name="nextResetOn"> Next reset time for the resource counter. </param>
        /// <param name="computeMode"> Compute mode used for this usage. </param>
        /// <param name="siteMode"> Site mode used for this usage. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceUsage"/> instance for mocking. </returns>
        public static AppServiceUsage AppServiceUsage(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string displayName = null, string resourceName = null, string unit = null, long? currentValue = null, long? limit = null, DateTimeOffset? nextResetOn = null, ComputeModeOption? computeMode = null, string siteMode = null, string kind = null)
        {
            return new AppServiceUsage(id, name, resourceType, systemData, displayName, resourceName, unit, currentValue, limit, nextResetOn, computeMode, siteMode, kind);
        }

        /// <summary> Initializes a new instance of AppServiceOperation. </summary>
        /// <param name="id"> Operation ID. </param>
        /// <param name="name"> Operation name. </param>
        /// <param name="status"> The current status of the operation. </param>
        /// <param name="errors"> Any errors associate with the operation. </param>
        /// <param name="createdOn"> Time when operation has started. </param>
        /// <param name="modifiedOn"> Time when operation has been updated. </param>
        /// <param name="expireOn"> Time when operation will expire. </param>
        /// <param name="geoMasterOperationId"> Applicable only for stamp operation ids. </param>
        /// <returns> A new <see cref="Models.AppServiceOperation"/> instance for mocking. </returns>
        public static AppServiceOperation AppServiceOperation(string id = null, string name = null, AppServiceOperationStatus? status = null, IEnumerable<ResponseError> errors = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, DateTimeOffset? expireOn = null, Guid? geoMasterOperationId = null)
        {
            errors ??= new List<ResponseError>();

            return new AppServiceOperation(id, name, status, errors?.ToList(), createdOn, modifiedOn, expireOn, geoMasterOperationId);
        }

        /// <summary> Initializes a new instance of OutboundEnvironmentEndpoint. </summary>
        /// <param name="category"> The type of service accessed by the App Service Environment, e.g., Azure Storage, Azure SQL Database, and Azure Active Directory. </param>
        /// <param name="endpoints"> The endpoints that the App Service Environment reaches the service at. </param>
        /// <returns> A new <see cref="Models.OutboundEnvironmentEndpoint"/> instance for mocking. </returns>
        public static OutboundEnvironmentEndpoint OutboundEnvironmentEndpoint(string category = null, IEnumerable<AppServiceEndpointDependency> endpoints = null)
        {
            endpoints ??= new List<AppServiceEndpointDependency>();

            return new OutboundEnvironmentEndpoint(category, endpoints?.ToList());
        }

        /// <summary> Initializes a new instance of AppServiceEndpointDependency. </summary>
        /// <param name="domainName"> The domain name of the dependency. </param>
        /// <param name="endpointDetails"> The IP Addresses and Ports used when connecting to DomainName. </param>
        /// <returns> A new <see cref="Models.AppServiceEndpointDependency"/> instance for mocking. </returns>
        public static AppServiceEndpointDependency AppServiceEndpointDependency(string domainName = null, IEnumerable<AppServiceEndpointDetail> endpointDetails = null)
        {
            endpointDetails ??= new List<AppServiceEndpointDetail>();

            return new AppServiceEndpointDependency(domainName, endpointDetails?.ToList());
        }

        /// <summary> Initializes a new instance of AppServiceEndpointDetail. </summary>
        /// <param name="ipAddress"> An IP Address that Domain Name currently resolves to. </param>
        /// <param name="port"> The port an endpoint is connected to. </param>
        /// <param name="latency"> The time in milliseconds it takes for a TCP connection to be created from the App Service Environment to this IpAddress at this Port. </param>
        /// <param name="isAccessible"> Whether it is possible to create a TCP connection from the App Service Environment to this IpAddress at this Port. </param>
        /// <returns> A new <see cref="Models.AppServiceEndpointDetail"/> instance for mocking. </returns>
        public static AppServiceEndpointDetail AppServiceEndpointDetail(IPAddress ipAddress = null, int? port = null, double? latency = null, bool? isAccessible = null)
        {
            return new AppServiceEndpointDetail(ipAddress, port, latency, isAccessible);
        }

        /// <summary> Initializes a new instance of RemotePrivateEndpointConnectionARMResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"></param>
        /// <param name="privateEndpointId"> PrivateEndpoint of a remote private endpoint connection. </param>
        /// <param name="privateLinkServiceConnectionState"> The state of a private link connection. </param>
        /// <param name="ipAddresses"> Private IPAddresses mapped to the remote private endpoint. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.RemotePrivateEndpointConnectionARMResourceData"/> instance for mocking. </returns>
        public static RemotePrivateEndpointConnectionARMResourceData RemotePrivateEndpointConnectionARMResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provisioningState = null, ResourceIdentifier privateEndpointId = null, PrivateLinkConnectionState privateLinkServiceConnectionState = null, IEnumerable<IPAddress> ipAddresses = null, string kind = null)
        {
            ipAddresses ??= new List<IPAddress>();

            return new RemotePrivateEndpointConnectionARMResourceData(id, name, resourceType, systemData, provisioningState, ResourceManagerModelFactory.SubResource(privateEndpointId), privateLinkServiceConnectionState, ipAddresses?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of PrivateLinkConnectionState. </summary>
        /// <param name="status"> Status of a private link connection. </param>
        /// <param name="description"> Description of a private link connection. </param>
        /// <param name="actionsRequired"> ActionsRequired for a private link connection. </param>
        /// <returns> A new <see cref="Models.PrivateLinkConnectionState"/> instance for mocking. </returns>
        public static PrivateLinkConnectionState PrivateLinkConnectionState(string status = null, string description = null, string actionsRequired = null)
        {
            return new PrivateLinkConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of PrivateLinkConnectionApprovalRequestInfo. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="privateLinkServiceConnectionState"> The state of a private link connection. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.PrivateLinkConnectionApprovalRequestInfo"/> instance for mocking. </returns>
        public static PrivateLinkConnectionApprovalRequestInfo PrivateLinkConnectionApprovalRequestInfo(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateLinkConnectionState privateLinkServiceConnectionState = null, string kind = null)
        {
            return new PrivateLinkConnectionApprovalRequestInfo(id, name, resourceType, systemData, privateLinkServiceConnectionState, kind);
        }

        /// <summary> Initializes a new instance of AppServicePrivateLinkResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of a private link resource. </param>
        /// <returns> A new <see cref="Models.AppServicePrivateLinkResourceData"/> instance for mocking. </returns>
        public static AppServicePrivateLinkResourceData AppServicePrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AppServicePrivateLinkResourceProperties properties = null)
        {
            return new AppServicePrivateLinkResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of AppServicePrivateLinkResourceProperties. </summary>
        /// <param name="groupId"> GroupId of a private link resource. </param>
        /// <param name="requiredMembers"> RequiredMembers of a private link resource. </param>
        /// <param name="requiredZoneNames"> RequiredZoneNames of a private link resource. </param>
        /// <returns> A new <see cref="Models.AppServicePrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static AppServicePrivateLinkResourceProperties AppServicePrivateLinkResourceProperties(string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new AppServicePrivateLinkResourceProperties(groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList());
        }

        /// <summary> Initializes a new instance of AppServicePlanData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> Description of a SKU for a scalable resource. </param>
        /// <param name="extendedLocation"> Extended Location. </param>
        /// <param name="workerTierName"> Target worker tier assigned to the App Service plan. </param>
        /// <param name="status"> App Service plan status. </param>
        /// <param name="subscription"> App Service plan subscription. </param>
        /// <param name="hostingEnvironmentProfile"> Specification for the App Service Environment to use for the App Service plan. </param>
        /// <param name="maximumNumberOfWorkers"> Maximum number of instances that can be assigned to this App Service plan. </param>
        /// <param name="geoRegion"> Geographical location for the App Service plan. </param>
        /// <param name="isPerSiteScaling">
        /// If &lt;code&gt;true&lt;/code&gt;, apps assigned to this App Service plan can be scaled independently.
        /// If &lt;code&gt;false&lt;/code&gt;, apps assigned to this App Service plan will scale to all instances of the plan.
        /// </param>
        /// <param name="isElasticScaleEnabled"> ServerFarm supports ElasticScale. Apps in this plan will scale as if the ServerFarm was ElasticPremium sku. </param>
        /// <param name="maximumElasticWorkerCount"> Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan. </param>
        /// <param name="numberOfSites"> Number of apps assigned to this App Service plan. </param>
        /// <param name="isSpot"> If &lt;code&gt;true&lt;/code&gt;, this App Service Plan owns spot instances. </param>
        /// <param name="spotExpireOn"> The time when the server farm expires. Valid only if it is a spot server farm. </param>
        /// <param name="freeOfferExpireOn"> The time when the server farm free offer expires. </param>
        /// <param name="resourceGroup"> Resource group of the App Service plan. </param>
        /// <param name="isReserved"> If Linux app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise. </param>
        /// <param name="isXenon"> Obsolete: If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise. </param>
        /// <param name="isHyperV"> If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise. </param>
        /// <param name="targetWorkerCount"> Scaling worker count. </param>
        /// <param name="targetWorkerSizeId"> Scaling worker size ID. </param>
        /// <param name="provisioningState"> Provisioning state of the App Service Plan. </param>
        /// <param name="kubeEnvironmentProfile"> Specification for the Kubernetes Environment to use for the App Service plan. </param>
        /// <param name="isZoneRedundant">
        /// If &lt;code&gt;true&lt;/code&gt;, this App Service Plan will perform availability zone balancing.
        /// If &lt;code&gt;false&lt;/code&gt;, this App Service Plan will not perform availability zone balancing.
        /// </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppServicePlanData"/> instance for mocking. </returns>
        public static AppServicePlanData AppServicePlanData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, AppServiceSkuDescription sku = null, ExtendedLocation extendedLocation = null, string workerTierName = null, AppServicePlanStatus? status = null, string subscription = null, HostingEnvironmentProfile hostingEnvironmentProfile = null, int? maximumNumberOfWorkers = null, string geoRegion = null, bool? isPerSiteScaling = null, bool? isElasticScaleEnabled = null, int? maximumElasticWorkerCount = null, int? numberOfSites = null, bool? isSpot = null, DateTimeOffset? spotExpireOn = null, DateTimeOffset? freeOfferExpireOn = null, string resourceGroup = null, bool? isReserved = null, bool? isXenon = null, bool? isHyperV = null, int? targetWorkerCount = null, int? targetWorkerSizeId = null, ProvisioningState? provisioningState = null, KubeEnvironmentProfile kubeEnvironmentProfile = null, bool? isZoneRedundant = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AppServicePlanData(id, name, resourceType, systemData, tags, location, sku, extendedLocation, workerTierName, status, subscription, hostingEnvironmentProfile, maximumNumberOfWorkers, geoRegion, isPerSiteScaling, isElasticScaleEnabled, maximumElasticWorkerCount, numberOfSites, isSpot, spotExpireOn, freeOfferExpireOn, resourceGroup, isReserved, isXenon, isHyperV, targetWorkerCount, targetWorkerSizeId, provisioningState, kubeEnvironmentProfile, isZoneRedundant, kind);
        }

        /// <summary> Initializes a new instance of HostingEnvironmentProfile. </summary>
        /// <param name="id"> Resource ID of the App Service Environment. </param>
        /// <param name="name"> Name of the App Service Environment. </param>
        /// <param name="resourceType"> Resource type of the App Service Environment. </param>
        /// <returns> A new <see cref="Models.HostingEnvironmentProfile"/> instance for mocking. </returns>
        public static HostingEnvironmentProfile HostingEnvironmentProfile(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null)
        {
            return new HostingEnvironmentProfile(id, name, resourceType);
        }

        /// <summary> Initializes a new instance of KubeEnvironmentProfile. </summary>
        /// <param name="id"> Resource ID of the Kubernetes Environment. </param>
        /// <param name="name"> Name of the Kubernetes Environment. </param>
        /// <param name="resourceType"> Resource type of the Kubernetes Environment. </param>
        /// <returns> A new <see cref="Models.KubeEnvironmentProfile"/> instance for mocking. </returns>
        public static KubeEnvironmentProfile KubeEnvironmentProfile(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null)
        {
            return new KubeEnvironmentProfile(id, name, resourceType);
        }

        /// <summary> Initializes a new instance of WebSiteData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed service identity. </param>
        /// <param name="extendedLocation"> Extended Location. </param>
        /// <param name="state"> Current state of the app. </param>
        /// <param name="hostNames"> Hostnames associated with the app. </param>
        /// <param name="repositorySiteName"> Name of the repository site. </param>
        /// <param name="usageState"> State indicating whether the app has exceeded its quota usage. Read-only. </param>
        /// <param name="isEnabled"> &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the app offline). </param>
        /// <param name="enabledHostNames">
        /// Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
        /// the app is not served on those hostnames.
        /// </param>
        /// <param name="availabilityState"> Management information availability state for the app. </param>
        /// <param name="hostNameSslStates"> Hostname SSL states are used to manage the SSL bindings for app&apos;s hostnames. </param>
        /// <param name="appServicePlanId"> Resource ID of the associated App Service plan, formatted as: &quot;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&quot;. </param>
        /// <param name="isReserved"> &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isXenon"> Obsolete: Hyper-V sandbox. </param>
        /// <param name="isHyperV"> Hyper-V sandbox. </param>
        /// <param name="lastModifiedTimeUtc"> Last time the app was modified, in UTC. Read-only. </param>
        /// <param name="siteConfig"> Configuration of the app. </param>
        /// <param name="trafficManagerHostNames"> Azure Traffic Manager hostnames associated with the app. Read-only. </param>
        /// <param name="isScmSiteAlsoStopped"> &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="targetSwapSlot"> Specifies which deployment slot this app will swap into. Read-only. </param>
        /// <param name="hostingEnvironmentProfile"> App Service Environment to use for the app. </param>
        /// <param name="isClientAffinityEnabled"> &lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="isClientCertEnabled"> &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="clientCertMode">
        /// This composes with ClientCertEnabled setting.
        /// - ClientCertEnabled: false means ClientCert is ignored.
        /// - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
        /// - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
        /// </param>
        /// <param name="clientCertExclusionPaths"> client certificate authentication comma-separated exclusion paths. </param>
        /// <param name="isHostNameDisabled">
        /// &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        ///  If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management process.
        /// </param>
        /// <param name="customDomainVerificationId"> Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification. </param>
        /// <param name="outboundIPAddresses"> List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only. </param>
        /// <param name="possibleOutboundIPAddresses"> List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only. </param>
        /// <param name="containerSize"> Size of the function container. </param>
        /// <param name="dailyMemoryTimeQuota"> Maximum allowed daily memory-time quota (applicable on dynamic apps only). </param>
        /// <param name="suspendOn"> App suspended till in case memory-time quota is exceeded. </param>
        /// <param name="maxNumberOfWorkers">
        /// Maximum number of workers.
        /// This only applies to Functions container.
        /// </param>
        /// <param name="cloningInfo"> If specified during app creation, the app is cloned from a source app. </param>
        /// <param name="resourceGroup"> Name of the resource group the app belongs to. Read-only. </param>
        /// <param name="isDefaultContainer"> &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="defaultHostName"> Default hostname of the app. Read-only. </param>
        /// <param name="slotSwapStatus"> Status of the last deployment slot swap operation. </param>
        /// <param name="isHttpsOnly">
        /// HttpsOnly: configures a web site to accept only https requests. Issues redirect for
        /// http requests
        /// </param>
        /// <param name="redundancyMode"> Site redundancy mode. </param>
        /// <param name="inProgressOperationId"> Specifies an operation id if this site has a pending operation. </param>
        /// <param name="isStorageAccountRequired"> Checks if Customer provided storage account is required. </param>
        /// <param name="keyVaultReferenceIdentity"> Identity to use for Key Vault Reference authentication. </param>
        /// <param name="virtualNetworkSubnetId">
        /// Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration.
        /// This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
        /// </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.WebSiteData"/> instance for mocking. </returns>
        public static WebSiteData WebSiteData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, ExtendedLocation extendedLocation = null, string state = null, IEnumerable<string> hostNames = null, string repositorySiteName = null, AppServiceUsageState? usageState = null, bool? isEnabled = null, IEnumerable<string> enabledHostNames = null, WebSiteAvailabilityState? availabilityState = null, IEnumerable<HostNameSslState> hostNameSslStates = null, ResourceIdentifier appServicePlanId = null, bool? isReserved = null, bool? isXenon = null, bool? isHyperV = null, DateTimeOffset? lastModifiedTimeUtc = null, SiteConfigProperties siteConfig = null, IEnumerable<string> trafficManagerHostNames = null, bool? isScmSiteAlsoStopped = null, string targetSwapSlot = null, HostingEnvironmentProfile hostingEnvironmentProfile = null, bool? isClientAffinityEnabled = null, bool? isClientCertEnabled = null, ClientCertMode? clientCertMode = null, string clientCertExclusionPaths = null, bool? isHostNameDisabled = null, string customDomainVerificationId = null, string outboundIPAddresses = null, string possibleOutboundIPAddresses = null, int? containerSize = null, int? dailyMemoryTimeQuota = null, DateTimeOffset? suspendOn = null, int? maxNumberOfWorkers = null, CloningInfo cloningInfo = null, string resourceGroup = null, bool? isDefaultContainer = null, string defaultHostName = null, SlotSwapStatus slotSwapStatus = null, bool? isHttpsOnly = null, RedundancyMode? redundancyMode = null, Guid? inProgressOperationId = null, bool? isStorageAccountRequired = null, string keyVaultReferenceIdentity = null, ResourceIdentifier virtualNetworkSubnetId = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();
            hostNames ??= new List<string>();
            enabledHostNames ??= new List<string>();
            hostNameSslStates ??= new List<HostNameSslState>();
            trafficManagerHostNames ??= new List<string>();

            return new WebSiteData(id, name, resourceType, systemData, tags, location, identity, extendedLocation, state, hostNames?.ToList(), repositorySiteName, usageState, isEnabled, enabledHostNames?.ToList(), availabilityState, hostNameSslStates?.ToList(), appServicePlanId, isReserved, isXenon, isHyperV, lastModifiedTimeUtc, siteConfig, trafficManagerHostNames?.ToList(), isScmSiteAlsoStopped, targetSwapSlot, hostingEnvironmentProfile, isClientAffinityEnabled, isClientCertEnabled, clientCertMode, clientCertExclusionPaths, isHostNameDisabled, customDomainVerificationId, outboundIPAddresses, possibleOutboundIPAddresses, containerSize, dailyMemoryTimeQuota, suspendOn, maxNumberOfWorkers, cloningInfo, resourceGroup, isDefaultContainer, defaultHostName, slotSwapStatus, isHttpsOnly, redundancyMode, inProgressOperationId, isStorageAccountRequired, keyVaultReferenceIdentity, virtualNetworkSubnetId, kind);
        }

        /// <summary> Initializes a new instance of HostNameSslState. </summary>
        /// <param name="name"> Hostname. </param>
        /// <param name="sslState"> SSL type. </param>
        /// <param name="virtualIP"> Virtual IP address assigned to the hostname if IP based SSL is enabled. </param>
        /// <param name="thumbprint"> SSL certificate thumbprint. </param>
        /// <param name="toUpdate"> Set to &lt;code&gt;true&lt;/code&gt; to update existing hostname. </param>
        /// <param name="hostType"> Indicates whether the hostname is a standard or repository hostname. </param>
        /// <returns> A new <see cref="Models.HostNameSslState"/> instance for mocking. </returns>
        public static HostNameSslState HostNameSslState(string name = null, HostNameBindingSslState? sslState = null, string virtualIP = null, BinaryData thumbprint = null, bool? toUpdate = null, AppServiceHostType? hostType = null)
        {
            return new HostNameSslState(name, sslState, virtualIP, thumbprint, toUpdate, hostType);
        }

        /// <summary> Initializes a new instance of SiteConfigProperties. </summary>
        /// <param name="numberOfWorkers"> Number of workers. </param>
        /// <param name="defaultDocuments"> Default documents. </param>
        /// <param name="netFrameworkVersion"> .NET Framework version. </param>
        /// <param name="phpVersion"> Version of PHP. </param>
        /// <param name="pythonVersion"> Version of Python. </param>
        /// <param name="nodeVersion"> Version of Node.js. </param>
        /// <param name="powerShellVersion"> Version of PowerShell. </param>
        /// <param name="linuxFxVersion"> Linux App Framework and version. </param>
        /// <param name="windowsFxVersion"> Xenon App Framework and version. </param>
        /// <param name="isRequestTracingEnabled"> &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="requestTracingExpirationOn"> Request tracing expiration time. </param>
        /// <param name="isRemoteDebuggingEnabled"> &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="remoteDebuggingVersion"> Remote debugging version. </param>
        /// <param name="isHttpLoggingEnabled"> &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="useManagedIdentityCreds"> Flag to use Managed Identity Creds for ACR pull. </param>
        /// <param name="acrUserManagedIdentityId"> If using user managed identity, the user managed identity ClientId. </param>
        /// <param name="logsDirectorySizeLimit"> HTTP logs directory size limit. </param>
        /// <param name="isDetailedErrorLoggingEnabled"> &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="publishingUsername"> Publishing user name. </param>
        /// <param name="appSettings"> Application settings. </param>
        /// <param name="connectionStrings"> Connection strings. </param>
        /// <param name="machineKey"> Site MachineKey. </param>
        /// <param name="handlerMappings"> Handler mappings. </param>
        /// <param name="documentRoot"> Document root. </param>
        /// <param name="scmType"> SCM type. </param>
        /// <param name="use32BitWorkerProcess"> &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isWebSocketsEnabled"> &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isAlwaysOn"> &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="javaVersion"> Java version. </param>
        /// <param name="javaContainer"> Java container. </param>
        /// <param name="javaContainerVersion"> Java container version. </param>
        /// <param name="appCommandLine"> App command line to launch. </param>
        /// <param name="managedPipelineMode"> Managed pipeline mode. </param>
        /// <param name="virtualApplications"> Virtual applications. </param>
        /// <param name="loadBalancing"> Site load balancing. </param>
        /// <param name="experimentsRampUpRules"> This is work around for polymorphic types. </param>
        /// <param name="limits"> Site limits. </param>
        /// <param name="isAutoHealEnabled"> &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="autoHealRules"> Auto Heal rules. </param>
        /// <param name="tracingOptions"> Tracing options. </param>
        /// <param name="vnetName"> Virtual Network name. </param>
        /// <param name="isVnetRouteAllEnabled"> Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied. </param>
        /// <param name="vnetPrivatePortsCount"> The number of private ports assigned to this app. These will be assigned dynamically on runtime. </param>
        /// <param name="cors"> Cross-Origin Resource Sharing (CORS) settings. </param>
        /// <param name="push"> Push endpoint settings. </param>
        /// <param name="apiDefinitionUri"> Information about the formal API definition for the app. </param>
        /// <param name="apiManagementConfigId"> Azure API management settings linked to the app. </param>
        /// <param name="autoSwapSlotName"> Auto-swap slot name. </param>
        /// <param name="isLocalMySqlEnabled"> &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="managedServiceIdentityId"> Managed Service Identity Id. </param>
        /// <param name="xManagedServiceIdentityId"> Explicit Managed Service Identity Id. </param>
        /// <param name="keyVaultReferenceIdentity"> Identity to use for Key Vault Reference authentication. </param>
        /// <param name="ipSecurityRestrictions"> IP security restrictions for main. </param>
        /// <param name="scmIPSecurityRestrictions"> IP security restrictions for scm. </param>
        /// <param name="allowIPSecurityRestrictionsForScmToUseMain"> IP security restrictions for scm to use main. </param>
        /// <param name="isHttp20Enabled"> Http20Enabled: configures a web site to allow clients to connect over http2.0. </param>
        /// <param name="minTlsVersion"> MinTlsVersion: configures the minimum version of TLS required for SSL requests. </param>
        /// <param name="scmMinTlsVersion"> ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site. </param>
        /// <param name="ftpsState"> State of FTP / FTPS service. </param>
        /// <param name="preWarmedInstanceCount">
        /// Number of preWarmed instances.
        /// This setting only applies to the Consumption and Elastic Plans
        /// </param>
        /// <param name="functionAppScaleLimit">
        /// Maximum number of workers that a site can scale out to.
        /// This setting only applies to the Consumption and Elastic Premium Plans
        /// </param>
        /// <param name="healthCheckPath"> Health check path. </param>
        /// <param name="isFunctionsRuntimeScaleMonitoringEnabled">
        /// Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled,
        /// the ScaleController will not monitor event sources directly, but will instead call to the
        /// runtime to get scale status.
        /// </param>
        /// <param name="websiteTimeZone"> Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones. </param>
        /// <param name="minimumElasticInstanceCount">
        /// Number of minimum instance count for a site
        /// This setting only applies to the Elastic Plans
        /// </param>
        /// <param name="azureStorageAccounts"> List of Azure Storage Accounts. </param>
        /// <param name="publicNetworkAccess"> Property to allow or block all public traffic. </param>
        /// <returns> A new <see cref="Models.SiteConfigProperties"/> instance for mocking. </returns>
        public static SiteConfigProperties SiteConfigProperties(int? numberOfWorkers = null, IEnumerable<string> defaultDocuments = null, string netFrameworkVersion = null, string phpVersion = null, string pythonVersion = null, string nodeVersion = null, string powerShellVersion = null, string linuxFxVersion = null, string windowsFxVersion = null, bool? isRequestTracingEnabled = null, DateTimeOffset? requestTracingExpirationOn = null, bool? isRemoteDebuggingEnabled = null, string remoteDebuggingVersion = null, bool? isHttpLoggingEnabled = null, bool? useManagedIdentityCreds = null, string acrUserManagedIdentityId = null, int? logsDirectorySizeLimit = null, bool? isDetailedErrorLoggingEnabled = null, string publishingUsername = null, IEnumerable<AppServiceNameValuePair> appSettings = null, IEnumerable<ConnStringInfo> connectionStrings = null, SiteMachineKey machineKey = null, IEnumerable<HttpRequestHandlerMapping> handlerMappings = null, string documentRoot = null, ScmType? scmType = null, bool? use32BitWorkerProcess = null, bool? isWebSocketsEnabled = null, bool? isAlwaysOn = null, string javaVersion = null, string javaContainer = null, string javaContainerVersion = null, string appCommandLine = null, ManagedPipelineMode? managedPipelineMode = null, IEnumerable<VirtualApplication> virtualApplications = null, SiteLoadBalancing? loadBalancing = null, IEnumerable<RampUpRule> experimentsRampUpRules = null, SiteLimits limits = null, bool? isAutoHealEnabled = null, AutoHealRules autoHealRules = null, string tracingOptions = null, string vnetName = null, bool? isVnetRouteAllEnabled = null, int? vnetPrivatePortsCount = null, AppServiceCorsSettings cors = null, WebAppPushSettings push = null, Uri apiDefinitionUri = null, string apiManagementConfigId = null, string autoSwapSlotName = null, bool? isLocalMySqlEnabled = null, int? managedServiceIdentityId = null, int? xManagedServiceIdentityId = null, string keyVaultReferenceIdentity = null, IEnumerable<AppServiceIPSecurityRestriction> ipSecurityRestrictions = null, IEnumerable<AppServiceIPSecurityRestriction> scmIPSecurityRestrictions = null, bool? allowIPSecurityRestrictionsForScmToUseMain = null, bool? isHttp20Enabled = null, AppServiceSupportedTlsVersion? minTlsVersion = null, AppServiceSupportedTlsVersion? scmMinTlsVersion = null, AppServiceFtpsState? ftpsState = null, int? preWarmedInstanceCount = null, int? functionAppScaleLimit = null, string healthCheckPath = null, bool? isFunctionsRuntimeScaleMonitoringEnabled = null, string websiteTimeZone = null, int? minimumElasticInstanceCount = null, IDictionary<string, AppServiceStorageAccessInfo> azureStorageAccounts = null, string publicNetworkAccess = null)
        {
            defaultDocuments ??= new List<string>();
            appSettings ??= new List<AppServiceNameValuePair>();
            connectionStrings ??= new List<ConnStringInfo>();
            handlerMappings ??= new List<HttpRequestHandlerMapping>();
            virtualApplications ??= new List<VirtualApplication>();
            experimentsRampUpRules ??= new List<RampUpRule>();
            ipSecurityRestrictions ??= new List<AppServiceIPSecurityRestriction>();
            scmIPSecurityRestrictions ??= new List<AppServiceIPSecurityRestriction>();
            azureStorageAccounts ??= new Dictionary<string, AppServiceStorageAccessInfo>();

            return new SiteConfigProperties(numberOfWorkers, defaultDocuments?.ToList(), netFrameworkVersion, phpVersion, pythonVersion, nodeVersion, powerShellVersion, linuxFxVersion, windowsFxVersion, isRequestTracingEnabled, requestTracingExpirationOn, isRemoteDebuggingEnabled, remoteDebuggingVersion, isHttpLoggingEnabled, useManagedIdentityCreds, acrUserManagedIdentityId, logsDirectorySizeLimit, isDetailedErrorLoggingEnabled, publishingUsername, appSettings?.ToList(), connectionStrings?.ToList(), machineKey, handlerMappings?.ToList(), documentRoot, scmType, use32BitWorkerProcess, isWebSocketsEnabled, isAlwaysOn, javaVersion, javaContainer, javaContainerVersion, appCommandLine, managedPipelineMode, virtualApplications?.ToList(), loadBalancing, new RoutingRuleExperiments(experimentsRampUpRules?.ToList()), limits, isAutoHealEnabled, autoHealRules, tracingOptions, vnetName, isVnetRouteAllEnabled, vnetPrivatePortsCount, cors, push, new AppServiceApiDefinitionInfo(apiDefinitionUri), new ApiManagementConfig(apiManagementConfigId), autoSwapSlotName, isLocalMySqlEnabled, managedServiceIdentityId, xManagedServiceIdentityId, keyVaultReferenceIdentity, ipSecurityRestrictions?.ToList(), scmIPSecurityRestrictions?.ToList(), allowIPSecurityRestrictionsForScmToUseMain, isHttp20Enabled, minTlsVersion, scmMinTlsVersion, ftpsState, preWarmedInstanceCount, functionAppScaleLimit, healthCheckPath, isFunctionsRuntimeScaleMonitoringEnabled, websiteTimeZone, minimumElasticInstanceCount, azureStorageAccounts, publicNetworkAccess);
        }

        /// <summary> Initializes a new instance of ConnStringInfo. </summary>
        /// <param name="name"> Name of connection string. </param>
        /// <param name="connectionString"> Connection string value. </param>
        /// <param name="connectionStringType"> Type of database. </param>
        /// <returns> A new <see cref="Models.ConnStringInfo"/> instance for mocking. </returns>
        public static ConnStringInfo ConnStringInfo(string name = null, string connectionString = null, ConnectionStringType? connectionStringType = null)
        {
            return new ConnStringInfo(name, connectionString, connectionStringType);
        }

        /// <summary> Initializes a new instance of SiteMachineKey. </summary>
        /// <param name="validation"> MachineKey validation. </param>
        /// <param name="validationKey"> Validation key. </param>
        /// <param name="decryption"> Algorithm used for decryption. </param>
        /// <param name="decryptionKey"> Decryption key. </param>
        /// <returns> A new <see cref="Models.SiteMachineKey"/> instance for mocking. </returns>
        public static SiteMachineKey SiteMachineKey(string validation = null, string validationKey = null, string decryption = null, string decryptionKey = null)
        {
            return new SiteMachineKey(validation, validationKey, decryption, decryptionKey);
        }

        /// <summary> Initializes a new instance of HttpRequestHandlerMapping. </summary>
        /// <param name="extension"> Requests with this extension will be handled using the specified FastCGI application. </param>
        /// <param name="scriptProcessor"> The absolute path to the FastCGI application. </param>
        /// <param name="arguments"> Command-line arguments to be passed to the script processor. </param>
        /// <returns> A new <see cref="Models.HttpRequestHandlerMapping"/> instance for mocking. </returns>
        public static HttpRequestHandlerMapping HttpRequestHandlerMapping(string extension = null, string scriptProcessor = null, string arguments = null)
        {
            return new HttpRequestHandlerMapping(extension, scriptProcessor, arguments);
        }

        /// <summary> Initializes a new instance of VirtualApplication. </summary>
        /// <param name="virtualPath"> Virtual path. </param>
        /// <param name="physicalPath"> Physical path. </param>
        /// <param name="isPreloadEnabled"> &lt;code&gt;true&lt;/code&gt; if preloading is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="virtualDirectories"> Virtual directories for virtual application. </param>
        /// <returns> A new <see cref="Models.VirtualApplication"/> instance for mocking. </returns>
        public static VirtualApplication VirtualApplication(string virtualPath = null, string physicalPath = null, bool? isPreloadEnabled = null, IEnumerable<VirtualDirectory> virtualDirectories = null)
        {
            virtualDirectories ??= new List<VirtualDirectory>();

            return new VirtualApplication(virtualPath, physicalPath, isPreloadEnabled, virtualDirectories?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualDirectory. </summary>
        /// <param name="virtualPath"> Path to virtual application. </param>
        /// <param name="physicalPath"> Physical path. </param>
        /// <returns> A new <see cref="Models.VirtualDirectory"/> instance for mocking. </returns>
        public static VirtualDirectory VirtualDirectory(string virtualPath = null, string physicalPath = null)
        {
            return new VirtualDirectory(virtualPath, physicalPath);
        }

        /// <summary> Initializes a new instance of RampUpRule. </summary>
        /// <param name="actionHostName"> Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net. </param>
        /// <param name="reroutePercentage"> Percentage of the traffic which will be redirected to &lt;code&gt;ActionHostName&lt;/code&gt;. </param>
        /// <param name="changeStep">
        /// In auto ramp up scenario this is the step to add/remove from &lt;code&gt;ReroutePercentage&lt;/code&gt; until it reaches \n&lt;code&gt;MinReroutePercentage&lt;/code&gt; or 
        /// &lt;code&gt;MaxReroutePercentage&lt;/code&gt;. Site metrics are checked every N minutes specified in &lt;code&gt;ChangeIntervalInMinutes&lt;/code&gt;.\nCustom decision algorithm 
        /// can be provided in TiPCallback site extension which URL can be specified in &lt;code&gt;ChangeDecisionCallbackUrl&lt;/code&gt;.
        /// </param>
        /// <param name="changeIntervalInMinutes"> Specifies interval in minutes to reevaluate ReroutePercentage. </param>
        /// <param name="minReroutePercentage"> Specifies lower boundary above which ReroutePercentage will stay. </param>
        /// <param name="maxReroutePercentage"> Specifies upper boundary below which ReroutePercentage will stay. </param>
        /// <param name="changeDecisionCallbackUri">
        /// Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.
        /// https://www.siteextensions.net/packages/TiPCallback/
        /// </param>
        /// <param name="name"> Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment. </param>
        /// <returns> A new <see cref="Models.RampUpRule"/> instance for mocking. </returns>
        public static RampUpRule RampUpRule(string actionHostName = null, double? reroutePercentage = null, double? changeStep = null, int? changeIntervalInMinutes = null, double? minReroutePercentage = null, double? maxReroutePercentage = null, Uri changeDecisionCallbackUri = null, string name = null)
        {
            return new RampUpRule(actionHostName, reroutePercentage, changeStep, changeIntervalInMinutes, minReroutePercentage, maxReroutePercentage, changeDecisionCallbackUri, name);
        }

        /// <summary> Initializes a new instance of SiteLimits. </summary>
        /// <param name="maxPercentageCpu"> Maximum allowed CPU usage percentage. </param>
        /// <param name="maxMemoryInMb"> Maximum allowed memory usage in MB. </param>
        /// <param name="maxDiskSizeInMb"> Maximum allowed disk size usage in MB. </param>
        /// <returns> A new <see cref="Models.SiteLimits"/> instance for mocking. </returns>
        public static SiteLimits SiteLimits(double? maxPercentageCpu = null, long? maxMemoryInMb = null, long? maxDiskSizeInMb = null)
        {
            return new SiteLimits(maxPercentageCpu, maxMemoryInMb, maxDiskSizeInMb);
        }

        /// <summary> Initializes a new instance of AutoHealRules. </summary>
        /// <param name="triggers"> Conditions that describe when to execute the auto-heal actions. </param>
        /// <param name="actions"> Actions to be executed when a rule is triggered. </param>
        /// <returns> A new <see cref="Models.AutoHealRules"/> instance for mocking. </returns>
        public static AutoHealRules AutoHealRules(AutoHealTriggers triggers = null, AutoHealActions actions = null)
        {
            return new AutoHealRules(triggers, actions);
        }

        /// <summary> Initializes a new instance of AutoHealTriggers. </summary>
        /// <param name="requests"> A rule based on total requests. </param>
        /// <param name="privateBytesInKB"> A rule based on private bytes. </param>
        /// <param name="statusCodes"> A rule based on status codes. </param>
        /// <param name="slowRequests"> A rule based on request execution time. </param>
        /// <param name="slowRequestsWithPath"> A rule based on multiple Slow Requests Rule with path. </param>
        /// <param name="statusCodesRange"> A rule based on status codes ranges. </param>
        /// <returns> A new <see cref="Models.AutoHealTriggers"/> instance for mocking. </returns>
        public static AutoHealTriggers AutoHealTriggers(RequestsBasedTrigger requests = null, int? privateBytesInKB = null, IEnumerable<StatusCodesBasedTrigger> statusCodes = null, SlowRequestsBasedTrigger slowRequests = null, IEnumerable<SlowRequestsBasedTrigger> slowRequestsWithPath = null, IEnumerable<StatusCodesRangeBasedTrigger> statusCodesRange = null)
        {
            statusCodes ??= new List<StatusCodesBasedTrigger>();
            slowRequestsWithPath ??= new List<SlowRequestsBasedTrigger>();
            statusCodesRange ??= new List<StatusCodesRangeBasedTrigger>();

            return new AutoHealTriggers(requests, privateBytesInKB, statusCodes?.ToList(), slowRequests, slowRequestsWithPath?.ToList(), statusCodesRange?.ToList());
        }

        /// <summary> Initializes a new instance of RequestsBasedTrigger. </summary>
        /// <param name="count"> Request Count. </param>
        /// <param name="timeInterval"> Time interval. </param>
        /// <returns> A new <see cref="Models.RequestsBasedTrigger"/> instance for mocking. </returns>
        public static RequestsBasedTrigger RequestsBasedTrigger(int? count = null, string timeInterval = null)
        {
            return new RequestsBasedTrigger(count, timeInterval);
        }

        /// <summary> Initializes a new instance of StatusCodesBasedTrigger. </summary>
        /// <param name="status"> HTTP status code. </param>
        /// <param name="subStatus"> Request Sub Status. </param>
        /// <param name="win32Status"> Win32 error code. </param>
        /// <param name="count"> Request Count. </param>
        /// <param name="timeInterval"> Time interval. </param>
        /// <param name="path"> Request Path. </param>
        /// <returns> A new <see cref="Models.StatusCodesBasedTrigger"/> instance for mocking. </returns>
        public static StatusCodesBasedTrigger StatusCodesBasedTrigger(int? status = null, int? subStatus = null, int? win32Status = null, int? count = null, string timeInterval = null, string path = null)
        {
            return new StatusCodesBasedTrigger(status, subStatus, win32Status, count, timeInterval, path);
        }

        /// <summary> Initializes a new instance of SlowRequestsBasedTrigger. </summary>
        /// <param name="timeTaken"> Time taken. </param>
        /// <param name="path"> Request Path. </param>
        /// <param name="count"> Request Count. </param>
        /// <param name="timeInterval"> Time interval. </param>
        /// <returns> A new <see cref="Models.SlowRequestsBasedTrigger"/> instance for mocking. </returns>
        public static SlowRequestsBasedTrigger SlowRequestsBasedTrigger(string timeTaken = null, string path = null, int? count = null, string timeInterval = null)
        {
            return new SlowRequestsBasedTrigger(timeTaken, path, count, timeInterval);
        }

        /// <summary> Initializes a new instance of StatusCodesRangeBasedTrigger. </summary>
        /// <param name="statusCodes"> HTTP status code. </param>
        /// <param name="path"></param>
        /// <param name="count"> Request Count. </param>
        /// <param name="timeInterval"> Time interval. </param>
        /// <returns> A new <see cref="Models.StatusCodesRangeBasedTrigger"/> instance for mocking. </returns>
        public static StatusCodesRangeBasedTrigger StatusCodesRangeBasedTrigger(string statusCodes = null, string path = null, int? count = null, string timeInterval = null)
        {
            return new StatusCodesRangeBasedTrigger(statusCodes, path, count, timeInterval);
        }

        /// <summary> Initializes a new instance of AutoHealActions. </summary>
        /// <param name="actionType"> Predefined action to be taken. </param>
        /// <param name="customAction"> Custom action to be taken. </param>
        /// <param name="minProcessExecutionTime">
        /// Minimum time the process must execute
        /// before taking the action
        /// </param>
        /// <returns> A new <see cref="Models.AutoHealActions"/> instance for mocking. </returns>
        public static AutoHealActions AutoHealActions(AutoHealActionType? actionType = null, AutoHealCustomAction customAction = null, string minProcessExecutionTime = null)
        {
            return new AutoHealActions(actionType, customAction, minProcessExecutionTime);
        }

        /// <summary> Initializes a new instance of AutoHealCustomAction. </summary>
        /// <param name="exe"> Executable to be run. </param>
        /// <param name="parameters"> Parameters for the executable. </param>
        /// <returns> A new <see cref="Models.AutoHealCustomAction"/> instance for mocking. </returns>
        public static AutoHealCustomAction AutoHealCustomAction(string exe = null, string parameters = null)
        {
            return new AutoHealCustomAction(exe, parameters);
        }

        /// <summary> Initializes a new instance of AppServiceCorsSettings. </summary>
        /// <param name="allowedOrigins">
        /// Gets or sets the list of origins that should be allowed to make cross-origin
        /// calls (for example: http://example.com:12345). Use &quot;*&quot; to allow all.
        /// </param>
        /// <param name="isCredentialsSupported">
        /// Gets or sets whether CORS requests with credentials are allowed. See 
        /// https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials
        /// for more details.
        /// </param>
        /// <returns> A new <see cref="Models.AppServiceCorsSettings"/> instance for mocking. </returns>
        public static AppServiceCorsSettings AppServiceCorsSettings(IEnumerable<string> allowedOrigins = null, bool? isCredentialsSupported = null)
        {
            allowedOrigins ??= new List<string>();

            return new AppServiceCorsSettings(allowedOrigins?.ToList(), isCredentialsSupported);
        }

        /// <summary> Initializes a new instance of WebAppPushSettings. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="isPushEnabled"> Gets or sets a flag indicating whether the Push endpoint is enabled. </param>
        /// <param name="tagWhitelistJson"> Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint. </param>
        /// <param name="tagsRequiringAuth">
        /// Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.
        /// Tags can consist of alphanumeric characters and the following:
        /// &apos;_&apos;, &apos;@&apos;, &apos;#&apos;, &apos;.&apos;, &apos;:&apos;, &apos;-&apos;. 
        /// Validation should be performed at the PushRequestHandler.
        /// </param>
        /// <param name="dynamicTagsJson"> Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.WebAppPushSettings"/> instance for mocking. </returns>
        public static WebAppPushSettings WebAppPushSettings(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? isPushEnabled = null, string tagWhitelistJson = null, string tagsRequiringAuth = null, string dynamicTagsJson = null, string kind = null)
        {
            return new WebAppPushSettings(id, name, resourceType, systemData, isPushEnabled, tagWhitelistJson, tagsRequiringAuth, dynamicTagsJson, kind);
        }

        /// <summary> Initializes a new instance of AppServiceIPSecurityRestriction. </summary>
        /// <param name="ipAddressOrCidr">
        /// IP address the security restriction is valid for.
        /// It can be in form of pure ipv4 address (required SubnetMask property) or
        /// CIDR notation such as ipv4/mask (leading bit match). For CIDR,
        /// SubnetMask property must not be specified.
        /// </param>
        /// <param name="subnetMask"> Subnet mask for the range of IP addresses the restriction is valid for. </param>
        /// <param name="vnetSubnetResourceId"> Virtual network resource id. </param>
        /// <param name="vnetTrafficTag"> (internal) Vnet traffic tag. </param>
        /// <param name="subnetTrafficTag"> (internal) Subnet traffic tag. </param>
        /// <param name="action"> Allow or Deny access for this IP range. </param>
        /// <param name="tag"> Defines what this IP filter will be used for. This is to support IP filtering on proxies. </param>
        /// <param name="priority"> Priority of IP restriction rule. </param>
        /// <param name="name"> IP restriction rule name. </param>
        /// <param name="description"> IP restriction rule description. </param>
        /// <param name="headers">
        /// IP restriction rule headers.
        /// X-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples). 
        /// The matching logic is ..
        /// - If the property is null or empty (default), all hosts(or lack of) are allowed.
        /// - A value is compared using ordinal-ignore-case (excluding port number).
        /// - Subdomain wildcards are permitted but don&apos;t match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com
        ///  but not the root domain contoso.com or multi-level foo.bar.contoso.com
        /// - Unicode host names are allowed but are converted to Punycode for matching.
        /// 
        /// X-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).
        /// The matching logic is ..
        /// - If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.
        /// - If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.
        /// 
        /// X-Azure-FDID and X-FD-HealthProbe.
        /// The matching logic is exact match.
        /// </param>
        /// <returns> A new <see cref="Models.AppServiceIPSecurityRestriction"/> instance for mocking. </returns>
        public static AppServiceIPSecurityRestriction AppServiceIPSecurityRestriction(string ipAddressOrCidr = null, string subnetMask = null, ResourceIdentifier vnetSubnetResourceId = null, int? vnetTrafficTag = null, int? subnetTrafficTag = null, string action = null, AppServiceIPFilterTag? tag = null, int? priority = null, string name = null, string description = null, IDictionary<string, IList<string>> headers = null)
        {
            headers ??= new Dictionary<string, IList<string>>();

            return new AppServiceIPSecurityRestriction(ipAddressOrCidr, subnetMask, vnetSubnetResourceId, vnetTrafficTag, subnetTrafficTag, action, tag, priority, name, description, headers);
        }

        /// <summary> Initializes a new instance of AppServiceStorageAccessInfo. </summary>
        /// <param name="storageType"> Type of storage. </param>
        /// <param name="accountName"> Name of the storage account. </param>
        /// <param name="shareName"> Name of the file share (container name, for Blob storage). </param>
        /// <param name="accessKey"> Access key for the storage account. </param>
        /// <param name="mountPath"> Path to mount the storage within the site&apos;s runtime environment. </param>
        /// <param name="state"> State of the storage account. </param>
        /// <returns> A new <see cref="Models.AppServiceStorageAccessInfo"/> instance for mocking. </returns>
        public static AppServiceStorageAccessInfo AppServiceStorageAccessInfo(AppServiceStorageType? storageType = null, string accountName = null, string shareName = null, string accessKey = null, string mountPath = null, AppServiceStorageAccountState? state = null)
        {
            return new AppServiceStorageAccessInfo(storageType, accountName, shareName, accessKey, mountPath, state);
        }

        /// <summary> Initializes a new instance of CloningInfo. </summary>
        /// <param name="correlationId">
        /// Correlation ID of cloning operation. This ID ties multiple cloning operations
        /// together to use the same snapshot.
        /// </param>
        /// <param name="canOverwrite"> &lt;code&gt;true&lt;/code&gt; to overwrite destination app; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="cloneCustomHostNames"> &lt;code&gt;true&lt;/code&gt; to clone custom hostnames from source app; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="cloneSourceControl"> &lt;code&gt;true&lt;/code&gt; to clone source control from source app; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="sourceWebAppId">
        /// ARM resource ID of the source app. App resource ID is of the form 
        /// /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and 
        /// /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.
        /// </param>
        /// <param name="sourceWebAppLocation"> Location of source app ex: West US or North Europe. </param>
        /// <param name="hostingEnvironment"> App Service Environment. </param>
        /// <param name="appSettingsOverrides">
        /// Application setting overrides for cloned app. If specified, these settings override the settings cloned 
        /// from source app. Otherwise, application settings from source app are retained.
        /// </param>
        /// <param name="configureLoadBalancing"> &lt;code&gt;true&lt;/code&gt; to configure load balancing for source and destination app. </param>
        /// <param name="trafficManagerProfileId">
        /// ARM resource ID of the Traffic Manager profile to use, if it exists. Traffic Manager resource ID is of the form 
        /// /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
        /// </param>
        /// <param name="trafficManagerProfileName"> Name of Traffic Manager profile to create. This is only needed if Traffic Manager profile does not already exist. </param>
        /// <returns> A new <see cref="Models.CloningInfo"/> instance for mocking. </returns>
        public static CloningInfo CloningInfo(Guid? correlationId = null, bool? canOverwrite = null, bool? cloneCustomHostNames = null, bool? cloneSourceControl = null, ResourceIdentifier sourceWebAppId = null, AzureLocation? sourceWebAppLocation = null, string hostingEnvironment = null, IDictionary<string, string> appSettingsOverrides = null, bool? configureLoadBalancing = null, ResourceIdentifier trafficManagerProfileId = null, string trafficManagerProfileName = null)
        {
            appSettingsOverrides ??= new Dictionary<string, string>();

            return new CloningInfo(correlationId, canOverwrite, cloneCustomHostNames, cloneSourceControl, sourceWebAppId, sourceWebAppLocation, hostingEnvironment, appSettingsOverrides, configureLoadBalancing, trafficManagerProfileId, trafficManagerProfileName);
        }

        /// <summary> Initializes a new instance of SlotSwapStatus. </summary>
        /// <param name="timestampUtc"> The time the last successful slot swap completed. </param>
        /// <param name="sourceSlotName"> The source slot of the last swap operation. </param>
        /// <param name="destinationSlotName"> The destination slot of the last swap operation. </param>
        /// <returns> A new <see cref="Models.SlotSwapStatus"/> instance for mocking. </returns>
        public static SlotSwapStatus SlotSwapStatus(DateTimeOffset? timestampUtc = null, string sourceSlotName = null, string destinationSlotName = null)
        {
            return new SlotSwapStatus(timestampUtc, sourceSlotName, destinationSlotName);
        }

        /// <summary> Initializes a new instance of CsmUsageQuota. </summary>
        /// <param name="unit"> Units of measurement for the quota resource. </param>
        /// <param name="nextResetOn"> Next reset time for the resource counter. </param>
        /// <param name="currentValue"> The current value of the resource counter. </param>
        /// <param name="limit"> The resource limit. </param>
        /// <param name="name"> Quota name. </param>
        /// <returns> A new <see cref="Models.CsmUsageQuota"/> instance for mocking. </returns>
        public static CsmUsageQuota CsmUsageQuota(string unit = null, DateTimeOffset? nextResetOn = null, long? currentValue = null, long? limit = null, LocalizableString name = null)
        {
            return new CsmUsageQuota(unit, nextResetOn, currentValue, limit, name);
        }

        /// <summary> Initializes a new instance of LocalizableString. </summary>
        /// <param name="value"> Non-localized name. </param>
        /// <param name="localizedValue"> Localized name. </param>
        /// <returns> A new <see cref="Models.LocalizableString"/> instance for mocking. </returns>
        public static LocalizableString LocalizableString(string value = null, string localizedValue = null)
        {
            return new LocalizableString(value, localizedValue);
        }

        /// <summary> Initializes a new instance of AppServicePlanPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="workerTierName"> Target worker tier assigned to the App Service plan. </param>
        /// <param name="status"> App Service plan status. </param>
        /// <param name="subscription"> App Service plan subscription. </param>
        /// <param name="hostingEnvironmentProfile"> Specification for the App Service Environment to use for the App Service plan. </param>
        /// <param name="maximumNumberOfWorkers"> Maximum number of instances that can be assigned to this App Service plan. </param>
        /// <param name="geoRegion"> Geographical location for the App Service plan. </param>
        /// <param name="isPerSiteScaling">
        /// If &lt;code&gt;true&lt;/code&gt;, apps assigned to this App Service plan can be scaled independently.
        /// If &lt;code&gt;false&lt;/code&gt;, apps assigned to this App Service plan will scale to all instances of the plan.
        /// </param>
        /// <param name="isElasticScaleEnabled"> ServerFarm supports ElasticScale. Apps in this plan will scale as if the ServerFarm was ElasticPremium sku. </param>
        /// <param name="maximumElasticWorkerCount"> Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan. </param>
        /// <param name="numberOfSites"> Number of apps assigned to this App Service plan. </param>
        /// <param name="isSpot"> If &lt;code&gt;true&lt;/code&gt;, this App Service Plan owns spot instances. </param>
        /// <param name="spotExpirationOn"> The time when the server farm expires. Valid only if it is a spot server farm. </param>
        /// <param name="freeOfferExpirationOn"> The time when the server farm free offer expires. </param>
        /// <param name="resourceGroup"> Resource group of the App Service plan. </param>
        /// <param name="isReserved"> If Linux app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise. </param>
        /// <param name="isXenon"> Obsolete: If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise. </param>
        /// <param name="isHyperV"> If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise. </param>
        /// <param name="targetWorkerCount"> Scaling worker count. </param>
        /// <param name="targetWorkerSizeId"> Scaling worker size ID. </param>
        /// <param name="provisioningState"> Provisioning state of the App Service Plan. </param>
        /// <param name="kubeEnvironmentProfile"> Specification for the Kubernetes Environment to use for the App Service plan. </param>
        /// <param name="isZoneRedundant">
        /// If &lt;code&gt;true&lt;/code&gt;, this App Service Plan will perform availability zone balancing.
        /// If &lt;code&gt;false&lt;/code&gt;, this App Service Plan will not perform availability zone balancing.
        /// </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServicePlanPatch"/> instance for mocking. </returns>
        public static AppServicePlanPatch AppServicePlanPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string workerTierName = null, AppServicePlanStatus? status = null, string subscription = null, HostingEnvironmentProfile hostingEnvironmentProfile = null, int? maximumNumberOfWorkers = null, string geoRegion = null, bool? isPerSiteScaling = null, bool? isElasticScaleEnabled = null, int? maximumElasticWorkerCount = null, int? numberOfSites = null, bool? isSpot = null, DateTimeOffset? spotExpirationOn = null, DateTimeOffset? freeOfferExpirationOn = null, string resourceGroup = null, bool? isReserved = null, bool? isXenon = null, bool? isHyperV = null, int? targetWorkerCount = null, int? targetWorkerSizeId = null, ProvisioningState? provisioningState = null, KubeEnvironmentProfile kubeEnvironmentProfile = null, bool? isZoneRedundant = null, string kind = null)
        {
            return new AppServicePlanPatch(id, name, resourceType, systemData, workerTierName, status, subscription, hostingEnvironmentProfile, maximumNumberOfWorkers, geoRegion, isPerSiteScaling, isElasticScaleEnabled, maximumElasticWorkerCount, numberOfSites, isSpot, spotExpirationOn, freeOfferExpirationOn, resourceGroup, isReserved, isXenon, isHyperV, targetWorkerCount, targetWorkerSizeId, provisioningState, kubeEnvironmentProfile, isZoneRedundant, kind);
        }

        /// <summary> Initializes a new instance of HybridConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="serviceBusNamespace"> The name of the Service Bus namespace. </param>
        /// <param name="relayName"> The name of the Service Bus relay. </param>
        /// <param name="relayArmUri"> The ARM URI to the Service Bus relay. </param>
        /// <param name="hostname"> The hostname of the endpoint. </param>
        /// <param name="port"> The port of the endpoint. </param>
        /// <param name="sendKeyName"> The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus. </param>
        /// <param name="sendKeyValue">
        /// The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned
        /// normally, use the POST /listKeys API instead.
        /// </param>
        /// <param name="serviceBusSuffix"> The suffix for the service bus endpoint. By default this is .servicebus.windows.net. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.HybridConnectionData"/> instance for mocking. </returns>
        public static HybridConnectionData HybridConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string serviceBusNamespace = null, string relayName = null, Uri relayArmUri = null, string hostname = null, int? port = null, string sendKeyName = null, string sendKeyValue = null, string serviceBusSuffix = null, string kind = null)
        {
            return new HybridConnectionData(id, name, resourceType, systemData, serviceBusNamespace, relayName, relayArmUri, hostname, port, sendKeyName, sendKeyValue, serviceBusSuffix, kind);
        }

        /// <summary> Initializes a new instance of HybridConnectionKey. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="sendKeyName"> The name of the send key. </param>
        /// <param name="sendKeyValue"> The value of the send key. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.HybridConnectionKey"/> instance for mocking. </returns>
        public static HybridConnectionKey HybridConnectionKey(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string sendKeyName = null, string sendKeyValue = null, string kind = null)
        {
            return new HybridConnectionKey(id, name, resourceType, systemData, sendKeyName, sendKeyValue, kind);
        }

        /// <summary> Initializes a new instance of HybridConnectionLimitData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="current"> The current number of Hybrid Connections. </param>
        /// <param name="maximum"> The maximum number of Hybrid Connections allowed. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.HybridConnectionLimitData"/> instance for mocking. </returns>
        public static HybridConnectionLimitData HybridConnectionLimitData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? current = null, int? maximum = null, string kind = null)
        {
            return new HybridConnectionLimitData(id, name, resourceType, systemData, current, maximum, kind);
        }

        /// <summary> Initializes a new instance of AppServiceVirtualNetworkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="vnetResourceId"> The Virtual Network&apos;s resource ID. </param>
        /// <param name="certThumbprint"> The client certificate thumbprint. </param>
        /// <param name="certBlob">
        /// A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
        /// Point-To-Site VPN connection.
        /// </param>
        /// <param name="routes"> The routes that this Virtual Network connection uses. </param>
        /// <param name="isResyncRequired"> &lt;code&gt;true&lt;/code&gt; if a resync is required; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="dnsServers"> DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses. </param>
        /// <param name="isSwift"> Flag that is used to denote if this is VNET injection. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppServiceVirtualNetworkData"/> instance for mocking. </returns>
        public static AppServiceVirtualNetworkData AppServiceVirtualNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier vnetResourceId = null, BinaryData certThumbprint = null, string certBlob = null, IEnumerable<AppServiceVirtualNetworkRoute> routes = null, bool? isResyncRequired = null, string dnsServers = null, bool? isSwift = null, string kind = null)
        {
            routes ??= new List<AppServiceVirtualNetworkRoute>();

            return new AppServiceVirtualNetworkData(id, name, resourceType, systemData, vnetResourceId, certThumbprint, certBlob, routes?.ToList(), isResyncRequired, dnsServers, isSwift, kind);
        }

        /// <summary> Initializes a new instance of AppServiceVirtualNetworkProperties. </summary>
        /// <param name="vnetResourceId"> The Virtual Network&apos;s resource ID. </param>
        /// <param name="certThumbprint"> The client certificate thumbprint. </param>
        /// <param name="certBlob">
        /// A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
        /// Point-To-Site VPN connection.
        /// </param>
        /// <param name="routes"> The routes that this Virtual Network connection uses. </param>
        /// <param name="isResyncRequired"> &lt;code&gt;true&lt;/code&gt; if a resync is required; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="dnsServers"> DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses. </param>
        /// <param name="isSwift"> Flag that is used to denote if this is VNET injection. </param>
        /// <returns> A new <see cref="Models.AppServiceVirtualNetworkProperties"/> instance for mocking. </returns>
        public static AppServiceVirtualNetworkProperties AppServiceVirtualNetworkProperties(ResourceIdentifier vnetResourceId = null, BinaryData certThumbprint = null, string certBlob = null, IEnumerable<AppServiceVirtualNetworkRoute> routes = null, bool? isResyncRequired = null, string dnsServers = null, bool? isSwift = null)
        {
            routes ??= new List<AppServiceVirtualNetworkRoute>();

            return new AppServiceVirtualNetworkProperties(vnetResourceId, certThumbprint, certBlob, routes?.ToList(), isResyncRequired, dnsServers, isSwift);
        }

        /// <summary> Initializes a new instance of AppServiceVirtualNetworkRoute. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="startAddress"> The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified. </param>
        /// <param name="endAddress"> The ending address for this route. If the start address is specified in CIDR notation, this must be omitted. </param>
        /// <param name="routeType">
        /// The type of route this is:
        /// DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918
        /// INHERITED - Routes inherited from the real Virtual Network routes
        /// STATIC - Static route set on the app only
        /// 
        /// These values will be used for syncing an app&apos;s routes with those from a Virtual Network.
        /// </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceVirtualNetworkRoute"/> instance for mocking. </returns>
        public static AppServiceVirtualNetworkRoute AppServiceVirtualNetworkRoute(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string startAddress = null, string endAddress = null, AppServiceVirtualNetworkRouteType? routeType = null, string kind = null)
        {
            return new AppServiceVirtualNetworkRoute(id, name, resourceType, systemData, startAddress, endAddress, routeType, kind);
        }

        /// <summary> Initializes a new instance of AppServiceVirtualNetworkGatewayData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="vnetName"> The Virtual Network name. </param>
        /// <param name="vpnPackageUri"> The URI where the VPN package can be downloaded. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppServiceVirtualNetworkGatewayData"/> instance for mocking. </returns>
        public static AppServiceVirtualNetworkGatewayData AppServiceVirtualNetworkGatewayData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string vnetName = null, Uri vpnPackageUri = null, string kind = null)
        {
            return new AppServiceVirtualNetworkGatewayData(id, name, resourceType, systemData, vnetName, vpnPackageUri, kind);
        }

        /// <summary> Initializes a new instance of AppCertificateData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="password"> Certificate password. </param>
        /// <param name="friendlyName"> Friendly name of the certificate. </param>
        /// <param name="subjectName"> Subject name of the certificate. </param>
        /// <param name="hostNames"> Host names the certificate applies to. </param>
        /// <param name="pfxBlob"> Pfx blob. </param>
        /// <param name="siteName"> App name. </param>
        /// <param name="selfLink"> Self link. </param>
        /// <param name="issuer"> Certificate issuer. </param>
        /// <param name="issueOn"> Certificate issue Date. </param>
        /// <param name="expireOn"> Certificate expiration date. </param>
        /// <param name="thumbprint"> Certificate thumbprint. </param>
        /// <param name="isValid"> Is the certificate valid?. </param>
        /// <param name="cerBlob"> Raw bytes of .cer file. </param>
        /// <param name="publicKeyHash"> Public key hash. </param>
        /// <param name="hostingEnvironmentProfile"> Specification for the App Service Environment to use for the certificate. </param>
        /// <param name="keyVaultId"> Key Vault Csm resource Id. </param>
        /// <param name="keyVaultSecretName"> Key Vault secret name. </param>
        /// <param name="keyVaultSecretStatus"> Status of the Key Vault secret. </param>
        /// <param name="serverFarmId"> Resource ID of the associated App Service plan, formatted as: &quot;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&quot;. </param>
        /// <param name="canonicalName"> CNAME of the certificate to be issued via free certificate. </param>
        /// <param name="domainValidationMethod"> Method of domain validation for free cert. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppCertificateData"/> instance for mocking. </returns>
        public static AppCertificateData AppCertificateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string password = null, string friendlyName = null, string subjectName = null, IEnumerable<string> hostNames = null, byte[] pfxBlob = null, string siteName = null, string selfLink = null, string issuer = null, DateTimeOffset? issueOn = null, DateTimeOffset? expireOn = null, BinaryData thumbprint = null, bool? isValid = null, byte[] cerBlob = null, string publicKeyHash = null, HostingEnvironmentProfile hostingEnvironmentProfile = null, ResourceIdentifier keyVaultId = null, string keyVaultSecretName = null, KeyVaultSecretStatus? keyVaultSecretStatus = null, ResourceIdentifier serverFarmId = null, string canonicalName = null, string domainValidationMethod = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();
            hostNames ??= new List<string>();

            return new AppCertificateData(id, name, resourceType, systemData, tags, location, password, friendlyName, subjectName, hostNames?.ToList(), pfxBlob, siteName, selfLink, issuer, issueOn, expireOn, thumbprint, isValid, cerBlob, publicKeyHash, hostingEnvironmentProfile, keyVaultId, keyVaultSecretName, keyVaultSecretStatus, serverFarmId, canonicalName, domainValidationMethod, kind);
        }

        /// <summary> Initializes a new instance of AppCertificatePatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="password"> Certificate password. </param>
        /// <param name="friendlyName"> Friendly name of the certificate. </param>
        /// <param name="subjectName"> Subject name of the certificate. </param>
        /// <param name="hostNames"> Host names the certificate applies to. </param>
        /// <param name="pfxBlob"> Pfx blob. </param>
        /// <param name="siteName"> App name. </param>
        /// <param name="selfLink"> Self link. </param>
        /// <param name="issuer"> Certificate issuer. </param>
        /// <param name="issueOn"> Certificate issue Date. </param>
        /// <param name="expireOn"> Certificate expiration date. </param>
        /// <param name="thumbprint"> Certificate thumbprint. </param>
        /// <param name="isValid"> Is the certificate valid?. </param>
        /// <param name="cerBlob"> Raw bytes of .cer file. </param>
        /// <param name="publicKeyHash"> Public key hash. </param>
        /// <param name="hostingEnvironmentProfile"> Specification for the App Service Environment to use for the certificate. </param>
        /// <param name="keyVaultId"> Key Vault Csm resource Id. </param>
        /// <param name="keyVaultSecretName"> Key Vault secret name. </param>
        /// <param name="keyVaultSecretStatus"> Status of the Key Vault secret. </param>
        /// <param name="serverFarmId"> Resource ID of the associated App Service plan, formatted as: &quot;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&quot;. </param>
        /// <param name="canonicalName"> CNAME of the certificate to be issued via free certificate. </param>
        /// <param name="domainValidationMethod"> Method of domain validation for free cert. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppCertificatePatch"/> instance for mocking. </returns>
        public static AppCertificatePatch AppCertificatePatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string password = null, string friendlyName = null, string subjectName = null, IEnumerable<string> hostNames = null, byte[] pfxBlob = null, string siteName = null, string selfLink = null, string issuer = null, DateTimeOffset? issueOn = null, DateTimeOffset? expireOn = null, BinaryData thumbprint = null, bool? isValid = null, byte[] cerBlob = null, string publicKeyHash = null, HostingEnvironmentProfile hostingEnvironmentProfile = null, ResourceIdentifier keyVaultId = null, string keyVaultSecretName = null, KeyVaultSecretStatus? keyVaultSecretStatus = null, ResourceIdentifier serverFarmId = null, string canonicalName = null, string domainValidationMethod = null, string kind = null)
        {
            hostNames ??= new List<string>();

            return new AppCertificatePatch(id, name, resourceType, systemData, password, friendlyName, subjectName, hostNames?.ToList(), pfxBlob, siteName, selfLink, issuer, issueOn, expireOn, thumbprint, isValid, cerBlob, publicKeyHash, hostingEnvironmentProfile, keyVaultId, keyVaultSecretName, keyVaultSecretStatus, serverFarmId, canonicalName, domainValidationMethod, kind);
        }

        /// <summary> Initializes a new instance of DeletedSiteData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="deletedSiteId"> Numeric id for the deleted site. </param>
        /// <param name="deletedTimestamp"> Time in UTC when the app was deleted. </param>
        /// <param name="subscription"> Subscription containing the deleted site. </param>
        /// <param name="resourceGroup"> ResourceGroup that contained the deleted site. </param>
        /// <param name="deletedSiteName"> Name of the deleted site. </param>
        /// <param name="slot"> Slot of the deleted site. </param>
        /// <param name="kindPropertiesKind"> Kind of site that was deleted. </param>
        /// <param name="geoRegionName"> Geo Region of the deleted site. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.DeletedSiteData"/> instance for mocking. </returns>
        public static DeletedSiteData DeletedSiteData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? deletedSiteId = null, string deletedTimestamp = null, string subscription = null, string resourceGroup = null, string deletedSiteName = null, string slot = null, string kindPropertiesKind = null, string geoRegionName = null, string kind = null)
        {
            return new DeletedSiteData(id, name, resourceType, systemData, deletedSiteId, deletedTimestamp, subscription, resourceGroup, deletedSiteName, slot, kindPropertiesKind, geoRegionName, kind);
        }

        /// <summary> Initializes a new instance of DiagnosticCategoryData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> Description of the diagnostic category. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.DiagnosticCategoryData"/> instance for mocking. </returns>
        public static DiagnosticCategoryData DiagnosticCategoryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, string kind = null)
        {
            return new DiagnosticCategoryData(id, name, resourceType, systemData, description, kind);
        }

        /// <summary> Initializes a new instance of WebSiteAnalysisDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> Description of the Analysis. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.WebSiteAnalysisDefinitionData"/> instance for mocking. </returns>
        public static WebSiteAnalysisDefinitionData WebSiteAnalysisDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, string kind = null)
        {
            return new WebSiteAnalysisDefinitionData(id, name, resourceType, systemData, description, kind);
        }

        /// <summary> Initializes a new instance of DiagnosticAnalysis. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="startOn"> Start time of the period. </param>
        /// <param name="endOn"> End time of the period. </param>
        /// <param name="abnormalTimePeriods"> List of time periods. </param>
        /// <param name="payload"> Data by each detector. </param>
        /// <param name="nonCorrelatedDetectors"> Data by each detector for detectors that did not corelate. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.DiagnosticAnalysis"/> instance for mocking. </returns>
        public static DiagnosticAnalysis DiagnosticAnalysis(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, IEnumerable<AbnormalTimePeriod> abnormalTimePeriods = null, IEnumerable<AnalysisDetectorEvidences> payload = null, IEnumerable<DetectorDefinition> nonCorrelatedDetectors = null, string kind = null)
        {
            abnormalTimePeriods ??= new List<AbnormalTimePeriod>();
            payload ??= new List<AnalysisDetectorEvidences>();
            nonCorrelatedDetectors ??= new List<DetectorDefinition>();

            return new DiagnosticAnalysis(id, name, resourceType, systemData, startOn, endOn, abnormalTimePeriods?.ToList(), payload?.ToList(), nonCorrelatedDetectors?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of AbnormalTimePeriod. </summary>
        /// <param name="startOn"> Start time of the downtime. </param>
        /// <param name="endOn"> End time of the downtime. </param>
        /// <param name="events"> List of Possible Cause of downtime. </param>
        /// <param name="solutions"> List of proposed solutions. </param>
        /// <returns> A new <see cref="Models.AbnormalTimePeriod"/> instance for mocking. </returns>
        public static AbnormalTimePeriod AbnormalTimePeriod(DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, IEnumerable<DetectorAbnormalTimePeriod> events = null, IEnumerable<DiagnosticSolution> solutions = null)
        {
            events ??= new List<DetectorAbnormalTimePeriod>();
            solutions ??= new List<DiagnosticSolution>();

            return new AbnormalTimePeriod(startOn, endOn, events?.ToList(), solutions?.ToList());
        }

        /// <summary> Initializes a new instance of DetectorAbnormalTimePeriod. </summary>
        /// <param name="startOn"> Start time of the correlated event. </param>
        /// <param name="endOn"> End time of the correlated event. </param>
        /// <param name="message"> Message describing the event. </param>
        /// <param name="source"> Represents the name of the Detector. </param>
        /// <param name="priority"> Represents the rank of the Detector. </param>
        /// <param name="metaData"> Downtime metadata. </param>
        /// <param name="issueType"> Represents the type of the Detector. </param>
        /// <param name="solutions"> List of proposed solutions. </param>
        /// <returns> A new <see cref="Models.DetectorAbnormalTimePeriod"/> instance for mocking. </returns>
        public static DetectorAbnormalTimePeriod DetectorAbnormalTimePeriod(DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string message = null, string source = null, double? priority = null, IEnumerable<IList<AppServiceNameValuePair>> metaData = null, DetectorIssueType? issueType = null, IEnumerable<DiagnosticSolution> solutions = null)
        {
            metaData ??= new List<IList<AppServiceNameValuePair>>();
            solutions ??= new List<DiagnosticSolution>();

            return new DetectorAbnormalTimePeriod(startOn, endOn, message, source, priority, metaData?.ToList(), issueType, solutions?.ToList());
        }

        /// <summary> Initializes a new instance of DiagnosticSolution. </summary>
        /// <param name="id"> Solution Id. </param>
        /// <param name="displayName"> Display Name of the solution. </param>
        /// <param name="order"> Order of the solution. </param>
        /// <param name="description"> Description of the solution. </param>
        /// <param name="solutionType"> Type of Solution. </param>
        /// <param name="data"> Solution Data. </param>
        /// <param name="metadata"> Solution Metadata. </param>
        /// <returns> A new <see cref="Models.DiagnosticSolution"/> instance for mocking. </returns>
        public static DiagnosticSolution DiagnosticSolution(double? id = null, string displayName = null, double? order = null, string description = null, DiagnosticSolutionType? solutionType = null, IEnumerable<IList<AppServiceNameValuePair>> data = null, IEnumerable<IList<AppServiceNameValuePair>> metadata = null)
        {
            data ??= new List<IList<AppServiceNameValuePair>>();
            metadata ??= new List<IList<AppServiceNameValuePair>>();

            return new DiagnosticSolution(id, displayName, order, description, solutionType, data?.ToList(), metadata?.ToList());
        }

        /// <summary> Initializes a new instance of AnalysisDetectorEvidences. </summary>
        /// <param name="source"> Name of the Detector. </param>
        /// <param name="detectorDefinition"> Detector Definition. </param>
        /// <param name="metrics"> Source Metrics. </param>
        /// <param name="data"> Additional Source Data. </param>
        /// <param name="dataSource"> Detector Meta Data. </param>
        /// <returns> A new <see cref="Models.AnalysisDetectorEvidences"/> instance for mocking. </returns>
        public static AnalysisDetectorEvidences AnalysisDetectorEvidences(string source = null, DetectorDefinition detectorDefinition = null, IEnumerable<DiagnosticMetricSet> metrics = null, IEnumerable<IList<AppServiceNameValuePair>> data = null, DetectorDataSource dataSource = null)
        {
            metrics ??= new List<DiagnosticMetricSet>();
            data ??= new List<IList<AppServiceNameValuePair>>();

            return new AnalysisDetectorEvidences(source, detectorDefinition, metrics?.ToList(), data?.ToList(), new DetectorMetadata(dataSource));
        }

        /// <summary> Initializes a new instance of DetectorDefinition. </summary>
        /// <param name="displayName"> Display name of the detector. </param>
        /// <param name="description"> Description of the detector. </param>
        /// <param name="rank"> Detector Rank. </param>
        /// <param name="isEnabled"> Flag representing whether detector is enabled or not. </param>
        /// <returns> A new <see cref="Models.DetectorDefinition"/> instance for mocking. </returns>
        public static DetectorDefinition DetectorDefinition(string displayName = null, string description = null, double? rank = null, bool? isEnabled = null)
        {
            return new DetectorDefinition(displayName, description, rank, isEnabled);
        }

        /// <summary> Initializes a new instance of DiagnosticMetricSet. </summary>
        /// <param name="name"> Name of the metric. </param>
        /// <param name="unit"> Metric&apos;s unit. </param>
        /// <param name="startOn"> Start time of the period. </param>
        /// <param name="endOn"> End time of the period. </param>
        /// <param name="timeGrain"> Presented time grain. Supported grains at the moment are PT1M, PT1H, P1D. </param>
        /// <param name="values"> Collection of metric values for the selected period based on the {Microsoft.Web.Hosting.Administration.DiagnosticMetricSet.TimeGrain}. </param>
        /// <returns> A new <see cref="Models.DiagnosticMetricSet"/> instance for mocking. </returns>
        public static DiagnosticMetricSet DiagnosticMetricSet(string name = null, string unit = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string timeGrain = null, IEnumerable<DiagnosticMetricSample> values = null)
        {
            values ??= new List<DiagnosticMetricSample>();

            return new DiagnosticMetricSet(name, unit, startOn, endOn, timeGrain, values?.ToList());
        }

        /// <summary> Initializes a new instance of DiagnosticMetricSample. </summary>
        /// <param name="timestamp"> Time at which metric is measured. </param>
        /// <param name="roleInstance">
        /// Role Instance. Null if this counter is not per instance 
        /// This is returned and should be whichever instance name we desire to be returned
        /// i.e. CPU and Memory return RDWORKERNAME (LargeDed..._IN_0) 
        /// where RDWORKERNAME is Machine name below and RoleInstance name in parenthesis
        /// </param>
        /// <param name="total"> Total value of the metric. If multiple measurements are made this will have sum of all. </param>
        /// <param name="maximum"> Maximum of the metric sampled during the time period. </param>
        /// <param name="minimum"> Minimum of the metric sampled during the time period. </param>
        /// <param name="isAggregated"> Whether the values are aggregates across all workers or not. </param>
        /// <returns> A new <see cref="Models.DiagnosticMetricSample"/> instance for mocking. </returns>
        public static DiagnosticMetricSample DiagnosticMetricSample(DateTimeOffset? timestamp = null, string roleInstance = null, double? total = null, double? maximum = null, double? minimum = null, bool? isAggregated = null)
        {
            return new DiagnosticMetricSample(timestamp, roleInstance, total, maximum, minimum, isAggregated);
        }

        /// <summary> Initializes a new instance of DetectorDataSource. </summary>
        /// <param name="instructions"> Instructions if any for the data source. </param>
        /// <param name="dataSourceUri"> Datasource Uri Links. </param>
        /// <returns> A new <see cref="Models.DetectorDataSource"/> instance for mocking. </returns>
        public static DetectorDataSource DetectorDataSource(IEnumerable<string> instructions = null, IEnumerable<AppServiceNameValuePair> dataSourceUri = null)
        {
            instructions ??= new List<string>();
            dataSourceUri ??= new List<AppServiceNameValuePair>();

            return new DetectorDataSource(instructions?.ToList(), dataSourceUri?.ToList());
        }

        /// <summary> Initializes a new instance of DetectorDefinitionResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="displayName"> Display name of the detector. </param>
        /// <param name="description"> Description of the detector. </param>
        /// <param name="rank"> Detector Rank. </param>
        /// <param name="isEnabled"> Flag representing whether detector is enabled or not. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.DetectorDefinitionResourceData"/> instance for mocking. </returns>
        public static DetectorDefinitionResourceData DetectorDefinitionResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string displayName = null, string description = null, double? rank = null, bool? isEnabled = null, string kind = null)
        {
            return new DetectorDefinitionResourceData(id, name, resourceType, systemData, displayName, description, rank, isEnabled, kind);
        }

        /// <summary> Initializes a new instance of DiagnosticDetectorResponse. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="startOn"> Start time of the period. </param>
        /// <param name="endOn"> End time of the period. </param>
        /// <param name="issueDetected"> Flag representing Issue was detected. </param>
        /// <param name="detectorDefinition"> Detector&apos;s definition. </param>
        /// <param name="metrics"> Metrics provided by the detector. </param>
        /// <param name="abnormalTimePeriods"> List of Correlated events found by the detector. </param>
        /// <param name="data"> Additional Data that detector wants to send. </param>
        /// <param name="dataSource"> Meta Data. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.DiagnosticDetectorResponse"/> instance for mocking. </returns>
        public static DiagnosticDetectorResponse DiagnosticDetectorResponse(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, bool? issueDetected = null, DetectorDefinition detectorDefinition = null, IEnumerable<DiagnosticMetricSet> metrics = null, IEnumerable<DetectorAbnormalTimePeriod> abnormalTimePeriods = null, IEnumerable<IList<AppServiceNameValuePair>> data = null, DetectorDataSource dataSource = null, string kind = null)
        {
            metrics ??= new List<DiagnosticMetricSet>();
            abnormalTimePeriods ??= new List<DetectorAbnormalTimePeriod>();
            data ??= new List<IList<AppServiceNameValuePair>>();

            return new DiagnosticDetectorResponse(id, name, resourceType, systemData, startOn, endOn, issueDetected, detectorDefinition, metrics?.ToList(), abnormalTimePeriods?.ToList(), data?.ToList(), new DetectorMetadata(dataSource), kind);
        }

        /// <summary> Initializes a new instance of AppSnapshot. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="time"> The time the snapshot was taken. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppSnapshot"/> instance for mocking. </returns>
        public static AppSnapshot AppSnapshot(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string time = null, string kind = null)
        {
            return new AppSnapshot(id, name, resourceType, systemData, time, kind);
        }

        /// <summary> Initializes a new instance of KubeEnvironmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> Extended Location. </param>
        /// <param name="provisioningState"> Provisioning state of the Kubernetes Environment. </param>
        /// <param name="deploymentErrors"> Any errors that occurred during deployment or deployment validation. </param>
        /// <param name="isInternalLoadBalancerEnabled"> Only visible within Vnet/Subnet. </param>
        /// <param name="defaultDomain"> Default Domain Name for the cluster. </param>
        /// <param name="staticIP"> Static IP of the KubeEnvironment. </param>
        /// <param name="arcConfiguration">
        /// Cluster configuration which determines the ARC cluster
        /// components types. Eg: Choosing between BuildService kind,
        /// FrontEnd Service ArtifactsStorageType etc.
        /// </param>
        /// <param name="appLogsConfiguration">
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only &quot;log-analytics&quot; is
        /// supported
        /// </param>
        /// <param name="aksResourceId"></param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.KubeEnvironmentData"/> instance for mocking. </returns>
        public static KubeEnvironmentData KubeEnvironmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, KubeEnvironmentProvisioningState? provisioningState = null, string deploymentErrors = null, bool? isInternalLoadBalancerEnabled = null, string defaultDomain = null, string staticIP = null, ArcConfiguration arcConfiguration = null, AppLogsConfiguration appLogsConfiguration = null, ResourceIdentifier aksResourceId = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();

            return new KubeEnvironmentData(id, name, resourceType, systemData, tags, location, extendedLocation, provisioningState, deploymentErrors, isInternalLoadBalancerEnabled, defaultDomain, staticIP, arcConfiguration, appLogsConfiguration, aksResourceId, kind);
        }

        /// <summary> Initializes a new instance of ArcConfiguration. </summary>
        /// <param name="artifactsStorageType"></param>
        /// <param name="artifactStorageClassName"></param>
        /// <param name="artifactStorageMountPath"></param>
        /// <param name="artifactStorageNodeName"></param>
        /// <param name="artifactStorageAccessMode"></param>
        /// <param name="frontEndServiceKind"></param>
        /// <param name="kubeConfig"></param>
        /// <returns> A new <see cref="Models.ArcConfiguration"/> instance for mocking. </returns>
        public static ArcConfiguration ArcConfiguration(ArtifactStorageType? artifactsStorageType = null, string artifactStorageClassName = null, string artifactStorageMountPath = null, string artifactStorageNodeName = null, string artifactStorageAccessMode = null, FrontEndServiceType? frontEndServiceKind = null, string kubeConfig = null)
        {
            return new ArcConfiguration(artifactsStorageType, artifactStorageClassName, artifactStorageMountPath, artifactStorageNodeName, artifactStorageAccessMode, new FrontEndConfiguration(frontEndServiceKind), kubeConfig);
        }

        /// <summary> Initializes a new instance of AppLogsConfiguration. </summary>
        /// <param name="destination"></param>
        /// <param name="logAnalyticsConfiguration"></param>
        /// <returns> A new <see cref="Models.AppLogsConfiguration"/> instance for mocking. </returns>
        public static AppLogsConfiguration AppLogsConfiguration(string destination = null, LogAnalyticsConfiguration logAnalyticsConfiguration = null)
        {
            return new AppLogsConfiguration(destination, logAnalyticsConfiguration);
        }

        /// <summary> Initializes a new instance of LogAnalyticsConfiguration. </summary>
        /// <param name="customerId"></param>
        /// <param name="sharedKey"></param>
        /// <returns> A new <see cref="Models.LogAnalyticsConfiguration"/> instance for mocking. </returns>
        public static LogAnalyticsConfiguration LogAnalyticsConfiguration(string customerId = null, string sharedKey = null)
        {
            return new LogAnalyticsConfiguration(customerId, sharedKey);
        }

        /// <summary> Initializes a new instance of KubeEnvironmentPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning state of the Kubernetes Environment. </param>
        /// <param name="deploymentErrors"> Any errors that occurred during deployment or deployment validation. </param>
        /// <param name="isInternalLoadBalancerEnabled"> Only visible within Vnet/Subnet. </param>
        /// <param name="defaultDomain"> Default Domain Name for the cluster. </param>
        /// <param name="staticIP"> Static IP of the KubeEnvironment. </param>
        /// <param name="arcConfiguration">
        /// Cluster configuration which determines the ARC cluster
        /// components types. Eg: Choosing between BuildService kind,
        /// FrontEnd Service ArtifactsStorageType etc.
        /// </param>
        /// <param name="appLogsConfiguration">
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only &quot;log-analytics&quot; is
        /// supported
        /// </param>
        /// <param name="aksResourceId"></param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.KubeEnvironmentPatch"/> instance for mocking. </returns>
        public static KubeEnvironmentPatch KubeEnvironmentPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, KubeEnvironmentProvisioningState? provisioningState = null, string deploymentErrors = null, bool? isInternalLoadBalancerEnabled = null, string defaultDomain = null, string staticIP = null, ArcConfiguration arcConfiguration = null, AppLogsConfiguration appLogsConfiguration = null, ResourceIdentifier aksResourceId = null, string kind = null)
        {
            return new KubeEnvironmentPatch(id, name, resourceType, systemData, provisioningState, deploymentErrors, isInternalLoadBalancerEnabled, defaultDomain, staticIP, arcConfiguration, appLogsConfiguration, aksResourceId, kind);
        }

        /// <summary> Initializes a new instance of ApplicationStackResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="stackName"> Application stack name. </param>
        /// <param name="display"> Application stack display name. </param>
        /// <param name="dependency"> Application stack dependency. </param>
        /// <param name="majorVersions"> List of major versions available. </param>
        /// <param name="frameworks"> List of frameworks associated with application stack. </param>
        /// <param name="isDeprecated"> &lt;code&gt;true&lt;/code&gt; if this is the stack is deprecated; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.ApplicationStackResource"/> instance for mocking. </returns>
        public static ApplicationStackResource ApplicationStackResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string stackName = null, string display = null, string dependency = null, IEnumerable<StackMajorVersion> majorVersions = null, IEnumerable<ApplicationStack> frameworks = null, IEnumerable<ApplicationStack> isDeprecated = null, string kind = null)
        {
            majorVersions ??= new List<StackMajorVersion>();
            frameworks ??= new List<ApplicationStack>();
            isDeprecated ??= new List<ApplicationStack>();

            return new ApplicationStackResource(id, name, resourceType, systemData, stackName, display, dependency, majorVersions?.ToList(), frameworks?.ToList(), isDeprecated?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of ApplicationStack. </summary>
        /// <param name="name"> Application stack name. </param>
        /// <param name="display"> Application stack display name. </param>
        /// <param name="dependency"> Application stack dependency. </param>
        /// <param name="majorVersions"> List of major versions available. </param>
        /// <param name="frameworks"> List of frameworks associated with application stack. </param>
        /// <param name="isDeprecated"> &lt;code&gt;true&lt;/code&gt; if this is the stack is deprecated; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <returns> A new <see cref="Models.ApplicationStack"/> instance for mocking. </returns>
        public static ApplicationStack ApplicationStack(string name = null, string display = null, string dependency = null, IEnumerable<StackMajorVersion> majorVersions = null, IEnumerable<ApplicationStack> frameworks = null, IEnumerable<ApplicationStack> isDeprecated = null)
        {
            majorVersions ??= new List<StackMajorVersion>();
            frameworks ??= new List<ApplicationStack>();
            isDeprecated ??= new List<ApplicationStack>();

            return new ApplicationStack(name, display, dependency, majorVersions?.ToList(), frameworks?.ToList(), isDeprecated?.ToList());
        }

        /// <summary> Initializes a new instance of StackMajorVersion. </summary>
        /// <param name="displayVersion"> Application stack major version (display only). </param>
        /// <param name="runtimeVersion"> Application stack major version (runtime only). </param>
        /// <param name="isDefault"> &lt;code&gt;true&lt;/code&gt; if this is the default major version; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="minorVersions"> Minor versions associated with the major version. </param>
        /// <param name="isApplicationInsights"> &lt;code&gt;true&lt;/code&gt; if this supports Application Insights; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isPreview"> &lt;code&gt;true&lt;/code&gt; if this stack is in Preview, otherwise &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isDeprecated"> &lt;code&gt;true&lt;/code&gt; if this stack has been deprecated, otherwise &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isHidden"> &lt;code&gt;true&lt;/code&gt; if this stack should be hidden for new customers on portal, otherwise &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="appSettingsDictionary">
        /// &lt;appSettings&gt;
        ///  &lt;appSetting name=&quot;FUNCTIONS_WORKER_RUNTIME&quot; value=&quot;dotnet&quot; /&gt;
        /// &lt;/appSettings&gt;
        ///  Example: All the function apps need AppSetting: &quot;FUNCTIONS_WORKER_RUNTIME&quot; to be set stack name
        /// </param>
        /// <param name="siteConfigPropertiesDictionary">
        /// &lt;siteConfigProperties&gt;
        ///  &lt;siteConfigProperty name=&quot;Use32BitWorkerProcess&quot; value=&quot;false&quot; /&gt;
        /// &lt;/siteConfigProperties&gt;
        ///  Example: All Linux Function Apps, need Use32BitWorkerProcess to be set to 0
        /// </param>
        /// <returns> A new <see cref="Models.StackMajorVersion"/> instance for mocking. </returns>
        public static StackMajorVersion StackMajorVersion(string displayVersion = null, string runtimeVersion = null, bool? isDefault = null, IEnumerable<StackMinorVersion> minorVersions = null, bool? isApplicationInsights = null, bool? isPreview = null, bool? isDeprecated = null, bool? isHidden = null, IDictionary<string, BinaryData> appSettingsDictionary = null, IDictionary<string, BinaryData> siteConfigPropertiesDictionary = null)
        {
            minorVersions ??= new List<StackMinorVersion>();
            appSettingsDictionary ??= new Dictionary<string, BinaryData>();
            siteConfigPropertiesDictionary ??= new Dictionary<string, BinaryData>();

            return new StackMajorVersion(displayVersion, runtimeVersion, isDefault, minorVersions?.ToList(), isApplicationInsights, isPreview, isDeprecated, isHidden, appSettingsDictionary, siteConfigPropertiesDictionary);
        }

        /// <summary> Initializes a new instance of StackMinorVersion. </summary>
        /// <param name="displayVersion"> Application stack minor version (display only). </param>
        /// <param name="runtimeVersion"> Application stack minor version (runtime only). </param>
        /// <param name="isDefault"> &lt;code&gt;true&lt;/code&gt; if this is the default minor version; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isRemoteDebuggingEnabled"> &lt;code&gt;true&lt;/code&gt; if this supports Remote Debugging, otherwise &lt;code&gt;false&lt;/code&gt;. </param>
        /// <returns> A new <see cref="Models.StackMinorVersion"/> instance for mocking. </returns>
        public static StackMinorVersion StackMinorVersion(string displayVersion = null, string runtimeVersion = null, bool? isDefault = null, bool? isRemoteDebuggingEnabled = null)
        {
            return new StackMinorVersion(displayVersion, runtimeVersion, isDefault, isRemoteDebuggingEnabled);
        }

        /// <summary> Initializes a new instance of FunctionAppStack. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Function App stack location. </param>
        /// <param name="displayText"> Function App stack (display only). </param>
        /// <param name="value"> Function App stack name. </param>
        /// <param name="majorVersions"> List of major versions available. </param>
        /// <param name="preferredOS"> Function App stack preferred OS. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.FunctionAppStack"/> instance for mocking. </returns>
        public static FunctionAppStack FunctionAppStack(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string displayText = null, string value = null, IEnumerable<FunctionAppMajorVersion> majorVersions = null, StackPreferredOS? preferredOS = null, string kind = null)
        {
            majorVersions ??= new List<FunctionAppMajorVersion>();

            return new FunctionAppStack(id, name, resourceType, systemData, location, displayText, value, majorVersions?.ToList(), preferredOS, kind);
        }

        /// <summary> Initializes a new instance of FunctionAppMajorVersion. </summary>
        /// <param name="displayText"> Function App stack major version (display only). </param>
        /// <param name="value"> Function App stack major version name. </param>
        /// <param name="minorVersions"> Minor versions associated with the major version. </param>
        /// <returns> A new <see cref="Models.FunctionAppMajorVersion"/> instance for mocking. </returns>
        public static FunctionAppMajorVersion FunctionAppMajorVersion(string displayText = null, string value = null, IEnumerable<FunctionAppMinorVersion> minorVersions = null)
        {
            minorVersions ??= new List<FunctionAppMinorVersion>();

            return new FunctionAppMajorVersion(displayText, value, minorVersions?.ToList());
        }

        /// <summary> Initializes a new instance of FunctionAppMinorVersion. </summary>
        /// <param name="displayText"> Function App stack (display only). </param>
        /// <param name="value"> Function App stack name. </param>
        /// <param name="stackSettings"> Settings associated with the minor version. </param>
        /// <returns> A new <see cref="Models.FunctionAppMinorVersion"/> instance for mocking. </returns>
        public static FunctionAppMinorVersion FunctionAppMinorVersion(string displayText = null, string value = null, FunctionAppRuntimes stackSettings = null)
        {
            return new FunctionAppMinorVersion(displayText, value, stackSettings);
        }

        /// <summary> Initializes a new instance of FunctionAppRuntimes. </summary>
        /// <param name="linuxRuntimeSettings"> Linux-specific settings associated with the minor version. </param>
        /// <param name="windowsRuntimeSettings"> Windows-specific settings associated with the minor version. </param>
        /// <returns> A new <see cref="Models.FunctionAppRuntimes"/> instance for mocking. </returns>
        public static FunctionAppRuntimes FunctionAppRuntimes(FunctionAppRuntimeSettings linuxRuntimeSettings = null, FunctionAppRuntimeSettings windowsRuntimeSettings = null)
        {
            return new FunctionAppRuntimes(linuxRuntimeSettings, windowsRuntimeSettings);
        }

        /// <summary> Initializes a new instance of FunctionAppRuntimeSettings. </summary>
        /// <param name="runtimeVersion"> Function App stack minor version (runtime only). </param>
        /// <param name="isRemoteDebuggingSupported"> &lt;code&gt;true&lt;/code&gt; if remote debugging is supported for the stack; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="appInsightsSettings"> Application Insights settings associated with the minor version. </param>
        /// <param name="gitHubActionSettings"> GitHub Actions settings associated with the minor version. </param>
        /// <param name="appSettingsDictionary"> Application settings associated with the minor version. </param>
        /// <param name="siteConfigPropertiesDictionary"> Configuration settings associated with the minor version. </param>
        /// <param name="supportedFunctionsExtensionVersions"> List of supported Functions extension versions. </param>
        /// <param name="isPreview"> &lt;code&gt;true&lt;/code&gt; if the stack is in preview; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isDeprecated"> &lt;code&gt;true&lt;/code&gt; if the stack is deprecated; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isHidden"> &lt;code&gt;true&lt;/code&gt; if the stack should be hidden; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="endOfLifeOn"> End-of-life date for the minor version. </param>
        /// <param name="isAutoUpdate"> &lt;code&gt;true&lt;/code&gt; if the stack version is auto-updated; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isEarlyAccess"> &lt;code&gt;true&lt;/code&gt; if the minor version is early-access; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isDefault"> &lt;code&gt;true&lt;/code&gt; if the minor version the default; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <returns> A new <see cref="Models.FunctionAppRuntimeSettings"/> instance for mocking. </returns>
        public static FunctionAppRuntimeSettings FunctionAppRuntimeSettings(string runtimeVersion = null, bool? isRemoteDebuggingSupported = null, AppInsightsWebAppStackSettings appInsightsSettings = null, GitHubActionWebAppStackSettings gitHubActionSettings = null, IReadOnlyDictionary<string, string> appSettingsDictionary = null, SiteConfigPropertiesDictionary siteConfigPropertiesDictionary = null, IEnumerable<string> supportedFunctionsExtensionVersions = null, bool? isPreview = null, bool? isDeprecated = null, bool? isHidden = null, DateTimeOffset? endOfLifeOn = null, bool? isAutoUpdate = null, bool? isEarlyAccess = null, bool? isDefault = null)
        {
            appSettingsDictionary ??= new Dictionary<string, string>();
            supportedFunctionsExtensionVersions ??= new List<string>();

            return new FunctionAppRuntimeSettings(runtimeVersion, isRemoteDebuggingSupported, appInsightsSettings, gitHubActionSettings, appSettingsDictionary, siteConfigPropertiesDictionary, supportedFunctionsExtensionVersions?.ToList(), isPreview, isDeprecated, isHidden, endOfLifeOn, isAutoUpdate, isEarlyAccess, isDefault);
        }

        /// <summary> Initializes a new instance of AppInsightsWebAppStackSettings. </summary>
        /// <param name="isSupported"> &lt;code&gt;true&lt;/code&gt; if remote Application Insights is supported for the stack; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isDefaultOff"> &lt;code&gt;true&lt;/code&gt; if Application Insights is disabled by default for the stack; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <returns> A new <see cref="Models.AppInsightsWebAppStackSettings"/> instance for mocking. </returns>
        public static AppInsightsWebAppStackSettings AppInsightsWebAppStackSettings(bool? isSupported = null, bool? isDefaultOff = null)
        {
            return new AppInsightsWebAppStackSettings(isSupported, isDefaultOff);
        }

        /// <summary> Initializes a new instance of GitHubActionWebAppStackSettings. </summary>
        /// <param name="isSupported"> &lt;code&gt;true&lt;/code&gt; if GitHub Actions is supported for the stack; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="supportedVersion"> The minor version that is supported for GitHub Actions. </param>
        /// <returns> A new <see cref="Models.GitHubActionWebAppStackSettings"/> instance for mocking. </returns>
        public static GitHubActionWebAppStackSettings GitHubActionWebAppStackSettings(bool? isSupported = null, string supportedVersion = null)
        {
            return new GitHubActionWebAppStackSettings(isSupported, supportedVersion);
        }

        /// <summary> Initializes a new instance of SiteConfigPropertiesDictionary. </summary>
        /// <param name="use32BitWorkerProcess"> &lt;code&gt;true&lt;/code&gt; if use32BitWorkerProcess should be set to true for the stack; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="linuxFxVersion"> LinuxFxVersion configuration setting. </param>
        /// <param name="javaVersion"> JavaVersion configuration setting. </param>
        /// <param name="powerShellVersion"> PowerShellVersion configuration setting. </param>
        /// <returns> A new <see cref="Models.SiteConfigPropertiesDictionary"/> instance for mocking. </returns>
        public static SiteConfigPropertiesDictionary SiteConfigPropertiesDictionary(bool? use32BitWorkerProcess = null, string linuxFxVersion = null, string javaVersion = null, string powerShellVersion = null)
        {
            return new SiteConfigPropertiesDictionary(use32BitWorkerProcess, linuxFxVersion, javaVersion, powerShellVersion);
        }

        /// <summary> Initializes a new instance of WebAppStack. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Web App stack location. </param>
        /// <param name="displayText"> Web App stack (display only). </param>
        /// <param name="value"> Web App stack name. </param>
        /// <param name="majorVersions"> List of major versions available. </param>
        /// <param name="preferredOS"> Web App stack preferred OS. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.WebAppStack"/> instance for mocking. </returns>
        public static WebAppStack WebAppStack(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string displayText = null, string value = null, IEnumerable<WebAppMajorVersion> majorVersions = null, StackPreferredOS? preferredOS = null, string kind = null)
        {
            majorVersions ??= new List<WebAppMajorVersion>();

            return new WebAppStack(id, name, resourceType, systemData, location, displayText, value, majorVersions?.ToList(), preferredOS, kind);
        }

        /// <summary> Initializes a new instance of WebAppMajorVersion. </summary>
        /// <param name="displayText"> Web App stack major version (display only). </param>
        /// <param name="value"> Web App stack major version name. </param>
        /// <param name="minorVersions"> Minor versions associated with the major version. </param>
        /// <returns> A new <see cref="Models.WebAppMajorVersion"/> instance for mocking. </returns>
        public static WebAppMajorVersion WebAppMajorVersion(string displayText = null, string value = null, IEnumerable<WebAppMinorVersion> minorVersions = null)
        {
            minorVersions ??= new List<WebAppMinorVersion>();

            return new WebAppMajorVersion(displayText, value, minorVersions?.ToList());
        }

        /// <summary> Initializes a new instance of WebAppMinorVersion. </summary>
        /// <param name="displayText"> Web App stack minor version (display only). </param>
        /// <param name="value"> Web App stack major version name. </param>
        /// <param name="stackSettings"> Settings associated with the minor version. </param>
        /// <returns> A new <see cref="Models.WebAppMinorVersion"/> instance for mocking. </returns>
        public static WebAppMinorVersion WebAppMinorVersion(string displayText = null, string value = null, WebAppRuntimes stackSettings = null)
        {
            return new WebAppMinorVersion(displayText, value, stackSettings);
        }

        /// <summary> Initializes a new instance of WebAppRuntimes. </summary>
        /// <param name="linuxRuntimeSettings"> Linux-specific settings associated with the minor version. </param>
        /// <param name="windowsRuntimeSettings"> Windows-specific settings associated with the minor version. </param>
        /// <param name="linuxContainerSettings"> Linux-specific settings associated with the Java container minor version. </param>
        /// <param name="windowsContainerSettings"> Windows-specific settings associated with the Java container minor version. </param>
        /// <returns> A new <see cref="Models.WebAppRuntimes"/> instance for mocking. </returns>
        public static WebAppRuntimes WebAppRuntimes(WebAppRuntimeSettings linuxRuntimeSettings = null, WebAppRuntimeSettings windowsRuntimeSettings = null, LinuxJavaContainerSettings linuxContainerSettings = null, WindowsJavaContainerSettings windowsContainerSettings = null)
        {
            return new WebAppRuntimes(linuxRuntimeSettings, windowsRuntimeSettings, linuxContainerSettings, windowsContainerSettings);
        }

        /// <summary> Initializes a new instance of WebAppRuntimeSettings. </summary>
        /// <param name="runtimeVersion"> Web App stack minor version (runtime only). </param>
        /// <param name="isRemoteDebuggingSupported"> &lt;code&gt;true&lt;/code&gt; if remote debugging is supported for the stack; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="appInsightsSettings"> Application Insights settings associated with the minor version. </param>
        /// <param name="gitHubActionSettings"> GitHub Actions settings associated with the minor version. </param>
        /// <param name="isPreview"> &lt;code&gt;true&lt;/code&gt; if the stack is in preview; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isDeprecated"> &lt;code&gt;true&lt;/code&gt; if the stack is deprecated; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isHidden"> &lt;code&gt;true&lt;/code&gt; if the stack should be hidden; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="endOfLifeOn"> End-of-life date for the minor version. </param>
        /// <param name="isAutoUpdate"> &lt;code&gt;true&lt;/code&gt; if the stack version is auto-updated; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isEarlyAccess"> &lt;code&gt;true&lt;/code&gt; if the minor version is early-access; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <returns> A new <see cref="Models.WebAppRuntimeSettings"/> instance for mocking. </returns>
        public static WebAppRuntimeSettings WebAppRuntimeSettings(string runtimeVersion = null, bool? isRemoteDebuggingSupported = null, AppInsightsWebAppStackSettings appInsightsSettings = null, GitHubActionWebAppStackSettings gitHubActionSettings = null, bool? isPreview = null, bool? isDeprecated = null, bool? isHidden = null, DateTimeOffset? endOfLifeOn = null, bool? isAutoUpdate = null, bool? isEarlyAccess = null)
        {
            return new WebAppRuntimeSettings(runtimeVersion, isRemoteDebuggingSupported, appInsightsSettings, gitHubActionSettings, isPreview, isDeprecated, isHidden, endOfLifeOn, isAutoUpdate, isEarlyAccess);
        }

        /// <summary> Initializes a new instance of LinuxJavaContainerSettings. </summary>
        /// <param name="java11Runtime"> Java 11 version (runtime only). </param>
        /// <param name="java8Runtime"> Java 8 version (runtime only). </param>
        /// <param name="isPreview"> &lt;code&gt;true&lt;/code&gt; if the stack is in preview; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isDeprecated"> &lt;code&gt;true&lt;/code&gt; if the stack is deprecated; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isHidden"> &lt;code&gt;true&lt;/code&gt; if the stack should be hidden; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="endOfLifeOn"> End-of-life date for the minor version. </param>
        /// <param name="isAutoUpdate"> &lt;code&gt;true&lt;/code&gt; if the stack version is auto-updated; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isEarlyAccess"> &lt;code&gt;true&lt;/code&gt; if the minor version is early-access; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <returns> A new <see cref="Models.LinuxJavaContainerSettings"/> instance for mocking. </returns>
        public static LinuxJavaContainerSettings LinuxJavaContainerSettings(string java11Runtime = null, string java8Runtime = null, bool? isPreview = null, bool? isDeprecated = null, bool? isHidden = null, DateTimeOffset? endOfLifeOn = null, bool? isAutoUpdate = null, bool? isEarlyAccess = null)
        {
            return new LinuxJavaContainerSettings(java11Runtime, java8Runtime, isPreview, isDeprecated, isHidden, endOfLifeOn, isAutoUpdate, isEarlyAccess);
        }

        /// <summary> Initializes a new instance of WindowsJavaContainerSettings. </summary>
        /// <param name="javaContainer"> Java container (runtime only). </param>
        /// <param name="javaContainerVersion"> Java container version (runtime only). </param>
        /// <param name="isPreview"> &lt;code&gt;true&lt;/code&gt; if the stack is in preview; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isDeprecated"> &lt;code&gt;true&lt;/code&gt; if the stack is deprecated; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isHidden"> &lt;code&gt;true&lt;/code&gt; if the stack should be hidden; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="endOfLifeOn"> End-of-life date for the minor version. </param>
        /// <param name="isAutoUpdate"> &lt;code&gt;true&lt;/code&gt; if the stack version is auto-updated; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isEarlyAccess"> &lt;code&gt;true&lt;/code&gt; if the minor version is early-access; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <returns> A new <see cref="Models.WindowsJavaContainerSettings"/> instance for mocking. </returns>
        public static WindowsJavaContainerSettings WindowsJavaContainerSettings(string javaContainer = null, string javaContainerVersion = null, bool? isPreview = null, bool? isDeprecated = null, bool? isHidden = null, DateTimeOffset? endOfLifeOn = null, bool? isAutoUpdate = null, bool? isEarlyAccess = null)
        {
            return new WindowsJavaContainerSettings(javaContainer, javaContainerVersion, isPreview, isDeprecated, isHidden, endOfLifeOn, isAutoUpdate, isEarlyAccess);
        }

        /// <summary> Initializes a new instance of AppServiceRecommendation. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="createdOn"> Timestamp when this instance was created. </param>
        /// <param name="recommendationId"> A GUID value that each recommendation object is associated with. </param>
        /// <param name="resourceId"> Full ARM resource ID string that this recommendation object is associated with. </param>
        /// <param name="resourceScope"> Name of a resource type this recommendation applies, e.g. Subscription, ServerFarm, Site. </param>
        /// <param name="ruleName"> Unique name of the rule. </param>
        /// <param name="displayName"> UI friendly name of the rule (may not be unique). </param>
        /// <param name="message"> Recommendation text. </param>
        /// <param name="level"> Level indicating how critical this recommendation can impact. </param>
        /// <param name="channels"> List of channels that this recommendation can apply. </param>
        /// <param name="categoryTags"> The list of category tags that this recommendation belongs to. </param>
        /// <param name="actionName"> Name of action recommended by this object. </param>
        /// <param name="enabled"> True if this recommendation is still valid (i.e. &quot;actionable&quot;). False if it is invalid. </param>
        /// <param name="states"> The list of states of this recommendation. If it&apos;s null then it should be considered &quot;Active&quot;. </param>
        /// <param name="startOn"> The beginning time in UTC of a range that the recommendation refers to. </param>
        /// <param name="endOn"> The end time in UTC of a range that the recommendation refers to. </param>
        /// <param name="nextNotificationOn"> When to notify this recommendation next in UTC. Null means that this will never be notified anymore. </param>
        /// <param name="notificationExpirationOn"> Date and time in UTC when this notification expires. </param>
        /// <param name="notifiedOn"> Last timestamp in UTC this instance was actually notified. Null means that this recommendation hasn&apos;t been notified yet. </param>
        /// <param name="score"> A metric value measured by the rule. </param>
        /// <param name="isDynamic"> True if this is associated with a dynamically added rule. </param>
        /// <param name="extensionName"> Extension name of the portal if exists. </param>
        /// <param name="bladeName"> Deep link to a blade on the portal. </param>
        /// <param name="forwardLink"> Forward link to an external document associated with the rule. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceRecommendation"/> instance for mocking. </returns>
        public static AppServiceRecommendation AppServiceRecommendation(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? createdOn = null, Guid? recommendationId = null, ResourceIdentifier resourceId = null, ResourceScopeType? resourceScope = null, string ruleName = null, string displayName = null, string message = null, NotificationLevel? level = null, RecommendationChannel? channels = null, IEnumerable<string> categoryTags = null, string actionName = null, int? enabled = null, IEnumerable<string> states = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, DateTimeOffset? nextNotificationOn = null, DateTimeOffset? notificationExpirationOn = null, DateTimeOffset? notifiedOn = null, double? score = null, bool? isDynamic = null, string extensionName = null, string bladeName = null, string forwardLink = null, string kind = null)
        {
            categoryTags ??= new List<string>();
            states ??= new List<string>();

            return new AppServiceRecommendation(id, name, resourceType, systemData, createdOn, recommendationId, resourceId, resourceScope, ruleName, displayName, message, level, channels, categoryTags?.ToList(), actionName, enabled, states?.ToList(), startOn, endOn, nextNotificationOn, notificationExpirationOn, notifiedOn, score, isDynamic, extensionName, bladeName, forwardLink, kind);
        }

        /// <summary> Initializes a new instance of RecommendationRuleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="recommendationName"> Unique name of the rule. </param>
        /// <param name="displayName"> UI friendly name of the rule. </param>
        /// <param name="message"> Localized name of the rule (Good for UI). </param>
        /// <param name="recommendationId">
        /// Recommendation ID of an associated recommendation object tied to the rule, if exists.
        /// If such an object doesn&apos;t exist, it is set to null.
        /// </param>
        /// <param name="description"> Localized detailed description of the rule. </param>
        /// <param name="actionName"> Name of action that is recommended by this rule in string. </param>
        /// <param name="level"> Level of impact indicating how critical this rule is. </param>
        /// <param name="channels"> List of available channels that this rule applies. </param>
        /// <param name="categoryTags"> The list of category tags that this recommendation rule belongs to. </param>
        /// <param name="isDynamic"> True if this is associated with a dynamically added rule. </param>
        /// <param name="extensionName"> Extension name of the portal if exists. Applicable to dynamic rule only. </param>
        /// <param name="bladeName"> Deep link to a blade on the portal. Applicable to dynamic rule only. </param>
        /// <param name="forwardLink"> Forward link to an external document associated with the rule. Applicable to dynamic rule only. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.RecommendationRuleData"/> instance for mocking. </returns>
        public static RecommendationRuleData RecommendationRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string recommendationName = null, string displayName = null, string message = null, Guid? recommendationId = null, string description = null, string actionName = null, NotificationLevel? level = null, RecommendationChannel? channels = null, IEnumerable<string> categoryTags = null, bool? isDynamic = null, string extensionName = null, string bladeName = null, string forwardLink = null, string kind = null)
        {
            categoryTags ??= new List<string>();

            return new RecommendationRuleData(id, name, resourceType, systemData, recommendationName, displayName, message, recommendationId, description, actionName, level, channels, categoryTags?.ToList(), isDynamic, extensionName, bladeName, forwardLink, kind);
        }

        /// <summary> Initializes a new instance of ResourceHealthMetadataData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="category"> The category that the resource matches in the RHC Policy File. </param>
        /// <param name="isSignalAvailable"> Is there a health signal for the resource. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.ResourceHealthMetadataData"/> instance for mocking. </returns>
        public static ResourceHealthMetadataData ResourceHealthMetadataData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string category = null, bool? isSignalAvailable = null, string kind = null)
        {
            return new ResourceHealthMetadataData(id, name, resourceType, systemData, category, isSignalAvailable, kind);
        }

        /// <summary> Initializes a new instance of PublishingUserData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="publishingUserName"> Username used for publishing. </param>
        /// <param name="publishingPassword"> Password used for publishing. </param>
        /// <param name="publishingPasswordHash"> Password hash used for publishing. </param>
        /// <param name="publishingPasswordHashSalt"> Password hash salt used for publishing. </param>
        /// <param name="scmUri"> Url of SCM site. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.PublishingUserData"/> instance for mocking. </returns>
        public static PublishingUserData PublishingUserData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string publishingUserName = null, string publishingPassword = null, string publishingPasswordHash = null, string publishingPasswordHashSalt = null, Uri scmUri = null, string kind = null)
        {
            return new PublishingUserData(id, name, resourceType, systemData, publishingUserName, publishingPassword, publishingPasswordHash, publishingPasswordHashSalt, scmUri, kind);
        }

        /// <summary> Initializes a new instance of AppServiceSourceControlData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="token"> OAuth access token. </param>
        /// <param name="tokenSecret"> OAuth access token secret. </param>
        /// <param name="refreshToken"> OAuth refresh token. </param>
        /// <param name="expireOn"> OAuth token expiration. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppServiceSourceControlData"/> instance for mocking. </returns>
        public static AppServiceSourceControlData AppServiceSourceControlData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string token = null, string tokenSecret = null, string refreshToken = null, DateTimeOffset? expireOn = null, string kind = null)
        {
            return new AppServiceSourceControlData(id, name, resourceType, systemData, token, tokenSecret, refreshToken, expireOn, kind);
        }

        /// <summary> Initializes a new instance of AppServiceBillingMeter. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="meterId"> Meter GUID onboarded in Commerce. </param>
        /// <param name="billingLocation"> Azure Location of billable resource. </param>
        /// <param name="shortName"> Short Name from App Service Azure pricing Page. </param>
        /// <param name="friendlyName"> Friendly name of the meter. </param>
        /// <param name="osType"> App Service OS type meter used for. </param>
        /// <param name="multiplier"> Meter Multiplier. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceBillingMeter"/> instance for mocking. </returns>
        public static AppServiceBillingMeter AppServiceBillingMeter(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, Guid? meterId = null, AzureLocation? billingLocation = null, string shortName = null, string friendlyName = null, string osType = null, double? multiplier = null, string kind = null)
        {
            return new AppServiceBillingMeter(id, name, resourceType, systemData, meterId, billingLocation, shortName, friendlyName, osType, multiplier, kind);
        }

        /// <summary> Initializes a new instance of ResourceNameAvailability. </summary>
        /// <param name="isNameAvailable"> &lt;code&gt;true&lt;/code&gt; indicates name is valid and available. &lt;code&gt;false&lt;/code&gt; indicates the name is invalid, unavailable, or both. </param>
        /// <param name="reason"> &lt;code&gt;Invalid&lt;/code&gt; indicates the name provided does not match Azure App Service naming requirements. &lt;code&gt;AlreadyExists&lt;/code&gt; indicates that the name is already in use and is therefore unavailable. </param>
        /// <param name="message"> If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that resource name is already in use, and direct them to select a different name. </param>
        /// <returns> A new <see cref="Models.ResourceNameAvailability"/> instance for mocking. </returns>
        public static ResourceNameAvailability ResourceNameAvailability(bool? isNameAvailable = null, InAvailabilityReasonType? reason = null, string message = null)
        {
            return new ResourceNameAvailability(isNameAvailable, reason, message);
        }

        /// <summary> Initializes a new instance of AppServiceDeploymentLocations. </summary>
        /// <param name="locations"> Available regions. </param>
        /// <param name="hostingEnvironments"> Available App Service Environments with full descriptions of the environments. </param>
        /// <param name="hostingEnvironmentDeploymentInfos"> Available App Service Environments with basic information. </param>
        /// <returns> A new <see cref="Models.AppServiceDeploymentLocations"/> instance for mocking. </returns>
        public static AppServiceDeploymentLocations AppServiceDeploymentLocations(IEnumerable<AppServiceGeoRegion> locations = null, IEnumerable<AppServiceEnvironmentProperties> hostingEnvironments = null, IEnumerable<HostingEnvironmentDeploymentInfo> hostingEnvironmentDeploymentInfos = null)
        {
            locations ??= new List<AppServiceGeoRegion>();
            hostingEnvironments ??= new List<AppServiceEnvironmentProperties>();
            hostingEnvironmentDeploymentInfos ??= new List<HostingEnvironmentDeploymentInfo>();

            return new AppServiceDeploymentLocations(locations?.ToList(), hostingEnvironments?.ToList(), hostingEnvironmentDeploymentInfos?.ToList());
        }

        /// <summary> Initializes a new instance of AppServiceGeoRegion. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> Region description. </param>
        /// <param name="displayName"> Display name for region. </param>
        /// <param name="orgDomain"> Display name for region. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceGeoRegion"/> instance for mocking. </returns>
        public static AppServiceGeoRegion AppServiceGeoRegion(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, string displayName = null, string orgDomain = null, string kind = null)
        {
            return new AppServiceGeoRegion(id, name, resourceType, systemData, description, displayName, orgDomain, kind);
        }

        /// <summary> Initializes a new instance of HostingEnvironmentDeploymentInfo. </summary>
        /// <param name="name"> Name of the App Service Environment. </param>
        /// <param name="location"> Location of the App Service Environment. </param>
        /// <returns> A new <see cref="Models.HostingEnvironmentDeploymentInfo"/> instance for mocking. </returns>
        public static HostingEnvironmentDeploymentInfo HostingEnvironmentDeploymentInfo(string name = null, AzureLocation? location = null)
        {
            return new HostingEnvironmentDeploymentInfo(name, location);
        }

        /// <summary> Initializes a new instance of AppServiceIdentifierData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="value"> String representation of the identity. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.AppServiceIdentifierData"/> instance for mocking. </returns>
        public static AppServiceIdentifierData AppServiceIdentifierData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string value = null, string kind = null)
        {
            return new AppServiceIdentifierData(id, name, resourceType, systemData, value, kind);
        }

        /// <summary> Initializes a new instance of PremierAddOnOffer. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="sku"> Premier add on SKU. </param>
        /// <param name="product"> Premier add on offer Product. </param>
        /// <param name="vendor"> Premier add on offer Vendor. </param>
        /// <param name="isPromoCodeRequired"> &lt;code&gt;true&lt;/code&gt; if promotion code is required; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="quota"> Premier add on offer Quota. </param>
        /// <param name="webHostingPlanRestrictions"> App Service plans this offer is restricted to. </param>
        /// <param name="privacyPolicyUri"> Privacy policy URL. </param>
        /// <param name="legalTermsUri"> Legal terms URL. </param>
        /// <param name="marketplacePublisher"> Marketplace publisher. </param>
        /// <param name="marketplaceOffer"> Marketplace offer. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.PremierAddOnOffer"/> instance for mocking. </returns>
        public static PremierAddOnOffer PremierAddOnOffer(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string sku = null, string product = null, string vendor = null, bool? isPromoCodeRequired = null, int? quota = null, AppServicePlanRestriction? webHostingPlanRestrictions = null, Uri privacyPolicyUri = null, Uri legalTermsUri = null, string marketplacePublisher = null, string marketplaceOffer = null, string kind = null)
        {
            return new PremierAddOnOffer(id, name, resourceType, systemData, sku, product, vendor, isPromoCodeRequired, quota, webHostingPlanRestrictions, privacyPolicyUri, legalTermsUri, marketplacePublisher, marketplaceOffer, kind);
        }

        /// <summary> Initializes a new instance of AppServiceSkuResult. </summary>
        /// <param name="resourceType"> Resource type that this SKU applies to. </param>
        /// <param name="skus"> List of SKUs the subscription is able to use. </param>
        /// <returns> A new <see cref="Models.AppServiceSkuResult"/> instance for mocking. </returns>
        public static AppServiceSkuResult AppServiceSkuResult(ResourceType? resourceType = null, IEnumerable<GlobalCsmSkuDescription> skus = null)
        {
            skus ??= new List<GlobalCsmSkuDescription>();

            return new AppServiceSkuResult(resourceType, skus?.ToList());
        }

        /// <summary> Initializes a new instance of GlobalCsmSkuDescription. </summary>
        /// <param name="name"> Name of the resource SKU. </param>
        /// <param name="tier"> Service Tier of the resource SKU. </param>
        /// <param name="size"> Size specifier of the resource SKU. </param>
        /// <param name="family"> Family code of the resource SKU. </param>
        /// <param name="capacity"> Min, max, and default scale values of the SKU. </param>
        /// <param name="locations"> Locations of the SKU. </param>
        /// <param name="capabilities"> Capabilities of the SKU, e.g., is traffic manager enabled?. </param>
        /// <returns> A new <see cref="Models.GlobalCsmSkuDescription"/> instance for mocking. </returns>
        public static GlobalCsmSkuDescription GlobalCsmSkuDescription(string name = null, string tier = null, string size = null, string family = null, AppServiceSkuCapacity capacity = null, IEnumerable<AzureLocation> locations = null, IEnumerable<AppServiceSkuCapability> capabilities = null)
        {
            locations ??= new List<AzureLocation>();
            capabilities ??= new List<AppServiceSkuCapability>();

            return new GlobalCsmSkuDescription(name, tier, size, family, capacity, locations?.ToList(), capabilities?.ToList());
        }

        /// <summary> Initializes a new instance of AppServiceVirtualNetworkValidationContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="vnetResourceGroup"> The Resource Group of the VNET to be validated. </param>
        /// <param name="vnetName"> The name of the VNET to be validated. </param>
        /// <param name="vnetSubnetName"> The subnet name to be validated. </param>
        /// <param name="subnetResourceId"> The ARM Resource ID of the subnet to validate. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceVirtualNetworkValidationContent"/> instance for mocking. </returns>
        public static AppServiceVirtualNetworkValidationContent AppServiceVirtualNetworkValidationContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string vnetResourceGroup = null, string vnetName = null, string vnetSubnetName = null, ResourceIdentifier subnetResourceId = null, string kind = null)
        {
            return new AppServiceVirtualNetworkValidationContent(id, name, resourceType, systemData, vnetResourceGroup, vnetName, vnetSubnetName, subnetResourceId, kind);
        }

        /// <summary> Initializes a new instance of VirtualNetworkValidationFailureDetails. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="message"> Text describing the validation outcome. </param>
        /// <param name="isFailed"> A flag describing whether or not validation failed. </param>
        /// <param name="failedTests"> A list of tests that failed in the validation. </param>
        /// <param name="warnings"> A list of warnings generated during validation. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.VirtualNetworkValidationFailureDetails"/> instance for mocking. </returns>
        public static VirtualNetworkValidationFailureDetails VirtualNetworkValidationFailureDetails(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string message = null, bool? isFailed = null, IEnumerable<VirtualNetworkValidationTestFailure> failedTests = null, IEnumerable<VirtualNetworkValidationTestFailure> warnings = null, string kind = null)
        {
            failedTests ??= new List<VirtualNetworkValidationTestFailure>();
            warnings ??= new List<VirtualNetworkValidationTestFailure>();

            return new VirtualNetworkValidationFailureDetails(id, name, resourceType, systemData, message, isFailed, failedTests?.ToList(), warnings?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of VirtualNetworkValidationTestFailure. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="testName"> The name of the test that failed. </param>
        /// <param name="details"> The details of what caused the failure, e.g. the blocking rule name, etc. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.VirtualNetworkValidationTestFailure"/> instance for mocking. </returns>
        public static VirtualNetworkValidationTestFailure VirtualNetworkValidationTestFailure(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string testName = null, string details = null, string kind = null)
        {
            return new VirtualNetworkValidationTestFailure(id, name, resourceType, systemData, testName, details, kind);
        }

        /// <summary> Initializes a new instance of AppServiceValidateResult. </summary>
        /// <param name="status"> Result of validation. </param>
        /// <param name="error"> Error details for the case when validation fails. </param>
        /// <returns> A new <see cref="Models.AppServiceValidateResult"/> instance for mocking. </returns>
        public static AppServiceValidateResult AppServiceValidateResult(string status = null, ValidateResponseError error = null)
        {
            return new AppServiceValidateResult(status, error);
        }

        /// <summary> Initializes a new instance of ValidateResponseError. </summary>
        /// <param name="code"> Validation error code. </param>
        /// <param name="message"> Validation error message. </param>
        /// <returns> A new <see cref="Models.ValidateResponseError"/> instance for mocking. </returns>
        public static ValidateResponseError ValidateResponseError(string code = null, string message = null)
        {
            return new ValidateResponseError(code, message);
        }

        /// <summary> Initializes a new instance of StaticSitesWorkflowPreviewContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="repositoryUri"> URL for the repository of the static site. </param>
        /// <param name="branch"> The target branch in the repository. </param>
        /// <param name="buildProperties"> Build properties to configure on the repository. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StaticSitesWorkflowPreviewContent"/> instance for mocking. </returns>
        public static StaticSitesWorkflowPreviewContent StaticSitesWorkflowPreviewContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, Uri repositoryUri = null, string branch = null, StaticSiteBuildProperties buildProperties = null, string kind = null)
        {
            return new StaticSitesWorkflowPreviewContent(id, name, resourceType, systemData, repositoryUri, branch, buildProperties, kind);
        }

        /// <summary> Initializes a new instance of StaticSiteBuildProperties. </summary>
        /// <param name="appLocation"> The path to the app code within the repository. </param>
        /// <param name="apiLocation"> The path to the api code within the repository. </param>
        /// <param name="appArtifactLocation"> Deprecated: The path of the app artifacts after building (deprecated in favor of OutputLocation). </param>
        /// <param name="outputLocation"> The output path of the app after building. </param>
        /// <param name="appBuildCommand"> A custom command to run during deployment of the static content application. </param>
        /// <param name="apiBuildCommand"> A custom command to run during deployment of the Azure Functions API application. </param>
        /// <param name="skipGithubActionWorkflowGeneration"> Skip Github Action workflow generation. </param>
        /// <param name="githubActionSecretNameOverride"> Github Action secret name override. </param>
        /// <returns> A new <see cref="Models.StaticSiteBuildProperties"/> instance for mocking. </returns>
        public static StaticSiteBuildProperties StaticSiteBuildProperties(string appLocation = null, string apiLocation = null, string appArtifactLocation = null, string outputLocation = null, string appBuildCommand = null, string apiBuildCommand = null, bool? skipGithubActionWorkflowGeneration = null, string githubActionSecretNameOverride = null)
        {
            return new StaticSiteBuildProperties(appLocation, apiLocation, appArtifactLocation, outputLocation, appBuildCommand, apiBuildCommand, skipGithubActionWorkflowGeneration, githubActionSecretNameOverride);
        }

        /// <summary> Initializes a new instance of StaticSitesWorkflowPreview. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="path"> The path for the workflow file to be generated. </param>
        /// <param name="contents"> The contents for the workflow file to be generated. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StaticSitesWorkflowPreview"/> instance for mocking. </returns>
        public static StaticSitesWorkflowPreview StaticSitesWorkflowPreview(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string path = null, string contents = null, string kind = null)
        {
            return new StaticSitesWorkflowPreview(id, name, resourceType, systemData, path, contents, kind);
        }

        /// <summary> Initializes a new instance of StaticSiteData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> Description of a SKU for a scalable resource. </param>
        /// <param name="identity"> Managed service identity. </param>
        /// <param name="defaultHostname"> The default autogenerated hostname for the static site. </param>
        /// <param name="repositoryUri"> URL for the repository of the static site. </param>
        /// <param name="branch"> The target branch in the repository. </param>
        /// <param name="customDomains"> The custom domains associated with this static site. </param>
        /// <param name="repositoryToken"> A user&apos;s github repository token. This is used to setup the Github Actions workflow file and API secrets. </param>
        /// <param name="buildProperties"> Build properties to configure on the repository. </param>
        /// <param name="privateEndpointConnections"> Private endpoint connections. </param>
        /// <param name="stagingEnvironmentPolicy"> State indicating whether staging environments are allowed or not allowed for a static web app. </param>
        /// <param name="allowConfigFileUpdates"> &lt;code&gt;false&lt;/code&gt; if config file is locked for this static web app; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="templateProperties"> Template options for generating a new repository. </param>
        /// <param name="contentDistributionEndpoint"> The content distribution endpoint for the static site. </param>
        /// <param name="keyVaultReferenceIdentity"> Identity to use for Key Vault Reference authentication. </param>
        /// <param name="userProvidedFunctionApps"> User provided function apps registered with the static site. </param>
        /// <param name="provider"> The provider that submitted the last deployment to the primary environment of the static site. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.StaticSiteData"/> instance for mocking. </returns>
        public static StaticSiteData StaticSiteData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, AppServiceSkuDescription sku = null, ManagedServiceIdentity identity = null, string defaultHostname = null, Uri repositoryUri = null, string branch = null, IEnumerable<string> customDomains = null, string repositoryToken = null, StaticSiteBuildProperties buildProperties = null, IEnumerable<ResponseMessageEnvelopeRemotePrivateEndpointConnection> privateEndpointConnections = null, StagingEnvironmentPolicy? stagingEnvironmentPolicy = null, bool? allowConfigFileUpdates = null, StaticSiteTemplate templateProperties = null, string contentDistributionEndpoint = null, string keyVaultReferenceIdentity = null, IEnumerable<StaticSiteUserProvidedFunctionAppData> userProvidedFunctionApps = null, string provider = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();
            customDomains ??= new List<string>();
            privateEndpointConnections ??= new List<ResponseMessageEnvelopeRemotePrivateEndpointConnection>();
            userProvidedFunctionApps ??= new List<StaticSiteUserProvidedFunctionAppData>();

            return new StaticSiteData(id, name, resourceType, systemData, tags, location, sku, identity, defaultHostname, repositoryUri, branch, customDomains?.ToList(), repositoryToken, buildProperties, privateEndpointConnections?.ToList(), stagingEnvironmentPolicy, allowConfigFileUpdates, templateProperties, contentDistributionEndpoint, keyVaultReferenceIdentity, userProvidedFunctionApps?.ToList(), provider, kind);
        }

        /// <summary> Initializes a new instance of ResponseMessageEnvelopeRemotePrivateEndpointConnection. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Geographical region resource belongs to e.g. SouthCentralUS, SouthEastAsia. </param>
        /// <param name="tags"> Tags associated with resource. </param>
        /// <param name="plan"> Azure resource manager plan. </param>
        /// <param name="properties"> Resource specific properties. </param>
        /// <param name="sku"> SKU description of the resource. </param>
        /// <param name="status"> Azure-AsyncOperation Status info. </param>
        /// <param name="error"> Azure-AsyncOperation Error info. </param>
        /// <param name="identity"> MSI resource. </param>
        /// <param name="zones"> Logical Availability Zones the service is hosted in. </param>
        /// <returns> A new <see cref="Models.ResponseMessageEnvelopeRemotePrivateEndpointConnection"/> instance for mocking. </returns>
        public static ResponseMessageEnvelopeRemotePrivateEndpointConnection ResponseMessageEnvelopeRemotePrivateEndpointConnection(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, IReadOnlyDictionary<string, string> tags = null, AppServiceArmPlan plan = null, RemotePrivateEndpointConnection properties = null, AppServiceSkuDescription sku = null, string status = null, ResponseError error = null, ManagedServiceIdentity identity = null, IEnumerable<string> zones = null)
        {
            tags ??= new Dictionary<string, string>();
            zones ??= new List<string>();

            return new ResponseMessageEnvelopeRemotePrivateEndpointConnection(id, name, resourceType, systemData, location, tags, plan, properties, sku, status, error, identity, zones?.ToList());
        }

        /// <summary> Initializes a new instance of AppServiceArmPlan. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="publisher"> The publisher. </param>
        /// <param name="product"> The product. </param>
        /// <param name="promotionCode"> The promotion code. </param>
        /// <param name="version"> Version of product. </param>
        /// <returns> A new <see cref="Models.AppServiceArmPlan"/> instance for mocking. </returns>
        public static AppServiceArmPlan AppServiceArmPlan(string name = null, string publisher = null, string product = null, string promotionCode = null, string version = null)
        {
            return new AppServiceArmPlan(name, publisher, product, promotionCode, version);
        }

        /// <summary> Initializes a new instance of RemotePrivateEndpointConnection. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"></param>
        /// <param name="privateEndpointId"> PrivateEndpoint of a remote private endpoint connection. </param>
        /// <param name="privateLinkServiceConnectionState"> The state of a private link connection. </param>
        /// <param name="ipAddresses"> Private IPAddresses mapped to the remote private endpoint. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.RemotePrivateEndpointConnection"/> instance for mocking. </returns>
        public static RemotePrivateEndpointConnection RemotePrivateEndpointConnection(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provisioningState = null, ResourceIdentifier privateEndpointId = null, PrivateLinkConnectionState privateLinkServiceConnectionState = null, IEnumerable<IPAddress> ipAddresses = null, string kind = null)
        {
            ipAddresses ??= new List<IPAddress>();

            return new RemotePrivateEndpointConnection(id, name, resourceType, systemData, provisioningState, ResourceManagerModelFactory.SubResource(privateEndpointId), privateLinkServiceConnectionState, ipAddresses?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of StaticSiteTemplate. </summary>
        /// <param name="templateRepositoryUri"> URL of the template repository. The newly generated repository will be based on this one. </param>
        /// <param name="owner"> Owner of the newly generated repository. </param>
        /// <param name="repositoryName"> Name of the newly generated repository. </param>
        /// <param name="description"> Description of the newly generated repository. </param>
        /// <param name="isPrivate"> Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public). </param>
        /// <returns> A new <see cref="Models.StaticSiteTemplate"/> instance for mocking. </returns>
        public static StaticSiteTemplate StaticSiteTemplate(Uri templateRepositoryUri = null, string owner = null, string repositoryName = null, string description = null, bool? isPrivate = null)
        {
            return new StaticSiteTemplate(templateRepositoryUri, owner, repositoryName, description, isPrivate);
        }

        /// <summary> Initializes a new instance of StaticSiteUserProvidedFunctionAppData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="functionAppResourceId"> The resource id of the function app registered with the static site. </param>
        /// <param name="functionAppRegion"> The region of the function app registered with the static site. </param>
        /// <param name="createdOn"> The date and time on which the function app was registered with the static site. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.StaticSiteUserProvidedFunctionAppData"/> instance for mocking. </returns>
        public static StaticSiteUserProvidedFunctionAppData StaticSiteUserProvidedFunctionAppData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier functionAppResourceId = null, string functionAppRegion = null, DateTimeOffset? createdOn = null, string kind = null)
        {
            return new StaticSiteUserProvidedFunctionAppData(id, name, resourceType, systemData, functionAppResourceId, functionAppRegion, createdOn, kind);
        }

        /// <summary> Initializes a new instance of StaticSitePatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="defaultHostname"> The default autogenerated hostname for the static site. </param>
        /// <param name="repositoryUri"> URL for the repository of the static site. </param>
        /// <param name="branch"> The target branch in the repository. </param>
        /// <param name="customDomains"> The custom domains associated with this static site. </param>
        /// <param name="repositoryToken"> A user&apos;s github repository token. This is used to setup the Github Actions workflow file and API secrets. </param>
        /// <param name="buildProperties"> Build properties to configure on the repository. </param>
        /// <param name="privateEndpointConnections"> Private endpoint connections. </param>
        /// <param name="stagingEnvironmentPolicy"> State indicating whether staging environments are allowed or not allowed for a static web app. </param>
        /// <param name="allowConfigFileUpdates"> &lt;code&gt;false&lt;/code&gt; if config file is locked for this static web app; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="templateProperties"> Template options for generating a new repository. </param>
        /// <param name="contentDistributionEndpoint"> The content distribution endpoint for the static site. </param>
        /// <param name="keyVaultReferenceIdentity"> Identity to use for Key Vault Reference authentication. </param>
        /// <param name="userProvidedFunctionApps"> User provided function apps registered with the static site. </param>
        /// <param name="provider"> The provider that submitted the last deployment to the primary environment of the static site. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StaticSitePatch"/> instance for mocking. </returns>
        public static StaticSitePatch StaticSitePatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string defaultHostname = null, Uri repositoryUri = null, string branch = null, IEnumerable<string> customDomains = null, string repositoryToken = null, StaticSiteBuildProperties buildProperties = null, IEnumerable<ResponseMessageEnvelopeRemotePrivateEndpointConnection> privateEndpointConnections = null, StagingEnvironmentPolicy? stagingEnvironmentPolicy = null, bool? allowConfigFileUpdates = null, StaticSiteTemplate templateProperties = null, string contentDistributionEndpoint = null, string keyVaultReferenceIdentity = null, IEnumerable<StaticSiteUserProvidedFunctionAppData> userProvidedFunctionApps = null, string provider = null, string kind = null)
        {
            customDomains ??= new List<string>();
            privateEndpointConnections ??= new List<ResponseMessageEnvelopeRemotePrivateEndpointConnection>();
            userProvidedFunctionApps ??= new List<StaticSiteUserProvidedFunctionAppData>();

            return new StaticSitePatch(id, name, resourceType, systemData, defaultHostname, repositoryUri, branch, customDomains?.ToList(), repositoryToken, buildProperties, privateEndpointConnections?.ToList(), stagingEnvironmentPolicy, allowConfigFileUpdates, templateProperties, contentDistributionEndpoint, keyVaultReferenceIdentity, userProvidedFunctionApps?.ToList(), provider, kind);
        }

        /// <summary> Initializes a new instance of StaticSiteUser. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provider"> The identity provider for the static site user. </param>
        /// <param name="userId"> The user id for the static site user. </param>
        /// <param name="displayName"> The display name for the static site user. </param>
        /// <param name="roles"> The roles for the static site user, in free-form string format. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StaticSiteUser"/> instance for mocking. </returns>
        public static StaticSiteUser StaticSiteUser(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provider = null, string userId = null, string displayName = null, string roles = null, string kind = null)
        {
            return new StaticSiteUser(id, name, resourceType, systemData, provider, userId, displayName, roles, kind);
        }

        /// <summary> Initializes a new instance of StaticSiteBuildData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="buildId"> An identifier for the static site build. </param>
        /// <param name="sourceBranch"> The source branch. </param>
        /// <param name="pullRequestTitle"> The title of a pull request that a static site build is related to. </param>
        /// <param name="hostname"> The hostname for a static site build. </param>
        /// <param name="createdOn"> When this build was created. </param>
        /// <param name="lastUpdatedOn"> When this build was updated. </param>
        /// <param name="status"> The status of the static site build. </param>
        /// <param name="userProvidedFunctionApps"> User provided function apps registered with the static site build. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.StaticSiteBuildData"/> instance for mocking. </returns>
        public static StaticSiteBuildData StaticSiteBuildData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string buildId = null, string sourceBranch = null, string pullRequestTitle = null, string hostname = null, DateTimeOffset? createdOn = null, DateTimeOffset? lastUpdatedOn = null, StaticSiteBuildStatus? status = null, IEnumerable<StaticSiteUserProvidedFunctionAppData> userProvidedFunctionApps = null, string kind = null)
        {
            userProvidedFunctionApps ??= new List<StaticSiteUserProvidedFunctionAppData>();

            return new StaticSiteBuildData(id, name, resourceType, systemData, buildId, sourceBranch, pullRequestTitle, hostname, createdOn, lastUpdatedOn, status, userProvidedFunctionApps?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of AppServiceConfigurationDictionary. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Settings. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AppServiceConfigurationDictionary"/> instance for mocking. </returns>
        public static AppServiceConfigurationDictionary AppServiceConfigurationDictionary(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> properties = null, string kind = null)
        {
            properties ??= new Dictionary<string, string>();

            return new AppServiceConfigurationDictionary(id, name, resourceType, systemData, properties, kind);
        }

        /// <summary> Initializes a new instance of StaticSiteFunctionOverview. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="functionName"> The name for the function. </param>
        /// <param name="triggerType"> The trigger type of the function. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StaticSiteFunctionOverview"/> instance for mocking. </returns>
        public static StaticSiteFunctionOverview StaticSiteFunctionOverview(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string functionName = null, FunctionTriggerType? triggerType = null, string kind = null)
        {
            return new StaticSiteFunctionOverview(id, name, resourceType, systemData, functionName, triggerType, kind);
        }

        /// <summary> Initializes a new instance of StaticSiteZipDeployment. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="appZipUri"> URL for the zipped app content. </param>
        /// <param name="apiZipUri"> URL for the zipped api content. </param>
        /// <param name="deploymentTitle"> A title to label the deployment. </param>
        /// <param name="provider"> The provider submitting this deployment. </param>
        /// <param name="functionLanguage"> The language of the api content, if it exists. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StaticSiteZipDeployment"/> instance for mocking. </returns>
        public static StaticSiteZipDeployment StaticSiteZipDeployment(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, Uri appZipUri = null, Uri apiZipUri = null, string deploymentTitle = null, string provider = null, string functionLanguage = null, string kind = null)
        {
            return new StaticSiteZipDeployment(id, name, resourceType, systemData, appZipUri, apiZipUri, deploymentTitle, provider, functionLanguage, kind);
        }

        /// <summary> Initializes a new instance of StaticSiteUserInvitationContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="domain"> The domain name for the static site custom domain. </param>
        /// <param name="provider"> The identity provider for the static site user. </param>
        /// <param name="userDetails"> The user id for the static site user. </param>
        /// <param name="roles"> The roles for the static site user, in free-form string format. </param>
        /// <param name="numHoursToExpiration"> The number of hours the sas token stays valid. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StaticSiteUserInvitationContent"/> instance for mocking. </returns>
        public static StaticSiteUserInvitationContent StaticSiteUserInvitationContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string domain = null, string provider = null, string userDetails = null, string roles = null, int? numHoursToExpiration = null, string kind = null)
        {
            return new StaticSiteUserInvitationContent(id, name, resourceType, systemData, domain, provider, userDetails, roles, numHoursToExpiration, kind);
        }

        /// <summary> Initializes a new instance of StaticSiteUserInvitationResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="expiresOn"> The expiration time of the invitation. </param>
        /// <param name="invitationUri"> The url for the invitation link. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StaticSiteUserInvitationResult"/> instance for mocking. </returns>
        public static StaticSiteUserInvitationResult StaticSiteUserInvitationResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? expiresOn = null, Uri invitationUri = null, string kind = null)
        {
            return new StaticSiteUserInvitationResult(id, name, resourceType, systemData, expiresOn, invitationUri, kind);
        }

        /// <summary> Initializes a new instance of StaticSiteCustomDomainOverviewData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="domainName"> The domain name for the static site custom domain. </param>
        /// <param name="createdOn"> The date and time on which the custom domain was created for the static site. </param>
        /// <param name="status"> The status of the custom domain. </param>
        /// <param name="validationToken"> The TXT record validation token. </param>
        /// <param name="errorMessage"></param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.StaticSiteCustomDomainOverviewData"/> instance for mocking. </returns>
        public static StaticSiteCustomDomainOverviewData StaticSiteCustomDomainOverviewData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string domainName = null, DateTimeOffset? createdOn = null, CustomDomainStatus? status = null, string validationToken = null, string errorMessage = null, string kind = null)
        {
            return new StaticSiteCustomDomainOverviewData(id, name, resourceType, systemData, domainName, createdOn, status, validationToken, errorMessage, kind);
        }

        /// <summary> Initializes a new instance of StaticSiteCustomDomainContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="validationMethod"> Validation method for adding a custom domain. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StaticSiteCustomDomainContent"/> instance for mocking. </returns>
        public static StaticSiteCustomDomainContent StaticSiteCustomDomainContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string validationMethod = null, string kind = null)
        {
            return new StaticSiteCustomDomainContent(id, name, resourceType, systemData, validationMethod, kind);
        }

        /// <summary> Initializes a new instance of StaticSiteStringList. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> List of string resources. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StaticSiteStringList"/> instance for mocking. </returns>
        public static StaticSiteStringList StaticSiteStringList(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<string> properties = null, string kind = null)
        {
            properties ??= new List<string>();

            return new StaticSiteStringList(id, name, resourceType, systemData, properties?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of StaticSiteResetContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="repositoryToken"> The token which proves admin privileges to the repository. </param>
        /// <param name="shouldUpdateRepository"> Determines whether the repository should be updated with the new properties. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StaticSiteResetContent"/> instance for mocking. </returns>
        public static StaticSiteResetContent StaticSiteResetContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string repositoryToken = null, bool? shouldUpdateRepository = null, string kind = null)
        {
            return new StaticSiteResetContent(id, name, resourceType, systemData, repositoryToken, shouldUpdateRepository, kind);
        }

        /// <summary> Initializes a new instance of SitePatchInfo. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="identity"> Managed service identity. </param>
        /// <param name="state"> Current state of the app. </param>
        /// <param name="hostNames"> Hostnames associated with the app. </param>
        /// <param name="repositorySiteName"> Name of the repository site. </param>
        /// <param name="usageState"> State indicating whether the app has exceeded its quota usage. Read-only. </param>
        /// <param name="isEnabled"> &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the app offline). </param>
        /// <param name="enabledHostNames">
        /// Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
        /// the app is not served on those hostnames.
        /// </param>
        /// <param name="availabilityState"> Management information availability state for the app. </param>
        /// <param name="hostNameSslStates"> Hostname SSL states are used to manage the SSL bindings for app&apos;s hostnames. </param>
        /// <param name="serverFarmId"> Resource ID of the associated App Service plan, formatted as: &quot;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&quot;. </param>
        /// <param name="isReserved"> &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isXenon"> Obsolete: Hyper-V sandbox. </param>
        /// <param name="isHyperV"> Hyper-V sandbox. </param>
        /// <param name="lastModifiedOn"> Last time the app was modified, in UTC. Read-only. </param>
        /// <param name="siteConfig"> Configuration of the app. </param>
        /// <param name="trafficManagerHostNames"> Azure Traffic Manager hostnames associated with the app. Read-only. </param>
        /// <param name="isScmSiteAlsoStopped"> &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="targetSwapSlot"> Specifies which deployment slot this app will swap into. Read-only. </param>
        /// <param name="hostingEnvironmentProfile"> App Service Environment to use for the app. </param>
        /// <param name="isClientAffinityEnabled"> &lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="isClientCertEnabled"> &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="clientCertMode">
        /// This composes with ClientCertEnabled setting.
        /// - ClientCertEnabled: false means ClientCert is ignored.
        /// - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
        /// - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
        /// </param>
        /// <param name="clientCertExclusionPaths"> client certificate authentication comma-separated exclusion paths. </param>
        /// <param name="isHostNameDisabled">
        /// &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        ///  If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management process.
        /// </param>
        /// <param name="customDomainVerificationId"> Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification. </param>
        /// <param name="outboundIPAddresses"> List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only. </param>
        /// <param name="possibleOutboundIPAddresses"> List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only. </param>
        /// <param name="containerSize"> Size of the function container. </param>
        /// <param name="dailyMemoryTimeQuota"> Maximum allowed daily memory-time quota (applicable on dynamic apps only). </param>
        /// <param name="suspendOn"> App suspended till in case memory-time quota is exceeded. </param>
        /// <param name="maxNumberOfWorkers">
        /// Maximum number of workers.
        /// This only applies to Functions container.
        /// </param>
        /// <param name="cloningInfo"> If specified during app creation, the app is cloned from a source app. </param>
        /// <param name="resourceGroup"> Name of the resource group the app belongs to. Read-only. </param>
        /// <param name="isDefaultContainer"> &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="defaultHostName"> Default hostname of the app. Read-only. </param>
        /// <param name="slotSwapStatus"> Status of the last deployment slot swap operation. </param>
        /// <param name="isHttpsOnly">
        /// HttpsOnly: configures a web site to accept only https requests. Issues redirect for
        /// http requests
        /// </param>
        /// <param name="redundancyMode"> Site redundancy mode. </param>
        /// <param name="inProgressOperationId"> Specifies an operation id if this site has a pending operation. </param>
        /// <param name="isStorageAccountRequired"> Checks if Customer provided storage account is required. </param>
        /// <param name="keyVaultReferenceIdentity"> Identity to use for Key Vault Reference authentication. </param>
        /// <param name="virtualNetworkSubnetId">
        /// Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration.
        /// This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
        /// </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.SitePatchInfo"/> instance for mocking. </returns>
        public static SitePatchInfo SitePatchInfo(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedServiceIdentity identity = null, string state = null, IEnumerable<string> hostNames = null, string repositorySiteName = null, AppServiceUsageState? usageState = null, bool? isEnabled = null, IEnumerable<string> enabledHostNames = null, WebSiteAvailabilityState? availabilityState = null, IEnumerable<HostNameSslState> hostNameSslStates = null, ResourceIdentifier serverFarmId = null, bool? isReserved = null, bool? isXenon = null, bool? isHyperV = null, DateTimeOffset? lastModifiedOn = null, SiteConfigProperties siteConfig = null, IEnumerable<string> trafficManagerHostNames = null, bool? isScmSiteAlsoStopped = null, string targetSwapSlot = null, HostingEnvironmentProfile hostingEnvironmentProfile = null, bool? isClientAffinityEnabled = null, bool? isClientCertEnabled = null, ClientCertMode? clientCertMode = null, string clientCertExclusionPaths = null, bool? isHostNameDisabled = null, string customDomainVerificationId = null, string outboundIPAddresses = null, string possibleOutboundIPAddresses = null, int? containerSize = null, int? dailyMemoryTimeQuota = null, DateTimeOffset? suspendOn = null, int? maxNumberOfWorkers = null, CloningInfo cloningInfo = null, string resourceGroup = null, bool? isDefaultContainer = null, string defaultHostName = null, SlotSwapStatus slotSwapStatus = null, bool? isHttpsOnly = null, RedundancyMode? redundancyMode = null, Guid? inProgressOperationId = null, bool? isStorageAccountRequired = null, string keyVaultReferenceIdentity = null, ResourceIdentifier virtualNetworkSubnetId = null, string kind = null)
        {
            hostNames ??= new List<string>();
            enabledHostNames ??= new List<string>();
            hostNameSslStates ??= new List<HostNameSslState>();
            trafficManagerHostNames ??= new List<string>();

            return new SitePatchInfo(id, name, resourceType, systemData, identity, state, hostNames?.ToList(), repositorySiteName, usageState, isEnabled, enabledHostNames?.ToList(), availabilityState, hostNameSslStates?.ToList(), serverFarmId, isReserved, isXenon, isHyperV, lastModifiedOn, siteConfig, trafficManagerHostNames?.ToList(), isScmSiteAlsoStopped, targetSwapSlot, hostingEnvironmentProfile, isClientAffinityEnabled, isClientCertEnabled, clientCertMode, clientCertExclusionPaths, isHostNameDisabled, customDomainVerificationId, outboundIPAddresses, possibleOutboundIPAddresses, containerSize, dailyMemoryTimeQuota, suspendOn, maxNumberOfWorkers, cloningInfo, resourceGroup, isDefaultContainer, defaultHostName, slotSwapStatus, isHttpsOnly, redundancyMode, inProgressOperationId, isStorageAccountRequired, keyVaultReferenceIdentity, virtualNetworkSubnetId, kind);
        }

        /// <summary> Initializes a new instance of CustomHostnameAnalysisResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="isHostnameAlreadyVerified"> &lt;code&gt;true&lt;/code&gt; if hostname is already verified; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="customDomainVerificationTest"> DNS verification test result. </param>
        /// <param name="customDomainVerificationFailureInfo"> Raw failure information if DNS verification fails. </param>
        /// <param name="hasConflictOnScaleUnit"> &lt;code&gt;true&lt;/code&gt; if there is a conflict on a scale unit; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="hasConflictAcrossSubscription"> &lt;code&gt;true&lt;/code&gt; if there is a conflict across subscriptions; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="conflictingAppResourceId"> Name of the conflicting app on scale unit if it&apos;s within the same subscription. </param>
        /// <param name="cNameRecords"> CName records controller can see for this hostname. </param>
        /// <param name="txtRecords"> TXT records controller can see for this hostname. </param>
        /// <param name="aRecords"> A records controller can see for this hostname. </param>
        /// <param name="alternateCNameRecords"> Alternate CName records controller can see for this hostname. </param>
        /// <param name="alternateTxtRecords"> Alternate TXT records controller can see for this hostname. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.CustomHostnameAnalysisResult"/> instance for mocking. </returns>
        public static CustomHostnameAnalysisResult CustomHostnameAnalysisResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? isHostnameAlreadyVerified = null, DnsVerificationTestResult? customDomainVerificationTest = null, ResponseError customDomainVerificationFailureInfo = null, bool? hasConflictOnScaleUnit = null, bool? hasConflictAcrossSubscription = null, string conflictingAppResourceId = null, IEnumerable<string> cNameRecords = null, IEnumerable<string> txtRecords = null, IEnumerable<string> aRecords = null, IEnumerable<string> alternateCNameRecords = null, IEnumerable<string> alternateTxtRecords = null, string kind = null)
        {
            cNameRecords ??= new List<string>();
            txtRecords ??= new List<string>();
            aRecords ??= new List<string>();
            alternateCNameRecords ??= new List<string>();
            alternateTxtRecords ??= new List<string>();

            return new CustomHostnameAnalysisResult(id, name, resourceType, systemData, isHostnameAlreadyVerified, customDomainVerificationTest, customDomainVerificationFailureInfo, hasConflictOnScaleUnit, hasConflictAcrossSubscription, conflictingAppResourceId, cNameRecords?.ToList(), txtRecords?.ToList(), aRecords?.ToList(), alternateCNameRecords?.ToList(), alternateTxtRecords?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of WebAppBackupInfo. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="backupName"> Name of the backup. </param>
        /// <param name="isEnabled"> True if the backup schedule is enabled (must be included in that case), false if the backup schedule should be disabled. </param>
        /// <param name="storageAccountUri"> SAS URL to the container. </param>
        /// <param name="backupSchedule"> Schedule for the backup if it is executed periodically. </param>
        /// <param name="databases"> Databases included in the backup. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.WebAppBackupInfo"/> instance for mocking. </returns>
        public static WebAppBackupInfo WebAppBackupInfo(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string backupName = null, bool? isEnabled = null, Uri storageAccountUri = null, WebAppBackupSchedule backupSchedule = null, IEnumerable<AppServiceDatabaseBackupSetting> databases = null, string kind = null)
        {
            databases ??= new List<AppServiceDatabaseBackupSetting>();

            return new WebAppBackupInfo(id, name, resourceType, systemData, backupName, isEnabled, storageAccountUri, backupSchedule, databases?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of WebAppBackupSchedule. </summary>
        /// <param name="frequencyInterval"> How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day). </param>
        /// <param name="frequencyUnit"> The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7). </param>
        /// <param name="shouldKeepAtLeastOneBackup"> True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise. </param>
        /// <param name="retentionPeriodInDays"> After how many days backups should be deleted. </param>
        /// <param name="startOn"> When the schedule should start working. </param>
        /// <param name="lastExecutedOn"> Last time when this schedule was triggered. </param>
        /// <returns> A new <see cref="Models.WebAppBackupSchedule"/> instance for mocking. </returns>
        public static WebAppBackupSchedule WebAppBackupSchedule(int frequencyInterval = default, BackupFrequencyUnit frequencyUnit = default, bool shouldKeepAtLeastOneBackup = default, int retentionPeriodInDays = default, DateTimeOffset? startOn = null, DateTimeOffset? lastExecutedOn = null)
        {
            return new WebAppBackupSchedule(frequencyInterval, frequencyUnit, shouldKeepAtLeastOneBackup, retentionPeriodInDays, startOn, lastExecutedOn);
        }

        /// <summary> Initializes a new instance of AppServiceDatabaseBackupSetting. </summary>
        /// <param name="databaseType"> Database type (e.g. SqlAzure / MySql). </param>
        /// <param name="name"></param>
        /// <param name="connectionStringName">
        /// Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.
        /// This is used during restore with overwrite connection strings options.
        /// </param>
        /// <param name="connectionString"> Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one. </param>
        /// <returns> A new <see cref="Models.AppServiceDatabaseBackupSetting"/> instance for mocking. </returns>
        public static AppServiceDatabaseBackupSetting AppServiceDatabaseBackupSetting(AppServiceDatabaseType databaseType = default, string name = null, string connectionStringName = null, string connectionString = null)
        {
            return new AppServiceDatabaseBackupSetting(databaseType, name, connectionStringName, connectionString);
        }

        /// <summary> Initializes a new instance of WebAppBackupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="backupId"> Id of the backup. </param>
        /// <param name="storageAccountUri"> SAS URL for the storage account container which contains this backup. </param>
        /// <param name="blobName"> Name of the blob which contains data for this backup. </param>
        /// <param name="backupName"> Name of this backup. </param>
        /// <param name="status"> Backup status. </param>
        /// <param name="sizeInBytes"> Size of the backup in bytes. </param>
        /// <param name="createdOn"> Timestamp of the backup creation. </param>
        /// <param name="log"> Details regarding this backup. Might contain an error message. </param>
        /// <param name="databases"> List of databases included in the backup. </param>
        /// <param name="isScheduled"> True if this backup has been created due to a schedule being triggered. </param>
        /// <param name="lastRestoreOn"> Timestamp of a last restore operation which used this backup. </param>
        /// <param name="finishedOn"> Timestamp when this backup finished. </param>
        /// <param name="correlationId"> Unique correlation identifier. Please use this along with the timestamp while communicating with Azure support. </param>
        /// <param name="websiteSizeInBytes"> Size of the original web app which has been backed up. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.WebAppBackupData"/> instance for mocking. </returns>
        public static WebAppBackupData WebAppBackupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? backupId = null, Uri storageAccountUri = null, string blobName = null, string backupName = null, WebAppBackupStatus? status = null, long? sizeInBytes = null, DateTimeOffset? createdOn = null, string log = null, IEnumerable<AppServiceDatabaseBackupSetting> databases = null, bool? isScheduled = null, DateTimeOffset? lastRestoreOn = null, DateTimeOffset? finishedOn = null, string correlationId = null, long? websiteSizeInBytes = null, string kind = null)
        {
            databases ??= new List<AppServiceDatabaseBackupSetting>();

            return new WebAppBackupData(id, name, resourceType, systemData, backupId, storageAccountUri, blobName, backupName, status, sizeInBytes, createdOn, log, databases?.ToList(), isScheduled, lastRestoreOn, finishedOn, correlationId, websiteSizeInBytes, kind);
        }

        /// <summary> Initializes a new instance of RestoreRequestInfo. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="storageAccountUri"> SAS URL to the container. </param>
        /// <param name="blobName"> Name of a blob which contains the backup. </param>
        /// <param name="canOverwrite"> &lt;code&gt;true&lt;/code&gt; if the restore operation can overwrite target app; otherwise, &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;true&lt;/code&gt; is needed if trying to restore over an existing app. </param>
        /// <param name="siteName"> Name of an app. </param>
        /// <param name="databases"> Collection of databases which should be restored. This list has to match the list of databases included in the backup. </param>
        /// <param name="ignoreConflictingHostNames">
        /// Changes a logic when restoring an app with custom domains. &lt;code&gt;true&lt;/code&gt; to remove custom domains automatically. If &lt;code&gt;false&lt;/code&gt;, custom domains are added to 
        /// the app&apos;s object when it is being restored, but that might fail due to conflicts during the operation.
        /// </param>
        /// <param name="ignoreDatabases"> Ignore the databases and only restore the site content. </param>
        /// <param name="appServicePlan"> Specify app service plan that will own restored site. </param>
        /// <param name="operationType"> Operation type. </param>
        /// <param name="adjustConnectionStrings"> &lt;code&gt;true&lt;/code&gt; if SiteConfig.ConnectionStrings should be set in new app; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="hostingEnvironment"> App Service Environment name, if needed (only when restoring an app to an App Service Environment). </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.RestoreRequestInfo"/> instance for mocking. </returns>
        public static RestoreRequestInfo RestoreRequestInfo(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, Uri storageAccountUri = null, string blobName = null, bool? canOverwrite = null, string siteName = null, IEnumerable<AppServiceDatabaseBackupSetting> databases = null, bool? ignoreConflictingHostNames = null, bool? ignoreDatabases = null, string appServicePlan = null, BackupRestoreOperationType? operationType = null, bool? adjustConnectionStrings = null, string hostingEnvironment = null, string kind = null)
        {
            databases ??= new List<AppServiceDatabaseBackupSetting>();

            return new RestoreRequestInfo(id, name, resourceType, systemData, storageAccountUri, blobName, canOverwrite, siteName, databases?.ToList(), ignoreConflictingHostNames, ignoreDatabases, appServicePlan, operationType, adjustConnectionStrings, hostingEnvironment, kind);
        }

        /// <summary> Initializes a new instance of CsmPublishingCredentialsPoliciesEntityData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="allow"> &lt;code&gt;true&lt;/code&gt; to allow access to a publishing method; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.CsmPublishingCredentialsPoliciesEntityData"/> instance for mocking. </returns>
        public static CsmPublishingCredentialsPoliciesEntityData CsmPublishingCredentialsPoliciesEntityData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? allow = null, string kind = null)
        {
            return new CsmPublishingCredentialsPoliciesEntityData(id, name, resourceType, systemData, allow, kind);
        }

        /// <summary> Initializes a new instance of SiteConfigData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="numberOfWorkers"> Number of workers. </param>
        /// <param name="defaultDocuments"> Default documents. </param>
        /// <param name="netFrameworkVersion"> .NET Framework version. </param>
        /// <param name="phpVersion"> Version of PHP. </param>
        /// <param name="pythonVersion"> Version of Python. </param>
        /// <param name="nodeVersion"> Version of Node.js. </param>
        /// <param name="powerShellVersion"> Version of PowerShell. </param>
        /// <param name="linuxFxVersion"> Linux App Framework and version. </param>
        /// <param name="windowsFxVersion"> Xenon App Framework and version. </param>
        /// <param name="isRequestTracingEnabled"> &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="requestTracingExpirationOn"> Request tracing expiration time. </param>
        /// <param name="isRemoteDebuggingEnabled"> &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="remoteDebuggingVersion"> Remote debugging version. </param>
        /// <param name="isHttpLoggingEnabled"> &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="useManagedIdentityCreds"> Flag to use Managed Identity Creds for ACR pull. </param>
        /// <param name="acrUserManagedIdentityId"> If using user managed identity, the user managed identity ClientId. </param>
        /// <param name="logsDirectorySizeLimit"> HTTP logs directory size limit. </param>
        /// <param name="isDetailedErrorLoggingEnabled"> &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="publishingUsername"> Publishing user name. </param>
        /// <param name="appSettings"> Application settings. </param>
        /// <param name="connectionStrings"> Connection strings. </param>
        /// <param name="machineKey"> Site MachineKey. </param>
        /// <param name="handlerMappings"> Handler mappings. </param>
        /// <param name="documentRoot"> Document root. </param>
        /// <param name="scmType"> SCM type. </param>
        /// <param name="use32BitWorkerProcess"> &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isWebSocketsEnabled"> &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isAlwaysOn"> &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="javaVersion"> Java version. </param>
        /// <param name="javaContainer"> Java container. </param>
        /// <param name="javaContainerVersion"> Java container version. </param>
        /// <param name="appCommandLine"> App command line to launch. </param>
        /// <param name="managedPipelineMode"> Managed pipeline mode. </param>
        /// <param name="virtualApplications"> Virtual applications. </param>
        /// <param name="loadBalancing"> Site load balancing. </param>
        /// <param name="experimentsRampUpRules"> This is work around for polymorphic types. </param>
        /// <param name="limits"> Site limits. </param>
        /// <param name="isAutoHealEnabled"> &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="autoHealRules"> Auto Heal rules. </param>
        /// <param name="tracingOptions"> Tracing options. </param>
        /// <param name="vnetName"> Virtual Network name. </param>
        /// <param name="isVnetRouteAllEnabled"> Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied. </param>
        /// <param name="vnetPrivatePortsCount"> The number of private ports assigned to this app. These will be assigned dynamically on runtime. </param>
        /// <param name="cors"> Cross-Origin Resource Sharing (CORS) settings. </param>
        /// <param name="push"> Push endpoint settings. </param>
        /// <param name="apiDefinitionUri"> Information about the formal API definition for the app. </param>
        /// <param name="apiManagementConfigId"> Azure API management settings linked to the app. </param>
        /// <param name="autoSwapSlotName"> Auto-swap slot name. </param>
        /// <param name="isLocalMySqlEnabled"> &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="managedServiceIdentityId"> Managed Service Identity Id. </param>
        /// <param name="xManagedServiceIdentityId"> Explicit Managed Service Identity Id. </param>
        /// <param name="keyVaultReferenceIdentity"> Identity to use for Key Vault Reference authentication. </param>
        /// <param name="ipSecurityRestrictions"> IP security restrictions for main. </param>
        /// <param name="scmIPSecurityRestrictions"> IP security restrictions for scm. </param>
        /// <param name="allowIPSecurityRestrictionsForScmToUseMain"> IP security restrictions for scm to use main. </param>
        /// <param name="isHttp20Enabled"> Http20Enabled: configures a web site to allow clients to connect over http2.0. </param>
        /// <param name="minTlsVersion"> MinTlsVersion: configures the minimum version of TLS required for SSL requests. </param>
        /// <param name="scmMinTlsVersion"> ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site. </param>
        /// <param name="ftpsState"> State of FTP / FTPS service. </param>
        /// <param name="preWarmedInstanceCount">
        /// Number of preWarmed instances.
        /// This setting only applies to the Consumption and Elastic Plans
        /// </param>
        /// <param name="functionAppScaleLimit">
        /// Maximum number of workers that a site can scale out to.
        /// This setting only applies to the Consumption and Elastic Premium Plans
        /// </param>
        /// <param name="healthCheckPath"> Health check path. </param>
        /// <param name="isFunctionsRuntimeScaleMonitoringEnabled">
        /// Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled,
        /// the ScaleController will not monitor event sources directly, but will instead call to the
        /// runtime to get scale status.
        /// </param>
        /// <param name="websiteTimeZone"> Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones. </param>
        /// <param name="minimumElasticInstanceCount">
        /// Number of minimum instance count for a site
        /// This setting only applies to the Elastic Plans
        /// </param>
        /// <param name="azureStorageAccounts"> List of Azure Storage Accounts. </param>
        /// <param name="publicNetworkAccess"> Property to allow or block all public traffic. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.SiteConfigData"/> instance for mocking. </returns>
        public static SiteConfigData SiteConfigData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? numberOfWorkers = null, IEnumerable<string> defaultDocuments = null, string netFrameworkVersion = null, string phpVersion = null, string pythonVersion = null, string nodeVersion = null, string powerShellVersion = null, string linuxFxVersion = null, string windowsFxVersion = null, bool? isRequestTracingEnabled = null, DateTimeOffset? requestTracingExpirationOn = null, bool? isRemoteDebuggingEnabled = null, string remoteDebuggingVersion = null, bool? isHttpLoggingEnabled = null, bool? useManagedIdentityCreds = null, string acrUserManagedIdentityId = null, int? logsDirectorySizeLimit = null, bool? isDetailedErrorLoggingEnabled = null, string publishingUsername = null, IEnumerable<AppServiceNameValuePair> appSettings = null, IEnumerable<ConnStringInfo> connectionStrings = null, SiteMachineKey machineKey = null, IEnumerable<HttpRequestHandlerMapping> handlerMappings = null, string documentRoot = null, ScmType? scmType = null, bool? use32BitWorkerProcess = null, bool? isWebSocketsEnabled = null, bool? isAlwaysOn = null, string javaVersion = null, string javaContainer = null, string javaContainerVersion = null, string appCommandLine = null, ManagedPipelineMode? managedPipelineMode = null, IEnumerable<VirtualApplication> virtualApplications = null, SiteLoadBalancing? loadBalancing = null, IEnumerable<RampUpRule> experimentsRampUpRules = null, SiteLimits limits = null, bool? isAutoHealEnabled = null, AutoHealRules autoHealRules = null, string tracingOptions = null, string vnetName = null, bool? isVnetRouteAllEnabled = null, int? vnetPrivatePortsCount = null, AppServiceCorsSettings cors = null, WebAppPushSettings push = null, Uri apiDefinitionUri = null, string apiManagementConfigId = null, string autoSwapSlotName = null, bool? isLocalMySqlEnabled = null, int? managedServiceIdentityId = null, int? xManagedServiceIdentityId = null, string keyVaultReferenceIdentity = null, IEnumerable<AppServiceIPSecurityRestriction> ipSecurityRestrictions = null, IEnumerable<AppServiceIPSecurityRestriction> scmIPSecurityRestrictions = null, bool? allowIPSecurityRestrictionsForScmToUseMain = null, bool? isHttp20Enabled = null, AppServiceSupportedTlsVersion? minTlsVersion = null, AppServiceSupportedTlsVersion? scmMinTlsVersion = null, AppServiceFtpsState? ftpsState = null, int? preWarmedInstanceCount = null, int? functionAppScaleLimit = null, string healthCheckPath = null, bool? isFunctionsRuntimeScaleMonitoringEnabled = null, string websiteTimeZone = null, int? minimumElasticInstanceCount = null, IDictionary<string, AppServiceStorageAccessInfo> azureStorageAccounts = null, string publicNetworkAccess = null, string kind = null)
        {
            defaultDocuments ??= new List<string>();
            appSettings ??= new List<AppServiceNameValuePair>();
            connectionStrings ??= new List<ConnStringInfo>();
            handlerMappings ??= new List<HttpRequestHandlerMapping>();
            virtualApplications ??= new List<VirtualApplication>();
            experimentsRampUpRules ??= new List<RampUpRule>();
            ipSecurityRestrictions ??= new List<AppServiceIPSecurityRestriction>();
            scmIPSecurityRestrictions ??= new List<AppServiceIPSecurityRestriction>();
            azureStorageAccounts ??= new Dictionary<string, AppServiceStorageAccessInfo>();

            return new SiteConfigData(id, name, resourceType, systemData, numberOfWorkers, defaultDocuments?.ToList(), netFrameworkVersion, phpVersion, pythonVersion, nodeVersion, powerShellVersion, linuxFxVersion, windowsFxVersion, isRequestTracingEnabled, requestTracingExpirationOn, isRemoteDebuggingEnabled, remoteDebuggingVersion, isHttpLoggingEnabled, useManagedIdentityCreds, acrUserManagedIdentityId, logsDirectorySizeLimit, isDetailedErrorLoggingEnabled, publishingUsername, appSettings?.ToList(), connectionStrings?.ToList(), machineKey, handlerMappings?.ToList(), documentRoot, scmType, use32BitWorkerProcess, isWebSocketsEnabled, isAlwaysOn, javaVersion, javaContainer, javaContainerVersion, appCommandLine, managedPipelineMode, virtualApplications?.ToList(), loadBalancing, new RoutingRuleExperiments(experimentsRampUpRules?.ToList()), limits, isAutoHealEnabled, autoHealRules, tracingOptions, vnetName, isVnetRouteAllEnabled, vnetPrivatePortsCount, cors, push, new AppServiceApiDefinitionInfo(apiDefinitionUri), new ApiManagementConfig(apiManagementConfigId), autoSwapSlotName, isLocalMySqlEnabled, managedServiceIdentityId, xManagedServiceIdentityId, keyVaultReferenceIdentity, ipSecurityRestrictions?.ToList(), scmIPSecurityRestrictions?.ToList(), allowIPSecurityRestrictionsForScmToUseMain, isHttp20Enabled, minTlsVersion, scmMinTlsVersion, ftpsState, preWarmedInstanceCount, functionAppScaleLimit, healthCheckPath, isFunctionsRuntimeScaleMonitoringEnabled, websiteTimeZone, minimumElasticInstanceCount, azureStorageAccounts, publicNetworkAccess, kind);
        }

        /// <summary> Initializes a new instance of SiteAuthSettings. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="isEnabled"> &lt;code&gt;true&lt;/code&gt; if the Authentication / Authorization feature is enabled for the current app; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="runtimeVersion">
        /// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
        /// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
        /// </param>
        /// <param name="unauthenticatedClientAction"> The action to take when an unauthenticated client attempts to access the app. </param>
        /// <param name="isTokenStoreEnabled">
        /// &lt;code&gt;true&lt;/code&gt; to durably store platform-specific security tokens that are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
        ///  The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        /// <param name="allowedExternalRedirectUrls">
        /// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
        /// This is an advanced setting typically only needed by Windows Store application backends.
        /// Note that URLs within the current domain are always implicitly allowed.
        /// </param>
        /// <param name="defaultProvider">
        /// The default authentication provider to use when multiple providers are configured.
        /// This setting is only needed if multiple providers are configured and the unauthenticated client
        /// action is set to &quot;RedirectToLoginPage&quot;.
        /// </param>
        /// <param name="tokenRefreshExtensionHours">
        /// The number of hours after session token expiration that a session token can be used to
        /// call the token refresh API. The default is 72 hours.
        /// </param>
        /// <param name="clientId">
        /// The Client ID of this relying party application, known as the client_id.
        /// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or 
        /// other 3rd party OpenID Connect providers.
        /// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
        /// </param>
        /// <param name="clientSecret">
        /// The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).
        /// This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.
        /// Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.
        /// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
        /// </param>
        /// <param name="clientSecretSettingName"> The app setting name that contains the client secret of the relying party application. </param>
        /// <param name="clientSecretCertificateThumbprint">
        /// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
        /// a replacement for the Client Secret. It is also optional.
        /// </param>
        /// <param name="issuer">
        /// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
        /// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
        /// This URI is a case-sensitive identifier for the token issuer.
        /// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
        /// </param>
        /// <param name="validateIssuer"> Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such. </param>
        /// <param name="allowedAudiences">
        /// Allowed audience values to consider when validating JWTs issued by 
        /// Azure Active Directory. Note that the &lt;code&gt;ClientID&lt;/code&gt; value is always considered an
        /// allowed audience, regardless of this setting.
        /// </param>
        /// <param name="additionalLoginParams">
        /// Login parameters to send to the OpenID Connect authorization endpoint when
        /// a user logs in. Each parameter must be in the form &quot;key=value&quot;.
        /// </param>
        /// <param name="aadClaimsAuthorization"> Gets a JSON string containing the Azure AD Acl settings. </param>
        /// <param name="googleClientId">
        /// The OpenID Connect Client ID for the Google web application.
        /// This setting is required for enabling Google Sign-In.
        /// Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
        /// </param>
        /// <param name="googleClientSecret">
        /// The client secret associated with the Google web application.
        /// This setting is required for enabling Google Sign-In.
        /// Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
        /// </param>
        /// <param name="googleClientSecretSettingName">
        /// The app setting name that contains the client secret associated with 
        /// the Google web application.
        /// </param>
        /// <param name="googleOAuthScopes">
        /// The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication.
        /// This setting is optional. If not specified, &quot;openid&quot;, &quot;profile&quot;, and &quot;email&quot; are used as default scopes.
        /// Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
        /// </param>
        /// <param name="facebookAppId">
        /// The App ID of the Facebook app used for login.
        /// This setting is required for enabling Facebook Login.
        /// Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
        /// </param>
        /// <param name="facebookAppSecret">
        /// The App Secret of the Facebook app used for Facebook Login.
        /// This setting is required for enabling Facebook Login.
        /// Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
        /// </param>
        /// <param name="facebookAppSecretSettingName"> The app setting name that contains the app secret used for Facebook Login. </param>
        /// <param name="facebookOAuthScopes">
        /// The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication.
        /// This setting is optional.
        /// Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
        /// </param>
        /// <param name="gitHubClientId">
        /// The Client Id of the GitHub app used for login.
        /// This setting is required for enabling Github login
        /// </param>
        /// <param name="gitHubClientSecret">
        /// The Client Secret of the GitHub app used for Github Login.
        /// This setting is required for enabling Github login.
        /// </param>
        /// <param name="gitHubClientSecretSettingName">
        /// The app setting name that contains the client secret of the Github
        /// app used for GitHub Login.
        /// </param>
        /// <param name="gitHubOAuthScopes">
        /// The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication.
        /// This setting is optional
        /// </param>
        /// <param name="twitterConsumerKey">
        /// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
        /// This setting is required for enabling Twitter Sign-In.
        /// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
        /// </param>
        /// <param name="twitterConsumerSecret">
        /// The OAuth 1.0a consumer secret of the Twitter application used for sign-in.
        /// This setting is required for enabling Twitter Sign-In.
        /// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
        /// </param>
        /// <param name="twitterConsumerSecretSettingName">
        /// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
        /// application used for sign-in.
        /// </param>
        /// <param name="microsoftAccountClientId">
        /// The OAuth 2.0 client ID that was created for the app used for authentication.
        /// This setting is required for enabling Microsoft Account authentication.
        /// Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
        /// </param>
        /// <param name="microsoftAccountClientSecret">
        /// The OAuth 2.0 client secret that was created for the app used for authentication.
        /// This setting is required for enabling Microsoft Account authentication.
        /// Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
        /// </param>
        /// <param name="microsoftAccountClientSecretSettingName">
        /// The app setting name containing the OAuth 2.0 client secret that was created for the
        /// app used for authentication.
        /// </param>
        /// <param name="microsoftAccountOAuthScopes">
        /// The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication.
        /// This setting is optional. If not specified, &quot;wl.basic&quot; is used as the default scope.
        /// Microsoft Account Scopes and permissions documentation: https://msdn.microsoft.com/en-us/library/dn631845.aspx
        /// </param>
        /// <param name="isAuthFromFile">
        /// &quot;true&quot; if the auth config settings should be read from a file,
        /// &quot;false&quot; otherwise
        /// </param>
        /// <param name="authFilePath">
        /// The path of the config file containing auth settings.
        /// If the path is relative, base will the site&apos;s root directory.
        /// </param>
        /// <param name="configVersion">
        /// The ConfigVersion of the Authentication / Authorization feature in use for the current app.
        /// The setting in this value can control the behavior of the control plane for Authentication / Authorization.
        /// </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.SiteAuthSettings"/> instance for mocking. </returns>
        public static SiteAuthSettings SiteAuthSettings(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? isEnabled = null, string runtimeVersion = null, UnauthenticatedClientAction? unauthenticatedClientAction = null, bool? isTokenStoreEnabled = null, IEnumerable<string> allowedExternalRedirectUrls = null, BuiltInAuthenticationProvider? defaultProvider = null, double? tokenRefreshExtensionHours = null, string clientId = null, string clientSecret = null, string clientSecretSettingName = null, BinaryData clientSecretCertificateThumbprint = null, string issuer = null, bool? validateIssuer = null, IEnumerable<string> allowedAudiences = null, IEnumerable<string> additionalLoginParams = null, string aadClaimsAuthorization = null, string googleClientId = null, string googleClientSecret = null, string googleClientSecretSettingName = null, IEnumerable<string> googleOAuthScopes = null, string facebookAppId = null, string facebookAppSecret = null, string facebookAppSecretSettingName = null, IEnumerable<string> facebookOAuthScopes = null, string gitHubClientId = null, string gitHubClientSecret = null, string gitHubClientSecretSettingName = null, IEnumerable<string> gitHubOAuthScopes = null, string twitterConsumerKey = null, string twitterConsumerSecret = null, string twitterConsumerSecretSettingName = null, string microsoftAccountClientId = null, string microsoftAccountClientSecret = null, string microsoftAccountClientSecretSettingName = null, IEnumerable<string> microsoftAccountOAuthScopes = null, string isAuthFromFile = null, string authFilePath = null, string configVersion = null, string kind = null)
        {
            allowedExternalRedirectUrls ??= new List<string>();
            allowedAudiences ??= new List<string>();
            additionalLoginParams ??= new List<string>();
            googleOAuthScopes ??= new List<string>();
            facebookOAuthScopes ??= new List<string>();
            gitHubOAuthScopes ??= new List<string>();
            microsoftAccountOAuthScopes ??= new List<string>();

            return new SiteAuthSettings(id, name, resourceType, systemData, isEnabled, runtimeVersion, unauthenticatedClientAction, isTokenStoreEnabled, allowedExternalRedirectUrls?.ToList(), defaultProvider, tokenRefreshExtensionHours, clientId, clientSecret, clientSecretSettingName, clientSecretCertificateThumbprint, issuer, validateIssuer, allowedAudiences?.ToList(), additionalLoginParams?.ToList(), aadClaimsAuthorization, googleClientId, googleClientSecret, googleClientSecretSettingName, googleOAuthScopes?.ToList(), facebookAppId, facebookAppSecret, facebookAppSecretSettingName, facebookOAuthScopes?.ToList(), gitHubClientId, gitHubClientSecret, gitHubClientSecretSettingName, gitHubOAuthScopes?.ToList(), twitterConsumerKey, twitterConsumerSecret, twitterConsumerSecretSettingName, microsoftAccountClientId, microsoftAccountClientSecret, microsoftAccountClientSecretSettingName, microsoftAccountOAuthScopes?.ToList(), isAuthFromFile, authFilePath, configVersion, kind);
        }

        /// <summary> Initializes a new instance of SiteAuthSettingsV2. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="platform"> The configuration settings of the platform of App Service Authentication/Authorization. </param>
        /// <param name="globalValidation"> The configuration settings that determines the validation flow of users using App Service Authentication/Authorization. </param>
        /// <param name="identityProviders"> The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization. </param>
        /// <param name="login"> The configuration settings of the login flow of users using App Service Authentication/Authorization. </param>
        /// <param name="httpSettings"> The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.SiteAuthSettingsV2"/> instance for mocking. </returns>
        public static SiteAuthSettingsV2 SiteAuthSettingsV2(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AuthPlatform platform = null, GlobalValidation globalValidation = null, AppServiceIdentityProviders identityProviders = null, WebAppLoginInfo login = null, AppServiceHttpSettings httpSettings = null, string kind = null)
        {
            return new SiteAuthSettingsV2(id, name, resourceType, systemData, platform, globalValidation, identityProviders, login, httpSettings, kind);
        }

        /// <summary> Initializes a new instance of AuthPlatform. </summary>
        /// <param name="isEnabled"> &lt;code&gt;true&lt;/code&gt; if the Authentication / Authorization feature is enabled for the current app; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="runtimeVersion">
        /// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
        /// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
        /// </param>
        /// <param name="configFilePath">
        /// The path of the config file containing auth settings if they come from a file.
        /// If the path is relative, base will the site&apos;s root directory.
        /// </param>
        /// <returns> A new <see cref="Models.AuthPlatform"/> instance for mocking. </returns>
        public static AuthPlatform AuthPlatform(bool? isEnabled = null, string runtimeVersion = null, string configFilePath = null)
        {
            return new AuthPlatform(isEnabled, runtimeVersion, configFilePath);
        }

        /// <summary> Initializes a new instance of GlobalValidation. </summary>
        /// <param name="isAuthenticationRequired"> &lt;code&gt;true&lt;/code&gt; if the authentication flow is required any request is made; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="unauthenticatedClientAction"> The action to take when an unauthenticated client attempts to access the app. </param>
        /// <param name="redirectToProvider">
        /// The default authentication provider to use when multiple providers are configured.
        /// This setting is only needed if multiple providers are configured and the unauthenticated client
        /// action is set to &quot;RedirectToLoginPage&quot;.
        /// </param>
        /// <param name="excludedPaths"> The paths for which unauthenticated flow would not be redirected to the login page. </param>
        /// <returns> A new <see cref="Models.GlobalValidation"/> instance for mocking. </returns>
        public static GlobalValidation GlobalValidation(bool? isAuthenticationRequired = null, UnauthenticatedClientActionV2? unauthenticatedClientAction = null, string redirectToProvider = null, IEnumerable<string> excludedPaths = null)
        {
            excludedPaths ??= new List<string>();

            return new GlobalValidation(isAuthenticationRequired, unauthenticatedClientAction, redirectToProvider, excludedPaths?.ToList());
        }

        /// <summary> Initializes a new instance of AppServiceIdentityProviders. </summary>
        /// <param name="azureActiveDirectory"> The configuration settings of the Azure Active directory provider. </param>
        /// <param name="facebook"> The configuration settings of the Facebook provider. </param>
        /// <param name="gitHub"> The configuration settings of the GitHub provider. </param>
        /// <param name="google"> The configuration settings of the Google provider. </param>
        /// <param name="legacyMicrosoftAccount"> The configuration settings of the legacy Microsoft Account provider. </param>
        /// <param name="twitter"> The configuration settings of the Twitter provider. </param>
        /// <param name="apple"> The configuration settings of the Apple provider. </param>
        /// <param name="azureStaticWebApps"> The configuration settings of the Azure Static Web Apps provider. </param>
        /// <param name="customOpenIdConnectProviders">
        /// The map of the name of the alias of each custom Open ID Connect provider to the
        /// configuration settings of the custom Open ID Connect provider.
        /// </param>
        /// <returns> A new <see cref="Models.AppServiceIdentityProviders"/> instance for mocking. </returns>
        public static AppServiceIdentityProviders AppServiceIdentityProviders(AppServiceAadProvider azureActiveDirectory = null, AppServiceFacebookProvider facebook = null, AppServiceGitHubProvider gitHub = null, AppServiceGoogleProvider google = null, LegacyMicrosoftAccount legacyMicrosoftAccount = null, AppServiceTwitterProvider twitter = null, AppServiceAppleProvider apple = null, AppServiceStaticWebAppsProvider azureStaticWebApps = null, IDictionary<string, CustomOpenIdConnectProvider> customOpenIdConnectProviders = null)
        {
            customOpenIdConnectProviders ??= new Dictionary<string, CustomOpenIdConnectProvider>();

            return new AppServiceIdentityProviders(azureActiveDirectory, facebook, gitHub, google, legacyMicrosoftAccount, twitter, apple, azureStaticWebApps, customOpenIdConnectProviders);
        }

        /// <summary> Initializes a new instance of AppServiceAadProvider. </summary>
        /// <param name="isEnabled"> &lt;code&gt;false&lt;/code&gt; if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="registration"> The configuration settings of the Azure Active Directory app registration. </param>
        /// <param name="login"> The configuration settings of the Azure Active Directory login flow. </param>
        /// <param name="validation"> The configuration settings of the Azure Active Directory token validation flow. </param>
        /// <param name="isAutoProvisioned">
        /// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
        /// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
        /// read or write to this property.
        /// </param>
        /// <returns> A new <see cref="Models.AppServiceAadProvider"/> instance for mocking. </returns>
        public static AppServiceAadProvider AppServiceAadProvider(bool? isEnabled = null, AppServiceAadRegistration registration = null, AppServiceAadLoginFlow login = null, AppServiceAadValidation validation = null, bool? isAutoProvisioned = null)
        {
            return new AppServiceAadProvider(isEnabled, registration, login, validation, isAutoProvisioned);
        }

        /// <summary> Initializes a new instance of AppServiceAadRegistration. </summary>
        /// <param name="openIdIssuer">
        /// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
        /// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
        /// This URI is a case-sensitive identifier for the token issuer.
        /// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
        /// </param>
        /// <param name="clientId">
        /// The Client ID of this relying party application, known as the client_id.
        /// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or 
        /// other 3rd party OpenID Connect providers.
        /// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
        /// </param>
        /// <param name="clientSecretSettingName"> The app setting name that contains the client secret of the relying party application. </param>
        /// <param name="clientSecretCertificateThumbprint">
        /// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
        /// a replacement for the Client Secret. It is also optional.
        /// </param>
        /// <param name="clientSecretCertificateSubjectAlternativeName">
        /// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
        /// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
        /// </param>
        /// <param name="clientSecretCertificateIssuer">
        /// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
        /// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
        /// </param>
        /// <returns> A new <see cref="Models.AppServiceAadRegistration"/> instance for mocking. </returns>
        public static AppServiceAadRegistration AppServiceAadRegistration(string openIdIssuer = null, string clientId = null, string clientSecretSettingName = null, BinaryData clientSecretCertificateThumbprint = null, string clientSecretCertificateSubjectAlternativeName = null, string clientSecretCertificateIssuer = null)
        {
            return new AppServiceAadRegistration(openIdIssuer, clientId, clientSecretSettingName, clientSecretCertificateThumbprint, clientSecretCertificateSubjectAlternativeName, clientSecretCertificateIssuer);
        }

        /// <summary> Initializes a new instance of AppServiceAadLoginFlow. </summary>
        /// <param name="loginParameters">
        /// Login parameters to send to the OpenID Connect authorization endpoint when
        /// a user logs in. Each parameter must be in the form &quot;key=value&quot;.
        /// </param>
        /// <param name="isWwwAuthenticateDisabled"> &lt;code&gt;true&lt;/code&gt; if the www-authenticate provider should be omitted from the request; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <returns> A new <see cref="Models.AppServiceAadLoginFlow"/> instance for mocking. </returns>
        public static AppServiceAadLoginFlow AppServiceAadLoginFlow(IEnumerable<string> loginParameters = null, bool? isWwwAuthenticateDisabled = null)
        {
            loginParameters ??= new List<string>();

            return new AppServiceAadLoginFlow(loginParameters?.ToList(), isWwwAuthenticateDisabled);
        }

        /// <summary> Initializes a new instance of AppServiceAadValidation. </summary>
        /// <param name="jwtClaimChecks"> The configuration settings of the checks that should be made while validating the JWT Claims. </param>
        /// <param name="allowedAudiences"> The list of audiences that can make successful authentication/authorization requests. </param>
        /// <param name="defaultAuthorizationPolicy"> The configuration settings of the default authorization policy. </param>
        /// <returns> A new <see cref="Models.AppServiceAadValidation"/> instance for mocking. </returns>
        public static AppServiceAadValidation AppServiceAadValidation(JwtClaimChecks jwtClaimChecks = null, IEnumerable<string> allowedAudiences = null, DefaultAuthorizationPolicy defaultAuthorizationPolicy = null)
        {
            allowedAudiences ??= new List<string>();

            return new AppServiceAadValidation(jwtClaimChecks, allowedAudiences?.ToList(), defaultAuthorizationPolicy);
        }

        /// <summary> Initializes a new instance of JwtClaimChecks. </summary>
        /// <param name="allowedGroups"> The list of the allowed groups. </param>
        /// <param name="allowedClientApplications"> The list of the allowed client applications. </param>
        /// <returns> A new <see cref="Models.JwtClaimChecks"/> instance for mocking. </returns>
        public static JwtClaimChecks JwtClaimChecks(IEnumerable<string> allowedGroups = null, IEnumerable<string> allowedClientApplications = null)
        {
            allowedGroups ??= new List<string>();
            allowedClientApplications ??= new List<string>();

            return new JwtClaimChecks(allowedGroups?.ToList(), allowedClientApplications?.ToList());
        }

        /// <summary> Initializes a new instance of DefaultAuthorizationPolicy. </summary>
        /// <param name="allowedPrincipals"> The configuration settings of the Azure Active Directory allowed principals. </param>
        /// <param name="allowedApplications"> The configuration settings of the Azure Active Directory allowed applications. </param>
        /// <returns> A new <see cref="Models.DefaultAuthorizationPolicy"/> instance for mocking. </returns>
        public static DefaultAuthorizationPolicy DefaultAuthorizationPolicy(AppServiceAadAllowedPrincipals allowedPrincipals = null, IEnumerable<string> allowedApplications = null)
        {
            allowedApplications ??= new List<string>();

            return new DefaultAuthorizationPolicy(allowedPrincipals, allowedApplications?.ToList());
        }

        /// <summary> Initializes a new instance of AppServiceAadAllowedPrincipals. </summary>
        /// <param name="groups"> The list of the allowed groups. </param>
        /// <param name="identities"> The list of the allowed identities. </param>
        /// <returns> A new <see cref="Models.AppServiceAadAllowedPrincipals"/> instance for mocking. </returns>
        public static AppServiceAadAllowedPrincipals AppServiceAadAllowedPrincipals(IEnumerable<string> groups = null, IEnumerable<string> identities = null)
        {
            groups ??= new List<string>();
            identities ??= new List<string>();

            return new AppServiceAadAllowedPrincipals(groups?.ToList(), identities?.ToList());
        }

        /// <summary> Initializes a new instance of AppServiceFacebookProvider. </summary>
        /// <param name="isEnabled"> &lt;code&gt;false&lt;/code&gt; if the Facebook provider should not be enabled despite the set registration; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="registration"> The configuration settings of the app registration for the Facebook provider. </param>
        /// <param name="graphApiVersion"> The version of the Facebook api to be used while logging in. </param>
        /// <param name="loginScopes"> The configuration settings of the login flow. </param>
        /// <returns> A new <see cref="Models.AppServiceFacebookProvider"/> instance for mocking. </returns>
        public static AppServiceFacebookProvider AppServiceFacebookProvider(bool? isEnabled = null, AppRegistration registration = null, string graphApiVersion = null, IEnumerable<string> loginScopes = null)
        {
            loginScopes ??= new List<string>();

            return new AppServiceFacebookProvider(isEnabled, registration, graphApiVersion, new LoginScopes(loginScopes?.ToList()));
        }

        /// <summary> Initializes a new instance of AppRegistration. </summary>
        /// <param name="appId"> The App ID of the app used for login. </param>
        /// <param name="appSecretSettingName"> The app setting name that contains the app secret. </param>
        /// <returns> A new <see cref="Models.AppRegistration"/> instance for mocking. </returns>
        public static AppRegistration AppRegistration(string appId = null, string appSecretSettingName = null)
        {
            return new AppRegistration(appId, appSecretSettingName);
        }

        /// <summary> Initializes a new instance of AppServiceGitHubProvider. </summary>
        /// <param name="isEnabled"> &lt;code&gt;false&lt;/code&gt; if the GitHub provider should not be enabled despite the set registration; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="registration"> The configuration settings of the app registration for the GitHub provider. </param>
        /// <param name="loginScopes"> The configuration settings of the login flow. </param>
        /// <returns> A new <see cref="Models.AppServiceGitHubProvider"/> instance for mocking. </returns>
        public static AppServiceGitHubProvider AppServiceGitHubProvider(bool? isEnabled = null, ClientRegistration registration = null, IEnumerable<string> loginScopes = null)
        {
            loginScopes ??= new List<string>();

            return new AppServiceGitHubProvider(isEnabled, registration, new LoginScopes(loginScopes?.ToList()));
        }

        /// <summary> Initializes a new instance of ClientRegistration. </summary>
        /// <param name="clientId"> The Client ID of the app used for login. </param>
        /// <param name="clientSecretSettingName"> The app setting name that contains the client secret. </param>
        /// <returns> A new <see cref="Models.ClientRegistration"/> instance for mocking. </returns>
        public static ClientRegistration ClientRegistration(string clientId = null, string clientSecretSettingName = null)
        {
            return new ClientRegistration(clientId, clientSecretSettingName);
        }

        /// <summary> Initializes a new instance of AppServiceGoogleProvider. </summary>
        /// <param name="isEnabled"> &lt;code&gt;false&lt;/code&gt; if the Google provider should not be enabled despite the set registration; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="registration"> The configuration settings of the app registration for the Google provider. </param>
        /// <param name="loginScopes"> The configuration settings of the login flow. </param>
        /// <param name="validationAllowedAudiences"> The configuration settings of the Azure Active Directory token validation flow. </param>
        /// <returns> A new <see cref="Models.AppServiceGoogleProvider"/> instance for mocking. </returns>
        public static AppServiceGoogleProvider AppServiceGoogleProvider(bool? isEnabled = null, ClientRegistration registration = null, IEnumerable<string> loginScopes = null, IEnumerable<string> validationAllowedAudiences = null)
        {
            loginScopes ??= new List<string>();
            validationAllowedAudiences ??= new List<string>();

            return new AppServiceGoogleProvider(isEnabled, registration, new LoginScopes(loginScopes?.ToList()), new AllowedAudiencesValidation(validationAllowedAudiences?.ToList()));
        }

        /// <summary> Initializes a new instance of LegacyMicrosoftAccount. </summary>
        /// <param name="isEnabled"> &lt;code&gt;false&lt;/code&gt; if the legacy Microsoft Account provider should not be enabled despite the set registration; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="registration"> The configuration settings of the app registration for the legacy Microsoft Account provider. </param>
        /// <param name="loginScopes"> The configuration settings of the login flow. </param>
        /// <param name="validationAllowedAudiences"> The configuration settings of the legacy Microsoft Account provider token validation flow. </param>
        /// <returns> A new <see cref="Models.LegacyMicrosoftAccount"/> instance for mocking. </returns>
        public static LegacyMicrosoftAccount LegacyMicrosoftAccount(bool? isEnabled = null, ClientRegistration registration = null, IEnumerable<string> loginScopes = null, IEnumerable<string> validationAllowedAudiences = null)
        {
            loginScopes ??= new List<string>();
            validationAllowedAudiences ??= new List<string>();

            return new LegacyMicrosoftAccount(isEnabled, registration, new LoginScopes(loginScopes?.ToList()), new AllowedAudiencesValidation(validationAllowedAudiences?.ToList()));
        }

        /// <summary> Initializes a new instance of AppServiceTwitterProvider. </summary>
        /// <param name="isEnabled"> &lt;code&gt;false&lt;/code&gt; if the Twitter provider should not be enabled despite the set registration; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="registration"> The configuration settings of the app registration for the Twitter provider. </param>
        /// <returns> A new <see cref="Models.AppServiceTwitterProvider"/> instance for mocking. </returns>
        public static AppServiceTwitterProvider AppServiceTwitterProvider(bool? isEnabled = null, TwitterRegistration registration = null)
        {
            return new AppServiceTwitterProvider(isEnabled, registration);
        }

        /// <summary> Initializes a new instance of TwitterRegistration. </summary>
        /// <param name="consumerKey">
        /// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
        /// This setting is required for enabling Twitter Sign-In.
        /// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
        /// </param>
        /// <param name="consumerSecretSettingName">
        /// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
        /// application used for sign-in.
        /// </param>
        /// <returns> A new <see cref="Models.TwitterRegistration"/> instance for mocking. </returns>
        public static TwitterRegistration TwitterRegistration(string consumerKey = null, string consumerSecretSettingName = null)
        {
            return new TwitterRegistration(consumerKey, consumerSecretSettingName);
        }

        /// <summary> Initializes a new instance of AppServiceAppleProvider. </summary>
        /// <param name="isEnabled"> &lt;code&gt;false&lt;/code&gt; if the Apple provider should not be enabled despite the set registration; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="registration"> The configuration settings of the Apple registration. </param>
        /// <param name="loginScopes"> The configuration settings of the login flow. </param>
        /// <returns> A new <see cref="Models.AppServiceAppleProvider"/> instance for mocking. </returns>
        public static AppServiceAppleProvider AppServiceAppleProvider(bool? isEnabled = null, AppServiceAppleRegistration registration = null, IEnumerable<string> loginScopes = null)
        {
            loginScopes ??= new List<string>();

            return new AppServiceAppleProvider(isEnabled, registration, new LoginScopes(loginScopes?.ToList()));
        }

        /// <summary> Initializes a new instance of AppServiceAppleRegistration. </summary>
        /// <param name="clientId"> The Client ID of the app used for login. </param>
        /// <param name="clientSecretSettingName"> The app setting name that contains the client secret. </param>
        /// <returns> A new <see cref="Models.AppServiceAppleRegistration"/> instance for mocking. </returns>
        public static AppServiceAppleRegistration AppServiceAppleRegistration(string clientId = null, string clientSecretSettingName = null)
        {
            return new AppServiceAppleRegistration(clientId, clientSecretSettingName);
        }

        /// <summary> Initializes a new instance of AppServiceStaticWebAppsProvider. </summary>
        /// <param name="isEnabled"> &lt;code&gt;false&lt;/code&gt; if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="registrationClientId"> The configuration settings of the Azure Static Web Apps registration. </param>
        /// <returns> A new <see cref="Models.AppServiceStaticWebAppsProvider"/> instance for mocking. </returns>
        public static AppServiceStaticWebAppsProvider AppServiceStaticWebAppsProvider(bool? isEnabled = null, string registrationClientId = null)
        {
            return new AppServiceStaticWebAppsProvider(isEnabled, new AppServiceStaticWebAppsRegistration(registrationClientId));
        }

        /// <summary> Initializes a new instance of CustomOpenIdConnectProvider. </summary>
        /// <param name="isEnabled"> &lt;code&gt;false&lt;/code&gt; if the custom Open ID provider provider should not be enabled; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="registration"> The configuration settings of the app registration for the custom Open ID Connect provider. </param>
        /// <param name="login"> The configuration settings of the login flow of the custom Open ID Connect provider. </param>
        /// <returns> A new <see cref="Models.CustomOpenIdConnectProvider"/> instance for mocking. </returns>
        public static CustomOpenIdConnectProvider CustomOpenIdConnectProvider(bool? isEnabled = null, OpenIdConnectRegistration registration = null, OpenIdConnectLogin login = null)
        {
            return new CustomOpenIdConnectProvider(isEnabled, registration, login);
        }

        /// <summary> Initializes a new instance of OpenIdConnectRegistration. </summary>
        /// <param name="clientId"> The client id of the custom Open ID Connect provider. </param>
        /// <param name="clientCredential"> The authentication credentials of the custom Open ID Connect provider. </param>
        /// <param name="openIdConnectConfiguration"> The configuration settings of the endpoints used for the custom Open ID Connect provider. </param>
        /// <returns> A new <see cref="Models.OpenIdConnectRegistration"/> instance for mocking. </returns>
        public static OpenIdConnectRegistration OpenIdConnectRegistration(string clientId = null, OpenIdConnectClientCredential clientCredential = null, OpenIdConnectConfig openIdConnectConfiguration = null)
        {
            return new OpenIdConnectRegistration(clientId, clientCredential, openIdConnectConfiguration);
        }

        /// <summary> Initializes a new instance of OpenIdConnectClientCredential. </summary>
        /// <param name="method"> The method that should be used to authenticate the user. </param>
        /// <param name="clientSecretSettingName"> The app setting that contains the client secret for the custom Open ID Connect provider. </param>
        /// <returns> A new <see cref="Models.OpenIdConnectClientCredential"/> instance for mocking. </returns>
        public static OpenIdConnectClientCredential OpenIdConnectClientCredential(ClientCredentialMethod? method = null, string clientSecretSettingName = null)
        {
            return new OpenIdConnectClientCredential(method, clientSecretSettingName);
        }

        /// <summary> Initializes a new instance of OpenIdConnectConfig. </summary>
        /// <param name="authorizationEndpoint"> The endpoint to be used to make an authorization request. </param>
        /// <param name="tokenEndpoint"> The endpoint to be used to request a token. </param>
        /// <param name="issuer"> The endpoint that issues the token. </param>
        /// <param name="certificationUri"> The endpoint that provides the keys necessary to validate the token. </param>
        /// <param name="wellKnownOpenIdConfiguration"> The endpoint that contains all the configuration endpoints for the provider. </param>
        /// <returns> A new <see cref="Models.OpenIdConnectConfig"/> instance for mocking. </returns>
        public static OpenIdConnectConfig OpenIdConnectConfig(string authorizationEndpoint = null, string tokenEndpoint = null, string issuer = null, Uri certificationUri = null, string wellKnownOpenIdConfiguration = null)
        {
            return new OpenIdConnectConfig(authorizationEndpoint, tokenEndpoint, issuer, certificationUri, wellKnownOpenIdConfiguration);
        }

        /// <summary> Initializes a new instance of OpenIdConnectLogin. </summary>
        /// <param name="nameClaimType"> The name of the claim that contains the users name. </param>
        /// <param name="scopes"> A list of the scopes that should be requested while authenticating. </param>
        /// <returns> A new <see cref="Models.OpenIdConnectLogin"/> instance for mocking. </returns>
        public static OpenIdConnectLogin OpenIdConnectLogin(string nameClaimType = null, IEnumerable<string> scopes = null)
        {
            scopes ??= new List<string>();

            return new OpenIdConnectLogin(nameClaimType, scopes?.ToList());
        }

        /// <summary> Initializes a new instance of WebAppLoginInfo. </summary>
        /// <param name="routesLogoutEndpoint"> The routes that specify the endpoints used for login and logout requests. </param>
        /// <param name="tokenStore"> The configuration settings of the token store. </param>
        /// <param name="preserveUrlFragmentsForLogins"> &lt;code&gt;true&lt;/code&gt; if the fragments from the request are preserved after the login request is made; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="allowedExternalRedirectUrls">
        /// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
        /// This is an advanced setting typically only needed by Windows Store application backends.
        /// Note that URLs within the current domain are always implicitly allowed.
        /// </param>
        /// <param name="cookieExpiration"> The configuration settings of the session cookie&apos;s expiration. </param>
        /// <param name="nonce"> The configuration settings of the nonce used in the login flow. </param>
        /// <returns> A new <see cref="Models.WebAppLoginInfo"/> instance for mocking. </returns>
        public static WebAppLoginInfo WebAppLoginInfo(string routesLogoutEndpoint = null, AppServiceTokenStore tokenStore = null, bool? preserveUrlFragmentsForLogins = null, IEnumerable<string> allowedExternalRedirectUrls = null, WebAppCookieExpiration cookieExpiration = null, LoginFlowNonceSettings nonce = null)
        {
            allowedExternalRedirectUrls ??= new List<string>();

            return new WebAppLoginInfo(new LoginRoutes(routesLogoutEndpoint), tokenStore, preserveUrlFragmentsForLogins, allowedExternalRedirectUrls?.ToList(), cookieExpiration, nonce);
        }

        /// <summary> Initializes a new instance of AppServiceTokenStore. </summary>
        /// <param name="isEnabled">
        /// &lt;code&gt;true&lt;/code&gt; to durably store platform-specific security tokens that are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
        ///  The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        /// <param name="tokenRefreshExtensionHours">
        /// The number of hours after session token expiration that a session token can be used to
        /// call the token refresh API. The default is 72 hours.
        /// </param>
        /// <param name="fileSystemDirectory"> The configuration settings of the storage of the tokens if a file system is used. </param>
        /// <param name="azureBlobStorageSasUrlSettingName"> The configuration settings of the storage of the tokens if blob storage is used. </param>
        /// <returns> A new <see cref="Models.AppServiceTokenStore"/> instance for mocking. </returns>
        public static AppServiceTokenStore AppServiceTokenStore(bool? isEnabled = null, double? tokenRefreshExtensionHours = null, string fileSystemDirectory = null, string azureBlobStorageSasUrlSettingName = null)
        {
            return new AppServiceTokenStore(isEnabled, tokenRefreshExtensionHours, new FileSystemTokenStore(fileSystemDirectory), new AppServiceBlobStorageTokenStore(azureBlobStorageSasUrlSettingName));
        }

        /// <summary> Initializes a new instance of WebAppCookieExpiration. </summary>
        /// <param name="convention"> The convention used when determining the session cookie&apos;s expiration. </param>
        /// <param name="timeToExpiration"> The time after the request is made when the session cookie should expire. </param>
        /// <returns> A new <see cref="Models.WebAppCookieExpiration"/> instance for mocking. </returns>
        public static WebAppCookieExpiration WebAppCookieExpiration(CookieExpirationConvention? convention = null, string timeToExpiration = null)
        {
            return new WebAppCookieExpiration(convention, timeToExpiration);
        }

        /// <summary> Initializes a new instance of LoginFlowNonceSettings. </summary>
        /// <param name="validateNonce"> &lt;code&gt;false&lt;/code&gt; if the nonce should not be validated while completing the login flow; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="nonceExpirationInterval"> The time after the request is made when the nonce should expire. </param>
        /// <returns> A new <see cref="Models.LoginFlowNonceSettings"/> instance for mocking. </returns>
        public static LoginFlowNonceSettings LoginFlowNonceSettings(bool? validateNonce = null, string nonceExpirationInterval = null)
        {
            return new LoginFlowNonceSettings(validateNonce, nonceExpirationInterval);
        }

        /// <summary> Initializes a new instance of AppServiceHttpSettings. </summary>
        /// <param name="isHttpsRequired"> &lt;code&gt;false&lt;/code&gt; if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, &lt;code&gt;true&lt;/code&gt;. </param>
        /// <param name="routesApiPrefix"> The configuration settings of the paths HTTP requests. </param>
        /// <param name="forwardProxy"> The configuration settings of a forward proxy used to make the requests. </param>
        /// <returns> A new <see cref="Models.AppServiceHttpSettings"/> instance for mocking. </returns>
        public static AppServiceHttpSettings AppServiceHttpSettings(bool? isHttpsRequired = null, string routesApiPrefix = null, AppServiceForwardProxy forwardProxy = null)
        {
            return new AppServiceHttpSettings(isHttpsRequired, new AppServiceHttpSettingsRoutes(routesApiPrefix), forwardProxy);
        }

        /// <summary> Initializes a new instance of AppServiceForwardProxy. </summary>
        /// <param name="convention"> The convention used to determine the url of the request made. </param>
        /// <param name="customHostHeaderName"> The name of the header containing the host of the request. </param>
        /// <param name="customProtoHeaderName"> The name of the header containing the scheme of the request. </param>
        /// <returns> A new <see cref="Models.AppServiceForwardProxy"/> instance for mocking. </returns>
        public static AppServiceForwardProxy AppServiceForwardProxy(ForwardProxyConvention? convention = null, string customHostHeaderName = null, string customProtoHeaderName = null)
        {
            return new AppServiceForwardProxy(convention, customHostHeaderName, customProtoHeaderName);
        }

        /// <summary> Initializes a new instance of AzureStoragePropertyDictionary. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Azure storage accounts. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.AzureStoragePropertyDictionary"/> instance for mocking. </returns>
        public static AzureStoragePropertyDictionary AzureStoragePropertyDictionary(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, AppServiceStorageAccessInfo> properties = null, string kind = null)
        {
            properties ??= new Dictionary<string, AppServiceStorageAccessInfo>();

            return new AzureStoragePropertyDictionary(id, name, resourceType, systemData, properties, kind);
        }

        /// <summary> Initializes a new instance of ApiKeyVaultReferenceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="reference"></param>
        /// <param name="status"></param>
        /// <param name="vaultName"></param>
        /// <param name="secretName"></param>
        /// <param name="secretVersion"></param>
        /// <param name="identity"> Managed service identity. </param>
        /// <param name="details"></param>
        /// <param name="source"></param>
        /// <param name="activeVersion"></param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.ApiKeyVaultReferenceData"/> instance for mocking. </returns>
        public static ApiKeyVaultReferenceData ApiKeyVaultReferenceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string reference = null, ResolveStatus? status = null, string vaultName = null, string secretName = null, string secretVersion = null, ManagedServiceIdentity identity = null, string details = null, ConfigReferenceSource? source = null, string activeVersion = null, string kind = null)
        {
            return new ApiKeyVaultReferenceData(id, name, resourceType, systemData, reference, status, vaultName, secretName, secretVersion, identity, details, source, activeVersion, kind);
        }

        /// <summary> Initializes a new instance of ConnectionStringDictionary. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Connection strings. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.ConnectionStringDictionary"/> instance for mocking. </returns>
        public static ConnectionStringDictionary ConnectionStringDictionary(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, ConnStringValueTypePair> properties = null, string kind = null)
        {
            properties ??= new Dictionary<string, ConnStringValueTypePair>();

            return new ConnectionStringDictionary(id, name, resourceType, systemData, properties, kind);
        }

        /// <summary> Initializes a new instance of SiteLogsConfigData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="applicationLogs"> Application logs configuration. </param>
        /// <param name="httpLogs"> HTTP logs configuration. </param>
        /// <param name="isFailedRequestsTracingEnabled"> Failed requests tracing configuration. </param>
        /// <param name="isDetailedErrorMessagesEnabled"> Detailed error messages configuration. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.SiteLogsConfigData"/> instance for mocking. </returns>
        public static SiteLogsConfigData SiteLogsConfigData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ApplicationLogsConfig applicationLogs = null, AppServiceHttpLogsConfig httpLogs = null, bool? isFailedRequestsTracingEnabled = null, bool? isDetailedErrorMessagesEnabled = null, string kind = null)
        {
            return new SiteLogsConfigData(id, name, resourceType, systemData, applicationLogs, httpLogs, new WebAppEnabledConfig(isFailedRequestsTracingEnabled), new WebAppEnabledConfig(isDetailedErrorMessagesEnabled), kind);
        }

        /// <summary> Initializes a new instance of ApplicationLogsConfig. </summary>
        /// <param name="fileSystemLevel"> Application logs to file system configuration. </param>
        /// <param name="azureTableStorage"> Application logs to azure table storage configuration. </param>
        /// <param name="azureBlobStorage"> Application logs to blob storage configuration. </param>
        /// <returns> A new <see cref="Models.ApplicationLogsConfig"/> instance for mocking. </returns>
        public static ApplicationLogsConfig ApplicationLogsConfig(WebAppLogLevel? fileSystemLevel = null, AppServiceTableStorageApplicationLogsConfig azureTableStorage = null, AppServiceBlobStorageApplicationLogsConfig azureBlobStorage = null)
        {
            return new ApplicationLogsConfig(new FileSystemApplicationLogsConfig(fileSystemLevel), azureTableStorage, azureBlobStorage);
        }

        /// <summary> Initializes a new instance of AppServiceTableStorageApplicationLogsConfig. </summary>
        /// <param name="level"> Log level. </param>
        /// <param name="sasUri"> SAS URL to an Azure table with add/query/delete permissions. </param>
        /// <returns> A new <see cref="Models.AppServiceTableStorageApplicationLogsConfig"/> instance for mocking. </returns>
        public static AppServiceTableStorageApplicationLogsConfig AppServiceTableStorageApplicationLogsConfig(WebAppLogLevel? level = null, Uri sasUri = null)
        {
            return new AppServiceTableStorageApplicationLogsConfig(level, sasUri);
        }

        /// <summary> Initializes a new instance of AppServiceBlobStorageApplicationLogsConfig. </summary>
        /// <param name="level"> Log level. </param>
        /// <param name="sasUri"> SAS url to a azure blob container with read/write/list/delete permissions. </param>
        /// <param name="retentionInDays">
        /// Retention in days.
        /// Remove blobs older than X days.
        /// 0 or lower means no retention.
        /// </param>
        /// <returns> A new <see cref="Models.AppServiceBlobStorageApplicationLogsConfig"/> instance for mocking. </returns>
        public static AppServiceBlobStorageApplicationLogsConfig AppServiceBlobStorageApplicationLogsConfig(WebAppLogLevel? level = null, Uri sasUri = null, int? retentionInDays = null)
        {
            return new AppServiceBlobStorageApplicationLogsConfig(level, sasUri, retentionInDays);
        }

        /// <summary> Initializes a new instance of AppServiceHttpLogsConfig. </summary>
        /// <param name="fileSystem"> Http logs to file system configuration. </param>
        /// <param name="azureBlobStorage"> Http logs to azure blob storage configuration. </param>
        /// <returns> A new <see cref="Models.AppServiceHttpLogsConfig"/> instance for mocking. </returns>
        public static AppServiceHttpLogsConfig AppServiceHttpLogsConfig(FileSystemHttpLogsConfig fileSystem = null, AppServiceBlobStorageHttpLogsConfig azureBlobStorage = null)
        {
            return new AppServiceHttpLogsConfig(fileSystem, azureBlobStorage);
        }

        /// <summary> Initializes a new instance of FileSystemHttpLogsConfig. </summary>
        /// <param name="retentionInMb">
        /// Maximum size in megabytes that http log files can use.
        /// When reached old log files will be removed to make space for new ones.
        /// Value can range between 25 and 100.
        /// </param>
        /// <param name="retentionInDays">
        /// Retention in days.
        /// Remove files older than X days.
        /// 0 or lower means no retention.
        /// </param>
        /// <param name="isEnabled"> True if configuration is enabled, false if it is disabled and null if configuration is not set. </param>
        /// <returns> A new <see cref="Models.FileSystemHttpLogsConfig"/> instance for mocking. </returns>
        public static FileSystemHttpLogsConfig FileSystemHttpLogsConfig(int? retentionInMb = null, int? retentionInDays = null, bool? isEnabled = null)
        {
            return new FileSystemHttpLogsConfig(retentionInMb, retentionInDays, isEnabled);
        }

        /// <summary> Initializes a new instance of AppServiceBlobStorageHttpLogsConfig. </summary>
        /// <param name="sasUri"> SAS url to a azure blob container with read/write/list/delete permissions. </param>
        /// <param name="retentionInDays">
        /// Retention in days.
        /// Remove blobs older than X days.
        /// 0 or lower means no retention.
        /// </param>
        /// <param name="isEnabled"> True if configuration is enabled, false if it is disabled and null if configuration is not set. </param>
        /// <returns> A new <see cref="Models.AppServiceBlobStorageHttpLogsConfig"/> instance for mocking. </returns>
        public static AppServiceBlobStorageHttpLogsConfig AppServiceBlobStorageHttpLogsConfig(Uri sasUri = null, int? retentionInDays = null, bool? isEnabled = null)
        {
            return new AppServiceBlobStorageHttpLogsConfig(sasUri, retentionInDays, isEnabled);
        }

        /// <summary> Initializes a new instance of SlotConfigNamesResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="connectionStringNames"> List of connection string names. </param>
        /// <param name="appSettingNames"> List of application settings names. </param>
        /// <param name="azureStorageConfigNames"> List of external Azure storage account identifiers. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.SlotConfigNamesResourceData"/> instance for mocking. </returns>
        public static SlotConfigNamesResourceData SlotConfigNamesResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<string> connectionStringNames = null, IEnumerable<string> appSettingNames = null, IEnumerable<string> azureStorageConfigNames = null, string kind = null)
        {
            connectionStringNames ??= new List<string>();
            appSettingNames ??= new List<string>();
            azureStorageConfigNames ??= new List<string>();

            return new SlotConfigNamesResourceData(id, name, resourceType, systemData, connectionStringNames?.ToList(), appSettingNames?.ToList(), azureStorageConfigNames?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of SiteConfigurationSnapshotInfo. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="snapshotTakenOn"> The time the snapshot was taken. </param>
        /// <param name="snapshotId"> The id of the snapshot. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.SiteConfigurationSnapshotInfo"/> instance for mocking. </returns>
        public static SiteConfigurationSnapshotInfo SiteConfigurationSnapshotInfo(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? snapshotTakenOn = null, int? snapshotId = null, string kind = null)
        {
            return new SiteConfigurationSnapshotInfo(id, name, resourceType, systemData, snapshotTakenOn, snapshotId, kind);
        }

        /// <summary> Initializes a new instance of ContinuousWebJobData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="status"> Job status. </param>
        /// <param name="detailedStatus"> Detailed status. </param>
        /// <param name="logUri"> Log URL. </param>
        /// <param name="runCommand"> Run command. </param>
        /// <param name="uri"> Job URL. </param>
        /// <param name="extraInfoUri"> Extra Info URL. </param>
        /// <param name="webJobType"> Job type. </param>
        /// <param name="error"> Error information. </param>
        /// <param name="isUsingSdk"> Using SDK?. </param>
        /// <param name="settings"> Job settings. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.ContinuousWebJobData"/> instance for mocking. </returns>
        public static ContinuousWebJobData ContinuousWebJobData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ContinuousWebJobStatus? status = null, string detailedStatus = null, Uri logUri = null, string runCommand = null, Uri uri = null, Uri extraInfoUri = null, WebJobType? webJobType = null, string error = null, bool? isUsingSdk = null, IDictionary<string, BinaryData> settings = null, string kind = null)
        {
            settings ??= new Dictionary<string, BinaryData>();

            return new ContinuousWebJobData(id, name, resourceType, systemData, status, detailedStatus, logUri, runCommand, uri, extraInfoUri, webJobType, error, isUsingSdk, settings, kind);
        }

        /// <summary> Initializes a new instance of WebAppDeploymentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="status"> Deployment status. </param>
        /// <param name="message"> Details about deployment status. </param>
        /// <param name="author"> Who authored the deployment. </param>
        /// <param name="deployer"> Who performed the deployment. </param>
        /// <param name="authorEmail"> Author email. </param>
        /// <param name="startOn"> Start time. </param>
        /// <param name="endOn"> End time. </param>
        /// <param name="isActive"> True if deployment is currently active, false if completed and null if not started. </param>
        /// <param name="details"> Details on deployment. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.WebAppDeploymentData"/> instance for mocking. </returns>
        public static WebAppDeploymentData WebAppDeploymentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? status = null, string message = null, string author = null, string deployer = null, string authorEmail = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, bool? isActive = null, string details = null, string kind = null)
        {
            return new WebAppDeploymentData(id, name, resourceType, systemData, status, message, author, deployer, authorEmail, startOn, endOn, isActive, details, kind);
        }

        /// <summary> Initializes a new instance of MSDeployStatusData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="deployer"> Username of deployer. </param>
        /// <param name="provisioningState"> Provisioning state. </param>
        /// <param name="startOn"> Start time of deploy operation. </param>
        /// <param name="endOn"> End time of deploy operation. </param>
        /// <param name="isComplete"> Whether the deployment operation has completed. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.MSDeployStatusData"/> instance for mocking. </returns>
        public static MSDeployStatusData MSDeployStatusData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string deployer = null, MSDeployProvisioningState? provisioningState = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, bool? isComplete = null, string kind = null)
        {
            return new MSDeployStatusData(id, name, resourceType, systemData, deployer, provisioningState, startOn, endOn, isComplete, kind);
        }

        /// <summary> Initializes a new instance of WebAppMSDeploy. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="packageUri"> Package URI. </param>
        /// <param name="connectionString"> SQL Connection String. </param>
        /// <param name="dbType"> Database Type. </param>
        /// <param name="setParametersXmlFileUri"> URI of MSDeploy Parameters file. Must not be set if SetParameters is used. </param>
        /// <param name="setParameters"> MSDeploy Parameters. Must not be set if SetParametersXmlFileUri is used. </param>
        /// <param name="skipAppData">
        /// Controls whether the MSDeploy operation skips the App_Data directory.
        /// If set to &lt;code&gt;true&lt;/code&gt;, the existing App_Data directory on the destination
        /// will not be deleted, and any App_Data directory in the source will be ignored.
        /// Setting is &lt;code&gt;false&lt;/code&gt; by default.
        /// </param>
        /// <param name="isAppOffline">
        /// Sets the AppOffline rule while the MSDeploy operation executes.
        /// Setting is &lt;code&gt;false&lt;/code&gt; by default.
        /// </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.WebAppMSDeploy"/> instance for mocking. </returns>
        public static WebAppMSDeploy WebAppMSDeploy(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, Uri packageUri = null, string connectionString = null, string dbType = null, Uri setParametersXmlFileUri = null, IDictionary<string, string> setParameters = null, bool? skipAppData = null, bool? isAppOffline = null, string kind = null)
        {
            setParameters ??= new Dictionary<string, string>();

            return new WebAppMSDeploy(id, name, resourceType, systemData, packageUri, connectionString, dbType, setParametersXmlFileUri, setParameters, skipAppData, isAppOffline, kind);
        }

        /// <summary> Initializes a new instance of WebAppMSDeployLog. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="entries"> List of log entry messages. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.WebAppMSDeployLog"/> instance for mocking. </returns>
        public static WebAppMSDeployLog WebAppMSDeployLog(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<WebAppMSDeployLogEntry> entries = null, string kind = null)
        {
            entries ??= new List<WebAppMSDeployLogEntry>();

            return new WebAppMSDeployLog(id, name, resourceType, systemData, entries?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of WebAppMSDeployLogEntry. </summary>
        /// <param name="time"> Timestamp of log entry. </param>
        /// <param name="entryType"> Log entry type. </param>
        /// <param name="message"> Log entry message. </param>
        /// <returns> A new <see cref="Models.WebAppMSDeployLogEntry"/> instance for mocking. </returns>
        public static WebAppMSDeployLogEntry WebAppMSDeployLogEntry(DateTimeOffset? time = null, WebAppMSDeployLogEntryType? entryType = null, string message = null)
        {
            return new WebAppMSDeployLogEntry(time, entryType, message);
        }

        /// <summary> Initializes a new instance of FunctionEnvelopeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="functionAppId"> Function App ID. </param>
        /// <param name="scriptRootPathHref"> Script root path URI. </param>
        /// <param name="scriptHref"> Script URI. </param>
        /// <param name="configHref"> Config URI. </param>
        /// <param name="testDataHref"> Test data URI. </param>
        /// <param name="secretsFileHref"> Secrets file URI. </param>
        /// <param name="href"> Function URI. </param>
        /// <param name="config"> Config information. </param>
        /// <param name="files"> File list. </param>
        /// <param name="testData"> Test data used when testing via the Azure Portal. </param>
        /// <param name="invokeUrlTemplate"> The invocation URL. </param>
        /// <param name="language"> The function language. </param>
        /// <param name="isDisabled"> Gets or sets a value indicating whether the function is disabled. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.FunctionEnvelopeData"/> instance for mocking. </returns>
        public static FunctionEnvelopeData FunctionEnvelopeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string functionAppId = null, string scriptRootPathHref = null, string scriptHref = null, string configHref = null, string testDataHref = null, string secretsFileHref = null, string href = null, BinaryData config = null, IDictionary<string, string> files = null, string testData = null, string invokeUrlTemplate = null, string language = null, bool? isDisabled = null, string kind = null)
        {
            files ??= new Dictionary<string, string>();

            return new FunctionEnvelopeData(id, name, resourceType, systemData, functionAppId, scriptRootPathHref, scriptHref, configHref, testDataHref, secretsFileHref, href, config, files, testData, invokeUrlTemplate, language, isDisabled, kind);
        }

        /// <summary> Initializes a new instance of WebAppKeyInfo. </summary>
        /// <param name="name"> Key name. </param>
        /// <param name="value"> Key value. </param>
        /// <returns> A new <see cref="Models.WebAppKeyInfo"/> instance for mocking. </returns>
        public static WebAppKeyInfo WebAppKeyInfo(string name = null, string value = null)
        {
            return new WebAppKeyInfo(name, value);
        }

        /// <summary> Initializes a new instance of FunctionSecrets. </summary>
        /// <param name="key"> Secret key. </param>
        /// <param name="triggerUri"> Trigger URL. </param>
        /// <returns> A new <see cref="Models.FunctionSecrets"/> instance for mocking. </returns>
        public static FunctionSecrets FunctionSecrets(string key = null, Uri triggerUri = null)
        {
            return new FunctionSecrets(key, triggerUri);
        }

        /// <summary> Initializes a new instance of FunctionAppHostKeys. </summary>
        /// <param name="masterKey"> Secret key. </param>
        /// <param name="functionKeys"> Host level function keys. </param>
        /// <param name="systemKeys"> System keys. </param>
        /// <returns> A new <see cref="Models.FunctionAppHostKeys"/> instance for mocking. </returns>
        public static FunctionAppHostKeys FunctionAppHostKeys(string masterKey = null, IReadOnlyDictionary<string, string> functionKeys = null, IReadOnlyDictionary<string, string> systemKeys = null)
        {
            functionKeys ??= new Dictionary<string, string>();
            systemKeys ??= new Dictionary<string, string>();

            return new FunctionAppHostKeys(masterKey, functionKeys, systemKeys);
        }

        /// <summary> Initializes a new instance of HostNameBindingData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="siteName"> App Service app name. </param>
        /// <param name="domainId"> Fully qualified ARM domain resource URI. </param>
        /// <param name="azureResourceName"> Azure resource name. </param>
        /// <param name="azureResourceType"> Azure resource type. </param>
        /// <param name="customHostNameDnsRecordType"> Custom DNS record type. </param>
        /// <param name="hostNameType"> Hostname type. </param>
        /// <param name="sslState"> SSL type. </param>
        /// <param name="thumbprint"> SSL certificate thumbprint. </param>
        /// <param name="virtualIP"> Virtual IP address assigned to the hostname if IP based SSL is enabled. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.HostNameBindingData"/> instance for mocking. </returns>
        public static HostNameBindingData HostNameBindingData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string siteName = null, string domainId = null, string azureResourceName = null, AppServiceResourceType? azureResourceType = null, CustomHostNameDnsRecordType? customHostNameDnsRecordType = null, AppServiceHostNameType? hostNameType = null, HostNameBindingSslState? sslState = null, BinaryData thumbprint = null, string virtualIP = null, string kind = null)
        {
            return new HostNameBindingData(id, name, resourceType, systemData, siteName, domainId, azureResourceName, azureResourceType, customHostNameDnsRecordType, hostNameType, sslState, thumbprint, virtualIP, kind);
        }

        /// <summary> Initializes a new instance of RelayServiceConnectionEntityData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="entityName"></param>
        /// <param name="entityConnectionString"></param>
        /// <param name="resourceConnectionString"></param>
        /// <param name="hostname"></param>
        /// <param name="port"></param>
        /// <param name="biztalkUri"></param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.RelayServiceConnectionEntityData"/> instance for mocking. </returns>
        public static RelayServiceConnectionEntityData RelayServiceConnectionEntityData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string entityName = null, string entityConnectionString = null, string resourceConnectionString = null, string hostname = null, int? port = null, Uri biztalkUri = null, string kind = null)
        {
            return new RelayServiceConnectionEntityData(id, name, resourceType, systemData, entityName, entityConnectionString, resourceConnectionString, hostname, port, biztalkUri, kind);
        }

        /// <summary> Initializes a new instance of WebSiteInstanceStatusData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="state"></param>
        /// <param name="statusUri"> Link to the GetStatusApi in Kudu. </param>
        /// <param name="detectorUri"> Link to the Diagnose and Solve Portal. </param>
        /// <param name="consoleUri"> Link to the console to web app instance. </param>
        /// <param name="healthCheckUri"> Link to the console to web app instance. </param>
        /// <param name="containers"> Dictionary of &lt;ContainerInfo&gt;. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.WebSiteInstanceStatusData"/> instance for mocking. </returns>
        public static WebSiteInstanceStatusData WebSiteInstanceStatusData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SiteRuntimeState? state = null, Uri statusUri = null, Uri detectorUri = null, Uri consoleUri = null, Uri healthCheckUri = null, IDictionary<string, ContainerInfo> containers = null, string kind = null)
        {
            containers ??= new Dictionary<string, ContainerInfo>();

            return new WebSiteInstanceStatusData(id, name, resourceType, systemData, state, statusUri, detectorUri, consoleUri, healthCheckUri, containers, kind);
        }

        /// <summary> Initializes a new instance of ContainerInfo. </summary>
        /// <param name="currentTimeStamp"></param>
        /// <param name="previousTimeStamp"></param>
        /// <param name="currentCpuStats"></param>
        /// <param name="previousCpuStats"></param>
        /// <param name="memoryStats"></param>
        /// <param name="name"></param>
        /// <param name="id"></param>
        /// <param name="eth0"></param>
        /// <returns> A new <see cref="Models.ContainerInfo"/> instance for mocking. </returns>
        public static ContainerInfo ContainerInfo(DateTimeOffset? currentTimeStamp = null, DateTimeOffset? previousTimeStamp = null, ContainerCpuStatistics currentCpuStats = null, ContainerCpuStatistics previousCpuStats = null, ContainerMemoryStatistics memoryStats = null, string name = null, string id = null, ContainerNetworkInterfaceStatistics eth0 = null)
        {
            return new ContainerInfo(currentTimeStamp, previousTimeStamp, currentCpuStats, previousCpuStats, memoryStats, name, id, eth0);
        }

        /// <summary> Initializes a new instance of ContainerCpuStatistics. </summary>
        /// <param name="cpuUsage"></param>
        /// <param name="systemCpuUsage"></param>
        /// <param name="onlineCpuCount"></param>
        /// <param name="throttlingData"></param>
        /// <returns> A new <see cref="Models.ContainerCpuStatistics"/> instance for mocking. </returns>
        public static ContainerCpuStatistics ContainerCpuStatistics(ContainerCpuUsage cpuUsage = null, long? systemCpuUsage = null, int? onlineCpuCount = null, ContainerThrottlingInfo throttlingData = null)
        {
            return new ContainerCpuStatistics(cpuUsage, systemCpuUsage, onlineCpuCount, throttlingData);
        }

        /// <summary> Initializes a new instance of ContainerCpuUsage. </summary>
        /// <param name="totalUsage"></param>
        /// <param name="perCpuUsage"></param>
        /// <param name="kernelModeUsage"></param>
        /// <param name="userModeUsage"></param>
        /// <returns> A new <see cref="Models.ContainerCpuUsage"/> instance for mocking. </returns>
        public static ContainerCpuUsage ContainerCpuUsage(long? totalUsage = null, IEnumerable<long> perCpuUsage = null, long? kernelModeUsage = null, long? userModeUsage = null)
        {
            perCpuUsage ??= new List<long>();

            return new ContainerCpuUsage(totalUsage, perCpuUsage?.ToList(), kernelModeUsage, userModeUsage);
        }

        /// <summary> Initializes a new instance of ContainerThrottlingInfo. </summary>
        /// <param name="periods"></param>
        /// <param name="throttledPeriods"></param>
        /// <param name="throttledTime"></param>
        /// <returns> A new <see cref="Models.ContainerThrottlingInfo"/> instance for mocking. </returns>
        public static ContainerThrottlingInfo ContainerThrottlingInfo(int? periods = null, int? throttledPeriods = null, int? throttledTime = null)
        {
            return new ContainerThrottlingInfo(periods, throttledPeriods, throttledTime);
        }

        /// <summary> Initializes a new instance of ContainerMemoryStatistics. </summary>
        /// <param name="usage"></param>
        /// <param name="maxUsage"></param>
        /// <param name="limit"></param>
        /// <returns> A new <see cref="Models.ContainerMemoryStatistics"/> instance for mocking. </returns>
        public static ContainerMemoryStatistics ContainerMemoryStatistics(long? usage = null, long? maxUsage = null, long? limit = null)
        {
            return new ContainerMemoryStatistics(usage, maxUsage, limit);
        }

        /// <summary> Initializes a new instance of ContainerNetworkInterfaceStatistics. </summary>
        /// <param name="rxBytes"></param>
        /// <param name="rxPackets"></param>
        /// <param name="rxErrors"></param>
        /// <param name="rxDropped"></param>
        /// <param name="txBytes"></param>
        /// <param name="txPackets"></param>
        /// <param name="txErrors"></param>
        /// <param name="txDropped"></param>
        /// <returns> A new <see cref="Models.ContainerNetworkInterfaceStatistics"/> instance for mocking. </returns>
        public static ContainerNetworkInterfaceStatistics ContainerNetworkInterfaceStatistics(long? rxBytes = null, long? rxPackets = null, long? rxErrors = null, long? rxDropped = null, long? txBytes = null, long? txPackets = null, long? txErrors = null, long? txDropped = null)
        {
            return new ContainerNetworkInterfaceStatistics(rxBytes, rxPackets, rxErrors, rxDropped, txBytes, txPackets, txErrors, txDropped);
        }

        /// <summary> Initializes a new instance of ProcessInfoData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="identifier"> ARM Identifier for deployment. </param>
        /// <param name="deploymentName"> Deployment name. </param>
        /// <param name="href"> HRef URI. </param>
        /// <param name="minidump"> Minidump URI. </param>
        /// <param name="isProfileRunning"> Is profile running?. </param>
        /// <param name="isIisProfileRunning"> Is the IIS Profile running?. </param>
        /// <param name="iisProfileTimeoutInSeconds"> IIS Profile timeout (seconds). </param>
        /// <param name="parent"> Parent process. </param>
        /// <param name="children"> Child process list. </param>
        /// <param name="threads"> Thread list. </param>
        /// <param name="openFileHandles"> List of open files. </param>
        /// <param name="modules"> List of modules. </param>
        /// <param name="fileName"> File name of this process. </param>
        /// <param name="commandLine"> Command line. </param>
        /// <param name="userName"> User name. </param>
        /// <param name="handleCount"> Handle count. </param>
        /// <param name="moduleCount"> Module count. </param>
        /// <param name="threadCount"> Thread count. </param>
        /// <param name="startOn"> Start time. </param>
        /// <param name="totalCpuTime"> Total CPU time. </param>
        /// <param name="userCpuTime"> User CPU time. </param>
        /// <param name="privilegedCpuTime"> Privileged CPU time. </param>
        /// <param name="workingSet"> Working set. </param>
        /// <param name="peakWorkingSet"> Peak working set. </param>
        /// <param name="privateMemory"> Private memory size. </param>
        /// <param name="virtualMemory"> Virtual memory size. </param>
        /// <param name="peakVirtualMemory"> Peak virtual memory usage. </param>
        /// <param name="pagedSystemMemory"> Paged system memory. </param>
        /// <param name="nonPagedSystemMemory"> Non-paged system memory. </param>
        /// <param name="pagedMemory"> Paged memory. </param>
        /// <param name="peakPagedMemory"> Peak paged memory. </param>
        /// <param name="timeStamp"> Time stamp. </param>
        /// <param name="environmentVariables"> List of environment variables. </param>
        /// <param name="isScmSite"> Is this the SCM site?. </param>
        /// <param name="isWebjob"> Is this a Web Job?. </param>
        /// <param name="description"> Description of process. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.ProcessInfoData"/> instance for mocking. </returns>
        public static ProcessInfoData ProcessInfoData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? identifier = null, string deploymentName = null, string href = null, string minidump = null, bool? isProfileRunning = null, bool? isIisProfileRunning = null, double? iisProfileTimeoutInSeconds = null, string parent = null, IEnumerable<string> children = null, IEnumerable<ProcessThreadInfo> threads = null, IEnumerable<string> openFileHandles = null, IEnumerable<ProcessModuleInfoData> modules = null, string fileName = null, string commandLine = null, string userName = null, int? handleCount = null, int? moduleCount = null, int? threadCount = null, DateTimeOffset? startOn = null, string totalCpuTime = null, string userCpuTime = null, string privilegedCpuTime = null, long? workingSet = null, long? peakWorkingSet = null, long? privateMemory = null, long? virtualMemory = null, long? peakVirtualMemory = null, long? pagedSystemMemory = null, long? nonPagedSystemMemory = null, long? pagedMemory = null, long? peakPagedMemory = null, DateTimeOffset? timeStamp = null, IDictionary<string, string> environmentVariables = null, bool? isScmSite = null, bool? isWebjob = null, string description = null, string kind = null)
        {
            children ??= new List<string>();
            threads ??= new List<ProcessThreadInfo>();
            openFileHandles ??= new List<string>();
            modules ??= new List<ProcessModuleInfoData>();
            environmentVariables ??= new Dictionary<string, string>();

            return new ProcessInfoData(id, name, resourceType, systemData, identifier, deploymentName, href, minidump, isProfileRunning, isIisProfileRunning, iisProfileTimeoutInSeconds, parent, children?.ToList(), threads?.ToList(), openFileHandles?.ToList(), modules?.ToList(), fileName, commandLine, userName, handleCount, moduleCount, threadCount, startOn, totalCpuTime, userCpuTime, privilegedCpuTime, workingSet, peakWorkingSet, privateMemory, virtualMemory, peakVirtualMemory, pagedSystemMemory, nonPagedSystemMemory, pagedMemory, peakPagedMemory, timeStamp, environmentVariables, isScmSite, isWebjob, description, kind);
        }

        /// <summary> Initializes a new instance of ProcessThreadInfo. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="identifier"> Site extension ID. </param>
        /// <param name="href"> HRef URI. </param>
        /// <param name="process"> Process URI. </param>
        /// <param name="startAddress"> Start address. </param>
        /// <param name="currentPriority"> Current thread priority. </param>
        /// <param name="priorityLevel"> Thread priority level. </param>
        /// <param name="basePriority"> Base priority. </param>
        /// <param name="startOn"> Start time. </param>
        /// <param name="totalProcessorTime"> Total processor time. </param>
        /// <param name="userProcessorTime"> User processor time. </param>
        /// <param name="state"> Thread state. </param>
        /// <param name="waitReason"> Wait reason. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.ProcessThreadInfo"/> instance for mocking. </returns>
        public static ProcessThreadInfo ProcessThreadInfo(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? identifier = null, string href = null, string process = null, string startAddress = null, int? currentPriority = null, string priorityLevel = null, int? basePriority = null, DateTimeOffset? startOn = null, string totalProcessorTime = null, string userProcessorTime = null, string state = null, string waitReason = null, string kind = null)
        {
            return new ProcessThreadInfo(id, name, resourceType, systemData, identifier, href, process, startAddress, currentPriority, priorityLevel, basePriority, startOn, totalProcessorTime, userProcessorTime, state, waitReason, kind);
        }

        /// <summary> Initializes a new instance of ProcessModuleInfoData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="baseAddress"> Base address. Used as module identifier in ARM resource URI. </param>
        /// <param name="fileName"> File name. </param>
        /// <param name="href"> HRef URI. </param>
        /// <param name="filePath"> File path. </param>
        /// <param name="moduleMemorySize"> Module memory size. </param>
        /// <param name="fileVersion"> File version. </param>
        /// <param name="fileDescription"> File description. </param>
        /// <param name="product"> Product name. </param>
        /// <param name="productVersion"> Product version. </param>
        /// <param name="isDebug"> Is debug?. </param>
        /// <param name="language"> Module language (locale). </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.ProcessModuleInfoData"/> instance for mocking. </returns>
        public static ProcessModuleInfoData ProcessModuleInfoData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string baseAddress = null, string fileName = null, string href = null, string filePath = null, int? moduleMemorySize = null, string fileVersion = null, string fileDescription = null, string product = null, string productVersion = null, bool? isDebug = null, string language = null, string kind = null)
        {
            return new ProcessModuleInfoData(id, name, resourceType, systemData, baseAddress, fileName, href, filePath, moduleMemorySize, fileVersion, fileDescription, product, productVersion, isDebug, language, kind);
        }

        /// <summary> Initializes a new instance of SiteCloneability. </summary>
        /// <param name="result"> Name of app. </param>
        /// <param name="blockingFeatures"> List of features enabled on app that prevent cloning. </param>
        /// <param name="unsupportedFeatures">
        /// List of features enabled on app that are non-blocking but cannot be cloned. The app can still be cloned
        /// but the features in this list will not be set up on cloned app.
        /// </param>
        /// <param name="blockingCharacteristics"> List of blocking application characteristics. </param>
        /// <returns> A new <see cref="Models.SiteCloneability"/> instance for mocking. </returns>
        public static SiteCloneability SiteCloneability(CloneAbilityResult? result = null, IEnumerable<SiteCloneabilityCriterion> blockingFeatures = null, IEnumerable<SiteCloneabilityCriterion> unsupportedFeatures = null, IEnumerable<SiteCloneabilityCriterion> blockingCharacteristics = null)
        {
            blockingFeatures ??= new List<SiteCloneabilityCriterion>();
            unsupportedFeatures ??= new List<SiteCloneabilityCriterion>();
            blockingCharacteristics ??= new List<SiteCloneabilityCriterion>();

            return new SiteCloneability(result, blockingFeatures?.ToList(), unsupportedFeatures?.ToList(), blockingCharacteristics?.ToList());
        }

        /// <summary> Initializes a new instance of SiteCloneabilityCriterion. </summary>
        /// <param name="name"> Name of criterion. </param>
        /// <param name="description"> Description of criterion. </param>
        /// <returns> A new <see cref="Models.SiteCloneabilityCriterion"/> instance for mocking. </returns>
        public static SiteCloneabilityCriterion SiteCloneabilityCriterion(string name = null, string description = null)
        {
            return new SiteCloneabilityCriterion(name, description);
        }

        /// <summary> Initializes a new instance of StorageMigrationContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="azurefilesConnectionString"> AzureFiles connection string. </param>
        /// <param name="azurefilesShare"> AzureFiles share. </param>
        /// <param name="switchSiteAfterMigration"> &lt;code&gt;true&lt;/code&gt;if the app should be switched over; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="blockWriteAccessToSite"> &lt;code&gt;true&lt;/code&gt; if the app should be read only during copy operation; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StorageMigrationContent"/> instance for mocking. </returns>
        public static StorageMigrationContent StorageMigrationContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string azurefilesConnectionString = null, string azurefilesShare = null, bool? switchSiteAfterMigration = null, bool? blockWriteAccessToSite = null, string kind = null)
        {
            return new StorageMigrationContent(id, name, resourceType, systemData, azurefilesConnectionString, azurefilesShare, switchSiteAfterMigration, blockWriteAccessToSite, kind);
        }

        /// <summary> Initializes a new instance of StorageMigrationResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="operationId"> When server starts the migration process, it will return an operation ID identifying that particular migration operation. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.StorageMigrationResult"/> instance for mocking. </returns>
        public static StorageMigrationResult StorageMigrationResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string operationId = null, string kind = null)
        {
            return new StorageMigrationResult(id, name, resourceType, systemData, operationId, kind);
        }

        /// <summary> Initializes a new instance of MigrateMySqlContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="connectionString"> Connection string to the remote MySQL database. </param>
        /// <param name="migrationType"> The type of migration operation to be done. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.MigrateMySqlContent"/> instance for mocking. </returns>
        public static MigrateMySqlContent MigrateMySqlContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string connectionString = null, MySqlMigrationType? migrationType = null, string kind = null)
        {
            return new MigrateMySqlContent(id, name, resourceType, systemData, connectionString, migrationType, kind);
        }

        /// <summary> Initializes a new instance of MigrateMySqlStatusData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="migrationOperationStatus"> Status of the migration task. </param>
        /// <param name="operationId"> Operation ID for the migration task. </param>
        /// <param name="isLocalMySqlEnabled"> True if the web app has in app MySql enabled. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.MigrateMySqlStatusData"/> instance for mocking. </returns>
        public static MigrateMySqlStatusData MigrateMySqlStatusData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AppServiceOperationStatus? migrationOperationStatus = null, string operationId = null, bool? isLocalMySqlEnabled = null, string kind = null)
        {
            return new MigrateMySqlStatusData(id, name, resourceType, systemData, migrationOperationStatus, operationId, isLocalMySqlEnabled, kind);
        }

        /// <summary> Initializes a new instance of SwiftVirtualNetworkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="subnetResourceId"> The Virtual Network subnet&apos;s resource ID. This is the subnet that this Web App will join. This subnet must have a delegation to Microsoft.Web/serverFarms defined first. </param>
        /// <param name="isSwiftSupported"> A flag that specifies if the scale unit this Web App is on supports Swift integration. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.SwiftVirtualNetworkData"/> instance for mocking. </returns>
        public static SwiftVirtualNetworkData SwiftVirtualNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier subnetResourceId = null, bool? isSwiftSupported = null, string kind = null)
        {
            return new SwiftVirtualNetworkData(id, name, resourceType, systemData, subnetResourceId, isSwiftSupported, kind);
        }

        /// <summary> Initializes a new instance of NetworkFeatureData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="virtualNetworkName"> The Virtual Network name. </param>
        /// <param name="virtualNetworkConnection"> The Virtual Network summary view. </param>
        /// <param name="hybridConnections"> The Hybrid Connections summary view. </param>
        /// <param name="hybridConnectionsV2"> The Hybrid Connection V2 (Service Bus) view. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.NetworkFeatureData"/> instance for mocking. </returns>
        public static NetworkFeatureData NetworkFeatureData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string virtualNetworkName = null, AppServiceVirtualNetworkProperties virtualNetworkConnection = null, IEnumerable<RelayServiceConnectionEntityData> hybridConnections = null, IEnumerable<HybridConnectionData> hybridConnectionsV2 = null, string kind = null)
        {
            hybridConnections ??= new List<RelayServiceConnectionEntityData>();
            hybridConnectionsV2 ??= new List<HybridConnectionData>();

            return new NetworkFeatureData(id, name, resourceType, systemData, virtualNetworkName, virtualNetworkConnection, hybridConnections?.ToList(), hybridConnectionsV2?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of WebAppNetworkTrace. </summary>
        /// <param name="path"> Local file path for the captured network trace file. </param>
        /// <param name="status"> Current status of the network trace operation, same as Operation.Status (InProgress/Succeeded/Failed). </param>
        /// <param name="message"> Detailed message of a network trace operation, e.g. error message in case of failure. </param>
        /// <returns> A new <see cref="Models.WebAppNetworkTrace"/> instance for mocking. </returns>
        public static WebAppNetworkTrace WebAppNetworkTrace(string path = null, string status = null, string message = null)
        {
            return new WebAppNetworkTrace(path, status, message);
        }

        /// <summary> Initializes a new instance of PerfMonResponseInfo. </summary>
        /// <param name="code"> The response code. </param>
        /// <param name="message"> The message. </param>
        /// <param name="data"> The performance monitor counters. </param>
        /// <returns> A new <see cref="Models.PerfMonResponseInfo"/> instance for mocking. </returns>
        public static PerfMonResponseInfo PerfMonResponseInfo(string code = null, string message = null, PerfMonSet data = null)
        {
            return new PerfMonResponseInfo(code, message, data);
        }

        /// <summary> Initializes a new instance of PerfMonSet. </summary>
        /// <param name="name"> Unique key name of the counter. </param>
        /// <param name="startOn"> Start time of the period. </param>
        /// <param name="endOn"> End time of the period. </param>
        /// <param name="timeGrain"> Presented time grain. </param>
        /// <param name="values"> Collection of workers that are active during this time. </param>
        /// <returns> A new <see cref="Models.PerfMonSet"/> instance for mocking. </returns>
        public static PerfMonSet PerfMonSet(string name = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string timeGrain = null, IEnumerable<PerfMonSample> values = null)
        {
            values ??= new List<PerfMonSample>();

            return new PerfMonSet(name, startOn, endOn, timeGrain, values?.ToList());
        }

        /// <summary> Initializes a new instance of PerfMonSample. </summary>
        /// <param name="time"> Point in time for which counter was measured. </param>
        /// <param name="instanceName"> Name of the server on which the measurement is made. </param>
        /// <param name="value"> Value of counter at a certain time. </param>
        /// <returns> A new <see cref="Models.PerfMonSample"/> instance for mocking. </returns>
        public static PerfMonSample PerfMonSample(DateTimeOffset? time = null, string instanceName = null, double? value = null)
        {
            return new PerfMonSample(time, instanceName, value);
        }

        /// <summary> Initializes a new instance of SitePhpErrorLogFlag. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="localLogErrors"> Local log_errors setting. </param>
        /// <param name="masterLogErrors"> Master log_errors setting. </param>
        /// <param name="localLogErrorsMaxLength"> Local log_errors_max_len setting. </param>
        /// <param name="masterLogErrorsMaxLength"> Master log_errors_max_len setting. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.SitePhpErrorLogFlag"/> instance for mocking. </returns>
        public static SitePhpErrorLogFlag SitePhpErrorLogFlag(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string localLogErrors = null, string masterLogErrors = null, string localLogErrorsMaxLength = null, string masterLogErrorsMaxLength = null, string kind = null)
        {
            return new SitePhpErrorLogFlag(id, name, resourceType, systemData, localLogErrors, masterLogErrors, localLogErrorsMaxLength, masterLogErrorsMaxLength, kind);
        }

        /// <summary> Initializes a new instance of PremierAddOnData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> Premier add on SKU. </param>
        /// <param name="product"> Premier add on Product. </param>
        /// <param name="vendor"> Premier add on Vendor. </param>
        /// <param name="marketplacePublisher"> Premier add on Marketplace publisher. </param>
        /// <param name="marketplaceOffer"> Premier add on Marketplace offer. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.PremierAddOnData"/> instance for mocking. </returns>
        public static PremierAddOnData PremierAddOnData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string sku = null, string product = null, string vendor = null, string marketplacePublisher = null, string marketplaceOffer = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PremierAddOnData(id, name, resourceType, systemData, tags, location, sku, product, vendor, marketplacePublisher, marketplaceOffer, kind);
        }

        /// <summary> Initializes a new instance of PremierAddOnPatchResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="sku"> Premier add on SKU. </param>
        /// <param name="product"> Premier add on Product. </param>
        /// <param name="vendor"> Premier add on Vendor. </param>
        /// <param name="marketplacePublisher"> Premier add on Marketplace publisher. </param>
        /// <param name="marketplaceOffer"> Premier add on Marketplace offer. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.PremierAddOnPatchResource"/> instance for mocking. </returns>
        public static PremierAddOnPatchResource PremierAddOnPatchResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string sku = null, string product = null, string vendor = null, string marketplacePublisher = null, string marketplaceOffer = null, string kind = null)
        {
            return new PremierAddOnPatchResource(id, name, resourceType, systemData, sku, product, vendor, marketplacePublisher, marketplaceOffer, kind);
        }

        /// <summary> Initializes a new instance of PrivateAccessData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="isEnabled"> Whether private access is enabled or not. </param>
        /// <param name="virtualNetworks"> The Virtual Networks (and subnets) allowed to access the site privately. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.PrivateAccessData"/> instance for mocking. </returns>
        public static PrivateAccessData PrivateAccessData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? isEnabled = null, IEnumerable<PrivateAccessVirtualNetwork> virtualNetworks = null, string kind = null)
        {
            virtualNetworks ??= new List<PrivateAccessVirtualNetwork>();

            return new PrivateAccessData(id, name, resourceType, systemData, isEnabled, virtualNetworks?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of PrivateAccessVirtualNetwork. </summary>
        /// <param name="name"> The name of the Virtual Network. </param>
        /// <param name="key"> The key (ID) of the Virtual Network. </param>
        /// <param name="resourceId"> The ARM uri of the Virtual Network. </param>
        /// <param name="subnets"> A List of subnets that access is allowed to on this Virtual Network. An empty array (but not null) is interpreted to mean that all subnets are allowed within this Virtual Network. </param>
        /// <returns> A new <see cref="Models.PrivateAccessVirtualNetwork"/> instance for mocking. </returns>
        public static PrivateAccessVirtualNetwork PrivateAccessVirtualNetwork(string name = null, int? key = null, ResourceIdentifier resourceId = null, IEnumerable<PrivateAccessSubnet> subnets = null)
        {
            subnets ??= new List<PrivateAccessSubnet>();

            return new PrivateAccessVirtualNetwork(name, key, resourceId, subnets?.ToList());
        }

        /// <summary> Initializes a new instance of PrivateAccessSubnet. </summary>
        /// <param name="name"> The name of the subnet. </param>
        /// <param name="key"> The key (ID) of the subnet. </param>
        /// <returns> A new <see cref="Models.PrivateAccessSubnet"/> instance for mocking. </returns>
        public static PrivateAccessSubnet PrivateAccessSubnet(string name = null, int? key = null)
        {
            return new PrivateAccessSubnet(name, key);
        }

        /// <summary> Initializes a new instance of PublicCertificateData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="blob"> Public Certificate byte array. </param>
        /// <param name="publicCertificateLocation"> Public Certificate Location. </param>
        /// <param name="thumbprint"> Certificate Thumbprint. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.PublicCertificateData"/> instance for mocking. </returns>
        public static PublicCertificateData PublicCertificateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, byte[] blob = null, PublicCertificateLocation? publicCertificateLocation = null, BinaryData thumbprint = null, string kind = null)
        {
            return new PublicCertificateData(id, name, resourceType, systemData, blob, publicCertificateLocation, thumbprint, kind);
        }

        /// <summary> Initializes a new instance of DeletedAppRestoreContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="deletedSiteId">
        /// ARM resource ID of the deleted app. Example:
        /// /subscriptions/{subId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
        /// </param>
        /// <param name="recoverConfiguration"> If true, deleted site configuration, in addition to content, will be restored. </param>
        /// <param name="snapshotTime">
        /// Point in time to restore the deleted app from, formatted as a DateTime string. 
        /// If unspecified, default value is the time that the app was deleted.
        /// </param>
        /// <param name="useDRSecondary"> If true, the snapshot is retrieved from DRSecondary endpoint. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.DeletedAppRestoreContent"/> instance for mocking. </returns>
        public static DeletedAppRestoreContent DeletedAppRestoreContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier deletedSiteId = null, bool? recoverConfiguration = null, string snapshotTime = null, bool? useDRSecondary = null, string kind = null)
        {
            return new DeletedAppRestoreContent(id, name, resourceType, systemData, deletedSiteId, recoverConfiguration, snapshotTime, useDRSecondary, kind);
        }

        /// <summary> Initializes a new instance of SnapshotRestoreRequest. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="snapshotTime"> Point in time in which the app restore should be done, formatted as a DateTime string. </param>
        /// <param name="recoverySource">
        /// Optional. Specifies the web app that snapshot contents will be retrieved from.
        /// If empty, the targeted web app will be used as the source.
        /// </param>
        /// <param name="canOverwrite"> If &lt;code&gt;true&lt;/code&gt; the restore operation can overwrite source app; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="recoverConfiguration"> If true, site configuration, in addition to content, will be reverted. </param>
        /// <param name="ignoreConflictingHostNames">
        /// If true, custom hostname conflicts will be ignored when recovering to a target web app.
        /// This setting is only necessary when RecoverConfiguration is enabled.
        /// </param>
        /// <param name="useDRSecondary"> If true, the snapshot is retrieved from DRSecondary endpoint. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.SnapshotRestoreRequest"/> instance for mocking. </returns>
        public static SnapshotRestoreRequest SnapshotRestoreRequest(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string snapshotTime = null, SnapshotRecoverySource recoverySource = null, bool? canOverwrite = null, bool? recoverConfiguration = null, bool? ignoreConflictingHostNames = null, bool? useDRSecondary = null, string kind = null)
        {
            return new SnapshotRestoreRequest(id, name, resourceType, systemData, snapshotTime, recoverySource, canOverwrite, recoverConfiguration, ignoreConflictingHostNames, useDRSecondary, kind);
        }

        /// <summary> Initializes a new instance of SnapshotRecoverySource. </summary>
        /// <param name="location"> Geographical location of the source web app, e.g. SouthEastAsia, SouthCentralUS. </param>
        /// <param name="id">
        /// ARM resource ID of the source app. 
        /// /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and 
        /// /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.
        /// </param>
        /// <returns> A new <see cref="Models.SnapshotRecoverySource"/> instance for mocking. </returns>
        public static SnapshotRecoverySource SnapshotRecoverySource(AzureLocation? location = null, ResourceIdentifier id = null)
        {
            return new SnapshotRecoverySource(location, id);
        }

        /// <summary> Initializes a new instance of SiteExtensionInfoData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="extensionId"> Site extension ID. </param>
        /// <param name="title"></param>
        /// <param name="extensionType"> Site extension type. </param>
        /// <param name="summary"> Summary description. </param>
        /// <param name="description"> Detailed description. </param>
        /// <param name="version"> Version information. </param>
        /// <param name="extensionUri"> Extension URL. </param>
        /// <param name="projectUri"> Project URL. </param>
        /// <param name="iconUri"> Icon URL. </param>
        /// <param name="licenseUri"> License URL. </param>
        /// <param name="feedUri"> Feed URL. </param>
        /// <param name="authors"> List of authors. </param>
        /// <param name="installerCommandLineParams"> Installer command line parameters. </param>
        /// <param name="publishedOn"> Published timestamp. </param>
        /// <param name="downloadCount"> Count of downloads. </param>
        /// <param name="localIsLatestVersion"> &lt;code&gt;true&lt;/code&gt; if the local version is the latest version; &lt;code&gt;false&lt;/code&gt; otherwise. </param>
        /// <param name="localPath"> Local path. </param>
        /// <param name="installedOn"> Installed timestamp. </param>
        /// <param name="provisioningState"> Provisioning state. </param>
        /// <param name="comment"> Site Extension comment. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.SiteExtensionInfoData"/> instance for mocking. </returns>
        public static SiteExtensionInfoData SiteExtensionInfoData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string extensionId = null, string title = null, SiteExtensionType? extensionType = null, string summary = null, string description = null, string version = null, Uri extensionUri = null, Uri projectUri = null, Uri iconUri = null, Uri licenseUri = null, Uri feedUri = null, IEnumerable<string> authors = null, string installerCommandLineParams = null, DateTimeOffset? publishedOn = null, int? downloadCount = null, bool? localIsLatestVersion = null, string localPath = null, DateTimeOffset? installedOn = null, string provisioningState = null, string comment = null, string kind = null)
        {
            authors ??= new List<string>();

            return new SiteExtensionInfoData(id, name, resourceType, systemData, extensionId, title, extensionType, summary, description, version, extensionUri, projectUri, iconUri, licenseUri, feedUri, authors?.ToList(), installerCommandLineParams, publishedOn, downloadCount, localIsLatestVersion, localPath, installedOn, provisioningState, comment, kind);
        }

        /// <summary> Initializes a new instance of SlotDifference. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="level"> Level of the difference: Information, Warning or Error. </param>
        /// <param name="settingType"> The type of the setting: General, AppSetting or ConnectionString. </param>
        /// <param name="diffRule"> Rule that describes how to process the setting difference during a slot swap. </param>
        /// <param name="settingName"> Name of the setting. </param>
        /// <param name="valueInCurrentSlot"> Value of the setting in the current slot. </param>
        /// <param name="valueInTargetSlot"> Value of the setting in the target slot. </param>
        /// <param name="description"> Description of the setting difference. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="Models.SlotDifference"/> instance for mocking. </returns>
        public static SlotDifference SlotDifference(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string level = null, string settingType = null, string diffRule = null, string settingName = null, string valueInCurrentSlot = null, string valueInTargetSlot = null, string description = null, string kind = null)
        {
            return new SlotDifference(id, name, resourceType, systemData, level, settingType, diffRule, settingName, valueInCurrentSlot, valueInTargetSlot, description, kind);
        }

        /// <summary> Initializes a new instance of SiteSourceControlData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="repoUri"> Repository or source control URL. </param>
        /// <param name="branch"> Name of branch to use for deployment. </param>
        /// <param name="isManualIntegration"> &lt;code&gt;true&lt;/code&gt; to limit to manual integration; &lt;code&gt;false&lt;/code&gt; to enable continuous integration (which configures webhooks into online repos like GitHub). </param>
        /// <param name="isGitHubAction"> &lt;code&gt;true&lt;/code&gt; if this is deployed via GitHub action. </param>
        /// <param name="isDeploymentRollbackEnabled"> &lt;code&gt;true&lt;/code&gt; to enable deployment rollback; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isMercurial"> &lt;code&gt;true&lt;/code&gt; for a Mercurial repository; &lt;code&gt;false&lt;/code&gt; for a Git repository. </param>
        /// <param name="gitHubActionConfiguration"> If GitHub Action is selected, than the associated configuration. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.SiteSourceControlData"/> instance for mocking. </returns>
        public static SiteSourceControlData SiteSourceControlData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, Uri repoUri = null, string branch = null, bool? isManualIntegration = null, bool? isGitHubAction = null, bool? isDeploymentRollbackEnabled = null, bool? isMercurial = null, GitHubActionConfiguration gitHubActionConfiguration = null, string kind = null)
        {
            return new SiteSourceControlData(id, name, resourceType, systemData, repoUri, branch, isManualIntegration, isGitHubAction, isDeploymentRollbackEnabled, isMercurial, gitHubActionConfiguration, kind);
        }

        /// <summary> Initializes a new instance of GitHubActionConfiguration. </summary>
        /// <param name="codeConfiguration"> GitHub Action code configuration. </param>
        /// <param name="containerConfiguration"> GitHub Action container configuration. </param>
        /// <param name="isLinux"> This will help determine the workflow configuration to select. </param>
        /// <param name="generateWorkflowFile"> Workflow option to determine whether the workflow file should be generated and written to the repository. </param>
        /// <returns> A new <see cref="Models.GitHubActionConfiguration"/> instance for mocking. </returns>
        public static GitHubActionConfiguration GitHubActionConfiguration(GitHubActionCodeConfiguration codeConfiguration = null, GitHubActionContainerConfiguration containerConfiguration = null, bool? isLinux = null, bool? generateWorkflowFile = null)
        {
            return new GitHubActionConfiguration(codeConfiguration, containerConfiguration, isLinux, generateWorkflowFile);
        }

        /// <summary> Initializes a new instance of GitHubActionCodeConfiguration. </summary>
        /// <param name="runtimeStack"> Runtime stack is used to determine the workflow file content for code base apps. </param>
        /// <param name="runtimeVersion"> Runtime version is used to determine what build version to set in the workflow file. </param>
        /// <returns> A new <see cref="Models.GitHubActionCodeConfiguration"/> instance for mocking. </returns>
        public static GitHubActionCodeConfiguration GitHubActionCodeConfiguration(string runtimeStack = null, string runtimeVersion = null)
        {
            return new GitHubActionCodeConfiguration(runtimeStack, runtimeVersion);
        }

        /// <summary> Initializes a new instance of GitHubActionContainerConfiguration. </summary>
        /// <param name="serverUri"> The server URL for the container registry where the build will be hosted. </param>
        /// <param name="imageName"> The image name for the build. </param>
        /// <param name="username"> The username used to upload the image to the container registry. </param>
        /// <param name="password"> The password used to upload the image to the container registry. </param>
        /// <returns> A new <see cref="Models.GitHubActionContainerConfiguration"/> instance for mocking. </returns>
        public static GitHubActionContainerConfiguration GitHubActionContainerConfiguration(Uri serverUri = null, string imageName = null, string username = null, string password = null)
        {
            return new GitHubActionContainerConfiguration(serverUri, imageName, username, password);
        }

        /// <summary> Initializes a new instance of TriggeredWebJobData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="latestRun"> Latest job run information. </param>
        /// <param name="historyUri"> History URL. </param>
        /// <param name="schedulerLogsUri"> Scheduler Logs URL. </param>
        /// <param name="runCommand"> Run command. </param>
        /// <param name="uri"> Job URL. </param>
        /// <param name="extraInfoUri"> Extra Info URL. </param>
        /// <param name="webJobType"> Job type. </param>
        /// <param name="error"> Error information. </param>
        /// <param name="isUsingSdk"> Using SDK?. </param>
        /// <param name="settings"> Job settings. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.TriggeredWebJobData"/> instance for mocking. </returns>
        public static TriggeredWebJobData TriggeredWebJobData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, TriggeredJobRun latestRun = null, Uri historyUri = null, Uri schedulerLogsUri = null, string runCommand = null, Uri uri = null, Uri extraInfoUri = null, WebJobType? webJobType = null, string error = null, bool? isUsingSdk = null, IDictionary<string, BinaryData> settings = null, string kind = null)
        {
            settings ??= new Dictionary<string, BinaryData>();

            return new TriggeredWebJobData(id, name, resourceType, systemData, latestRun, historyUri, schedulerLogsUri, runCommand, uri, extraInfoUri, webJobType, error, isUsingSdk, settings, kind);
        }

        /// <summary> Initializes a new instance of TriggeredJobRun. </summary>
        /// <param name="webJobId"> Job ID. </param>
        /// <param name="webJobName"> Job name. </param>
        /// <param name="status"> Job status. </param>
        /// <param name="startOn"> Start time. </param>
        /// <param name="endOn"> End time. </param>
        /// <param name="duration"> Job duration. </param>
        /// <param name="outputUri"> Output URL. </param>
        /// <param name="errorUri"> Error URL. </param>
        /// <param name="uri"> Job URL. </param>
        /// <param name="jobName"> Job name. </param>
        /// <param name="trigger"> Job trigger. </param>
        /// <returns> A new <see cref="Models.TriggeredJobRun"/> instance for mocking. </returns>
        public static TriggeredJobRun TriggeredJobRun(string webJobId = null, string webJobName = null, TriggeredWebJobStatus? status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, TimeSpan? duration = null, Uri outputUri = null, Uri errorUri = null, Uri uri = null, string jobName = null, string trigger = null)
        {
            return new TriggeredJobRun(webJobId, webJobName, status, startOn, endOn, duration, outputUri, errorUri, uri, jobName, trigger);
        }

        /// <summary> Initializes a new instance of TriggeredJobHistoryData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="runs"> List of triggered web job runs. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.TriggeredJobHistoryData"/> instance for mocking. </returns>
        public static TriggeredJobHistoryData TriggeredJobHistoryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<TriggeredJobRun> runs = null, string kind = null)
        {
            runs ??= new List<TriggeredJobRun>();

            return new TriggeredJobHistoryData(id, name, resourceType, systemData, runs?.ToList(), kind);
        }

        /// <summary> Initializes a new instance of WebJobData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="runCommand"> Run command. </param>
        /// <param name="uri"> Job URL. </param>
        /// <param name="extraInfoUri"> Extra Info URL. </param>
        /// <param name="webJobType"> Job type. </param>
        /// <param name="error"> Error information. </param>
        /// <param name="isUsingSdk"> Using SDK?. </param>
        /// <param name="settings"> Job settings. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <returns> A new <see cref="AppService.WebJobData"/> instance for mocking. </returns>
        public static WebJobData WebJobData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string runCommand = null, Uri uri = null, Uri extraInfoUri = null, WebJobType? webJobType = null, string error = null, bool? isUsingSdk = null, IDictionary<string, BinaryData> settings = null, string kind = null)
        {
            settings ??= new Dictionary<string, BinaryData>();

            return new WebJobData(id, name, resourceType, systemData, runCommand, uri, extraInfoUri, webJobType, error, isUsingSdk, settings, kind);
        }
    }
}
