// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Address information for domain registration. </summary>
    public partial class RegistrationAddressInfo
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RegistrationAddressInfo"/>. </summary>
        /// <param name="address1"> First line of an Address. </param>
        /// <param name="city"> The city for the address. </param>
        /// <param name="country"> The country for the address. </param>
        /// <param name="postalCode"> The postal code for the address. </param>
        /// <param name="state"> The state or province for the address. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="address1"/>, <paramref name="city"/>, <paramref name="country"/>, <paramref name="postalCode"/> or <paramref name="state"/> is null. </exception>
        public RegistrationAddressInfo(string address1, string city, string country, string postalCode, string state)
        {
            Argument.AssertNotNull(address1, nameof(address1));
            Argument.AssertNotNull(city, nameof(city));
            Argument.AssertNotNull(country, nameof(country));
            Argument.AssertNotNull(postalCode, nameof(postalCode));
            Argument.AssertNotNull(state, nameof(state));

            Address1 = address1;
            City = city;
            Country = country;
            PostalCode = postalCode;
            State = state;
        }

        /// <summary> Initializes a new instance of <see cref="RegistrationAddressInfo"/>. </summary>
        /// <param name="address1"> First line of an Address. </param>
        /// <param name="address2"> The second line of the Address. Optional. </param>
        /// <param name="city"> The city for the address. </param>
        /// <param name="country"> The country for the address. </param>
        /// <param name="postalCode"> The postal code for the address. </param>
        /// <param name="state"> The state or province for the address. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RegistrationAddressInfo(string address1, string address2, string city, string country, string postalCode, string state, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Address1 = address1;
            Address2 = address2;
            City = city;
            Country = country;
            PostalCode = postalCode;
            State = state;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RegistrationAddressInfo"/> for deserialization. </summary>
        internal RegistrationAddressInfo()
        {
        }

        /// <summary> First line of an Address. </summary>
        public string Address1 { get; set; }
        /// <summary> The second line of the Address. Optional. </summary>
        public string Address2 { get; set; }
        /// <summary> The city for the address. </summary>
        public string City { get; set; }
        /// <summary> The country for the address. </summary>
        public string Country { get; set; }
        /// <summary> The postal code for the address. </summary>
        public string PostalCode { get; set; }
        /// <summary> The state or province for the address. </summary>
        public string State { get; set; }
    }
}
