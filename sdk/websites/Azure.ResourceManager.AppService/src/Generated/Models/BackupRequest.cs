// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// Description of a backup which will be performed.
    /// Serialized Name: BackupRequest
    /// </summary>
    public partial class BackupRequest : ResourceData
    {
        /// <summary> Initializes a new instance of BackupRequest. </summary>
        public BackupRequest()
        {
            Databases = new ChangeTrackingList<DatabaseBackupSetting>();
        }

        /// <summary> Initializes a new instance of BackupRequest. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="backupName">
        /// Name of the backup.
        /// Serialized Name: BackupRequest.properties.backupName
        /// </param>
        /// <param name="enabled">
        /// True if the backup schedule is enabled (must be included in that case), false if the backup schedule should be disabled.
        /// Serialized Name: BackupRequest.properties.enabled
        /// </param>
        /// <param name="isEnabled">
        /// SAS URL to the container.
        /// Serialized Name: BackupRequest.properties.storageAccountUrl
        /// </param>
        /// <param name="backupSchedule">
        /// Schedule for the backup if it is executed periodically.
        /// Serialized Name: BackupRequest.properties.backupSchedule
        /// </param>
        /// <param name="databases">
        /// Databases included in the backup.
        /// Serialized Name: BackupRequest.properties.databases
        /// </param>
        /// <param name="kind">
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </param>
        internal BackupRequest(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string backupName, bool? enabled, string isEnabled, BackupSchedule backupSchedule, IList<DatabaseBackupSetting> databases, string kind) : base(id, name, resourceType, systemData)
        {
            BackupName = backupName;
            Enabled = enabled;
            IsEnabled = isEnabled;
            BackupSchedule = backupSchedule;
            Databases = databases;
            Kind = kind;
        }

        /// <summary>
        /// Name of the backup.
        /// Serialized Name: BackupRequest.properties.backupName
        /// </summary>
        public string BackupName { get; set; }
        /// <summary>
        /// True if the backup schedule is enabled (must be included in that case), false if the backup schedule should be disabled.
        /// Serialized Name: BackupRequest.properties.enabled
        /// </summary>
        public bool? Enabled { get; set; }
        /// <summary>
        /// SAS URL to the container.
        /// Serialized Name: BackupRequest.properties.storageAccountUrl
        /// </summary>
        public string IsEnabled { get; set; }
        /// <summary>
        /// Schedule for the backup if it is executed periodically.
        /// Serialized Name: BackupRequest.properties.backupSchedule
        /// </summary>
        public BackupSchedule BackupSchedule { get; set; }
        /// <summary>
        /// Databases included in the backup.
        /// Serialized Name: BackupRequest.properties.databases
        /// </summary>
        public IList<DatabaseBackupSetting> Databases { get; }
        /// <summary>
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </summary>
        public string Kind { get; set; }
    }
}
