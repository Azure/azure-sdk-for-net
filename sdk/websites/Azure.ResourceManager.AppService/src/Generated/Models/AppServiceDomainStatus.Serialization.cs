// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class AppServiceDomainStatusExtensions
    {
        public static string ToSerialString(this AppServiceDomainStatus value) => value switch
        {
            AppServiceDomainStatus.Unknown => "Unknown",
            AppServiceDomainStatus.Active => "Active",
            AppServiceDomainStatus.Awaiting => "Awaiting",
            AppServiceDomainStatus.Cancelled => "Cancelled",
            AppServiceDomainStatus.Confiscated => "Confiscated",
            AppServiceDomainStatus.Disabled => "Disabled",
            AppServiceDomainStatus.Excluded => "Excluded",
            AppServiceDomainStatus.Expired => "Expired",
            AppServiceDomainStatus.Failed => "Failed",
            AppServiceDomainStatus.Held => "Held",
            AppServiceDomainStatus.Locked => "Locked",
            AppServiceDomainStatus.Parked => "Parked",
            AppServiceDomainStatus.Pending => "Pending",
            AppServiceDomainStatus.Reserved => "Reserved",
            AppServiceDomainStatus.Reverted => "Reverted",
            AppServiceDomainStatus.Suspended => "Suspended",
            AppServiceDomainStatus.Transferred => "Transferred",
            AppServiceDomainStatus.Unlocked => "Unlocked",
            AppServiceDomainStatus.Unparked => "Unparked",
            AppServiceDomainStatus.Updated => "Updated",
            AppServiceDomainStatus.JsonConverterFailed => "JsonConverterFailed",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown AppServiceDomainStatus value.")
        };

        public static AppServiceDomainStatus ToAppServiceDomainStatus(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Unknown")) return AppServiceDomainStatus.Unknown;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Active")) return AppServiceDomainStatus.Active;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Awaiting")) return AppServiceDomainStatus.Awaiting;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Cancelled")) return AppServiceDomainStatus.Cancelled;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Confiscated")) return AppServiceDomainStatus.Confiscated;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Disabled")) return AppServiceDomainStatus.Disabled;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Excluded")) return AppServiceDomainStatus.Excluded;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Expired")) return AppServiceDomainStatus.Expired;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Failed")) return AppServiceDomainStatus.Failed;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Held")) return AppServiceDomainStatus.Held;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Locked")) return AppServiceDomainStatus.Locked;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Parked")) return AppServiceDomainStatus.Parked;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Pending")) return AppServiceDomainStatus.Pending;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Reserved")) return AppServiceDomainStatus.Reserved;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Reverted")) return AppServiceDomainStatus.Reverted;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Suspended")) return AppServiceDomainStatus.Suspended;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Transferred")) return AppServiceDomainStatus.Transferred;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Unlocked")) return AppServiceDomainStatus.Unlocked;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Unparked")) return AppServiceDomainStatus.Unparked;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Updated")) return AppServiceDomainStatus.Updated;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "JsonConverterFailed")) return AppServiceDomainStatus.JsonConverterFailed;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown AppServiceDomainStatus value.");
        }
    }
}
