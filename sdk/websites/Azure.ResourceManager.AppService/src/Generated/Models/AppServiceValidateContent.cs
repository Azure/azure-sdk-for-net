// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Resource validation request content. </summary>
    public partial class AppServiceValidateContent
    {
        /// <summary> Initializes a new instance of <see cref="AppServiceValidateContent"/>. </summary>
        /// <param name="name"> Resource name to verify. </param>
        /// <param name="validateResourceType"> Resource type used for verification. </param>
        /// <param name="location"> Expected location of the resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public AppServiceValidateContent(string name, ValidateResourceType validateResourceType, AzureLocation location)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            ValidateResourceType = validateResourceType;
            Location = location;
        }

        /// <summary> Initializes a new instance of <see cref="AppServiceValidateContent"/>. </summary>
        /// <param name="name"> Resource name to verify. </param>
        /// <param name="validateResourceType"> Resource type used for verification. </param>
        /// <param name="location"> Expected location of the resource. </param>
        /// <param name="serverFarmId"> ARM resource ID of an App Service plan that would host the app. </param>
        /// <param name="skuName"> Name of the target SKU for the App Service plan. </param>
        /// <param name="needLinuxWorkers"> &lt;code&gt;true&lt;/code&gt; if App Service plan is for Linux workers; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="isSpot"> &lt;code&gt;true&lt;/code&gt; if App Service plan is for Spot instances; otherwise, &lt;code&gt;false&lt;/code&gt;. </param>
        /// <param name="capacity"> Target capacity of the App Service plan (number of VMs). </param>
        /// <param name="hostingEnvironment"> Name of App Service Environment where app or App Service plan should be created. </param>
        /// <param name="isXenon"> &lt;code&gt;true&lt;/code&gt; if App Service plan is running as a windows container. </param>
        /// <param name="containerRegistryBaseUri"> Base URL of the container registry. </param>
        /// <param name="containerRegistryUsername"> Username for to access the container registry. </param>
        /// <param name="containerRegistryPassword"> Password for to access the container registry. </param>
        /// <param name="containerImageRepository"> Repository name (image name). </param>
        /// <param name="containerImageTag"> Image tag. </param>
        /// <param name="containerImagePlatform"> Platform (windows or linux). </param>
        /// <param name="appServiceEnvironment"> App Service Environment Properties. </param>
        internal AppServiceValidateContent(string name, ValidateResourceType validateResourceType, AzureLocation location, ResourceIdentifier serverFarmId, string skuName, bool? needLinuxWorkers, bool? isSpot, int? capacity, string hostingEnvironment, bool? isXenon, Uri containerRegistryBaseUri, string containerRegistryUsername, string containerRegistryPassword, string containerImageRepository, string containerImageTag, string containerImagePlatform, AppServiceEnvironmentProperties appServiceEnvironment)
        {
            Name = name;
            ValidateResourceType = validateResourceType;
            Location = location;
            ServerFarmId = serverFarmId;
            SkuName = skuName;
            NeedLinuxWorkers = needLinuxWorkers;
            IsSpot = isSpot;
            Capacity = capacity;
            HostingEnvironment = hostingEnvironment;
            IsXenon = isXenon;
            ContainerRegistryBaseUri = containerRegistryBaseUri;
            ContainerRegistryUsername = containerRegistryUsername;
            ContainerRegistryPassword = containerRegistryPassword;
            ContainerImageRepository = containerImageRepository;
            ContainerImageTag = containerImageTag;
            ContainerImagePlatform = containerImagePlatform;
            AppServiceEnvironment = appServiceEnvironment;
        }

        /// <summary> Resource name to verify. </summary>
        public string Name { get; }
        /// <summary> Resource type used for verification. </summary>
        public ValidateResourceType ValidateResourceType { get; }
        /// <summary> Expected location of the resource. </summary>
        public AzureLocation Location { get; }
        /// <summary> ARM resource ID of an App Service plan that would host the app. </summary>
        public ResourceIdentifier ServerFarmId { get; set; }
        /// <summary> Name of the target SKU for the App Service plan. </summary>
        public string SkuName { get; set; }
        /// <summary> &lt;code&gt;true&lt;/code&gt; if App Service plan is for Linux workers; otherwise, &lt;code&gt;false&lt;/code&gt;. </summary>
        public bool? NeedLinuxWorkers { get; set; }
        /// <summary> &lt;code&gt;true&lt;/code&gt; if App Service plan is for Spot instances; otherwise, &lt;code&gt;false&lt;/code&gt;. </summary>
        public bool? IsSpot { get; set; }
        /// <summary> Target capacity of the App Service plan (number of VMs). </summary>
        public int? Capacity { get; set; }
        /// <summary> Name of App Service Environment where app or App Service plan should be created. </summary>
        public string HostingEnvironment { get; set; }
        /// <summary> &lt;code&gt;true&lt;/code&gt; if App Service plan is running as a windows container. </summary>
        public bool? IsXenon { get; set; }
        /// <summary> Base URL of the container registry. </summary>
        public Uri ContainerRegistryBaseUri { get; set; }
        /// <summary> Username for to access the container registry. </summary>
        public string ContainerRegistryUsername { get; set; }
        /// <summary> Password for to access the container registry. </summary>
        public string ContainerRegistryPassword { get; set; }
        /// <summary> Repository name (image name). </summary>
        public string ContainerImageRepository { get; set; }
        /// <summary> Image tag. </summary>
        public string ContainerImageTag { get; set; }
        /// <summary> Platform (windows or linux). </summary>
        public string ContainerImagePlatform { get; set; }
        /// <summary> App Service Environment Properties. </summary>
        public AppServiceEnvironmentProperties AppServiceEnvironment { get; set; }
    }
}
