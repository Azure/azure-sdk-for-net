// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// ARM resource for a app service environment.
    /// Serialized Name: AppServiceEnvironmentPatchResource
    /// </summary>
    public partial class AppServiceEnvironmentPatch : ResourceData
    {
        /// <summary> Initializes a new instance of AppServiceEnvironmentPatch. </summary>
        public AppServiceEnvironmentPatch()
        {
            ClusterSettings = new ChangeTrackingList<NameValuePair>();
            UserWhitelistedIPRanges = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of AppServiceEnvironmentPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState">
        /// Provisioning state of the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.provisioningState
        /// </param>
        /// <param name="status">
        /// Current status of the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.status
        /// </param>
        /// <param name="virtualNetwork">
        /// Description of the Virtual Network.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.virtualNetwork
        /// </param>
        /// <param name="internalLoadBalancingMode">
        /// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.internalLoadBalancingMode
        /// </param>
        /// <param name="multiSize">
        /// Front-end VM size, e.g. &quot;Medium&quot;, &quot;Large&quot;.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.multiSize
        /// </param>
        /// <param name="multiRoleCount">
        /// Number of front-end instances.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.multiRoleCount
        /// </param>
        /// <param name="ipsslAddressCount">
        /// Number of IP SSL addresses reserved for the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.ipsslAddressCount
        /// </param>
        /// <param name="dnsSuffix">
        /// DNS suffix of the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.dnsSuffix
        /// </param>
        /// <param name="maximumNumberOfMachines">
        /// Maximum number of VMs in the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.maximumNumberOfMachines
        /// </param>
        /// <param name="frontEndScaleFactor">
        /// Scale factor for front-ends.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.frontEndScaleFactor
        /// </param>
        /// <param name="suspended">
        /// &lt;code&gt;true&lt;/code&gt; if the App Service Environment is suspended; otherwise, &lt;code&gt;false&lt;/code&gt;. The environment can be suspended, e.g. when the management endpoint is no longer available
        ///  (most likely because NSG blocked the incoming traffic).
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.suspended
        /// </param>
        /// <param name="clusterSettings">
        /// Custom settings for changing the behavior of the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.clusterSettings
        /// </param>
        /// <param name="userWhitelistedIPRanges">
        /// User added ip ranges to whitelist on ASE db
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.userWhitelistedIpRanges
        /// </param>
        /// <param name="hasLinuxWorkers">
        /// Flag that displays whether an ASE has linux workers or not
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.hasLinuxWorkers
        /// </param>
        /// <param name="dedicatedHostCount">
        /// Dedicated Host Count
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.dedicatedHostCount
        /// </param>
        /// <param name="zoneRedundant">
        /// Whether or not this App Service Environment is zone-redundant.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.zoneRedundant
        /// </param>
        /// <param name="kind">
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </param>
        internal AppServiceEnvironmentPatch(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, ProvisioningState? provisioningState, HostingEnvironmentStatus? status, VirtualNetworkProfile virtualNetwork, LoadBalancingMode? internalLoadBalancingMode, string multiSize, int? multiRoleCount, int? ipsslAddressCount, string dnsSuffix, int? maximumNumberOfMachines, int? frontEndScaleFactor, bool? suspended, IList<NameValuePair> clusterSettings, IList<string> userWhitelistedIPRanges, bool? hasLinuxWorkers, int? dedicatedHostCount, bool? zoneRedundant, string kind) : base(id, name, resourceType, systemData)
        {
            ProvisioningState = provisioningState;
            Status = status;
            VirtualNetwork = virtualNetwork;
            InternalLoadBalancingMode = internalLoadBalancingMode;
            MultiSize = multiSize;
            MultiRoleCount = multiRoleCount;
            IpsslAddressCount = ipsslAddressCount;
            DnsSuffix = dnsSuffix;
            MaximumNumberOfMachines = maximumNumberOfMachines;
            FrontEndScaleFactor = frontEndScaleFactor;
            Suspended = suspended;
            ClusterSettings = clusterSettings;
            UserWhitelistedIPRanges = userWhitelistedIPRanges;
            HasLinuxWorkers = hasLinuxWorkers;
            DedicatedHostCount = dedicatedHostCount;
            ZoneRedundant = zoneRedundant;
            Kind = kind;
        }

        /// <summary>
        /// Provisioning state of the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.provisioningState
        /// </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// Current status of the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.status
        /// </summary>
        public HostingEnvironmentStatus? Status { get; }
        /// <summary>
        /// Description of the Virtual Network.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.virtualNetwork
        /// </summary>
        public VirtualNetworkProfile VirtualNetwork { get; set; }
        /// <summary>
        /// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.internalLoadBalancingMode
        /// </summary>
        public LoadBalancingMode? InternalLoadBalancingMode { get; set; }
        /// <summary>
        /// Front-end VM size, e.g. &quot;Medium&quot;, &quot;Large&quot;.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.multiSize
        /// </summary>
        public string MultiSize { get; set; }
        /// <summary>
        /// Number of front-end instances.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.multiRoleCount
        /// </summary>
        public int? MultiRoleCount { get; }
        /// <summary>
        /// Number of IP SSL addresses reserved for the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.ipsslAddressCount
        /// </summary>
        public int? IpsslAddressCount { get; set; }
        /// <summary>
        /// DNS suffix of the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.dnsSuffix
        /// </summary>
        public string DnsSuffix { get; set; }
        /// <summary>
        /// Maximum number of VMs in the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.maximumNumberOfMachines
        /// </summary>
        public int? MaximumNumberOfMachines { get; }
        /// <summary>
        /// Scale factor for front-ends.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.frontEndScaleFactor
        /// </summary>
        public int? FrontEndScaleFactor { get; set; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the App Service Environment is suspended; otherwise, &lt;code&gt;false&lt;/code&gt;. The environment can be suspended, e.g. when the management endpoint is no longer available
        ///  (most likely because NSG blocked the incoming traffic).
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.suspended
        /// </summary>
        public bool? Suspended { get; }
        /// <summary>
        /// Custom settings for changing the behavior of the App Service Environment.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.clusterSettings
        /// </summary>
        public IList<NameValuePair> ClusterSettings { get; }
        /// <summary>
        /// User added ip ranges to whitelist on ASE db
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.userWhitelistedIpRanges
        /// </summary>
        public IList<string> UserWhitelistedIPRanges { get; }
        /// <summary>
        /// Flag that displays whether an ASE has linux workers or not
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.hasLinuxWorkers
        /// </summary>
        public bool? HasLinuxWorkers { get; }
        /// <summary>
        /// Dedicated Host Count
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.dedicatedHostCount
        /// </summary>
        public int? DedicatedHostCount { get; set; }
        /// <summary>
        /// Whether or not this App Service Environment is zone-redundant.
        /// Serialized Name: AppServiceEnvironmentPatchResource.properties.zoneRedundant
        /// </summary>
        public bool? ZoneRedundant { get; set; }
        /// <summary>
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </summary>
        public string Kind { get; set; }
    }
}
