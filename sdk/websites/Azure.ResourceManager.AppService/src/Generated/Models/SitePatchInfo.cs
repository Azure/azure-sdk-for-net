// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// ARM resource for a site.
    /// Serialized Name: SitePatchResource
    /// </summary>
    public partial class SitePatchInfo : ResourceData
    {
        /// <summary> Initializes a new instance of SitePatchInfo. </summary>
        public SitePatchInfo()
        {
            HostNames = new ChangeTrackingList<string>();
            EnabledHostNames = new ChangeTrackingList<string>();
            HostNameSslStates = new ChangeTrackingList<HostNameSslState>();
            TrafficManagerHostNames = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of SitePatchInfo. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="identity">
        /// Managed service identity.
        /// Serialized Name: SitePatchResource.identity
        /// </param>
        /// <param name="state">
        /// Current state of the app.
        /// Serialized Name: SitePatchResource.properties.state
        /// </param>
        /// <param name="hostNames">
        /// Hostnames associated with the app.
        /// Serialized Name: SitePatchResource.properties.hostNames
        /// </param>
        /// <param name="repositorySiteName">
        /// Name of the repository site.
        /// Serialized Name: SitePatchResource.properties.repositorySiteName
        /// </param>
        /// <param name="usageState">
        /// State indicating whether the app has exceeded its quota usage. Read-only.
        /// Serialized Name: SitePatchResource.properties.usageState
        /// </param>
        /// <param name="isEnabled">
        /// &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the app offline).
        /// Serialized Name: SitePatchResource.properties.enabled
        /// </param>
        /// <param name="enabledHostNames">
        /// Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
        /// the app is not served on those hostnames.
        /// Serialized Name: SitePatchResource.properties.enabledHostNames
        /// </param>
        /// <param name="availabilityState">
        /// Management information availability state for the app.
        /// Serialized Name: SitePatchResource.properties.availabilityState
        /// </param>
        /// <param name="hostNameSslStates">
        /// Hostname SSL states are used to manage the SSL bindings for app&apos;s hostnames.
        /// Serialized Name: SitePatchResource.properties.hostNameSslStates
        /// </param>
        /// <param name="serverFarmId">
        /// Resource ID of the associated App Service plan, formatted as: &quot;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&quot;.
        /// Serialized Name: SitePatchResource.properties.serverFarmId
        /// </param>
        /// <param name="reserved">
        /// &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: SitePatchResource.properties.reserved
        /// </param>
        /// <param name="isXenon">
        /// Obsolete: Hyper-V sandbox.
        /// Serialized Name: SitePatchResource.properties.isXenon
        /// </param>
        /// <param name="isHyperV">
        /// Hyper-V sandbox.
        /// Serialized Name: SitePatchResource.properties.hyperV
        /// </param>
        /// <param name="lastModifiedTimeOn">
        /// Last time the app was modified, in UTC. Read-only.
        /// Serialized Name: SitePatchResource.properties.lastModifiedTimeUtc
        /// </param>
        /// <param name="siteConfig">
        /// Configuration of the app.
        /// Serialized Name: SitePatchResource.properties.siteConfig
        /// </param>
        /// <param name="trafficManagerHostNames">
        /// Azure Traffic Manager hostnames associated with the app. Read-only.
        /// Serialized Name: SitePatchResource.properties.trafficManagerHostNames
        /// </param>
        /// <param name="isScmSiteAlsoStopped">
        /// &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: SitePatchResource.properties.scmSiteAlsoStopped
        /// </param>
        /// <param name="targetSwapSlot">
        /// Specifies which deployment slot this app will swap into. Read-only.
        /// Serialized Name: SitePatchResource.properties.targetSwapSlot
        /// </param>
        /// <param name="hostingEnvironmentProfile">
        /// App Service Environment to use for the app.
        /// Serialized Name: SitePatchResource.properties.hostingEnvironmentProfile
        /// </param>
        /// <param name="isClientAffinityEnabled">
        /// &lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;.
        /// Serialized Name: SitePatchResource.properties.clientAffinityEnabled
        /// </param>
        /// <param name="isClientCertEnabled">
        /// &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: SitePatchResource.properties.clientCertEnabled
        /// </param>
        /// <param name="clientCertMode">
        /// This composes with ClientCertEnabled setting.
        /// - ClientCertEnabled: false means ClientCert is ignored.
        /// - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
        /// - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
        /// Serialized Name: SitePatchResource.properties.clientCertMode
        /// </param>
        /// <param name="clientCertExclusionPaths">
        /// client certificate authentication comma-separated exclusion paths
        /// Serialized Name: SitePatchResource.properties.clientCertExclusionPaths
        /// </param>
        /// <param name="isHostNamesDisabled">
        /// &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        ///  If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management process.
        /// Serialized Name: SitePatchResource.properties.hostNamesDisabled
        /// </param>
        /// <param name="customDomainVerificationId">
        /// Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification.
        /// Serialized Name: SitePatchResource.properties.customDomainVerificationId
        /// </param>
        /// <param name="outboundIPAddresses">
        /// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
        /// Serialized Name: SitePatchResource.properties.outboundIpAddresses
        /// </param>
        /// <param name="possibleOutboundIPAddresses">
        /// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
        /// Serialized Name: SitePatchResource.properties.possibleOutboundIpAddresses
        /// </param>
        /// <param name="containerSize">
        /// Size of the function container.
        /// Serialized Name: SitePatchResource.properties.containerSize
        /// </param>
        /// <param name="dailyMemoryTimeQuota">
        /// Maximum allowed daily memory-time quota (applicable on dynamic apps only).
        /// Serialized Name: SitePatchResource.properties.dailyMemoryTimeQuota
        /// </param>
        /// <param name="suspendTillOn">
        /// App suspended till in case memory-time quota is exceeded.
        /// Serialized Name: SitePatchResource.properties.suspendedTill
        /// </param>
        /// <param name="maxNumberOfWorkers">
        /// Maximum number of workers.
        /// This only applies to Functions container.
        /// Serialized Name: SitePatchResource.properties.maxNumberOfWorkers
        /// </param>
        /// <param name="cloningInfo">
        /// If specified during app creation, the app is cloned from a source app.
        /// Serialized Name: SitePatchResource.properties.cloningInfo
        /// </param>
        /// <param name="resourceGroup">
        /// Name of the resource group the app belongs to. Read-only.
        /// Serialized Name: SitePatchResource.properties.resourceGroup
        /// </param>
        /// <param name="isDefaultContainer">
        /// &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: SitePatchResource.properties.isDefaultContainer
        /// </param>
        /// <param name="defaultHostName">
        /// Default hostname of the app. Read-only.
        /// Serialized Name: SitePatchResource.properties.defaultHostName
        /// </param>
        /// <param name="slotSwapStatus">
        /// Status of the last deployment slot swap operation.
        /// Serialized Name: SitePatchResource.properties.slotSwapStatus
        /// </param>
        /// <param name="isHttpOnly">
        /// HttpsOnly: configures a web site to accept only https requests. Issues redirect for
        /// http requests
        /// Serialized Name: SitePatchResource.properties.httpsOnly
        /// </param>
        /// <param name="redundancyMode">
        /// Site redundancy mode
        /// Serialized Name: SitePatchResource.properties.redundancyMode
        /// </param>
        /// <param name="inProgressOperationId">
        /// Specifies an operation id if this site has a pending operation.
        /// Serialized Name: SitePatchResource.properties.inProgressOperationId
        /// </param>
        /// <param name="isStorageAccountRequired">
        /// Checks if Customer provided storage account is required
        /// Serialized Name: SitePatchResource.properties.storageAccountRequired
        /// </param>
        /// <param name="keyVaultReferenceIdentity">
        /// Identity to use for Key Vault Reference authentication.
        /// Serialized Name: SitePatchResource.properties.keyVaultReferenceIdentity
        /// </param>
        /// <param name="virtualNetworkSubnetId">
        /// Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration.
        /// This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
        /// Serialized Name: SitePatchResource.properties.virtualNetworkSubnetId
        /// </param>
        /// <param name="kind">
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </param>
        internal SitePatchInfo(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, ManagedServiceIdentity identity, string state, IReadOnlyList<string> hostNames, string repositorySiteName, UsageState? usageState, bool? isEnabled, IReadOnlyList<string> enabledHostNames, SiteAvailabilityState? availabilityState, IList<HostNameSslState> hostNameSslStates, string serverFarmId, bool? reserved, bool? isXenon, bool? isHyperV, DateTimeOffset? lastModifiedTimeOn, SiteConfigProperties siteConfig, IReadOnlyList<string> trafficManagerHostNames, bool? isScmSiteAlsoStopped, string targetSwapSlot, HostingEnvironmentProfile hostingEnvironmentProfile, bool? isClientAffinityEnabled, bool? isClientCertEnabled, ClientCertMode? clientCertMode, string clientCertExclusionPaths, bool? isHostNamesDisabled, string customDomainVerificationId, string outboundIPAddresses, string possibleOutboundIPAddresses, int? containerSize, int? dailyMemoryTimeQuota, DateTimeOffset? suspendTillOn, int? maxNumberOfWorkers, CloningInfo cloningInfo, string resourceGroup, bool? isDefaultContainer, string defaultHostName, SlotSwapStatus slotSwapStatus, bool? isHttpOnly, RedundancyMode? redundancyMode, Guid? inProgressOperationId, bool? isStorageAccountRequired, string keyVaultReferenceIdentity, string virtualNetworkSubnetId, string kind) : base(id, name, resourceType, systemData)
        {
            Identity = identity;
            State = state;
            HostNames = hostNames;
            RepositorySiteName = repositorySiteName;
            UsageState = usageState;
            IsEnabled = isEnabled;
            EnabledHostNames = enabledHostNames;
            AvailabilityState = availabilityState;
            HostNameSslStates = hostNameSslStates;
            ServerFarmId = serverFarmId;
            Reserved = reserved;
            IsXenon = isXenon;
            IsHyperV = isHyperV;
            LastModifiedTimeOn = lastModifiedTimeOn;
            SiteConfig = siteConfig;
            TrafficManagerHostNames = trafficManagerHostNames;
            IsScmSiteAlsoStopped = isScmSiteAlsoStopped;
            TargetSwapSlot = targetSwapSlot;
            HostingEnvironmentProfile = hostingEnvironmentProfile;
            IsClientAffinityEnabled = isClientAffinityEnabled;
            IsClientCertEnabled = isClientCertEnabled;
            ClientCertMode = clientCertMode;
            ClientCertExclusionPaths = clientCertExclusionPaths;
            IsHostNamesDisabled = isHostNamesDisabled;
            CustomDomainVerificationId = customDomainVerificationId;
            OutboundIPAddresses = outboundIPAddresses;
            PossibleOutboundIPAddresses = possibleOutboundIPAddresses;
            ContainerSize = containerSize;
            DailyMemoryTimeQuota = dailyMemoryTimeQuota;
            SuspendTillOn = suspendTillOn;
            MaxNumberOfWorkers = maxNumberOfWorkers;
            CloningInfo = cloningInfo;
            ResourceGroup = resourceGroup;
            IsDefaultContainer = isDefaultContainer;
            DefaultHostName = defaultHostName;
            SlotSwapStatus = slotSwapStatus;
            IsHttpOnly = isHttpOnly;
            RedundancyMode = redundancyMode;
            InProgressOperationId = inProgressOperationId;
            IsStorageAccountRequired = isStorageAccountRequired;
            KeyVaultReferenceIdentity = keyVaultReferenceIdentity;
            VirtualNetworkSubnetId = virtualNetworkSubnetId;
            Kind = kind;
        }

        /// <summary>
        /// Managed service identity.
        /// Serialized Name: SitePatchResource.identity
        /// </summary>
        public ManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// Current state of the app.
        /// Serialized Name: SitePatchResource.properties.state
        /// </summary>
        public string State { get; }
        /// <summary>
        /// Hostnames associated with the app.
        /// Serialized Name: SitePatchResource.properties.hostNames
        /// </summary>
        public IReadOnlyList<string> HostNames { get; }
        /// <summary>
        /// Name of the repository site.
        /// Serialized Name: SitePatchResource.properties.repositorySiteName
        /// </summary>
        public string RepositorySiteName { get; }
        /// <summary>
        /// State indicating whether the app has exceeded its quota usage. Read-only.
        /// Serialized Name: SitePatchResource.properties.usageState
        /// </summary>
        public UsageState? UsageState { get; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the app offline).
        /// Serialized Name: SitePatchResource.properties.enabled
        /// </summary>
        public bool? IsEnabled { get; set; }
        /// <summary>
        /// Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
        /// the app is not served on those hostnames.
        /// Serialized Name: SitePatchResource.properties.enabledHostNames
        /// </summary>
        public IReadOnlyList<string> EnabledHostNames { get; }
        /// <summary>
        /// Management information availability state for the app.
        /// Serialized Name: SitePatchResource.properties.availabilityState
        /// </summary>
        public SiteAvailabilityState? AvailabilityState { get; }
        /// <summary>
        /// Hostname SSL states are used to manage the SSL bindings for app&apos;s hostnames.
        /// Serialized Name: SitePatchResource.properties.hostNameSslStates
        /// </summary>
        public IList<HostNameSslState> HostNameSslStates { get; }
        /// <summary>
        /// Resource ID of the associated App Service plan, formatted as: &quot;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&quot;.
        /// Serialized Name: SitePatchResource.properties.serverFarmId
        /// </summary>
        public string ServerFarmId { get; set; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: SitePatchResource.properties.reserved
        /// </summary>
        public bool? Reserved { get; set; }
        /// <summary>
        /// Obsolete: Hyper-V sandbox.
        /// Serialized Name: SitePatchResource.properties.isXenon
        /// </summary>
        public bool? IsXenon { get; set; }
        /// <summary>
        /// Hyper-V sandbox.
        /// Serialized Name: SitePatchResource.properties.hyperV
        /// </summary>
        public bool? IsHyperV { get; set; }
        /// <summary>
        /// Last time the app was modified, in UTC. Read-only.
        /// Serialized Name: SitePatchResource.properties.lastModifiedTimeUtc
        /// </summary>
        public DateTimeOffset? LastModifiedTimeOn { get; }
        /// <summary>
        /// Configuration of the app.
        /// Serialized Name: SitePatchResource.properties.siteConfig
        /// </summary>
        public SiteConfigProperties SiteConfig { get; set; }
        /// <summary>
        /// Azure Traffic Manager hostnames associated with the app. Read-only.
        /// Serialized Name: SitePatchResource.properties.trafficManagerHostNames
        /// </summary>
        public IReadOnlyList<string> TrafficManagerHostNames { get; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: SitePatchResource.properties.scmSiteAlsoStopped
        /// </summary>
        public bool? IsScmSiteAlsoStopped { get; set; }
        /// <summary>
        /// Specifies which deployment slot this app will swap into. Read-only.
        /// Serialized Name: SitePatchResource.properties.targetSwapSlot
        /// </summary>
        public string TargetSwapSlot { get; }
        /// <summary>
        /// App Service Environment to use for the app.
        /// Serialized Name: SitePatchResource.properties.hostingEnvironmentProfile
        /// </summary>
        public HostingEnvironmentProfile HostingEnvironmentProfile { get; set; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;.
        /// Serialized Name: SitePatchResource.properties.clientAffinityEnabled
        /// </summary>
        public bool? IsClientAffinityEnabled { get; set; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: SitePatchResource.properties.clientCertEnabled
        /// </summary>
        public bool? IsClientCertEnabled { get; set; }
        /// <summary>
        /// This composes with ClientCertEnabled setting.
        /// - ClientCertEnabled: false means ClientCert is ignored.
        /// - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
        /// - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
        /// Serialized Name: SitePatchResource.properties.clientCertMode
        /// </summary>
        public ClientCertMode? ClientCertMode { get; set; }
        /// <summary>
        /// client certificate authentication comma-separated exclusion paths
        /// Serialized Name: SitePatchResource.properties.clientCertExclusionPaths
        /// </summary>
        public string ClientCertExclusionPaths { get; set; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        ///  If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management process.
        /// Serialized Name: SitePatchResource.properties.hostNamesDisabled
        /// </summary>
        public bool? IsHostNamesDisabled { get; set; }
        /// <summary>
        /// Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification.
        /// Serialized Name: SitePatchResource.properties.customDomainVerificationId
        /// </summary>
        public string CustomDomainVerificationId { get; set; }
        /// <summary>
        /// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
        /// Serialized Name: SitePatchResource.properties.outboundIpAddresses
        /// </summary>
        public string OutboundIPAddresses { get; }
        /// <summary>
        /// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
        /// Serialized Name: SitePatchResource.properties.possibleOutboundIpAddresses
        /// </summary>
        public string PossibleOutboundIPAddresses { get; }
        /// <summary>
        /// Size of the function container.
        /// Serialized Name: SitePatchResource.properties.containerSize
        /// </summary>
        public int? ContainerSize { get; set; }
        /// <summary>
        /// Maximum allowed daily memory-time quota (applicable on dynamic apps only).
        /// Serialized Name: SitePatchResource.properties.dailyMemoryTimeQuota
        /// </summary>
        public int? DailyMemoryTimeQuota { get; set; }
        /// <summary>
        /// App suspended till in case memory-time quota is exceeded.
        /// Serialized Name: SitePatchResource.properties.suspendedTill
        /// </summary>
        public DateTimeOffset? SuspendTillOn { get; }
        /// <summary>
        /// Maximum number of workers.
        /// This only applies to Functions container.
        /// Serialized Name: SitePatchResource.properties.maxNumberOfWorkers
        /// </summary>
        public int? MaxNumberOfWorkers { get; }
        /// <summary>
        /// If specified during app creation, the app is cloned from a source app.
        /// Serialized Name: SitePatchResource.properties.cloningInfo
        /// </summary>
        public CloningInfo CloningInfo { get; set; }
        /// <summary>
        /// Name of the resource group the app belongs to. Read-only.
        /// Serialized Name: SitePatchResource.properties.resourceGroup
        /// </summary>
        public string ResourceGroup { get; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: SitePatchResource.properties.isDefaultContainer
        /// </summary>
        public bool? IsDefaultContainer { get; }
        /// <summary>
        /// Default hostname of the app. Read-only.
        /// Serialized Name: SitePatchResource.properties.defaultHostName
        /// </summary>
        public string DefaultHostName { get; }
        /// <summary>
        /// Status of the last deployment slot swap operation.
        /// Serialized Name: SitePatchResource.properties.slotSwapStatus
        /// </summary>
        public SlotSwapStatus SlotSwapStatus { get; }
        /// <summary>
        /// HttpsOnly: configures a web site to accept only https requests. Issues redirect for
        /// http requests
        /// Serialized Name: SitePatchResource.properties.httpsOnly
        /// </summary>
        public bool? IsHttpOnly { get; set; }
        /// <summary>
        /// Site redundancy mode
        /// Serialized Name: SitePatchResource.properties.redundancyMode
        /// </summary>
        public RedundancyMode? RedundancyMode { get; set; }
        /// <summary>
        /// Specifies an operation id if this site has a pending operation.
        /// Serialized Name: SitePatchResource.properties.inProgressOperationId
        /// </summary>
        public Guid? InProgressOperationId { get; }
        /// <summary>
        /// Checks if Customer provided storage account is required
        /// Serialized Name: SitePatchResource.properties.storageAccountRequired
        /// </summary>
        public bool? IsStorageAccountRequired { get; set; }
        /// <summary>
        /// Identity to use for Key Vault Reference authentication.
        /// Serialized Name: SitePatchResource.properties.keyVaultReferenceIdentity
        /// </summary>
        public string KeyVaultReferenceIdentity { get; set; }
        /// <summary>
        /// Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration.
        /// This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
        /// Serialized Name: SitePatchResource.properties.virtualNetworkSubnetId
        /// </summary>
        public string VirtualNetworkSubnetId { get; set; }
        /// <summary>
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </summary>
        public string Kind { get; set; }
    }
}
