// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class SiteLoadBalancingExtensions
    {
        public static string ToSerialString(this SiteLoadBalancing value) => value switch
        {
            SiteLoadBalancing.WeightedRoundRobin => "WeightedRoundRobin",
            SiteLoadBalancing.LeastRequests => "LeastRequests",
            SiteLoadBalancing.LeastResponseTime => "LeastResponseTime",
            SiteLoadBalancing.WeightedTotalTraffic => "WeightedTotalTraffic",
            SiteLoadBalancing.RequestHash => "RequestHash",
            SiteLoadBalancing.PerSiteRoundRobin => "PerSiteRoundRobin",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown SiteLoadBalancing value.")
        };

        public static SiteLoadBalancing ToSiteLoadBalancing(this string value)
        {
            if (string.Equals(value, "WeightedRoundRobin", StringComparison.InvariantCultureIgnoreCase)) return SiteLoadBalancing.WeightedRoundRobin;
            if (string.Equals(value, "LeastRequests", StringComparison.InvariantCultureIgnoreCase)) return SiteLoadBalancing.LeastRequests;
            if (string.Equals(value, "LeastResponseTime", StringComparison.InvariantCultureIgnoreCase)) return SiteLoadBalancing.LeastResponseTime;
            if (string.Equals(value, "WeightedTotalTraffic", StringComparison.InvariantCultureIgnoreCase)) return SiteLoadBalancing.WeightedTotalTraffic;
            if (string.Equals(value, "RequestHash", StringComparison.InvariantCultureIgnoreCase)) return SiteLoadBalancing.RequestHash;
            if (string.Equals(value, "PerSiteRoundRobin", StringComparison.InvariantCultureIgnoreCase)) return SiteLoadBalancing.PerSiteRoundRobin;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown SiteLoadBalancing value.");
        }
    }
}
