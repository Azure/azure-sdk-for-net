// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService
{
    public partial class SiteConfigData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(NumberOfWorkers))
            {
                if (NumberOfWorkers != null)
                {
                    writer.WritePropertyName("numberOfWorkers"u8);
                    writer.WriteNumberValue(NumberOfWorkers.Value);
                }
                else
                {
                    writer.WriteNull("numberOfWorkers");
                }
            }
            if (Optional.IsCollectionDefined(DefaultDocuments))
            {
                if (DefaultDocuments != null)
                {
                    writer.WritePropertyName("defaultDocuments"u8);
                    writer.WriteStartArray();
                    foreach (var item in DefaultDocuments)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("defaultDocuments");
                }
            }
            if (Optional.IsDefined(NetFrameworkVersion))
            {
                if (NetFrameworkVersion != null)
                {
                    writer.WritePropertyName("netFrameworkVersion"u8);
                    writer.WriteStringValue(NetFrameworkVersion);
                }
                else
                {
                    writer.WriteNull("netFrameworkVersion");
                }
            }
            if (Optional.IsDefined(PhpVersion))
            {
                if (PhpVersion != null)
                {
                    writer.WritePropertyName("phpVersion"u8);
                    writer.WriteStringValue(PhpVersion);
                }
                else
                {
                    writer.WriteNull("phpVersion");
                }
            }
            if (Optional.IsDefined(PythonVersion))
            {
                if (PythonVersion != null)
                {
                    writer.WritePropertyName("pythonVersion"u8);
                    writer.WriteStringValue(PythonVersion);
                }
                else
                {
                    writer.WriteNull("pythonVersion");
                }
            }
            if (Optional.IsDefined(NodeVersion))
            {
                if (NodeVersion != null)
                {
                    writer.WritePropertyName("nodeVersion"u8);
                    writer.WriteStringValue(NodeVersion);
                }
                else
                {
                    writer.WriteNull("nodeVersion");
                }
            }
            if (Optional.IsDefined(PowerShellVersion))
            {
                if (PowerShellVersion != null)
                {
                    writer.WritePropertyName("powerShellVersion"u8);
                    writer.WriteStringValue(PowerShellVersion);
                }
                else
                {
                    writer.WriteNull("powerShellVersion");
                }
            }
            if (Optional.IsDefined(LinuxFxVersion))
            {
                if (LinuxFxVersion != null)
                {
                    writer.WritePropertyName("linuxFxVersion"u8);
                    writer.WriteStringValue(LinuxFxVersion);
                }
                else
                {
                    writer.WriteNull("linuxFxVersion");
                }
            }
            if (Optional.IsDefined(WindowsFxVersion))
            {
                if (WindowsFxVersion != null)
                {
                    writer.WritePropertyName("windowsFxVersion"u8);
                    writer.WriteStringValue(WindowsFxVersion);
                }
                else
                {
                    writer.WriteNull("windowsFxVersion");
                }
            }
            if (Optional.IsDefined(IsRequestTracingEnabled))
            {
                if (IsRequestTracingEnabled != null)
                {
                    writer.WritePropertyName("requestTracingEnabled"u8);
                    writer.WriteBooleanValue(IsRequestTracingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("requestTracingEnabled");
                }
            }
            if (Optional.IsDefined(RequestTracingExpirationOn))
            {
                if (RequestTracingExpirationOn != null)
                {
                    writer.WritePropertyName("requestTracingExpirationTime"u8);
                    writer.WriteStringValue(RequestTracingExpirationOn.Value, "O");
                }
                else
                {
                    writer.WriteNull("requestTracingExpirationTime");
                }
            }
            if (Optional.IsDefined(IsRemoteDebuggingEnabled))
            {
                if (IsRemoteDebuggingEnabled != null)
                {
                    writer.WritePropertyName("remoteDebuggingEnabled"u8);
                    writer.WriteBooleanValue(IsRemoteDebuggingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("remoteDebuggingEnabled");
                }
            }
            if (Optional.IsDefined(RemoteDebuggingVersion))
            {
                if (RemoteDebuggingVersion != null)
                {
                    writer.WritePropertyName("remoteDebuggingVersion"u8);
                    writer.WriteStringValue(RemoteDebuggingVersion);
                }
                else
                {
                    writer.WriteNull("remoteDebuggingVersion");
                }
            }
            if (Optional.IsDefined(IsHttpLoggingEnabled))
            {
                if (IsHttpLoggingEnabled != null)
                {
                    writer.WritePropertyName("httpLoggingEnabled"u8);
                    writer.WriteBooleanValue(IsHttpLoggingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("httpLoggingEnabled");
                }
            }
            if (Optional.IsDefined(UseManagedIdentityCreds))
            {
                if (UseManagedIdentityCreds != null)
                {
                    writer.WritePropertyName("acrUseManagedIdentityCreds"u8);
                    writer.WriteBooleanValue(UseManagedIdentityCreds.Value);
                }
                else
                {
                    writer.WriteNull("acrUseManagedIdentityCreds");
                }
            }
            if (Optional.IsDefined(AcrUserManagedIdentityId))
            {
                if (AcrUserManagedIdentityId != null)
                {
                    writer.WritePropertyName("acrUserManagedIdentityID"u8);
                    writer.WriteStringValue(AcrUserManagedIdentityId);
                }
                else
                {
                    writer.WriteNull("acrUserManagedIdentityID");
                }
            }
            if (Optional.IsDefined(LogsDirectorySizeLimit))
            {
                if (LogsDirectorySizeLimit != null)
                {
                    writer.WritePropertyName("logsDirectorySizeLimit"u8);
                    writer.WriteNumberValue(LogsDirectorySizeLimit.Value);
                }
                else
                {
                    writer.WriteNull("logsDirectorySizeLimit");
                }
            }
            if (Optional.IsDefined(IsDetailedErrorLoggingEnabled))
            {
                if (IsDetailedErrorLoggingEnabled != null)
                {
                    writer.WritePropertyName("detailedErrorLoggingEnabled"u8);
                    writer.WriteBooleanValue(IsDetailedErrorLoggingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("detailedErrorLoggingEnabled");
                }
            }
            if (Optional.IsDefined(PublishingUsername))
            {
                if (PublishingUsername != null)
                {
                    writer.WritePropertyName("publishingUsername"u8);
                    writer.WriteStringValue(PublishingUsername);
                }
                else
                {
                    writer.WriteNull("publishingUsername");
                }
            }
            if (Optional.IsCollectionDefined(AppSettings))
            {
                if (AppSettings != null)
                {
                    writer.WritePropertyName("appSettings"u8);
                    writer.WriteStartArray();
                    foreach (var item in AppSettings)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("appSettings");
                }
            }
            if (Optional.IsCollectionDefined(ConnectionStrings))
            {
                if (ConnectionStrings != null)
                {
                    writer.WritePropertyName("connectionStrings"u8);
                    writer.WriteStartArray();
                    foreach (var item in ConnectionStrings)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("connectionStrings");
                }
            }
            if (Optional.IsCollectionDefined(HandlerMappings))
            {
                if (HandlerMappings != null)
                {
                    writer.WritePropertyName("handlerMappings"u8);
                    writer.WriteStartArray();
                    foreach (var item in HandlerMappings)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("handlerMappings");
                }
            }
            if (Optional.IsDefined(DocumentRoot))
            {
                if (DocumentRoot != null)
                {
                    writer.WritePropertyName("documentRoot"u8);
                    writer.WriteStringValue(DocumentRoot);
                }
                else
                {
                    writer.WriteNull("documentRoot");
                }
            }
            if (Optional.IsDefined(ScmType))
            {
                if (ScmType != null)
                {
                    writer.WritePropertyName("scmType"u8);
                    writer.WriteStringValue(ScmType.Value.ToString());
                }
                else
                {
                    writer.WriteNull("scmType");
                }
            }
            if (Optional.IsDefined(Use32BitWorkerProcess))
            {
                if (Use32BitWorkerProcess != null)
                {
                    writer.WritePropertyName("use32BitWorkerProcess"u8);
                    writer.WriteBooleanValue(Use32BitWorkerProcess.Value);
                }
                else
                {
                    writer.WriteNull("use32BitWorkerProcess");
                }
            }
            if (Optional.IsDefined(IsWebSocketsEnabled))
            {
                if (IsWebSocketsEnabled != null)
                {
                    writer.WritePropertyName("webSocketsEnabled"u8);
                    writer.WriteBooleanValue(IsWebSocketsEnabled.Value);
                }
                else
                {
                    writer.WriteNull("webSocketsEnabled");
                }
            }
            if (Optional.IsDefined(IsAlwaysOn))
            {
                if (IsAlwaysOn != null)
                {
                    writer.WritePropertyName("alwaysOn"u8);
                    writer.WriteBooleanValue(IsAlwaysOn.Value);
                }
                else
                {
                    writer.WriteNull("alwaysOn");
                }
            }
            if (Optional.IsDefined(JavaVersion))
            {
                if (JavaVersion != null)
                {
                    writer.WritePropertyName("javaVersion"u8);
                    writer.WriteStringValue(JavaVersion);
                }
                else
                {
                    writer.WriteNull("javaVersion");
                }
            }
            if (Optional.IsDefined(JavaContainer))
            {
                if (JavaContainer != null)
                {
                    writer.WritePropertyName("javaContainer"u8);
                    writer.WriteStringValue(JavaContainer);
                }
                else
                {
                    writer.WriteNull("javaContainer");
                }
            }
            if (Optional.IsDefined(JavaContainerVersion))
            {
                if (JavaContainerVersion != null)
                {
                    writer.WritePropertyName("javaContainerVersion"u8);
                    writer.WriteStringValue(JavaContainerVersion);
                }
                else
                {
                    writer.WriteNull("javaContainerVersion");
                }
            }
            if (Optional.IsDefined(AppCommandLine))
            {
                if (AppCommandLine != null)
                {
                    writer.WritePropertyName("appCommandLine"u8);
                    writer.WriteStringValue(AppCommandLine);
                }
                else
                {
                    writer.WriteNull("appCommandLine");
                }
            }
            if (Optional.IsDefined(ManagedPipelineMode))
            {
                if (ManagedPipelineMode != null)
                {
                    writer.WritePropertyName("managedPipelineMode"u8);
                    writer.WriteStringValue(ManagedPipelineMode.Value.ToSerialString());
                }
                else
                {
                    writer.WriteNull("managedPipelineMode");
                }
            }
            if (Optional.IsCollectionDefined(VirtualApplications))
            {
                if (VirtualApplications != null)
                {
                    writer.WritePropertyName("virtualApplications"u8);
                    writer.WriteStartArray();
                    foreach (var item in VirtualApplications)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("virtualApplications");
                }
            }
            if (Optional.IsDefined(LoadBalancing))
            {
                if (LoadBalancing != null)
                {
                    writer.WritePropertyName("loadBalancing"u8);
                    writer.WriteStringValue(LoadBalancing.Value.ToSerialString());
                }
                else
                {
                    writer.WriteNull("loadBalancing");
                }
            }
            if (Optional.IsDefined(Experiments))
            {
                if (Experiments != null)
                {
                    writer.WritePropertyName("experiments"u8);
                    writer.WriteObjectValue(Experiments);
                }
                else
                {
                    writer.WriteNull("experiments");
                }
            }
            if (Optional.IsDefined(Limits))
            {
                if (Limits != null)
                {
                    writer.WritePropertyName("limits"u8);
                    writer.WriteObjectValue(Limits);
                }
                else
                {
                    writer.WriteNull("limits");
                }
            }
            if (Optional.IsDefined(IsAutoHealEnabled))
            {
                if (IsAutoHealEnabled != null)
                {
                    writer.WritePropertyName("autoHealEnabled"u8);
                    writer.WriteBooleanValue(IsAutoHealEnabled.Value);
                }
                else
                {
                    writer.WriteNull("autoHealEnabled");
                }
            }
            if (Optional.IsDefined(AutoHealRules))
            {
                if (AutoHealRules != null)
                {
                    writer.WritePropertyName("autoHealRules"u8);
                    writer.WriteObjectValue(AutoHealRules);
                }
                else
                {
                    writer.WriteNull("autoHealRules");
                }
            }
            if (Optional.IsDefined(TracingOptions))
            {
                if (TracingOptions != null)
                {
                    writer.WritePropertyName("tracingOptions"u8);
                    writer.WriteStringValue(TracingOptions);
                }
                else
                {
                    writer.WriteNull("tracingOptions");
                }
            }
            if (Optional.IsDefined(VnetName))
            {
                if (VnetName != null)
                {
                    writer.WritePropertyName("vnetName"u8);
                    writer.WriteStringValue(VnetName);
                }
                else
                {
                    writer.WriteNull("vnetName");
                }
            }
            if (Optional.IsDefined(IsVnetRouteAllEnabled))
            {
                if (IsVnetRouteAllEnabled != null)
                {
                    writer.WritePropertyName("vnetRouteAllEnabled"u8);
                    writer.WriteBooleanValue(IsVnetRouteAllEnabled.Value);
                }
                else
                {
                    writer.WriteNull("vnetRouteAllEnabled");
                }
            }
            if (Optional.IsDefined(VnetPrivatePortsCount))
            {
                if (VnetPrivatePortsCount != null)
                {
                    writer.WritePropertyName("vnetPrivatePortsCount"u8);
                    writer.WriteNumberValue(VnetPrivatePortsCount.Value);
                }
                else
                {
                    writer.WriteNull("vnetPrivatePortsCount");
                }
            }
            if (Optional.IsDefined(Cors))
            {
                if (Cors != null)
                {
                    writer.WritePropertyName("cors"u8);
                    writer.WriteObjectValue(Cors);
                }
                else
                {
                    writer.WriteNull("cors");
                }
            }
            if (Optional.IsDefined(Push))
            {
                if (Push != null)
                {
                    writer.WritePropertyName("push"u8);
                    writer.WriteObjectValue(Push);
                }
                else
                {
                    writer.WriteNull("push");
                }
            }
            if (Optional.IsDefined(ApiDefinition))
            {
                if (ApiDefinition != null)
                {
                    writer.WritePropertyName("apiDefinition"u8);
                    writer.WriteObjectValue(ApiDefinition);
                }
                else
                {
                    writer.WriteNull("apiDefinition");
                }
            }
            if (Optional.IsDefined(ApiManagementConfig))
            {
                if (ApiManagementConfig != null)
                {
                    writer.WritePropertyName("apiManagementConfig"u8);
                    writer.WriteObjectValue(ApiManagementConfig);
                }
                else
                {
                    writer.WriteNull("apiManagementConfig");
                }
            }
            if (Optional.IsDefined(AutoSwapSlotName))
            {
                if (AutoSwapSlotName != null)
                {
                    writer.WritePropertyName("autoSwapSlotName"u8);
                    writer.WriteStringValue(AutoSwapSlotName);
                }
                else
                {
                    writer.WriteNull("autoSwapSlotName");
                }
            }
            if (Optional.IsDefined(IsLocalMySqlEnabled))
            {
                if (IsLocalMySqlEnabled != null)
                {
                    writer.WritePropertyName("localMySqlEnabled"u8);
                    writer.WriteBooleanValue(IsLocalMySqlEnabled.Value);
                }
                else
                {
                    writer.WriteNull("localMySqlEnabled");
                }
            }
            if (Optional.IsDefined(ManagedServiceIdentityId))
            {
                if (ManagedServiceIdentityId != null)
                {
                    writer.WritePropertyName("managedServiceIdentityId"u8);
                    writer.WriteNumberValue(ManagedServiceIdentityId.Value);
                }
                else
                {
                    writer.WriteNull("managedServiceIdentityId");
                }
            }
            if (Optional.IsDefined(XManagedServiceIdentityId))
            {
                if (XManagedServiceIdentityId != null)
                {
                    writer.WritePropertyName("xManagedServiceIdentityId"u8);
                    writer.WriteNumberValue(XManagedServiceIdentityId.Value);
                }
                else
                {
                    writer.WriteNull("xManagedServiceIdentityId");
                }
            }
            if (Optional.IsDefined(KeyVaultReferenceIdentity))
            {
                if (KeyVaultReferenceIdentity != null)
                {
                    writer.WritePropertyName("keyVaultReferenceIdentity"u8);
                    writer.WriteStringValue(KeyVaultReferenceIdentity);
                }
                else
                {
                    writer.WriteNull("keyVaultReferenceIdentity");
                }
            }
            if (Optional.IsCollectionDefined(IPSecurityRestrictions))
            {
                if (IPSecurityRestrictions != null)
                {
                    writer.WritePropertyName("ipSecurityRestrictions"u8);
                    writer.WriteStartArray();
                    foreach (var item in IPSecurityRestrictions)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("ipSecurityRestrictions");
                }
            }
            if (Optional.IsCollectionDefined(ScmIPSecurityRestrictions))
            {
                if (ScmIPSecurityRestrictions != null)
                {
                    writer.WritePropertyName("scmIpSecurityRestrictions"u8);
                    writer.WriteStartArray();
                    foreach (var item in ScmIPSecurityRestrictions)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("scmIpSecurityRestrictions");
                }
            }
            if (Optional.IsDefined(AllowIPSecurityRestrictionsForScmToUseMain))
            {
                if (AllowIPSecurityRestrictionsForScmToUseMain != null)
                {
                    writer.WritePropertyName("scmIpSecurityRestrictionsUseMain"u8);
                    writer.WriteBooleanValue(AllowIPSecurityRestrictionsForScmToUseMain.Value);
                }
                else
                {
                    writer.WriteNull("scmIpSecurityRestrictionsUseMain");
                }
            }
            if (Optional.IsDefined(IsHttp20Enabled))
            {
                if (IsHttp20Enabled != null)
                {
                    writer.WritePropertyName("http20Enabled"u8);
                    writer.WriteBooleanValue(IsHttp20Enabled.Value);
                }
                else
                {
                    writer.WriteNull("http20Enabled");
                }
            }
            if (Optional.IsDefined(MinTlsVersion))
            {
                if (MinTlsVersion != null)
                {
                    writer.WritePropertyName("minTlsVersion"u8);
                    writer.WriteStringValue(MinTlsVersion.Value.ToString());
                }
                else
                {
                    writer.WriteNull("minTlsVersion");
                }
            }
            if (Optional.IsDefined(ScmMinTlsVersion))
            {
                if (ScmMinTlsVersion != null)
                {
                    writer.WritePropertyName("scmMinTlsVersion"u8);
                    writer.WriteStringValue(ScmMinTlsVersion.Value.ToString());
                }
                else
                {
                    writer.WriteNull("scmMinTlsVersion");
                }
            }
            if (Optional.IsDefined(FtpsState))
            {
                if (FtpsState != null)
                {
                    writer.WritePropertyName("ftpsState"u8);
                    writer.WriteStringValue(FtpsState.Value.ToString());
                }
                else
                {
                    writer.WriteNull("ftpsState");
                }
            }
            if (Optional.IsDefined(PreWarmedInstanceCount))
            {
                if (PreWarmedInstanceCount != null)
                {
                    writer.WritePropertyName("preWarmedInstanceCount"u8);
                    writer.WriteNumberValue(PreWarmedInstanceCount.Value);
                }
                else
                {
                    writer.WriteNull("preWarmedInstanceCount");
                }
            }
            if (Optional.IsDefined(FunctionAppScaleLimit))
            {
                if (FunctionAppScaleLimit != null)
                {
                    writer.WritePropertyName("functionAppScaleLimit"u8);
                    writer.WriteNumberValue(FunctionAppScaleLimit.Value);
                }
                else
                {
                    writer.WriteNull("functionAppScaleLimit");
                }
            }
            if (Optional.IsDefined(HealthCheckPath))
            {
                if (HealthCheckPath != null)
                {
                    writer.WritePropertyName("healthCheckPath"u8);
                    writer.WriteStringValue(HealthCheckPath);
                }
                else
                {
                    writer.WriteNull("healthCheckPath");
                }
            }
            if (Optional.IsDefined(IsFunctionsRuntimeScaleMonitoringEnabled))
            {
                if (IsFunctionsRuntimeScaleMonitoringEnabled != null)
                {
                    writer.WritePropertyName("functionsRuntimeScaleMonitoringEnabled"u8);
                    writer.WriteBooleanValue(IsFunctionsRuntimeScaleMonitoringEnabled.Value);
                }
                else
                {
                    writer.WriteNull("functionsRuntimeScaleMonitoringEnabled");
                }
            }
            if (Optional.IsDefined(WebsiteTimeZone))
            {
                if (WebsiteTimeZone != null)
                {
                    writer.WritePropertyName("websiteTimeZone"u8);
                    writer.WriteStringValue(WebsiteTimeZone);
                }
                else
                {
                    writer.WriteNull("websiteTimeZone");
                }
            }
            if (Optional.IsDefined(MinimumElasticInstanceCount))
            {
                if (MinimumElasticInstanceCount != null)
                {
                    writer.WritePropertyName("minimumElasticInstanceCount"u8);
                    writer.WriteNumberValue(MinimumElasticInstanceCount.Value);
                }
                else
                {
                    writer.WriteNull("minimumElasticInstanceCount");
                }
            }
            if (Optional.IsCollectionDefined(AzureStorageAccounts))
            {
                if (AzureStorageAccounts != null)
                {
                    writer.WritePropertyName("azureStorageAccounts"u8);
                    writer.WriteStartObject();
                    foreach (var item in AzureStorageAccounts)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteObjectValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("azureStorageAccounts");
                }
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                if (PublicNetworkAccess != null)
                {
                    writer.WritePropertyName("publicNetworkAccess"u8);
                    writer.WriteStringValue(PublicNetworkAccess);
                }
                else
                {
                    writer.WriteNull("publicNetworkAccess");
                }
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SiteConfigData DeserializeSiteConfigData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<int?> numberOfWorkers = default;
            Optional<IList<string>> defaultDocuments = default;
            Optional<string> netFrameworkVersion = default;
            Optional<string> phpVersion = default;
            Optional<string> pythonVersion = default;
            Optional<string> nodeVersion = default;
            Optional<string> powerShellVersion = default;
            Optional<string> linuxFxVersion = default;
            Optional<string> windowsFxVersion = default;
            Optional<bool?> requestTracingEnabled = default;
            Optional<DateTimeOffset?> requestTracingExpirationTime = default;
            Optional<bool?> remoteDebuggingEnabled = default;
            Optional<string> remoteDebuggingVersion = default;
            Optional<bool?> httpLoggingEnabled = default;
            Optional<bool?> acrUseManagedIdentityCreds = default;
            Optional<string> acrUserManagedIdentityId = default;
            Optional<int?> logsDirectorySizeLimit = default;
            Optional<bool?> detailedErrorLoggingEnabled = default;
            Optional<string> publishingUsername = default;
            Optional<IList<AppServiceNameValuePair>> appSettings = default;
            Optional<IList<ConnStringInfo>> connectionStrings = default;
            Optional<SiteMachineKey> machineKey = default;
            Optional<IList<HttpRequestHandlerMapping>> handlerMappings = default;
            Optional<string> documentRoot = default;
            Optional<ScmType?> scmType = default;
            Optional<bool?> use32BitWorkerProcess = default;
            Optional<bool?> webSocketsEnabled = default;
            Optional<bool?> alwaysOn = default;
            Optional<string> javaVersion = default;
            Optional<string> javaContainer = default;
            Optional<string> javaContainerVersion = default;
            Optional<string> appCommandLine = default;
            Optional<ManagedPipelineMode?> managedPipelineMode = default;
            Optional<IList<VirtualApplication>> virtualApplications = default;
            Optional<SiteLoadBalancing?> loadBalancing = default;
            Optional<RoutingRuleExperiments> experiments = default;
            Optional<SiteLimits> limits = default;
            Optional<bool?> autoHealEnabled = default;
            Optional<AutoHealRules> autoHealRules = default;
            Optional<string> tracingOptions = default;
            Optional<string> vnetName = default;
            Optional<bool?> vnetRouteAllEnabled = default;
            Optional<int?> vnetPrivatePortsCount = default;
            Optional<AppServiceCorsSettings> cors = default;
            Optional<WebAppPushSettings> push = default;
            Optional<AppServiceApiDefinitionInfo> apiDefinition = default;
            Optional<ApiManagementConfig> apiManagementConfig = default;
            Optional<string> autoSwapSlotName = default;
            Optional<bool?> localMySqlEnabled = default;
            Optional<int?> managedServiceIdentityId = default;
            Optional<int?> xManagedServiceIdentityId = default;
            Optional<string> keyVaultReferenceIdentity = default;
            Optional<IList<AppServiceIPSecurityRestriction>> ipSecurityRestrictions = default;
            Optional<IList<AppServiceIPSecurityRestriction>> scmIPSecurityRestrictions = default;
            Optional<bool?> scmIPSecurityRestrictionsUseMain = default;
            Optional<bool?> http20Enabled = default;
            Optional<AppServiceSupportedTlsVersion?> minTlsVersion = default;
            Optional<AppServiceSupportedTlsVersion?> scmMinTlsVersion = default;
            Optional<AppServiceFtpsState?> ftpsState = default;
            Optional<int?> preWarmedInstanceCount = default;
            Optional<int?> functionAppScaleLimit = default;
            Optional<string> healthCheckPath = default;
            Optional<bool?> functionsRuntimeScaleMonitoringEnabled = default;
            Optional<string> websiteTimeZone = default;
            Optional<int?> minimumElasticInstanceCount = default;
            Optional<IDictionary<string, AppServiceStorageAccessInfo>> azureStorageAccounts = default;
            Optional<string> publicNetworkAccess = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("numberOfWorkers"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                numberOfWorkers = null;
                                continue;
                            }
                            numberOfWorkers = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("defaultDocuments"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                defaultDocuments = null;
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            defaultDocuments = array;
                            continue;
                        }
                        if (property0.NameEquals("netFrameworkVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                netFrameworkVersion = null;
                                continue;
                            }
                            netFrameworkVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("phpVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                phpVersion = null;
                                continue;
                            }
                            phpVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("pythonVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                pythonVersion = null;
                                continue;
                            }
                            pythonVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("nodeVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                nodeVersion = null;
                                continue;
                            }
                            nodeVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("powerShellVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                powerShellVersion = null;
                                continue;
                            }
                            powerShellVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("linuxFxVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                linuxFxVersion = null;
                                continue;
                            }
                            linuxFxVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("windowsFxVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                windowsFxVersion = null;
                                continue;
                            }
                            windowsFxVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("requestTracingEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                requestTracingEnabled = null;
                                continue;
                            }
                            requestTracingEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("requestTracingExpirationTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                requestTracingExpirationTime = null;
                                continue;
                            }
                            requestTracingExpirationTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("remoteDebuggingEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                remoteDebuggingEnabled = null;
                                continue;
                            }
                            remoteDebuggingEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("remoteDebuggingVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                remoteDebuggingVersion = null;
                                continue;
                            }
                            remoteDebuggingVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("httpLoggingEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                httpLoggingEnabled = null;
                                continue;
                            }
                            httpLoggingEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("acrUseManagedIdentityCreds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                acrUseManagedIdentityCreds = null;
                                continue;
                            }
                            acrUseManagedIdentityCreds = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("acrUserManagedIdentityID"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                acrUserManagedIdentityId = null;
                                continue;
                            }
                            acrUserManagedIdentityId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("logsDirectorySizeLimit"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                logsDirectorySizeLimit = null;
                                continue;
                            }
                            logsDirectorySizeLimit = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("detailedErrorLoggingEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                detailedErrorLoggingEnabled = null;
                                continue;
                            }
                            detailedErrorLoggingEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("publishingUsername"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                publishingUsername = null;
                                continue;
                            }
                            publishingUsername = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("appSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                appSettings = null;
                                continue;
                            }
                            List<AppServiceNameValuePair> array = new List<AppServiceNameValuePair>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AppServiceNameValuePair.DeserializeAppServiceNameValuePair(item));
                            }
                            appSettings = array;
                            continue;
                        }
                        if (property0.NameEquals("connectionStrings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                connectionStrings = null;
                                continue;
                            }
                            List<ConnStringInfo> array = new List<ConnStringInfo>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ConnStringInfo.DeserializeConnStringInfo(item));
                            }
                            connectionStrings = array;
                            continue;
                        }
                        if (property0.NameEquals("machineKey"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                machineKey = null;
                                continue;
                            }
                            machineKey = SiteMachineKey.DeserializeSiteMachineKey(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("handlerMappings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                handlerMappings = null;
                                continue;
                            }
                            List<HttpRequestHandlerMapping> array = new List<HttpRequestHandlerMapping>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(HttpRequestHandlerMapping.DeserializeHttpRequestHandlerMapping(item));
                            }
                            handlerMappings = array;
                            continue;
                        }
                        if (property0.NameEquals("documentRoot"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                documentRoot = null;
                                continue;
                            }
                            documentRoot = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("scmType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                scmType = null;
                                continue;
                            }
                            scmType = new ScmType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("use32BitWorkerProcess"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                use32BitWorkerProcess = null;
                                continue;
                            }
                            use32BitWorkerProcess = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("webSocketsEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                webSocketsEnabled = null;
                                continue;
                            }
                            webSocketsEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("alwaysOn"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                alwaysOn = null;
                                continue;
                            }
                            alwaysOn = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("javaVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                javaVersion = null;
                                continue;
                            }
                            javaVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("javaContainer"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                javaContainer = null;
                                continue;
                            }
                            javaContainer = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("javaContainerVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                javaContainerVersion = null;
                                continue;
                            }
                            javaContainerVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("appCommandLine"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                appCommandLine = null;
                                continue;
                            }
                            appCommandLine = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("managedPipelineMode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                managedPipelineMode = null;
                                continue;
                            }
                            managedPipelineMode = property0.Value.GetString().ToManagedPipelineMode();
                            continue;
                        }
                        if (property0.NameEquals("virtualApplications"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                virtualApplications = null;
                                continue;
                            }
                            List<VirtualApplication> array = new List<VirtualApplication>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(VirtualApplication.DeserializeVirtualApplication(item));
                            }
                            virtualApplications = array;
                            continue;
                        }
                        if (property0.NameEquals("loadBalancing"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                loadBalancing = null;
                                continue;
                            }
                            loadBalancing = property0.Value.GetString().ToSiteLoadBalancing();
                            continue;
                        }
                        if (property0.NameEquals("experiments"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                experiments = null;
                                continue;
                            }
                            experiments = RoutingRuleExperiments.DeserializeRoutingRuleExperiments(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("limits"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                limits = null;
                                continue;
                            }
                            limits = SiteLimits.DeserializeSiteLimits(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("autoHealEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                autoHealEnabled = null;
                                continue;
                            }
                            autoHealEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("autoHealRules"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                autoHealRules = null;
                                continue;
                            }
                            autoHealRules = AutoHealRules.DeserializeAutoHealRules(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("tracingOptions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                tracingOptions = null;
                                continue;
                            }
                            tracingOptions = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vnetName"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                vnetName = null;
                                continue;
                            }
                            vnetName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vnetRouteAllEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                vnetRouteAllEnabled = null;
                                continue;
                            }
                            vnetRouteAllEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("vnetPrivatePortsCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                vnetPrivatePortsCount = null;
                                continue;
                            }
                            vnetPrivatePortsCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("cors"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                cors = null;
                                continue;
                            }
                            cors = AppServiceCorsSettings.DeserializeAppServiceCorsSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("push"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                push = null;
                                continue;
                            }
                            push = WebAppPushSettings.DeserializeWebAppPushSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("apiDefinition"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                apiDefinition = null;
                                continue;
                            }
                            apiDefinition = AppServiceApiDefinitionInfo.DeserializeAppServiceApiDefinitionInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("apiManagementConfig"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                apiManagementConfig = null;
                                continue;
                            }
                            apiManagementConfig = ApiManagementConfig.DeserializeApiManagementConfig(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("autoSwapSlotName"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                autoSwapSlotName = null;
                                continue;
                            }
                            autoSwapSlotName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("localMySqlEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                localMySqlEnabled = null;
                                continue;
                            }
                            localMySqlEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("managedServiceIdentityId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                managedServiceIdentityId = null;
                                continue;
                            }
                            managedServiceIdentityId = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("xManagedServiceIdentityId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                xManagedServiceIdentityId = null;
                                continue;
                            }
                            xManagedServiceIdentityId = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("keyVaultReferenceIdentity"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                keyVaultReferenceIdentity = null;
                                continue;
                            }
                            keyVaultReferenceIdentity = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ipSecurityRestrictions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                ipSecurityRestrictions = null;
                                continue;
                            }
                            List<AppServiceIPSecurityRestriction> array = new List<AppServiceIPSecurityRestriction>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AppServiceIPSecurityRestriction.DeserializeAppServiceIPSecurityRestriction(item));
                            }
                            ipSecurityRestrictions = array;
                            continue;
                        }
                        if (property0.NameEquals("scmIpSecurityRestrictions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                scmIPSecurityRestrictions = null;
                                continue;
                            }
                            List<AppServiceIPSecurityRestriction> array = new List<AppServiceIPSecurityRestriction>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AppServiceIPSecurityRestriction.DeserializeAppServiceIPSecurityRestriction(item));
                            }
                            scmIPSecurityRestrictions = array;
                            continue;
                        }
                        if (property0.NameEquals("scmIpSecurityRestrictionsUseMain"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                scmIPSecurityRestrictionsUseMain = null;
                                continue;
                            }
                            scmIPSecurityRestrictionsUseMain = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("http20Enabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                http20Enabled = null;
                                continue;
                            }
                            http20Enabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("minTlsVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                minTlsVersion = null;
                                continue;
                            }
                            minTlsVersion = new AppServiceSupportedTlsVersion(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("scmMinTlsVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                scmMinTlsVersion = null;
                                continue;
                            }
                            scmMinTlsVersion = new AppServiceSupportedTlsVersion(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("ftpsState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                ftpsState = null;
                                continue;
                            }
                            ftpsState = new AppServiceFtpsState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("preWarmedInstanceCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                preWarmedInstanceCount = null;
                                continue;
                            }
                            preWarmedInstanceCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("functionAppScaleLimit"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                functionAppScaleLimit = null;
                                continue;
                            }
                            functionAppScaleLimit = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("healthCheckPath"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                healthCheckPath = null;
                                continue;
                            }
                            healthCheckPath = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("functionsRuntimeScaleMonitoringEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                functionsRuntimeScaleMonitoringEnabled = null;
                                continue;
                            }
                            functionsRuntimeScaleMonitoringEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("websiteTimeZone"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                websiteTimeZone = null;
                                continue;
                            }
                            websiteTimeZone = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("minimumElasticInstanceCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                minimumElasticInstanceCount = null;
                                continue;
                            }
                            minimumElasticInstanceCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("azureStorageAccounts"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                azureStorageAccounts = null;
                                continue;
                            }
                            Dictionary<string, AppServiceStorageAccessInfo> dictionary = new Dictionary<string, AppServiceStorageAccessInfo>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, AppServiceStorageAccessInfo.DeserializeAppServiceStorageAccessInfo(property1.Value));
                            }
                            azureStorageAccounts = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("publicNetworkAccess"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                publicNetworkAccess = null;
                                continue;
                            }
                            publicNetworkAccess = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SiteConfigData(id, name, type, systemData.Value, Optional.ToNullable(numberOfWorkers), Optional.ToList(defaultDocuments), netFrameworkVersion.Value, phpVersion.Value, pythonVersion.Value, nodeVersion.Value, powerShellVersion.Value, linuxFxVersion.Value, windowsFxVersion.Value, Optional.ToNullable(requestTracingEnabled), Optional.ToNullable(requestTracingExpirationTime), Optional.ToNullable(remoteDebuggingEnabled), remoteDebuggingVersion.Value, Optional.ToNullable(httpLoggingEnabled), Optional.ToNullable(acrUseManagedIdentityCreds), acrUserManagedIdentityId.Value, Optional.ToNullable(logsDirectorySizeLimit), Optional.ToNullable(detailedErrorLoggingEnabled), publishingUsername.Value, Optional.ToList(appSettings), Optional.ToList(connectionStrings), machineKey.Value, Optional.ToList(handlerMappings), documentRoot.Value, Optional.ToNullable(scmType), Optional.ToNullable(use32BitWorkerProcess), Optional.ToNullable(webSocketsEnabled), Optional.ToNullable(alwaysOn), javaVersion.Value, javaContainer.Value, javaContainerVersion.Value, appCommandLine.Value, Optional.ToNullable(managedPipelineMode), Optional.ToList(virtualApplications), Optional.ToNullable(loadBalancing), experiments.Value, limits.Value, Optional.ToNullable(autoHealEnabled), autoHealRules.Value, tracingOptions.Value, vnetName.Value, Optional.ToNullable(vnetRouteAllEnabled), Optional.ToNullable(vnetPrivatePortsCount), cors.Value, push.Value, apiDefinition.Value, apiManagementConfig.Value, autoSwapSlotName.Value, Optional.ToNullable(localMySqlEnabled), Optional.ToNullable(managedServiceIdentityId), Optional.ToNullable(xManagedServiceIdentityId), keyVaultReferenceIdentity.Value, Optional.ToList(ipSecurityRestrictions), Optional.ToList(scmIPSecurityRestrictions), Optional.ToNullable(scmIPSecurityRestrictionsUseMain), Optional.ToNullable(http20Enabled), Optional.ToNullable(minTlsVersion), Optional.ToNullable(scmMinTlsVersion), Optional.ToNullable(ftpsState), Optional.ToNullable(preWarmedInstanceCount), Optional.ToNullable(functionAppScaleLimit), healthCheckPath.Value, Optional.ToNullable(functionsRuntimeScaleMonitoringEnabled), websiteTimeZone.Value, Optional.ToNullable(minimumElasticInstanceCount), Optional.ToDictionary(azureStorageAccounts), publicNetworkAccess.Value, kind.Value);
        }
    }
}
