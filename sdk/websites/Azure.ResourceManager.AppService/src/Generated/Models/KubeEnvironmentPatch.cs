// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// ARM resource for a KubeEnvironment when patching
    /// Serialized Name: KubeEnvironmentPatchResource
    /// </summary>
    public partial class KubeEnvironmentPatch : ResourceData
    {
        /// <summary> Initializes a new instance of KubeEnvironmentPatch. </summary>
        public KubeEnvironmentPatch()
        {
        }

        /// <summary> Initializes a new instance of KubeEnvironmentPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState">
        /// Provisioning state of the Kubernetes Environment.
        /// Serialized Name: KubeEnvironmentPatchResource.properties.provisioningState
        /// </param>
        /// <param name="deploymentErrors">
        /// Any errors that occurred during deployment or deployment validation
        /// Serialized Name: KubeEnvironmentPatchResource.properties.deploymentErrors
        /// </param>
        /// <param name="isInternalLoadBalancerEnabled">
        /// Only visible within Vnet/Subnet
        /// Serialized Name: KubeEnvironmentPatchResource.properties.internalLoadBalancerEnabled
        /// </param>
        /// <param name="defaultDomain">
        /// Default Domain Name for the cluster
        /// Serialized Name: KubeEnvironmentPatchResource.properties.defaultDomain
        /// </param>
        /// <param name="staticIP">
        /// Static IP of the KubeEnvironment
        /// Serialized Name: KubeEnvironmentPatchResource.properties.staticIp
        /// </param>
        /// <param name="arcConfiguration">
        /// Cluster configuration which determines the ARC cluster
        /// components types. Eg: Choosing between BuildService kind,
        /// FrontEnd Service ArtifactsStorageType etc.
        /// Serialized Name: KubeEnvironmentPatchResource.properties.arcConfiguration
        /// </param>
        /// <param name="appLogsConfiguration">
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only &quot;log-analytics&quot; is
        /// supported
        /// Serialized Name: KubeEnvironmentPatchResource.properties.appLogsConfiguration
        /// </param>
        /// <param name="aksResourceId"> Serialized Name: KubeEnvironmentPatchResource.properties.aksResourceID. </param>
        /// <param name="kind">
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </param>
        internal KubeEnvironmentPatch(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, KubeEnvironmentProvisioningState? provisioningState, string deploymentErrors, bool? isInternalLoadBalancerEnabled, string defaultDomain, string staticIP, ArcConfiguration arcConfiguration, AppLogsConfiguration appLogsConfiguration, string aksResourceId, string kind) : base(id, name, resourceType, systemData)
        {
            ProvisioningState = provisioningState;
            DeploymentErrors = deploymentErrors;
            IsInternalLoadBalancerEnabled = isInternalLoadBalancerEnabled;
            DefaultDomain = defaultDomain;
            StaticIP = staticIP;
            ArcConfiguration = arcConfiguration;
            AppLogsConfiguration = appLogsConfiguration;
            AksResourceId = aksResourceId;
            Kind = kind;
        }

        /// <summary>
        /// Provisioning state of the Kubernetes Environment.
        /// Serialized Name: KubeEnvironmentPatchResource.properties.provisioningState
        /// </summary>
        public KubeEnvironmentProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// Any errors that occurred during deployment or deployment validation
        /// Serialized Name: KubeEnvironmentPatchResource.properties.deploymentErrors
        /// </summary>
        public string DeploymentErrors { get; }
        /// <summary>
        /// Only visible within Vnet/Subnet
        /// Serialized Name: KubeEnvironmentPatchResource.properties.internalLoadBalancerEnabled
        /// </summary>
        public bool? IsInternalLoadBalancerEnabled { get; set; }
        /// <summary>
        /// Default Domain Name for the cluster
        /// Serialized Name: KubeEnvironmentPatchResource.properties.defaultDomain
        /// </summary>
        public string DefaultDomain { get; }
        /// <summary>
        /// Static IP of the KubeEnvironment
        /// Serialized Name: KubeEnvironmentPatchResource.properties.staticIp
        /// </summary>
        public string StaticIP { get; set; }
        /// <summary>
        /// Cluster configuration which determines the ARC cluster
        /// components types. Eg: Choosing between BuildService kind,
        /// FrontEnd Service ArtifactsStorageType etc.
        /// Serialized Name: KubeEnvironmentPatchResource.properties.arcConfiguration
        /// </summary>
        public ArcConfiguration ArcConfiguration { get; set; }
        /// <summary>
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only &quot;log-analytics&quot; is
        /// supported
        /// Serialized Name: KubeEnvironmentPatchResource.properties.appLogsConfiguration
        /// </summary>
        public AppLogsConfiguration AppLogsConfiguration { get; set; }
        /// <summary> Serialized Name: KubeEnvironmentPatchResource.properties.aksResourceID. </summary>
        public string AksResourceId { get; set; }
        /// <summary>
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </summary>
        public string Kind { get; set; }
    }
}
