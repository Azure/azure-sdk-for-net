// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Class representing certificate reissue request. </summary>
    public partial class ReissueCertificateOrderContent : ResourceData
    {
        /// <summary> Initializes a new instance of <see cref="ReissueCertificateOrderContent"/>. </summary>
        public ReissueCertificateOrderContent()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ReissueCertificateOrderContent"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="keySize"> Certificate Key Size. </param>
        /// <param name="delayExistingRevokeInHours"> Delay in hours to revoke existing certificate after the new certificate is issued. </param>
        /// <param name="csr"> Csr to be used for re-key operation. </param>
        /// <param name="isPrivateKeyExternal"> Should we change the ASC type (from managed private key to external private key and vice versa). </param>
        /// <param name="kind"> Kind of resource. </param>
        internal ReissueCertificateOrderContent(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, int? keySize, int? delayExistingRevokeInHours, string csr, bool? isPrivateKeyExternal, string kind) : base(id, name, resourceType, systemData)
        {
            KeySize = keySize;
            DelayExistingRevokeInHours = delayExistingRevokeInHours;
            Csr = csr;
            IsPrivateKeyExternal = isPrivateKeyExternal;
            Kind = kind;
        }

        /// <summary> Certificate Key Size. </summary>
        public int? KeySize { get; set; }
        /// <summary> Delay in hours to revoke existing certificate after the new certificate is issued. </summary>
        public int? DelayExistingRevokeInHours { get; set; }
        /// <summary> Csr to be used for re-key operation. </summary>
        public string Csr { get; set; }
        /// <summary> Should we change the ASC type (from managed private key to external private key and vice versa). </summary>
        public bool? IsPrivateKeyExternal { get; set; }
        /// <summary> Kind of resource. </summary>
        public string Kind { get; set; }
    }
}
