// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class RenderingTypeExtensions
    {
        public static string ToSerialString(this RenderingType value) => value switch
        {
            RenderingType.NoGraph => "NoGraph",
            RenderingType.Table => "Table",
            RenderingType.TimeSeries => "TimeSeries",
            RenderingType.TimeSeriesPerInstance => "TimeSeriesPerInstance",
            RenderingType.PieChart => "PieChart",
            RenderingType.DataSummary => "DataSummary",
            RenderingType.Email => "Email",
            RenderingType.Insights => "Insights",
            RenderingType.DynamicInsight => "DynamicInsight",
            RenderingType.Markdown => "Markdown",
            RenderingType.Detector => "Detector",
            RenderingType.DropDown => "DropDown",
            RenderingType.Card => "Card",
            RenderingType.Solution => "Solution",
            RenderingType.Guage => "Guage",
            RenderingType.Form => "Form",
            RenderingType.ChangeSets => "ChangeSets",
            RenderingType.ChangeAnalysisOnboarding => "ChangeAnalysisOnboarding",
            RenderingType.ChangesView => "ChangesView",
            RenderingType.AppInsight => "AppInsight",
            RenderingType.DependencyGraph => "DependencyGraph",
            RenderingType.DownTime => "DownTime",
            RenderingType.SummaryCard => "SummaryCard",
            RenderingType.SearchComponent => "SearchComponent",
            RenderingType.AppInsightEnablement => "AppInsightEnablement",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown RenderingType value.")
        };

        public static RenderingType ToRenderingType(this string value)
        {
            if (string.Equals(value, "NoGraph", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.NoGraph;
            if (string.Equals(value, "Table", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.Table;
            if (string.Equals(value, "TimeSeries", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.TimeSeries;
            if (string.Equals(value, "TimeSeriesPerInstance", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.TimeSeriesPerInstance;
            if (string.Equals(value, "PieChart", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.PieChart;
            if (string.Equals(value, "DataSummary", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.DataSummary;
            if (string.Equals(value, "Email", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.Email;
            if (string.Equals(value, "Insights", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.Insights;
            if (string.Equals(value, "DynamicInsight", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.DynamicInsight;
            if (string.Equals(value, "Markdown", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.Markdown;
            if (string.Equals(value, "Detector", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.Detector;
            if (string.Equals(value, "DropDown", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.DropDown;
            if (string.Equals(value, "Card", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.Card;
            if (string.Equals(value, "Solution", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.Solution;
            if (string.Equals(value, "Guage", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.Guage;
            if (string.Equals(value, "Form", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.Form;
            if (string.Equals(value, "ChangeSets", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.ChangeSets;
            if (string.Equals(value, "ChangeAnalysisOnboarding", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.ChangeAnalysisOnboarding;
            if (string.Equals(value, "ChangesView", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.ChangesView;
            if (string.Equals(value, "AppInsight", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.AppInsight;
            if (string.Equals(value, "DependencyGraph", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.DependencyGraph;
            if (string.Equals(value, "DownTime", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.DownTime;
            if (string.Equals(value, "SummaryCard", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.SummaryCard;
            if (string.Equals(value, "SearchComponent", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.SearchComponent;
            if (string.Equals(value, "AppInsightEnablement", StringComparison.InvariantCultureIgnoreCase)) return RenderingType.AppInsightEnablement;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown RenderingType value.");
        }
    }
}
