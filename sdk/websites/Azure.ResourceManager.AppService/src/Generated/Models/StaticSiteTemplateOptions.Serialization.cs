// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class StaticSiteTemplateOptions : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TemplateRepositoryUrl))
            {
                writer.WritePropertyName("templateRepositoryUrl");
                writer.WriteStringValue(TemplateRepositoryUrl);
            }
            if (Optional.IsDefined(Owner))
            {
                writer.WritePropertyName("owner");
                writer.WriteStringValue(Owner);
            }
            if (Optional.IsDefined(RepositoryName))
            {
                writer.WritePropertyName("repositoryName");
                writer.WriteStringValue(RepositoryName);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(IsPrivate))
            {
                writer.WritePropertyName("isPrivate");
                writer.WriteBooleanValue(IsPrivate.Value);
            }
            writer.WriteEndObject();
        }

        internal static StaticSiteTemplateOptions DeserializeStaticSiteTemplateOptions(JsonElement element)
        {
            Optional<string> templateRepositoryUrl = default;
            Optional<string> owner = default;
            Optional<string> repositoryName = default;
            Optional<string> description = default;
            Optional<bool> isPrivate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("templateRepositoryUrl"))
                {
                    templateRepositoryUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("owner"))
                {
                    owner = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("repositoryName"))
                {
                    repositoryName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isPrivate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isPrivate = property.Value.GetBoolean();
                    continue;
                }
            }
            return new StaticSiteTemplateOptions(templateRepositoryUrl.Value, owner.Value, repositoryName.Value, description.Value, Optional.ToNullable(isPrivate));
        }
    }
}
