// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class CloningInfo : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(CorrelationId))
            {
                writer.WritePropertyName("correlationId"u8);
                writer.WriteStringValue(CorrelationId.Value);
            }
            if (Core.Optional.IsDefined(CanOverwrite))
            {
                writer.WritePropertyName("overwrite"u8);
                writer.WriteBooleanValue(CanOverwrite.Value);
            }
            if (Core.Optional.IsDefined(CloneCustomHostNames))
            {
                writer.WritePropertyName("cloneCustomHostNames"u8);
                writer.WriteBooleanValue(CloneCustomHostNames.Value);
            }
            if (Core.Optional.IsDefined(CloneSourceControl))
            {
                writer.WritePropertyName("cloneSourceControl"u8);
                writer.WriteBooleanValue(CloneSourceControl.Value);
            }
            writer.WritePropertyName("sourceWebAppId"u8);
            writer.WriteStringValue(SourceWebAppId);
            if (Core.Optional.IsDefined(SourceWebAppLocation))
            {
                writer.WritePropertyName("sourceWebAppLocation"u8);
                writer.WriteStringValue(SourceWebAppLocation.Value);
            }
            if (Core.Optional.IsDefined(HostingEnvironment))
            {
                writer.WritePropertyName("hostingEnvironment"u8);
                writer.WriteStringValue(HostingEnvironment);
            }
            if (Core.Optional.IsCollectionDefined(AppSettingsOverrides))
            {
                writer.WritePropertyName("appSettingsOverrides"u8);
                writer.WriteStartObject();
                foreach (var item in AppSettingsOverrides)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Core.Optional.IsDefined(ConfigureLoadBalancing))
            {
                writer.WritePropertyName("configureLoadBalancing"u8);
                writer.WriteBooleanValue(ConfigureLoadBalancing.Value);
            }
            if (Core.Optional.IsDefined(TrafficManagerProfileId))
            {
                writer.WritePropertyName("trafficManagerProfileId"u8);
                writer.WriteStringValue(TrafficManagerProfileId);
            }
            if (Core.Optional.IsDefined(TrafficManagerProfileName))
            {
                writer.WritePropertyName("trafficManagerProfileName"u8);
                writer.WriteStringValue(TrafficManagerProfileName);
            }
            writer.WriteEndObject();
        }

        internal static CloningInfo DeserializeCloningInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<Guid> correlationId = default;
            Core.Optional<bool> overwrite = default;
            Core.Optional<bool> cloneCustomHostNames = default;
            Core.Optional<bool> cloneSourceControl = default;
            ResourceIdentifier sourceWebAppId = default;
            Core.Optional<AzureLocation> sourceWebAppLocation = default;
            Core.Optional<string> hostingEnvironment = default;
            Core.Optional<IDictionary<string, string>> appSettingsOverrides = default;
            Core.Optional<bool> configureLoadBalancing = default;
            Core.Optional<ResourceIdentifier> trafficManagerProfileId = default;
            Core.Optional<string> trafficManagerProfileName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("correlationId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    correlationId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("overwrite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    overwrite = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cloneCustomHostNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cloneCustomHostNames = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cloneSourceControl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cloneSourceControl = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sourceWebAppId"u8))
                {
                    sourceWebAppId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceWebAppLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceWebAppLocation = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hostingEnvironment"u8))
                {
                    hostingEnvironment = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appSettingsOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    appSettingsOverrides = dictionary;
                    continue;
                }
                if (property.NameEquals("configureLoadBalancing"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    configureLoadBalancing = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("trafficManagerProfileId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    trafficManagerProfileId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("trafficManagerProfileName"u8))
                {
                    trafficManagerProfileName = property.Value.GetString();
                    continue;
                }
            }
            return new CloningInfo(Core.Optional.ToNullable(correlationId), Core.Optional.ToNullable(overwrite), Core.Optional.ToNullable(cloneCustomHostNames), Core.Optional.ToNullable(cloneSourceControl), sourceWebAppId, Core.Optional.ToNullable(sourceWebAppLocation), hostingEnvironment.Value, Core.Optional.ToDictionary(appSettingsOverrides), Core.Optional.ToNullable(configureLoadBalancing), trafficManagerProfileId.Value, trafficManagerProfileName.Value);
        }
    }
}
