// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> ASE region. </summary>
    public partial class AppServiceAseRegion : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AppServiceAseRegion"/>. </summary>
        public AppServiceAseRegion()
        {
            AvailableSku = new ChangeTrackingList<string>();
            AvailableOS = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="AppServiceAseRegion"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="displayName"> Display name for region. </param>
        /// <param name="isStandard"> Is region standard. </param>
        /// <param name="isDedicatedHostEnabled"> Dedicated host enabled. </param>
        /// <param name="isZoneRedundantEnabled"> Zone redundant deployment enabled. </param>
        /// <param name="availableSku"> Available Skus in region. </param>
        /// <param name="availableOS"> Available OSs in region. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AppServiceAseRegion(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string displayName, bool? isStandard, bool? isDedicatedHostEnabled, bool? isZoneRedundantEnabled, IList<string> availableSku, IList<string> availableOS, string kind, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            DisplayName = displayName;
            IsStandard = isStandard;
            IsDedicatedHostEnabled = isDedicatedHostEnabled;
            IsZoneRedundantEnabled = isZoneRedundantEnabled;
            AvailableSku = availableSku;
            AvailableOS = availableOS;
            Kind = kind;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Display name for region. </summary>
        [WirePath("properties.displayName")]
        public string DisplayName { get; }
        /// <summary> Is region standard. </summary>
        [WirePath("properties.standard")]
        public bool? IsStandard { get; }
        /// <summary> Dedicated host enabled. </summary>
        [WirePath("properties.dedicatedHost")]
        public bool? IsDedicatedHostEnabled { get; }
        /// <summary> Zone redundant deployment enabled. </summary>
        [WirePath("properties.zoneRedundant")]
        public bool? IsZoneRedundantEnabled { get; }
        /// <summary> Available Skus in region. </summary>
        [WirePath("properties.availableSku")]
        public IList<string> AvailableSku { get; }
        /// <summary> Available OSs in region. </summary>
        [WirePath("properties.availableOS")]
        public IList<string> AvailableOS { get; }
        /// <summary> Kind of resource. </summary>
        [WirePath("kind")]
        public string Kind { get; set; }
    }
}
