// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Deployment status response payload. </summary>
    public partial class CsmDeploymentStatus : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CsmDeploymentStatus"/>. </summary>
        public CsmDeploymentStatus()
        {
            FailedInstancesLogs = new ChangeTrackingList<string>();
            Errors = new ChangeTrackingList<ResponseError>();
        }

        /// <summary> Initializes a new instance of <see cref="CsmDeploymentStatus"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="deploymentId"> Deployment operation id. </param>
        /// <param name="status"> Deployment build status. </param>
        /// <param name="numberOfInstancesInProgress"> Number of site instances currently being provisioned. </param>
        /// <param name="numberOfInstancesSuccessful"> Number of site instances provisioned successfully. </param>
        /// <param name="numberOfInstancesFailed"> Number of site instances failed to provision. </param>
        /// <param name="failedInstancesLogs"> List of URLs pointing to logs for instances which failed to provision. </param>
        /// <param name="errors"> List of errors. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CsmDeploymentStatus(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string deploymentId, DeploymentBuildStatus? status, int? numberOfInstancesInProgress, int? numberOfInstancesSuccessful, int? numberOfInstancesFailed, IList<string> failedInstancesLogs, IList<ResponseError> errors, string kind, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            DeploymentId = deploymentId;
            Status = status;
            NumberOfInstancesInProgress = numberOfInstancesInProgress;
            NumberOfInstancesSuccessful = numberOfInstancesSuccessful;
            NumberOfInstancesFailed = numberOfInstancesFailed;
            FailedInstancesLogs = failedInstancesLogs;
            Errors = errors;
            Kind = kind;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Deployment operation id. </summary>
        [WirePath("properties.deploymentId")]
        public string DeploymentId { get; set; }
        /// <summary> Deployment build status. </summary>
        [WirePath("properties.status")]
        public DeploymentBuildStatus? Status { get; set; }
        /// <summary> Number of site instances currently being provisioned. </summary>
        [WirePath("properties.numberOfInstancesInProgress")]
        public int? NumberOfInstancesInProgress { get; set; }
        /// <summary> Number of site instances provisioned successfully. </summary>
        [WirePath("properties.numberOfInstancesSuccessful")]
        public int? NumberOfInstancesSuccessful { get; set; }
        /// <summary> Number of site instances failed to provision. </summary>
        [WirePath("properties.numberOfInstancesFailed")]
        public int? NumberOfInstancesFailed { get; set; }
        /// <summary> List of URLs pointing to logs for instances which failed to provision. </summary>
        [WirePath("properties.failedInstancesLogs")]
        public IList<string> FailedInstancesLogs { get; }
        /// <summary> Kind of resource. </summary>
        [WirePath("kind")]
        public string Kind { get; set; }
    }
}
