// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class AzureActiveDirectoryValidation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(JwtClaimChecks))
            {
                writer.WritePropertyName("jwtClaimChecks");
                writer.WriteObjectValue(JwtClaimChecks);
            }
            if (Optional.IsCollectionDefined(AllowedAudiences))
            {
                writer.WritePropertyName("allowedAudiences");
                writer.WriteStartArray();
                foreach (var item in AllowedAudiences)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DefaultAuthorizationPolicy))
            {
                writer.WritePropertyName("defaultAuthorizationPolicy");
                writer.WriteObjectValue(DefaultAuthorizationPolicy);
            }
            writer.WriteEndObject();
        }

        internal static AzureActiveDirectoryValidation DeserializeAzureActiveDirectoryValidation(JsonElement element)
        {
            Optional<JwtClaimChecks> jwtClaimChecks = default;
            Optional<IList<string>> allowedAudiences = default;
            Optional<DefaultAuthorizationPolicy> defaultAuthorizationPolicy = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("jwtClaimChecks"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jwtClaimChecks = JwtClaimChecks.DeserializeJwtClaimChecks(property.Value);
                    continue;
                }
                if (property.NameEquals("allowedAudiences"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    allowedAudiences = array;
                    continue;
                }
                if (property.NameEquals("defaultAuthorizationPolicy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    defaultAuthorizationPolicy = DefaultAuthorizationPolicy.DeserializeDefaultAuthorizationPolicy(property.Value);
                    continue;
                }
            }
            return new AzureActiveDirectoryValidation(jwtClaimChecks.Value, Optional.ToList(allowedAudiences), defaultAuthorizationPolicy.Value);
        }
    }
}
