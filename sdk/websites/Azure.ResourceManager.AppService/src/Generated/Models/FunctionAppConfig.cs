// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Function app configuration. </summary>
    public partial class FunctionAppConfig
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FunctionAppConfig"/>. </summary>
        public FunctionAppConfig()
        {
        }

        /// <summary> Initializes a new instance of <see cref="FunctionAppConfig"/>. </summary>
        /// <param name="deployment"> Function app deployment configuration. </param>
        /// <param name="runtime"> Function app runtime settings. </param>
        /// <param name="scaleAndConcurrency"> Function app scale and concurrency settings. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FunctionAppConfig(FunctionsDeployment deployment, FunctionAppRuntime runtime, FunctionAppScaleAndConcurrency scaleAndConcurrency, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Deployment = deployment;
            Runtime = runtime;
            ScaleAndConcurrency = scaleAndConcurrency;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Function app deployment configuration. </summary>
        internal FunctionsDeployment Deployment { get; set; }
        /// <summary> Storage for deployed package used by the function app. </summary>
        [WirePath("deployment.storage")]
        public FunctionAppStorage DeploymentStorage
        {
            get => Deployment is null ? default : Deployment.Storage;
            set
            {
                if (Deployment is null)
                    Deployment = new FunctionsDeployment();
                Deployment.Storage = value;
            }
        }

        /// <summary> Function app runtime settings. </summary>
        [WirePath("runtime")]
        public FunctionAppRuntime Runtime { get; set; }
        /// <summary> Function app scale and concurrency settings. </summary>
        [WirePath("scaleAndConcurrency")]
        public FunctionAppScaleAndConcurrency ScaleAndConcurrency { get; set; }
    }
}
