// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// ARM resource for a app service plan.
    /// Serialized Name: AppServicePlanPatchResource
    /// </summary>
    public partial class AppServicePlanPatch : ResourceData
    {
        /// <summary> Initializes a new instance of AppServicePlanPatch. </summary>
        public AppServicePlanPatch()
        {
        }

        /// <summary> Initializes a new instance of AppServicePlanPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="workerTierName">
        /// Target worker tier assigned to the App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.workerTierName
        /// </param>
        /// <param name="status">
        /// App Service plan status.
        /// Serialized Name: AppServicePlanPatchResource.properties.status
        /// </param>
        /// <param name="subscription">
        /// App Service plan subscription.
        /// Serialized Name: AppServicePlanPatchResource.properties.subscription
        /// </param>
        /// <param name="hostingEnvironmentProfile">
        /// Specification for the App Service Environment to use for the App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.hostingEnvironmentProfile
        /// </param>
        /// <param name="maximumNumberOfWorkers">
        /// Maximum number of instances that can be assigned to this App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.maximumNumberOfWorkers
        /// </param>
        /// <param name="geoRegion">
        /// Geographical location for the App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.geoRegion
        /// </param>
        /// <param name="isPerSiteScaling">
        /// If &lt;code&gt;true&lt;/code&gt;, apps assigned to this App Service plan can be scaled independently.
        /// If &lt;code&gt;false&lt;/code&gt;, apps assigned to this App Service plan will scale to all instances of the plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.perSiteScaling
        /// </param>
        /// <param name="isElasticScaleEnabled">
        /// ServerFarm supports ElasticScale. Apps in this plan will scale as if the ServerFarm was ElasticPremium sku
        /// Serialized Name: AppServicePlanPatchResource.properties.elasticScaleEnabled
        /// </param>
        /// <param name="maximumElasticWorkerCount">
        /// Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan
        /// Serialized Name: AppServicePlanPatchResource.properties.maximumElasticWorkerCount
        /// </param>
        /// <param name="numberOfSites">
        /// Number of apps assigned to this App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.numberOfSites
        /// </param>
        /// <param name="isSpot">
        /// If &lt;code&gt;true&lt;/code&gt;, this App Service Plan owns spot instances.
        /// Serialized Name: AppServicePlanPatchResource.properties.isSpot
        /// </param>
        /// <param name="spotExpirationOn">
        /// The time when the server farm expires. Valid only if it is a spot server farm.
        /// Serialized Name: AppServicePlanPatchResource.properties.spotExpirationTime
        /// </param>
        /// <param name="freeOfferExpirationOn">
        /// The time when the server farm free offer expires.
        /// Serialized Name: AppServicePlanPatchResource.properties.freeOfferExpirationTime
        /// </param>
        /// <param name="resourceGroup">
        /// Resource group of the App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.resourceGroup
        /// </param>
        /// <param name="isReserved">
        /// If Linux app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
        /// Serialized Name: AppServicePlanPatchResource.properties.reserved
        /// </param>
        /// <param name="isXenon">
        /// Obsolete: If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
        /// Serialized Name: AppServicePlanPatchResource.properties.isXenon
        /// </param>
        /// <param name="isHyperV">
        /// If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
        /// Serialized Name: AppServicePlanPatchResource.properties.hyperV
        /// </param>
        /// <param name="targetWorkerCount">
        /// Scaling worker count.
        /// Serialized Name: AppServicePlanPatchResource.properties.targetWorkerCount
        /// </param>
        /// <param name="targetWorkerSizeId">
        /// Scaling worker size ID.
        /// Serialized Name: AppServicePlanPatchResource.properties.targetWorkerSizeId
        /// </param>
        /// <param name="provisioningState">
        /// Provisioning state of the App Service Plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.provisioningState
        /// </param>
        /// <param name="kubeEnvironmentProfile">
        /// Specification for the Kubernetes Environment to use for the App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.kubeEnvironmentProfile
        /// </param>
        /// <param name="isZoneRedundant">
        /// If &lt;code&gt;true&lt;/code&gt;, this App Service Plan will perform availability zone balancing.
        /// If &lt;code&gt;false&lt;/code&gt;, this App Service Plan will not perform availability zone balancing.
        /// Serialized Name: AppServicePlanPatchResource.properties.zoneRedundant
        /// </param>
        /// <param name="kind">
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </param>
        internal AppServicePlanPatch(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string workerTierName, StatusOption? status, string subscription, HostingEnvironmentProfile hostingEnvironmentProfile, int? maximumNumberOfWorkers, string geoRegion, bool? isPerSiteScaling, bool? isElasticScaleEnabled, int? maximumElasticWorkerCount, int? numberOfSites, bool? isSpot, DateTimeOffset? spotExpirationOn, DateTimeOffset? freeOfferExpirationOn, string resourceGroup, bool? isReserved, bool? isXenon, bool? isHyperV, int? targetWorkerCount, int? targetWorkerSizeId, ProvisioningState? provisioningState, KubeEnvironmentProfile kubeEnvironmentProfile, bool? isZoneRedundant, string kind) : base(id, name, resourceType, systemData)
        {
            WorkerTierName = workerTierName;
            Status = status;
            Subscription = subscription;
            HostingEnvironmentProfile = hostingEnvironmentProfile;
            MaximumNumberOfWorkers = maximumNumberOfWorkers;
            GeoRegion = geoRegion;
            IsPerSiteScaling = isPerSiteScaling;
            IsElasticScaleEnabled = isElasticScaleEnabled;
            MaximumElasticWorkerCount = maximumElasticWorkerCount;
            NumberOfSites = numberOfSites;
            IsSpot = isSpot;
            SpotExpirationOn = spotExpirationOn;
            FreeOfferExpirationOn = freeOfferExpirationOn;
            ResourceGroup = resourceGroup;
            IsReserved = isReserved;
            IsXenon = isXenon;
            IsHyperV = isHyperV;
            TargetWorkerCount = targetWorkerCount;
            TargetWorkerSizeId = targetWorkerSizeId;
            ProvisioningState = provisioningState;
            KubeEnvironmentProfile = kubeEnvironmentProfile;
            IsZoneRedundant = isZoneRedundant;
            Kind = kind;
        }

        /// <summary>
        /// Target worker tier assigned to the App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.workerTierName
        /// </summary>
        public string WorkerTierName { get; set; }
        /// <summary>
        /// App Service plan status.
        /// Serialized Name: AppServicePlanPatchResource.properties.status
        /// </summary>
        public StatusOption? Status { get; }
        /// <summary>
        /// App Service plan subscription.
        /// Serialized Name: AppServicePlanPatchResource.properties.subscription
        /// </summary>
        public string Subscription { get; }
        /// <summary>
        /// Specification for the App Service Environment to use for the App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.hostingEnvironmentProfile
        /// </summary>
        public HostingEnvironmentProfile HostingEnvironmentProfile { get; set; }
        /// <summary>
        /// Maximum number of instances that can be assigned to this App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.maximumNumberOfWorkers
        /// </summary>
        public int? MaximumNumberOfWorkers { get; }
        /// <summary>
        /// Geographical location for the App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.geoRegion
        /// </summary>
        public string GeoRegion { get; }
        /// <summary>
        /// If &lt;code&gt;true&lt;/code&gt;, apps assigned to this App Service plan can be scaled independently.
        /// If &lt;code&gt;false&lt;/code&gt;, apps assigned to this App Service plan will scale to all instances of the plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.perSiteScaling
        /// </summary>
        public bool? IsPerSiteScaling { get; set; }
        /// <summary>
        /// ServerFarm supports ElasticScale. Apps in this plan will scale as if the ServerFarm was ElasticPremium sku
        /// Serialized Name: AppServicePlanPatchResource.properties.elasticScaleEnabled
        /// </summary>
        public bool? IsElasticScaleEnabled { get; set; }
        /// <summary>
        /// Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan
        /// Serialized Name: AppServicePlanPatchResource.properties.maximumElasticWorkerCount
        /// </summary>
        public int? MaximumElasticWorkerCount { get; set; }
        /// <summary>
        /// Number of apps assigned to this App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.numberOfSites
        /// </summary>
        public int? NumberOfSites { get; }
        /// <summary>
        /// If &lt;code&gt;true&lt;/code&gt;, this App Service Plan owns spot instances.
        /// Serialized Name: AppServicePlanPatchResource.properties.isSpot
        /// </summary>
        public bool? IsSpot { get; set; }
        /// <summary>
        /// The time when the server farm expires. Valid only if it is a spot server farm.
        /// Serialized Name: AppServicePlanPatchResource.properties.spotExpirationTime
        /// </summary>
        public DateTimeOffset? SpotExpirationOn { get; set; }
        /// <summary>
        /// The time when the server farm free offer expires.
        /// Serialized Name: AppServicePlanPatchResource.properties.freeOfferExpirationTime
        /// </summary>
        public DateTimeOffset? FreeOfferExpirationOn { get; set; }
        /// <summary>
        /// Resource group of the App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.resourceGroup
        /// </summary>
        public string ResourceGroup { get; }
        /// <summary>
        /// If Linux app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
        /// Serialized Name: AppServicePlanPatchResource.properties.reserved
        /// </summary>
        public bool? IsReserved { get; set; }
        /// <summary>
        /// Obsolete: If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
        /// Serialized Name: AppServicePlanPatchResource.properties.isXenon
        /// </summary>
        public bool? IsXenon { get; set; }
        /// <summary>
        /// If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
        /// Serialized Name: AppServicePlanPatchResource.properties.hyperV
        /// </summary>
        public bool? IsHyperV { get; set; }
        /// <summary>
        /// Scaling worker count.
        /// Serialized Name: AppServicePlanPatchResource.properties.targetWorkerCount
        /// </summary>
        public int? TargetWorkerCount { get; set; }
        /// <summary>
        /// Scaling worker size ID.
        /// Serialized Name: AppServicePlanPatchResource.properties.targetWorkerSizeId
        /// </summary>
        public int? TargetWorkerSizeId { get; set; }
        /// <summary>
        /// Provisioning state of the App Service Plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.provisioningState
        /// </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// Specification for the Kubernetes Environment to use for the App Service plan.
        /// Serialized Name: AppServicePlanPatchResource.properties.kubeEnvironmentProfile
        /// </summary>
        public KubeEnvironmentProfile KubeEnvironmentProfile { get; set; }
        /// <summary>
        /// If &lt;code&gt;true&lt;/code&gt;, this App Service Plan will perform availability zone balancing.
        /// If &lt;code&gt;false&lt;/code&gt;, this App Service Plan will not perform availability zone balancing.
        /// Serialized Name: AppServicePlanPatchResource.properties.zoneRedundant
        /// </summary>
        public bool? IsZoneRedundant { get; set; }
        /// <summary>
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </summary>
        public string Kind { get; set; }
    }
}
