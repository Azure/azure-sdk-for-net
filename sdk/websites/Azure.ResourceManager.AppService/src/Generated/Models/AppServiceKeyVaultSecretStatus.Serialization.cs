// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class AppServiceKeyVaultSecretStatusExtensions
    {
        public static string ToSerialString(this AppServiceKeyVaultSecretStatus value) => value switch
        {
            AppServiceKeyVaultSecretStatus.Unknown => "Unknown",
            AppServiceKeyVaultSecretStatus.Initialized => "Initialized",
            AppServiceKeyVaultSecretStatus.WaitingOnCertificateOrder => "WaitingOnCertificateOrder",
            AppServiceKeyVaultSecretStatus.Succeeded => "Succeeded",
            AppServiceKeyVaultSecretStatus.CertificateOrderFailed => "CertificateOrderFailed",
            AppServiceKeyVaultSecretStatus.OperationNotPermittedOnKeyVault => "OperationNotPermittedOnKeyVault",
            AppServiceKeyVaultSecretStatus.AzureServiceUnauthorizedToAccessKeyVault => "AzureServiceUnauthorizedToAccessKeyVault",
            AppServiceKeyVaultSecretStatus.KeyVaultDoesNotExist => "KeyVaultDoesNotExist",
            AppServiceKeyVaultSecretStatus.KeyVaultSecretDoesNotExist => "KeyVaultSecretDoesNotExist",
            AppServiceKeyVaultSecretStatus.UnknownError => "UnknownError",
            AppServiceKeyVaultSecretStatus.ExternalPrivateKey => "ExternalPrivateKey",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown AppServiceKeyVaultSecretStatus value.")
        };

        public static AppServiceKeyVaultSecretStatus ToAppServiceKeyVaultSecretStatus(this string value)
        {
            if (string.Equals(value, "Unknown", StringComparison.InvariantCultureIgnoreCase)) return AppServiceKeyVaultSecretStatus.Unknown;
            if (string.Equals(value, "Initialized", StringComparison.InvariantCultureIgnoreCase)) return AppServiceKeyVaultSecretStatus.Initialized;
            if (string.Equals(value, "WaitingOnCertificateOrder", StringComparison.InvariantCultureIgnoreCase)) return AppServiceKeyVaultSecretStatus.WaitingOnCertificateOrder;
            if (string.Equals(value, "Succeeded", StringComparison.InvariantCultureIgnoreCase)) return AppServiceKeyVaultSecretStatus.Succeeded;
            if (string.Equals(value, "CertificateOrderFailed", StringComparison.InvariantCultureIgnoreCase)) return AppServiceKeyVaultSecretStatus.CertificateOrderFailed;
            if (string.Equals(value, "OperationNotPermittedOnKeyVault", StringComparison.InvariantCultureIgnoreCase)) return AppServiceKeyVaultSecretStatus.OperationNotPermittedOnKeyVault;
            if (string.Equals(value, "AzureServiceUnauthorizedToAccessKeyVault", StringComparison.InvariantCultureIgnoreCase)) return AppServiceKeyVaultSecretStatus.AzureServiceUnauthorizedToAccessKeyVault;
            if (string.Equals(value, "KeyVaultDoesNotExist", StringComparison.InvariantCultureIgnoreCase)) return AppServiceKeyVaultSecretStatus.KeyVaultDoesNotExist;
            if (string.Equals(value, "KeyVaultSecretDoesNotExist", StringComparison.InvariantCultureIgnoreCase)) return AppServiceKeyVaultSecretStatus.KeyVaultSecretDoesNotExist;
            if (string.Equals(value, "UnknownError", StringComparison.InvariantCultureIgnoreCase)) return AppServiceKeyVaultSecretStatus.UnknownError;
            if (string.Equals(value, "ExternalPrivateKey", StringComparison.InvariantCultureIgnoreCase)) return AppServiceKeyVaultSecretStatus.ExternalPrivateKey;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown AppServiceKeyVaultSecretStatus value.");
        }
    }
}
