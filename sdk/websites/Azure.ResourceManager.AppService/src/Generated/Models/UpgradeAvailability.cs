// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Whether an upgrade is available for this App Service Environment. </summary>
    public readonly partial struct UpgradeAvailability : IEquatable<UpgradeAvailability>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UpgradeAvailability"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UpgradeAvailability(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string ReadyValue = "Ready";

        /// <summary> No upgrade is currently available for this App Service Environment. </summary>
        public static UpgradeAvailability None { get; } = new UpgradeAvailability(NoneValue);
        /// <summary> An upgrade is ready to be manually initiated on this App Service Environment. </summary>
        public static UpgradeAvailability Ready { get; } = new UpgradeAvailability(ReadyValue);
        /// <summary> Determines if two <see cref="UpgradeAvailability"/> values are the same. </summary>
        public static bool operator ==(UpgradeAvailability left, UpgradeAvailability right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UpgradeAvailability"/> values are not the same. </summary>
        public static bool operator !=(UpgradeAvailability left, UpgradeAvailability right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UpgradeAvailability"/>. </summary>
        public static implicit operator UpgradeAvailability(string value) => new UpgradeAvailability(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UpgradeAvailability other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UpgradeAvailability other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
