// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> The SiteContainerVolumeMount. </summary>
    public partial class SiteContainerVolumeMount
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SiteContainerVolumeMount"/>. </summary>
        /// <param name="volumeSubPath"> Sub path in the volume where volume is mounted from. </param>
        /// <param name="containerMountPath"> Target path on the container where volume is mounted on. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="volumeSubPath"/> or <paramref name="containerMountPath"/> is null. </exception>
        public SiteContainerVolumeMount(string volumeSubPath, string containerMountPath)
        {
            Argument.AssertNotNull(volumeSubPath, nameof(volumeSubPath));
            Argument.AssertNotNull(containerMountPath, nameof(containerMountPath));

            VolumeSubPath = volumeSubPath;
            ContainerMountPath = containerMountPath;
        }

        /// <summary> Initializes a new instance of <see cref="SiteContainerVolumeMount"/>. </summary>
        /// <param name="volumeSubPath"> Sub path in the volume where volume is mounted from. </param>
        /// <param name="containerMountPath"> Target path on the container where volume is mounted on. </param>
        /// <param name="data"> Config Data to be mounted on the volume. </param>
        /// <param name="isReadOnly"> Boolean to specify if the mount is read only on the container. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SiteContainerVolumeMount(string volumeSubPath, string containerMountPath, string data, bool? isReadOnly, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            VolumeSubPath = volumeSubPath;
            ContainerMountPath = containerMountPath;
            Data = data;
            IsReadOnly = isReadOnly;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SiteContainerVolumeMount"/> for deserialization. </summary>
        internal SiteContainerVolumeMount()
        {
        }

        /// <summary> Sub path in the volume where volume is mounted from. </summary>
        [WirePath("volumeSubPath")]
        public string VolumeSubPath { get; set; }
        /// <summary> Target path on the container where volume is mounted on. </summary>
        [WirePath("containerMountPath")]
        public string ContainerMountPath { get; set; }
        /// <summary> Config Data to be mounted on the volume. </summary>
        [WirePath("data")]
        public string Data { get; set; }
        /// <summary> Boolean to specify if the mount is read only on the container. </summary>
        [WirePath("readOnly")]
        public bool? IsReadOnly { get; set; }
    }
}
