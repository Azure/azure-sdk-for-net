// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Upgrade Preference. </summary>
    public readonly partial struct AppServiceEnvironmentUpgradePreference : IEquatable<AppServiceEnvironmentUpgradePreference>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AppServiceEnvironmentUpgradePreference"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AppServiceEnvironmentUpgradePreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string EarlyValue = "Early";
        private const string LateValue = "Late";
        private const string ManualValue = "Manual";

        /// <summary> No preference on when this App Service Environment will be upgraded. </summary>
        public static AppServiceEnvironmentUpgradePreference None { get; } = new AppServiceEnvironmentUpgradePreference(NoneValue);
        /// <summary> This App Service Environment will be upgraded before others in the same region that have Upgrade Preference 'Late'. </summary>
        public static AppServiceEnvironmentUpgradePreference Early { get; } = new AppServiceEnvironmentUpgradePreference(EarlyValue);
        /// <summary> This App Service Environment will be upgraded after others in the same region that have Upgrade Preference 'Early'. </summary>
        public static AppServiceEnvironmentUpgradePreference Late { get; } = new AppServiceEnvironmentUpgradePreference(LateValue);
        /// <summary> ASEv3 only. Once an upgrade is available, this App Service Environment will wait 10 days for the upgrade to be manually initiated. After 10 days the upgrade will begin automatically. </summary>
        public static AppServiceEnvironmentUpgradePreference Manual { get; } = new AppServiceEnvironmentUpgradePreference(ManualValue);
        /// <summary> Determines if two <see cref="AppServiceEnvironmentUpgradePreference"/> values are the same. </summary>
        public static bool operator ==(AppServiceEnvironmentUpgradePreference left, AppServiceEnvironmentUpgradePreference right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AppServiceEnvironmentUpgradePreference"/> values are not the same. </summary>
        public static bool operator !=(AppServiceEnvironmentUpgradePreference left, AppServiceEnvironmentUpgradePreference right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AppServiceEnvironmentUpgradePreference"/>. </summary>
        public static implicit operator AppServiceEnvironmentUpgradePreference(string value) => new AppServiceEnvironmentUpgradePreference(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AppServiceEnvironmentUpgradePreference other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AppServiceEnvironmentUpgradePreference other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
