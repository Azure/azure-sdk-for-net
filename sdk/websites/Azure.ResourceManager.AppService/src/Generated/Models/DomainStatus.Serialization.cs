// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class DomainStatusExtensions
    {
        public static string ToSerialString(this DomainStatus value) => value switch
        {
            DomainStatus.Active => "Active",
            DomainStatus.Awaiting => "Awaiting",
            DomainStatus.Cancelled => "Cancelled",
            DomainStatus.Confiscated => "Confiscated",
            DomainStatus.Disabled => "Disabled",
            DomainStatus.Excluded => "Excluded",
            DomainStatus.Expired => "Expired",
            DomainStatus.Failed => "Failed",
            DomainStatus.Held => "Held",
            DomainStatus.Locked => "Locked",
            DomainStatus.Parked => "Parked",
            DomainStatus.Pending => "Pending",
            DomainStatus.Reserved => "Reserved",
            DomainStatus.Reverted => "Reverted",
            DomainStatus.Suspended => "Suspended",
            DomainStatus.Transferred => "Transferred",
            DomainStatus.Unknown => "Unknown",
            DomainStatus.Unlocked => "Unlocked",
            DomainStatus.Unparked => "Unparked",
            DomainStatus.Updated => "Updated",
            DomainStatus.JsonConverterFailed => "JsonConverterFailed",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DomainStatus value.")
        };

        public static DomainStatus ToDomainStatus(this string value)
        {
            if (string.Equals(value, "Active", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Active;
            if (string.Equals(value, "Awaiting", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Awaiting;
            if (string.Equals(value, "Cancelled", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Cancelled;
            if (string.Equals(value, "Confiscated", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Confiscated;
            if (string.Equals(value, "Disabled", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Disabled;
            if (string.Equals(value, "Excluded", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Excluded;
            if (string.Equals(value, "Expired", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Expired;
            if (string.Equals(value, "Failed", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Failed;
            if (string.Equals(value, "Held", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Held;
            if (string.Equals(value, "Locked", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Locked;
            if (string.Equals(value, "Parked", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Parked;
            if (string.Equals(value, "Pending", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Pending;
            if (string.Equals(value, "Reserved", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Reserved;
            if (string.Equals(value, "Reverted", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Reverted;
            if (string.Equals(value, "Suspended", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Suspended;
            if (string.Equals(value, "Transferred", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Transferred;
            if (string.Equals(value, "Unknown", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Unknown;
            if (string.Equals(value, "Unlocked", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Unlocked;
            if (string.Equals(value, "Unparked", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Unparked;
            if (string.Equals(value, "Updated", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.Updated;
            if (string.Equals(value, "JsonConverterFailed", StringComparison.InvariantCultureIgnoreCase)) return DomainStatus.JsonConverterFailed;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DomainStatus value.");
        }
    }
}
