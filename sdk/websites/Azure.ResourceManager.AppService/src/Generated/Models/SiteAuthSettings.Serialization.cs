// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class SiteAuthSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(IsEnabled))
            {
                writer.WritePropertyName("enabled"u8);
                writer.WriteBooleanValue(IsEnabled.Value);
            }
            if (Optional.IsDefined(RuntimeVersion))
            {
                writer.WritePropertyName("runtimeVersion"u8);
                writer.WriteStringValue(RuntimeVersion);
            }
            if (Optional.IsDefined(UnauthenticatedClientAction))
            {
                writer.WritePropertyName("unauthenticatedClientAction"u8);
                writer.WriteStringValue(UnauthenticatedClientAction.Value.ToSerialString());
            }
            if (Optional.IsDefined(IsTokenStoreEnabled))
            {
                writer.WritePropertyName("tokenStoreEnabled"u8);
                writer.WriteBooleanValue(IsTokenStoreEnabled.Value);
            }
            if (Optional.IsCollectionDefined(AllowedExternalRedirectUrls))
            {
                writer.WritePropertyName("allowedExternalRedirectUrls"u8);
                writer.WriteStartArray();
                foreach (var item in AllowedExternalRedirectUrls)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DefaultProvider))
            {
                writer.WritePropertyName("defaultProvider"u8);
                writer.WriteStringValue(DefaultProvider.Value.ToSerialString());
            }
            if (Optional.IsDefined(TokenRefreshExtensionHours))
            {
                writer.WritePropertyName("tokenRefreshExtensionHours"u8);
                writer.WriteNumberValue(TokenRefreshExtensionHours.Value);
            }
            if (Optional.IsDefined(ClientId))
            {
                writer.WritePropertyName("clientId"u8);
                writer.WriteStringValue(ClientId);
            }
            if (Optional.IsDefined(ClientSecret))
            {
                writer.WritePropertyName("clientSecret"u8);
                writer.WriteStringValue(ClientSecret);
            }
            if (Optional.IsDefined(ClientSecretSettingName))
            {
                writer.WritePropertyName("clientSecretSettingName"u8);
                writer.WriteStringValue(ClientSecretSettingName);
            }
            if (Optional.IsDefined(ClientSecretCertificateThumbprintString))
            {
                writer.WritePropertyName("clientSecretCertificateThumbprint"u8);
                writer.WriteStringValue(ClientSecretCertificateThumbprintString);
            }
            if (Optional.IsDefined(Issuer))
            {
                writer.WritePropertyName("issuer"u8);
                writer.WriteStringValue(Issuer);
            }
            if (Optional.IsDefined(ValidateIssuer))
            {
                writer.WritePropertyName("validateIssuer"u8);
                writer.WriteBooleanValue(ValidateIssuer.Value);
            }
            if (Optional.IsCollectionDefined(AllowedAudiences))
            {
                writer.WritePropertyName("allowedAudiences"u8);
                writer.WriteStartArray();
                foreach (var item in AllowedAudiences)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AdditionalLoginParams))
            {
                writer.WritePropertyName("additionalLoginParams"u8);
                writer.WriteStartArray();
                foreach (var item in AdditionalLoginParams)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AadClaimsAuthorization))
            {
                writer.WritePropertyName("aadClaimsAuthorization"u8);
                writer.WriteStringValue(AadClaimsAuthorization);
            }
            if (Optional.IsDefined(GoogleClientId))
            {
                writer.WritePropertyName("googleClientId"u8);
                writer.WriteStringValue(GoogleClientId);
            }
            if (Optional.IsDefined(GoogleClientSecret))
            {
                writer.WritePropertyName("googleClientSecret"u8);
                writer.WriteStringValue(GoogleClientSecret);
            }
            if (Optional.IsDefined(GoogleClientSecretSettingName))
            {
                writer.WritePropertyName("googleClientSecretSettingName"u8);
                writer.WriteStringValue(GoogleClientSecretSettingName);
            }
            if (Optional.IsCollectionDefined(GoogleOAuthScopes))
            {
                writer.WritePropertyName("googleOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in GoogleOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(FacebookAppId))
            {
                writer.WritePropertyName("facebookAppId"u8);
                writer.WriteStringValue(FacebookAppId);
            }
            if (Optional.IsDefined(FacebookAppSecret))
            {
                writer.WritePropertyName("facebookAppSecret"u8);
                writer.WriteStringValue(FacebookAppSecret);
            }
            if (Optional.IsDefined(FacebookAppSecretSettingName))
            {
                writer.WritePropertyName("facebookAppSecretSettingName"u8);
                writer.WriteStringValue(FacebookAppSecretSettingName);
            }
            if (Optional.IsCollectionDefined(FacebookOAuthScopes))
            {
                writer.WritePropertyName("facebookOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in FacebookOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(GitHubClientId))
            {
                writer.WritePropertyName("gitHubClientId"u8);
                writer.WriteStringValue(GitHubClientId);
            }
            if (Optional.IsDefined(GitHubClientSecret))
            {
                writer.WritePropertyName("gitHubClientSecret"u8);
                writer.WriteStringValue(GitHubClientSecret);
            }
            if (Optional.IsDefined(GitHubClientSecretSettingName))
            {
                writer.WritePropertyName("gitHubClientSecretSettingName"u8);
                writer.WriteStringValue(GitHubClientSecretSettingName);
            }
            if (Optional.IsCollectionDefined(GitHubOAuthScopes))
            {
                writer.WritePropertyName("gitHubOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in GitHubOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TwitterConsumerKey))
            {
                writer.WritePropertyName("twitterConsumerKey"u8);
                writer.WriteStringValue(TwitterConsumerKey);
            }
            if (Optional.IsDefined(TwitterConsumerSecret))
            {
                writer.WritePropertyName("twitterConsumerSecret"u8);
                writer.WriteStringValue(TwitterConsumerSecret);
            }
            if (Optional.IsDefined(TwitterConsumerSecretSettingName))
            {
                writer.WritePropertyName("twitterConsumerSecretSettingName"u8);
                writer.WriteStringValue(TwitterConsumerSecretSettingName);
            }
            if (Optional.IsDefined(MicrosoftAccountClientId))
            {
                writer.WritePropertyName("microsoftAccountClientId"u8);
                writer.WriteStringValue(MicrosoftAccountClientId);
            }
            if (Optional.IsDefined(MicrosoftAccountClientSecret))
            {
                writer.WritePropertyName("microsoftAccountClientSecret"u8);
                writer.WriteStringValue(MicrosoftAccountClientSecret);
            }
            if (Optional.IsDefined(MicrosoftAccountClientSecretSettingName))
            {
                writer.WritePropertyName("microsoftAccountClientSecretSettingName"u8);
                writer.WriteStringValue(MicrosoftAccountClientSecretSettingName);
            }
            if (Optional.IsCollectionDefined(MicrosoftAccountOAuthScopes))
            {
                writer.WritePropertyName("microsoftAccountOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in MicrosoftAccountOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsAuthFromFile))
            {
                writer.WritePropertyName("isAuthFromFile"u8);
                writer.WriteStringValue(IsAuthFromFile);
            }
            if (Optional.IsDefined(AuthFilePath))
            {
                writer.WritePropertyName("authFilePath"u8);
                writer.WriteStringValue(AuthFilePath);
            }
            if (Optional.IsDefined(ConfigVersion))
            {
                writer.WritePropertyName("configVersion"u8);
                writer.WriteStringValue(ConfigVersion);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SiteAuthSettings DeserializeSiteAuthSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<bool> enabled = default;
            Optional<string> runtimeVersion = default;
            Optional<UnauthenticatedClientAction> unauthenticatedClientAction = default;
            Optional<bool> tokenStoreEnabled = default;
            Optional<IList<string>> allowedExternalRedirectUrls = default;
            Optional<BuiltInAuthenticationProvider> defaultProvider = default;
            Optional<double> tokenRefreshExtensionHours = default;
            Optional<string> clientId = default;
            Optional<string> clientSecret = default;
            Optional<string> clientSecretSettingName = default;
            Optional<string> clientSecretCertificateThumbprint = default;
            Optional<string> issuer = default;
            Optional<bool> validateIssuer = default;
            Optional<IList<string>> allowedAudiences = default;
            Optional<IList<string>> additionalLoginParams = default;
            Optional<string> aadClaimsAuthorization = default;
            Optional<string> googleClientId = default;
            Optional<string> googleClientSecret = default;
            Optional<string> googleClientSecretSettingName = default;
            Optional<IList<string>> googleOAuthScopes = default;
            Optional<string> facebookAppId = default;
            Optional<string> facebookAppSecret = default;
            Optional<string> facebookAppSecretSettingName = default;
            Optional<IList<string>> facebookOAuthScopes = default;
            Optional<string> gitHubClientId = default;
            Optional<string> gitHubClientSecret = default;
            Optional<string> gitHubClientSecretSettingName = default;
            Optional<IList<string>> gitHubOAuthScopes = default;
            Optional<string> twitterConsumerKey = default;
            Optional<string> twitterConsumerSecret = default;
            Optional<string> twitterConsumerSecretSettingName = default;
            Optional<string> microsoftAccountClientId = default;
            Optional<string> microsoftAccountClientSecret = default;
            Optional<string> microsoftAccountClientSecretSettingName = default;
            Optional<IList<string>> microsoftAccountOAuthScopes = default;
            Optional<string> isAuthFromFile = default;
            Optional<string> authFilePath = default;
            Optional<string> configVersion = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("enabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("runtimeVersion"u8))
                        {
                            runtimeVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("unauthenticatedClientAction"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            unauthenticatedClientAction = property0.Value.GetString().ToUnauthenticatedClientAction();
                            continue;
                        }
                        if (property0.NameEquals("tokenStoreEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            tokenStoreEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("allowedExternalRedirectUrls"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            allowedExternalRedirectUrls = array;
                            continue;
                        }
                        if (property0.NameEquals("defaultProvider"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            defaultProvider = property0.Value.GetString().ToBuiltInAuthenticationProvider();
                            continue;
                        }
                        if (property0.NameEquals("tokenRefreshExtensionHours"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            tokenRefreshExtensionHours = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("clientId"u8))
                        {
                            clientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientSecret"u8))
                        {
                            clientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientSecretSettingName"u8))
                        {
                            clientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientSecretCertificateThumbprint"u8))
                        {
                            clientSecretCertificateThumbprint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("issuer"u8))
                        {
                            issuer = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("validateIssuer"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            validateIssuer = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("allowedAudiences"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            allowedAudiences = array;
                            continue;
                        }
                        if (property0.NameEquals("additionalLoginParams"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            additionalLoginParams = array;
                            continue;
                        }
                        if (property0.NameEquals("aadClaimsAuthorization"u8))
                        {
                            aadClaimsAuthorization = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleClientId"u8))
                        {
                            googleClientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleClientSecret"u8))
                        {
                            googleClientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleClientSecretSettingName"u8))
                        {
                            googleClientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            googleOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("facebookAppId"u8))
                        {
                            facebookAppId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("facebookAppSecret"u8))
                        {
                            facebookAppSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("facebookAppSecretSettingName"u8))
                        {
                            facebookAppSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("facebookOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            facebookOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("gitHubClientId"u8))
                        {
                            gitHubClientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("gitHubClientSecret"u8))
                        {
                            gitHubClientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("gitHubClientSecretSettingName"u8))
                        {
                            gitHubClientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("gitHubOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            gitHubOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("twitterConsumerKey"u8))
                        {
                            twitterConsumerKey = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("twitterConsumerSecret"u8))
                        {
                            twitterConsumerSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("twitterConsumerSecretSettingName"u8))
                        {
                            twitterConsumerSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountClientId"u8))
                        {
                            microsoftAccountClientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountClientSecret"u8))
                        {
                            microsoftAccountClientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountClientSecretSettingName"u8))
                        {
                            microsoftAccountClientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            microsoftAccountOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("isAuthFromFile"u8))
                        {
                            isAuthFromFile = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("authFilePath"u8))
                        {
                            authFilePath = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("configVersion"u8))
                        {
                            configVersion = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SiteAuthSettings(id, name, type, systemData.Value, Optional.ToNullable(enabled), runtimeVersion.Value, Optional.ToNullable(unauthenticatedClientAction), Optional.ToNullable(tokenStoreEnabled), Optional.ToList(allowedExternalRedirectUrls), Optional.ToNullable(defaultProvider), Optional.ToNullable(tokenRefreshExtensionHours), clientId.Value, clientSecret.Value, clientSecretSettingName.Value, clientSecretCertificateThumbprint.Value, issuer.Value, Optional.ToNullable(validateIssuer), Optional.ToList(allowedAudiences), Optional.ToList(additionalLoginParams), aadClaimsAuthorization.Value, googleClientId.Value, googleClientSecret.Value, googleClientSecretSettingName.Value, Optional.ToList(googleOAuthScopes), facebookAppId.Value, facebookAppSecret.Value, facebookAppSecretSettingName.Value, Optional.ToList(facebookOAuthScopes), gitHubClientId.Value, gitHubClientSecret.Value, gitHubClientSecretSettingName.Value, Optional.ToList(gitHubOAuthScopes), twitterConsumerKey.Value, twitterConsumerSecret.Value, twitterConsumerSecretSettingName.Value, microsoftAccountClientId.Value, microsoftAccountClientSecret.Value, microsoftAccountClientSecretSettingName.Value, Optional.ToList(microsoftAccountOAuthScopes), isAuthFromFile.Value, authFilePath.Value, configVersion.Value, kind.Value);
        }
    }
}
