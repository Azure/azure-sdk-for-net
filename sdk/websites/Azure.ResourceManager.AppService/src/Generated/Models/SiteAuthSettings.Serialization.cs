// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class SiteAuthSettings : IUtf8JsonSerializable, IJsonModel<SiteAuthSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SiteAuthSettings>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SiteAuthSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteAuthSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SiteAuthSettings)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(IsEnabled))
            {
                writer.WritePropertyName("enabled"u8);
                writer.WriteBooleanValue(IsEnabled.Value);
            }
            if (Optional.IsDefined(RuntimeVersion))
            {
                writer.WritePropertyName("runtimeVersion"u8);
                writer.WriteStringValue(RuntimeVersion);
            }
            if (Optional.IsDefined(UnauthenticatedClientAction))
            {
                writer.WritePropertyName("unauthenticatedClientAction"u8);
                writer.WriteStringValue(UnauthenticatedClientAction.Value.ToSerialString());
            }
            if (Optional.IsDefined(IsTokenStoreEnabled))
            {
                writer.WritePropertyName("tokenStoreEnabled"u8);
                writer.WriteBooleanValue(IsTokenStoreEnabled.Value);
            }
            if (Optional.IsCollectionDefined(AllowedExternalRedirectUrls))
            {
                writer.WritePropertyName("allowedExternalRedirectUrls"u8);
                writer.WriteStartArray();
                foreach (var item in AllowedExternalRedirectUrls)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DefaultProvider))
            {
                writer.WritePropertyName("defaultProvider"u8);
                writer.WriteStringValue(DefaultProvider.Value.ToSerialString());
            }
            if (Optional.IsDefined(TokenRefreshExtensionHours))
            {
                writer.WritePropertyName("tokenRefreshExtensionHours"u8);
                writer.WriteNumberValue(TokenRefreshExtensionHours.Value);
            }
            if (Optional.IsDefined(ClientId))
            {
                writer.WritePropertyName("clientId"u8);
                writer.WriteStringValue(ClientId);
            }
            if (Optional.IsDefined(ClientSecret))
            {
                writer.WritePropertyName("clientSecret"u8);
                writer.WriteStringValue(ClientSecret);
            }
            if (Optional.IsDefined(ClientSecretSettingName))
            {
                writer.WritePropertyName("clientSecretSettingName"u8);
                writer.WriteStringValue(ClientSecretSettingName);
            }
            if (Optional.IsDefined(ClientSecretCertificateThumbprintString))
            {
                writer.WritePropertyName("clientSecretCertificateThumbprint"u8);
                writer.WriteStringValue(ClientSecretCertificateThumbprintString);
            }
            if (Optional.IsDefined(Issuer))
            {
                writer.WritePropertyName("issuer"u8);
                writer.WriteStringValue(Issuer);
            }
            if (Optional.IsDefined(ValidateIssuer))
            {
                writer.WritePropertyName("validateIssuer"u8);
                writer.WriteBooleanValue(ValidateIssuer.Value);
            }
            if (Optional.IsCollectionDefined(AllowedAudiences))
            {
                writer.WritePropertyName("allowedAudiences"u8);
                writer.WriteStartArray();
                foreach (var item in AllowedAudiences)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AdditionalLoginParams))
            {
                writer.WritePropertyName("additionalLoginParams"u8);
                writer.WriteStartArray();
                foreach (var item in AdditionalLoginParams)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AadClaimsAuthorization))
            {
                writer.WritePropertyName("aadClaimsAuthorization"u8);
                writer.WriteStringValue(AadClaimsAuthorization);
            }
            if (Optional.IsDefined(GoogleClientId))
            {
                writer.WritePropertyName("googleClientId"u8);
                writer.WriteStringValue(GoogleClientId);
            }
            if (Optional.IsDefined(GoogleClientSecret))
            {
                writer.WritePropertyName("googleClientSecret"u8);
                writer.WriteStringValue(GoogleClientSecret);
            }
            if (Optional.IsDefined(GoogleClientSecretSettingName))
            {
                writer.WritePropertyName("googleClientSecretSettingName"u8);
                writer.WriteStringValue(GoogleClientSecretSettingName);
            }
            if (Optional.IsCollectionDefined(GoogleOAuthScopes))
            {
                writer.WritePropertyName("googleOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in GoogleOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(FacebookAppId))
            {
                writer.WritePropertyName("facebookAppId"u8);
                writer.WriteStringValue(FacebookAppId);
            }
            if (Optional.IsDefined(FacebookAppSecret))
            {
                writer.WritePropertyName("facebookAppSecret"u8);
                writer.WriteStringValue(FacebookAppSecret);
            }
            if (Optional.IsDefined(FacebookAppSecretSettingName))
            {
                writer.WritePropertyName("facebookAppSecretSettingName"u8);
                writer.WriteStringValue(FacebookAppSecretSettingName);
            }
            if (Optional.IsCollectionDefined(FacebookOAuthScopes))
            {
                writer.WritePropertyName("facebookOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in FacebookOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(GitHubClientId))
            {
                writer.WritePropertyName("gitHubClientId"u8);
                writer.WriteStringValue(GitHubClientId);
            }
            if (Optional.IsDefined(GitHubClientSecret))
            {
                writer.WritePropertyName("gitHubClientSecret"u8);
                writer.WriteStringValue(GitHubClientSecret);
            }
            if (Optional.IsDefined(GitHubClientSecretSettingName))
            {
                writer.WritePropertyName("gitHubClientSecretSettingName"u8);
                writer.WriteStringValue(GitHubClientSecretSettingName);
            }
            if (Optional.IsCollectionDefined(GitHubOAuthScopes))
            {
                writer.WritePropertyName("gitHubOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in GitHubOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TwitterConsumerKey))
            {
                writer.WritePropertyName("twitterConsumerKey"u8);
                writer.WriteStringValue(TwitterConsumerKey);
            }
            if (Optional.IsDefined(TwitterConsumerSecret))
            {
                writer.WritePropertyName("twitterConsumerSecret"u8);
                writer.WriteStringValue(TwitterConsumerSecret);
            }
            if (Optional.IsDefined(TwitterConsumerSecretSettingName))
            {
                writer.WritePropertyName("twitterConsumerSecretSettingName"u8);
                writer.WriteStringValue(TwitterConsumerSecretSettingName);
            }
            if (Optional.IsDefined(MicrosoftAccountClientId))
            {
                writer.WritePropertyName("microsoftAccountClientId"u8);
                writer.WriteStringValue(MicrosoftAccountClientId);
            }
            if (Optional.IsDefined(MicrosoftAccountClientSecret))
            {
                writer.WritePropertyName("microsoftAccountClientSecret"u8);
                writer.WriteStringValue(MicrosoftAccountClientSecret);
            }
            if (Optional.IsDefined(MicrosoftAccountClientSecretSettingName))
            {
                writer.WritePropertyName("microsoftAccountClientSecretSettingName"u8);
                writer.WriteStringValue(MicrosoftAccountClientSecretSettingName);
            }
            if (Optional.IsCollectionDefined(MicrosoftAccountOAuthScopes))
            {
                writer.WritePropertyName("microsoftAccountOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in MicrosoftAccountOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsAuthFromFile))
            {
                writer.WritePropertyName("isAuthFromFile"u8);
                writer.WriteStringValue(IsAuthFromFile);
            }
            if (Optional.IsDefined(AuthFilePath))
            {
                writer.WritePropertyName("authFilePath"u8);
                writer.WriteStringValue(AuthFilePath);
            }
            if (Optional.IsDefined(ConfigVersion))
            {
                writer.WritePropertyName("configVersion"u8);
                writer.WriteStringValue(ConfigVersion);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SiteAuthSettings IJsonModel<SiteAuthSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteAuthSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SiteAuthSettings)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSiteAuthSettings(document.RootElement, options);
        }

        internal static SiteAuthSettings DeserializeSiteAuthSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            bool? enabled = default;
            string runtimeVersion = default;
            UnauthenticatedClientAction? unauthenticatedClientAction = default;
            bool? tokenStoreEnabled = default;
            IList<string> allowedExternalRedirectUrls = default;
            BuiltInAuthenticationProvider? defaultProvider = default;
            double? tokenRefreshExtensionHours = default;
            string clientId = default;
            string clientSecret = default;
            string clientSecretSettingName = default;
            string clientSecretCertificateThumbprint = default;
            string issuer = default;
            bool? validateIssuer = default;
            IList<string> allowedAudiences = default;
            IList<string> additionalLoginParams = default;
            string aadClaimsAuthorization = default;
            string googleClientId = default;
            string googleClientSecret = default;
            string googleClientSecretSettingName = default;
            IList<string> googleOAuthScopes = default;
            string facebookAppId = default;
            string facebookAppSecret = default;
            string facebookAppSecretSettingName = default;
            IList<string> facebookOAuthScopes = default;
            string gitHubClientId = default;
            string gitHubClientSecret = default;
            string gitHubClientSecretSettingName = default;
            IList<string> gitHubOAuthScopes = default;
            string twitterConsumerKey = default;
            string twitterConsumerSecret = default;
            string twitterConsumerSecretSettingName = default;
            string microsoftAccountClientId = default;
            string microsoftAccountClientSecret = default;
            string microsoftAccountClientSecretSettingName = default;
            IList<string> microsoftAccountOAuthScopes = default;
            string isAuthFromFile = default;
            string authFilePath = default;
            string configVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("enabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("runtimeVersion"u8))
                        {
                            runtimeVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("unauthenticatedClientAction"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            unauthenticatedClientAction = property0.Value.GetString().ToUnauthenticatedClientAction();
                            continue;
                        }
                        if (property0.NameEquals("tokenStoreEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            tokenStoreEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("allowedExternalRedirectUrls"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            allowedExternalRedirectUrls = array;
                            continue;
                        }
                        if (property0.NameEquals("defaultProvider"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            defaultProvider = property0.Value.GetString().ToBuiltInAuthenticationProvider();
                            continue;
                        }
                        if (property0.NameEquals("tokenRefreshExtensionHours"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            tokenRefreshExtensionHours = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("clientId"u8))
                        {
                            clientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientSecret"u8))
                        {
                            clientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientSecretSettingName"u8))
                        {
                            clientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientSecretCertificateThumbprint"u8))
                        {
                            clientSecretCertificateThumbprint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("issuer"u8))
                        {
                            issuer = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("validateIssuer"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            validateIssuer = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("allowedAudiences"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            allowedAudiences = array;
                            continue;
                        }
                        if (property0.NameEquals("additionalLoginParams"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            additionalLoginParams = array;
                            continue;
                        }
                        if (property0.NameEquals("aadClaimsAuthorization"u8))
                        {
                            aadClaimsAuthorization = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleClientId"u8))
                        {
                            googleClientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleClientSecret"u8))
                        {
                            googleClientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleClientSecretSettingName"u8))
                        {
                            googleClientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            googleOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("facebookAppId"u8))
                        {
                            facebookAppId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("facebookAppSecret"u8))
                        {
                            facebookAppSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("facebookAppSecretSettingName"u8))
                        {
                            facebookAppSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("facebookOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            facebookOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("gitHubClientId"u8))
                        {
                            gitHubClientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("gitHubClientSecret"u8))
                        {
                            gitHubClientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("gitHubClientSecretSettingName"u8))
                        {
                            gitHubClientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("gitHubOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            gitHubOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("twitterConsumerKey"u8))
                        {
                            twitterConsumerKey = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("twitterConsumerSecret"u8))
                        {
                            twitterConsumerSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("twitterConsumerSecretSettingName"u8))
                        {
                            twitterConsumerSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountClientId"u8))
                        {
                            microsoftAccountClientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountClientSecret"u8))
                        {
                            microsoftAccountClientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountClientSecretSettingName"u8))
                        {
                            microsoftAccountClientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            microsoftAccountOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("isAuthFromFile"u8))
                        {
                            isAuthFromFile = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("authFilePath"u8))
                        {
                            authFilePath = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("configVersion"u8))
                        {
                            configVersion = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SiteAuthSettings(
                id,
                name,
                type,
                systemData,
                enabled,
                runtimeVersion,
                unauthenticatedClientAction,
                tokenStoreEnabled,
                allowedExternalRedirectUrls ?? new ChangeTrackingList<string>(),
                defaultProvider,
                tokenRefreshExtensionHours,
                clientId,
                clientSecret,
                clientSecretSettingName,
                clientSecretCertificateThumbprint,
                issuer,
                validateIssuer,
                allowedAudiences ?? new ChangeTrackingList<string>(),
                additionalLoginParams ?? new ChangeTrackingList<string>(),
                aadClaimsAuthorization,
                googleClientId,
                googleClientSecret,
                googleClientSecretSettingName,
                googleOAuthScopes ?? new ChangeTrackingList<string>(),
                facebookAppId,
                facebookAppSecret,
                facebookAppSecretSettingName,
                facebookOAuthScopes ?? new ChangeTrackingList<string>(),
                gitHubClientId,
                gitHubClientSecret,
                gitHubClientSecretSettingName,
                gitHubOAuthScopes ?? new ChangeTrackingList<string>(),
                twitterConsumerKey,
                twitterConsumerSecret,
                twitterConsumerSecretSettingName,
                microsoftAccountClientId,
                microsoftAccountClientSecret,
                microsoftAccountClientSecretSettingName,
                microsoftAccountOAuthScopes ?? new ChangeTrackingList<string>(),
                isAuthFromFile,
                authFilePath,
                configVersion,
                kind,
                serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Name), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  name: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Name))
                {
                    builder.Append("  name: ");
                    if (Name.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Name}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Name}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Kind), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  kind: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Kind))
                {
                    builder.Append("  kind: ");
                    if (Kind.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Kind}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Kind}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Id), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  id: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Id))
                {
                    builder.Append("  id: ");
                    builder.AppendLine($"'{Id.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SystemData), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  systemData: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SystemData))
                {
                    builder.Append("  systemData: ");
                    builder.AppendLine($"'{SystemData.ToString()}'");
                }
            }

            builder.Append("  properties:");
            builder.AppendLine(" {");
            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsEnabled), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    enabled: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(IsEnabled))
                {
                    builder.Append("    enabled: ");
                    var boolValue = IsEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RuntimeVersion), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    runtimeVersion: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(RuntimeVersion))
                {
                    builder.Append("    runtimeVersion: ");
                    if (RuntimeVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{RuntimeVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{RuntimeVersion}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(UnauthenticatedClientAction), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    unauthenticatedClientAction: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(UnauthenticatedClientAction))
                {
                    builder.Append("    unauthenticatedClientAction: ");
                    builder.AppendLine($"'{UnauthenticatedClientAction.Value.ToSerialString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsTokenStoreEnabled), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    tokenStoreEnabled: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(IsTokenStoreEnabled))
                {
                    builder.Append("    tokenStoreEnabled: ");
                    var boolValue = IsTokenStoreEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AllowedExternalRedirectUrls), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    allowedExternalRedirectUrls: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(AllowedExternalRedirectUrls))
                {
                    if (AllowedExternalRedirectUrls.Any())
                    {
                        builder.Append("    allowedExternalRedirectUrls: ");
                        builder.AppendLine("[");
                        foreach (var item in AllowedExternalRedirectUrls)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("      '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"      '{item}'");
                            }
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DefaultProvider), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    defaultProvider: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(DefaultProvider))
                {
                    builder.Append("    defaultProvider: ");
                    builder.AppendLine($"'{DefaultProvider.Value.ToSerialString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TokenRefreshExtensionHours), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    tokenRefreshExtensionHours: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(TokenRefreshExtensionHours))
                {
                    builder.Append("    tokenRefreshExtensionHours: ");
                    builder.AppendLine($"'{TokenRefreshExtensionHours.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ClientId), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    clientId: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ClientId))
                {
                    builder.Append("    clientId: ");
                    if (ClientId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{ClientId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{ClientId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ClientSecret), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    clientSecret: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ClientSecret))
                {
                    builder.Append("    clientSecret: ");
                    if (ClientSecret.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{ClientSecret}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{ClientSecret}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ClientSecretSettingName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    clientSecretSettingName: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ClientSecretSettingName))
                {
                    builder.Append("    clientSecretSettingName: ");
                    if (ClientSecretSettingName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{ClientSecretSettingName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{ClientSecretSettingName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ClientSecretCertificateThumbprintString), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    clientSecretCertificateThumbprint: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ClientSecretCertificateThumbprintString))
                {
                    builder.Append("    clientSecretCertificateThumbprint: ");
                    if (ClientSecretCertificateThumbprintString.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{ClientSecretCertificateThumbprintString}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{ClientSecretCertificateThumbprintString}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Issuer), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    issuer: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Issuer))
                {
                    builder.Append("    issuer: ");
                    if (Issuer.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Issuer}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Issuer}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ValidateIssuer), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    validateIssuer: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ValidateIssuer))
                {
                    builder.Append("    validateIssuer: ");
                    var boolValue = ValidateIssuer.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AllowedAudiences), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    allowedAudiences: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(AllowedAudiences))
                {
                    if (AllowedAudiences.Any())
                    {
                        builder.Append("    allowedAudiences: ");
                        builder.AppendLine("[");
                        foreach (var item in AllowedAudiences)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("      '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"      '{item}'");
                            }
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AdditionalLoginParams), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    additionalLoginParams: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(AdditionalLoginParams))
                {
                    if (AdditionalLoginParams.Any())
                    {
                        builder.Append("    additionalLoginParams: ");
                        builder.AppendLine("[");
                        foreach (var item in AdditionalLoginParams)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("      '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"      '{item}'");
                            }
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AadClaimsAuthorization), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    aadClaimsAuthorization: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(AadClaimsAuthorization))
                {
                    builder.Append("    aadClaimsAuthorization: ");
                    if (AadClaimsAuthorization.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{AadClaimsAuthorization}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{AadClaimsAuthorization}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(GoogleClientId), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    googleClientId: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(GoogleClientId))
                {
                    builder.Append("    googleClientId: ");
                    if (GoogleClientId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{GoogleClientId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{GoogleClientId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(GoogleClientSecret), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    googleClientSecret: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(GoogleClientSecret))
                {
                    builder.Append("    googleClientSecret: ");
                    if (GoogleClientSecret.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{GoogleClientSecret}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{GoogleClientSecret}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(GoogleClientSecretSettingName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    googleClientSecretSettingName: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(GoogleClientSecretSettingName))
                {
                    builder.Append("    googleClientSecretSettingName: ");
                    if (GoogleClientSecretSettingName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{GoogleClientSecretSettingName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{GoogleClientSecretSettingName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(GoogleOAuthScopes), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    googleOAuthScopes: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(GoogleOAuthScopes))
                {
                    if (GoogleOAuthScopes.Any())
                    {
                        builder.Append("    googleOAuthScopes: ");
                        builder.AppendLine("[");
                        foreach (var item in GoogleOAuthScopes)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("      '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"      '{item}'");
                            }
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(FacebookAppId), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    facebookAppId: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(FacebookAppId))
                {
                    builder.Append("    facebookAppId: ");
                    if (FacebookAppId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{FacebookAppId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{FacebookAppId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(FacebookAppSecret), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    facebookAppSecret: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(FacebookAppSecret))
                {
                    builder.Append("    facebookAppSecret: ");
                    if (FacebookAppSecret.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{FacebookAppSecret}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{FacebookAppSecret}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(FacebookAppSecretSettingName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    facebookAppSecretSettingName: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(FacebookAppSecretSettingName))
                {
                    builder.Append("    facebookAppSecretSettingName: ");
                    if (FacebookAppSecretSettingName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{FacebookAppSecretSettingName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{FacebookAppSecretSettingName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(FacebookOAuthScopes), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    facebookOAuthScopes: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(FacebookOAuthScopes))
                {
                    if (FacebookOAuthScopes.Any())
                    {
                        builder.Append("    facebookOAuthScopes: ");
                        builder.AppendLine("[");
                        foreach (var item in FacebookOAuthScopes)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("      '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"      '{item}'");
                            }
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(GitHubClientId), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    gitHubClientId: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(GitHubClientId))
                {
                    builder.Append("    gitHubClientId: ");
                    if (GitHubClientId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{GitHubClientId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{GitHubClientId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(GitHubClientSecret), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    gitHubClientSecret: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(GitHubClientSecret))
                {
                    builder.Append("    gitHubClientSecret: ");
                    if (GitHubClientSecret.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{GitHubClientSecret}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{GitHubClientSecret}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(GitHubClientSecretSettingName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    gitHubClientSecretSettingName: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(GitHubClientSecretSettingName))
                {
                    builder.Append("    gitHubClientSecretSettingName: ");
                    if (GitHubClientSecretSettingName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{GitHubClientSecretSettingName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{GitHubClientSecretSettingName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(GitHubOAuthScopes), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    gitHubOAuthScopes: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(GitHubOAuthScopes))
                {
                    if (GitHubOAuthScopes.Any())
                    {
                        builder.Append("    gitHubOAuthScopes: ");
                        builder.AppendLine("[");
                        foreach (var item in GitHubOAuthScopes)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("      '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"      '{item}'");
                            }
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TwitterConsumerKey), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    twitterConsumerKey: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(TwitterConsumerKey))
                {
                    builder.Append("    twitterConsumerKey: ");
                    if (TwitterConsumerKey.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{TwitterConsumerKey}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{TwitterConsumerKey}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TwitterConsumerSecret), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    twitterConsumerSecret: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(TwitterConsumerSecret))
                {
                    builder.Append("    twitterConsumerSecret: ");
                    if (TwitterConsumerSecret.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{TwitterConsumerSecret}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{TwitterConsumerSecret}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TwitterConsumerSecretSettingName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    twitterConsumerSecretSettingName: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(TwitterConsumerSecretSettingName))
                {
                    builder.Append("    twitterConsumerSecretSettingName: ");
                    if (TwitterConsumerSecretSettingName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{TwitterConsumerSecretSettingName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{TwitterConsumerSecretSettingName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(MicrosoftAccountClientId), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    microsoftAccountClientId: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(MicrosoftAccountClientId))
                {
                    builder.Append("    microsoftAccountClientId: ");
                    if (MicrosoftAccountClientId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{MicrosoftAccountClientId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{MicrosoftAccountClientId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(MicrosoftAccountClientSecret), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    microsoftAccountClientSecret: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(MicrosoftAccountClientSecret))
                {
                    builder.Append("    microsoftAccountClientSecret: ");
                    if (MicrosoftAccountClientSecret.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{MicrosoftAccountClientSecret}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{MicrosoftAccountClientSecret}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(MicrosoftAccountClientSecretSettingName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    microsoftAccountClientSecretSettingName: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(MicrosoftAccountClientSecretSettingName))
                {
                    builder.Append("    microsoftAccountClientSecretSettingName: ");
                    if (MicrosoftAccountClientSecretSettingName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{MicrosoftAccountClientSecretSettingName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{MicrosoftAccountClientSecretSettingName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(MicrosoftAccountOAuthScopes), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    microsoftAccountOAuthScopes: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(MicrosoftAccountOAuthScopes))
                {
                    if (MicrosoftAccountOAuthScopes.Any())
                    {
                        builder.Append("    microsoftAccountOAuthScopes: ");
                        builder.AppendLine("[");
                        foreach (var item in MicrosoftAccountOAuthScopes)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("      '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"      '{item}'");
                            }
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsAuthFromFile), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    isAuthFromFile: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(IsAuthFromFile))
                {
                    builder.Append("    isAuthFromFile: ");
                    if (IsAuthFromFile.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{IsAuthFromFile}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{IsAuthFromFile}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AuthFilePath), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    authFilePath: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(AuthFilePath))
                {
                    builder.Append("    authFilePath: ");
                    if (AuthFilePath.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{AuthFilePath}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{AuthFilePath}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ConfigVersion), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    configVersion: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ConfigVersion))
                {
                    builder.Append("    configVersion: ");
                    if (ConfigVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{ConfigVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{ConfigVersion}'");
                    }
                }
            }

            builder.AppendLine("  }");
            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        BinaryData IPersistableModel<SiteAuthSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteAuthSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(SiteAuthSettings)} does not support writing '{options.Format}' format.");
            }
        }

        SiteAuthSettings IPersistableModel<SiteAuthSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteAuthSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSiteAuthSettings(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SiteAuthSettings)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SiteAuthSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
