// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class SiteAuthSettings : IUtf8JsonSerializable, IJsonModel<SiteAuthSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SiteAuthSettings>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<SiteAuthSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteAuthSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SiteAuthSettings)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Kind != null)
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && SystemData != null)
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (IsEnabled.HasValue)
            {
                writer.WritePropertyName("enabled"u8);
                writer.WriteBooleanValue(IsEnabled.Value);
            }
            if (RuntimeVersion != null)
            {
                writer.WritePropertyName("runtimeVersion"u8);
                writer.WriteStringValue(RuntimeVersion);
            }
            if (UnauthenticatedClientAction.HasValue)
            {
                writer.WritePropertyName("unauthenticatedClientAction"u8);
                writer.WriteStringValue(UnauthenticatedClientAction.Value.ToSerialString());
            }
            if (IsTokenStoreEnabled.HasValue)
            {
                writer.WritePropertyName("tokenStoreEnabled"u8);
                writer.WriteBooleanValue(IsTokenStoreEnabled.Value);
            }
            if (!(AllowedExternalRedirectUrls is ChangeTrackingList<string> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("allowedExternalRedirectUrls"u8);
                writer.WriteStartArray();
                foreach (var item in AllowedExternalRedirectUrls)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (DefaultProvider.HasValue)
            {
                writer.WritePropertyName("defaultProvider"u8);
                writer.WriteStringValue(DefaultProvider.Value.ToSerialString());
            }
            if (TokenRefreshExtensionHours.HasValue)
            {
                writer.WritePropertyName("tokenRefreshExtensionHours"u8);
                writer.WriteNumberValue(TokenRefreshExtensionHours.Value);
            }
            if (ClientId != null)
            {
                writer.WritePropertyName("clientId"u8);
                writer.WriteStringValue(ClientId);
            }
            if (ClientSecret != null)
            {
                writer.WritePropertyName("clientSecret"u8);
                writer.WriteStringValue(ClientSecret);
            }
            if (ClientSecretSettingName != null)
            {
                writer.WritePropertyName("clientSecretSettingName"u8);
                writer.WriteStringValue(ClientSecretSettingName);
            }
            if (ClientSecretCertificateThumbprintString != null)
            {
                writer.WritePropertyName("clientSecretCertificateThumbprint"u8);
                writer.WriteStringValue(ClientSecretCertificateThumbprintString);
            }
            if (Issuer != null)
            {
                writer.WritePropertyName("issuer"u8);
                writer.WriteStringValue(Issuer);
            }
            if (ValidateIssuer.HasValue)
            {
                writer.WritePropertyName("validateIssuer"u8);
                writer.WriteBooleanValue(ValidateIssuer.Value);
            }
            if (!(AllowedAudiences is ChangeTrackingList<string> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("allowedAudiences"u8);
                writer.WriteStartArray();
                foreach (var item in AllowedAudiences)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(AdditionalLoginParams is ChangeTrackingList<string> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("additionalLoginParams"u8);
                writer.WriteStartArray();
                foreach (var item in AdditionalLoginParams)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (AadClaimsAuthorization != null)
            {
                writer.WritePropertyName("aadClaimsAuthorization"u8);
                writer.WriteStringValue(AadClaimsAuthorization);
            }
            if (GoogleClientId != null)
            {
                writer.WritePropertyName("googleClientId"u8);
                writer.WriteStringValue(GoogleClientId);
            }
            if (GoogleClientSecret != null)
            {
                writer.WritePropertyName("googleClientSecret"u8);
                writer.WriteStringValue(GoogleClientSecret);
            }
            if (GoogleClientSecretSettingName != null)
            {
                writer.WritePropertyName("googleClientSecretSettingName"u8);
                writer.WriteStringValue(GoogleClientSecretSettingName);
            }
            if (!(GoogleOAuthScopes is ChangeTrackingList<string> collection2 && collection2.IsUndefined))
            {
                writer.WritePropertyName("googleOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in GoogleOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (FacebookAppId != null)
            {
                writer.WritePropertyName("facebookAppId"u8);
                writer.WriteStringValue(FacebookAppId);
            }
            if (FacebookAppSecret != null)
            {
                writer.WritePropertyName("facebookAppSecret"u8);
                writer.WriteStringValue(FacebookAppSecret);
            }
            if (FacebookAppSecretSettingName != null)
            {
                writer.WritePropertyName("facebookAppSecretSettingName"u8);
                writer.WriteStringValue(FacebookAppSecretSettingName);
            }
            if (!(FacebookOAuthScopes is ChangeTrackingList<string> collection3 && collection3.IsUndefined))
            {
                writer.WritePropertyName("facebookOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in FacebookOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (GitHubClientId != null)
            {
                writer.WritePropertyName("gitHubClientId"u8);
                writer.WriteStringValue(GitHubClientId);
            }
            if (GitHubClientSecret != null)
            {
                writer.WritePropertyName("gitHubClientSecret"u8);
                writer.WriteStringValue(GitHubClientSecret);
            }
            if (GitHubClientSecretSettingName != null)
            {
                writer.WritePropertyName("gitHubClientSecretSettingName"u8);
                writer.WriteStringValue(GitHubClientSecretSettingName);
            }
            if (!(GitHubOAuthScopes is ChangeTrackingList<string> collection4 && collection4.IsUndefined))
            {
                writer.WritePropertyName("gitHubOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in GitHubOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (TwitterConsumerKey != null)
            {
                writer.WritePropertyName("twitterConsumerKey"u8);
                writer.WriteStringValue(TwitterConsumerKey);
            }
            if (TwitterConsumerSecret != null)
            {
                writer.WritePropertyName("twitterConsumerSecret"u8);
                writer.WriteStringValue(TwitterConsumerSecret);
            }
            if (TwitterConsumerSecretSettingName != null)
            {
                writer.WritePropertyName("twitterConsumerSecretSettingName"u8);
                writer.WriteStringValue(TwitterConsumerSecretSettingName);
            }
            if (MicrosoftAccountClientId != null)
            {
                writer.WritePropertyName("microsoftAccountClientId"u8);
                writer.WriteStringValue(MicrosoftAccountClientId);
            }
            if (MicrosoftAccountClientSecret != null)
            {
                writer.WritePropertyName("microsoftAccountClientSecret"u8);
                writer.WriteStringValue(MicrosoftAccountClientSecret);
            }
            if (MicrosoftAccountClientSecretSettingName != null)
            {
                writer.WritePropertyName("microsoftAccountClientSecretSettingName"u8);
                writer.WriteStringValue(MicrosoftAccountClientSecretSettingName);
            }
            if (!(MicrosoftAccountOAuthScopes is ChangeTrackingList<string> collection5 && collection5.IsUndefined))
            {
                writer.WritePropertyName("microsoftAccountOAuthScopes"u8);
                writer.WriteStartArray();
                foreach (var item in MicrosoftAccountOAuthScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (IsAuthFromFile != null)
            {
                writer.WritePropertyName("isAuthFromFile"u8);
                writer.WriteStringValue(IsAuthFromFile);
            }
            if (AuthFilePath != null)
            {
                writer.WritePropertyName("authFilePath"u8);
                writer.WriteStringValue(AuthFilePath);
            }
            if (ConfigVersion != null)
            {
                writer.WritePropertyName("configVersion"u8);
                writer.WriteStringValue(ConfigVersion);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SiteAuthSettings IJsonModel<SiteAuthSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteAuthSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SiteAuthSettings)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSiteAuthSettings(document.RootElement, options);
        }

        internal static SiteAuthSettings DeserializeSiteAuthSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<bool> enabled = default;
            Optional<string> runtimeVersion = default;
            Optional<UnauthenticatedClientAction> unauthenticatedClientAction = default;
            Optional<bool> tokenStoreEnabled = default;
            IList<string> allowedExternalRedirectUrls = default;
            Optional<BuiltInAuthenticationProvider> defaultProvider = default;
            Optional<double> tokenRefreshExtensionHours = default;
            Optional<string> clientId = default;
            Optional<string> clientSecret = default;
            Optional<string> clientSecretSettingName = default;
            Optional<string> clientSecretCertificateThumbprint = default;
            Optional<string> issuer = default;
            Optional<bool> validateIssuer = default;
            IList<string> allowedAudiences = default;
            IList<string> additionalLoginParams = default;
            Optional<string> aadClaimsAuthorization = default;
            Optional<string> googleClientId = default;
            Optional<string> googleClientSecret = default;
            Optional<string> googleClientSecretSettingName = default;
            IList<string> googleOAuthScopes = default;
            Optional<string> facebookAppId = default;
            Optional<string> facebookAppSecret = default;
            Optional<string> facebookAppSecretSettingName = default;
            IList<string> facebookOAuthScopes = default;
            Optional<string> gitHubClientId = default;
            Optional<string> gitHubClientSecret = default;
            Optional<string> gitHubClientSecretSettingName = default;
            IList<string> gitHubOAuthScopes = default;
            Optional<string> twitterConsumerKey = default;
            Optional<string> twitterConsumerSecret = default;
            Optional<string> twitterConsumerSecretSettingName = default;
            Optional<string> microsoftAccountClientId = default;
            Optional<string> microsoftAccountClientSecret = default;
            Optional<string> microsoftAccountClientSecretSettingName = default;
            IList<string> microsoftAccountOAuthScopes = default;
            Optional<string> isAuthFromFile = default;
            Optional<string> authFilePath = default;
            Optional<string> configVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("enabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("runtimeVersion"u8))
                        {
                            runtimeVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("unauthenticatedClientAction"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            unauthenticatedClientAction = property0.Value.GetString().ToUnauthenticatedClientAction();
                            continue;
                        }
                        if (property0.NameEquals("tokenStoreEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            tokenStoreEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("allowedExternalRedirectUrls"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            allowedExternalRedirectUrls = array;
                            continue;
                        }
                        if (property0.NameEquals("defaultProvider"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            defaultProvider = property0.Value.GetString().ToBuiltInAuthenticationProvider();
                            continue;
                        }
                        if (property0.NameEquals("tokenRefreshExtensionHours"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            tokenRefreshExtensionHours = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("clientId"u8))
                        {
                            clientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientSecret"u8))
                        {
                            clientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientSecretSettingName"u8))
                        {
                            clientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientSecretCertificateThumbprint"u8))
                        {
                            clientSecretCertificateThumbprint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("issuer"u8))
                        {
                            issuer = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("validateIssuer"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            validateIssuer = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("allowedAudiences"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            allowedAudiences = array;
                            continue;
                        }
                        if (property0.NameEquals("additionalLoginParams"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            additionalLoginParams = array;
                            continue;
                        }
                        if (property0.NameEquals("aadClaimsAuthorization"u8))
                        {
                            aadClaimsAuthorization = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleClientId"u8))
                        {
                            googleClientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleClientSecret"u8))
                        {
                            googleClientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleClientSecretSettingName"u8))
                        {
                            googleClientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("googleOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            googleOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("facebookAppId"u8))
                        {
                            facebookAppId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("facebookAppSecret"u8))
                        {
                            facebookAppSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("facebookAppSecretSettingName"u8))
                        {
                            facebookAppSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("facebookOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            facebookOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("gitHubClientId"u8))
                        {
                            gitHubClientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("gitHubClientSecret"u8))
                        {
                            gitHubClientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("gitHubClientSecretSettingName"u8))
                        {
                            gitHubClientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("gitHubOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            gitHubOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("twitterConsumerKey"u8))
                        {
                            twitterConsumerKey = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("twitterConsumerSecret"u8))
                        {
                            twitterConsumerSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("twitterConsumerSecretSettingName"u8))
                        {
                            twitterConsumerSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountClientId"u8))
                        {
                            microsoftAccountClientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountClientSecret"u8))
                        {
                            microsoftAccountClientSecret = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountClientSecretSettingName"u8))
                        {
                            microsoftAccountClientSecretSettingName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("microsoftAccountOAuthScopes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            microsoftAccountOAuthScopes = array;
                            continue;
                        }
                        if (property0.NameEquals("isAuthFromFile"u8))
                        {
                            isAuthFromFile = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("authFilePath"u8))
                        {
                            authFilePath = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("configVersion"u8))
                        {
                            configVersion = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SiteAuthSettings(
                id,
                name,
                type,
                systemData.Value,
                Optional.ToNullable(enabled),
                runtimeVersion.Value,
                Optional.ToNullable(unauthenticatedClientAction),
                Optional.ToNullable(tokenStoreEnabled),
                allowedExternalRedirectUrls ?? new ChangeTrackingList<string>(),
                Optional.ToNullable(defaultProvider),
                Optional.ToNullable(tokenRefreshExtensionHours),
                clientId.Value,
                clientSecret.Value,
                clientSecretSettingName.Value,
                clientSecretCertificateThumbprint.Value,
                issuer.Value,
                Optional.ToNullable(validateIssuer),
                allowedAudiences ?? new ChangeTrackingList<string>(),
                additionalLoginParams ?? new ChangeTrackingList<string>(),
                aadClaimsAuthorization.Value,
                googleClientId.Value,
                googleClientSecret.Value,
                googleClientSecretSettingName.Value,
                googleOAuthScopes ?? new ChangeTrackingList<string>(),
                facebookAppId.Value,
                facebookAppSecret.Value,
                facebookAppSecretSettingName.Value,
                facebookOAuthScopes ?? new ChangeTrackingList<string>(),
                gitHubClientId.Value,
                gitHubClientSecret.Value,
                gitHubClientSecretSettingName.Value,
                gitHubOAuthScopes ?? new ChangeTrackingList<string>(),
                twitterConsumerKey.Value,
                twitterConsumerSecret.Value,
                twitterConsumerSecretSettingName.Value,
                microsoftAccountClientId.Value,
                microsoftAccountClientSecret.Value,
                microsoftAccountClientSecretSettingName.Value,
                microsoftAccountOAuthScopes ?? new ChangeTrackingList<string>(),
                isAuthFromFile.Value,
                authFilePath.Value,
                configVersion.Value,
                kind.Value,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SiteAuthSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteAuthSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(SiteAuthSettings)} does not support '{options.Format}' format.");
            }
        }

        SiteAuthSettings IPersistableModel<SiteAuthSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteAuthSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSiteAuthSettings(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SiteAuthSettings)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<SiteAuthSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
