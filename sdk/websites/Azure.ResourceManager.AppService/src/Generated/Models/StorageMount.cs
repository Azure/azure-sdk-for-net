// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Server farm storage mount configuration. </summary>
    public partial class StorageMount
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StorageMount"/>. </summary>
        public StorageMount()
        {
        }

        /// <summary> Initializes a new instance of <see cref="StorageMount"/>. </summary>
        /// <param name="name"> Name of the storage mount. </param>
        /// <param name="mountType"> Type of the storage mount. </param>
        /// <param name="source"> Source of the fileshare/storage. </param>
        /// <param name="destinationPath"> Path on worker where storage will be mounted. </param>
        /// <param name="credentialsKeyVaultReference"> KV reference to the credentials to connect to the share. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StorageMount(string name, StorageMountType? mountType, string source, string destinationPath, KeyVaultReferenceWithStatus credentialsKeyVaultReference, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            MountType = mountType;
            Source = source;
            DestinationPath = destinationPath;
            CredentialsKeyVaultReference = credentialsKeyVaultReference;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Name of the storage mount. </summary>
        [WirePath("name")]
        public string Name { get; set; }
        /// <summary> Type of the storage mount. </summary>
        [WirePath("type")]
        public StorageMountType? MountType { get; set; }
        /// <summary> Source of the fileshare/storage. </summary>
        [WirePath("source")]
        public string Source { get; set; }
        /// <summary> Path on worker where storage will be mounted. </summary>
        [WirePath("destinationPath")]
        public string DestinationPath { get; set; }
        /// <summary> KV reference to the credentials to connect to the share. </summary>
        [WirePath("credentialsKeyVaultReference")]
        public KeyVaultReferenceWithStatus CredentialsKeyVaultReference { get; set; }
    }
}
