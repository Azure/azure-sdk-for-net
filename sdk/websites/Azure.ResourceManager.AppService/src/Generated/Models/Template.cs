// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// Container App versioned application definition.
    /// Defines the desired state of an immutable revision.
    /// Any changes to this section Will result in a new revision being created
    /// </summary>
    public partial class Template
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Template"/>. </summary>
        public Template()
        {
            Containers = new ChangeTrackingList<Container>();
        }

        /// <summary> Initializes a new instance of <see cref="Template"/>. </summary>
        /// <param name="revisionSuffix"> User friendly suffix that is appended to the revision name. </param>
        /// <param name="containers"> List of container definitions for the Container App. </param>
        /// <param name="scale"> Scaling properties for the Container App. </param>
        /// <param name="dapr"> Dapr configuration for the Container App. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Template(string revisionSuffix, IList<Container> containers, Scale scale, Dapr dapr, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            RevisionSuffix = revisionSuffix;
            Containers = containers;
            Scale = scale;
            Dapr = dapr;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> User friendly suffix that is appended to the revision name. </summary>
        [WirePath("revisionSuffix")]
        public string RevisionSuffix { get; set; }
        /// <summary> List of container definitions for the Container App. </summary>
        [WirePath("containers")]
        public IList<Container> Containers { get; }
        /// <summary> Scaling properties for the Container App. </summary>
        [WirePath("scale")]
        public Scale Scale { get; set; }
        /// <summary> Dapr configuration for the Container App. </summary>
        [WirePath("dapr")]
        public Dapr Dapr { get; set; }
    }
}
