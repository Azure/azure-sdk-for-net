// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class ContainerNetworkInterfaceStatistics : IUtf8JsonSerializable, IJsonModel<ContainerNetworkInterfaceStatistics>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ContainerNetworkInterfaceStatistics>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ContainerNetworkInterfaceStatistics>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerNetworkInterfaceStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerNetworkInterfaceStatistics)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(RxBytes))
            {
                writer.WritePropertyName("rxBytes"u8);
                writer.WriteNumberValue(RxBytes.Value);
            }
            if (Optional.IsDefined(RxPackets))
            {
                writer.WritePropertyName("rxPackets"u8);
                writer.WriteNumberValue(RxPackets.Value);
            }
            if (Optional.IsDefined(RxErrors))
            {
                writer.WritePropertyName("rxErrors"u8);
                writer.WriteNumberValue(RxErrors.Value);
            }
            if (Optional.IsDefined(RxDropped))
            {
                writer.WritePropertyName("rxDropped"u8);
                writer.WriteNumberValue(RxDropped.Value);
            }
            if (Optional.IsDefined(TxBytes))
            {
                writer.WritePropertyName("txBytes"u8);
                writer.WriteNumberValue(TxBytes.Value);
            }
            if (Optional.IsDefined(TxPackets))
            {
                writer.WritePropertyName("txPackets"u8);
                writer.WriteNumberValue(TxPackets.Value);
            }
            if (Optional.IsDefined(TxErrors))
            {
                writer.WritePropertyName("txErrors"u8);
                writer.WriteNumberValue(TxErrors.Value);
            }
            if (Optional.IsDefined(TxDropped))
            {
                writer.WritePropertyName("txDropped"u8);
                writer.WriteNumberValue(TxDropped.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ContainerNetworkInterfaceStatistics IJsonModel<ContainerNetworkInterfaceStatistics>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerNetworkInterfaceStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerNetworkInterfaceStatistics)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContainerNetworkInterfaceStatistics(document.RootElement, options);
        }

        internal static ContainerNetworkInterfaceStatistics DeserializeContainerNetworkInterfaceStatistics(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            long? rxBytes = default;
            long? rxPackets = default;
            long? rxErrors = default;
            long? rxDropped = default;
            long? txBytes = default;
            long? txPackets = default;
            long? txErrors = default;
            long? txDropped = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rxBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rxBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("rxPackets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rxPackets = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("rxErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rxErrors = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("rxDropped"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rxDropped = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("txBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    txBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("txPackets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    txPackets = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("txErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    txErrors = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("txDropped"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    txDropped = property.Value.GetInt64();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ContainerNetworkInterfaceStatistics(
                rxBytes,
                rxPackets,
                rxErrors,
                rxDropped,
                txBytes,
                txPackets,
                txErrors,
                txDropped,
                serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RxBytes), out propertyOverride);
            if (Optional.IsDefined(RxBytes) || hasPropertyOverride)
            {
                builder.Append("  rxBytes: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{RxBytes.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RxPackets), out propertyOverride);
            if (Optional.IsDefined(RxPackets) || hasPropertyOverride)
            {
                builder.Append("  rxPackets: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{RxPackets.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RxErrors), out propertyOverride);
            if (Optional.IsDefined(RxErrors) || hasPropertyOverride)
            {
                builder.Append("  rxErrors: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{RxErrors.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RxDropped), out propertyOverride);
            if (Optional.IsDefined(RxDropped) || hasPropertyOverride)
            {
                builder.Append("  rxDropped: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{RxDropped.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TxBytes), out propertyOverride);
            if (Optional.IsDefined(TxBytes) || hasPropertyOverride)
            {
                builder.Append("  txBytes: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{TxBytes.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TxPackets), out propertyOverride);
            if (Optional.IsDefined(TxPackets) || hasPropertyOverride)
            {
                builder.Append("  txPackets: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{TxPackets.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TxErrors), out propertyOverride);
            if (Optional.IsDefined(TxErrors) || hasPropertyOverride)
            {
                builder.Append("  txErrors: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{TxErrors.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TxDropped), out propertyOverride);
            if (Optional.IsDefined(TxDropped) || hasPropertyOverride)
            {
                builder.Append("  txDropped: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{TxDropped.Value.ToString()}'");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        BinaryData IPersistableModel<ContainerNetworkInterfaceStatistics>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerNetworkInterfaceStatistics>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ContainerNetworkInterfaceStatistics)} does not support writing '{options.Format}' format.");
            }
        }

        ContainerNetworkInterfaceStatistics IPersistableModel<ContainerNetworkInterfaceStatistics>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerNetworkInterfaceStatistics>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeContainerNetworkInterfaceStatistics(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ContainerNetworkInterfaceStatistics)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ContainerNetworkInterfaceStatistics>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
