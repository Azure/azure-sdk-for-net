// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class ContainerNetworkInterfaceStatistics : IUtf8JsonSerializable, IModelJsonSerializable<ContainerNetworkInterfaceStatistics>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ContainerNetworkInterfaceStatistics>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ContainerNetworkInterfaceStatistics>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ContainerNetworkInterfaceStatistics>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(RxBytes))
            {
                writer.WritePropertyName("rxBytes"u8);
                writer.WriteNumberValue(RxBytes.Value);
            }
            if (Optional.IsDefined(RxPackets))
            {
                writer.WritePropertyName("rxPackets"u8);
                writer.WriteNumberValue(RxPackets.Value);
            }
            if (Optional.IsDefined(RxErrors))
            {
                writer.WritePropertyName("rxErrors"u8);
                writer.WriteNumberValue(RxErrors.Value);
            }
            if (Optional.IsDefined(RxDropped))
            {
                writer.WritePropertyName("rxDropped"u8);
                writer.WriteNumberValue(RxDropped.Value);
            }
            if (Optional.IsDefined(TxBytes))
            {
                writer.WritePropertyName("txBytes"u8);
                writer.WriteNumberValue(TxBytes.Value);
            }
            if (Optional.IsDefined(TxPackets))
            {
                writer.WritePropertyName("txPackets"u8);
                writer.WriteNumberValue(TxPackets.Value);
            }
            if (Optional.IsDefined(TxErrors))
            {
                writer.WritePropertyName("txErrors"u8);
                writer.WriteNumberValue(TxErrors.Value);
            }
            if (Optional.IsDefined(TxDropped))
            {
                writer.WritePropertyName("txDropped"u8);
                writer.WriteNumberValue(TxDropped.Value);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ContainerNetworkInterfaceStatistics DeserializeContainerNetworkInterfaceStatistics(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<long> rxBytes = default;
            Optional<long> rxPackets = default;
            Optional<long> rxErrors = default;
            Optional<long> rxDropped = default;
            Optional<long> txBytes = default;
            Optional<long> txPackets = default;
            Optional<long> txErrors = default;
            Optional<long> txDropped = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rxBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rxBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("rxPackets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rxPackets = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("rxErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rxErrors = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("rxDropped"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rxDropped = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("txBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    txBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("txPackets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    txPackets = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("txErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    txErrors = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("txDropped"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    txDropped = property.Value.GetInt64();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ContainerNetworkInterfaceStatistics(Optional.ToNullable(rxBytes), Optional.ToNullable(rxPackets), Optional.ToNullable(rxErrors), Optional.ToNullable(rxDropped), Optional.ToNullable(txBytes), Optional.ToNullable(txPackets), Optional.ToNullable(txErrors), Optional.ToNullable(txDropped), rawData);
        }

        ContainerNetworkInterfaceStatistics IModelJsonSerializable<ContainerNetworkInterfaceStatistics>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ContainerNetworkInterfaceStatistics>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeContainerNetworkInterfaceStatistics(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ContainerNetworkInterfaceStatistics>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ContainerNetworkInterfaceStatistics>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ContainerNetworkInterfaceStatistics IModelSerializable<ContainerNetworkInterfaceStatistics>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ContainerNetworkInterfaceStatistics>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeContainerNetworkInterfaceStatistics(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="ContainerNetworkInterfaceStatistics"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="ContainerNetworkInterfaceStatistics"/> to convert. </param>
        public static implicit operator RequestContent(ContainerNetworkInterfaceStatistics model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="ContainerNetworkInterfaceStatistics"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator ContainerNetworkInterfaceStatistics(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeContainerNetworkInterfaceStatistics(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
