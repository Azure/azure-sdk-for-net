// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
    /// Serialized Name: BackupSchedule
    /// </summary>
    public partial class BackupSchedule
    {
        /// <summary> Initializes a new instance of BackupSchedule. </summary>
        /// <param name="frequencyInterval">
        /// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
        /// Serialized Name: BackupSchedule.frequencyInterval
        /// </param>
        /// <param name="frequencyUnit">
        /// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
        /// Serialized Name: BackupSchedule.frequencyUnit
        /// </param>
        /// <param name="isKeepAtLeastOneBackup">
        /// True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
        /// Serialized Name: BackupSchedule.keepAtLeastOneBackup
        /// </param>
        /// <param name="retentionPeriodInDays">
        /// After how many days backups should be deleted.
        /// Serialized Name: BackupSchedule.retentionPeriodInDays
        /// </param>
        public BackupSchedule(int frequencyInterval, FrequencyUnit frequencyUnit, bool isKeepAtLeastOneBackup, int retentionPeriodInDays)
        {
            FrequencyInterval = frequencyInterval;
            FrequencyUnit = frequencyUnit;
            IsKeepAtLeastOneBackup = isKeepAtLeastOneBackup;
            RetentionPeriodInDays = retentionPeriodInDays;
        }

        /// <summary> Initializes a new instance of BackupSchedule. </summary>
        /// <param name="frequencyInterval">
        /// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
        /// Serialized Name: BackupSchedule.frequencyInterval
        /// </param>
        /// <param name="frequencyUnit">
        /// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
        /// Serialized Name: BackupSchedule.frequencyUnit
        /// </param>
        /// <param name="isKeepAtLeastOneBackup">
        /// True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
        /// Serialized Name: BackupSchedule.keepAtLeastOneBackup
        /// </param>
        /// <param name="retentionPeriodInDays">
        /// After how many days backups should be deleted.
        /// Serialized Name: BackupSchedule.retentionPeriodInDays
        /// </param>
        /// <param name="startOn">
        /// When the schedule should start working.
        /// Serialized Name: BackupSchedule.startTime
        /// </param>
        /// <param name="lastExecutionOn">
        /// Last time when this schedule was triggered.
        /// Serialized Name: BackupSchedule.lastExecutionTime
        /// </param>
        internal BackupSchedule(int frequencyInterval, FrequencyUnit frequencyUnit, bool isKeepAtLeastOneBackup, int retentionPeriodInDays, DateTimeOffset? startOn, DateTimeOffset? lastExecutionOn)
        {
            FrequencyInterval = frequencyInterval;
            FrequencyUnit = frequencyUnit;
            IsKeepAtLeastOneBackup = isKeepAtLeastOneBackup;
            RetentionPeriodInDays = retentionPeriodInDays;
            StartOn = startOn;
            LastExecutionOn = lastExecutionOn;
        }

        /// <summary>
        /// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
        /// Serialized Name: BackupSchedule.frequencyInterval
        /// </summary>
        public int FrequencyInterval { get; set; }
        /// <summary>
        /// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
        /// Serialized Name: BackupSchedule.frequencyUnit
        /// </summary>
        public FrequencyUnit FrequencyUnit { get; set; }
        /// <summary>
        /// True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
        /// Serialized Name: BackupSchedule.keepAtLeastOneBackup
        /// </summary>
        public bool IsKeepAtLeastOneBackup { get; set; }
        /// <summary>
        /// After how many days backups should be deleted.
        /// Serialized Name: BackupSchedule.retentionPeriodInDays
        /// </summary>
        public int RetentionPeriodInDays { get; set; }
        /// <summary>
        /// When the schedule should start working.
        /// Serialized Name: BackupSchedule.startTime
        /// </summary>
        public DateTimeOffset? StartOn { get; set; }
        /// <summary>
        /// Last time when this schedule was triggered.
        /// Serialized Name: BackupSchedule.lastExecutionTime
        /// </summary>
        public DateTimeOffset? LastExecutionOn { get; }
    }
}
