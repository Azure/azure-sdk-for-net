// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// The ArcConfiguration.
    /// Serialized Name: ArcConfiguration
    /// </summary>
    public partial class ArcConfiguration
    {
        /// <summary> Initializes a new instance of ArcConfiguration. </summary>
        public ArcConfiguration()
        {
        }

        /// <summary> Initializes a new instance of ArcConfiguration. </summary>
        /// <param name="artifactsStorageType"> Serialized Name: ArcConfiguration.artifactsStorageType. </param>
        /// <param name="artifactStorageClassName"> Serialized Name: ArcConfiguration.artifactStorageClassName. </param>
        /// <param name="artifactStorageMountPath"> Serialized Name: ArcConfiguration.artifactStorageMountPath. </param>
        /// <param name="artifactStorageNodeName"> Serialized Name: ArcConfiguration.artifactStorageNodeName. </param>
        /// <param name="artifactStorageAccessMode"> Serialized Name: ArcConfiguration.artifactStorageAccessMode. </param>
        /// <param name="frontEndServiceConfiguration"> Serialized Name: ArcConfiguration.frontEndServiceConfiguration. </param>
        /// <param name="kubeConfig"> Serialized Name: ArcConfiguration.kubeConfig. </param>
        internal ArcConfiguration(StorageType? artifactsStorageType, string artifactStorageClassName, string artifactStorageMountPath, string artifactStorageNodeName, string artifactStorageAccessMode, FrontEndConfiguration frontEndServiceConfiguration, string kubeConfig)
        {
            ArtifactsStorageType = artifactsStorageType;
            ArtifactStorageClassName = artifactStorageClassName;
            ArtifactStorageMountPath = artifactStorageMountPath;
            ArtifactStorageNodeName = artifactStorageNodeName;
            ArtifactStorageAccessMode = artifactStorageAccessMode;
            FrontEndServiceConfiguration = frontEndServiceConfiguration;
            KubeConfig = kubeConfig;
        }

        /// <summary> Serialized Name: ArcConfiguration.artifactsStorageType. </summary>
        public StorageType? ArtifactsStorageType { get; set; }
        /// <summary> Serialized Name: ArcConfiguration.artifactStorageClassName. </summary>
        public string ArtifactStorageClassName { get; set; }
        /// <summary> Serialized Name: ArcConfiguration.artifactStorageMountPath. </summary>
        public string ArtifactStorageMountPath { get; set; }
        /// <summary> Serialized Name: ArcConfiguration.artifactStorageNodeName. </summary>
        public string ArtifactStorageNodeName { get; set; }
        /// <summary> Serialized Name: ArcConfiguration.artifactStorageAccessMode. </summary>
        public string ArtifactStorageAccessMode { get; set; }
        /// <summary> Serialized Name: ArcConfiguration.frontEndServiceConfiguration. </summary>
        internal FrontEndConfiguration FrontEndServiceConfiguration { get; set; }
        /// <summary> Serialized Name: FrontEndConfiguration.kind. </summary>
        public FrontEndServiceType? FrontEndServiceKind
        {
            get => FrontEndServiceConfiguration is null ? default : FrontEndServiceConfiguration.Kind;
            set
            {
                if (FrontEndServiceConfiguration is null)
                    FrontEndServiceConfiguration = new FrontEndConfiguration();
                FrontEndServiceConfiguration.Kind = value;
            }
        }

        /// <summary> Serialized Name: ArcConfiguration.kubeConfig. </summary>
        public string KubeConfig { get; set; }
    }
}
