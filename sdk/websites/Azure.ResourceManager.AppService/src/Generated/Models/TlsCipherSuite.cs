// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> The minimum strength TLS cipher suite allowed for an application. </summary>
    public readonly partial struct TlsCipherSuite : IEquatable<TlsCipherSuite>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TlsCipherSuite"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TlsCipherSuite(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TLSAES256GCMSHA384Value = "TLS_AES_256_GCM_SHA384";
        private const string TLSAES128GCMSHA256Value = "TLS_AES_128_GCM_SHA256";
        private const string TLSEcdheEcdsaWithAES256GCMSHA384Value = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
        private const string TLSEcdheEcdsaWithAES128CBCSHA256Value = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
        private const string TLSEcdheEcdsaWithAES128GCMSHA256Value = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
        private const string TLSEcdheRSAWithAES256GCMSHA384Value = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
        private const string TLSEcdheRSAWithAES128GCMSHA256Value = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";
        private const string TLSEcdheRSAWithAES256CBCSHA384Value = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
        private const string TLSEcdheRSAWithAES128CBCSHA256Value = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
        private const string TLSEcdheRSAWithAES256CBCSHAValue = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
        private const string TLSEcdheRSAWithAES128CBCSHAValue = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
        private const string TLSRSAWithAES256GCMSHA384Value = "TLS_RSA_WITH_AES_256_GCM_SHA384";
        private const string TLSRSAWithAES128GCMSHA256Value = "TLS_RSA_WITH_AES_128_GCM_SHA256";
        private const string TLSRSAWithAES256CBCSHA256Value = "TLS_RSA_WITH_AES_256_CBC_SHA256";
        private const string TLSRSAWithAES128CBCSHA256Value = "TLS_RSA_WITH_AES_128_CBC_SHA256";
        private const string TLSRSAWithAES256CBCSHAValue = "TLS_RSA_WITH_AES_256_CBC_SHA";
        private const string TLSRSAWithAES128CBCSHAValue = "TLS_RSA_WITH_AES_128_CBC_SHA";

        /// <summary> TLS_AES_256_GCM_SHA384. </summary>
        public static TlsCipherSuite TLSAES256GCMSHA384 { get; } = new TlsCipherSuite(TLSAES256GCMSHA384Value);
        /// <summary> TLS_AES_128_GCM_SHA256. </summary>
        public static TlsCipherSuite TLSAES128GCMSHA256 { get; } = new TlsCipherSuite(TLSAES128GCMSHA256Value);
        /// <summary> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384. </summary>
        public static TlsCipherSuite TLSEcdheEcdsaWithAES256GCMSHA384 { get; } = new TlsCipherSuite(TLSEcdheEcdsaWithAES256GCMSHA384Value);
        /// <summary> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256. </summary>
        public static TlsCipherSuite TLSEcdheEcdsaWithAES128CBCSHA256 { get; } = new TlsCipherSuite(TLSEcdheEcdsaWithAES128CBCSHA256Value);
        /// <summary> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256. </summary>
        public static TlsCipherSuite TLSEcdheEcdsaWithAES128GCMSHA256 { get; } = new TlsCipherSuite(TLSEcdheEcdsaWithAES128GCMSHA256Value);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384. </summary>
        public static TlsCipherSuite TLSEcdheRSAWithAES256GCMSHA384 { get; } = new TlsCipherSuite(TLSEcdheRSAWithAES256GCMSHA384Value);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256. </summary>
        public static TlsCipherSuite TLSEcdheRSAWithAES128GCMSHA256 { get; } = new TlsCipherSuite(TLSEcdheRSAWithAES128GCMSHA256Value);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384. </summary>
        public static TlsCipherSuite TLSEcdheRSAWithAES256CBCSHA384 { get; } = new TlsCipherSuite(TLSEcdheRSAWithAES256CBCSHA384Value);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256. </summary>
        public static TlsCipherSuite TLSEcdheRSAWithAES128CBCSHA256 { get; } = new TlsCipherSuite(TLSEcdheRSAWithAES128CBCSHA256Value);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA. </summary>
        public static TlsCipherSuite TLSEcdheRSAWithAES256CBCSHA { get; } = new TlsCipherSuite(TLSEcdheRSAWithAES256CBCSHAValue);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA. </summary>
        public static TlsCipherSuite TLSEcdheRSAWithAES128CBCSHA { get; } = new TlsCipherSuite(TLSEcdheRSAWithAES128CBCSHAValue);
        /// <summary> TLS_RSA_WITH_AES_256_GCM_SHA384. </summary>
        public static TlsCipherSuite TLSRSAWithAES256GCMSHA384 { get; } = new TlsCipherSuite(TLSRSAWithAES256GCMSHA384Value);
        /// <summary> TLS_RSA_WITH_AES_128_GCM_SHA256. </summary>
        public static TlsCipherSuite TLSRSAWithAES128GCMSHA256 { get; } = new TlsCipherSuite(TLSRSAWithAES128GCMSHA256Value);
        /// <summary> TLS_RSA_WITH_AES_256_CBC_SHA256. </summary>
        public static TlsCipherSuite TLSRSAWithAES256CBCSHA256 { get; } = new TlsCipherSuite(TLSRSAWithAES256CBCSHA256Value);
        /// <summary> TLS_RSA_WITH_AES_128_CBC_SHA256. </summary>
        public static TlsCipherSuite TLSRSAWithAES128CBCSHA256 { get; } = new TlsCipherSuite(TLSRSAWithAES128CBCSHA256Value);
        /// <summary> TLS_RSA_WITH_AES_256_CBC_SHA. </summary>
        public static TlsCipherSuite TLSRSAWithAES256CBCSHA { get; } = new TlsCipherSuite(TLSRSAWithAES256CBCSHAValue);
        /// <summary> TLS_RSA_WITH_AES_128_CBC_SHA. </summary>
        public static TlsCipherSuite TLSRSAWithAES128CBCSHA { get; } = new TlsCipherSuite(TLSRSAWithAES128CBCSHAValue);
        /// <summary> Determines if two <see cref="TlsCipherSuite"/> values are the same. </summary>
        public static bool operator ==(TlsCipherSuite left, TlsCipherSuite right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TlsCipherSuite"/> values are not the same. </summary>
        public static bool operator !=(TlsCipherSuite left, TlsCipherSuite right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TlsCipherSuite"/>. </summary>
        public static implicit operator TlsCipherSuite(string value) => new TlsCipherSuite(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TlsCipherSuite other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TlsCipherSuite other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
