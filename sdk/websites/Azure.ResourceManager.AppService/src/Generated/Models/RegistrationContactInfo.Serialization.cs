// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class RegistrationContactInfo : IUtf8JsonSerializable, IJsonModel<RegistrationContactInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RegistrationContactInfo>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<RegistrationContactInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RegistrationContactInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RegistrationContactInfo)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(AddressMailing))
            {
                writer.WritePropertyName("addressMailing"u8);
                writer.WriteObjectValue(AddressMailing);
            }
            writer.WritePropertyName("email"u8);
            writer.WriteStringValue(Email);
            if (Optional.IsDefined(Fax))
            {
                writer.WritePropertyName("fax"u8);
                writer.WriteStringValue(Fax);
            }
            if (Optional.IsDefined(JobTitle))
            {
                writer.WritePropertyName("jobTitle"u8);
                writer.WriteStringValue(JobTitle);
            }
            writer.WritePropertyName("nameFirst"u8);
            writer.WriteStringValue(NameFirst);
            writer.WritePropertyName("nameLast"u8);
            writer.WriteStringValue(NameLast);
            if (Optional.IsDefined(NameMiddle))
            {
                writer.WritePropertyName("nameMiddle"u8);
                writer.WriteStringValue(NameMiddle);
            }
            if (Optional.IsDefined(Organization))
            {
                writer.WritePropertyName("organization"u8);
                writer.WriteStringValue(Organization);
            }
            writer.WritePropertyName("phone"u8);
            writer.WriteStringValue(Phone);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RegistrationContactInfo IJsonModel<RegistrationContactInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RegistrationContactInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RegistrationContactInfo)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRegistrationContactInfo(document.RootElement, options);
        }

        internal static RegistrationContactInfo DeserializeRegistrationContactInfo(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<RegistrationAddressInfo> addressMailing = default;
            string email = default;
            Optional<string> fax = default;
            Optional<string> jobTitle = default;
            string nameFirst = default;
            string nameLast = default;
            Optional<string> nameMiddle = default;
            Optional<string> organization = default;
            string phone = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("addressMailing"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    addressMailing = RegistrationAddressInfo.DeserializeRegistrationAddressInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("email"u8))
                {
                    email = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fax"u8))
                {
                    fax = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobTitle"u8))
                {
                    jobTitle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nameFirst"u8))
                {
                    nameFirst = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nameLast"u8))
                {
                    nameLast = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nameMiddle"u8))
                {
                    nameMiddle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organization"u8))
                {
                    organization = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("phone"u8))
                {
                    phone = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RegistrationContactInfo(addressMailing.Value, email, fax.Value, jobTitle.Value, nameFirst, nameLast, nameMiddle.Value, organization.Value, phone, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(AddressMailing))
            {
                builder.Append("  addressMailing:");
                AppendChildObject(builder, AddressMailing, options, 2, false);
            }

            if (Optional.IsDefined(Email))
            {
                builder.Append("  email:");
                builder.AppendLine($" '{Email}'");
            }

            if (Optional.IsDefined(Fax))
            {
                builder.Append("  fax:");
                builder.AppendLine($" '{Fax}'");
            }

            if (Optional.IsDefined(JobTitle))
            {
                builder.Append("  jobTitle:");
                builder.AppendLine($" '{JobTitle}'");
            }

            if (Optional.IsDefined(NameFirst))
            {
                builder.Append("  nameFirst:");
                builder.AppendLine($" '{NameFirst}'");
            }

            if (Optional.IsDefined(NameLast))
            {
                builder.Append("  nameLast:");
                builder.AppendLine($" '{NameLast}'");
            }

            if (Optional.IsDefined(NameMiddle))
            {
                builder.Append("  nameMiddle:");
                builder.AppendLine($" '{NameMiddle}'");
            }

            if (Optional.IsDefined(Organization))
            {
                builder.Append("  organization:");
                builder.AppendLine($" '{Organization}'");
            }

            if (Optional.IsDefined(Phone))
            {
                builder.Append("  phone:");
                builder.AppendLine($" '{Phone}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<RegistrationContactInfo>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RegistrationContactInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(RegistrationContactInfo)} does not support '{options.Format}' format.");
            }
        }

        RegistrationContactInfo IPersistableModel<RegistrationContactInfo>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RegistrationContactInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeRegistrationContactInfo(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(RegistrationContactInfo)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<RegistrationContactInfo>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
