// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService
{
    public partial class SiteExtensionInfoData : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ExtensionId))
            {
                writer.WritePropertyName("extension_id"u8);
                writer.WriteStringValue(ExtensionId);
            }
            if (Core.Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Core.Optional.IsDefined(ExtensionType))
            {
                writer.WritePropertyName("extension_type"u8);
                writer.WriteStringValue(ExtensionType.Value.ToSerialString());
            }
            if (Core.Optional.IsDefined(Summary))
            {
                writer.WritePropertyName("summary"u8);
                writer.WriteStringValue(Summary);
            }
            if (Core.Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Core.Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            if (Core.Optional.IsDefined(ExtensionUri))
            {
                writer.WritePropertyName("extension_url"u8);
                writer.WriteStringValue(ExtensionUri.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(ProjectUri))
            {
                writer.WritePropertyName("project_url"u8);
                writer.WriteStringValue(ProjectUri.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(IconUri))
            {
                writer.WritePropertyName("icon_url"u8);
                writer.WriteStringValue(IconUri.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(LicenseUri))
            {
                writer.WritePropertyName("license_url"u8);
                writer.WriteStringValue(LicenseUri.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(FeedUri))
            {
                writer.WritePropertyName("feed_url"u8);
                writer.WriteStringValue(FeedUri.AbsoluteUri);
            }
            if (Core.Optional.IsCollectionDefined(Authors))
            {
                writer.WritePropertyName("authors"u8);
                writer.WriteStartArray();
                foreach (var item in Authors)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(InstallerCommandLineParams))
            {
                writer.WritePropertyName("installer_command_line_params"u8);
                writer.WriteStringValue(InstallerCommandLineParams);
            }
            if (Core.Optional.IsDefined(PublishedOn))
            {
                writer.WritePropertyName("published_date_time"u8);
                writer.WriteStringValue(PublishedOn.Value, "O");
            }
            if (Core.Optional.IsDefined(DownloadCount))
            {
                writer.WritePropertyName("download_count"u8);
                writer.WriteNumberValue(DownloadCount.Value);
            }
            if (Core.Optional.IsDefined(LocalIsLatestVersion))
            {
                writer.WritePropertyName("local_is_latest_version"u8);
                writer.WriteBooleanValue(LocalIsLatestVersion.Value);
            }
            if (Core.Optional.IsDefined(LocalPath))
            {
                writer.WritePropertyName("local_path"u8);
                writer.WriteStringValue(LocalPath);
            }
            if (Core.Optional.IsDefined(InstalledOn))
            {
                writer.WritePropertyName("installed_date_time"u8);
                writer.WriteStringValue(InstalledOn.Value, "O");
            }
            if (Core.Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState);
            }
            if (Core.Optional.IsDefined(Comment))
            {
                writer.WritePropertyName("comment"u8);
                writer.WriteStringValue(Comment);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SiteExtensionInfoData DeserializeSiteExtensionInfoData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<string> extensionId = default;
            Core.Optional<string> title = default;
            Core.Optional<SiteExtensionType> extensionType = default;
            Core.Optional<string> summary = default;
            Core.Optional<string> description = default;
            Core.Optional<string> version = default;
            Core.Optional<Uri> extensionUrl = default;
            Core.Optional<Uri> projectUrl = default;
            Core.Optional<Uri> iconUrl = default;
            Core.Optional<Uri> licenseUrl = default;
            Core.Optional<Uri> feedUrl = default;
            Core.Optional<IList<string>> authors = default;
            Core.Optional<string> installerCommandLineParams = default;
            Core.Optional<DateTimeOffset> publishedDateTime = default;
            Core.Optional<int> downloadCount = default;
            Core.Optional<bool> localIsLatestVersion = default;
            Core.Optional<string> localPath = default;
            Core.Optional<DateTimeOffset> installedDateTime = default;
            Core.Optional<string> provisioningState = default;
            Core.Optional<string> comment = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("extension_id"u8))
                        {
                            extensionId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("title"u8))
                        {
                            title = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("extension_type"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            extensionType = property0.Value.GetString().ToSiteExtensionType();
                            continue;
                        }
                        if (property0.NameEquals("summary"u8))
                        {
                            summary = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("version"u8))
                        {
                            version = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("extension_url"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            extensionUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("project_url"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            projectUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("icon_url"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            iconUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("license_url"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            licenseUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("feed_url"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            feedUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("authors"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            authors = array;
                            continue;
                        }
                        if (property0.NameEquals("installer_command_line_params"u8))
                        {
                            installerCommandLineParams = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("published_date_time"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            publishedDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("download_count"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            downloadCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("local_is_latest_version"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            localIsLatestVersion = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("local_path"u8))
                        {
                            localPath = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("installed_date_time"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            installedDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("comment"u8))
                        {
                            comment = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SiteExtensionInfoData(id, name, type, systemData.Value, extensionId.Value, title.Value, Core.Optional.ToNullable(extensionType), summary.Value, description.Value, version.Value, extensionUrl.Value, projectUrl.Value, iconUrl.Value, licenseUrl.Value, feedUrl.Value, Core.Optional.ToList(authors), installerCommandLineParams.Value, Core.Optional.ToNullable(publishedDateTime), Core.Optional.ToNullable(downloadCount), Core.Optional.ToNullable(localIsLatestVersion), localPath.Value, Core.Optional.ToNullable(installedDateTime), provisioningState.Value, comment.Value, kind.Value);
        }
    }
}
