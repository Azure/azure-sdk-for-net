// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class DetectorInfo : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WriteEndObject();
        }

        internal static DetectorInfo DeserializeDetectorInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> id = default;
            Core.Optional<string> name = default;
            Core.Optional<string> description = default;
            Core.Optional<string> author = default;
            Core.Optional<string> category = default;
            Core.Optional<IReadOnlyList<DetectorSupportTopic>> supportTopicList = default;
            Core.Optional<IReadOnlyList<string>> analysisType = default;
            Core.Optional<DetectorType> type = default;
            Core.Optional<float> score = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("author"u8))
                {
                    author = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    category = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportTopicList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DetectorSupportTopic> array = new List<DetectorSupportTopic>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DetectorSupportTopic.DeserializeDetectorSupportTopic(item));
                    }
                    supportTopicList = array;
                    continue;
                }
                if (property.NameEquals("analysisType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    analysisType = array;
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = property.Value.GetString().ToDetectorType();
                    continue;
                }
                if (property.NameEquals("score"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    score = property.Value.GetSingle();
                    continue;
                }
            }
            return new DetectorInfo(id.Value, name.Value, description.Value, author.Value, category.Value, Core.Optional.ToList(supportTopicList), Core.Optional.ToList(analysisType), Core.Optional.ToNullable(type), Core.Optional.ToNullable(score));
        }
    }
}
