// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// Class representing Response from Diagnostic Detectors
    /// Serialized Name: DiagnosticDetectorResponse
    /// </summary>
    public partial class DiagnosticDetectorResponse : ResourceData
    {
        /// <summary> Initializes a new instance of DiagnosticDetectorResponse. </summary>
        public DiagnosticDetectorResponse()
        {
            Metrics = new ChangeTrackingList<DiagnosticMetricSet>();
            AbnormalTimePeriods = new ChangeTrackingList<DetectorAbnormalTimePeriod>();
            Data = new ChangeTrackingList<IList<NameValuePair>>();
        }

        /// <summary> Initializes a new instance of DiagnosticDetectorResponse. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="startOn">
        /// Start time of the period
        /// Serialized Name: DiagnosticDetectorResponse.properties.startTime
        /// </param>
        /// <param name="endOn">
        /// End time of the period
        /// Serialized Name: DiagnosticDetectorResponse.properties.endTime
        /// </param>
        /// <param name="issueDetected">
        /// Flag representing Issue was detected.
        /// Serialized Name: DiagnosticDetectorResponse.properties.issueDetected
        /// </param>
        /// <param name="detectorDefinition">
        /// Detector&apos;s definition
        /// Serialized Name: DiagnosticDetectorResponse.properties.detectorDefinition
        /// </param>
        /// <param name="metrics">
        /// Metrics provided by the detector
        /// Serialized Name: DiagnosticDetectorResponse.properties.metrics
        /// </param>
        /// <param name="abnormalTimePeriods">
        /// List of Correlated events found by the detector
        /// Serialized Name: DiagnosticDetectorResponse.properties.abnormalTimePeriods
        /// </param>
        /// <param name="data">
        /// Additional Data that detector wants to send.
        /// Serialized Name: DiagnosticDetectorResponse.properties.data
        /// </param>
        /// <param name="responseMetaData">
        /// Meta Data
        /// Serialized Name: DiagnosticDetectorResponse.properties.responseMetaData
        /// </param>
        /// <param name="kind">
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </param>
        internal DiagnosticDetectorResponse(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, DateTimeOffset? startOn, DateTimeOffset? endOn, bool? issueDetected, DetectorDefinition detectorDefinition, IList<DiagnosticMetricSet> metrics, IList<DetectorAbnormalTimePeriod> abnormalTimePeriods, IList<IList<NameValuePair>> data, ResponseMetaData responseMetaData, string kind) : base(id, name, resourceType, systemData)
        {
            StartOn = startOn;
            EndOn = endOn;
            IssueDetected = issueDetected;
            DetectorDefinition = detectorDefinition;
            Metrics = metrics;
            AbnormalTimePeriods = abnormalTimePeriods;
            Data = data;
            ResponseMetaData = responseMetaData;
            Kind = kind;
        }

        /// <summary>
        /// Start time of the period
        /// Serialized Name: DiagnosticDetectorResponse.properties.startTime
        /// </summary>
        public DateTimeOffset? StartOn { get; set; }
        /// <summary>
        /// End time of the period
        /// Serialized Name: DiagnosticDetectorResponse.properties.endTime
        /// </summary>
        public DateTimeOffset? EndOn { get; set; }
        /// <summary>
        /// Flag representing Issue was detected.
        /// Serialized Name: DiagnosticDetectorResponse.properties.issueDetected
        /// </summary>
        public bool? IssueDetected { get; set; }
        /// <summary>
        /// Detector&apos;s definition
        /// Serialized Name: DiagnosticDetectorResponse.properties.detectorDefinition
        /// </summary>
        public DetectorDefinition DetectorDefinition { get; set; }
        /// <summary>
        /// Metrics provided by the detector
        /// Serialized Name: DiagnosticDetectorResponse.properties.metrics
        /// </summary>
        public IList<DiagnosticMetricSet> Metrics { get; }
        /// <summary>
        /// List of Correlated events found by the detector
        /// Serialized Name: DiagnosticDetectorResponse.properties.abnormalTimePeriods
        /// </summary>
        public IList<DetectorAbnormalTimePeriod> AbnormalTimePeriods { get; }
        /// <summary>
        /// Additional Data that detector wants to send.
        /// Serialized Name: DiagnosticDetectorResponse.properties.data
        /// </summary>
        public IList<IList<NameValuePair>> Data { get; }
        /// <summary>
        /// Meta Data
        /// Serialized Name: DiagnosticDetectorResponse.properties.responseMetaData
        /// </summary>
        internal ResponseMetaData ResponseMetaData { get; set; }
        /// <summary>
        /// Source of the Data
        /// Serialized Name: ResponseMetaData.dataSource
        /// </summary>
        public DataSource DataSource
        {
            get => ResponseMetaData is null ? default : ResponseMetaData.DataSource;
            set
            {
                if (ResponseMetaData is null)
                    ResponseMetaData = new ResponseMetaData();
                ResponseMetaData.DataSource = value;
            }
        }

        /// <summary>
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </summary>
        public string Kind { get; set; }
    }
}
