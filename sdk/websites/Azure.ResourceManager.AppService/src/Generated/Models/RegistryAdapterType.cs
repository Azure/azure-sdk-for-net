// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Type of the registry adapter. </summary>
    public readonly partial struct RegistryAdapterType : IEquatable<RegistryAdapterType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RegistryAdapterType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RegistryAdapterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BinaryValue = "Binary";
        private const string StringValue = "String";
        private const string ExpandStringValue = "Expand_String";
        private const string MultiStringValue = "Multi_String";
        private const string DWordValue = "DWord";
        private const string QWordValue = "QWord";

        /// <summary> Binary. </summary>
        public static RegistryAdapterType Binary { get; } = new RegistryAdapterType(BinaryValue);
        /// <summary> String. </summary>
        public static RegistryAdapterType String { get; } = new RegistryAdapterType(StringValue);
        /// <summary> Expand_String. </summary>
        public static RegistryAdapterType ExpandString { get; } = new RegistryAdapterType(ExpandStringValue);
        /// <summary> Multi_String. </summary>
        public static RegistryAdapterType MultiString { get; } = new RegistryAdapterType(MultiStringValue);
        /// <summary> DWord. </summary>
        public static RegistryAdapterType DWord { get; } = new RegistryAdapterType(DWordValue);
        /// <summary> QWord. </summary>
        public static RegistryAdapterType QWord { get; } = new RegistryAdapterType(QWordValue);
        /// <summary> Determines if two <see cref="RegistryAdapterType"/> values are the same. </summary>
        public static bool operator ==(RegistryAdapterType left, RegistryAdapterType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RegistryAdapterType"/> values are not the same. </summary>
        public static bool operator !=(RegistryAdapterType left, RegistryAdapterType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RegistryAdapterType"/>. </summary>
        public static implicit operator RegistryAdapterType(string value) => new RegistryAdapterType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RegistryAdapterType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RegistryAdapterType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
