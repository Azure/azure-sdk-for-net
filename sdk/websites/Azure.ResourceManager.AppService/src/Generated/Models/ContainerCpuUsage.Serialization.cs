// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class ContainerCpuUsage : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TotalUsage))
            {
                writer.WritePropertyName("totalUsage"u8);
                writer.WriteNumberValue(TotalUsage.Value);
            }
            if (Optional.IsCollectionDefined(PerCpuUsage))
            {
                writer.WritePropertyName("perCpuUsage"u8);
                writer.WriteStartArray();
                foreach (var item in PerCpuUsage)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(KernelModeUsage))
            {
                writer.WritePropertyName("kernelModeUsage"u8);
                writer.WriteNumberValue(KernelModeUsage.Value);
            }
            if (Optional.IsDefined(UserModeUsage))
            {
                writer.WritePropertyName("userModeUsage"u8);
                writer.WriteNumberValue(UserModeUsage.Value);
            }
            writer.WriteEndObject();
        }

        internal static ContainerCpuUsage DeserializeContainerCpuUsage(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<long> totalUsage = default;
            Optional<IList<long>> perCpuUsage = default;
            Optional<long> kernelModeUsage = default;
            Optional<long> userModeUsage = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("totalUsage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalUsage = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("perCpuUsage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<long> array = new List<long>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt64());
                    }
                    perCpuUsage = array;
                    continue;
                }
                if (property.NameEquals("kernelModeUsage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kernelModeUsage = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("userModeUsage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    userModeUsage = property.Value.GetInt64();
                    continue;
                }
            }
            return new ContainerCpuUsage(Optional.ToNullable(totalUsage), Optional.ToList(perCpuUsage), Optional.ToNullable(kernelModeUsage), Optional.ToNullable(userModeUsage));
        }
    }
}
