// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> The minimum strength TLS cipher suite allowed for an application. </summary>
    public readonly partial struct AppServiceTlsCipherSuite : IEquatable<AppServiceTlsCipherSuite>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AppServiceTlsCipherSuite"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AppServiceTlsCipherSuite(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TlsAes256GcmSha384Value = "TLS_AES_256_GCM_SHA384";
        private const string TlsAes128GcmSha256Value = "TLS_AES_128_GCM_SHA256";
        private const string TlsECDiffieHellmanECDsaWithAes256GcmSha384Value = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
        private const string TlsECDiffieHellmanECDsaWithAes128CbcSha256Value = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
        private const string TlsECDiffieHellmanECDsaWithAes128GcmSha256Value = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
        private const string TlsECDiffieHellmanRsaWithAes256GcmSha384Value = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
        private const string TlsECDiffieHellmanRsaWithAes128GcmSha256Value = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";
        private const string TlsECDiffieHellmanRsaWithAes256CbcSha384Value = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
        private const string TlsECDiffieHellmanRsaWithAes128CbcSha256Value = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
        private const string TlsECDiffieHellmanRsaWithAes256CbcShaValue = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
        private const string TlsECDiffieHellmanRsaWithAes128CbcShaValue = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
        private const string TlsRsaWithAes256GcmSha384Value = "TLS_RSA_WITH_AES_256_GCM_SHA384";
        private const string TlsRsaWithAes128GcmSha256Value = "TLS_RSA_WITH_AES_128_GCM_SHA256";
        private const string TlsRsaWithAes256CbcSha256Value = "TLS_RSA_WITH_AES_256_CBC_SHA256";
        private const string TlsRsaWithAes128CbcSha256Value = "TLS_RSA_WITH_AES_128_CBC_SHA256";
        private const string TlsRsaWithAes256CbcShaValue = "TLS_RSA_WITH_AES_256_CBC_SHA";
        private const string TlsRsaWithAes128CbcShaValue = "TLS_RSA_WITH_AES_128_CBC_SHA";

        /// <summary> TLS_AES_256_GCM_SHA384. </summary>
        public static AppServiceTlsCipherSuite TlsAes256GcmSha384 { get; } = new AppServiceTlsCipherSuite(TlsAes256GcmSha384Value);
        /// <summary> TLS_AES_128_GCM_SHA256. </summary>
        public static AppServiceTlsCipherSuite TlsAes128GcmSha256 { get; } = new AppServiceTlsCipherSuite(TlsAes128GcmSha256Value);
        /// <summary> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384. </summary>
        public static AppServiceTlsCipherSuite TlsECDiffieHellmanECDsaWithAes256GcmSha384 { get; } = new AppServiceTlsCipherSuite(TlsECDiffieHellmanECDsaWithAes256GcmSha384Value);
        /// <summary> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256. </summary>
        public static AppServiceTlsCipherSuite TlsECDiffieHellmanECDsaWithAes128CbcSha256 { get; } = new AppServiceTlsCipherSuite(TlsECDiffieHellmanECDsaWithAes128CbcSha256Value);
        /// <summary> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256. </summary>
        public static AppServiceTlsCipherSuite TlsECDiffieHellmanECDsaWithAes128GcmSha256 { get; } = new AppServiceTlsCipherSuite(TlsECDiffieHellmanECDsaWithAes128GcmSha256Value);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384. </summary>
        public static AppServiceTlsCipherSuite TlsECDiffieHellmanRsaWithAes256GcmSha384 { get; } = new AppServiceTlsCipherSuite(TlsECDiffieHellmanRsaWithAes256GcmSha384Value);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256. </summary>
        public static AppServiceTlsCipherSuite TlsECDiffieHellmanRsaWithAes128GcmSha256 { get; } = new AppServiceTlsCipherSuite(TlsECDiffieHellmanRsaWithAes128GcmSha256Value);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384. </summary>
        public static AppServiceTlsCipherSuite TlsECDiffieHellmanRsaWithAes256CbcSha384 { get; } = new AppServiceTlsCipherSuite(TlsECDiffieHellmanRsaWithAes256CbcSha384Value);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256. </summary>
        public static AppServiceTlsCipherSuite TlsECDiffieHellmanRsaWithAes128CbcSha256 { get; } = new AppServiceTlsCipherSuite(TlsECDiffieHellmanRsaWithAes128CbcSha256Value);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA. </summary>
        public static AppServiceTlsCipherSuite TlsECDiffieHellmanRsaWithAes256CbcSha { get; } = new AppServiceTlsCipherSuite(TlsECDiffieHellmanRsaWithAes256CbcShaValue);
        /// <summary> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA. </summary>
        public static AppServiceTlsCipherSuite TlsECDiffieHellmanRsaWithAes128CbcSha { get; } = new AppServiceTlsCipherSuite(TlsECDiffieHellmanRsaWithAes128CbcShaValue);
        /// <summary> TLS_RSA_WITH_AES_256_GCM_SHA384. </summary>
        public static AppServiceTlsCipherSuite TlsRsaWithAes256GcmSha384 { get; } = new AppServiceTlsCipherSuite(TlsRsaWithAes256GcmSha384Value);
        /// <summary> TLS_RSA_WITH_AES_128_GCM_SHA256. </summary>
        public static AppServiceTlsCipherSuite TlsRsaWithAes128GcmSha256 { get; } = new AppServiceTlsCipherSuite(TlsRsaWithAes128GcmSha256Value);
        /// <summary> TLS_RSA_WITH_AES_256_CBC_SHA256. </summary>
        public static AppServiceTlsCipherSuite TlsRsaWithAes256CbcSha256 { get; } = new AppServiceTlsCipherSuite(TlsRsaWithAes256CbcSha256Value);
        /// <summary> TLS_RSA_WITH_AES_128_CBC_SHA256. </summary>
        public static AppServiceTlsCipherSuite TlsRsaWithAes128CbcSha256 { get; } = new AppServiceTlsCipherSuite(TlsRsaWithAes128CbcSha256Value);
        /// <summary> TLS_RSA_WITH_AES_256_CBC_SHA. </summary>
        public static AppServiceTlsCipherSuite TlsRsaWithAes256CbcSha { get; } = new AppServiceTlsCipherSuite(TlsRsaWithAes256CbcShaValue);
        /// <summary> TLS_RSA_WITH_AES_128_CBC_SHA. </summary>
        public static AppServiceTlsCipherSuite TlsRsaWithAes128CbcSha { get; } = new AppServiceTlsCipherSuite(TlsRsaWithAes128CbcShaValue);
        /// <summary> Determines if two <see cref="AppServiceTlsCipherSuite"/> values are the same. </summary>
        public static bool operator ==(AppServiceTlsCipherSuite left, AppServiceTlsCipherSuite right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AppServiceTlsCipherSuite"/> values are not the same. </summary>
        public static bool operator !=(AppServiceTlsCipherSuite left, AppServiceTlsCipherSuite right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AppServiceTlsCipherSuite"/>. </summary>
        public static implicit operator AppServiceTlsCipherSuite(string value) => new AppServiceTlsCipherSuite(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AppServiceTlsCipherSuite other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AppServiceTlsCipherSuite other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
