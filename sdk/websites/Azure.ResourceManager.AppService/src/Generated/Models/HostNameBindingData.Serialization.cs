// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService
{
    public partial class HostNameBindingData : IUtf8JsonSerializable, IModelJsonSerializable<HostNameBindingData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<HostNameBindingData>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<HostNameBindingData>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HostNameBindingData>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(SiteName))
            {
                writer.WritePropertyName("siteName"u8);
                writer.WriteStringValue(SiteName);
            }
            if (Optional.IsDefined(DomainId))
            {
                writer.WritePropertyName("domainId"u8);
                writer.WriteStringValue(DomainId);
            }
            if (Optional.IsDefined(AzureResourceName))
            {
                writer.WritePropertyName("azureResourceName"u8);
                writer.WriteStringValue(AzureResourceName);
            }
            if (Optional.IsDefined(AzureResourceType))
            {
                writer.WritePropertyName("azureResourceType"u8);
                writer.WriteStringValue(AzureResourceType.Value.ToSerialString());
            }
            if (Optional.IsDefined(CustomHostNameDnsRecordType))
            {
                writer.WritePropertyName("customHostNameDnsRecordType"u8);
                writer.WriteStringValue(CustomHostNameDnsRecordType.Value.ToSerialString());
            }
            if (Optional.IsDefined(HostNameType))
            {
                writer.WritePropertyName("hostNameType"u8);
                writer.WriteStringValue(HostNameType.Value.ToSerialString());
            }
            if (Optional.IsDefined(SslState))
            {
                writer.WritePropertyName("sslState"u8);
                writer.WriteStringValue(SslState.Value.ToSerialString());
            }
            if (Optional.IsDefined(ThumbprintString))
            {
                writer.WritePropertyName("thumbprint"u8);
                writer.WriteStringValue(ThumbprintString);
            }
            writer.WriteEndObject();
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static HostNameBindingData DeserializeHostNameBindingData(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> siteName = default;
            Optional<string> domainId = default;
            Optional<string> azureResourceName = default;
            Optional<AppServiceResourceType> azureResourceType = default;
            Optional<CustomHostNameDnsRecordType> customHostNameDnsRecordType = default;
            Optional<AppServiceHostNameType> hostNameType = default;
            Optional<HostNameBindingSslState> sslState = default;
            Optional<string> thumbprint = default;
            Optional<string> virtualIP = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("siteName"u8))
                        {
                            siteName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("domainId"u8))
                        {
                            domainId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("azureResourceName"u8))
                        {
                            azureResourceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("azureResourceType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureResourceType = property0.Value.GetString().ToAppServiceResourceType();
                            continue;
                        }
                        if (property0.NameEquals("customHostNameDnsRecordType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            customHostNameDnsRecordType = property0.Value.GetString().ToCustomHostNameDnsRecordType();
                            continue;
                        }
                        if (property0.NameEquals("hostNameType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            hostNameType = property0.Value.GetString().ToAppServiceHostNameType();
                            continue;
                        }
                        if (property0.NameEquals("sslState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sslState = property0.Value.GetString().ToHostNameBindingSslState();
                            continue;
                        }
                        if (property0.NameEquals("thumbprint"u8))
                        {
                            thumbprint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("virtualIP"u8))
                        {
                            virtualIP = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new HostNameBindingData(id, name, type, systemData.Value, siteName.Value, domainId.Value, azureResourceName.Value, Optional.ToNullable(azureResourceType), Optional.ToNullable(customHostNameDnsRecordType), Optional.ToNullable(hostNameType), Optional.ToNullable(sslState), thumbprint.Value, virtualIP.Value, kind.Value, serializedAdditionalRawData);
        }

        HostNameBindingData IModelJsonSerializable<HostNameBindingData>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HostNameBindingData>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeHostNameBindingData(doc.RootElement, options);
        }

        BinaryData IModelSerializable<HostNameBindingData>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HostNameBindingData>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        HostNameBindingData IModelSerializable<HostNameBindingData>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HostNameBindingData>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeHostNameBindingData(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="HostNameBindingData"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="HostNameBindingData"/> to convert. </param>
        public static implicit operator RequestContent(HostNameBindingData model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="HostNameBindingData"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator HostNameBindingData(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeHostNameBindingData(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
