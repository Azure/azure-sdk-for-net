// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Container App Ingress configuration. </summary>
    public partial class Ingress
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Ingress"/>. </summary>
        public Ingress()
        {
            Traffic = new ChangeTrackingList<TrafficWeight>();
        }

        /// <summary> Initializes a new instance of <see cref="Ingress"/>. </summary>
        /// <param name="fqdn"> Hostname. </param>
        /// <param name="external"> Bool indicating if app exposes an external http endpoint. </param>
        /// <param name="targetPort"> Target Port in containers for traffic from ingress. </param>
        /// <param name="transport"> Ingress transport protocol. </param>
        /// <param name="traffic"></param>
        /// <param name="allowInsecure"> Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Ingress(string fqdn, bool? external, int? targetPort, IngressTransportMethod? transport, IList<TrafficWeight> traffic, bool? allowInsecure, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Fqdn = fqdn;
            External = external;
            TargetPort = targetPort;
            Transport = transport;
            Traffic = traffic;
            AllowInsecure = allowInsecure;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Hostname. </summary>
        [WirePath("fqdn")]
        public string Fqdn { get; }
        /// <summary> Bool indicating if app exposes an external http endpoint. </summary>
        [WirePath("external")]
        public bool? External { get; set; }
        /// <summary> Target Port in containers for traffic from ingress. </summary>
        [WirePath("targetPort")]
        public int? TargetPort { get; set; }
        /// <summary> Ingress transport protocol. </summary>
        [WirePath("transport")]
        public IngressTransportMethod? Transport { get; set; }
        /// <summary> Gets the traffic. </summary>
        [WirePath("traffic")]
        public IList<TrafficWeight> Traffic { get; }
        /// <summary> Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections. </summary>
        [WirePath("allowInsecure")]
        public bool? AllowInsecure { get; set; }
    }
}
