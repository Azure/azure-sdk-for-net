// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// Application stack major version.
    /// Serialized Name: StackMajorVersion
    /// </summary>
    public partial class StackMajorVersion
    {
        /// <summary> Initializes a new instance of StackMajorVersion. </summary>
        public StackMajorVersion()
        {
            MinorVersions = new ChangeTrackingList<StackMinorVersion>();
            AppSettingsDictionary = new ChangeTrackingDictionary<string, BinaryData>();
            SiteConfigPropertiesDictionary = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of StackMajorVersion. </summary>
        /// <param name="displayVersion">
        /// Application stack major version (display only).
        /// Serialized Name: StackMajorVersion.displayVersion
        /// </param>
        /// <param name="runtimeVersion">
        /// Application stack major version (runtime only).
        /// Serialized Name: StackMajorVersion.runtimeVersion
        /// </param>
        /// <param name="isDefault">
        /// &lt;code&gt;true&lt;/code&gt; if this is the default major version; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: StackMajorVersion.isDefault
        /// </param>
        /// <param name="minorVersions">
        /// Minor versions associated with the major version.
        /// Serialized Name: StackMajorVersion.minorVersions
        /// </param>
        /// <param name="isApplicationInsights">
        /// &lt;code&gt;true&lt;/code&gt; if this supports Application Insights; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: StackMajorVersion.applicationInsights
        /// </param>
        /// <param name="isPreview">
        /// &lt;code&gt;true&lt;/code&gt; if this stack is in Preview, otherwise &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: StackMajorVersion.isPreview
        /// </param>
        /// <param name="isDeprecated">
        /// &lt;code&gt;true&lt;/code&gt; if this stack has been deprecated, otherwise &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: StackMajorVersion.isDeprecated
        /// </param>
        /// <param name="isHidden">
        /// &lt;code&gt;true&lt;/code&gt; if this stack should be hidden for new customers on portal, otherwise &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: StackMajorVersion.isHidden
        /// </param>
        /// <param name="appSettingsDictionary">
        /// &lt;appSettings&gt;
        ///  &lt;appSetting name=&quot;FUNCTIONS_WORKER_RUNTIME&quot; value=&quot;dotnet&quot; /&gt;
        /// &lt;/appSettings&gt;
        ///  Example: All the function apps need AppSetting: &quot;FUNCTIONS_WORKER_RUNTIME&quot; to be set stack name
        /// Serialized Name: StackMajorVersion.appSettingsDictionary
        /// </param>
        /// <param name="siteConfigPropertiesDictionary">
        /// &lt;siteConfigProperties&gt;
        ///  &lt;siteConfigProperty name=&quot;Use32BitWorkerProcess&quot; value=&quot;false&quot; /&gt;
        /// &lt;/siteConfigProperties&gt;
        ///  Example: All Linux Function Apps, need Use32BitWorkerProcess to be set to 0
        /// Serialized Name: StackMajorVersion.siteConfigPropertiesDictionary
        /// </param>
        internal StackMajorVersion(string displayVersion, string runtimeVersion, bool? isDefault, IList<StackMinorVersion> minorVersions, bool? isApplicationInsights, bool? isPreview, bool? isDeprecated, bool? isHidden, IDictionary<string, BinaryData> appSettingsDictionary, IDictionary<string, BinaryData> siteConfigPropertiesDictionary)
        {
            DisplayVersion = displayVersion;
            RuntimeVersion = runtimeVersion;
            IsDefault = isDefault;
            MinorVersions = minorVersions;
            IsApplicationInsights = isApplicationInsights;
            IsPreview = isPreview;
            IsDeprecated = isDeprecated;
            IsHidden = isHidden;
            AppSettingsDictionary = appSettingsDictionary;
            SiteConfigPropertiesDictionary = siteConfigPropertiesDictionary;
        }

        /// <summary>
        /// Application stack major version (display only).
        /// Serialized Name: StackMajorVersion.displayVersion
        /// </summary>
        public string DisplayVersion { get; set; }
        /// <summary>
        /// Application stack major version (runtime only).
        /// Serialized Name: StackMajorVersion.runtimeVersion
        /// </summary>
        public string RuntimeVersion { get; set; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if this is the default major version; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: StackMajorVersion.isDefault
        /// </summary>
        public bool? IsDefault { get; set; }
        /// <summary>
        /// Minor versions associated with the major version.
        /// Serialized Name: StackMajorVersion.minorVersions
        /// </summary>
        public IList<StackMinorVersion> MinorVersions { get; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if this supports Application Insights; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: StackMajorVersion.applicationInsights
        /// </summary>
        public bool? IsApplicationInsights { get; set; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if this stack is in Preview, otherwise &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: StackMajorVersion.isPreview
        /// </summary>
        public bool? IsPreview { get; set; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if this stack has been deprecated, otherwise &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: StackMajorVersion.isDeprecated
        /// </summary>
        public bool? IsDeprecated { get; set; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if this stack should be hidden for new customers on portal, otherwise &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: StackMajorVersion.isHidden
        /// </summary>
        public bool? IsHidden { get; set; }
        /// <summary>
        /// &lt;appSettings&gt;
        ///  &lt;appSetting name=&quot;FUNCTIONS_WORKER_RUNTIME&quot; value=&quot;dotnet&quot; /&gt;
        /// &lt;/appSettings&gt;
        ///  Example: All the function apps need AppSetting: &quot;FUNCTIONS_WORKER_RUNTIME&quot; to be set stack name
        /// Serialized Name: StackMajorVersion.appSettingsDictionary
        /// </summary>
        public IDictionary<string, BinaryData> AppSettingsDictionary { get; }
        /// <summary>
        /// &lt;siteConfigProperties&gt;
        ///  &lt;siteConfigProperty name=&quot;Use32BitWorkerProcess&quot; value=&quot;false&quot; /&gt;
        /// &lt;/siteConfigProperties&gt;
        ///  Example: All Linux Function Apps, need Use32BitWorkerProcess to be set to 0
        /// Serialized Name: StackMajorVersion.siteConfigPropertiesDictionary
        /// </summary>
        public IDictionary<string, BinaryData> SiteConfigPropertiesDictionary { get; }
    }
}
