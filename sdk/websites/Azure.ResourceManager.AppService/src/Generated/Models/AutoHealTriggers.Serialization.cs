// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class AutoHealTriggers : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Requests))
            {
                writer.WritePropertyName("requests"u8);
                writer.WriteObjectValue(Requests);
            }
            if (Core.Optional.IsDefined(PrivateBytesInKB))
            {
                writer.WritePropertyName("privateBytesInKB"u8);
                writer.WriteNumberValue(PrivateBytesInKB.Value);
            }
            if (Core.Optional.IsCollectionDefined(StatusCodes))
            {
                writer.WritePropertyName("statusCodes"u8);
                writer.WriteStartArray();
                foreach (var item in StatusCodes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(SlowRequests))
            {
                writer.WritePropertyName("slowRequests"u8);
                writer.WriteObjectValue(SlowRequests);
            }
            if (Core.Optional.IsCollectionDefined(SlowRequestsWithPath))
            {
                writer.WritePropertyName("slowRequestsWithPath"u8);
                writer.WriteStartArray();
                foreach (var item in SlowRequestsWithPath)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(StatusCodesRange))
            {
                writer.WritePropertyName("statusCodesRange"u8);
                writer.WriteStartArray();
                foreach (var item in StatusCodesRange)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AutoHealTriggers DeserializeAutoHealTriggers(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<RequestsBasedTrigger> requests = default;
            Core.Optional<int> privateBytesInKB = default;
            Core.Optional<IList<StatusCodesBasedTrigger>> statusCodes = default;
            Core.Optional<SlowRequestsBasedTrigger> slowRequests = default;
            Core.Optional<IList<SlowRequestsBasedTrigger>> slowRequestsWithPath = default;
            Core.Optional<IList<StatusCodesRangeBasedTrigger>> statusCodesRange = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requests"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    requests = RequestsBasedTrigger.DeserializeRequestsBasedTrigger(property.Value);
                    continue;
                }
                if (property.NameEquals("privateBytesInKB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    privateBytesInKB = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("statusCodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<StatusCodesBasedTrigger> array = new List<StatusCodesBasedTrigger>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(StatusCodesBasedTrigger.DeserializeStatusCodesBasedTrigger(item));
                    }
                    statusCodes = array;
                    continue;
                }
                if (property.NameEquals("slowRequests"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    slowRequests = SlowRequestsBasedTrigger.DeserializeSlowRequestsBasedTrigger(property.Value);
                    continue;
                }
                if (property.NameEquals("slowRequestsWithPath"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SlowRequestsBasedTrigger> array = new List<SlowRequestsBasedTrigger>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SlowRequestsBasedTrigger.DeserializeSlowRequestsBasedTrigger(item));
                    }
                    slowRequestsWithPath = array;
                    continue;
                }
                if (property.NameEquals("statusCodesRange"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<StatusCodesRangeBasedTrigger> array = new List<StatusCodesRangeBasedTrigger>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(StatusCodesRangeBasedTrigger.DeserializeStatusCodesRangeBasedTrigger(item));
                    }
                    statusCodesRange = array;
                    continue;
                }
            }
            return new AutoHealTriggers(requests.Value, Core.Optional.ToNullable(privateBytesInKB), Core.Optional.ToList(statusCodes), slowRequests.Value, Core.Optional.ToList(slowRequestsWithPath), Core.Optional.ToList(statusCodesRange));
        }
    }
}
