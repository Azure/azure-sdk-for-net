// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. </summary>
    public readonly partial struct LoadBalancingMode : IEquatable<LoadBalancingMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LoadBalancingMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LoadBalancingMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string WebValue = "Web";
        private const string PublishingValue = "Publishing";
        private const string WebPublishingValue = "Web, Publishing";

        /// <summary> None. </summary>
        public static LoadBalancingMode None { get; } = new LoadBalancingMode(NoneValue);
        /// <summary> Web. </summary>
        public static LoadBalancingMode Web { get; } = new LoadBalancingMode(WebValue);
        /// <summary> Publishing. </summary>
        public static LoadBalancingMode Publishing { get; } = new LoadBalancingMode(PublishingValue);
        /// <summary> Web, Publishing. </summary>
        public static LoadBalancingMode WebPublishing { get; } = new LoadBalancingMode(WebPublishingValue);
        /// <summary> Determines if two <see cref="LoadBalancingMode"/> values are the same. </summary>
        public static bool operator ==(LoadBalancingMode left, LoadBalancingMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LoadBalancingMode"/> values are not the same. </summary>
        public static bool operator !=(LoadBalancingMode left, LoadBalancingMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LoadBalancingMode"/>. </summary>
        public static implicit operator LoadBalancingMode(string value) => new LoadBalancingMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LoadBalancingMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LoadBalancingMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
