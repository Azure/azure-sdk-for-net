// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Defines what this IP filter will be used for. This is to support IP filtering on proxies. </summary>
    public readonly partial struct IPFilterTag : IEquatable<IPFilterTag>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IPFilterTag"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IPFilterTag(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string XffProxyValue = "XffProxy";
        private const string ServiceTagValue = "ServiceTag";

        /// <summary> Default. </summary>
        public static IPFilterTag Default { get; } = new IPFilterTag(DefaultValue);
        /// <summary> XffProxy. </summary>
        public static IPFilterTag XffProxy { get; } = new IPFilterTag(XffProxyValue);
        /// <summary> ServiceTag. </summary>
        public static IPFilterTag ServiceTag { get; } = new IPFilterTag(ServiceTagValue);
        /// <summary> Determines if two <see cref="IPFilterTag"/> values are the same. </summary>
        public static bool operator ==(IPFilterTag left, IPFilterTag right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IPFilterTag"/> values are not the same. </summary>
        public static bool operator !=(IPFilterTag left, IPFilterTag right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IPFilterTag"/>. </summary>
        public static implicit operator IPFilterTag(string value) => new IPFilterTag(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IPFilterTag other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IPFilterTag other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
