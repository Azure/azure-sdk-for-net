// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class WorkerSizeOptionsExtensions
    {
        public static string ToSerialString(this WorkerSizeOptions value) => value switch
        {
            WorkerSizeOptions.Small => "Small",
            WorkerSizeOptions.Medium => "Medium",
            WorkerSizeOptions.Large => "Large",
            WorkerSizeOptions.D1 => "D1",
            WorkerSizeOptions.D2 => "D2",
            WorkerSizeOptions.D3 => "D3",
            WorkerSizeOptions.SmallV3 => "SmallV3",
            WorkerSizeOptions.MediumV3 => "MediumV3",
            WorkerSizeOptions.LargeV3 => "LargeV3",
            WorkerSizeOptions.NestedSmall => "NestedSmall",
            WorkerSizeOptions.NestedSmallLinux => "NestedSmallLinux",
            WorkerSizeOptions.Default => "Default",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown WorkerSizeOptions value.")
        };

        public static WorkerSizeOptions ToWorkerSizeOptions(this string value)
        {
            if (string.Equals(value, "Small", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.Small;
            if (string.Equals(value, "Medium", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.Medium;
            if (string.Equals(value, "Large", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.Large;
            if (string.Equals(value, "D1", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.D1;
            if (string.Equals(value, "D2", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.D2;
            if (string.Equals(value, "D3", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.D3;
            if (string.Equals(value, "SmallV3", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.SmallV3;
            if (string.Equals(value, "MediumV3", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.MediumV3;
            if (string.Equals(value, "LargeV3", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.LargeV3;
            if (string.Equals(value, "NestedSmall", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.NestedSmall;
            if (string.Equals(value, "NestedSmallLinux", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.NestedSmallLinux;
            if (string.Equals(value, "Default", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOptions.Default;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown WorkerSizeOptions value.");
        }
    }
}
