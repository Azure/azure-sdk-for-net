// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// Virtual Network information contract.
    /// Serialized Name: VnetInfo
    /// </summary>
    public partial class VnetInfo
    {
        /// <summary> Initializes a new instance of VnetInfo. </summary>
        internal VnetInfo()
        {
            Routes = new ChangeTrackingList<VnetRoute>();
        }

        /// <summary> Initializes a new instance of VnetInfo. </summary>
        /// <param name="vnetResourceId">
        /// The Virtual Network&apos;s resource ID.
        /// Serialized Name: VnetInfo.vnetResourceId
        /// </param>
        /// <param name="certThumbprint">
        /// The client certificate thumbprint.
        /// Serialized Name: VnetInfo.certThumbprint
        /// </param>
        /// <param name="certBlob">
        /// A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
        /// Point-To-Site VPN connection.
        /// Serialized Name: VnetInfo.certBlob
        /// </param>
        /// <param name="routes">
        /// The routes that this Virtual Network connection uses.
        /// Serialized Name: VnetInfo.routes
        /// </param>
        /// <param name="isResyncRequired">
        /// &lt;code&gt;true&lt;/code&gt; if a resync is required; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: VnetInfo.resyncRequired
        /// </param>
        /// <param name="dnsServers">
        /// DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.
        /// Serialized Name: VnetInfo.dnsServers
        /// </param>
        /// <param name="isSwift">
        /// Flag that is used to denote if this is VNET injection
        /// Serialized Name: VnetInfo.isSwift
        /// </param>
        internal VnetInfo(ResourceIdentifier vnetResourceId, string certThumbprint, string certBlob, IReadOnlyList<VnetRoute> routes, bool? isResyncRequired, string dnsServers, bool? isSwift)
        {
            VnetResourceId = vnetResourceId;
            CertThumbprint = certThumbprint;
            CertBlob = certBlob;
            Routes = routes;
            IsResyncRequired = isResyncRequired;
            DnsServers = dnsServers;
            IsSwift = isSwift;
        }

        /// <summary>
        /// The Virtual Network&apos;s resource ID.
        /// Serialized Name: VnetInfo.vnetResourceId
        /// </summary>
        public ResourceIdentifier VnetResourceId { get; }
        /// <summary>
        /// The client certificate thumbprint.
        /// Serialized Name: VnetInfo.certThumbprint
        /// </summary>
        public string CertThumbprint { get; }
        /// <summary>
        /// A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
        /// Point-To-Site VPN connection.
        /// Serialized Name: VnetInfo.certBlob
        /// </summary>
        public string CertBlob { get; }
        /// <summary>
        /// The routes that this Virtual Network connection uses.
        /// Serialized Name: VnetInfo.routes
        /// </summary>
        public IReadOnlyList<VnetRoute> Routes { get; }
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if a resync is required; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// Serialized Name: VnetInfo.resyncRequired
        /// </summary>
        public bool? IsResyncRequired { get; }
        /// <summary>
        /// DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.
        /// Serialized Name: VnetInfo.dnsServers
        /// </summary>
        public string DnsServers { get; }
        /// <summary>
        /// Flag that is used to denote if this is VNET injection
        /// Serialized Name: VnetInfo.isSwift
        /// </summary>
        public bool? IsSwift { get; }
    }
}
