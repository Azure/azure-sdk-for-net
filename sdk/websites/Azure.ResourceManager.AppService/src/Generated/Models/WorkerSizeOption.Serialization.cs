// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class WorkerSizeOptionExtensions
    {
        public static string ToSerialString(this WorkerSizeOption value) => value switch
        {
            WorkerSizeOption.Small => "Small",
            WorkerSizeOption.Medium => "Medium",
            WorkerSizeOption.Large => "Large",
            WorkerSizeOption.D1 => "D1",
            WorkerSizeOption.D2 => "D2",
            WorkerSizeOption.D3 => "D3",
            WorkerSizeOption.SmallV3 => "SmallV3",
            WorkerSizeOption.MediumV3 => "MediumV3",
            WorkerSizeOption.LargeV3 => "LargeV3",
            WorkerSizeOption.NestedSmall => "NestedSmall",
            WorkerSizeOption.NestedSmallLinux => "NestedSmallLinux",
            WorkerSizeOption.Default => "Default",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown WorkerSizeOption value.")
        };

        public static WorkerSizeOption ToWorkerSizeOption(this string value)
        {
            if (string.Equals(value, "Small", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.Small;
            if (string.Equals(value, "Medium", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.Medium;
            if (string.Equals(value, "Large", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.Large;
            if (string.Equals(value, "D1", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.D1;
            if (string.Equals(value, "D2", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.D2;
            if (string.Equals(value, "D3", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.D3;
            if (string.Equals(value, "SmallV3", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.SmallV3;
            if (string.Equals(value, "MediumV3", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.MediumV3;
            if (string.Equals(value, "LargeV3", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.LargeV3;
            if (string.Equals(value, "NestedSmall", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.NestedSmall;
            if (string.Equals(value, "NestedSmallLinux", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.NestedSmallLinux;
            if (string.Equals(value, "Default", StringComparison.InvariantCultureIgnoreCase)) return WorkerSizeOption.Default;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown WorkerSizeOption value.");
        }
    }
}
