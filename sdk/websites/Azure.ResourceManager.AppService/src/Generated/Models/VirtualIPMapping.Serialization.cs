// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class VirtualIPMapping : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(VirtualIP))
            {
                writer.WritePropertyName("virtualIP");
                writer.WriteStringValue(VirtualIP);
            }
            if (Optional.IsDefined(InternalHttpPort))
            {
                writer.WritePropertyName("internalHttpPort");
                writer.WriteNumberValue(InternalHttpPort.Value);
            }
            if (Optional.IsDefined(InternalHttpsPort))
            {
                writer.WritePropertyName("internalHttpsPort");
                writer.WriteNumberValue(InternalHttpsPort.Value);
            }
            if (Optional.IsDefined(InUse))
            {
                writer.WritePropertyName("inUse");
                writer.WriteBooleanValue(InUse.Value);
            }
            if (Optional.IsDefined(ServiceName))
            {
                writer.WritePropertyName("serviceName");
                writer.WriteStringValue(ServiceName);
            }
            writer.WriteEndObject();
        }

        internal static VirtualIPMapping DeserializeVirtualIPMapping(JsonElement element)
        {
            Optional<string> virtualIP = default;
            Optional<int> internalHttpPort = default;
            Optional<int> internalHttpsPort = default;
            Optional<bool> inUse = default;
            Optional<string> serviceName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("virtualIP"))
                {
                    virtualIP = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("internalHttpPort"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    internalHttpPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("internalHttpsPort"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    internalHttpsPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("inUse"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    inUse = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("serviceName"))
                {
                    serviceName = property.Value.GetString();
                    continue;
                }
            }
            return new VirtualIPMapping(virtualIP.Value, Optional.ToNullable(internalHttpPort), Optional.ToNullable(internalHttpsPort), Optional.ToNullable(inUse), serviceName.Value);
        }
    }
}
