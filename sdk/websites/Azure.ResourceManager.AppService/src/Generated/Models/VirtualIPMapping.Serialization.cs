// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class VirtualIPMapping : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(VirtualIP))
            {
                writer.WritePropertyName("virtualIP"u8);
                writer.WriteStringValue(VirtualIP);
            }
            if (Core.Optional.IsDefined(InternalHttpPort))
            {
                writer.WritePropertyName("internalHttpPort"u8);
                writer.WriteNumberValue(InternalHttpPort.Value);
            }
            if (Core.Optional.IsDefined(InternalHttpsPort))
            {
                writer.WritePropertyName("internalHttpsPort"u8);
                writer.WriteNumberValue(InternalHttpsPort.Value);
            }
            if (Core.Optional.IsDefined(IsInUse))
            {
                writer.WritePropertyName("inUse"u8);
                writer.WriteBooleanValue(IsInUse.Value);
            }
            if (Core.Optional.IsDefined(ServiceName))
            {
                writer.WritePropertyName("serviceName"u8);
                writer.WriteStringValue(ServiceName);
            }
            writer.WriteEndObject();
        }

        internal static VirtualIPMapping DeserializeVirtualIPMapping(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> virtualIP = default;
            Core.Optional<int> internalHttpPort = default;
            Core.Optional<int> internalHttpsPort = default;
            Core.Optional<bool> inUse = default;
            Core.Optional<string> serviceName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("virtualIP"u8))
                {
                    virtualIP = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("internalHttpPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    internalHttpPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("internalHttpsPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    internalHttpsPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("inUse"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inUse = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("serviceName"u8))
                {
                    serviceName = property.Value.GetString();
                    continue;
                }
            }
            return new VirtualIPMapping(virtualIP.Value, Core.Optional.ToNullable(internalHttpPort), Core.Optional.ToNullable(internalHttpsPort), Core.Optional.ToNullable(inUse), serviceName.Value);
        }
    }
}
