// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Class Representing Detector Evidence used for analysis. </summary>
    public partial class AnalysisDetectorEvidences
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AnalysisDetectorEvidences"/>. </summary>
        public AnalysisDetectorEvidences()
        {
            Metrics = new ChangeTrackingList<DiagnosticMetricSet>();
            Data = new ChangeTrackingList<IList<AppServiceNameValuePair>>();
        }

        /// <summary> Initializes a new instance of <see cref="AnalysisDetectorEvidences"/>. </summary>
        /// <param name="source"> Name of the Detector. </param>
        /// <param name="detectorDefinition"> Detector Definition. </param>
        /// <param name="metrics"> Source Metrics. </param>
        /// <param name="data"> Additional Source Data. </param>
        /// <param name="detectorMetaData"> Detector Meta Data. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AnalysisDetectorEvidences(string source, DetectorDefinition detectorDefinition, IList<DiagnosticMetricSet> metrics, IList<IList<AppServiceNameValuePair>> data, DetectorMetadata detectorMetaData, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Source = source;
            DetectorDefinition = detectorDefinition;
            Metrics = metrics;
            Data = data;
            DetectorMetaData = detectorMetaData;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Name of the Detector. </summary>
        public string Source { get; set; }
        /// <summary> Detector Definition. </summary>
        public DetectorDefinition DetectorDefinition { get; set; }
        /// <summary> Source Metrics. </summary>
        public IList<DiagnosticMetricSet> Metrics { get; }
        /// <summary> Additional Source Data. </summary>
        public IList<IList<AppServiceNameValuePair>> Data { get; }
        /// <summary> Detector Meta Data. </summary>
        internal DetectorMetadata DetectorMetaData { get; set; }
        /// <summary> Source of the Data. </summary>
        public DetectorDataSource DataSource
        {
            get => DetectorMetaData is null ? default : DetectorMetaData.DataSource;
            set
            {
                if (DetectorMetaData is null)
                    DetectorMetaData = new DetectorMetadata();
                DetectorMetaData.DataSource = value;
            }
        }
    }
}
