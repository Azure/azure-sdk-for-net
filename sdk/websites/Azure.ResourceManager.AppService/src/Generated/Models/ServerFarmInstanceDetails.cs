// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Represents instance details for an app service plan. </summary>
    public partial class ServerFarmInstanceDetails : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ServerFarmInstanceDetails"/>. </summary>
        public ServerFarmInstanceDetails()
        {
            Instances = new ChangeTrackingList<ServerFarmInstance>();
        }

        /// <summary> Initializes a new instance of <see cref="ServerFarmInstanceDetails"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="serverFarmName"> The server farm name. </param>
        /// <param name="instances"> The list of server farm instances. </param>
        /// <param name="instanceCount"> The total number of instances. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ServerFarmInstanceDetails(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string serverFarmName, IList<ServerFarmInstance> instances, int? instanceCount, string kind, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            ServerFarmName = serverFarmName;
            Instances = instances;
            InstanceCount = instanceCount;
            Kind = kind;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The server farm name. </summary>
        [WirePath("properties.serverFarmName")]
        public string ServerFarmName { get; set; }
        /// <summary> The list of server farm instances. </summary>
        [WirePath("properties.instances")]
        public IList<ServerFarmInstance> Instances { get; }
        /// <summary> The total number of instances. </summary>
        [WirePath("properties.instanceCount")]
        public int? InstanceCount { get; set; }
        /// <summary> Kind of resource. </summary>
        [WirePath("kind")]
        public string Kind { get; set; }
    }
}
