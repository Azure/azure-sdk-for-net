// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class BackupSchedule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("frequencyInterval");
            writer.WriteNumberValue(FrequencyInterval);
            writer.WritePropertyName("frequencyUnit");
            writer.WriteStringValue(FrequencyUnit.ToSerialString());
            writer.WritePropertyName("keepAtLeastOneBackup");
            writer.WriteBooleanValue(KeepAtLeastOneBackup);
            writer.WritePropertyName("retentionPeriodInDays");
            writer.WriteNumberValue(RetentionPeriodInDays);
            if (Optional.IsDefined(StartTime))
            {
                writer.WritePropertyName("startTime");
                writer.WriteStringValue(StartTime.Value, "O");
            }
            writer.WriteEndObject();
        }

        internal static BackupSchedule DeserializeBackupSchedule(JsonElement element)
        {
            int frequencyInterval = default;
            FrequencyUnit frequencyUnit = default;
            bool keepAtLeastOneBackup = default;
            int retentionPeriodInDays = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<DateTimeOffset> lastExecutionTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("frequencyInterval"))
                {
                    frequencyInterval = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("frequencyUnit"))
                {
                    frequencyUnit = property.Value.GetString().ToFrequencyUnit();
                    continue;
                }
                if (property.NameEquals("keepAtLeastOneBackup"))
                {
                    keepAtLeastOneBackup = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("retentionPeriodInDays"))
                {
                    retentionPeriodInDays = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("startTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastExecutionTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastExecutionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new BackupSchedule(frequencyInterval, frequencyUnit, keepAtLeastOneBackup, retentionPeriodInDays, Optional.ToNullable(startTime), Optional.ToNullable(lastExecutionTime));
        }
    }
}
