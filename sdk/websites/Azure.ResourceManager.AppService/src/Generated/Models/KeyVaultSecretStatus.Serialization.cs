// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class KeyVaultSecretStatusExtensions
    {
        public static string ToSerialString(this KeyVaultSecretStatus value) => value switch
        {
            KeyVaultSecretStatus.Initialized => "Initialized",
            KeyVaultSecretStatus.WaitingOnCertificateOrder => "WaitingOnCertificateOrder",
            KeyVaultSecretStatus.Succeeded => "Succeeded",
            KeyVaultSecretStatus.CertificateOrderFailed => "CertificateOrderFailed",
            KeyVaultSecretStatus.OperationNotPermittedOnKeyVault => "OperationNotPermittedOnKeyVault",
            KeyVaultSecretStatus.AzureServiceUnauthorizedToAccessKeyVault => "AzureServiceUnauthorizedToAccessKeyVault",
            KeyVaultSecretStatus.KeyVaultDoesNotExist => "KeyVaultDoesNotExist",
            KeyVaultSecretStatus.KeyVaultSecretDoesNotExist => "KeyVaultSecretDoesNotExist",
            KeyVaultSecretStatus.UnknownError => "UnknownError",
            KeyVaultSecretStatus.ExternalPrivateKey => "ExternalPrivateKey",
            KeyVaultSecretStatus.Unknown => "Unknown",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown KeyVaultSecretStatus value.")
        };

        public static KeyVaultSecretStatus ToKeyVaultSecretStatus(this string value)
        {
            if (string.Equals(value, "Initialized", StringComparison.InvariantCultureIgnoreCase)) return KeyVaultSecretStatus.Initialized;
            if (string.Equals(value, "WaitingOnCertificateOrder", StringComparison.InvariantCultureIgnoreCase)) return KeyVaultSecretStatus.WaitingOnCertificateOrder;
            if (string.Equals(value, "Succeeded", StringComparison.InvariantCultureIgnoreCase)) return KeyVaultSecretStatus.Succeeded;
            if (string.Equals(value, "CertificateOrderFailed", StringComparison.InvariantCultureIgnoreCase)) return KeyVaultSecretStatus.CertificateOrderFailed;
            if (string.Equals(value, "OperationNotPermittedOnKeyVault", StringComparison.InvariantCultureIgnoreCase)) return KeyVaultSecretStatus.OperationNotPermittedOnKeyVault;
            if (string.Equals(value, "AzureServiceUnauthorizedToAccessKeyVault", StringComparison.InvariantCultureIgnoreCase)) return KeyVaultSecretStatus.AzureServiceUnauthorizedToAccessKeyVault;
            if (string.Equals(value, "KeyVaultDoesNotExist", StringComparison.InvariantCultureIgnoreCase)) return KeyVaultSecretStatus.KeyVaultDoesNotExist;
            if (string.Equals(value, "KeyVaultSecretDoesNotExist", StringComparison.InvariantCultureIgnoreCase)) return KeyVaultSecretStatus.KeyVaultSecretDoesNotExist;
            if (string.Equals(value, "UnknownError", StringComparison.InvariantCultureIgnoreCase)) return KeyVaultSecretStatus.UnknownError;
            if (string.Equals(value, "ExternalPrivateKey", StringComparison.InvariantCultureIgnoreCase)) return KeyVaultSecretStatus.ExternalPrivateKey;
            if (string.Equals(value, "Unknown", StringComparison.InvariantCultureIgnoreCase)) return KeyVaultSecretStatus.Unknown;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown KeyVaultSecretStatus value.");
        }
    }
}
