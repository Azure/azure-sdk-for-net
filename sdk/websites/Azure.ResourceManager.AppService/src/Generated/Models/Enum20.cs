// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> The Enum20. </summary>
    public readonly partial struct Enum20 : IEquatable<Enum20>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Enum20"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Enum20(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WindowsValue = "Windows";
        private const string LinuxValue = "Linux";
        private const string AllValue = "All";

        /// <summary> Windows. </summary>
        public static Enum20 Windows { get; } = new Enum20(WindowsValue);
        /// <summary> Linux. </summary>
        public static Enum20 Linux { get; } = new Enum20(LinuxValue);
        /// <summary> All. </summary>
        public static Enum20 All { get; } = new Enum20(AllValue);
        /// <summary> Determines if two <see cref="Enum20"/> values are the same. </summary>
        public static bool operator ==(Enum20 left, Enum20 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Enum20"/> values are not the same. </summary>
        public static bool operator !=(Enum20 left, Enum20 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Enum20"/>. </summary>
        public static implicit operator Enum20(string value) => new Enum20(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Enum20 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Enum20 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
