// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class DetectorIssueTypeExtensions
    {
        public static string ToSerialString(this DetectorIssueType value) => value switch
        {
            DetectorIssueType.ServiceIncident => "ServiceIncident",
            DetectorIssueType.AppDeployment => "AppDeployment",
            DetectorIssueType.AppCrash => "AppCrash",
            DetectorIssueType.RuntimeIssueDetected => "RuntimeIssueDetected",
            DetectorIssueType.AseDeployment => "AseDeployment",
            DetectorIssueType.UserIssue => "UserIssue",
            DetectorIssueType.PlatformIssue => "PlatformIssue",
            DetectorIssueType.Other => "Other",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DetectorIssueType value.")
        };

        public static DetectorIssueType ToDetectorIssueType(this string value)
        {
            if (string.Equals(value, "ServiceIncident", StringComparison.InvariantCultureIgnoreCase)) return DetectorIssueType.ServiceIncident;
            if (string.Equals(value, "AppDeployment", StringComparison.InvariantCultureIgnoreCase)) return DetectorIssueType.AppDeployment;
            if (string.Equals(value, "AppCrash", StringComparison.InvariantCultureIgnoreCase)) return DetectorIssueType.AppCrash;
            if (string.Equals(value, "RuntimeIssueDetected", StringComparison.InvariantCultureIgnoreCase)) return DetectorIssueType.RuntimeIssueDetected;
            if (string.Equals(value, "AseDeployment", StringComparison.InvariantCultureIgnoreCase)) return DetectorIssueType.AseDeployment;
            if (string.Equals(value, "UserIssue", StringComparison.InvariantCultureIgnoreCase)) return DetectorIssueType.UserIssue;
            if (string.Equals(value, "PlatformIssue", StringComparison.InvariantCultureIgnoreCase)) return DetectorIssueType.PlatformIssue;
            if (string.Equals(value, "Other", StringComparison.InvariantCultureIgnoreCase)) return DetectorIssueType.Other;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DetectorIssueType value.");
        }
    }
}
