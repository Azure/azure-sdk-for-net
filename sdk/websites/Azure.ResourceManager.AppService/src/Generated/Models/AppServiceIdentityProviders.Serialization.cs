// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class AppServiceIdentityProviders : IUtf8JsonSerializable, IJsonModel<AppServiceIdentityProviders>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AppServiceIdentityProviders>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<AppServiceIdentityProviders>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AppServiceIdentityProviders>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AppServiceIdentityProviders)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(AzureActiveDirectory))
            {
                writer.WritePropertyName("azureActiveDirectory"u8);
                writer.WriteObjectValue<AppServiceAadProvider>(AzureActiveDirectory, options);
            }
            if (Optional.IsDefined(Facebook))
            {
                writer.WritePropertyName("facebook"u8);
                writer.WriteObjectValue<AppServiceFacebookProvider>(Facebook, options);
            }
            if (Optional.IsDefined(GitHub))
            {
                writer.WritePropertyName("gitHub"u8);
                writer.WriteObjectValue<AppServiceGitHubProvider>(GitHub, options);
            }
            if (Optional.IsDefined(Google))
            {
                writer.WritePropertyName("google"u8);
                writer.WriteObjectValue<AppServiceGoogleProvider>(Google, options);
            }
            if (Optional.IsDefined(LegacyMicrosoftAccount))
            {
                writer.WritePropertyName("legacyMicrosoftAccount"u8);
                writer.WriteObjectValue<LegacyMicrosoftAccount>(LegacyMicrosoftAccount, options);
            }
            if (Optional.IsDefined(Twitter))
            {
                writer.WritePropertyName("twitter"u8);
                writer.WriteObjectValue<AppServiceTwitterProvider>(Twitter, options);
            }
            if (Optional.IsDefined(Apple))
            {
                writer.WritePropertyName("apple"u8);
                writer.WriteObjectValue<AppServiceAppleProvider>(Apple, options);
            }
            if (Optional.IsDefined(AzureStaticWebApps))
            {
                writer.WritePropertyName("azureStaticWebApps"u8);
                writer.WriteObjectValue<AppServiceStaticWebAppsProvider>(AzureStaticWebApps, options);
            }
            if (Optional.IsCollectionDefined(CustomOpenIdConnectProviders))
            {
                writer.WritePropertyName("customOpenIdConnectProviders"u8);
                writer.WriteStartObject();
                foreach (var item in CustomOpenIdConnectProviders)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue<CustomOpenIdConnectProvider>(item.Value, options);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AppServiceIdentityProviders IJsonModel<AppServiceIdentityProviders>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AppServiceIdentityProviders>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AppServiceIdentityProviders)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAppServiceIdentityProviders(document.RootElement, options);
        }

        internal static AppServiceIdentityProviders DeserializeAppServiceIdentityProviders(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            AppServiceAadProvider azureActiveDirectory = default;
            AppServiceFacebookProvider facebook = default;
            AppServiceGitHubProvider gitHub = default;
            AppServiceGoogleProvider google = default;
            LegacyMicrosoftAccount legacyMicrosoftAccount = default;
            AppServiceTwitterProvider twitter = default;
            AppServiceAppleProvider apple = default;
            AppServiceStaticWebAppsProvider azureStaticWebApps = default;
            IDictionary<string, CustomOpenIdConnectProvider> customOpenIdConnectProviders = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("azureActiveDirectory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureActiveDirectory = AppServiceAadProvider.DeserializeAppServiceAadProvider(property.Value, options);
                    continue;
                }
                if (property.NameEquals("facebook"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    facebook = AppServiceFacebookProvider.DeserializeAppServiceFacebookProvider(property.Value, options);
                    continue;
                }
                if (property.NameEquals("gitHub"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gitHub = AppServiceGitHubProvider.DeserializeAppServiceGitHubProvider(property.Value, options);
                    continue;
                }
                if (property.NameEquals("google"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    google = AppServiceGoogleProvider.DeserializeAppServiceGoogleProvider(property.Value, options);
                    continue;
                }
                if (property.NameEquals("legacyMicrosoftAccount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    legacyMicrosoftAccount = LegacyMicrosoftAccount.DeserializeLegacyMicrosoftAccount(property.Value, options);
                    continue;
                }
                if (property.NameEquals("twitter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    twitter = AppServiceTwitterProvider.DeserializeAppServiceTwitterProvider(property.Value, options);
                    continue;
                }
                if (property.NameEquals("apple"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    apple = AppServiceAppleProvider.DeserializeAppServiceAppleProvider(property.Value, options);
                    continue;
                }
                if (property.NameEquals("azureStaticWebApps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureStaticWebApps = AppServiceStaticWebAppsProvider.DeserializeAppServiceStaticWebAppsProvider(property.Value, options);
                    continue;
                }
                if (property.NameEquals("customOpenIdConnectProviders"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, CustomOpenIdConnectProvider> dictionary = new Dictionary<string, CustomOpenIdConnectProvider>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, CustomOpenIdConnectProvider.DeserializeCustomOpenIdConnectProvider(property0.Value, options));
                    }
                    customOpenIdConnectProviders = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new AppServiceIdentityProviders(
                azureActiveDirectory,
                facebook,
                gitHub,
                google,
                legacyMicrosoftAccount,
                twitter,
                apple,
                azureStaticWebApps,
                customOpenIdConnectProviders ?? new ChangeTrackingDictionary<string, CustomOpenIdConnectProvider>(),
                serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AzureActiveDirectory), out propertyOverride);
            if (Optional.IsDefined(AzureActiveDirectory) || hasPropertyOverride)
            {
                builder.Append("  azureActiveDirectory: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, AzureActiveDirectory, options, 2, false, "  azureActiveDirectory: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Facebook), out propertyOverride);
            if (Optional.IsDefined(Facebook) || hasPropertyOverride)
            {
                builder.Append("  facebook: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, Facebook, options, 2, false, "  facebook: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(GitHub), out propertyOverride);
            if (Optional.IsDefined(GitHub) || hasPropertyOverride)
            {
                builder.Append("  gitHub: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, GitHub, options, 2, false, "  gitHub: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Google), out propertyOverride);
            if (Optional.IsDefined(Google) || hasPropertyOverride)
            {
                builder.Append("  google: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, Google, options, 2, false, "  google: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(LegacyMicrosoftAccount), out propertyOverride);
            if (Optional.IsDefined(LegacyMicrosoftAccount) || hasPropertyOverride)
            {
                builder.Append("  legacyMicrosoftAccount: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, LegacyMicrosoftAccount, options, 2, false, "  legacyMicrosoftAccount: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Twitter), out propertyOverride);
            if (Optional.IsDefined(Twitter) || hasPropertyOverride)
            {
                builder.Append("  twitter: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, Twitter, options, 2, false, "  twitter: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Apple), out propertyOverride);
            if (Optional.IsDefined(Apple) || hasPropertyOverride)
            {
                builder.Append("  apple: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, Apple, options, 2, false, "  apple: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AzureStaticWebApps), out propertyOverride);
            if (Optional.IsDefined(AzureStaticWebApps) || hasPropertyOverride)
            {
                builder.Append("  azureStaticWebApps: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, AzureStaticWebApps, options, 2, false, "  azureStaticWebApps: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(CustomOpenIdConnectProviders), out propertyOverride);
            if (Optional.IsCollectionDefined(CustomOpenIdConnectProviders) || hasPropertyOverride)
            {
                if (CustomOpenIdConnectProviders.Any() || hasPropertyOverride)
                {
                    builder.Append("  customOpenIdConnectProviders: ");
                    if (hasPropertyOverride)
                    {
                        builder.AppendLine($"{propertyOverride}");
                    }
                    else
                    {
                        builder.AppendLine("{");
                        foreach (var item in CustomOpenIdConnectProviders)
                        {
                            builder.Append($"    '{item.Key}': ");
                            BicepSerializationHelpers.AppendChildObject(builder, item.Value, options, 4, false, "  customOpenIdConnectProviders: ");
                        }
                        builder.AppendLine("  }");
                    }
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        BinaryData IPersistableModel<AppServiceIdentityProviders>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AppServiceIdentityProviders>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(AppServiceIdentityProviders)} does not support writing '{options.Format}' format.");
            }
        }

        AppServiceIdentityProviders IPersistableModel<AppServiceIdentityProviders>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AppServiceIdentityProviders>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAppServiceIdentityProviders(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AppServiceIdentityProviders)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AppServiceIdentityProviders>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
