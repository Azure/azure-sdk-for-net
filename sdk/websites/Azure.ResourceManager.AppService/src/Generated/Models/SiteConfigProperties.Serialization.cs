// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class SiteConfigProperties : IUtf8JsonSerializable, IJsonModel<SiteConfigProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SiteConfigProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<SiteConfigProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteConfigProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SiteConfigProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(NumberOfWorkers))
            {
                if (NumberOfWorkers != null)
                {
                    writer.WritePropertyName("numberOfWorkers"u8);
                    writer.WriteNumberValue(NumberOfWorkers.Value);
                }
                else
                {
                    writer.WriteNull("numberOfWorkers");
                }
            }
            if (Optional.IsCollectionDefined(DefaultDocuments))
            {
                if (DefaultDocuments != null)
                {
                    writer.WritePropertyName("defaultDocuments"u8);
                    writer.WriteStartArray();
                    foreach (var item in DefaultDocuments)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("defaultDocuments");
                }
            }
            if (Optional.IsDefined(NetFrameworkVersion))
            {
                if (NetFrameworkVersion != null)
                {
                    writer.WritePropertyName("netFrameworkVersion"u8);
                    writer.WriteStringValue(NetFrameworkVersion);
                }
                else
                {
                    writer.WriteNull("netFrameworkVersion");
                }
            }
            if (Optional.IsDefined(PhpVersion))
            {
                if (PhpVersion != null)
                {
                    writer.WritePropertyName("phpVersion"u8);
                    writer.WriteStringValue(PhpVersion);
                }
                else
                {
                    writer.WriteNull("phpVersion");
                }
            }
            if (Optional.IsDefined(PythonVersion))
            {
                if (PythonVersion != null)
                {
                    writer.WritePropertyName("pythonVersion"u8);
                    writer.WriteStringValue(PythonVersion);
                }
                else
                {
                    writer.WriteNull("pythonVersion");
                }
            }
            if (Optional.IsDefined(NodeVersion))
            {
                if (NodeVersion != null)
                {
                    writer.WritePropertyName("nodeVersion"u8);
                    writer.WriteStringValue(NodeVersion);
                }
                else
                {
                    writer.WriteNull("nodeVersion");
                }
            }
            if (Optional.IsDefined(PowerShellVersion))
            {
                if (PowerShellVersion != null)
                {
                    writer.WritePropertyName("powerShellVersion"u8);
                    writer.WriteStringValue(PowerShellVersion);
                }
                else
                {
                    writer.WriteNull("powerShellVersion");
                }
            }
            if (Optional.IsDefined(LinuxFxVersion))
            {
                if (LinuxFxVersion != null)
                {
                    writer.WritePropertyName("linuxFxVersion"u8);
                    writer.WriteStringValue(LinuxFxVersion);
                }
                else
                {
                    writer.WriteNull("linuxFxVersion");
                }
            }
            if (Optional.IsDefined(WindowsFxVersion))
            {
                if (WindowsFxVersion != null)
                {
                    writer.WritePropertyName("windowsFxVersion"u8);
                    writer.WriteStringValue(WindowsFxVersion);
                }
                else
                {
                    writer.WriteNull("windowsFxVersion");
                }
            }
            if (Optional.IsDefined(IsRequestTracingEnabled))
            {
                if (IsRequestTracingEnabled != null)
                {
                    writer.WritePropertyName("requestTracingEnabled"u8);
                    writer.WriteBooleanValue(IsRequestTracingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("requestTracingEnabled");
                }
            }
            if (Optional.IsDefined(RequestTracingExpirationOn))
            {
                if (RequestTracingExpirationOn != null)
                {
                    writer.WritePropertyName("requestTracingExpirationTime"u8);
                    writer.WriteStringValue(RequestTracingExpirationOn.Value, "O");
                }
                else
                {
                    writer.WriteNull("requestTracingExpirationTime");
                }
            }
            if (Optional.IsDefined(IsRemoteDebuggingEnabled))
            {
                if (IsRemoteDebuggingEnabled != null)
                {
                    writer.WritePropertyName("remoteDebuggingEnabled"u8);
                    writer.WriteBooleanValue(IsRemoteDebuggingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("remoteDebuggingEnabled");
                }
            }
            if (Optional.IsDefined(RemoteDebuggingVersion))
            {
                if (RemoteDebuggingVersion != null)
                {
                    writer.WritePropertyName("remoteDebuggingVersion"u8);
                    writer.WriteStringValue(RemoteDebuggingVersion);
                }
                else
                {
                    writer.WriteNull("remoteDebuggingVersion");
                }
            }
            if (Optional.IsDefined(IsHttpLoggingEnabled))
            {
                if (IsHttpLoggingEnabled != null)
                {
                    writer.WritePropertyName("httpLoggingEnabled"u8);
                    writer.WriteBooleanValue(IsHttpLoggingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("httpLoggingEnabled");
                }
            }
            if (Optional.IsDefined(UseManagedIdentityCreds))
            {
                if (UseManagedIdentityCreds != null)
                {
                    writer.WritePropertyName("acrUseManagedIdentityCreds"u8);
                    writer.WriteBooleanValue(UseManagedIdentityCreds.Value);
                }
                else
                {
                    writer.WriteNull("acrUseManagedIdentityCreds");
                }
            }
            if (Optional.IsDefined(AcrUserManagedIdentityId))
            {
                if (AcrUserManagedIdentityId != null)
                {
                    writer.WritePropertyName("acrUserManagedIdentityID"u8);
                    writer.WriteStringValue(AcrUserManagedIdentityId);
                }
                else
                {
                    writer.WriteNull("acrUserManagedIdentityID");
                }
            }
            if (Optional.IsDefined(LogsDirectorySizeLimit))
            {
                if (LogsDirectorySizeLimit != null)
                {
                    writer.WritePropertyName("logsDirectorySizeLimit"u8);
                    writer.WriteNumberValue(LogsDirectorySizeLimit.Value);
                }
                else
                {
                    writer.WriteNull("logsDirectorySizeLimit");
                }
            }
            if (Optional.IsDefined(IsDetailedErrorLoggingEnabled))
            {
                if (IsDetailedErrorLoggingEnabled != null)
                {
                    writer.WritePropertyName("detailedErrorLoggingEnabled"u8);
                    writer.WriteBooleanValue(IsDetailedErrorLoggingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("detailedErrorLoggingEnabled");
                }
            }
            if (Optional.IsDefined(PublishingUsername))
            {
                if (PublishingUsername != null)
                {
                    writer.WritePropertyName("publishingUsername"u8);
                    writer.WriteStringValue(PublishingUsername);
                }
                else
                {
                    writer.WriteNull("publishingUsername");
                }
            }
            if (Optional.IsCollectionDefined(AppSettings))
            {
                if (AppSettings != null)
                {
                    writer.WritePropertyName("appSettings"u8);
                    writer.WriteStartArray();
                    foreach (var item in AppSettings)
                    {
                        writer.WriteObjectValue<AppServiceNameValuePair>(item, options);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("appSettings");
                }
            }
            if (Optional.IsCollectionDefined(ConnectionStrings))
            {
                if (ConnectionStrings != null)
                {
                    writer.WritePropertyName("connectionStrings"u8);
                    writer.WriteStartArray();
                    foreach (var item in ConnectionStrings)
                    {
                        writer.WriteObjectValue<ConnStringInfo>(item, options);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("connectionStrings");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(MachineKey))
            {
                if (MachineKey != null)
                {
                    writer.WritePropertyName("machineKey"u8);
                    writer.WriteObjectValue<SiteMachineKey>(MachineKey, options);
                }
                else
                {
                    writer.WriteNull("machineKey");
                }
            }
            if (Optional.IsCollectionDefined(HandlerMappings))
            {
                if (HandlerMappings != null)
                {
                    writer.WritePropertyName("handlerMappings"u8);
                    writer.WriteStartArray();
                    foreach (var item in HandlerMappings)
                    {
                        writer.WriteObjectValue<HttpRequestHandlerMapping>(item, options);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("handlerMappings");
                }
            }
            if (Optional.IsDefined(DocumentRoot))
            {
                if (DocumentRoot != null)
                {
                    writer.WritePropertyName("documentRoot"u8);
                    writer.WriteStringValue(DocumentRoot);
                }
                else
                {
                    writer.WriteNull("documentRoot");
                }
            }
            if (Optional.IsDefined(ScmType))
            {
                if (ScmType != null)
                {
                    writer.WritePropertyName("scmType"u8);
                    writer.WriteStringValue(ScmType.Value.ToString());
                }
                else
                {
                    writer.WriteNull("scmType");
                }
            }
            if (Optional.IsDefined(Use32BitWorkerProcess))
            {
                if (Use32BitWorkerProcess != null)
                {
                    writer.WritePropertyName("use32BitWorkerProcess"u8);
                    writer.WriteBooleanValue(Use32BitWorkerProcess.Value);
                }
                else
                {
                    writer.WriteNull("use32BitWorkerProcess");
                }
            }
            if (Optional.IsDefined(IsWebSocketsEnabled))
            {
                if (IsWebSocketsEnabled != null)
                {
                    writer.WritePropertyName("webSocketsEnabled"u8);
                    writer.WriteBooleanValue(IsWebSocketsEnabled.Value);
                }
                else
                {
                    writer.WriteNull("webSocketsEnabled");
                }
            }
            if (Optional.IsDefined(IsAlwaysOn))
            {
                if (IsAlwaysOn != null)
                {
                    writer.WritePropertyName("alwaysOn"u8);
                    writer.WriteBooleanValue(IsAlwaysOn.Value);
                }
                else
                {
                    writer.WriteNull("alwaysOn");
                }
            }
            if (Optional.IsDefined(JavaVersion))
            {
                if (JavaVersion != null)
                {
                    writer.WritePropertyName("javaVersion"u8);
                    writer.WriteStringValue(JavaVersion);
                }
                else
                {
                    writer.WriteNull("javaVersion");
                }
            }
            if (Optional.IsDefined(JavaContainer))
            {
                if (JavaContainer != null)
                {
                    writer.WritePropertyName("javaContainer"u8);
                    writer.WriteStringValue(JavaContainer);
                }
                else
                {
                    writer.WriteNull("javaContainer");
                }
            }
            if (Optional.IsDefined(JavaContainerVersion))
            {
                if (JavaContainerVersion != null)
                {
                    writer.WritePropertyName("javaContainerVersion"u8);
                    writer.WriteStringValue(JavaContainerVersion);
                }
                else
                {
                    writer.WriteNull("javaContainerVersion");
                }
            }
            if (Optional.IsDefined(AppCommandLine))
            {
                if (AppCommandLine != null)
                {
                    writer.WritePropertyName("appCommandLine"u8);
                    writer.WriteStringValue(AppCommandLine);
                }
                else
                {
                    writer.WriteNull("appCommandLine");
                }
            }
            if (Optional.IsDefined(ManagedPipelineMode))
            {
                if (ManagedPipelineMode != null)
                {
                    writer.WritePropertyName("managedPipelineMode"u8);
                    writer.WriteStringValue(ManagedPipelineMode.Value.ToSerialString());
                }
                else
                {
                    writer.WriteNull("managedPipelineMode");
                }
            }
            if (Optional.IsCollectionDefined(VirtualApplications))
            {
                if (VirtualApplications != null)
                {
                    writer.WritePropertyName("virtualApplications"u8);
                    writer.WriteStartArray();
                    foreach (var item in VirtualApplications)
                    {
                        writer.WriteObjectValue<VirtualApplication>(item, options);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("virtualApplications");
                }
            }
            if (Optional.IsDefined(LoadBalancing))
            {
                if (LoadBalancing != null)
                {
                    writer.WritePropertyName("loadBalancing"u8);
                    writer.WriteStringValue(LoadBalancing.Value.ToSerialString());
                }
                else
                {
                    writer.WriteNull("loadBalancing");
                }
            }
            if (Optional.IsDefined(Experiments))
            {
                if (Experiments != null)
                {
                    writer.WritePropertyName("experiments"u8);
                    writer.WriteObjectValue<RoutingRuleExperiments>(Experiments, options);
                }
                else
                {
                    writer.WriteNull("experiments");
                }
            }
            if (Optional.IsDefined(Limits))
            {
                if (Limits != null)
                {
                    writer.WritePropertyName("limits"u8);
                    writer.WriteObjectValue<SiteLimits>(Limits, options);
                }
                else
                {
                    writer.WriteNull("limits");
                }
            }
            if (Optional.IsDefined(IsAutoHealEnabled))
            {
                if (IsAutoHealEnabled != null)
                {
                    writer.WritePropertyName("autoHealEnabled"u8);
                    writer.WriteBooleanValue(IsAutoHealEnabled.Value);
                }
                else
                {
                    writer.WriteNull("autoHealEnabled");
                }
            }
            if (Optional.IsDefined(AutoHealRules))
            {
                if (AutoHealRules != null)
                {
                    writer.WritePropertyName("autoHealRules"u8);
                    writer.WriteObjectValue<AutoHealRules>(AutoHealRules, options);
                }
                else
                {
                    writer.WriteNull("autoHealRules");
                }
            }
            if (Optional.IsDefined(TracingOptions))
            {
                if (TracingOptions != null)
                {
                    writer.WritePropertyName("tracingOptions"u8);
                    writer.WriteStringValue(TracingOptions);
                }
                else
                {
                    writer.WriteNull("tracingOptions");
                }
            }
            if (Optional.IsDefined(VnetName))
            {
                if (VnetName != null)
                {
                    writer.WritePropertyName("vnetName"u8);
                    writer.WriteStringValue(VnetName);
                }
                else
                {
                    writer.WriteNull("vnetName");
                }
            }
            if (Optional.IsDefined(IsVnetRouteAllEnabled))
            {
                if (IsVnetRouteAllEnabled != null)
                {
                    writer.WritePropertyName("vnetRouteAllEnabled"u8);
                    writer.WriteBooleanValue(IsVnetRouteAllEnabled.Value);
                }
                else
                {
                    writer.WriteNull("vnetRouteAllEnabled");
                }
            }
            if (Optional.IsDefined(VnetPrivatePortsCount))
            {
                if (VnetPrivatePortsCount != null)
                {
                    writer.WritePropertyName("vnetPrivatePortsCount"u8);
                    writer.WriteNumberValue(VnetPrivatePortsCount.Value);
                }
                else
                {
                    writer.WriteNull("vnetPrivatePortsCount");
                }
            }
            if (Optional.IsDefined(Cors))
            {
                if (Cors != null)
                {
                    writer.WritePropertyName("cors"u8);
                    writer.WriteObjectValue<AppServiceCorsSettings>(Cors, options);
                }
                else
                {
                    writer.WriteNull("cors");
                }
            }
            if (Optional.IsDefined(Push))
            {
                if (Push != null)
                {
                    writer.WritePropertyName("push"u8);
                    writer.WriteObjectValue<WebAppPushSettings>(Push, options);
                }
                else
                {
                    writer.WriteNull("push");
                }
            }
            if (Optional.IsDefined(ApiDefinition))
            {
                if (ApiDefinition != null)
                {
                    writer.WritePropertyName("apiDefinition"u8);
                    writer.WriteObjectValue<AppServiceApiDefinitionInfo>(ApiDefinition, options);
                }
                else
                {
                    writer.WriteNull("apiDefinition");
                }
            }
            if (Optional.IsDefined(ApiManagementConfig))
            {
                if (ApiManagementConfig != null)
                {
                    writer.WritePropertyName("apiManagementConfig"u8);
                    writer.WriteObjectValue<ApiManagementConfig>(ApiManagementConfig, options);
                }
                else
                {
                    writer.WriteNull("apiManagementConfig");
                }
            }
            if (Optional.IsDefined(AutoSwapSlotName))
            {
                if (AutoSwapSlotName != null)
                {
                    writer.WritePropertyName("autoSwapSlotName"u8);
                    writer.WriteStringValue(AutoSwapSlotName);
                }
                else
                {
                    writer.WriteNull("autoSwapSlotName");
                }
            }
            if (Optional.IsDefined(IsLocalMySqlEnabled))
            {
                if (IsLocalMySqlEnabled != null)
                {
                    writer.WritePropertyName("localMySqlEnabled"u8);
                    writer.WriteBooleanValue(IsLocalMySqlEnabled.Value);
                }
                else
                {
                    writer.WriteNull("localMySqlEnabled");
                }
            }
            if (Optional.IsDefined(ManagedServiceIdentityId))
            {
                if (ManagedServiceIdentityId != null)
                {
                    writer.WritePropertyName("managedServiceIdentityId"u8);
                    writer.WriteNumberValue(ManagedServiceIdentityId.Value);
                }
                else
                {
                    writer.WriteNull("managedServiceIdentityId");
                }
            }
            if (Optional.IsDefined(XManagedServiceIdentityId))
            {
                if (XManagedServiceIdentityId != null)
                {
                    writer.WritePropertyName("xManagedServiceIdentityId"u8);
                    writer.WriteNumberValue(XManagedServiceIdentityId.Value);
                }
                else
                {
                    writer.WriteNull("xManagedServiceIdentityId");
                }
            }
            if (Optional.IsDefined(KeyVaultReferenceIdentity))
            {
                if (KeyVaultReferenceIdentity != null)
                {
                    writer.WritePropertyName("keyVaultReferenceIdentity"u8);
                    writer.WriteStringValue(KeyVaultReferenceIdentity);
                }
                else
                {
                    writer.WriteNull("keyVaultReferenceIdentity");
                }
            }
            if (Optional.IsCollectionDefined(IPSecurityRestrictions))
            {
                if (IPSecurityRestrictions != null)
                {
                    writer.WritePropertyName("ipSecurityRestrictions"u8);
                    writer.WriteStartArray();
                    foreach (var item in IPSecurityRestrictions)
                    {
                        writer.WriteObjectValue<AppServiceIPSecurityRestriction>(item, options);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("ipSecurityRestrictions");
                }
            }
            if (Optional.IsCollectionDefined(ScmIPSecurityRestrictions))
            {
                if (ScmIPSecurityRestrictions != null)
                {
                    writer.WritePropertyName("scmIpSecurityRestrictions"u8);
                    writer.WriteStartArray();
                    foreach (var item in ScmIPSecurityRestrictions)
                    {
                        writer.WriteObjectValue<AppServiceIPSecurityRestriction>(item, options);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("scmIpSecurityRestrictions");
                }
            }
            if (Optional.IsDefined(AllowIPSecurityRestrictionsForScmToUseMain))
            {
                if (AllowIPSecurityRestrictionsForScmToUseMain != null)
                {
                    writer.WritePropertyName("scmIpSecurityRestrictionsUseMain"u8);
                    writer.WriteBooleanValue(AllowIPSecurityRestrictionsForScmToUseMain.Value);
                }
                else
                {
                    writer.WriteNull("scmIpSecurityRestrictionsUseMain");
                }
            }
            if (Optional.IsDefined(IsHttp20Enabled))
            {
                if (IsHttp20Enabled != null)
                {
                    writer.WritePropertyName("http20Enabled"u8);
                    writer.WriteBooleanValue(IsHttp20Enabled.Value);
                }
                else
                {
                    writer.WriteNull("http20Enabled");
                }
            }
            if (Optional.IsDefined(MinTlsVersion))
            {
                if (MinTlsVersion != null)
                {
                    writer.WritePropertyName("minTlsVersion"u8);
                    writer.WriteStringValue(MinTlsVersion.Value.ToString());
                }
                else
                {
                    writer.WriteNull("minTlsVersion");
                }
            }
            if (Optional.IsDefined(ScmMinTlsVersion))
            {
                if (ScmMinTlsVersion != null)
                {
                    writer.WritePropertyName("scmMinTlsVersion"u8);
                    writer.WriteStringValue(ScmMinTlsVersion.Value.ToString());
                }
                else
                {
                    writer.WriteNull("scmMinTlsVersion");
                }
            }
            if (Optional.IsDefined(FtpsState))
            {
                if (FtpsState != null)
                {
                    writer.WritePropertyName("ftpsState"u8);
                    writer.WriteStringValue(FtpsState.Value.ToString());
                }
                else
                {
                    writer.WriteNull("ftpsState");
                }
            }
            if (Optional.IsDefined(PreWarmedInstanceCount))
            {
                if (PreWarmedInstanceCount != null)
                {
                    writer.WritePropertyName("preWarmedInstanceCount"u8);
                    writer.WriteNumberValue(PreWarmedInstanceCount.Value);
                }
                else
                {
                    writer.WriteNull("preWarmedInstanceCount");
                }
            }
            if (Optional.IsDefined(FunctionAppScaleLimit))
            {
                if (FunctionAppScaleLimit != null)
                {
                    writer.WritePropertyName("functionAppScaleLimit"u8);
                    writer.WriteNumberValue(FunctionAppScaleLimit.Value);
                }
                else
                {
                    writer.WriteNull("functionAppScaleLimit");
                }
            }
            if (Optional.IsDefined(HealthCheckPath))
            {
                if (HealthCheckPath != null)
                {
                    writer.WritePropertyName("healthCheckPath"u8);
                    writer.WriteStringValue(HealthCheckPath);
                }
                else
                {
                    writer.WriteNull("healthCheckPath");
                }
            }
            if (Optional.IsDefined(IsFunctionsRuntimeScaleMonitoringEnabled))
            {
                if (IsFunctionsRuntimeScaleMonitoringEnabled != null)
                {
                    writer.WritePropertyName("functionsRuntimeScaleMonitoringEnabled"u8);
                    writer.WriteBooleanValue(IsFunctionsRuntimeScaleMonitoringEnabled.Value);
                }
                else
                {
                    writer.WriteNull("functionsRuntimeScaleMonitoringEnabled");
                }
            }
            if (Optional.IsDefined(WebsiteTimeZone))
            {
                if (WebsiteTimeZone != null)
                {
                    writer.WritePropertyName("websiteTimeZone"u8);
                    writer.WriteStringValue(WebsiteTimeZone);
                }
                else
                {
                    writer.WriteNull("websiteTimeZone");
                }
            }
            if (Optional.IsDefined(MinimumElasticInstanceCount))
            {
                if (MinimumElasticInstanceCount != null)
                {
                    writer.WritePropertyName("minimumElasticInstanceCount"u8);
                    writer.WriteNumberValue(MinimumElasticInstanceCount.Value);
                }
                else
                {
                    writer.WriteNull("minimumElasticInstanceCount");
                }
            }
            if (Optional.IsCollectionDefined(AzureStorageAccounts))
            {
                if (AzureStorageAccounts != null)
                {
                    writer.WritePropertyName("azureStorageAccounts"u8);
                    writer.WriteStartObject();
                    foreach (var item in AzureStorageAccounts)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteObjectValue<AppServiceStorageAccessInfo>(item.Value, options);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("azureStorageAccounts");
                }
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                if (PublicNetworkAccess != null)
                {
                    writer.WritePropertyName("publicNetworkAccess"u8);
                    writer.WriteStringValue(PublicNetworkAccess);
                }
                else
                {
                    writer.WriteNull("publicNetworkAccess");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SiteConfigProperties IJsonModel<SiteConfigProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteConfigProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SiteConfigProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSiteConfigProperties(document.RootElement, options);
        }

        internal static SiteConfigProperties DeserializeSiteConfigProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? numberOfWorkers = default;
            IList<string> defaultDocuments = default;
            string netFrameworkVersion = default;
            string phpVersion = default;
            string pythonVersion = default;
            string nodeVersion = default;
            string powerShellVersion = default;
            string linuxFxVersion = default;
            string windowsFxVersion = default;
            bool? requestTracingEnabled = default;
            DateTimeOffset? requestTracingExpirationTime = default;
            bool? remoteDebuggingEnabled = default;
            string remoteDebuggingVersion = default;
            bool? httpLoggingEnabled = default;
            bool? acrUseManagedIdentityCreds = default;
            string acrUserManagedIdentityId = default;
            int? logsDirectorySizeLimit = default;
            bool? detailedErrorLoggingEnabled = default;
            string publishingUsername = default;
            IList<AppServiceNameValuePair> appSettings = default;
            IList<ConnStringInfo> connectionStrings = default;
            SiteMachineKey machineKey = default;
            IList<HttpRequestHandlerMapping> handlerMappings = default;
            string documentRoot = default;
            ScmType? scmType = default;
            bool? use32BitWorkerProcess = default;
            bool? webSocketsEnabled = default;
            bool? alwaysOn = default;
            string javaVersion = default;
            string javaContainer = default;
            string javaContainerVersion = default;
            string appCommandLine = default;
            ManagedPipelineMode? managedPipelineMode = default;
            IList<VirtualApplication> virtualApplications = default;
            SiteLoadBalancing? loadBalancing = default;
            RoutingRuleExperiments experiments = default;
            SiteLimits limits = default;
            bool? autoHealEnabled = default;
            AutoHealRules autoHealRules = default;
            string tracingOptions = default;
            string vnetName = default;
            bool? vnetRouteAllEnabled = default;
            int? vnetPrivatePortsCount = default;
            AppServiceCorsSettings cors = default;
            WebAppPushSettings push = default;
            AppServiceApiDefinitionInfo apiDefinition = default;
            ApiManagementConfig apiManagementConfig = default;
            string autoSwapSlotName = default;
            bool? localMySqlEnabled = default;
            int? managedServiceIdentityId = default;
            int? xManagedServiceIdentityId = default;
            string keyVaultReferenceIdentity = default;
            IList<AppServiceIPSecurityRestriction> ipSecurityRestrictions = default;
            IList<AppServiceIPSecurityRestriction> scmIPSecurityRestrictions = default;
            bool? scmIPSecurityRestrictionsUseMain = default;
            bool? http20Enabled = default;
            AppServiceSupportedTlsVersion? minTlsVersion = default;
            AppServiceSupportedTlsVersion? scmMinTlsVersion = default;
            AppServiceFtpsState? ftpsState = default;
            int? preWarmedInstanceCount = default;
            int? functionAppScaleLimit = default;
            string healthCheckPath = default;
            bool? functionsRuntimeScaleMonitoringEnabled = default;
            string websiteTimeZone = default;
            int? minimumElasticInstanceCount = default;
            IDictionary<string, AppServiceStorageAccessInfo> azureStorageAccounts = default;
            string publicNetworkAccess = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("numberOfWorkers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        numberOfWorkers = null;
                        continue;
                    }
                    numberOfWorkers = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("defaultDocuments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        defaultDocuments = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    defaultDocuments = array;
                    continue;
                }
                if (property.NameEquals("netFrameworkVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        netFrameworkVersion = null;
                        continue;
                    }
                    netFrameworkVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("phpVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        phpVersion = null;
                        continue;
                    }
                    phpVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pythonVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        pythonVersion = null;
                        continue;
                    }
                    pythonVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nodeVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nodeVersion = null;
                        continue;
                    }
                    nodeVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("powerShellVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        powerShellVersion = null;
                        continue;
                    }
                    powerShellVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("linuxFxVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        linuxFxVersion = null;
                        continue;
                    }
                    linuxFxVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("windowsFxVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        windowsFxVersion = null;
                        continue;
                    }
                    windowsFxVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requestTracingEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        requestTracingEnabled = null;
                        continue;
                    }
                    requestTracingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("requestTracingExpirationTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        requestTracingExpirationTime = null;
                        continue;
                    }
                    requestTracingExpirationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("remoteDebuggingEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        remoteDebuggingEnabled = null;
                        continue;
                    }
                    remoteDebuggingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("remoteDebuggingVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        remoteDebuggingVersion = null;
                        continue;
                    }
                    remoteDebuggingVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("httpLoggingEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        httpLoggingEnabled = null;
                        continue;
                    }
                    httpLoggingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("acrUseManagedIdentityCreds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        acrUseManagedIdentityCreds = null;
                        continue;
                    }
                    acrUseManagedIdentityCreds = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("acrUserManagedIdentityID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        acrUserManagedIdentityId = null;
                        continue;
                    }
                    acrUserManagedIdentityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("logsDirectorySizeLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        logsDirectorySizeLimit = null;
                        continue;
                    }
                    logsDirectorySizeLimit = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("detailedErrorLoggingEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        detailedErrorLoggingEnabled = null;
                        continue;
                    }
                    detailedErrorLoggingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("publishingUsername"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        publishingUsername = null;
                        continue;
                    }
                    publishingUsername = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        appSettings = null;
                        continue;
                    }
                    List<AppServiceNameValuePair> array = new List<AppServiceNameValuePair>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AppServiceNameValuePair.DeserializeAppServiceNameValuePair(item, options));
                    }
                    appSettings = array;
                    continue;
                }
                if (property.NameEquals("connectionStrings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        connectionStrings = null;
                        continue;
                    }
                    List<ConnStringInfo> array = new List<ConnStringInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConnStringInfo.DeserializeConnStringInfo(item, options));
                    }
                    connectionStrings = array;
                    continue;
                }
                if (property.NameEquals("machineKey"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        machineKey = null;
                        continue;
                    }
                    machineKey = SiteMachineKey.DeserializeSiteMachineKey(property.Value, options);
                    continue;
                }
                if (property.NameEquals("handlerMappings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        handlerMappings = null;
                        continue;
                    }
                    List<HttpRequestHandlerMapping> array = new List<HttpRequestHandlerMapping>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HttpRequestHandlerMapping.DeserializeHttpRequestHandlerMapping(item, options));
                    }
                    handlerMappings = array;
                    continue;
                }
                if (property.NameEquals("documentRoot"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        documentRoot = null;
                        continue;
                    }
                    documentRoot = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scmType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scmType = null;
                        continue;
                    }
                    scmType = new ScmType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("use32BitWorkerProcess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        use32BitWorkerProcess = null;
                        continue;
                    }
                    use32BitWorkerProcess = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("webSocketsEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        webSocketsEnabled = null;
                        continue;
                    }
                    webSocketsEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("alwaysOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        alwaysOn = null;
                        continue;
                    }
                    alwaysOn = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("javaVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        javaVersion = null;
                        continue;
                    }
                    javaVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("javaContainer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        javaContainer = null;
                        continue;
                    }
                    javaContainer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("javaContainerVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        javaContainerVersion = null;
                        continue;
                    }
                    javaContainerVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appCommandLine"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        appCommandLine = null;
                        continue;
                    }
                    appCommandLine = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("managedPipelineMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        managedPipelineMode = null;
                        continue;
                    }
                    managedPipelineMode = property.Value.GetString().ToManagedPipelineMode();
                    continue;
                }
                if (property.NameEquals("virtualApplications"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        virtualApplications = null;
                        continue;
                    }
                    List<VirtualApplication> array = new List<VirtualApplication>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VirtualApplication.DeserializeVirtualApplication(item, options));
                    }
                    virtualApplications = array;
                    continue;
                }
                if (property.NameEquals("loadBalancing"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        loadBalancing = null;
                        continue;
                    }
                    loadBalancing = property.Value.GetString().ToSiteLoadBalancing();
                    continue;
                }
                if (property.NameEquals("experiments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        experiments = null;
                        continue;
                    }
                    experiments = RoutingRuleExperiments.DeserializeRoutingRuleExperiments(property.Value, options);
                    continue;
                }
                if (property.NameEquals("limits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        limits = null;
                        continue;
                    }
                    limits = SiteLimits.DeserializeSiteLimits(property.Value, options);
                    continue;
                }
                if (property.NameEquals("autoHealEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        autoHealEnabled = null;
                        continue;
                    }
                    autoHealEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("autoHealRules"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        autoHealRules = null;
                        continue;
                    }
                    autoHealRules = AutoHealRules.DeserializeAutoHealRules(property.Value, options);
                    continue;
                }
                if (property.NameEquals("tracingOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tracingOptions = null;
                        continue;
                    }
                    tracingOptions = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vnetName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        vnetName = null;
                        continue;
                    }
                    vnetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vnetRouteAllEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        vnetRouteAllEnabled = null;
                        continue;
                    }
                    vnetRouteAllEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("vnetPrivatePortsCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        vnetPrivatePortsCount = null;
                        continue;
                    }
                    vnetPrivatePortsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("cors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        cors = null;
                        continue;
                    }
                    cors = AppServiceCorsSettings.DeserializeAppServiceCorsSettings(property.Value, options);
                    continue;
                }
                if (property.NameEquals("push"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        push = null;
                        continue;
                    }
                    push = WebAppPushSettings.DeserializeWebAppPushSettings(property.Value, options);
                    continue;
                }
                if (property.NameEquals("apiDefinition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        apiDefinition = null;
                        continue;
                    }
                    apiDefinition = AppServiceApiDefinitionInfo.DeserializeAppServiceApiDefinitionInfo(property.Value, options);
                    continue;
                }
                if (property.NameEquals("apiManagementConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        apiManagementConfig = null;
                        continue;
                    }
                    apiManagementConfig = ApiManagementConfig.DeserializeApiManagementConfig(property.Value, options);
                    continue;
                }
                if (property.NameEquals("autoSwapSlotName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        autoSwapSlotName = null;
                        continue;
                    }
                    autoSwapSlotName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("localMySqlEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        localMySqlEnabled = null;
                        continue;
                    }
                    localMySqlEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("managedServiceIdentityId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        managedServiceIdentityId = null;
                        continue;
                    }
                    managedServiceIdentityId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("xManagedServiceIdentityId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        xManagedServiceIdentityId = null;
                        continue;
                    }
                    xManagedServiceIdentityId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("keyVaultReferenceIdentity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keyVaultReferenceIdentity = null;
                        continue;
                    }
                    keyVaultReferenceIdentity = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipSecurityRestrictions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ipSecurityRestrictions = null;
                        continue;
                    }
                    List<AppServiceIPSecurityRestriction> array = new List<AppServiceIPSecurityRestriction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AppServiceIPSecurityRestriction.DeserializeAppServiceIPSecurityRestriction(item, options));
                    }
                    ipSecurityRestrictions = array;
                    continue;
                }
                if (property.NameEquals("scmIpSecurityRestrictions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scmIPSecurityRestrictions = null;
                        continue;
                    }
                    List<AppServiceIPSecurityRestriction> array = new List<AppServiceIPSecurityRestriction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AppServiceIPSecurityRestriction.DeserializeAppServiceIPSecurityRestriction(item, options));
                    }
                    scmIPSecurityRestrictions = array;
                    continue;
                }
                if (property.NameEquals("scmIpSecurityRestrictionsUseMain"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scmIPSecurityRestrictionsUseMain = null;
                        continue;
                    }
                    scmIPSecurityRestrictionsUseMain = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("http20Enabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        http20Enabled = null;
                        continue;
                    }
                    http20Enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("minTlsVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        minTlsVersion = null;
                        continue;
                    }
                    minTlsVersion = new AppServiceSupportedTlsVersion(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scmMinTlsVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scmMinTlsVersion = null;
                        continue;
                    }
                    scmMinTlsVersion = new AppServiceSupportedTlsVersion(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ftpsState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ftpsState = null;
                        continue;
                    }
                    ftpsState = new AppServiceFtpsState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("preWarmedInstanceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        preWarmedInstanceCount = null;
                        continue;
                    }
                    preWarmedInstanceCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("functionAppScaleLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        functionAppScaleLimit = null;
                        continue;
                    }
                    functionAppScaleLimit = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("healthCheckPath"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        healthCheckPath = null;
                        continue;
                    }
                    healthCheckPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("functionsRuntimeScaleMonitoringEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        functionsRuntimeScaleMonitoringEnabled = null;
                        continue;
                    }
                    functionsRuntimeScaleMonitoringEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("websiteTimeZone"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        websiteTimeZone = null;
                        continue;
                    }
                    websiteTimeZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minimumElasticInstanceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        minimumElasticInstanceCount = null;
                        continue;
                    }
                    minimumElasticInstanceCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("azureStorageAccounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        azureStorageAccounts = null;
                        continue;
                    }
                    Dictionary<string, AppServiceStorageAccessInfo> dictionary = new Dictionary<string, AppServiceStorageAccessInfo>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, AppServiceStorageAccessInfo.DeserializeAppServiceStorageAccessInfo(property0.Value, options));
                    }
                    azureStorageAccounts = dictionary;
                    continue;
                }
                if (property.NameEquals("publicNetworkAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        publicNetworkAccess = null;
                        continue;
                    }
                    publicNetworkAccess = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SiteConfigProperties(
                numberOfWorkers,
                defaultDocuments ?? new ChangeTrackingList<string>(),
                netFrameworkVersion,
                phpVersion,
                pythonVersion,
                nodeVersion,
                powerShellVersion,
                linuxFxVersion,
                windowsFxVersion,
                requestTracingEnabled,
                requestTracingExpirationTime,
                remoteDebuggingEnabled,
                remoteDebuggingVersion,
                httpLoggingEnabled,
                acrUseManagedIdentityCreds,
                acrUserManagedIdentityId,
                logsDirectorySizeLimit,
                detailedErrorLoggingEnabled,
                publishingUsername,
                appSettings ?? new ChangeTrackingList<AppServiceNameValuePair>(),
                connectionStrings ?? new ChangeTrackingList<ConnStringInfo>(),
                machineKey,
                handlerMappings ?? new ChangeTrackingList<HttpRequestHandlerMapping>(),
                documentRoot,
                scmType,
                use32BitWorkerProcess,
                webSocketsEnabled,
                alwaysOn,
                javaVersion,
                javaContainer,
                javaContainerVersion,
                appCommandLine,
                managedPipelineMode,
                virtualApplications ?? new ChangeTrackingList<VirtualApplication>(),
                loadBalancing,
                experiments,
                limits,
                autoHealEnabled,
                autoHealRules,
                tracingOptions,
                vnetName,
                vnetRouteAllEnabled,
                vnetPrivatePortsCount,
                cors,
                push,
                apiDefinition,
                apiManagementConfig,
                autoSwapSlotName,
                localMySqlEnabled,
                managedServiceIdentityId,
                xManagedServiceIdentityId,
                keyVaultReferenceIdentity,
                ipSecurityRestrictions ?? new ChangeTrackingList<AppServiceIPSecurityRestriction>(),
                scmIPSecurityRestrictions ?? new ChangeTrackingList<AppServiceIPSecurityRestriction>(),
                scmIPSecurityRestrictionsUseMain,
                http20Enabled,
                minTlsVersion,
                scmMinTlsVersion,
                ftpsState,
                preWarmedInstanceCount,
                functionAppScaleLimit,
                healthCheckPath,
                functionsRuntimeScaleMonitoringEnabled,
                websiteTimeZone,
                minimumElasticInstanceCount,
                azureStorageAccounts ?? new ChangeTrackingDictionary<string, AppServiceStorageAccessInfo>(),
                publicNetworkAccess,
                serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            if (propertyOverrides != null)
            {
                TransformFlattenedOverrides(bicepOptions, propertyOverrides);
            }

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(NumberOfWorkers), out propertyOverride);
            if (Optional.IsDefined(NumberOfWorkers) || hasPropertyOverride)
            {
                builder.Append("  numberOfWorkers: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"{NumberOfWorkers.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DefaultDocuments), out propertyOverride);
            if (Optional.IsCollectionDefined(DefaultDocuments) || hasPropertyOverride)
            {
                if (DefaultDocuments.Any() || hasPropertyOverride)
                {
                    builder.Append("  defaultDocuments: ");
                    if (hasPropertyOverride)
                    {
                        builder.AppendLine($"{propertyOverride}");
                    }
                    else
                    {
                        builder.AppendLine("[");
                        foreach (var item in DefaultDocuments)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("    '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"    '{item}'");
                            }
                        }
                        builder.AppendLine("  ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(NetFrameworkVersion), out propertyOverride);
            if (Optional.IsDefined(NetFrameworkVersion) || hasPropertyOverride)
            {
                builder.Append("  netFrameworkVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (NetFrameworkVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{NetFrameworkVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{NetFrameworkVersion}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PhpVersion), out propertyOverride);
            if (Optional.IsDefined(PhpVersion) || hasPropertyOverride)
            {
                builder.Append("  phpVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (PhpVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{PhpVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{PhpVersion}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PythonVersion), out propertyOverride);
            if (Optional.IsDefined(PythonVersion) || hasPropertyOverride)
            {
                builder.Append("  pythonVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (PythonVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{PythonVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{PythonVersion}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(NodeVersion), out propertyOverride);
            if (Optional.IsDefined(NodeVersion) || hasPropertyOverride)
            {
                builder.Append("  nodeVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (NodeVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{NodeVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{NodeVersion}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PowerShellVersion), out propertyOverride);
            if (Optional.IsDefined(PowerShellVersion) || hasPropertyOverride)
            {
                builder.Append("  powerShellVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (PowerShellVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{PowerShellVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{PowerShellVersion}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(LinuxFxVersion), out propertyOverride);
            if (Optional.IsDefined(LinuxFxVersion) || hasPropertyOverride)
            {
                builder.Append("  linuxFxVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (LinuxFxVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{LinuxFxVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{LinuxFxVersion}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(WindowsFxVersion), out propertyOverride);
            if (Optional.IsDefined(WindowsFxVersion) || hasPropertyOverride)
            {
                builder.Append("  windowsFxVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (WindowsFxVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{WindowsFxVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{WindowsFxVersion}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsRequestTracingEnabled), out propertyOverride);
            if (Optional.IsDefined(IsRequestTracingEnabled) || hasPropertyOverride)
            {
                builder.Append("  requestTracingEnabled: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = IsRequestTracingEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RequestTracingExpirationOn), out propertyOverride);
            if (Optional.IsDefined(RequestTracingExpirationOn) || hasPropertyOverride)
            {
                builder.Append("  requestTracingExpirationTime: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var formattedDateTimeString = TypeFormatters.ToString(RequestTracingExpirationOn.Value, "o");
                    builder.AppendLine($"'{formattedDateTimeString}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsRemoteDebuggingEnabled), out propertyOverride);
            if (Optional.IsDefined(IsRemoteDebuggingEnabled) || hasPropertyOverride)
            {
                builder.Append("  remoteDebuggingEnabled: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = IsRemoteDebuggingEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RemoteDebuggingVersion), out propertyOverride);
            if (Optional.IsDefined(RemoteDebuggingVersion) || hasPropertyOverride)
            {
                builder.Append("  remoteDebuggingVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (RemoteDebuggingVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{RemoteDebuggingVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{RemoteDebuggingVersion}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsHttpLoggingEnabled), out propertyOverride);
            if (Optional.IsDefined(IsHttpLoggingEnabled) || hasPropertyOverride)
            {
                builder.Append("  httpLoggingEnabled: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = IsHttpLoggingEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(UseManagedIdentityCreds), out propertyOverride);
            if (Optional.IsDefined(UseManagedIdentityCreds) || hasPropertyOverride)
            {
                builder.Append("  acrUseManagedIdentityCreds: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = UseManagedIdentityCreds.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AcrUserManagedIdentityId), out propertyOverride);
            if (Optional.IsDefined(AcrUserManagedIdentityId) || hasPropertyOverride)
            {
                builder.Append("  acrUserManagedIdentityID: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (AcrUserManagedIdentityId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{AcrUserManagedIdentityId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{AcrUserManagedIdentityId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(LogsDirectorySizeLimit), out propertyOverride);
            if (Optional.IsDefined(LogsDirectorySizeLimit) || hasPropertyOverride)
            {
                builder.Append("  logsDirectorySizeLimit: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"{LogsDirectorySizeLimit.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsDetailedErrorLoggingEnabled), out propertyOverride);
            if (Optional.IsDefined(IsDetailedErrorLoggingEnabled) || hasPropertyOverride)
            {
                builder.Append("  detailedErrorLoggingEnabled: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = IsDetailedErrorLoggingEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PublishingUsername), out propertyOverride);
            if (Optional.IsDefined(PublishingUsername) || hasPropertyOverride)
            {
                builder.Append("  publishingUsername: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (PublishingUsername.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{PublishingUsername}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{PublishingUsername}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AppSettings), out propertyOverride);
            if (Optional.IsCollectionDefined(AppSettings) || hasPropertyOverride)
            {
                if (AppSettings.Any() || hasPropertyOverride)
                {
                    builder.Append("  appSettings: ");
                    if (hasPropertyOverride)
                    {
                        builder.AppendLine($"{propertyOverride}");
                    }
                    else
                    {
                        builder.AppendLine("[");
                        foreach (var item in AppSettings)
                        {
                            BicepSerializationHelpers.AppendChildObject(builder, item, options, 4, true, "  appSettings: ");
                        }
                        builder.AppendLine("  ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ConnectionStrings), out propertyOverride);
            if (Optional.IsCollectionDefined(ConnectionStrings) || hasPropertyOverride)
            {
                if (ConnectionStrings.Any() || hasPropertyOverride)
                {
                    builder.Append("  connectionStrings: ");
                    if (hasPropertyOverride)
                    {
                        builder.AppendLine($"{propertyOverride}");
                    }
                    else
                    {
                        builder.AppendLine("[");
                        foreach (var item in ConnectionStrings)
                        {
                            BicepSerializationHelpers.AppendChildObject(builder, item, options, 4, true, "  connectionStrings: ");
                        }
                        builder.AppendLine("  ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(MachineKey), out propertyOverride);
            if (Optional.IsDefined(MachineKey) || hasPropertyOverride)
            {
                builder.Append("  machineKey: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, MachineKey, options, 2, false, "  machineKey: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(HandlerMappings), out propertyOverride);
            if (Optional.IsCollectionDefined(HandlerMappings) || hasPropertyOverride)
            {
                if (HandlerMappings.Any() || hasPropertyOverride)
                {
                    builder.Append("  handlerMappings: ");
                    if (hasPropertyOverride)
                    {
                        builder.AppendLine($"{propertyOverride}");
                    }
                    else
                    {
                        builder.AppendLine("[");
                        foreach (var item in HandlerMappings)
                        {
                            BicepSerializationHelpers.AppendChildObject(builder, item, options, 4, true, "  handlerMappings: ");
                        }
                        builder.AppendLine("  ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DocumentRoot), out propertyOverride);
            if (Optional.IsDefined(DocumentRoot) || hasPropertyOverride)
            {
                builder.Append("  documentRoot: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (DocumentRoot.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{DocumentRoot}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{DocumentRoot}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ScmType), out propertyOverride);
            if (Optional.IsDefined(ScmType) || hasPropertyOverride)
            {
                builder.Append("  scmType: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{ScmType.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Use32BitWorkerProcess), out propertyOverride);
            if (Optional.IsDefined(Use32BitWorkerProcess) || hasPropertyOverride)
            {
                builder.Append("  use32BitWorkerProcess: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = Use32BitWorkerProcess.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsWebSocketsEnabled), out propertyOverride);
            if (Optional.IsDefined(IsWebSocketsEnabled) || hasPropertyOverride)
            {
                builder.Append("  webSocketsEnabled: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = IsWebSocketsEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsAlwaysOn), out propertyOverride);
            if (Optional.IsDefined(IsAlwaysOn) || hasPropertyOverride)
            {
                builder.Append("  alwaysOn: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = IsAlwaysOn.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(JavaVersion), out propertyOverride);
            if (Optional.IsDefined(JavaVersion) || hasPropertyOverride)
            {
                builder.Append("  javaVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (JavaVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{JavaVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{JavaVersion}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(JavaContainer), out propertyOverride);
            if (Optional.IsDefined(JavaContainer) || hasPropertyOverride)
            {
                builder.Append("  javaContainer: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (JavaContainer.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{JavaContainer}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{JavaContainer}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(JavaContainerVersion), out propertyOverride);
            if (Optional.IsDefined(JavaContainerVersion) || hasPropertyOverride)
            {
                builder.Append("  javaContainerVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (JavaContainerVersion.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{JavaContainerVersion}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{JavaContainerVersion}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AppCommandLine), out propertyOverride);
            if (Optional.IsDefined(AppCommandLine) || hasPropertyOverride)
            {
                builder.Append("  appCommandLine: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (AppCommandLine.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{AppCommandLine}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{AppCommandLine}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ManagedPipelineMode), out propertyOverride);
            if (Optional.IsDefined(ManagedPipelineMode) || hasPropertyOverride)
            {
                builder.Append("  managedPipelineMode: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{ManagedPipelineMode.Value.ToSerialString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(VirtualApplications), out propertyOverride);
            if (Optional.IsCollectionDefined(VirtualApplications) || hasPropertyOverride)
            {
                if (VirtualApplications.Any() || hasPropertyOverride)
                {
                    builder.Append("  virtualApplications: ");
                    if (hasPropertyOverride)
                    {
                        builder.AppendLine($"{propertyOverride}");
                    }
                    else
                    {
                        builder.AppendLine("[");
                        foreach (var item in VirtualApplications)
                        {
                            BicepSerializationHelpers.AppendChildObject(builder, item, options, 4, true, "  virtualApplications: ");
                        }
                        builder.AppendLine("  ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(LoadBalancing), out propertyOverride);
            if (Optional.IsDefined(LoadBalancing) || hasPropertyOverride)
            {
                builder.Append("  loadBalancing: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{LoadBalancing.Value.ToSerialString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Experiments), out propertyOverride);
            if (Optional.IsDefined(Experiments) || hasPropertyOverride)
            {
                builder.Append("  experiments: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, Experiments, options, 2, false, "  experiments: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Limits), out propertyOverride);
            if (Optional.IsDefined(Limits) || hasPropertyOverride)
            {
                builder.Append("  limits: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, Limits, options, 2, false, "  limits: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsAutoHealEnabled), out propertyOverride);
            if (Optional.IsDefined(IsAutoHealEnabled) || hasPropertyOverride)
            {
                builder.Append("  autoHealEnabled: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = IsAutoHealEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AutoHealRules), out propertyOverride);
            if (Optional.IsDefined(AutoHealRules) || hasPropertyOverride)
            {
                builder.Append("  autoHealRules: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, AutoHealRules, options, 2, false, "  autoHealRules: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TracingOptions), out propertyOverride);
            if (Optional.IsDefined(TracingOptions) || hasPropertyOverride)
            {
                builder.Append("  tracingOptions: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (TracingOptions.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{TracingOptions}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{TracingOptions}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(VnetName), out propertyOverride);
            if (Optional.IsDefined(VnetName) || hasPropertyOverride)
            {
                builder.Append("  vnetName: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (VnetName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{VnetName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{VnetName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsVnetRouteAllEnabled), out propertyOverride);
            if (Optional.IsDefined(IsVnetRouteAllEnabled) || hasPropertyOverride)
            {
                builder.Append("  vnetRouteAllEnabled: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = IsVnetRouteAllEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(VnetPrivatePortsCount), out propertyOverride);
            if (Optional.IsDefined(VnetPrivatePortsCount) || hasPropertyOverride)
            {
                builder.Append("  vnetPrivatePortsCount: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"{VnetPrivatePortsCount.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Cors), out propertyOverride);
            if (Optional.IsDefined(Cors) || hasPropertyOverride)
            {
                builder.Append("  cors: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, Cors, options, 2, false, "  cors: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Push), out propertyOverride);
            if (Optional.IsDefined(Push) || hasPropertyOverride)
            {
                builder.Append("  push: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, Push, options, 2, false, "  push: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ApiDefinition), out propertyOverride);
            if (Optional.IsDefined(ApiDefinition) || hasPropertyOverride)
            {
                builder.Append("  apiDefinition: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, ApiDefinition, options, 2, false, "  apiDefinition: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ApiManagementConfig), out propertyOverride);
            if (Optional.IsDefined(ApiManagementConfig) || hasPropertyOverride)
            {
                builder.Append("  apiManagementConfig: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    BicepSerializationHelpers.AppendChildObject(builder, ApiManagementConfig, options, 2, false, "  apiManagementConfig: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AutoSwapSlotName), out propertyOverride);
            if (Optional.IsDefined(AutoSwapSlotName) || hasPropertyOverride)
            {
                builder.Append("  autoSwapSlotName: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (AutoSwapSlotName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{AutoSwapSlotName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{AutoSwapSlotName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsLocalMySqlEnabled), out propertyOverride);
            if (Optional.IsDefined(IsLocalMySqlEnabled) || hasPropertyOverride)
            {
                builder.Append("  localMySqlEnabled: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = IsLocalMySqlEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ManagedServiceIdentityId), out propertyOverride);
            if (Optional.IsDefined(ManagedServiceIdentityId) || hasPropertyOverride)
            {
                builder.Append("  managedServiceIdentityId: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"{ManagedServiceIdentityId.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(XManagedServiceIdentityId), out propertyOverride);
            if (Optional.IsDefined(XManagedServiceIdentityId) || hasPropertyOverride)
            {
                builder.Append("  xManagedServiceIdentityId: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"{XManagedServiceIdentityId.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(KeyVaultReferenceIdentity), out propertyOverride);
            if (Optional.IsDefined(KeyVaultReferenceIdentity) || hasPropertyOverride)
            {
                builder.Append("  keyVaultReferenceIdentity: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (KeyVaultReferenceIdentity.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{KeyVaultReferenceIdentity}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{KeyVaultReferenceIdentity}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IPSecurityRestrictions), out propertyOverride);
            if (Optional.IsCollectionDefined(IPSecurityRestrictions) || hasPropertyOverride)
            {
                if (IPSecurityRestrictions.Any() || hasPropertyOverride)
                {
                    builder.Append("  ipSecurityRestrictions: ");
                    if (hasPropertyOverride)
                    {
                        builder.AppendLine($"{propertyOverride}");
                    }
                    else
                    {
                        builder.AppendLine("[");
                        foreach (var item in IPSecurityRestrictions)
                        {
                            BicepSerializationHelpers.AppendChildObject(builder, item, options, 4, true, "  ipSecurityRestrictions: ");
                        }
                        builder.AppendLine("  ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ScmIPSecurityRestrictions), out propertyOverride);
            if (Optional.IsCollectionDefined(ScmIPSecurityRestrictions) || hasPropertyOverride)
            {
                if (ScmIPSecurityRestrictions.Any() || hasPropertyOverride)
                {
                    builder.Append("  scmIpSecurityRestrictions: ");
                    if (hasPropertyOverride)
                    {
                        builder.AppendLine($"{propertyOverride}");
                    }
                    else
                    {
                        builder.AppendLine("[");
                        foreach (var item in ScmIPSecurityRestrictions)
                        {
                            BicepSerializationHelpers.AppendChildObject(builder, item, options, 4, true, "  scmIpSecurityRestrictions: ");
                        }
                        builder.AppendLine("  ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AllowIPSecurityRestrictionsForScmToUseMain), out propertyOverride);
            if (Optional.IsDefined(AllowIPSecurityRestrictionsForScmToUseMain) || hasPropertyOverride)
            {
                builder.Append("  scmIpSecurityRestrictionsUseMain: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = AllowIPSecurityRestrictionsForScmToUseMain.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsHttp20Enabled), out propertyOverride);
            if (Optional.IsDefined(IsHttp20Enabled) || hasPropertyOverride)
            {
                builder.Append("  http20Enabled: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = IsHttp20Enabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(MinTlsVersion), out propertyOverride);
            if (Optional.IsDefined(MinTlsVersion) || hasPropertyOverride)
            {
                builder.Append("  minTlsVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{MinTlsVersion.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ScmMinTlsVersion), out propertyOverride);
            if (Optional.IsDefined(ScmMinTlsVersion) || hasPropertyOverride)
            {
                builder.Append("  scmMinTlsVersion: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{ScmMinTlsVersion.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(FtpsState), out propertyOverride);
            if (Optional.IsDefined(FtpsState) || hasPropertyOverride)
            {
                builder.Append("  ftpsState: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"'{FtpsState.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PreWarmedInstanceCount), out propertyOverride);
            if (Optional.IsDefined(PreWarmedInstanceCount) || hasPropertyOverride)
            {
                builder.Append("  preWarmedInstanceCount: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"{PreWarmedInstanceCount.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(FunctionAppScaleLimit), out propertyOverride);
            if (Optional.IsDefined(FunctionAppScaleLimit) || hasPropertyOverride)
            {
                builder.Append("  functionAppScaleLimit: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"{FunctionAppScaleLimit.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(HealthCheckPath), out propertyOverride);
            if (Optional.IsDefined(HealthCheckPath) || hasPropertyOverride)
            {
                builder.Append("  healthCheckPath: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (HealthCheckPath.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{HealthCheckPath}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{HealthCheckPath}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsFunctionsRuntimeScaleMonitoringEnabled), out propertyOverride);
            if (Optional.IsDefined(IsFunctionsRuntimeScaleMonitoringEnabled) || hasPropertyOverride)
            {
                builder.Append("  functionsRuntimeScaleMonitoringEnabled: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    var boolValue = IsFunctionsRuntimeScaleMonitoringEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(WebsiteTimeZone), out propertyOverride);
            if (Optional.IsDefined(WebsiteTimeZone) || hasPropertyOverride)
            {
                builder.Append("  websiteTimeZone: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (WebsiteTimeZone.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{WebsiteTimeZone}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{WebsiteTimeZone}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(MinimumElasticInstanceCount), out propertyOverride);
            if (Optional.IsDefined(MinimumElasticInstanceCount) || hasPropertyOverride)
            {
                builder.Append("  minimumElasticInstanceCount: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    builder.AppendLine($"{MinimumElasticInstanceCount.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AzureStorageAccounts), out propertyOverride);
            if (Optional.IsCollectionDefined(AzureStorageAccounts) || hasPropertyOverride)
            {
                if (AzureStorageAccounts.Any() || hasPropertyOverride)
                {
                    builder.Append("  azureStorageAccounts: ");
                    if (hasPropertyOverride)
                    {
                        builder.AppendLine($"{propertyOverride}");
                    }
                    else
                    {
                        builder.AppendLine("{");
                        foreach (var item in AzureStorageAccounts)
                        {
                            builder.Append($"    '{item.Key}': ");
                            BicepSerializationHelpers.AppendChildObject(builder, item.Value, options, 4, false, "  azureStorageAccounts: ");
                        }
                        builder.AppendLine("  }");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PublicNetworkAccess), out propertyOverride);
            if (Optional.IsDefined(PublicNetworkAccess) || hasPropertyOverride)
            {
                builder.Append("  publicNetworkAccess: ");
                if (hasPropertyOverride)
                {
                    builder.AppendLine($"{propertyOverride}");
                }
                else
                {
                    if (PublicNetworkAccess.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{PublicNetworkAccess}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{PublicNetworkAccess}'");
                    }
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void TransformFlattenedOverrides(BicepModelReaderWriterOptions bicepOptions, IDictionary<string, string> propertyOverrides)
        {
            foreach (var item in propertyOverrides.ToList())
            {
                switch (item.Key)
                {
                    case "ExperimentsRampUpRules":
                        Dictionary<string, string> propertyDictionary = new Dictionary<string, string>();
                        propertyDictionary.Add("RampUpRules", item.Value);
                        bicepOptions.PropertyOverrides.Add(Experiments, propertyDictionary);
                        break;
                    case "ApiDefinitionUri":
                        Dictionary<string, string> propertyDictionary0 = new Dictionary<string, string>();
                        propertyDictionary0.Add("Uri", item.Value);
                        bicepOptions.PropertyOverrides.Add(ApiDefinition, propertyDictionary0);
                        break;
                    case "ApiManagementConfigId":
                        Dictionary<string, string> propertyDictionary1 = new Dictionary<string, string>();
                        propertyDictionary1.Add("Id", item.Value);
                        bicepOptions.PropertyOverrides.Add(ApiManagementConfig, propertyDictionary1);
                        break;
                    default:
                        continue;
                }
            }
        }

        BinaryData IPersistableModel<SiteConfigProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteConfigProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(SiteConfigProperties)} does not support writing '{options.Format}' format.");
            }
        }

        SiteConfigProperties IPersistableModel<SiteConfigProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteConfigProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSiteConfigProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SiteConfigProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SiteConfigProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
