// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class SiteConfigProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(NumberOfWorkers))
            {
                if (NumberOfWorkers != null)
                {
                    writer.WritePropertyName("numberOfWorkers"u8);
                    writer.WriteNumberValue(NumberOfWorkers.Value);
                }
                else
                {
                    writer.WriteNull("numberOfWorkers");
                }
            }
            if (Core.Optional.IsCollectionDefined(DefaultDocuments))
            {
                if (DefaultDocuments != null)
                {
                    writer.WritePropertyName("defaultDocuments"u8);
                    writer.WriteStartArray();
                    foreach (var item in DefaultDocuments)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("defaultDocuments");
                }
            }
            if (Core.Optional.IsDefined(NetFrameworkVersion))
            {
                if (NetFrameworkVersion != null)
                {
                    writer.WritePropertyName("netFrameworkVersion"u8);
                    writer.WriteStringValue(NetFrameworkVersion);
                }
                else
                {
                    writer.WriteNull("netFrameworkVersion");
                }
            }
            if (Core.Optional.IsDefined(PhpVersion))
            {
                if (PhpVersion != null)
                {
                    writer.WritePropertyName("phpVersion"u8);
                    writer.WriteStringValue(PhpVersion);
                }
                else
                {
                    writer.WriteNull("phpVersion");
                }
            }
            if (Core.Optional.IsDefined(PythonVersion))
            {
                if (PythonVersion != null)
                {
                    writer.WritePropertyName("pythonVersion"u8);
                    writer.WriteStringValue(PythonVersion);
                }
                else
                {
                    writer.WriteNull("pythonVersion");
                }
            }
            if (Core.Optional.IsDefined(NodeVersion))
            {
                if (NodeVersion != null)
                {
                    writer.WritePropertyName("nodeVersion"u8);
                    writer.WriteStringValue(NodeVersion);
                }
                else
                {
                    writer.WriteNull("nodeVersion");
                }
            }
            if (Core.Optional.IsDefined(PowerShellVersion))
            {
                if (PowerShellVersion != null)
                {
                    writer.WritePropertyName("powerShellVersion"u8);
                    writer.WriteStringValue(PowerShellVersion);
                }
                else
                {
                    writer.WriteNull("powerShellVersion");
                }
            }
            if (Core.Optional.IsDefined(LinuxFxVersion))
            {
                if (LinuxFxVersion != null)
                {
                    writer.WritePropertyName("linuxFxVersion"u8);
                    writer.WriteStringValue(LinuxFxVersion);
                }
                else
                {
                    writer.WriteNull("linuxFxVersion");
                }
            }
            if (Core.Optional.IsDefined(WindowsFxVersion))
            {
                if (WindowsFxVersion != null)
                {
                    writer.WritePropertyName("windowsFxVersion"u8);
                    writer.WriteStringValue(WindowsFxVersion);
                }
                else
                {
                    writer.WriteNull("windowsFxVersion");
                }
            }
            if (Core.Optional.IsDefined(IsRequestTracingEnabled))
            {
                if (IsRequestTracingEnabled != null)
                {
                    writer.WritePropertyName("requestTracingEnabled"u8);
                    writer.WriteBooleanValue(IsRequestTracingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("requestTracingEnabled");
                }
            }
            if (Core.Optional.IsDefined(RequestTracingExpirationOn))
            {
                if (RequestTracingExpirationOn != null)
                {
                    writer.WritePropertyName("requestTracingExpirationTime"u8);
                    writer.WriteStringValue(RequestTracingExpirationOn.Value, "O");
                }
                else
                {
                    writer.WriteNull("requestTracingExpirationTime");
                }
            }
            if (Core.Optional.IsDefined(IsRemoteDebuggingEnabled))
            {
                if (IsRemoteDebuggingEnabled != null)
                {
                    writer.WritePropertyName("remoteDebuggingEnabled"u8);
                    writer.WriteBooleanValue(IsRemoteDebuggingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("remoteDebuggingEnabled");
                }
            }
            if (Core.Optional.IsDefined(RemoteDebuggingVersion))
            {
                if (RemoteDebuggingVersion != null)
                {
                    writer.WritePropertyName("remoteDebuggingVersion"u8);
                    writer.WriteStringValue(RemoteDebuggingVersion);
                }
                else
                {
                    writer.WriteNull("remoteDebuggingVersion");
                }
            }
            if (Core.Optional.IsDefined(IsHttpLoggingEnabled))
            {
                if (IsHttpLoggingEnabled != null)
                {
                    writer.WritePropertyName("httpLoggingEnabled"u8);
                    writer.WriteBooleanValue(IsHttpLoggingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("httpLoggingEnabled");
                }
            }
            if (Core.Optional.IsDefined(UseManagedIdentityCreds))
            {
                if (UseManagedIdentityCreds != null)
                {
                    writer.WritePropertyName("acrUseManagedIdentityCreds"u8);
                    writer.WriteBooleanValue(UseManagedIdentityCreds.Value);
                }
                else
                {
                    writer.WriteNull("acrUseManagedIdentityCreds");
                }
            }
            if (Core.Optional.IsDefined(AcrUserManagedIdentityId))
            {
                if (AcrUserManagedIdentityId != null)
                {
                    writer.WritePropertyName("acrUserManagedIdentityID"u8);
                    writer.WriteStringValue(AcrUserManagedIdentityId);
                }
                else
                {
                    writer.WriteNull("acrUserManagedIdentityID");
                }
            }
            if (Core.Optional.IsDefined(LogsDirectorySizeLimit))
            {
                if (LogsDirectorySizeLimit != null)
                {
                    writer.WritePropertyName("logsDirectorySizeLimit"u8);
                    writer.WriteNumberValue(LogsDirectorySizeLimit.Value);
                }
                else
                {
                    writer.WriteNull("logsDirectorySizeLimit");
                }
            }
            if (Core.Optional.IsDefined(IsDetailedErrorLoggingEnabled))
            {
                if (IsDetailedErrorLoggingEnabled != null)
                {
                    writer.WritePropertyName("detailedErrorLoggingEnabled"u8);
                    writer.WriteBooleanValue(IsDetailedErrorLoggingEnabled.Value);
                }
                else
                {
                    writer.WriteNull("detailedErrorLoggingEnabled");
                }
            }
            if (Core.Optional.IsDefined(PublishingUsername))
            {
                if (PublishingUsername != null)
                {
                    writer.WritePropertyName("publishingUsername"u8);
                    writer.WriteStringValue(PublishingUsername);
                }
                else
                {
                    writer.WriteNull("publishingUsername");
                }
            }
            if (Core.Optional.IsCollectionDefined(AppSettings))
            {
                if (AppSettings != null)
                {
                    writer.WritePropertyName("appSettings"u8);
                    writer.WriteStartArray();
                    foreach (var item in AppSettings)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("appSettings");
                }
            }
            if (Core.Optional.IsCollectionDefined(ConnectionStrings))
            {
                if (ConnectionStrings != null)
                {
                    writer.WritePropertyName("connectionStrings"u8);
                    writer.WriteStartArray();
                    foreach (var item in ConnectionStrings)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("connectionStrings");
                }
            }
            if (Core.Optional.IsCollectionDefined(HandlerMappings))
            {
                if (HandlerMappings != null)
                {
                    writer.WritePropertyName("handlerMappings"u8);
                    writer.WriteStartArray();
                    foreach (var item in HandlerMappings)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("handlerMappings");
                }
            }
            if (Core.Optional.IsDefined(DocumentRoot))
            {
                if (DocumentRoot != null)
                {
                    writer.WritePropertyName("documentRoot"u8);
                    writer.WriteStringValue(DocumentRoot);
                }
                else
                {
                    writer.WriteNull("documentRoot");
                }
            }
            if (Core.Optional.IsDefined(ScmType))
            {
                if (ScmType != null)
                {
                    writer.WritePropertyName("scmType"u8);
                    writer.WriteStringValue(ScmType.Value.ToString());
                }
                else
                {
                    writer.WriteNull("scmType");
                }
            }
            if (Core.Optional.IsDefined(Use32BitWorkerProcess))
            {
                if (Use32BitWorkerProcess != null)
                {
                    writer.WritePropertyName("use32BitWorkerProcess"u8);
                    writer.WriteBooleanValue(Use32BitWorkerProcess.Value);
                }
                else
                {
                    writer.WriteNull("use32BitWorkerProcess");
                }
            }
            if (Core.Optional.IsDefined(IsWebSocketsEnabled))
            {
                if (IsWebSocketsEnabled != null)
                {
                    writer.WritePropertyName("webSocketsEnabled"u8);
                    writer.WriteBooleanValue(IsWebSocketsEnabled.Value);
                }
                else
                {
                    writer.WriteNull("webSocketsEnabled");
                }
            }
            if (Core.Optional.IsDefined(IsAlwaysOn))
            {
                if (IsAlwaysOn != null)
                {
                    writer.WritePropertyName("alwaysOn"u8);
                    writer.WriteBooleanValue(IsAlwaysOn.Value);
                }
                else
                {
                    writer.WriteNull("alwaysOn");
                }
            }
            if (Core.Optional.IsDefined(JavaVersion))
            {
                if (JavaVersion != null)
                {
                    writer.WritePropertyName("javaVersion"u8);
                    writer.WriteStringValue(JavaVersion);
                }
                else
                {
                    writer.WriteNull("javaVersion");
                }
            }
            if (Core.Optional.IsDefined(JavaContainer))
            {
                if (JavaContainer != null)
                {
                    writer.WritePropertyName("javaContainer"u8);
                    writer.WriteStringValue(JavaContainer);
                }
                else
                {
                    writer.WriteNull("javaContainer");
                }
            }
            if (Core.Optional.IsDefined(JavaContainerVersion))
            {
                if (JavaContainerVersion != null)
                {
                    writer.WritePropertyName("javaContainerVersion"u8);
                    writer.WriteStringValue(JavaContainerVersion);
                }
                else
                {
                    writer.WriteNull("javaContainerVersion");
                }
            }
            if (Core.Optional.IsDefined(AppCommandLine))
            {
                if (AppCommandLine != null)
                {
                    writer.WritePropertyName("appCommandLine"u8);
                    writer.WriteStringValue(AppCommandLine);
                }
                else
                {
                    writer.WriteNull("appCommandLine");
                }
            }
            if (Core.Optional.IsDefined(ManagedPipelineMode))
            {
                if (ManagedPipelineMode != null)
                {
                    writer.WritePropertyName("managedPipelineMode"u8);
                    writer.WriteStringValue(ManagedPipelineMode.Value.ToSerialString());
                }
                else
                {
                    writer.WriteNull("managedPipelineMode");
                }
            }
            if (Core.Optional.IsCollectionDefined(VirtualApplications))
            {
                if (VirtualApplications != null)
                {
                    writer.WritePropertyName("virtualApplications"u8);
                    writer.WriteStartArray();
                    foreach (var item in VirtualApplications)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("virtualApplications");
                }
            }
            if (Core.Optional.IsDefined(LoadBalancing))
            {
                if (LoadBalancing != null)
                {
                    writer.WritePropertyName("loadBalancing"u8);
                    writer.WriteStringValue(LoadBalancing.Value.ToSerialString());
                }
                else
                {
                    writer.WriteNull("loadBalancing");
                }
            }
            if (Core.Optional.IsDefined(Experiments))
            {
                if (Experiments != null)
                {
                    writer.WritePropertyName("experiments"u8);
                    writer.WriteObjectValue(Experiments);
                }
                else
                {
                    writer.WriteNull("experiments");
                }
            }
            if (Core.Optional.IsDefined(Limits))
            {
                if (Limits != null)
                {
                    writer.WritePropertyName("limits"u8);
                    writer.WriteObjectValue(Limits);
                }
                else
                {
                    writer.WriteNull("limits");
                }
            }
            if (Core.Optional.IsDefined(IsAutoHealEnabled))
            {
                if (IsAutoHealEnabled != null)
                {
                    writer.WritePropertyName("autoHealEnabled"u8);
                    writer.WriteBooleanValue(IsAutoHealEnabled.Value);
                }
                else
                {
                    writer.WriteNull("autoHealEnabled");
                }
            }
            if (Core.Optional.IsDefined(AutoHealRules))
            {
                if (AutoHealRules != null)
                {
                    writer.WritePropertyName("autoHealRules"u8);
                    writer.WriteObjectValue(AutoHealRules);
                }
                else
                {
                    writer.WriteNull("autoHealRules");
                }
            }
            if (Core.Optional.IsDefined(TracingOptions))
            {
                if (TracingOptions != null)
                {
                    writer.WritePropertyName("tracingOptions"u8);
                    writer.WriteStringValue(TracingOptions);
                }
                else
                {
                    writer.WriteNull("tracingOptions");
                }
            }
            if (Core.Optional.IsDefined(VnetName))
            {
                if (VnetName != null)
                {
                    writer.WritePropertyName("vnetName"u8);
                    writer.WriteStringValue(VnetName);
                }
                else
                {
                    writer.WriteNull("vnetName");
                }
            }
            if (Core.Optional.IsDefined(IsVnetRouteAllEnabled))
            {
                if (IsVnetRouteAllEnabled != null)
                {
                    writer.WritePropertyName("vnetRouteAllEnabled"u8);
                    writer.WriteBooleanValue(IsVnetRouteAllEnabled.Value);
                }
                else
                {
                    writer.WriteNull("vnetRouteAllEnabled");
                }
            }
            if (Core.Optional.IsDefined(VnetPrivatePortsCount))
            {
                if (VnetPrivatePortsCount != null)
                {
                    writer.WritePropertyName("vnetPrivatePortsCount"u8);
                    writer.WriteNumberValue(VnetPrivatePortsCount.Value);
                }
                else
                {
                    writer.WriteNull("vnetPrivatePortsCount");
                }
            }
            if (Core.Optional.IsDefined(Cors))
            {
                if (Cors != null)
                {
                    writer.WritePropertyName("cors"u8);
                    writer.WriteObjectValue(Cors);
                }
                else
                {
                    writer.WriteNull("cors");
                }
            }
            if (Core.Optional.IsDefined(Push))
            {
                if (Push != null)
                {
                    writer.WritePropertyName("push"u8);
                    writer.WriteObjectValue(Push);
                }
                else
                {
                    writer.WriteNull("push");
                }
            }
            if (Core.Optional.IsDefined(ApiDefinition))
            {
                if (ApiDefinition != null)
                {
                    writer.WritePropertyName("apiDefinition"u8);
                    writer.WriteObjectValue(ApiDefinition);
                }
                else
                {
                    writer.WriteNull("apiDefinition");
                }
            }
            if (Core.Optional.IsDefined(ApiManagementConfig))
            {
                if (ApiManagementConfig != null)
                {
                    writer.WritePropertyName("apiManagementConfig"u8);
                    writer.WriteObjectValue(ApiManagementConfig);
                }
                else
                {
                    writer.WriteNull("apiManagementConfig");
                }
            }
            if (Core.Optional.IsDefined(AutoSwapSlotName))
            {
                if (AutoSwapSlotName != null)
                {
                    writer.WritePropertyName("autoSwapSlotName"u8);
                    writer.WriteStringValue(AutoSwapSlotName);
                }
                else
                {
                    writer.WriteNull("autoSwapSlotName");
                }
            }
            if (Core.Optional.IsDefined(IsLocalMySqlEnabled))
            {
                if (IsLocalMySqlEnabled != null)
                {
                    writer.WritePropertyName("localMySqlEnabled"u8);
                    writer.WriteBooleanValue(IsLocalMySqlEnabled.Value);
                }
                else
                {
                    writer.WriteNull("localMySqlEnabled");
                }
            }
            if (Core.Optional.IsDefined(ManagedServiceIdentityId))
            {
                if (ManagedServiceIdentityId != null)
                {
                    writer.WritePropertyName("managedServiceIdentityId"u8);
                    writer.WriteNumberValue(ManagedServiceIdentityId.Value);
                }
                else
                {
                    writer.WriteNull("managedServiceIdentityId");
                }
            }
            if (Core.Optional.IsDefined(XManagedServiceIdentityId))
            {
                if (XManagedServiceIdentityId != null)
                {
                    writer.WritePropertyName("xManagedServiceIdentityId"u8);
                    writer.WriteNumberValue(XManagedServiceIdentityId.Value);
                }
                else
                {
                    writer.WriteNull("xManagedServiceIdentityId");
                }
            }
            if (Core.Optional.IsDefined(KeyVaultReferenceIdentity))
            {
                if (KeyVaultReferenceIdentity != null)
                {
                    writer.WritePropertyName("keyVaultReferenceIdentity"u8);
                    writer.WriteStringValue(KeyVaultReferenceIdentity);
                }
                else
                {
                    writer.WriteNull("keyVaultReferenceIdentity");
                }
            }
            if (Core.Optional.IsCollectionDefined(IPSecurityRestrictions))
            {
                if (IPSecurityRestrictions != null)
                {
                    writer.WritePropertyName("ipSecurityRestrictions"u8);
                    writer.WriteStartArray();
                    foreach (var item in IPSecurityRestrictions)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("ipSecurityRestrictions");
                }
            }
            if (Core.Optional.IsCollectionDefined(ScmIPSecurityRestrictions))
            {
                if (ScmIPSecurityRestrictions != null)
                {
                    writer.WritePropertyName("scmIpSecurityRestrictions"u8);
                    writer.WriteStartArray();
                    foreach (var item in ScmIPSecurityRestrictions)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("scmIpSecurityRestrictions");
                }
            }
            if (Core.Optional.IsDefined(AllowIPSecurityRestrictionsForScmToUseMain))
            {
                if (AllowIPSecurityRestrictionsForScmToUseMain != null)
                {
                    writer.WritePropertyName("scmIpSecurityRestrictionsUseMain"u8);
                    writer.WriteBooleanValue(AllowIPSecurityRestrictionsForScmToUseMain.Value);
                }
                else
                {
                    writer.WriteNull("scmIpSecurityRestrictionsUseMain");
                }
            }
            if (Core.Optional.IsDefined(IsHttp20Enabled))
            {
                if (IsHttp20Enabled != null)
                {
                    writer.WritePropertyName("http20Enabled"u8);
                    writer.WriteBooleanValue(IsHttp20Enabled.Value);
                }
                else
                {
                    writer.WriteNull("http20Enabled");
                }
            }
            if (Core.Optional.IsDefined(MinTlsVersion))
            {
                if (MinTlsVersion != null)
                {
                    writer.WritePropertyName("minTlsVersion"u8);
                    writer.WriteStringValue(MinTlsVersion.Value.ToString());
                }
                else
                {
                    writer.WriteNull("minTlsVersion");
                }
            }
            if (Core.Optional.IsDefined(ScmMinTlsVersion))
            {
                if (ScmMinTlsVersion != null)
                {
                    writer.WritePropertyName("scmMinTlsVersion"u8);
                    writer.WriteStringValue(ScmMinTlsVersion.Value.ToString());
                }
                else
                {
                    writer.WriteNull("scmMinTlsVersion");
                }
            }
            if (Core.Optional.IsDefined(FtpsState))
            {
                if (FtpsState != null)
                {
                    writer.WritePropertyName("ftpsState"u8);
                    writer.WriteStringValue(FtpsState.Value.ToString());
                }
                else
                {
                    writer.WriteNull("ftpsState");
                }
            }
            if (Core.Optional.IsDefined(PreWarmedInstanceCount))
            {
                if (PreWarmedInstanceCount != null)
                {
                    writer.WritePropertyName("preWarmedInstanceCount"u8);
                    writer.WriteNumberValue(PreWarmedInstanceCount.Value);
                }
                else
                {
                    writer.WriteNull("preWarmedInstanceCount");
                }
            }
            if (Core.Optional.IsDefined(FunctionAppScaleLimit))
            {
                if (FunctionAppScaleLimit != null)
                {
                    writer.WritePropertyName("functionAppScaleLimit"u8);
                    writer.WriteNumberValue(FunctionAppScaleLimit.Value);
                }
                else
                {
                    writer.WriteNull("functionAppScaleLimit");
                }
            }
            if (Core.Optional.IsDefined(HealthCheckPath))
            {
                if (HealthCheckPath != null)
                {
                    writer.WritePropertyName("healthCheckPath"u8);
                    writer.WriteStringValue(HealthCheckPath);
                }
                else
                {
                    writer.WriteNull("healthCheckPath");
                }
            }
            if (Core.Optional.IsDefined(IsFunctionsRuntimeScaleMonitoringEnabled))
            {
                if (IsFunctionsRuntimeScaleMonitoringEnabled != null)
                {
                    writer.WritePropertyName("functionsRuntimeScaleMonitoringEnabled"u8);
                    writer.WriteBooleanValue(IsFunctionsRuntimeScaleMonitoringEnabled.Value);
                }
                else
                {
                    writer.WriteNull("functionsRuntimeScaleMonitoringEnabled");
                }
            }
            if (Core.Optional.IsDefined(WebsiteTimeZone))
            {
                if (WebsiteTimeZone != null)
                {
                    writer.WritePropertyName("websiteTimeZone"u8);
                    writer.WriteStringValue(WebsiteTimeZone);
                }
                else
                {
                    writer.WriteNull("websiteTimeZone");
                }
            }
            if (Core.Optional.IsDefined(MinimumElasticInstanceCount))
            {
                if (MinimumElasticInstanceCount != null)
                {
                    writer.WritePropertyName("minimumElasticInstanceCount"u8);
                    writer.WriteNumberValue(MinimumElasticInstanceCount.Value);
                }
                else
                {
                    writer.WriteNull("minimumElasticInstanceCount");
                }
            }
            if (Core.Optional.IsCollectionDefined(AzureStorageAccounts))
            {
                if (AzureStorageAccounts != null)
                {
                    writer.WritePropertyName("azureStorageAccounts"u8);
                    writer.WriteStartObject();
                    foreach (var item in AzureStorageAccounts)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteObjectValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("azureStorageAccounts");
                }
            }
            if (Core.Optional.IsDefined(PublicNetworkAccess))
            {
                if (PublicNetworkAccess != null)
                {
                    writer.WritePropertyName("publicNetworkAccess"u8);
                    writer.WriteStringValue(PublicNetworkAccess);
                }
                else
                {
                    writer.WriteNull("publicNetworkAccess");
                }
            }
            writer.WriteEndObject();
        }

        internal static SiteConfigProperties DeserializeSiteConfigProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<int?> numberOfWorkers = default;
            Core.Optional<IList<string>> defaultDocuments = default;
            Core.Optional<string> netFrameworkVersion = default;
            Core.Optional<string> phpVersion = default;
            Core.Optional<string> pythonVersion = default;
            Core.Optional<string> nodeVersion = default;
            Core.Optional<string> powerShellVersion = default;
            Core.Optional<string> linuxFxVersion = default;
            Core.Optional<string> windowsFxVersion = default;
            Core.Optional<bool?> requestTracingEnabled = default;
            Core.Optional<DateTimeOffset?> requestTracingExpirationTime = default;
            Core.Optional<bool?> remoteDebuggingEnabled = default;
            Core.Optional<string> remoteDebuggingVersion = default;
            Core.Optional<bool?> httpLoggingEnabled = default;
            Core.Optional<bool?> acrUseManagedIdentityCreds = default;
            Core.Optional<string> acrUserManagedIdentityId = default;
            Core.Optional<int?> logsDirectorySizeLimit = default;
            Core.Optional<bool?> detailedErrorLoggingEnabled = default;
            Core.Optional<string> publishingUsername = default;
            Core.Optional<IList<AppServiceNameValuePair>> appSettings = default;
            Core.Optional<IList<ConnStringInfo>> connectionStrings = default;
            Core.Optional<SiteMachineKey> machineKey = default;
            Core.Optional<IList<HttpRequestHandlerMapping>> handlerMappings = default;
            Core.Optional<string> documentRoot = default;
            Core.Optional<ScmType?> scmType = default;
            Core.Optional<bool?> use32BitWorkerProcess = default;
            Core.Optional<bool?> webSocketsEnabled = default;
            Core.Optional<bool?> alwaysOn = default;
            Core.Optional<string> javaVersion = default;
            Core.Optional<string> javaContainer = default;
            Core.Optional<string> javaContainerVersion = default;
            Core.Optional<string> appCommandLine = default;
            Core.Optional<ManagedPipelineMode?> managedPipelineMode = default;
            Core.Optional<IList<VirtualApplication>> virtualApplications = default;
            Core.Optional<SiteLoadBalancing?> loadBalancing = default;
            Core.Optional<RoutingRuleExperiments> experiments = default;
            Core.Optional<SiteLimits> limits = default;
            Core.Optional<bool?> autoHealEnabled = default;
            Core.Optional<AutoHealRules> autoHealRules = default;
            Core.Optional<string> tracingOptions = default;
            Core.Optional<string> vnetName = default;
            Core.Optional<bool?> vnetRouteAllEnabled = default;
            Core.Optional<int?> vnetPrivatePortsCount = default;
            Core.Optional<AppServiceCorsSettings> cors = default;
            Core.Optional<WebAppPushSettings> push = default;
            Core.Optional<AppServiceApiDefinitionInfo> apiDefinition = default;
            Core.Optional<ApiManagementConfig> apiManagementConfig = default;
            Core.Optional<string> autoSwapSlotName = default;
            Core.Optional<bool?> localMySqlEnabled = default;
            Core.Optional<int?> managedServiceIdentityId = default;
            Core.Optional<int?> xManagedServiceIdentityId = default;
            Core.Optional<string> keyVaultReferenceIdentity = default;
            Core.Optional<IList<AppServiceIPSecurityRestriction>> ipSecurityRestrictions = default;
            Core.Optional<IList<AppServiceIPSecurityRestriction>> scmIPSecurityRestrictions = default;
            Core.Optional<bool?> scmIPSecurityRestrictionsUseMain = default;
            Core.Optional<bool?> http20Enabled = default;
            Core.Optional<AppServiceSupportedTlsVersion?> minTlsVersion = default;
            Core.Optional<AppServiceSupportedTlsVersion?> scmMinTlsVersion = default;
            Core.Optional<AppServiceFtpsState?> ftpsState = default;
            Core.Optional<int?> preWarmedInstanceCount = default;
            Core.Optional<int?> functionAppScaleLimit = default;
            Core.Optional<string> healthCheckPath = default;
            Core.Optional<bool?> functionsRuntimeScaleMonitoringEnabled = default;
            Core.Optional<string> websiteTimeZone = default;
            Core.Optional<int?> minimumElasticInstanceCount = default;
            Core.Optional<IDictionary<string, AppServiceStorageAccessInfo>> azureStorageAccounts = default;
            Core.Optional<string> publicNetworkAccess = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("numberOfWorkers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        numberOfWorkers = null;
                        continue;
                    }
                    numberOfWorkers = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("defaultDocuments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        defaultDocuments = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    defaultDocuments = array;
                    continue;
                }
                if (property.NameEquals("netFrameworkVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        netFrameworkVersion = null;
                        continue;
                    }
                    netFrameworkVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("phpVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        phpVersion = null;
                        continue;
                    }
                    phpVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pythonVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        pythonVersion = null;
                        continue;
                    }
                    pythonVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nodeVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nodeVersion = null;
                        continue;
                    }
                    nodeVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("powerShellVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        powerShellVersion = null;
                        continue;
                    }
                    powerShellVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("linuxFxVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        linuxFxVersion = null;
                        continue;
                    }
                    linuxFxVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("windowsFxVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        windowsFxVersion = null;
                        continue;
                    }
                    windowsFxVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requestTracingEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        requestTracingEnabled = null;
                        continue;
                    }
                    requestTracingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("requestTracingExpirationTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        requestTracingExpirationTime = null;
                        continue;
                    }
                    requestTracingExpirationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("remoteDebuggingEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        remoteDebuggingEnabled = null;
                        continue;
                    }
                    remoteDebuggingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("remoteDebuggingVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        remoteDebuggingVersion = null;
                        continue;
                    }
                    remoteDebuggingVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("httpLoggingEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        httpLoggingEnabled = null;
                        continue;
                    }
                    httpLoggingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("acrUseManagedIdentityCreds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        acrUseManagedIdentityCreds = null;
                        continue;
                    }
                    acrUseManagedIdentityCreds = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("acrUserManagedIdentityID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        acrUserManagedIdentityId = null;
                        continue;
                    }
                    acrUserManagedIdentityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("logsDirectorySizeLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        logsDirectorySizeLimit = null;
                        continue;
                    }
                    logsDirectorySizeLimit = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("detailedErrorLoggingEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        detailedErrorLoggingEnabled = null;
                        continue;
                    }
                    detailedErrorLoggingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("publishingUsername"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        publishingUsername = null;
                        continue;
                    }
                    publishingUsername = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        appSettings = null;
                        continue;
                    }
                    List<AppServiceNameValuePair> array = new List<AppServiceNameValuePair>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AppServiceNameValuePair.DeserializeAppServiceNameValuePair(item));
                    }
                    appSettings = array;
                    continue;
                }
                if (property.NameEquals("connectionStrings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        connectionStrings = null;
                        continue;
                    }
                    List<ConnStringInfo> array = new List<ConnStringInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConnStringInfo.DeserializeConnStringInfo(item));
                    }
                    connectionStrings = array;
                    continue;
                }
                if (property.NameEquals("machineKey"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        machineKey = null;
                        continue;
                    }
                    machineKey = SiteMachineKey.DeserializeSiteMachineKey(property.Value);
                    continue;
                }
                if (property.NameEquals("handlerMappings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        handlerMappings = null;
                        continue;
                    }
                    List<HttpRequestHandlerMapping> array = new List<HttpRequestHandlerMapping>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HttpRequestHandlerMapping.DeserializeHttpRequestHandlerMapping(item));
                    }
                    handlerMappings = array;
                    continue;
                }
                if (property.NameEquals("documentRoot"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        documentRoot = null;
                        continue;
                    }
                    documentRoot = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scmType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scmType = null;
                        continue;
                    }
                    scmType = new ScmType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("use32BitWorkerProcess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        use32BitWorkerProcess = null;
                        continue;
                    }
                    use32BitWorkerProcess = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("webSocketsEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        webSocketsEnabled = null;
                        continue;
                    }
                    webSocketsEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("alwaysOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        alwaysOn = null;
                        continue;
                    }
                    alwaysOn = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("javaVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        javaVersion = null;
                        continue;
                    }
                    javaVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("javaContainer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        javaContainer = null;
                        continue;
                    }
                    javaContainer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("javaContainerVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        javaContainerVersion = null;
                        continue;
                    }
                    javaContainerVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appCommandLine"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        appCommandLine = null;
                        continue;
                    }
                    appCommandLine = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("managedPipelineMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        managedPipelineMode = null;
                        continue;
                    }
                    managedPipelineMode = property.Value.GetString().ToManagedPipelineMode();
                    continue;
                }
                if (property.NameEquals("virtualApplications"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        virtualApplications = null;
                        continue;
                    }
                    List<VirtualApplication> array = new List<VirtualApplication>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VirtualApplication.DeserializeVirtualApplication(item));
                    }
                    virtualApplications = array;
                    continue;
                }
                if (property.NameEquals("loadBalancing"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        loadBalancing = null;
                        continue;
                    }
                    loadBalancing = property.Value.GetString().ToSiteLoadBalancing();
                    continue;
                }
                if (property.NameEquals("experiments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        experiments = null;
                        continue;
                    }
                    experiments = RoutingRuleExperiments.DeserializeRoutingRuleExperiments(property.Value);
                    continue;
                }
                if (property.NameEquals("limits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        limits = null;
                        continue;
                    }
                    limits = SiteLimits.DeserializeSiteLimits(property.Value);
                    continue;
                }
                if (property.NameEquals("autoHealEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        autoHealEnabled = null;
                        continue;
                    }
                    autoHealEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("autoHealRules"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        autoHealRules = null;
                        continue;
                    }
                    autoHealRules = AutoHealRules.DeserializeAutoHealRules(property.Value);
                    continue;
                }
                if (property.NameEquals("tracingOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tracingOptions = null;
                        continue;
                    }
                    tracingOptions = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vnetName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        vnetName = null;
                        continue;
                    }
                    vnetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vnetRouteAllEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        vnetRouteAllEnabled = null;
                        continue;
                    }
                    vnetRouteAllEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("vnetPrivatePortsCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        vnetPrivatePortsCount = null;
                        continue;
                    }
                    vnetPrivatePortsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("cors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        cors = null;
                        continue;
                    }
                    cors = AppServiceCorsSettings.DeserializeAppServiceCorsSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("push"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        push = null;
                        continue;
                    }
                    push = WebAppPushSettings.DeserializeWebAppPushSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("apiDefinition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        apiDefinition = null;
                        continue;
                    }
                    apiDefinition = AppServiceApiDefinitionInfo.DeserializeAppServiceApiDefinitionInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("apiManagementConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        apiManagementConfig = null;
                        continue;
                    }
                    apiManagementConfig = ApiManagementConfig.DeserializeApiManagementConfig(property.Value);
                    continue;
                }
                if (property.NameEquals("autoSwapSlotName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        autoSwapSlotName = null;
                        continue;
                    }
                    autoSwapSlotName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("localMySqlEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        localMySqlEnabled = null;
                        continue;
                    }
                    localMySqlEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("managedServiceIdentityId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        managedServiceIdentityId = null;
                        continue;
                    }
                    managedServiceIdentityId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("xManagedServiceIdentityId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        xManagedServiceIdentityId = null;
                        continue;
                    }
                    xManagedServiceIdentityId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("keyVaultReferenceIdentity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keyVaultReferenceIdentity = null;
                        continue;
                    }
                    keyVaultReferenceIdentity = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipSecurityRestrictions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ipSecurityRestrictions = null;
                        continue;
                    }
                    List<AppServiceIPSecurityRestriction> array = new List<AppServiceIPSecurityRestriction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AppServiceIPSecurityRestriction.DeserializeAppServiceIPSecurityRestriction(item));
                    }
                    ipSecurityRestrictions = array;
                    continue;
                }
                if (property.NameEquals("scmIpSecurityRestrictions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scmIPSecurityRestrictions = null;
                        continue;
                    }
                    List<AppServiceIPSecurityRestriction> array = new List<AppServiceIPSecurityRestriction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AppServiceIPSecurityRestriction.DeserializeAppServiceIPSecurityRestriction(item));
                    }
                    scmIPSecurityRestrictions = array;
                    continue;
                }
                if (property.NameEquals("scmIpSecurityRestrictionsUseMain"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scmIPSecurityRestrictionsUseMain = null;
                        continue;
                    }
                    scmIPSecurityRestrictionsUseMain = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("http20Enabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        http20Enabled = null;
                        continue;
                    }
                    http20Enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("minTlsVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        minTlsVersion = null;
                        continue;
                    }
                    minTlsVersion = new AppServiceSupportedTlsVersion(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scmMinTlsVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scmMinTlsVersion = null;
                        continue;
                    }
                    scmMinTlsVersion = new AppServiceSupportedTlsVersion(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ftpsState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ftpsState = null;
                        continue;
                    }
                    ftpsState = new AppServiceFtpsState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("preWarmedInstanceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        preWarmedInstanceCount = null;
                        continue;
                    }
                    preWarmedInstanceCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("functionAppScaleLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        functionAppScaleLimit = null;
                        continue;
                    }
                    functionAppScaleLimit = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("healthCheckPath"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        healthCheckPath = null;
                        continue;
                    }
                    healthCheckPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("functionsRuntimeScaleMonitoringEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        functionsRuntimeScaleMonitoringEnabled = null;
                        continue;
                    }
                    functionsRuntimeScaleMonitoringEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("websiteTimeZone"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        websiteTimeZone = null;
                        continue;
                    }
                    websiteTimeZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minimumElasticInstanceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        minimumElasticInstanceCount = null;
                        continue;
                    }
                    minimumElasticInstanceCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("azureStorageAccounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        azureStorageAccounts = null;
                        continue;
                    }
                    Dictionary<string, AppServiceStorageAccessInfo> dictionary = new Dictionary<string, AppServiceStorageAccessInfo>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, AppServiceStorageAccessInfo.DeserializeAppServiceStorageAccessInfo(property0.Value));
                    }
                    azureStorageAccounts = dictionary;
                    continue;
                }
                if (property.NameEquals("publicNetworkAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        publicNetworkAccess = null;
                        continue;
                    }
                    publicNetworkAccess = property.Value.GetString();
                    continue;
                }
            }
            return new SiteConfigProperties(Core.Optional.ToNullable(numberOfWorkers), Core.Optional.ToList(defaultDocuments), netFrameworkVersion.Value, phpVersion.Value, pythonVersion.Value, nodeVersion.Value, powerShellVersion.Value, linuxFxVersion.Value, windowsFxVersion.Value, Core.Optional.ToNullable(requestTracingEnabled), Core.Optional.ToNullable(requestTracingExpirationTime), Core.Optional.ToNullable(remoteDebuggingEnabled), remoteDebuggingVersion.Value, Core.Optional.ToNullable(httpLoggingEnabled), Core.Optional.ToNullable(acrUseManagedIdentityCreds), acrUserManagedIdentityId.Value, Core.Optional.ToNullable(logsDirectorySizeLimit), Core.Optional.ToNullable(detailedErrorLoggingEnabled), publishingUsername.Value, Core.Optional.ToList(appSettings), Core.Optional.ToList(connectionStrings), machineKey.Value, Core.Optional.ToList(handlerMappings), documentRoot.Value, Core.Optional.ToNullable(scmType), Core.Optional.ToNullable(use32BitWorkerProcess), Core.Optional.ToNullable(webSocketsEnabled), Core.Optional.ToNullable(alwaysOn), javaVersion.Value, javaContainer.Value, javaContainerVersion.Value, appCommandLine.Value, Core.Optional.ToNullable(managedPipelineMode), Core.Optional.ToList(virtualApplications), Core.Optional.ToNullable(loadBalancing), experiments.Value, limits.Value, Core.Optional.ToNullable(autoHealEnabled), autoHealRules.Value, tracingOptions.Value, vnetName.Value, Core.Optional.ToNullable(vnetRouteAllEnabled), Core.Optional.ToNullable(vnetPrivatePortsCount), cors.Value, push.Value, apiDefinition.Value, apiManagementConfig.Value, autoSwapSlotName.Value, Core.Optional.ToNullable(localMySqlEnabled), Core.Optional.ToNullable(managedServiceIdentityId), Core.Optional.ToNullable(xManagedServiceIdentityId), keyVaultReferenceIdentity.Value, Core.Optional.ToList(ipSecurityRestrictions), Core.Optional.ToList(scmIPSecurityRestrictions), Core.Optional.ToNullable(scmIPSecurityRestrictionsUseMain), Core.Optional.ToNullable(http20Enabled), Core.Optional.ToNullable(minTlsVersion), Core.Optional.ToNullable(scmMinTlsVersion), Core.Optional.ToNullable(ftpsState), Core.Optional.ToNullable(preWarmedInstanceCount), Core.Optional.ToNullable(functionAppScaleLimit), healthCheckPath.Value, Core.Optional.ToNullable(functionsRuntimeScaleMonitoringEnabled), websiteTimeZone.Value, Core.Optional.ToNullable(minimumElasticInstanceCount), Core.Optional.ToDictionary(azureStorageAccounts), publicNetworkAccess.Value);
        }
    }
}
