// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// Represents a recommendation result generated by the recommendation engine.
    /// Serialized Name: Recommendation
    /// </summary>
    public partial class AppServiceRecommendation : ResourceData
    {
        /// <summary> Initializes a new instance of AppServiceRecommendation. </summary>
        public AppServiceRecommendation()
        {
            CategoryTags = new ChangeTrackingList<string>();
            States = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of AppServiceRecommendation. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="creationOn">
        /// Timestamp when this instance was created.
        /// Serialized Name: Recommendation.properties.creationTime
        /// </param>
        /// <param name="recommendationId">
        /// A GUID value that each recommendation object is associated with.
        /// Serialized Name: Recommendation.properties.recommendationId
        /// </param>
        /// <param name="resourceId">
        /// Full ARM resource ID string that this recommendation object is associated with.
        /// Serialized Name: Recommendation.properties.resourceId
        /// </param>
        /// <param name="resourceScope">
        /// Name of a resource type this recommendation applies, e.g. Subscription, ServerFarm, Site.
        /// Serialized Name: Recommendation.properties.resourceScope
        /// </param>
        /// <param name="ruleName">
        /// Unique name of the rule.
        /// Serialized Name: Recommendation.properties.ruleName
        /// </param>
        /// <param name="displayName">
        /// UI friendly name of the rule (may not be unique).
        /// Serialized Name: Recommendation.properties.displayName
        /// </param>
        /// <param name="message">
        /// Recommendation text.
        /// Serialized Name: Recommendation.properties.message
        /// </param>
        /// <param name="level">
        /// Level indicating how critical this recommendation can impact.
        /// Serialized Name: Recommendation.properties.level
        /// </param>
        /// <param name="channels">
        /// List of channels that this recommendation can apply.
        /// Serialized Name: Recommendation.properties.channels
        /// </param>
        /// <param name="categoryTags">
        /// The list of category tags that this recommendation belongs to.
        /// Serialized Name: Recommendation.properties.categoryTags
        /// </param>
        /// <param name="actionName">
        /// Name of action recommended by this object.
        /// Serialized Name: Recommendation.properties.actionName
        /// </param>
        /// <param name="enabled">
        /// True if this recommendation is still valid (i.e. &quot;actionable&quot;). False if it is invalid.
        /// Serialized Name: Recommendation.properties.enabled
        /// </param>
        /// <param name="states">
        /// The list of states of this recommendation. If it&apos;s null then it should be considered &quot;Active&quot;.
        /// Serialized Name: Recommendation.properties.states
        /// </param>
        /// <param name="startOn">
        /// The beginning time in UTC of a range that the recommendation refers to.
        /// Serialized Name: Recommendation.properties.startTime
        /// </param>
        /// <param name="endOn">
        /// The end time in UTC of a range that the recommendation refers to.
        /// Serialized Name: Recommendation.properties.endTime
        /// </param>
        /// <param name="nextNotificationOn">
        /// When to notify this recommendation next in UTC. Null means that this will never be notified anymore.
        /// Serialized Name: Recommendation.properties.nextNotificationTime
        /// </param>
        /// <param name="notificationExpirationOn">
        /// Date and time in UTC when this notification expires.
        /// Serialized Name: Recommendation.properties.notificationExpirationTime
        /// </param>
        /// <param name="notifiedOn">
        /// Last timestamp in UTC this instance was actually notified. Null means that this recommendation hasn&apos;t been notified yet.
        /// Serialized Name: Recommendation.properties.notifiedTime
        /// </param>
        /// <param name="score">
        /// A metric value measured by the rule.
        /// Serialized Name: Recommendation.properties.score
        /// </param>
        /// <param name="isDynamic">
        /// True if this is associated with a dynamically added rule
        /// Serialized Name: Recommendation.properties.isDynamic
        /// </param>
        /// <param name="extensionName">
        /// Extension name of the portal if exists.
        /// Serialized Name: Recommendation.properties.extensionName
        /// </param>
        /// <param name="bladeName">
        /// Deep link to a blade on the portal.
        /// Serialized Name: Recommendation.properties.bladeName
        /// </param>
        /// <param name="forwardLink">
        /// Forward link to an external document associated with the rule.
        /// Serialized Name: Recommendation.properties.forwardLink
        /// </param>
        /// <param name="kind">
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </param>
        internal AppServiceRecommendation(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, DateTimeOffset? creationOn, Guid? recommendationId, string resourceId, ResourceScopeType? resourceScope, string ruleName, string displayName, string message, NotificationLevel? level, Channel? channels, IReadOnlyList<string> categoryTags, string actionName, int? enabled, IList<string> states, DateTimeOffset? startOn, DateTimeOffset? endOn, DateTimeOffset? nextNotificationOn, DateTimeOffset? notificationExpirationOn, DateTimeOffset? notifiedOn, double? score, bool? isDynamic, string extensionName, string bladeName, string forwardLink, string kind) : base(id, name, resourceType, systemData)
        {
            CreationOn = creationOn;
            RecommendationId = recommendationId;
            ResourceId = resourceId;
            ResourceScope = resourceScope;
            RuleName = ruleName;
            DisplayName = displayName;
            Message = message;
            Level = level;
            Channels = channels;
            CategoryTags = categoryTags;
            ActionName = actionName;
            Enabled = enabled;
            States = states;
            StartOn = startOn;
            EndOn = endOn;
            NextNotificationOn = nextNotificationOn;
            NotificationExpirationOn = notificationExpirationOn;
            NotifiedOn = notifiedOn;
            Score = score;
            IsDynamic = isDynamic;
            ExtensionName = extensionName;
            BladeName = bladeName;
            ForwardLink = forwardLink;
            Kind = kind;
        }

        /// <summary>
        /// Timestamp when this instance was created.
        /// Serialized Name: Recommendation.properties.creationTime
        /// </summary>
        public DateTimeOffset? CreationOn { get; set; }
        /// <summary>
        /// A GUID value that each recommendation object is associated with.
        /// Serialized Name: Recommendation.properties.recommendationId
        /// </summary>
        public Guid? RecommendationId { get; set; }
        /// <summary>
        /// Full ARM resource ID string that this recommendation object is associated with.
        /// Serialized Name: Recommendation.properties.resourceId
        /// </summary>
        public string ResourceId { get; set; }
        /// <summary>
        /// Name of a resource type this recommendation applies, e.g. Subscription, ServerFarm, Site.
        /// Serialized Name: Recommendation.properties.resourceScope
        /// </summary>
        public ResourceScopeType? ResourceScope { get; set; }
        /// <summary>
        /// Unique name of the rule.
        /// Serialized Name: Recommendation.properties.ruleName
        /// </summary>
        public string RuleName { get; set; }
        /// <summary>
        /// UI friendly name of the rule (may not be unique).
        /// Serialized Name: Recommendation.properties.displayName
        /// </summary>
        public string DisplayName { get; set; }
        /// <summary>
        /// Recommendation text.
        /// Serialized Name: Recommendation.properties.message
        /// </summary>
        public string Message { get; set; }
        /// <summary>
        /// Level indicating how critical this recommendation can impact.
        /// Serialized Name: Recommendation.properties.level
        /// </summary>
        public NotificationLevel? Level { get; set; }
        /// <summary>
        /// List of channels that this recommendation can apply.
        /// Serialized Name: Recommendation.properties.channels
        /// </summary>
        public Channel? Channels { get; set; }
        /// <summary>
        /// The list of category tags that this recommendation belongs to.
        /// Serialized Name: Recommendation.properties.categoryTags
        /// </summary>
        public IReadOnlyList<string> CategoryTags { get; }
        /// <summary>
        /// Name of action recommended by this object.
        /// Serialized Name: Recommendation.properties.actionName
        /// </summary>
        public string ActionName { get; set; }
        /// <summary>
        /// True if this recommendation is still valid (i.e. &quot;actionable&quot;). False if it is invalid.
        /// Serialized Name: Recommendation.properties.enabled
        /// </summary>
        public int? Enabled { get; set; }
        /// <summary>
        /// The list of states of this recommendation. If it&apos;s null then it should be considered &quot;Active&quot;.
        /// Serialized Name: Recommendation.properties.states
        /// </summary>
        public IList<string> States { get; }
        /// <summary>
        /// The beginning time in UTC of a range that the recommendation refers to.
        /// Serialized Name: Recommendation.properties.startTime
        /// </summary>
        public DateTimeOffset? StartOn { get; set; }
        /// <summary>
        /// The end time in UTC of a range that the recommendation refers to.
        /// Serialized Name: Recommendation.properties.endTime
        /// </summary>
        public DateTimeOffset? EndOn { get; set; }
        /// <summary>
        /// When to notify this recommendation next in UTC. Null means that this will never be notified anymore.
        /// Serialized Name: Recommendation.properties.nextNotificationTime
        /// </summary>
        public DateTimeOffset? NextNotificationOn { get; set; }
        /// <summary>
        /// Date and time in UTC when this notification expires.
        /// Serialized Name: Recommendation.properties.notificationExpirationTime
        /// </summary>
        public DateTimeOffset? NotificationExpirationOn { get; set; }
        /// <summary>
        /// Last timestamp in UTC this instance was actually notified. Null means that this recommendation hasn&apos;t been notified yet.
        /// Serialized Name: Recommendation.properties.notifiedTime
        /// </summary>
        public DateTimeOffset? NotifiedOn { get; set; }
        /// <summary>
        /// A metric value measured by the rule.
        /// Serialized Name: Recommendation.properties.score
        /// </summary>
        public double? Score { get; set; }
        /// <summary>
        /// True if this is associated with a dynamically added rule
        /// Serialized Name: Recommendation.properties.isDynamic
        /// </summary>
        public bool? IsDynamic { get; set; }
        /// <summary>
        /// Extension name of the portal if exists.
        /// Serialized Name: Recommendation.properties.extensionName
        /// </summary>
        public string ExtensionName { get; set; }
        /// <summary>
        /// Deep link to a blade on the portal.
        /// Serialized Name: Recommendation.properties.bladeName
        /// </summary>
        public string BladeName { get; set; }
        /// <summary>
        /// Forward link to an external document associated with the rule.
        /// Serialized Name: Recommendation.properties.forwardLink
        /// </summary>
        public string ForwardLink { get; set; }
        /// <summary>
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </summary>
        public string Kind { get; set; }
    }
}
