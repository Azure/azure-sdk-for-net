// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class ContainerAppsConfiguration : IUtf8JsonSerializable, IJsonModel<ContainerAppsConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ContainerAppsConfiguration>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ContainerAppsConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerAppsConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerAppsConfiguration)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(DaprAIInstrumentationKey))
            {
                writer.WritePropertyName("daprAIInstrumentationKey"u8);
                writer.WriteStringValue(DaprAIInstrumentationKey);
            }
            if (Optional.IsDefined(PlatformReservedCidr))
            {
                writer.WritePropertyName("platformReservedCidr"u8);
                writer.WriteStringValue(PlatformReservedCidr);
            }
            if (Optional.IsDefined(PlatformReservedDnsIP))
            {
                writer.WritePropertyName("platformReservedDnsIP"u8);
                writer.WriteStringValue(PlatformReservedDnsIP);
            }
            if (Optional.IsDefined(ControlPlaneSubnetResourceId))
            {
                writer.WritePropertyName("controlPlaneSubnetResourceId"u8);
                writer.WriteStringValue(ControlPlaneSubnetResourceId);
            }
            if (Optional.IsDefined(AppSubnetResourceId))
            {
                writer.WritePropertyName("appSubnetResourceId"u8);
                writer.WriteStringValue(AppSubnetResourceId);
            }
            if (Optional.IsDefined(DockerBridgeCidr))
            {
                writer.WritePropertyName("dockerBridgeCidr"u8);
                writer.WriteStringValue(DockerBridgeCidr);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ContainerAppsConfiguration IJsonModel<ContainerAppsConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerAppsConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContainerAppsConfiguration)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContainerAppsConfiguration(document.RootElement, options);
        }

        internal static ContainerAppsConfiguration DeserializeContainerAppsConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string daprAIInstrumentationKey = default;
            string platformReservedCidr = default;
            string platformReservedDnsIP = default;
            string controlPlaneSubnetResourceId = default;
            string appSubnetResourceId = default;
            string dockerBridgeCidr = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("daprAIInstrumentationKey"u8))
                {
                    daprAIInstrumentationKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("platformReservedCidr"u8))
                {
                    platformReservedCidr = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("platformReservedDnsIP"u8))
                {
                    platformReservedDnsIP = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controlPlaneSubnetResourceId"u8))
                {
                    controlPlaneSubnetResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appSubnetResourceId"u8))
                {
                    appSubnetResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dockerBridgeCidr"u8))
                {
                    dockerBridgeCidr = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ContainerAppsConfiguration(
                daprAIInstrumentationKey,
                platformReservedCidr,
                platformReservedDnsIP,
                controlPlaneSubnetResourceId,
                appSubnetResourceId,
                dockerBridgeCidr,
                serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DaprAIInstrumentationKey), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  daprAIInstrumentationKey: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(DaprAIInstrumentationKey))
                {
                    builder.Append("  daprAIInstrumentationKey: ");
                    if (DaprAIInstrumentationKey.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{DaprAIInstrumentationKey}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{DaprAIInstrumentationKey}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PlatformReservedCidr), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  platformReservedCidr: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PlatformReservedCidr))
                {
                    builder.Append("  platformReservedCidr: ");
                    if (PlatformReservedCidr.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{PlatformReservedCidr}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{PlatformReservedCidr}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PlatformReservedDnsIP), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  platformReservedDnsIP: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PlatformReservedDnsIP))
                {
                    builder.Append("  platformReservedDnsIP: ");
                    if (PlatformReservedDnsIP.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{PlatformReservedDnsIP}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{PlatformReservedDnsIP}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ControlPlaneSubnetResourceId), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  controlPlaneSubnetResourceId: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ControlPlaneSubnetResourceId))
                {
                    builder.Append("  controlPlaneSubnetResourceId: ");
                    if (ControlPlaneSubnetResourceId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{ControlPlaneSubnetResourceId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{ControlPlaneSubnetResourceId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AppSubnetResourceId), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  appSubnetResourceId: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(AppSubnetResourceId))
                {
                    builder.Append("  appSubnetResourceId: ");
                    if (AppSubnetResourceId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{AppSubnetResourceId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{AppSubnetResourceId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DockerBridgeCidr), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  dockerBridgeCidr: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(DockerBridgeCidr))
                {
                    builder.Append("  dockerBridgeCidr: ");
                    if (DockerBridgeCidr.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{DockerBridgeCidr}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{DockerBridgeCidr}'");
                    }
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        BinaryData IPersistableModel<ContainerAppsConfiguration>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerAppsConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ContainerAppsConfiguration)} does not support writing '{options.Format}' format.");
            }
        }

        ContainerAppsConfiguration IPersistableModel<ContainerAppsConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ContainerAppsConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeContainerAppsConfiguration(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ContainerAppsConfiguration)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ContainerAppsConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
