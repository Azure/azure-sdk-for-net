// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class StampCapacity
    {
        internal static StampCapacity DeserializeStampCapacity(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<long> availableCapacity = default;
            Optional<long> totalCapacity = default;
            Optional<string> unit = default;
            Optional<ComputeModeOption> computeMode = default;
            Optional<WorkerSizeOption> workerSize = default;
            Optional<int> workerSizeId = default;
            Optional<bool> excludeFromCapacityAllocation = default;
            Optional<bool> isApplicableForAllComputeModes = default;
            Optional<string> siteMode = default;
            Optional<bool> isLinux = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("availableCapacity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableCapacity = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalCapacity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalCapacity = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("unit"u8))
                {
                    unit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("computeMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    computeMode = property.Value.GetString().ToComputeModeOption();
                    continue;
                }
                if (property.NameEquals("workerSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    workerSize = property.Value.GetString().ToWorkerSizeOption();
                    continue;
                }
                if (property.NameEquals("workerSizeId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    workerSizeId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("excludeFromCapacityAllocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    excludeFromCapacityAllocation = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isApplicableForAllComputeModes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isApplicableForAllComputeModes = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("siteMode"u8))
                {
                    siteMode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isLinux"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isLinux = property.Value.GetBoolean();
                    continue;
                }
            }
            return new StampCapacity(name.Value, Optional.ToNullable(availableCapacity), Optional.ToNullable(totalCapacity), unit.Value, Optional.ToNullable(computeMode), Optional.ToNullable(workerSize), Optional.ToNullable(workerSizeId), Optional.ToNullable(excludeFromCapacityAllocation), Optional.ToNullable(isApplicableForAllComputeModes), siteMode.Value, Optional.ToNullable(isLinux));
        }
    }
}
