// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class AppServiceDomainPatch : IUtf8JsonSerializable, IJsonModel<AppServiceDomainPatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AppServiceDomainPatch>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AppServiceDomainPatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AppServiceDomainPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AppServiceDomainPatch)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(ContactAdmin))
            {
                writer.WritePropertyName("contactAdmin"u8);
                writer.WriteObjectValue(ContactAdmin, options);
            }
            if (Optional.IsDefined(ContactBilling))
            {
                writer.WritePropertyName("contactBilling"u8);
                writer.WriteObjectValue(ContactBilling, options);
            }
            if (Optional.IsDefined(ContactRegistrant))
            {
                writer.WritePropertyName("contactRegistrant"u8);
                writer.WriteObjectValue(ContactRegistrant, options);
            }
            if (Optional.IsDefined(ContactTech))
            {
                writer.WritePropertyName("contactTech"u8);
                writer.WriteObjectValue(ContactTech, options);
            }
            if (options.Format != "W" && Optional.IsDefined(RegistrationStatus))
            {
                writer.WritePropertyName("registrationStatus"u8);
                writer.WriteStringValue(RegistrationStatus.Value.ToSerialString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToSerialString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(NameServers))
            {
                writer.WritePropertyName("nameServers"u8);
                writer.WriteStartArray();
                foreach (var item in NameServers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsDomainPrivacyEnabled))
            {
                writer.WritePropertyName("privacy"u8);
                writer.WriteBooleanValue(IsDomainPrivacyEnabled.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("createdTime"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ExpireOn))
            {
                writer.WritePropertyName("expirationTime"u8);
                writer.WriteStringValue(ExpireOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastRenewedOn))
            {
                writer.WritePropertyName("lastRenewedTime"u8);
                writer.WriteStringValue(LastRenewedOn.Value, "O");
            }
            if (Optional.IsDefined(IsAutoRenew))
            {
                writer.WritePropertyName("autoRenew"u8);
                writer.WriteBooleanValue(IsAutoRenew.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IsReadyForDnsRecordManagement))
            {
                writer.WritePropertyName("readyForDnsRecordManagement"u8);
                writer.WriteBooleanValue(IsReadyForDnsRecordManagement.Value);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ManagedHostNames))
            {
                writer.WritePropertyName("managedHostNames"u8);
                writer.WriteStartArray();
                foreach (var item in ManagedHostNames)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Consent))
            {
                writer.WritePropertyName("consent"u8);
                writer.WriteObjectValue(Consent, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DomainNotRenewableReasons))
            {
                writer.WritePropertyName("domainNotRenewableReasons"u8);
                writer.WriteStartArray();
                foreach (var item in DomainNotRenewableReasons)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DnsType))
            {
                writer.WritePropertyName("dnsType"u8);
                writer.WriteStringValue(DnsType.Value.ToSerialString());
            }
            if (Optional.IsDefined(DnsZoneId))
            {
                writer.WritePropertyName("dnsZoneId"u8);
                writer.WriteStringValue(DnsZoneId);
            }
            if (Optional.IsDefined(TargetDnsType))
            {
                writer.WritePropertyName("targetDnsType"u8);
                writer.WriteStringValue(TargetDnsType.Value.ToSerialString());
            }
            if (Optional.IsDefined(AuthCode))
            {
                writer.WritePropertyName("authCode"u8);
                writer.WriteStringValue(AuthCode);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AppServiceDomainPatch IJsonModel<AppServiceDomainPatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AppServiceDomainPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AppServiceDomainPatch)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAppServiceDomainPatch(document.RootElement, options);
        }

        internal static AppServiceDomainPatch DeserializeAppServiceDomainPatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            RegistrationContactInfo contactAdmin = default;
            RegistrationContactInfo contactBilling = default;
            RegistrationContactInfo contactRegistrant = default;
            RegistrationContactInfo contactTech = default;
            AppServiceDomainStatus? registrationStatus = default;
            ProvisioningState? provisioningState = default;
            IReadOnlyList<string> nameServers = default;
            bool? privacy = default;
            DateTimeOffset? createdTime = default;
            DateTimeOffset? expirationTime = default;
            DateTimeOffset? lastRenewedTime = default;
            bool? autoRenew = default;
            bool? readyForDnsRecordManagement = default;
            IReadOnlyList<AppServiceHostName> managedHostNames = default;
            DomainPurchaseConsent consent = default;
            IReadOnlyList<DomainNotRenewableReason> domainNotRenewableReasons = default;
            AppServiceDnsType? dnsType = default;
            string dnsZoneId = default;
            AppServiceDnsType? targetDnsType = default;
            string authCode = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("contactAdmin"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contactAdmin = RegistrationContactInfo.DeserializeRegistrationContactInfo(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("contactBilling"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contactBilling = RegistrationContactInfo.DeserializeRegistrationContactInfo(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("contactRegistrant"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contactRegistrant = RegistrationContactInfo.DeserializeRegistrationContactInfo(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("contactTech"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contactTech = RegistrationContactInfo.DeserializeRegistrationContactInfo(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("registrationStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            registrationStatus = property0.Value.GetString().ToAppServiceDomainStatus();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = property0.Value.GetString().ToProvisioningState();
                            continue;
                        }
                        if (property0.NameEquals("nameServers"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            nameServers = array;
                            continue;
                        }
                        if (property0.NameEquals("privacy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            privacy = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("createdTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("expirationTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            expirationTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastRenewedTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastRenewedTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("autoRenew"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            autoRenew = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("readyForDnsRecordManagement"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            readyForDnsRecordManagement = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("managedHostNames"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AppServiceHostName> array = new List<AppServiceHostName>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AppServiceHostName.DeserializeAppServiceHostName(item, options));
                            }
                            managedHostNames = array;
                            continue;
                        }
                        if (property0.NameEquals("consent"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            consent = DomainPurchaseConsent.DeserializeDomainPurchaseConsent(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("domainNotRenewableReasons"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<DomainNotRenewableReason> array = new List<DomainNotRenewableReason>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new DomainNotRenewableReason(item.GetString()));
                            }
                            domainNotRenewableReasons = array;
                            continue;
                        }
                        if (property0.NameEquals("dnsType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dnsType = property0.Value.GetString().ToAppServiceDnsType();
                            continue;
                        }
                        if (property0.NameEquals("dnsZoneId"u8))
                        {
                            dnsZoneId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("targetDnsType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            targetDnsType = property0.Value.GetString().ToAppServiceDnsType();
                            continue;
                        }
                        if (property0.NameEquals("authCode"u8))
                        {
                            authCode = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AppServiceDomainPatch(
                id,
                name,
                type,
                systemData,
                contactAdmin,
                contactBilling,
                contactRegistrant,
                contactTech,
                registrationStatus,
                provisioningState,
                nameServers ?? new ChangeTrackingList<string>(),
                privacy,
                createdTime,
                expirationTime,
                lastRenewedTime,
                autoRenew,
                readyForDnsRecordManagement,
                managedHostNames ?? new ChangeTrackingList<AppServiceHostName>(),
                consent,
                domainNotRenewableReasons ?? new ChangeTrackingList<DomainNotRenewableReason>(),
                dnsType,
                dnsZoneId,
                targetDnsType,
                authCode,
                kind,
                serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Name), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  name: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Name))
                {
                    builder.Append("  name: ");
                    if (Name.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Name}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Name}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Kind), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  kind: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Kind))
                {
                    builder.Append("  kind: ");
                    if (Kind.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Kind}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Kind}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Id), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  id: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Id))
                {
                    builder.Append("  id: ");
                    builder.AppendLine($"'{Id.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SystemData), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  systemData: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SystemData))
                {
                    builder.Append("  systemData: ");
                    builder.AppendLine($"'{SystemData.ToString()}'");
                }
            }

            builder.Append("  properties:");
            builder.AppendLine(" {");
            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ContactAdmin), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    contactAdmin: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ContactAdmin))
                {
                    builder.Append("    contactAdmin: ");
                    BicepSerializationHelpers.AppendChildObject(builder, ContactAdmin, options, 4, false, "    contactAdmin: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ContactBilling), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    contactBilling: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ContactBilling))
                {
                    builder.Append("    contactBilling: ");
                    BicepSerializationHelpers.AppendChildObject(builder, ContactBilling, options, 4, false, "    contactBilling: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ContactRegistrant), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    contactRegistrant: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ContactRegistrant))
                {
                    builder.Append("    contactRegistrant: ");
                    BicepSerializationHelpers.AppendChildObject(builder, ContactRegistrant, options, 4, false, "    contactRegistrant: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ContactTech), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    contactTech: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ContactTech))
                {
                    builder.Append("    contactTech: ");
                    BicepSerializationHelpers.AppendChildObject(builder, ContactTech, options, 4, false, "    contactTech: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RegistrationStatus), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    registrationStatus: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(RegistrationStatus))
                {
                    builder.Append("    registrationStatus: ");
                    builder.AppendLine($"'{RegistrationStatus.Value.ToSerialString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ProvisioningState), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    provisioningState: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ProvisioningState))
                {
                    builder.Append("    provisioningState: ");
                    builder.AppendLine($"'{ProvisioningState.Value.ToSerialString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(NameServers), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    nameServers: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(NameServers))
                {
                    if (NameServers.Any())
                    {
                        builder.Append("    nameServers: ");
                        builder.AppendLine("[");
                        foreach (var item in NameServers)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("      '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"      '{item}'");
                            }
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsDomainPrivacyEnabled), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    privacy: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(IsDomainPrivacyEnabled))
                {
                    builder.Append("    privacy: ");
                    var boolValue = IsDomainPrivacyEnabled.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(CreatedOn), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    createdTime: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(CreatedOn))
                {
                    builder.Append("    createdTime: ");
                    var formattedDateTimeString = TypeFormatters.ToString(CreatedOn.Value, "o");
                    builder.AppendLine($"'{formattedDateTimeString}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ExpireOn), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    expirationTime: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ExpireOn))
                {
                    builder.Append("    expirationTime: ");
                    var formattedDateTimeString = TypeFormatters.ToString(ExpireOn.Value, "o");
                    builder.AppendLine($"'{formattedDateTimeString}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(LastRenewedOn), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    lastRenewedTime: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(LastRenewedOn))
                {
                    builder.Append("    lastRenewedTime: ");
                    var formattedDateTimeString = TypeFormatters.ToString(LastRenewedOn.Value, "o");
                    builder.AppendLine($"'{formattedDateTimeString}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsAutoRenew), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    autoRenew: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(IsAutoRenew))
                {
                    builder.Append("    autoRenew: ");
                    var boolValue = IsAutoRenew.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(IsReadyForDnsRecordManagement), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    readyForDnsRecordManagement: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(IsReadyForDnsRecordManagement))
                {
                    builder.Append("    readyForDnsRecordManagement: ");
                    var boolValue = IsReadyForDnsRecordManagement.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ManagedHostNames), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    managedHostNames: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(ManagedHostNames))
                {
                    if (ManagedHostNames.Any())
                    {
                        builder.Append("    managedHostNames: ");
                        builder.AppendLine("[");
                        foreach (var item in ManagedHostNames)
                        {
                            BicepSerializationHelpers.AppendChildObject(builder, item, options, 6, true, "    managedHostNames: ");
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Consent), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    consent: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Consent))
                {
                    builder.Append("    consent: ");
                    BicepSerializationHelpers.AppendChildObject(builder, Consent, options, 4, false, "    consent: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DomainNotRenewableReasons), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    domainNotRenewableReasons: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(DomainNotRenewableReasons))
                {
                    if (DomainNotRenewableReasons.Any())
                    {
                        builder.Append("    domainNotRenewableReasons: ");
                        builder.AppendLine("[");
                        foreach (var item in DomainNotRenewableReasons)
                        {
                            builder.AppendLine($"      '{item.ToString()}'");
                        }
                        builder.AppendLine("    ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DnsType), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    dnsType: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(DnsType))
                {
                    builder.Append("    dnsType: ");
                    builder.AppendLine($"'{DnsType.Value.ToSerialString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DnsZoneId), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    dnsZoneId: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(DnsZoneId))
                {
                    builder.Append("    dnsZoneId: ");
                    if (DnsZoneId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{DnsZoneId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{DnsZoneId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TargetDnsType), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    targetDnsType: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(TargetDnsType))
                {
                    builder.Append("    targetDnsType: ");
                    builder.AppendLine($"'{TargetDnsType.Value.ToSerialString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AuthCode), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    authCode: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(AuthCode))
                {
                    builder.Append("    authCode: ");
                    if (AuthCode.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{AuthCode}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{AuthCode}'");
                    }
                }
            }

            builder.AppendLine("  }");
            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        BinaryData IPersistableModel<AppServiceDomainPatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AppServiceDomainPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(AppServiceDomainPatch)} does not support writing '{options.Format}' format.");
            }
        }

        AppServiceDomainPatch IPersistableModel<AppServiceDomainPatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AppServiceDomainPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAppServiceDomainPatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AppServiceDomainPatch)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AppServiceDomainPatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
