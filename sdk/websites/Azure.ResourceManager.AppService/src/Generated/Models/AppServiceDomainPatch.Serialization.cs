// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class AppServiceDomainPatch : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ContactAdmin))
            {
                writer.WritePropertyName("contactAdmin"u8);
                writer.WriteObjectValue(ContactAdmin);
            }
            if (Core.Optional.IsDefined(ContactBilling))
            {
                writer.WritePropertyName("contactBilling"u8);
                writer.WriteObjectValue(ContactBilling);
            }
            if (Core.Optional.IsDefined(ContactRegistrant))
            {
                writer.WritePropertyName("contactRegistrant"u8);
                writer.WriteObjectValue(ContactRegistrant);
            }
            if (Core.Optional.IsDefined(ContactTech))
            {
                writer.WritePropertyName("contactTech"u8);
                writer.WriteObjectValue(ContactTech);
            }
            if (Core.Optional.IsDefined(IsDomainPrivacyEnabled))
            {
                writer.WritePropertyName("privacy"u8);
                writer.WriteBooleanValue(IsDomainPrivacyEnabled.Value);
            }
            if (Core.Optional.IsDefined(IsAutoRenew))
            {
                writer.WritePropertyName("autoRenew"u8);
                writer.WriteBooleanValue(IsAutoRenew.Value);
            }
            if (Core.Optional.IsDefined(Consent))
            {
                writer.WritePropertyName("consent"u8);
                writer.WriteObjectValue(Consent);
            }
            if (Core.Optional.IsDefined(DnsType))
            {
                writer.WritePropertyName("dnsType"u8);
                writer.WriteStringValue(DnsType.Value.ToSerialString());
            }
            if (Core.Optional.IsDefined(DnsZoneId))
            {
                writer.WritePropertyName("dnsZoneId"u8);
                writer.WriteStringValue(DnsZoneId);
            }
            if (Core.Optional.IsDefined(TargetDnsType))
            {
                writer.WritePropertyName("targetDnsType"u8);
                writer.WriteStringValue(TargetDnsType.Value.ToSerialString());
            }
            if (Core.Optional.IsDefined(AuthCode))
            {
                writer.WritePropertyName("authCode"u8);
                writer.WriteStringValue(AuthCode);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static AppServiceDomainPatch DeserializeAppServiceDomainPatch(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<RegistrationContactInfo> contactAdmin = default;
            Core.Optional<RegistrationContactInfo> contactBilling = default;
            Core.Optional<RegistrationContactInfo> contactRegistrant = default;
            Core.Optional<RegistrationContactInfo> contactTech = default;
            Core.Optional<AppServiceDomainStatus> registrationStatus = default;
            Core.Optional<ProvisioningState> provisioningState = default;
            Core.Optional<IReadOnlyList<string>> nameServers = default;
            Core.Optional<bool> privacy = default;
            Core.Optional<DateTimeOffset> createdTime = default;
            Core.Optional<DateTimeOffset> expirationTime = default;
            Core.Optional<DateTimeOffset> lastRenewedTime = default;
            Core.Optional<bool> autoRenew = default;
            Core.Optional<bool> readyForDnsRecordManagement = default;
            Core.Optional<IReadOnlyList<AppServiceHostName>> managedHostNames = default;
            Core.Optional<DomainPurchaseConsent> consent = default;
            Core.Optional<IReadOnlyList<DomainNotRenewableReason>> domainNotRenewableReasons = default;
            Core.Optional<AppServiceDnsType> dnsType = default;
            Core.Optional<string> dnsZoneId = default;
            Core.Optional<AppServiceDnsType> targetDnsType = default;
            Core.Optional<string> authCode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("contactAdmin"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contactAdmin = RegistrationContactInfo.DeserializeRegistrationContactInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("contactBilling"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contactBilling = RegistrationContactInfo.DeserializeRegistrationContactInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("contactRegistrant"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contactRegistrant = RegistrationContactInfo.DeserializeRegistrationContactInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("contactTech"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contactTech = RegistrationContactInfo.DeserializeRegistrationContactInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("registrationStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            registrationStatus = property0.Value.GetString().ToAppServiceDomainStatus();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = property0.Value.GetString().ToProvisioningState();
                            continue;
                        }
                        if (property0.NameEquals("nameServers"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            nameServers = array;
                            continue;
                        }
                        if (property0.NameEquals("privacy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            privacy = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("createdTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("expirationTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            expirationTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastRenewedTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastRenewedTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("autoRenew"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            autoRenew = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("readyForDnsRecordManagement"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            readyForDnsRecordManagement = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("managedHostNames"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AppServiceHostName> array = new List<AppServiceHostName>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AppServiceHostName.DeserializeAppServiceHostName(item));
                            }
                            managedHostNames = array;
                            continue;
                        }
                        if (property0.NameEquals("consent"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            consent = DomainPurchaseConsent.DeserializeDomainPurchaseConsent(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("domainNotRenewableReasons"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<DomainNotRenewableReason> array = new List<DomainNotRenewableReason>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new DomainNotRenewableReason(item.GetString()));
                            }
                            domainNotRenewableReasons = array;
                            continue;
                        }
                        if (property0.NameEquals("dnsType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dnsType = property0.Value.GetString().ToAppServiceDnsType();
                            continue;
                        }
                        if (property0.NameEquals("dnsZoneId"u8))
                        {
                            dnsZoneId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("targetDnsType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            targetDnsType = property0.Value.GetString().ToAppServiceDnsType();
                            continue;
                        }
                        if (property0.NameEquals("authCode"u8))
                        {
                            authCode = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new AppServiceDomainPatch(id, name, type, systemData.Value, contactAdmin.Value, contactBilling.Value, contactRegistrant.Value, contactTech.Value, Core.Optional.ToNullable(registrationStatus), Core.Optional.ToNullable(provisioningState), Core.Optional.ToList(nameServers), Core.Optional.ToNullable(privacy), Core.Optional.ToNullable(createdTime), Core.Optional.ToNullable(expirationTime), Core.Optional.ToNullable(lastRenewedTime), Core.Optional.ToNullable(autoRenew), Core.Optional.ToNullable(readyForDnsRecordManagement), Core.Optional.ToList(managedHostNames), consent.Value, Core.Optional.ToList(domainNotRenewableReasons), Core.Optional.ToNullable(dnsType), dnsZoneId.Value, Core.Optional.ToNullable(targetDnsType), authCode.Value, kind.Value);
        }
    }
}
