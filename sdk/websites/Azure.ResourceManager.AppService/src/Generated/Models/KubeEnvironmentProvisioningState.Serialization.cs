// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class KubeEnvironmentProvisioningStateExtensions
    {
        public static string ToSerialString(this KubeEnvironmentProvisioningState value) => value switch
        {
            KubeEnvironmentProvisioningState.Succeeded => "Succeeded",
            KubeEnvironmentProvisioningState.Failed => "Failed",
            KubeEnvironmentProvisioningState.Canceled => "Canceled",
            KubeEnvironmentProvisioningState.Waiting => "Waiting",
            KubeEnvironmentProvisioningState.InitializationInProgress => "InitializationInProgress",
            KubeEnvironmentProvisioningState.InfrastructureSetupInProgress => "InfrastructureSetupInProgress",
            KubeEnvironmentProvisioningState.InfrastructureSetupComplete => "InfrastructureSetupComplete",
            KubeEnvironmentProvisioningState.ScheduledForDelete => "ScheduledForDelete",
            KubeEnvironmentProvisioningState.UpgradeRequested => "UpgradeRequested",
            KubeEnvironmentProvisioningState.UpgradeFailed => "UpgradeFailed",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown KubeEnvironmentProvisioningState value.")
        };

        public static KubeEnvironmentProvisioningState ToKubeEnvironmentProvisioningState(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Succeeded")) return KubeEnvironmentProvisioningState.Succeeded;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Failed")) return KubeEnvironmentProvisioningState.Failed;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Canceled")) return KubeEnvironmentProvisioningState.Canceled;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Waiting")) return KubeEnvironmentProvisioningState.Waiting;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InitializationInProgress")) return KubeEnvironmentProvisioningState.InitializationInProgress;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InfrastructureSetupInProgress")) return KubeEnvironmentProvisioningState.InfrastructureSetupInProgress;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InfrastructureSetupComplete")) return KubeEnvironmentProvisioningState.InfrastructureSetupComplete;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ScheduledForDelete")) return KubeEnvironmentProvisioningState.ScheduledForDelete;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UpgradeRequested")) return KubeEnvironmentProvisioningState.UpgradeRequested;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UpgradeFailed")) return KubeEnvironmentProvisioningState.UpgradeFailed;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown KubeEnvironmentProvisioningState value.");
        }
    }
}
