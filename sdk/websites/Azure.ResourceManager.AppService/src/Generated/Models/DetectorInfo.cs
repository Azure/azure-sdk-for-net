// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Definition of Detector. </summary>
    public partial class DetectorInfo
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DetectorInfo"/>. </summary>
        public DetectorInfo()
        {
            SupportTopicList = new ChangeTrackingList<DetectorSupportTopic>();
            AnalysisType = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="DetectorInfo"/>. </summary>
        /// <param name="id"> Id of detector. </param>
        /// <param name="name"> Name of detector. </param>
        /// <param name="description"> Short description of the detector and its purpose. </param>
        /// <param name="author"> Author of the detector. </param>
        /// <param name="category"> Problem category. This serves for organizing group for detectors. </param>
        /// <param name="supportTopicList"> List of Support Topics for which this detector is enabled. </param>
        /// <param name="analysisType"> Analysis Types for which this detector should apply to. </param>
        /// <param name="detectorType"> Whether this detector is an Analysis Detector or not. </param>
        /// <param name="score"> Defines score of a detector to power ML based matching. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DetectorInfo(string id, string name, string description, string author, string category, IReadOnlyList<DetectorSupportTopic> supportTopicList, IReadOnlyList<string> analysisType, DetectorType? detectorType, float? score, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Name = name;
            Description = description;
            Author = author;
            Category = category;
            SupportTopicList = supportTopicList;
            AnalysisType = analysisType;
            DetectorType = detectorType;
            Score = score;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Id of detector. </summary>
        public string Id { get; }
        /// <summary> Name of detector. </summary>
        public string Name { get; }
        /// <summary> Short description of the detector and its purpose. </summary>
        public string Description { get; }
        /// <summary> Author of the detector. </summary>
        public string Author { get; }
        /// <summary> Problem category. This serves for organizing group for detectors. </summary>
        public string Category { get; }
        /// <summary> List of Support Topics for which this detector is enabled. </summary>
        public IReadOnlyList<DetectorSupportTopic> SupportTopicList { get; }
        /// <summary> Analysis Types for which this detector should apply to. </summary>
        public IReadOnlyList<string> AnalysisType { get; }
        /// <summary> Whether this detector is an Analysis Detector or not. </summary>
        public DetectorType? DetectorType { get; }
        /// <summary> Defines score of a detector to power ML based matching. </summary>
        public float? Score { get; }
    }
}
