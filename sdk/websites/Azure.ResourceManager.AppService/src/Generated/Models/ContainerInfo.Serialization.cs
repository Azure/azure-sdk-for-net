// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class ContainerInfo : IUtf8JsonSerializable, IModelJsonSerializable<ContainerInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ContainerInfo>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ContainerInfo>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ContainerInfo>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(CurrentTimeStamp))
            {
                writer.WritePropertyName("currentTimeStamp"u8);
                writer.WriteStringValue(CurrentTimeStamp.Value, "O");
            }
            if (Optional.IsDefined(PreviousTimeStamp))
            {
                writer.WritePropertyName("previousTimeStamp"u8);
                writer.WriteStringValue(PreviousTimeStamp.Value, "O");
            }
            if (Optional.IsDefined(CurrentCpuStats))
            {
                writer.WritePropertyName("currentCpuStats"u8);
                if (CurrentCpuStats is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ContainerCpuStatistics>)CurrentCpuStats).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(PreviousCpuStats))
            {
                writer.WritePropertyName("previousCpuStats"u8);
                if (PreviousCpuStats is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ContainerCpuStatistics>)PreviousCpuStats).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(MemoryStats))
            {
                writer.WritePropertyName("memoryStats"u8);
                if (MemoryStats is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ContainerMemoryStatistics>)MemoryStats).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(Eth0))
            {
                writer.WritePropertyName("eth0"u8);
                if (Eth0 is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ContainerNetworkInterfaceStatistics>)Eth0).Serialize(writer, options);
                }
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ContainerInfo DeserializeContainerInfo(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DateTimeOffset> currentTimeStamp = default;
            Optional<DateTimeOffset> previousTimeStamp = default;
            Optional<ContainerCpuStatistics> currentCpuStats = default;
            Optional<ContainerCpuStatistics> previousCpuStats = default;
            Optional<ContainerMemoryStatistics> memoryStats = default;
            Optional<string> name = default;
            Optional<string> id = default;
            Optional<ContainerNetworkInterfaceStatistics> eth0 = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("currentTimeStamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentTimeStamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("previousTimeStamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    previousTimeStamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("currentCpuStats"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentCpuStats = ContainerCpuStatistics.DeserializeContainerCpuStatistics(property.Value);
                    continue;
                }
                if (property.NameEquals("previousCpuStats"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    previousCpuStats = ContainerCpuStatistics.DeserializeContainerCpuStatistics(property.Value);
                    continue;
                }
                if (property.NameEquals("memoryStats"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memoryStats = ContainerMemoryStatistics.DeserializeContainerMemoryStatistics(property.Value);
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eth0"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    eth0 = ContainerNetworkInterfaceStatistics.DeserializeContainerNetworkInterfaceStatistics(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ContainerInfo(Optional.ToNullable(currentTimeStamp), Optional.ToNullable(previousTimeStamp), currentCpuStats.Value, previousCpuStats.Value, memoryStats.Value, name.Value, id.Value, eth0.Value, rawData);
        }

        ContainerInfo IModelJsonSerializable<ContainerInfo>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ContainerInfo>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeContainerInfo(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ContainerInfo>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ContainerInfo>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ContainerInfo IModelSerializable<ContainerInfo>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ContainerInfo>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeContainerInfo(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="ContainerInfo"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="ContainerInfo"/> to convert. </param>
        public static implicit operator RequestContent(ContainerInfo model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="ContainerInfo"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator ContainerInfo(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeContainerInfo(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
