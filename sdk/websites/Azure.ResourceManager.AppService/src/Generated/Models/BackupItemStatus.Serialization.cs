// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class BackupItemStatusExtensions
    {
        public static string ToSerialString(this BackupItemStatus value) => value switch
        {
            BackupItemStatus.InProgress => "InProgress",
            BackupItemStatus.Failed => "Failed",
            BackupItemStatus.Succeeded => "Succeeded",
            BackupItemStatus.TimedOut => "TimedOut",
            BackupItemStatus.Created => "Created",
            BackupItemStatus.Skipped => "Skipped",
            BackupItemStatus.PartiallySucceeded => "PartiallySucceeded",
            BackupItemStatus.DeleteInProgress => "DeleteInProgress",
            BackupItemStatus.DeleteFailed => "DeleteFailed",
            BackupItemStatus.Deleted => "Deleted",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown BackupItemStatus value.")
        };

        public static BackupItemStatus ToBackupItemStatus(this string value)
        {
            if (string.Equals(value, "InProgress", StringComparison.InvariantCultureIgnoreCase)) return BackupItemStatus.InProgress;
            if (string.Equals(value, "Failed", StringComparison.InvariantCultureIgnoreCase)) return BackupItemStatus.Failed;
            if (string.Equals(value, "Succeeded", StringComparison.InvariantCultureIgnoreCase)) return BackupItemStatus.Succeeded;
            if (string.Equals(value, "TimedOut", StringComparison.InvariantCultureIgnoreCase)) return BackupItemStatus.TimedOut;
            if (string.Equals(value, "Created", StringComparison.InvariantCultureIgnoreCase)) return BackupItemStatus.Created;
            if (string.Equals(value, "Skipped", StringComparison.InvariantCultureIgnoreCase)) return BackupItemStatus.Skipped;
            if (string.Equals(value, "PartiallySucceeded", StringComparison.InvariantCultureIgnoreCase)) return BackupItemStatus.PartiallySucceeded;
            if (string.Equals(value, "DeleteInProgress", StringComparison.InvariantCultureIgnoreCase)) return BackupItemStatus.DeleteInProgress;
            if (string.Equals(value, "DeleteFailed", StringComparison.InvariantCultureIgnoreCase)) return BackupItemStatus.DeleteFailed;
            if (string.Equals(value, "Deleted", StringComparison.InvariantCultureIgnoreCase)) return BackupItemStatus.Deleted;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown BackupItemStatus value.");
        }
    }
}
