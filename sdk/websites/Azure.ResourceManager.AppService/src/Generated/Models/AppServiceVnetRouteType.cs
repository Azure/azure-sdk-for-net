// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// The type of route this is:
    /// DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918
    /// INHERITED - Routes inherited from the real Virtual Network routes
    /// STATIC - Static route set on the app only
    /// 
    /// These values will be used for syncing an app&apos;s routes with those from a Virtual Network.
    /// </summary>
    public readonly partial struct AppServiceVnetRouteType : IEquatable<AppServiceVnetRouteType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AppServiceVnetRouteType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AppServiceVnetRouteType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "DEFAULT";
        private const string InheritedValue = "INHERITED";
        private const string StaticValue = "STATIC";

        /// <summary> DEFAULT. </summary>
        public static AppServiceVnetRouteType Default { get; } = new AppServiceVnetRouteType(DefaultValue);
        /// <summary> INHERITED. </summary>
        public static AppServiceVnetRouteType Inherited { get; } = new AppServiceVnetRouteType(InheritedValue);
        /// <summary> STATIC. </summary>
        public static AppServiceVnetRouteType Static { get; } = new AppServiceVnetRouteType(StaticValue);
        /// <summary> Determines if two <see cref="AppServiceVnetRouteType"/> values are the same. </summary>
        public static bool operator ==(AppServiceVnetRouteType left, AppServiceVnetRouteType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AppServiceVnetRouteType"/> values are not the same. </summary>
        public static bool operator !=(AppServiceVnetRouteType left, AppServiceVnetRouteType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AppServiceVnetRouteType"/>. </summary>
        public static implicit operator AppServiceVnetRouteType(string value) => new AppServiceVnetRouteType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AppServiceVnetRouteType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AppServiceVnetRouteType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
