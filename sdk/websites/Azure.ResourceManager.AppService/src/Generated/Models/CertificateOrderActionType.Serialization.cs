// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.AppService.Models
{
    internal static partial class CertificateOrderActionTypeExtensions
    {
        public static string ToSerialString(this CertificateOrderActionType value) => value switch
        {
            CertificateOrderActionType.Unknown => "Unknown",
            CertificateOrderActionType.CertificateIssued => "CertificateIssued",
            CertificateOrderActionType.CertificateOrderCanceled => "CertificateOrderCanceled",
            CertificateOrderActionType.CertificateOrderCreated => "CertificateOrderCreated",
            CertificateOrderActionType.CertificateRevoked => "CertificateRevoked",
            CertificateOrderActionType.DomainValidationComplete => "DomainValidationComplete",
            CertificateOrderActionType.FraudDetected => "FraudDetected",
            CertificateOrderActionType.OrgNameChange => "OrgNameChange",
            CertificateOrderActionType.OrgValidationComplete => "OrgValidationComplete",
            CertificateOrderActionType.SanDrop => "SanDrop",
            CertificateOrderActionType.FraudCleared => "FraudCleared",
            CertificateOrderActionType.CertificateExpired => "CertificateExpired",
            CertificateOrderActionType.CertificateExpirationWarning => "CertificateExpirationWarning",
            CertificateOrderActionType.FraudDocumentationRequired => "FraudDocumentationRequired",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown CertificateOrderActionType value.")
        };

        public static CertificateOrderActionType ToCertificateOrderActionType(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Unknown")) return CertificateOrderActionType.Unknown;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "CertificateIssued")) return CertificateOrderActionType.CertificateIssued;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "CertificateOrderCanceled")) return CertificateOrderActionType.CertificateOrderCanceled;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "CertificateOrderCreated")) return CertificateOrderActionType.CertificateOrderCreated;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "CertificateRevoked")) return CertificateOrderActionType.CertificateRevoked;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "DomainValidationComplete")) return CertificateOrderActionType.DomainValidationComplete;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "FraudDetected")) return CertificateOrderActionType.FraudDetected;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "OrgNameChange")) return CertificateOrderActionType.OrgNameChange;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "OrgValidationComplete")) return CertificateOrderActionType.OrgValidationComplete;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "SanDrop")) return CertificateOrderActionType.SanDrop;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "FraudCleared")) return CertificateOrderActionType.FraudCleared;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "CertificateExpired")) return CertificateOrderActionType.CertificateExpired;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "CertificateExpirationWarning")) return CertificateOrderActionType.CertificateExpirationWarning;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "FraudDocumentationRequired")) return CertificateOrderActionType.FraudDocumentationRequired;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown CertificateOrderActionType value.");
        }
    }
}
