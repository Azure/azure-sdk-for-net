// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary>
    /// Class representing certificate renew request.
    /// Serialized Name: RenewCertificateOrderRequest
    /// </summary>
    public partial class RenewCertificateOrderContent : ResourceData
    {
        /// <summary> Initializes a new instance of RenewCertificateOrderContent. </summary>
        public RenewCertificateOrderContent()
        {
        }

        /// <summary> Initializes a new instance of RenewCertificateOrderContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="keySize">
        /// Certificate Key Size.
        /// Serialized Name: RenewCertificateOrderRequest.properties.keySize
        /// </param>
        /// <param name="csr">
        /// Csr to be used for re-key operation.
        /// Serialized Name: RenewCertificateOrderRequest.properties.csr
        /// </param>
        /// <param name="isPrivateKeyExternal">
        /// Should we change the ASC type (from managed private key to external private key and vice versa).
        /// Serialized Name: RenewCertificateOrderRequest.properties.isPrivateKeyExternal
        /// </param>
        /// <param name="kind">
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </param>
        internal RenewCertificateOrderContent(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, int? keySize, string csr, bool? isPrivateKeyExternal, string kind) : base(id, name, resourceType, systemData)
        {
            KeySize = keySize;
            Csr = csr;
            IsPrivateKeyExternal = isPrivateKeyExternal;
            Kind = kind;
        }

        /// <summary>
        /// Certificate Key Size.
        /// Serialized Name: RenewCertificateOrderRequest.properties.keySize
        /// </summary>
        public int? KeySize { get; set; }
        /// <summary>
        /// Csr to be used for re-key operation.
        /// Serialized Name: RenewCertificateOrderRequest.properties.csr
        /// </summary>
        public string Csr { get; set; }
        /// <summary>
        /// Should we change the ASC type (from managed private key to external private key and vice versa).
        /// Serialized Name: RenewCertificateOrderRequest.properties.isPrivateKeyExternal
        /// </summary>
        public bool? IsPrivateKeyExternal { get; set; }
        /// <summary>
        /// Kind of resource.
        /// Serialized Name: ProxyOnlyResource.kind
        /// </summary>
        public string Kind { get; set; }
    }
}
