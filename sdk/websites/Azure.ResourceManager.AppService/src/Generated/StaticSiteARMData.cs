// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService
{
    /// <summary> A class representing the StaticSiteARM data model. </summary>
    public partial class StaticSiteARMData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of StaticSiteARMData. </summary>
        /// <param name="location"> The location. </param>
        public StaticSiteARMData(AzureLocation location) : base(location)
        {
            CustomDomains = new ChangeTrackingList<string>();
            PrivateEndpointConnections = new ChangeTrackingList<ResponseMessageEnvelopeRemotePrivateEndpointConnection>();
            UserProvidedFunctionApps = new ChangeTrackingList<StaticSiteUserProvidedFunctionApp>();
        }

        /// <summary> Initializes a new instance of StaticSiteARMData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku">
        /// Description of a SKU for a scalable resource.
        /// Serialized Name: StaticSiteARMResource.sku
        /// </param>
        /// <param name="identity">
        /// Managed service identity.
        /// Serialized Name: StaticSiteARMResource.identity
        /// </param>
        /// <param name="defaultHostname">
        /// The default autogenerated hostname for the static site.
        /// Serialized Name: StaticSiteARMResource.properties.defaultHostname
        /// </param>
        /// <param name="repositoryUri">
        /// URL for the repository of the static site.
        /// Serialized Name: StaticSiteARMResource.properties.repositoryUrl
        /// </param>
        /// <param name="branch">
        /// The target branch in the repository.
        /// Serialized Name: StaticSiteARMResource.properties.branch
        /// </param>
        /// <param name="customDomains">
        /// The custom domains associated with this static site.
        /// Serialized Name: StaticSiteARMResource.properties.customDomains
        /// </param>
        /// <param name="repositoryToken">
        /// A user&apos;s github repository token. This is used to setup the Github Actions workflow file and API secrets.
        /// Serialized Name: StaticSiteARMResource.properties.repositoryToken
        /// </param>
        /// <param name="buildProperties">
        /// Build properties to configure on the repository.
        /// Serialized Name: StaticSiteARMResource.properties.buildProperties
        /// </param>
        /// <param name="privateEndpointConnections">
        /// Private endpoint connections
        /// Serialized Name: StaticSiteARMResource.properties.privateEndpointConnections
        /// </param>
        /// <param name="stagingEnvironmentPolicy">
        /// State indicating whether staging environments are allowed or not allowed for a static web app.
        /// Serialized Name: StaticSiteARMResource.properties.stagingEnvironmentPolicy
        /// </param>
        /// <param name="allowConfigFileUpdates">
        /// &lt;code&gt;false&lt;/code&gt; if config file is locked for this static web app; otherwise, &lt;code&gt;true&lt;/code&gt;.
        /// Serialized Name: StaticSiteARMResource.properties.allowConfigFileUpdates
        /// </param>
        /// <param name="templateProperties">
        /// Template options for generating a new repository.
        /// Serialized Name: StaticSiteARMResource.properties.templateProperties
        /// </param>
        /// <param name="contentDistributionEndpoint">
        /// The content distribution endpoint for the static site.
        /// Serialized Name: StaticSiteARMResource.properties.contentDistributionEndpoint
        /// </param>
        /// <param name="keyVaultReferenceIdentity">
        /// Identity to use for Key Vault Reference authentication.
        /// Serialized Name: StaticSiteARMResource.properties.keyVaultReferenceIdentity
        /// </param>
        /// <param name="userProvidedFunctionApps">
        /// User provided function apps registered with the static site
        /// Serialized Name: StaticSiteARMResource.properties.userProvidedFunctionApps
        /// </param>
        /// <param name="provider">
        /// The provider that submitted the last deployment to the primary environment of the static site.
        /// Serialized Name: StaticSiteARMResource.properties.provider
        /// </param>
        /// <param name="kind">
        /// Kind of resource.
        /// Serialized Name: Resource.kind
        /// </param>
        internal StaticSiteARMData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, SkuDescription sku, ManagedServiceIdentity identity, string defaultHostname, Uri repositoryUri, string branch, IReadOnlyList<string> customDomains, string repositoryToken, StaticSiteBuildProperties buildProperties, IReadOnlyList<ResponseMessageEnvelopeRemotePrivateEndpointConnection> privateEndpointConnections, StagingEnvironmentPolicy? stagingEnvironmentPolicy, bool? allowConfigFileUpdates, StaticSiteTemplate templateProperties, string contentDistributionEndpoint, string keyVaultReferenceIdentity, IReadOnlyList<StaticSiteUserProvidedFunctionApp> userProvidedFunctionApps, string provider, string kind) : base(id, name, resourceType, systemData, tags, location)
        {
            Sku = sku;
            Identity = identity;
            DefaultHostname = defaultHostname;
            RepositoryUri = repositoryUri;
            Branch = branch;
            CustomDomains = customDomains;
            RepositoryToken = repositoryToken;
            BuildProperties = buildProperties;
            PrivateEndpointConnections = privateEndpointConnections;
            StagingEnvironmentPolicy = stagingEnvironmentPolicy;
            AllowConfigFileUpdates = allowConfigFileUpdates;
            TemplateProperties = templateProperties;
            ContentDistributionEndpoint = contentDistributionEndpoint;
            KeyVaultReferenceIdentity = keyVaultReferenceIdentity;
            UserProvidedFunctionApps = userProvidedFunctionApps;
            Provider = provider;
            Kind = kind;
        }

        /// <summary>
        /// Description of a SKU for a scalable resource.
        /// Serialized Name: StaticSiteARMResource.sku
        /// </summary>
        public SkuDescription Sku { get; set; }
        /// <summary>
        /// Managed service identity.
        /// Serialized Name: StaticSiteARMResource.identity
        /// </summary>
        public ManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// The default autogenerated hostname for the static site.
        /// Serialized Name: StaticSiteARMResource.properties.defaultHostname
        /// </summary>
        public string DefaultHostname { get; }
        /// <summary>
        /// URL for the repository of the static site.
        /// Serialized Name: StaticSiteARMResource.properties.repositoryUrl
        /// </summary>
        public Uri RepositoryUri { get; set; }
        /// <summary>
        /// The target branch in the repository.
        /// Serialized Name: StaticSiteARMResource.properties.branch
        /// </summary>
        public string Branch { get; set; }
        /// <summary>
        /// The custom domains associated with this static site.
        /// Serialized Name: StaticSiteARMResource.properties.customDomains
        /// </summary>
        public IReadOnlyList<string> CustomDomains { get; }
        /// <summary>
        /// A user&apos;s github repository token. This is used to setup the Github Actions workflow file and API secrets.
        /// Serialized Name: StaticSiteARMResource.properties.repositoryToken
        /// </summary>
        public string RepositoryToken { get; set; }
        /// <summary>
        /// Build properties to configure on the repository.
        /// Serialized Name: StaticSiteARMResource.properties.buildProperties
        /// </summary>
        public StaticSiteBuildProperties BuildProperties { get; set; }
        /// <summary>
        /// Private endpoint connections
        /// Serialized Name: StaticSiteARMResource.properties.privateEndpointConnections
        /// </summary>
        public IReadOnlyList<ResponseMessageEnvelopeRemotePrivateEndpointConnection> PrivateEndpointConnections { get; }
        /// <summary>
        /// State indicating whether staging environments are allowed or not allowed for a static web app.
        /// Serialized Name: StaticSiteARMResource.properties.stagingEnvironmentPolicy
        /// </summary>
        public StagingEnvironmentPolicy? StagingEnvironmentPolicy { get; set; }
        /// <summary>
        /// &lt;code&gt;false&lt;/code&gt; if config file is locked for this static web app; otherwise, &lt;code&gt;true&lt;/code&gt;.
        /// Serialized Name: StaticSiteARMResource.properties.allowConfigFileUpdates
        /// </summary>
        public bool? AllowConfigFileUpdates { get; set; }
        /// <summary>
        /// Template options for generating a new repository.
        /// Serialized Name: StaticSiteARMResource.properties.templateProperties
        /// </summary>
        public StaticSiteTemplate TemplateProperties { get; set; }
        /// <summary>
        /// The content distribution endpoint for the static site.
        /// Serialized Name: StaticSiteARMResource.properties.contentDistributionEndpoint
        /// </summary>
        public string ContentDistributionEndpoint { get; }
        /// <summary>
        /// Identity to use for Key Vault Reference authentication.
        /// Serialized Name: StaticSiteARMResource.properties.keyVaultReferenceIdentity
        /// </summary>
        public string KeyVaultReferenceIdentity { get; }
        /// <summary>
        /// User provided function apps registered with the static site
        /// Serialized Name: StaticSiteARMResource.properties.userProvidedFunctionApps
        /// </summary>
        public IReadOnlyList<StaticSiteUserProvidedFunctionApp> UserProvidedFunctionApps { get; }
        /// <summary>
        /// The provider that submitted the last deployment to the primary environment of the static site.
        /// Serialized Name: StaticSiteARMResource.properties.provider
        /// </summary>
        public string Provider { get; }
        /// <summary>
        /// Kind of resource.
        /// Serialized Name: Resource.kind
        /// </summary>
        public string Kind { get; set; }
    }
}
