// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.AppService
{
    /// <summary>
    /// A class representing a collection of <see cref="AppServicePremierAddonResource" /> and their operations.
    /// Each <see cref="AppServicePremierAddonResource" /> in the collection will belong to the same instance of <see cref="AppServiceResource" />.
    /// To get an <see cref="AppServicePremierAddonCollection" /> instance call the GetAppServicePremierAddons method from an instance of <see cref="AppServiceResource" />.
    /// </summary>
    public partial class AppServicePremierAddonCollection : ArmCollection
    {
        private readonly ClientDiagnostics _appServicePremierAddonWebAppsClientDiagnostics;
        private readonly WebAppsRestOperations _appServicePremierAddonWebAppsRestClient;

        /// <summary> Initializes a new instance of the <see cref="AppServicePremierAddonCollection"/> class for mocking. </summary>
        protected AppServicePremierAddonCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AppServicePremierAddonCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AppServicePremierAddonCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _appServicePremierAddonWebAppsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AppService", AppServicePremierAddonResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AppServicePremierAddonResource.ResourceType, out string appServicePremierAddonWebAppsApiVersion);
            _appServicePremierAddonWebAppsRestClient = new WebAppsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, appServicePremierAddonWebAppsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != AppServiceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, AppServiceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Description for Updates a named add-on of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}
        /// Operation Id: WebApps_AddPremierAddOn
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="premierAddOnName"> Add-on name. </param>
        /// <param name="data"> A JSON representation of the edited premier add-on. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="premierAddOnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="premierAddOnName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<AppServicePremierAddonResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string premierAddOnName, PremierAddOnData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(premierAddOnName, nameof(premierAddOnName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _appServicePremierAddonWebAppsClientDiagnostics.CreateScope("AppServicePremierAddonCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _appServicePremierAddonWebAppsRestClient.AddPremierAddOnAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, premierAddOnName, data, cancellationToken).ConfigureAwait(false);
                var operation = new AppServiceArmOperation<AppServicePremierAddonResource>(Response.FromValue(new AppServicePremierAddonResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Updates a named add-on of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}
        /// Operation Id: WebApps_AddPremierAddOn
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="premierAddOnName"> Add-on name. </param>
        /// <param name="data"> A JSON representation of the edited premier add-on. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="premierAddOnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="premierAddOnName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<AppServicePremierAddonResource> CreateOrUpdate(WaitUntil waitUntil, string premierAddOnName, PremierAddOnData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(premierAddOnName, nameof(premierAddOnName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _appServicePremierAddonWebAppsClientDiagnostics.CreateScope("AppServicePremierAddonCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _appServicePremierAddonWebAppsRestClient.AddPremierAddOn(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, premierAddOnName, data, cancellationToken);
                var operation = new AppServiceArmOperation<AppServicePremierAddonResource>(Response.FromValue(new AppServicePremierAddonResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets a named add-on of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}
        /// Operation Id: WebApps_GetPremierAddOn
        /// </summary>
        /// <param name="premierAddOnName"> Add-on name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="premierAddOnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="premierAddOnName"/> is null. </exception>
        public virtual async Task<Response<AppServicePremierAddonResource>> GetAsync(string premierAddOnName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(premierAddOnName, nameof(premierAddOnName));

            using var scope = _appServicePremierAddonWebAppsClientDiagnostics.CreateScope("AppServicePremierAddonCollection.Get");
            scope.Start();
            try
            {
                var response = await _appServicePremierAddonWebAppsRestClient.GetPremierAddOnAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, premierAddOnName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AppServicePremierAddonResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Gets a named add-on of an app.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}
        /// Operation Id: WebApps_GetPremierAddOn
        /// </summary>
        /// <param name="premierAddOnName"> Add-on name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="premierAddOnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="premierAddOnName"/> is null. </exception>
        public virtual Response<AppServicePremierAddonResource> Get(string premierAddOnName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(premierAddOnName, nameof(premierAddOnName));

            using var scope = _appServicePremierAddonWebAppsClientDiagnostics.CreateScope("AppServicePremierAddonCollection.Get");
            scope.Start();
            try
            {
                var response = _appServicePremierAddonWebAppsRestClient.GetPremierAddOn(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, premierAddOnName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AppServicePremierAddonResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}
        /// Operation Id: WebApps_GetPremierAddOn
        /// </summary>
        /// <param name="premierAddOnName"> Add-on name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="premierAddOnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="premierAddOnName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string premierAddOnName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(premierAddOnName, nameof(premierAddOnName));

            using var scope = _appServicePremierAddonWebAppsClientDiagnostics.CreateScope("AppServicePremierAddonCollection.Exists");
            scope.Start();
            try
            {
                var response = await _appServicePremierAddonWebAppsRestClient.GetPremierAddOnAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, premierAddOnName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}
        /// Operation Id: WebApps_GetPremierAddOn
        /// </summary>
        /// <param name="premierAddOnName"> Add-on name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="premierAddOnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="premierAddOnName"/> is null. </exception>
        public virtual Response<bool> Exists(string premierAddOnName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(premierAddOnName, nameof(premierAddOnName));

            using var scope = _appServicePremierAddonWebAppsClientDiagnostics.CreateScope("AppServicePremierAddonCollection.Exists");
            scope.Start();
            try
            {
                var response = _appServicePremierAddonWebAppsRestClient.GetPremierAddOn(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, premierAddOnName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
