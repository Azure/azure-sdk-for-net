// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService
{
    /// <summary>
    /// A class representing the ContainerApp data model.
    /// Container App.
    /// </summary>
    public partial class ContainerAppData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ContainerAppData"/>. </summary>
        /// <param name="location"> The location. </param>
        public ContainerAppData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of <see cref="ContainerAppData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> Provisioning state of the Container App. </param>
        /// <param name="kubeEnvironmentId"> Resource ID of the Container App's KubeEnvironment. </param>
        /// <param name="latestRevisionName"> Name of the latest revision of the Container App. </param>
        /// <param name="latestRevisionFqdn"> Fully Qualified Domain Name of the latest revision of the Container App. </param>
        /// <param name="configuration"> Non versioned Container App configuration properties. </param>
        /// <param name="template"> Container App versioned application definition. </param>
        /// <param name="kind"> Kind of resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ContainerAppData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ContainerAppProvisioningState? provisioningState, string kubeEnvironmentId, string latestRevisionName, string latestRevisionFqdn, Configuration configuration, Template template, string kind, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            ProvisioningState = provisioningState;
            KubeEnvironmentId = kubeEnvironmentId;
            LatestRevisionName = latestRevisionName;
            LatestRevisionFqdn = latestRevisionFqdn;
            Configuration = configuration;
            Template = template;
            Kind = kind;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ContainerAppData"/> for deserialization. </summary>
        internal ContainerAppData()
        {
        }

        /// <summary> Provisioning state of the Container App. </summary>
        [WirePath("properties.provisioningState")]
        public ContainerAppProvisioningState? ProvisioningState { get; }
        /// <summary> Resource ID of the Container App's KubeEnvironment. </summary>
        [WirePath("properties.kubeEnvironmentId")]
        public string KubeEnvironmentId { get; set; }
        /// <summary> Name of the latest revision of the Container App. </summary>
        [WirePath("properties.latestRevisionName")]
        public string LatestRevisionName { get; }
        /// <summary> Fully Qualified Domain Name of the latest revision of the Container App. </summary>
        [WirePath("properties.latestRevisionFqdn")]
        public string LatestRevisionFqdn { get; }
        /// <summary> Non versioned Container App configuration properties. </summary>
        [WirePath("properties.configuration")]
        public Configuration Configuration { get; set; }
        /// <summary> Container App versioned application definition. </summary>
        [WirePath("properties.template")]
        public Template Template { get; set; }
        /// <summary> Kind of resource. </summary>
        [WirePath("kind")]
        public string Kind { get; set; }
    }
}
