// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;

namespace Azure.ResourceManager.AppService
{
    /// <summary> TODO. </summary>
    public abstract partial class MSDeployStatusResource : ArmResource
    {
        internal static MSDeployStatusResource GetResource(ArmClient client, MSDeployStatusData data)
        {
            if (IsSiteExtensionResource(data.Id))
            {
                return new SiteExtensionResource(client, data);
            }
            if (IsSiteInstanceExtensionResource(data.Id))
            {
                return new SiteInstanceExtensionResource(client, data);
            }
            if (IsSiteSlotExtensionResource(data.Id))
            {
                return new SiteSlotExtensionResource(client, data);
            }
            if (IsSiteSlotInstanceExtensionResource(data.Id))
            {
                return new SiteSlotInstanceExtensionResource(client, data);
            }
            // TODO -- should we throw or return an UnknownResource?
            throw new InvalidOperationException();
        }

        internal static bool IsSiteExtensionResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != SiteExtensionResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "MSDeploy")
            {
                return false;
            }
            return true;
        }

        internal static bool IsSiteInstanceExtensionResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != SiteInstanceExtensionResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "MSDeploy")
            {
                return false;
            }
            return true;
        }

        internal static bool IsSiteSlotExtensionResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != SiteSlotExtensionResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "MSDeploy")
            {
                return false;
            }
            return true;
        }

        internal static bool IsSiteSlotInstanceExtensionResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != SiteSlotInstanceExtensionResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "MSDeploy")
            {
                return false;
            }
            return true;
        }

        private readonly MSDeployStatusData _data;

        /// <summary> Initializes a new instance of the <see cref="MSDeployStatusResource"/> class for mocking. </summary>
        protected MSDeployStatusResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "MSDeployStatusResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal MSDeployStatusResource(ArmClient client, MSDeployStatusData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="MSDeployStatusResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MSDeployStatusResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual MSDeployStatusData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        protected abstract Task<Response<MSDeployStatusResource>> GetCoreAsync(CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public async Task<Response<MSDeployStatusResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            return await GetCoreAsync(cancellationToken);
        }

        protected abstract Response<MSDeployStatusResource> GetCore(CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public Response<MSDeployStatusResource> Get(CancellationToken cancellationToken = default)
        {
            return GetCore(cancellationToken);
        }

        protected abstract Task<ArmOperation<MSDeployStatusResource>> CreateOrUpdateCoreAsync(WaitUntil waitUntil, MSDeploy msDeploy, CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="msDeploy"> Details of MSDeploy operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="msDeploy"/> is null. </exception>
        [ForwardsClientCalls]
        public async Task<ArmOperation<MSDeployStatusResource>> CreateOrUpdateAsync(WaitUntil waitUntil, MSDeploy msDeploy, CancellationToken cancellationToken = default)
        {
            return await CreateOrUpdateCoreAsync(waitUntil, msDeploy, cancellationToken);
        }

        protected abstract ArmOperation<MSDeployStatusResource> CreateOrUpdateCore(WaitUntil waitUntil, MSDeploy msDeploy, CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="msDeploy"> Details of MSDeploy operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="msDeploy"/> is null. </exception>
        [ForwardsClientCalls]
        public ArmOperation<MSDeployStatusResource> CreateOrUpdate(WaitUntil waitUntil, MSDeploy msDeploy, CancellationToken cancellationToken = default)
        {
            return CreateOrUpdateCore(waitUntil, msDeploy, cancellationToken);
        }
    }
}
