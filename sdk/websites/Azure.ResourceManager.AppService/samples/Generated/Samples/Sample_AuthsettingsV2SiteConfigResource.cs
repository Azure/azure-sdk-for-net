// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.AppService.Models;

namespace Azure.ResourceManager.AppService.Samples
{
    public partial class Sample_AuthsettingsV2SiteConfigResource
    {
        // List Auth Settings without Secrets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ListAuthSettingsWithoutSecrets()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.Web/stable/2023-12-01/examples/GetAuthSettingsV2WithoutSecrets.json
            // this example is just showing the usage of "WebApps_GetAuthSettingsV2WithoutSecrets" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AuthsettingsV2SiteConfigResource created on azure
            // for more information of creating AuthsettingsV2SiteConfigResource, please refer to the document of AuthsettingsV2SiteConfigResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string name = "sitef6141";
            ResourceIdentifier authsettingsV2SiteConfigResourceId = AuthsettingsV2SiteConfigResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            AuthsettingsV2SiteConfigResource authsettingsV2SiteConfig = client.GetAuthsettingsV2SiteConfigResource(authsettingsV2SiteConfigResourceId);

            // invoke the operation
            AuthsettingsV2SiteConfigResource result = await authsettingsV2SiteConfig.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SiteAuthSettingsV2Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Update Auth Settings V2
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_UpdateAuthSettingsV2()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.Web/stable/2023-12-01/examples/UpdateAuthSettingsV2.json
            // this example is just showing the usage of "WebApps_UpdateAuthSettingsV2" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AuthsettingsV2SiteConfigResource created on azure
            // for more information of creating AuthsettingsV2SiteConfigResource, please refer to the document of AuthsettingsV2SiteConfigResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string name = "sitef6141";
            ResourceIdentifier authsettingsV2SiteConfigResourceId = AuthsettingsV2SiteConfigResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            AuthsettingsV2SiteConfigResource authsettingsV2SiteConfig = client.GetAuthsettingsV2SiteConfigResource(authsettingsV2SiteConfigResourceId);

            // invoke the operation
            SiteAuthSettingsV2Data data = new SiteAuthSettingsV2Data()
            {
                Platform = new AuthPlatform()
                {
                    IsEnabled = true,
                    RuntimeVersion = "~1",
                    ConfigFilePath = "/auth/config.json",
                },
                GlobalValidation = new GlobalValidation()
                {
                    IsAuthenticationRequired = true,
                    UnauthenticatedClientAction = UnauthenticatedClientActionV2.Return403,
                    ExcludedPaths =
{
"/nosecrets/Path"
},
                },
                IdentityProviders = new AppServiceIdentityProviders()
                {
                    Google = new AppServiceGoogleProvider()
                    {
                        IsEnabled = true,
                        Registration = new ClientRegistration()
                        {
                            ClientId = "42d795a9-8abb-4d06-8534-39528af40f8e.apps.googleusercontent.com",
                            ClientSecretSettingName = "ClientSecret",
                        },
                        LoginScopes =
{
"admin"
},
                        ValidationAllowedAudiences =
{
"https://example.com"
},
                    },
                },
                Login = new WebAppLoginInfo()
                {
                    RoutesLogoutEndpoint = "https://app.com/logout",
                    TokenStore = new AppServiceTokenStore()
                    {
                        IsEnabled = true,
                        TokenRefreshExtensionHours = 96,
                        FileSystemDirectory = "/wwwroot/sites/example",
                    },
                    PreserveUrlFragmentsForLogins = true,
                    AllowedExternalRedirectUrls =
{
"https://someurl.com"
},
                    CookieExpiration = new WebAppCookieExpiration()
                    {
                        Convention = CookieExpirationConvention.IdentityProviderDerived,
                        TimeToExpiration = "2022:09-01T00:00Z",
                    },
                    Nonce = new LoginFlowNonceSettings()
                    {
                        ValidateNonce = true,
                    },
                },
                HttpSettings = new AppServiceHttpSettings()
                {
                    IsHttpsRequired = true,
                    RoutesApiPrefix = "/authv2/",
                    ForwardProxy = new AppServiceForwardProxy()
                    {
                        Convention = ForwardProxyConvention.Standard,
                        CustomHostHeaderName = "authHeader",
                        CustomProtoHeaderName = "customProtoHeader",
                    },
                },
            };
            ArmOperation<AuthsettingsV2SiteConfigResource> lro = await authsettingsV2SiteConfig.CreateOrUpdateAsync(WaitUntil.Completed, data);
            AuthsettingsV2SiteConfigResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SiteAuthSettingsV2Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // List Auth Settings V2
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAuthSettingsV2_ListAuthSettingsV2()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.Web/stable/2023-12-01/examples/ListAuthSettingsV2.json
            // this example is just showing the usage of "WebApps_GetAuthSettingsV2" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AuthsettingsV2SiteConfigResource created on azure
            // for more information of creating AuthsettingsV2SiteConfigResource, please refer to the document of AuthsettingsV2SiteConfigResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string name = "sitef6141";
            ResourceIdentifier authsettingsV2SiteConfigResourceId = AuthsettingsV2SiteConfigResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            AuthsettingsV2SiteConfigResource authsettingsV2SiteConfig = client.GetAuthsettingsV2SiteConfigResource(authsettingsV2SiteConfigResourceId);

            // invoke the operation
            AuthsettingsV2SiteConfigResource result = await authsettingsV2SiteConfig.GetAuthSettingsV2Async();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SiteAuthSettingsV2Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
