// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.AppService.Models;

namespace Azure.ResourceManager.AppService.Samples
{
    public partial class Sample_WebSiteConfigResource
    {
        // Get Site Config
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetSiteConfig()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.Web/stable/2023-12-01/examples/GetSiteConfig.json
            // this example is just showing the usage of "WebApps_GetConfiguration" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebSiteConfigResource created on azure
            // for more information of creating WebSiteConfigResource, please refer to the document of WebSiteConfigResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string name = "sitef6141";
            ResourceIdentifier webSiteConfigResourceId = WebSiteConfigResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            WebSiteConfigResource webSiteConfig = client.GetWebSiteConfigResource(webSiteConfigResourceId);

            // invoke the operation
            WebSiteConfigResource result = await webSiteConfig.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SiteConfigData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Update Site Config
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_UpdateSiteConfig()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.Web/stable/2023-12-01/examples/UpdateSiteConfig.json
            // this example is just showing the usage of "WebApps_CreateOrUpdateConfiguration" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebSiteConfigResource created on azure
            // for more information of creating WebSiteConfigResource, please refer to the document of WebSiteConfigResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string name = "sitef6141";
            ResourceIdentifier webSiteConfigResourceId = WebSiteConfigResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            WebSiteConfigResource webSiteConfig = client.GetWebSiteConfigResource(webSiteConfigResourceId);

            // invoke the operation
            SiteConfigData data = new SiteConfigData()
            {
                NumberOfWorkers = 1,
                DefaultDocuments =
{
"Default.htm","Default.html","Default.asp","index.htm","index.html","iisstart.htm","default.aspx","index.php","hostingstart.html"
},
                NetFrameworkVersion = "v4.0",
                PhpVersion = "5.6",
                PythonVersion = "",
                NodeVersion = "",
                PowerShellVersion = "",
                LinuxFxVersion = "",
                IsRequestTracingEnabled = false,
                IsRemoteDebuggingEnabled = false,
                IsHttpLoggingEnabled = false,
                UseManagedIdentityCreds = false,
                LogsDirectorySizeLimit = 35,
                IsDetailedErrorLoggingEnabled = false,
                Use32BitWorkerProcess = true,
                IsWebSocketsEnabled = false,
                IsAlwaysOn = false,
                AppCommandLine = "",
                ManagedPipelineMode = ManagedPipelineMode.Integrated,
                VirtualApplications =
{
new VirtualApplication()
{
VirtualPath = "/",
PhysicalPath = "site\\wwwroot",
IsPreloadEnabled = false,
}
},
                LoadBalancing = SiteLoadBalancing.LeastRequests,
                IsAutoHealEnabled = false,
                VnetName = "",
                IsVnetRouteAllEnabled = false,
                VnetPrivatePortsCount = 0,
                IsHttp20Enabled = false,
                MinTlsVersion = AppServiceSupportedTlsVersion.Tls1_2,
                ScmMinTlsVersion = AppServiceSupportedTlsVersion.Tls1_2,
                FtpsState = AppServiceFtpsState.AllAllowed,
                FunctionAppScaleLimit = 0,
                IsFunctionsRuntimeScaleMonitoringEnabled = false,
                MinimumElasticInstanceCount = 0,
                AzureStorageAccounts =
{
},
            };
            ArmOperation<WebSiteConfigResource> lro = await webSiteConfig.CreateOrUpdateAsync(WaitUntil.Completed, data);
            WebSiteConfigResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SiteConfigData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
