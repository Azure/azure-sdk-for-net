// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AppService.Samples
{
    public partial class Sample_AppServiceDomainResource
    {
        // List domains by subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAppServiceDomains_ListDomainsBySubscription()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.DomainRegistration/stable/2023-12-01/examples/ListDomainsBySubscription.json
            // this example is just showing the usage of "Domains_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (AppServiceDomainResource item in subscriptionResource.GetAppServiceDomainsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AppServiceDomainData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get Domain
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetDomain()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.DomainRegistration/stable/2023-12-01/examples/GetDomain.json
            // this example is just showing the usage of "Domains_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AppServiceDomainResource created on azure
            // for more information of creating AppServiceDomainResource, please refer to the document of AppServiceDomainResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string domainName = "example.com";
            ResourceIdentifier appServiceDomainResourceId = AppServiceDomainResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, domainName);
            AppServiceDomainResource appServiceDomain = client.GetAppServiceDomainResource(appServiceDomainResourceId);

            // invoke the operation
            AppServiceDomainResource result = await appServiceDomain.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AppServiceDomainData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete App Service Domain
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteAppServiceDomain()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.DomainRegistration/stable/2023-12-01/examples/DeleteAppServiceDomain.json
            // this example is just showing the usage of "Domains_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AppServiceDomainResource created on azure
            // for more information of creating AppServiceDomainResource, please refer to the document of AppServiceDomainResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string domainName = "example.com";
            ResourceIdentifier appServiceDomainResourceId = AppServiceDomainResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, domainName);
            AppServiceDomainResource appServiceDomain = client.GetAppServiceDomainResource(appServiceDomainResourceId);

            // invoke the operation
            bool? forceHardDeleteDomain = true;
            await appServiceDomain.DeleteAsync(WaitUntil.Completed, forceHardDeleteDomain: forceHardDeleteDomain);

            Console.WriteLine($"Succeeded");
        }

        // Update App Service Domain
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateAppServiceDomain()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.DomainRegistration/stable/2023-12-01/examples/UpdateAppServiceDomain.json
            // this example is just showing the usage of "Domains_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AppServiceDomainResource created on azure
            // for more information of creating AppServiceDomainResource, please refer to the document of AppServiceDomainResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string domainName = "example.com";
            ResourceIdentifier appServiceDomainResourceId = AppServiceDomainResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, domainName);
            AppServiceDomainResource appServiceDomain = client.GetAppServiceDomainResource(appServiceDomainResourceId);

            // invoke the operation
            AppServiceDomainPatch patch = new AppServiceDomainPatch()
            {
                ContactAdmin = new RegistrationContactInfo("admin@email.com", "John", "Doe", "1-245-534-2242")
                {
                    AddressMailing = new RegistrationAddressInfo("3400 State St", "Chicago", "United States", "67098", "IL"),
                    Fax = "1-245-534-2242",
                    JobTitle = "Admin",
                    NameMiddle = "",
                    Organization = "Microsoft Inc.",
                },
                ContactBilling = new RegistrationContactInfo("billing@email.com", "John", "Doe", "1-245-534-2242")
                {
                    AddressMailing = new RegistrationAddressInfo("3400 State St", "Chicago", "United States", "67098", "IL"),
                    Fax = "1-245-534-2242",
                    JobTitle = "Billing",
                    NameMiddle = "",
                    Organization = "Microsoft Inc.",
                },
                ContactRegistrant = new RegistrationContactInfo("registrant@email.com", "John", "Doe", "1-245-534-2242")
                {
                    AddressMailing = new RegistrationAddressInfo("3400 State St", "Chicago", "United States", "67098", "IL"),
                    Fax = "1-245-534-2242",
                    JobTitle = "Registrant",
                    NameMiddle = "",
                    Organization = "Microsoft Inc.",
                },
                ContactTech = new RegistrationContactInfo("tech@email.com", "John", "Doe", "1-245-534-2242")
                {
                    AddressMailing = new RegistrationAddressInfo("3400 State St", "Chicago", "United States", "67098", "IL"),
                    Fax = "1-245-534-2242",
                    JobTitle = "Tech",
                    NameMiddle = "",
                    Organization = "Microsoft Inc.",
                },
                IsDomainPrivacyEnabled = false,
                IsAutoRenew = true,
                Consent = new DomainPurchaseConsent()
                {
                    AgreementKeys =
{
"agreementKey1"
},
                    AgreedBy = "192.0.2.1",
                    AgreedOn = DateTimeOffset.Parse("2021-09-10T19:30:53Z"),
                },
                DnsType = AppServiceDnsType.DefaultDomainRegistrarDns,
                AuthCode = "exampleAuthCode",
            };
            AppServiceDomainResource result = await appServiceDomain.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AppServiceDomainData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Renew an existing domain
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Renew_RenewAnExistingDomain()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.DomainRegistration/stable/2023-12-01/examples/RenewDomain.json
            // this example is just showing the usage of "Domains_Renew" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AppServiceDomainResource created on azure
            // for more information of creating AppServiceDomainResource, please refer to the document of AppServiceDomainResource
            string subscriptionId = "3dddfa4f-cedf-4dc0-ba29-b6d1a69ab545";
            string resourceGroupName = "RG";
            string domainName = "example.com";
            ResourceIdentifier appServiceDomainResourceId = AppServiceDomainResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, domainName);
            AppServiceDomainResource appServiceDomain = client.GetAppServiceDomainResource(appServiceDomainResourceId);

            // invoke the operation
            await appServiceDomain.RenewAsync();

            Console.WriteLine($"Succeeded");
        }

        // Transfer out domain
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task TransferOut_TransferOutDomain()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.DomainRegistration/stable/2023-12-01/examples/TransferOutDomain.json
            // this example is just showing the usage of "Domains_TransferOut" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AppServiceDomainResource created on azure
            // for more information of creating AppServiceDomainResource, please refer to the document of AppServiceDomainResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string domainName = "example.com";
            ResourceIdentifier appServiceDomainResourceId = AppServiceDomainResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, domainName);
            AppServiceDomainResource appServiceDomain = client.GetAppServiceDomainResource(appServiceDomainResourceId);

            // invoke the operation
            AppServiceDomainResource result = await appServiceDomain.TransferOutAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AppServiceDomainData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
