// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DiagnosticsOperations.
    /// </summary>
    public static partial class DiagnosticsOperationsExtensions
    {
            /// <summary>
            /// List Hosting Environment Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Hosting Environment Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site Name
            /// </param>
            public static IPage<DetectorResponse> ListHostingEnvironmentDetectorResponses(this IDiagnosticsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListHostingEnvironmentDetectorResponsesAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Hosting Environment Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Hosting Environment Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorResponse>> ListHostingEnvironmentDetectorResponsesAsync(this IDiagnosticsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostingEnvironmentDetectorResponsesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Hosting Environment Detector Response
            /// </summary>
            /// <remarks>
            /// Description for Get Hosting Environment Detector Response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// App Service Environment Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            public static DetectorResponse GetHostingEnvironmentDetectorResponse(this IDiagnosticsOperations operations, string resourceGroupName, string name, string detectorName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.GetHostingEnvironmentDetectorResponseAsync(resourceGroupName, name, detectorName, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Hosting Environment Detector Response
            /// </summary>
            /// <remarks>
            /// Description for Get Hosting Environment Detector Response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// App Service Environment Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DetectorResponse> GetHostingEnvironmentDetectorResponseAsync(this IDiagnosticsOperations operations, string resourceGroupName, string name, string detectorName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentDetectorResponseWithHttpMessagesAsync(resourceGroupName, name, detectorName, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Site Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Site Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            public static IPage<DetectorResponse> ListSiteDetectorResponses(this IDiagnosticsOperations operations, string resourceGroupName, string siteName)
            {
                return operations.ListSiteDetectorResponsesAsync(resourceGroupName, siteName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Site Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Site Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorResponse>> ListSiteDetectorResponsesAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorResponsesWithHttpMessagesAsync(resourceGroupName, siteName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get site detector response
            /// </summary>
            /// <remarks>
            /// Description for Get site detector response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            public static DetectorResponse GetSiteDetectorResponse(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.GetSiteDetectorResponseAsync(resourceGroupName, siteName, detectorName, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get site detector response
            /// </summary>
            /// <remarks>
            /// Description for Get site detector response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DetectorResponse> GetSiteDetectorResponseAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDetectorResponseWithHttpMessagesAsync(resourceGroupName, siteName, detectorName, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            public static IPage<DiagnosticCategory> ListSiteDiagnosticCategories(this IDiagnosticsOperations operations, string resourceGroupName, string siteName)
            {
                return operations.ListSiteDiagnosticCategoriesAsync(resourceGroupName, siteName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiagnosticCategory>> ListSiteDiagnosticCategoriesAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDiagnosticCategoriesWithHttpMessagesAsync(resourceGroupName, siteName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Diagnostics Category
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Category
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            public static DiagnosticCategory GetSiteDiagnosticCategory(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory)
            {
                return operations.GetSiteDiagnosticCategoryAsync(resourceGroupName, siteName, diagnosticCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Category
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Category
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticCategory> GetSiteDiagnosticCategoryAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDiagnosticCategoryWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            public static IPage<AnalysisDefinition> ListSiteAnalyses(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory)
            {
                return operations.ListSiteAnalysesAsync(resourceGroupName, siteName, diagnosticCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AnalysisDefinition>> ListSiteAnalysesAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteAnalysesWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analysis
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Name
            /// </param>
            public static AnalysisDefinition GetSiteAnalysis(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName)
            {
                return operations.GetSiteAnalysisAsync(resourceGroupName, siteName, diagnosticCategory, analysisName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analysis
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalysisDefinition> GetSiteAnalysisAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteAnalysisWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute Analysis
            /// </summary>
            /// <remarks>
            /// Description for Execute Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Resource Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            public static DiagnosticAnalysis ExecuteSiteAnalysis(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.ExecuteSiteAnalysisAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Analysis
            /// </summary>
            /// <remarks>
            /// Description for Execute Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Resource Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticAnalysis> ExecuteSiteAnalysisAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSiteAnalysisWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Description for Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            public static IPage<DetectorDefinition> ListSiteDetectors(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory)
            {
                return operations.ListSiteDetectorsAsync(resourceGroupName, siteName, diagnosticCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Description for Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> ListSiteDetectorsAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorsWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Description for Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='detectorName'>
            /// Detector Name
            /// </param>
            public static DetectorDefinition GetSiteDetector(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string detectorName)
            {
                return operations.GetSiteDetectorAsync(resourceGroupName, siteName, diagnosticCategory, detectorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Description for Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='detectorName'>
            /// Detector Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DetectorDefinition> GetSiteDetectorAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDetectorWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, detectorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute Detector
            /// </summary>
            /// <remarks>
            /// Description for Execute Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            public static DiagnosticDetectorResponse ExecuteSiteDetector(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, string diagnosticCategory, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.ExecuteSiteDetectorAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Detector
            /// </summary>
            /// <remarks>
            /// Description for Execute Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticDetectorResponse> ExecuteSiteDetectorAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, string diagnosticCategory, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSiteDetectorWithHttpMessagesAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Site Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Site Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            public static IPage<DetectorResponse> ListSiteDetectorResponsesSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string slot)
            {
                return operations.ListSiteDetectorResponsesSlotAsync(resourceGroupName, siteName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Site Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Site Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorResponse>> ListSiteDetectorResponsesSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorResponsesSlotWithHttpMessagesAsync(resourceGroupName, siteName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get site detector response
            /// </summary>
            /// <remarks>
            /// Description for Get site detector response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            public static DetectorResponse GetSiteDetectorResponseSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, string slot, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.GetSiteDetectorResponseSlotAsync(resourceGroupName, siteName, detectorName, slot, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get site detector response
            /// </summary>
            /// <remarks>
            /// Description for Get site detector response
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DetectorResponse> GetSiteDetectorResponseSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, string slot, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDetectorResponseSlotWithHttpMessagesAsync(resourceGroupName, siteName, detectorName, slot, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            public static IPage<DiagnosticCategory> ListSiteDiagnosticCategoriesSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string slot)
            {
                return operations.ListSiteDiagnosticCategoriesSlotAsync(resourceGroupName, siteName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiagnosticCategory>> ListSiteDiagnosticCategoriesSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDiagnosticCategoriesSlotWithHttpMessagesAsync(resourceGroupName, siteName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Diagnostics Category
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Category
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            public static DiagnosticCategory GetSiteDiagnosticCategorySlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot)
            {
                return operations.GetSiteDiagnosticCategorySlotAsync(resourceGroupName, siteName, diagnosticCategory, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Category
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Category
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticCategory> GetSiteDiagnosticCategorySlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDiagnosticCategorySlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            public static IPage<AnalysisDefinition> ListSiteAnalysesSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot)
            {
                return operations.ListSiteAnalysesSlotAsync(resourceGroupName, siteName, diagnosticCategory, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AnalysisDefinition>> ListSiteAnalysesSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteAnalysesSlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analysis
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Name
            /// </param>
            /// <param name='slot'>
            /// Slot - optional
            /// </param>
            public static AnalysisDefinition GetSiteAnalysisSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, string slot)
            {
                return operations.GetSiteAnalysisSlotAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analysis
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Name
            /// </param>
            /// <param name='slot'>
            /// Slot - optional
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalysisDefinition> GetSiteAnalysisSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteAnalysisSlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute Analysis
            /// </summary>
            /// <remarks>
            /// Description for Execute Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Resource Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            public static DiagnosticAnalysis ExecuteSiteAnalysisSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, string slot, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.ExecuteSiteAnalysisSlotAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Analysis
            /// </summary>
            /// <remarks>
            /// Description for Execute Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Resource Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticAnalysis> ExecuteSiteAnalysisSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, string slot, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSiteAnalysisSlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Description for Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            public static IPage<DetectorDefinition> ListSiteDetectorsSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot)
            {
                return operations.ListSiteDetectorsSlotAsync(resourceGroupName, siteName, diagnosticCategory, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Description for Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> ListSiteDetectorsSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorsSlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Description for Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='detectorName'>
            /// Detector Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            public static DetectorDefinition GetSiteDetectorSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, string slot)
            {
                return operations.GetSiteDetectorSlotAsync(resourceGroupName, siteName, diagnosticCategory, detectorName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Description for Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='detectorName'>
            /// Detector Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DetectorDefinition> GetSiteDetectorSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDetectorSlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, detectorName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute Detector
            /// </summary>
            /// <remarks>
            /// Description for Execute Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            public static DiagnosticDetectorResponse ExecuteSiteDetectorSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, string diagnosticCategory, string slot, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.ExecuteSiteDetectorSlotAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Detector
            /// </summary>
            /// <remarks>
            /// Description for Execute Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticDetectorResponse> ExecuteSiteDetectorSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, string diagnosticCategory, string slot, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSiteDetectorSlotWithHttpMessagesAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Hosting Environment Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Hosting Environment Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DetectorResponse> ListHostingEnvironmentDetectorResponsesNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListHostingEnvironmentDetectorResponsesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Hosting Environment Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Hosting Environment Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorResponse>> ListHostingEnvironmentDetectorResponsesNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostingEnvironmentDetectorResponsesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Site Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Site Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DetectorResponse> ListSiteDetectorResponsesNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteDetectorResponsesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Site Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Site Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorResponse>> ListSiteDetectorResponsesNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorResponsesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DiagnosticCategory> ListSiteDiagnosticCategoriesNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteDiagnosticCategoriesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiagnosticCategory>> ListSiteDiagnosticCategoriesNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDiagnosticCategoriesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AnalysisDefinition> ListSiteAnalysesNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteAnalysesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AnalysisDefinition>> ListSiteAnalysesNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteAnalysesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Description for Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DetectorDefinition> ListSiteDetectorsNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteDetectorsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Description for Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> ListSiteDetectorsNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Site Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Site Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DetectorResponse> ListSiteDetectorResponsesSlotNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteDetectorResponsesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Site Detector Responses
            /// </summary>
            /// <remarks>
            /// Description for List Site Detector Responses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorResponse>> ListSiteDetectorResponsesSlotNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorResponsesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DiagnosticCategory> ListSiteDiagnosticCategoriesSlotNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteDiagnosticCategoriesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Description for Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiagnosticCategory>> ListSiteDiagnosticCategoriesSlotNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDiagnosticCategoriesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AnalysisDefinition> ListSiteAnalysesSlotNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteAnalysesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Description for Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AnalysisDefinition>> ListSiteAnalysesSlotNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteAnalysesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Description for Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DetectorDefinition> ListSiteDetectorsSlotNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteDetectorsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Description for Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> ListSiteDetectorsSlotNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
