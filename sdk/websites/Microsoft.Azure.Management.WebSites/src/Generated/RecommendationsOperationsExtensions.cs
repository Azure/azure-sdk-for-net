// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RecommendationsOperations.
    /// </summary>
    public static partial class RecommendationsOperationsExtensions
    {
            /// <summary>
            /// List all recommendations for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all recommendations for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='featured'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical
            /// recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which
            /// returns all recommendations.
            /// </param>
            /// <param name='filter'>
            /// Filter is specified by using OData syntax. Example: $filter=channel eq
            /// 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z
            /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
            /// duration'[PT1H|PT1M|P1D]
            /// </param>
            public static IPage<Recommendation> List(this IRecommendationsOperations operations, bool? featured = default(bool?), string filter = default(string))
            {
                return operations.ListAsync(featured, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all recommendations for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all recommendations for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='featured'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical
            /// recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which
            /// returns all recommendations.
            /// </param>
            /// <param name='filter'>
            /// Filter is specified by using OData syntax. Example: $filter=channel eq
            /// 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z
            /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
            /// duration'[PT1H|PT1M|P1D]
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Recommendation>> ListAsync(this IRecommendationsOperations operations, bool? featured = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(featured, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reset all recommendation opt-out settings for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Reset all recommendation opt-out settings for a
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ResetAllFilters(this IRecommendationsOperations operations)
            {
                operations.ResetAllFiltersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset all recommendation opt-out settings for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Reset all recommendation opt-out settings for a
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetAllFiltersAsync(this IRecommendationsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResetAllFiltersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Disables the specified rule so it will not apply to a subscription in the
            /// future.
            /// </summary>
            /// <remarks>
            /// Description for Disables the specified rule so it will not apply to a
            /// subscription in the future.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Rule name
            /// </param>
            public static void DisableRecommendationForSubscription(this IRecommendationsOperations operations, string name)
            {
                operations.DisableRecommendationForSubscriptionAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disables the specified rule so it will not apply to a subscription in the
            /// future.
            /// </summary>
            /// <remarks>
            /// Description for Disables the specified rule so it will not apply to a
            /// subscription in the future.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Rule name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DisableRecommendationForSubscriptionAsync(this IRecommendationsOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DisableRecommendationForSubscriptionWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get past recommendations for an app, optionally specified by the time
            /// range.
            /// </summary>
            /// <remarks>
            /// Description for Get past recommendations for an app, optionally specified
            /// by the time range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// Name of the hosting environment.
            /// </param>
            /// <param name='expiredOnly'>
            /// Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The
            /// default is &lt;code&gt;true&lt;/code&gt;, which returns only expired
            /// recommendations.
            /// </param>
            /// <param name='filter'>
            /// Filter is specified by using OData syntax. Example: $filter=channel eq
            /// 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z
            /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
            /// duration'[PT1H|PT1M|P1D]
            /// </param>
            public static IPage<Recommendation> ListHistoryForHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, bool? expiredOnly = default(bool?), string filter = default(string))
            {
                return operations.ListHistoryForHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, expiredOnly, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get past recommendations for an app, optionally specified by the time
            /// range.
            /// </summary>
            /// <remarks>
            /// Description for Get past recommendations for an app, optionally specified
            /// by the time range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// Name of the hosting environment.
            /// </param>
            /// <param name='expiredOnly'>
            /// Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The
            /// default is &lt;code&gt;true&lt;/code&gt;, which returns only expired
            /// recommendations.
            /// </param>
            /// <param name='filter'>
            /// Filter is specified by using OData syntax. Example: $filter=channel eq
            /// 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z
            /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
            /// duration'[PT1H|PT1M|P1D]
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Recommendation>> ListHistoryForHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, bool? expiredOnly = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHistoryForHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, hostingEnvironmentName, expiredOnly, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all recommendations for a hosting environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all recommendations for a hosting environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// Name of the app.
            /// </param>
            /// <param name='featured'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical
            /// recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which
            /// returns all recommendations.
            /// </param>
            /// <param name='filter'>
            /// Return only channels specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=channel eq 'Api' or channel eq
            /// 'Notification'
            /// </param>
            public static IPage<Recommendation> ListRecommendedRulesForHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, bool? featured = default(bool?), string filter = default(string))
            {
                return operations.ListRecommendedRulesForHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, featured, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all recommendations for a hosting environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all recommendations for a hosting environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// Name of the app.
            /// </param>
            /// <param name='featured'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical
            /// recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which
            /// returns all recommendations.
            /// </param>
            /// <param name='filter'>
            /// Return only channels specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=channel eq 'Api' or channel eq
            /// 'Notification'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Recommendation>> ListRecommendedRulesForHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, bool? featured = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRecommendedRulesForHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, hostingEnvironmentName, featured, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Disable all recommendations for an app.
            /// </summary>
            /// <remarks>
            /// Description for Disable all recommendations for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the app.
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// </param>
            public static void DisableAllForHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string hostingEnvironmentName)
            {
                operations.DisableAllForHostingEnvironmentAsync(resourceGroupName, environmentName, hostingEnvironmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disable all recommendations for an app.
            /// </summary>
            /// <remarks>
            /// Description for Disable all recommendations for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the app.
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DisableAllForHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string hostingEnvironmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DisableAllForHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, environmentName, hostingEnvironmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reset all recommendation opt-out settings for an app.
            /// </summary>
            /// <remarks>
            /// Description for Reset all recommendation opt-out settings for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the app.
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// </param>
            public static void ResetAllFiltersForHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string hostingEnvironmentName)
            {
                operations.ResetAllFiltersForHostingEnvironmentAsync(resourceGroupName, environmentName, hostingEnvironmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset all recommendation opt-out settings for an app.
            /// </summary>
            /// <remarks>
            /// Description for Reset all recommendation opt-out settings for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the app.
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetAllFiltersForHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string hostingEnvironmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResetAllFiltersForHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, environmentName, hostingEnvironmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a recommendation rule for an app.
            /// </summary>
            /// <remarks>
            /// Description for Get a recommendation rule for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// Name of the hosting environment.
            /// </param>
            /// <param name='name'>
            /// Name of the recommendation.
            /// </param>
            /// <param name='updateSeen'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of
            /// the recommendation object.
            /// </param>
            /// <param name='recommendationId'>
            /// The GUID of the recommendation object if you query an expired one. You
            /// don't need to specify it to query an active entry.
            /// </param>
            public static RecommendationRule GetRuleDetailsByHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, string name, bool? updateSeen = default(bool?), string recommendationId = default(string))
            {
                return operations.GetRuleDetailsByHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, name, updateSeen, recommendationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a recommendation rule for an app.
            /// </summary>
            /// <remarks>
            /// Description for Get a recommendation rule for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// Name of the hosting environment.
            /// </param>
            /// <param name='name'>
            /// Name of the recommendation.
            /// </param>
            /// <param name='updateSeen'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of
            /// the recommendation object.
            /// </param>
            /// <param name='recommendationId'>
            /// The GUID of the recommendation object if you query an expired one. You
            /// don't need to specify it to query an active entry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecommendationRule> GetRuleDetailsByHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, string name, bool? updateSeen = default(bool?), string recommendationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRuleDetailsByHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, hostingEnvironmentName, name, updateSeen, recommendationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Disables the specific rule for a web site permanently.
            /// </summary>
            /// <remarks>
            /// Description for Disables the specific rule for a web site permanently.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='environmentName'>
            /// Site name
            /// </param>
            /// <param name='name'>
            /// Rule name
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// </param>
            public static void DisableRecommendationForHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string name, string hostingEnvironmentName)
            {
                operations.DisableRecommendationForHostingEnvironmentAsync(resourceGroupName, environmentName, name, hostingEnvironmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disables the specific rule for a web site permanently.
            /// </summary>
            /// <remarks>
            /// Description for Disables the specific rule for a web site permanently.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='environmentName'>
            /// Site name
            /// </param>
            /// <param name='name'>
            /// Rule name
            /// </param>
            /// <param name='hostingEnvironmentName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DisableRecommendationForHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string name, string hostingEnvironmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DisableRecommendationForHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, environmentName, name, hostingEnvironmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get past recommendations for an app, optionally specified by the time
            /// range.
            /// </summary>
            /// <remarks>
            /// Description for Get past recommendations for an app, optionally specified
            /// by the time range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Name of the app.
            /// </param>
            /// <param name='expiredOnly'>
            /// Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The
            /// default is &lt;code&gt;true&lt;/code&gt;, which returns only expired
            /// recommendations.
            /// </param>
            /// <param name='filter'>
            /// Filter is specified by using OData syntax. Example: $filter=channel eq
            /// 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z
            /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
            /// duration'[PT1H|PT1M|P1D]
            /// </param>
            public static IPage<Recommendation> ListHistoryForWebApp(this IRecommendationsOperations operations, string resourceGroupName, string siteName, bool? expiredOnly = default(bool?), string filter = default(string))
            {
                return operations.ListHistoryForWebAppAsync(resourceGroupName, siteName, expiredOnly, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get past recommendations for an app, optionally specified by the time
            /// range.
            /// </summary>
            /// <remarks>
            /// Description for Get past recommendations for an app, optionally specified
            /// by the time range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Name of the app.
            /// </param>
            /// <param name='expiredOnly'>
            /// Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The
            /// default is &lt;code&gt;true&lt;/code&gt;, which returns only expired
            /// recommendations.
            /// </param>
            /// <param name='filter'>
            /// Filter is specified by using OData syntax. Example: $filter=channel eq
            /// 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z
            /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
            /// duration'[PT1H|PT1M|P1D]
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Recommendation>> ListHistoryForWebAppAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, bool? expiredOnly = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHistoryForWebAppWithHttpMessagesAsync(resourceGroupName, siteName, expiredOnly, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all recommendations for an app.
            /// </summary>
            /// <remarks>
            /// Description for Get all recommendations for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Name of the app.
            /// </param>
            /// <param name='featured'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical
            /// recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which
            /// returns all recommendations.
            /// </param>
            /// <param name='filter'>
            /// Return only channels specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=channel eq 'Api' or channel eq
            /// 'Notification'
            /// </param>
            public static IPage<Recommendation> ListRecommendedRulesForWebApp(this IRecommendationsOperations operations, string resourceGroupName, string siteName, bool? featured = default(bool?), string filter = default(string))
            {
                return operations.ListRecommendedRulesForWebAppAsync(resourceGroupName, siteName, featured, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all recommendations for an app.
            /// </summary>
            /// <remarks>
            /// Description for Get all recommendations for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Name of the app.
            /// </param>
            /// <param name='featured'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical
            /// recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which
            /// returns all recommendations.
            /// </param>
            /// <param name='filter'>
            /// Return only channels specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=channel eq 'Api' or channel eq
            /// 'Notification'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Recommendation>> ListRecommendedRulesForWebAppAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, bool? featured = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRecommendedRulesForWebAppWithHttpMessagesAsync(resourceGroupName, siteName, featured, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Disable all recommendations for an app.
            /// </summary>
            /// <remarks>
            /// Description for Disable all recommendations for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Name of the app.
            /// </param>
            public static void DisableAllForWebApp(this IRecommendationsOperations operations, string resourceGroupName, string siteName)
            {
                operations.DisableAllForWebAppAsync(resourceGroupName, siteName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disable all recommendations for an app.
            /// </summary>
            /// <remarks>
            /// Description for Disable all recommendations for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DisableAllForWebAppAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DisableAllForWebAppWithHttpMessagesAsync(resourceGroupName, siteName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reset all recommendation opt-out settings for an app.
            /// </summary>
            /// <remarks>
            /// Description for Reset all recommendation opt-out settings for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Name of the app.
            /// </param>
            public static void ResetAllFiltersForWebApp(this IRecommendationsOperations operations, string resourceGroupName, string siteName)
            {
                operations.ResetAllFiltersForWebAppAsync(resourceGroupName, siteName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset all recommendation opt-out settings for an app.
            /// </summary>
            /// <remarks>
            /// Description for Reset all recommendation opt-out settings for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetAllFiltersForWebAppAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResetAllFiltersForWebAppWithHttpMessagesAsync(resourceGroupName, siteName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a recommendation rule for an app.
            /// </summary>
            /// <remarks>
            /// Description for Get a recommendation rule for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Name of the app.
            /// </param>
            /// <param name='name'>
            /// Name of the recommendation.
            /// </param>
            /// <param name='updateSeen'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of
            /// the recommendation object.
            /// </param>
            /// <param name='recommendationId'>
            /// The GUID of the recommendation object if you query an expired one. You
            /// don't need to specify it to query an active entry.
            /// </param>
            public static RecommendationRule GetRuleDetailsByWebApp(this IRecommendationsOperations operations, string resourceGroupName, string siteName, string name, bool? updateSeen = default(bool?), string recommendationId = default(string))
            {
                return operations.GetRuleDetailsByWebAppAsync(resourceGroupName, siteName, name, updateSeen, recommendationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a recommendation rule for an app.
            /// </summary>
            /// <remarks>
            /// Description for Get a recommendation rule for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Name of the app.
            /// </param>
            /// <param name='name'>
            /// Name of the recommendation.
            /// </param>
            /// <param name='updateSeen'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of
            /// the recommendation object.
            /// </param>
            /// <param name='recommendationId'>
            /// The GUID of the recommendation object if you query an expired one. You
            /// don't need to specify it to query an active entry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecommendationRule> GetRuleDetailsByWebAppAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, string name, bool? updateSeen = default(bool?), string recommendationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRuleDetailsByWebAppWithHttpMessagesAsync(resourceGroupName, siteName, name, updateSeen, recommendationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Disables the specific rule for a web site permanently.
            /// </summary>
            /// <remarks>
            /// Description for Disables the specific rule for a web site permanently.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site name
            /// </param>
            /// <param name='name'>
            /// Rule name
            /// </param>
            public static void DisableRecommendationForSite(this IRecommendationsOperations operations, string resourceGroupName, string siteName, string name)
            {
                operations.DisableRecommendationForSiteAsync(resourceGroupName, siteName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disables the specific rule for a web site permanently.
            /// </summary>
            /// <remarks>
            /// Description for Disables the specific rule for a web site permanently.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site name
            /// </param>
            /// <param name='name'>
            /// Rule name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DisableRecommendationForSiteAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DisableRecommendationForSiteWithHttpMessagesAsync(resourceGroupName, siteName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List all recommendations for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all recommendations for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Recommendation> ListNext(this IRecommendationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all recommendations for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all recommendations for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Recommendation>> ListNextAsync(this IRecommendationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get past recommendations for an app, optionally specified by the time
            /// range.
            /// </summary>
            /// <remarks>
            /// Description for Get past recommendations for an app, optionally specified
            /// by the time range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Recommendation> ListHistoryForHostingEnvironmentNext(this IRecommendationsOperations operations, string nextPageLink)
            {
                return operations.ListHistoryForHostingEnvironmentNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get past recommendations for an app, optionally specified by the time
            /// range.
            /// </summary>
            /// <remarks>
            /// Description for Get past recommendations for an app, optionally specified
            /// by the time range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Recommendation>> ListHistoryForHostingEnvironmentNextAsync(this IRecommendationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHistoryForHostingEnvironmentNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all recommendations for a hosting environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all recommendations for a hosting environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Recommendation> ListRecommendedRulesForHostingEnvironmentNext(this IRecommendationsOperations operations, string nextPageLink)
            {
                return operations.ListRecommendedRulesForHostingEnvironmentNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all recommendations for a hosting environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all recommendations for a hosting environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Recommendation>> ListRecommendedRulesForHostingEnvironmentNextAsync(this IRecommendationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRecommendedRulesForHostingEnvironmentNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get past recommendations for an app, optionally specified by the time
            /// range.
            /// </summary>
            /// <remarks>
            /// Description for Get past recommendations for an app, optionally specified
            /// by the time range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Recommendation> ListHistoryForWebAppNext(this IRecommendationsOperations operations, string nextPageLink)
            {
                return operations.ListHistoryForWebAppNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get past recommendations for an app, optionally specified by the time
            /// range.
            /// </summary>
            /// <remarks>
            /// Description for Get past recommendations for an app, optionally specified
            /// by the time range.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Recommendation>> ListHistoryForWebAppNextAsync(this IRecommendationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHistoryForWebAppNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all recommendations for an app.
            /// </summary>
            /// <remarks>
            /// Description for Get all recommendations for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Recommendation> ListRecommendedRulesForWebAppNext(this IRecommendationsOperations operations, string nextPageLink)
            {
                return operations.ListRecommendedRulesForWebAppNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all recommendations for an app.
            /// </summary>
            /// <remarks>
            /// Description for Get all recommendations for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Recommendation>> ListRecommendedRulesForWebAppNextAsync(this IRecommendationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRecommendedRulesForWebAppNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
