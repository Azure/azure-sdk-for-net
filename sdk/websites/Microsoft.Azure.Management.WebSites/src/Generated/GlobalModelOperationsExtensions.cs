// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GlobalModelOperations.
    /// </summary>
    public static partial class GlobalModelOperationsExtensions
    {
            /// <summary>
            /// Get deleted app for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get deleted app for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deletedSiteId'>
            /// The numeric ID of the deleted app, e.g. 12345
            /// </param>
            public static DeletedSite GetDeletedWebApp(this IGlobalModelOperations operations, string deletedSiteId)
            {
                return operations.GetDeletedWebAppAsync(deletedSiteId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get deleted app for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get deleted app for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deletedSiteId'>
            /// The numeric ID of the deleted app, e.g. 12345
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedSite> GetDeletedWebAppAsync(this IGlobalModelOperations operations, string deletedSiteId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedWebAppWithHttpMessagesAsync(deletedSiteId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all deleted apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all deleted apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deletedSiteId'>
            /// The numeric ID of the deleted app, e.g. 12345
            /// </param>
            public static IList<Snapshot> GetDeletedWebAppSnapshots(this IGlobalModelOperations operations, string deletedSiteId)
            {
                return operations.GetDeletedWebAppSnapshotsAsync(deletedSiteId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all deleted apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all deleted apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deletedSiteId'>
            /// The numeric ID of the deleted app, e.g. 12345
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Snapshot>> GetDeletedWebAppSnapshotsAsync(this IGlobalModelOperations operations, string deletedSiteId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedWebAppSnapshotsWithHttpMessagesAsync(deletedSiteId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an operation in a subscription and given region
            /// </summary>
            /// <remarks>
            /// Description for Gets an operation in a subscription and given region
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location name
            /// </param>
            /// <param name='operationId'>
            /// Operation Id
            /// </param>
            public static void GetSubscriptionOperationWithAsyncResponse(this IGlobalModelOperations operations, string location, string operationId)
            {
                operations.GetSubscriptionOperationWithAsyncResponseAsync(location, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an operation in a subscription and given region
            /// </summary>
            /// <remarks>
            /// Description for Gets an operation in a subscription and given region
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location name
            /// </param>
            /// <param name='operationId'>
            /// Operation Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSubscriptionOperationWithAsyncResponseAsync(this IGlobalModelOperations operations, string location, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSubscriptionOperationWithAsyncResponseWithHttpMessagesAsync(location, operationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
