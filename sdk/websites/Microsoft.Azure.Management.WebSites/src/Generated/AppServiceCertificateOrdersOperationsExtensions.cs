// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AppServiceCertificateOrdersOperations.
    /// </summary>
    public static partial class AppServiceCertificateOrdersOperationsExtensions
    {
            /// <summary>
            /// List all certificate orders in a subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all certificate orders in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<AppServiceCertificateOrder> List(this IAppServiceCertificateOrdersOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificate orders in a subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all certificate orders in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificateOrder>> ListAsync(this IAppServiceCertificateOrdersOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validate information for a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Validate information for a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appServiceCertificateOrder'>
            /// Information for a certificate order.
            /// </param>
            public static void ValidatePurchaseInformation(this IAppServiceCertificateOrdersOperations operations, AppServiceCertificateOrder appServiceCertificateOrder)
            {
                operations.ValidatePurchaseInformationAsync(appServiceCertificateOrder).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate information for a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Validate information for a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appServiceCertificateOrder'>
            /// Information for a certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ValidatePurchaseInformationAsync(this IAppServiceCertificateOrdersOperations operations, AppServiceCertificateOrder appServiceCertificateOrder, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ValidatePurchaseInformationWithHttpMessagesAsync(appServiceCertificateOrder, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get certificate orders in a resource group.
            /// </summary>
            /// <remarks>
            /// Description for Get certificate orders in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            public static IPage<AppServiceCertificateOrder> ListByResourceGroup(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get certificate orders in a resource group.
            /// </summary>
            /// <remarks>
            /// Description for Get certificate orders in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificateOrder>> ListByResourceGroupAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Get a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order..
            /// </param>
            public static AppServiceCertificateOrder Get(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName)
            {
                return operations.GetAsync(resourceGroupName, certificateOrderName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Get a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order..
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificateOrder> GetAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, certificateOrderName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a certificate purchase order.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a certificate purchase order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to use for the certificate order.
            /// </param>
            public static AppServiceCertificateOrder CreateOrUpdate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, AppServiceCertificateOrder certificateDistinguishedName)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a certificate purchase order.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a certificate purchase order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to use for the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificateOrder> CreateOrUpdateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, AppServiceCertificateOrder certificateDistinguishedName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Delete an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            public static void Delete(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName)
            {
                operations.DeleteAsync(resourceGroupName, certificateOrderName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Delete an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, certificateOrderName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a certificate purchase order.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a certificate purchase order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to use for the certificate order.
            /// </param>
            public static AppServiceCertificateOrder Update(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, AppServiceCertificateOrderPatchResource certificateDistinguishedName)
            {
                return operations.UpdateAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a certificate purchase order.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a certificate purchase order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to use for the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificateOrder> UpdateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, AppServiceCertificateOrderPatchResource certificateDistinguishedName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all certificates associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for List all certificates associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            public static IPage<AppServiceCertificateResource> ListCertificates(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName)
            {
                return operations.ListCertificatesAsync(resourceGroupName, certificateOrderName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificates associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for List all certificates associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificateResource>> ListCertificatesAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCertificatesWithHttpMessagesAsync(resourceGroupName, certificateOrderName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the certificate associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Get the certificate associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            public static AppServiceCertificateResource GetCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name)
            {
                return operations.GetCertificateAsync(resourceGroupName, certificateOrderName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the certificate associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Get the certificate associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificateResource> GetCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </summary>
            /// <remarks>
            /// Description for Creates or updates a certificate and associates with key
            /// vault secret.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key vault certificate resource Id.
            /// </param>
            public static AppServiceCertificateResource CreateOrUpdateCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificateResource keyVaultCertificate)
            {
                return operations.CreateOrUpdateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </summary>
            /// <remarks>
            /// Description for Creates or updates a certificate and associates with key
            /// vault secret.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key vault certificate resource Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificateResource> CreateOrUpdateCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificateResource keyVaultCertificate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the certificate associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Delete the certificate associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            public static void DeleteCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name)
            {
                operations.DeleteCertificateAsync(resourceGroupName, certificateOrderName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the certificate associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Delete the certificate associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </summary>
            /// <remarks>
            /// Description for Creates or updates a certificate and associates with key
            /// vault secret.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key vault certificate resource Id.
            /// </param>
            public static AppServiceCertificateResource UpdateCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificatePatchResource keyVaultCertificate)
            {
                return operations.UpdateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </summary>
            /// <remarks>
            /// Description for Creates or updates a certificate and associates with key
            /// vault secret.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key vault certificate resource Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificateResource> UpdateCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificatePatchResource keyVaultCertificate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reissue an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Reissue an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='reissueCertificateOrderRequest'>
            /// Parameters for the reissue.
            /// </param>
            public static void Reissue(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, ReissueCertificateOrderRequest reissueCertificateOrderRequest)
            {
                operations.ReissueAsync(resourceGroupName, certificateOrderName, reissueCertificateOrderRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reissue an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Reissue an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='reissueCertificateOrderRequest'>
            /// Parameters for the reissue.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReissueAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, ReissueCertificateOrderRequest reissueCertificateOrderRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ReissueWithHttpMessagesAsync(resourceGroupName, certificateOrderName, reissueCertificateOrderRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Renew an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Renew an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='renewCertificateOrderRequest'>
            /// Renew parameters
            /// </param>
            public static void Renew(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, RenewCertificateOrderRequest renewCertificateOrderRequest)
            {
                operations.RenewAsync(resourceGroupName, certificateOrderName, renewCertificateOrderRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Renew an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Renew an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='renewCertificateOrderRequest'>
            /// Renew parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RenewAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, RenewCertificateOrderRequest renewCertificateOrderRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RenewWithHttpMessagesAsync(resourceGroupName, certificateOrderName, renewCertificateOrderRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Resend certificate email.
            /// </summary>
            /// <remarks>
            /// Description for Resend certificate email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            public static void ResendEmail(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName)
            {
                operations.ResendEmailAsync(resourceGroupName, certificateOrderName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resend certificate email.
            /// </summary>
            /// <remarks>
            /// Description for Resend certificate email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResendEmailAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResendEmailWithHttpMessagesAsync(resourceGroupName, certificateOrderName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='nameIdentifier'>
            /// Email address
            /// </param>
            public static void ResendRequestEmails(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, NameIdentifier nameIdentifier)
            {
                operations.ResendRequestEmailsAsync(resourceGroupName, certificateOrderName, nameIdentifier).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='nameIdentifier'>
            /// Email address
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResendRequestEmailsAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, NameIdentifier nameIdentifier, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResendRequestEmailsWithHttpMessagesAsync(resourceGroupName, certificateOrderName, nameIdentifier, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='siteSealRequest'>
            /// Site seal request.
            /// </param>
            public static SiteSeal RetrieveSiteSeal(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, SiteSealRequest siteSealRequest)
            {
                return operations.RetrieveSiteSealAsync(resourceGroupName, certificateOrderName, siteSealRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='siteSealRequest'>
            /// Site seal request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSeal> RetrieveSiteSealAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, SiteSealRequest siteSealRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveSiteSealWithHttpMessagesAsync(resourceGroupName, certificateOrderName, siteSealRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            public static void VerifyDomainOwnership(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName)
            {
                operations.VerifyDomainOwnershipAsync(resourceGroupName, certificateOrderName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Description for Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task VerifyDomainOwnershipAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.VerifyDomainOwnershipWithHttpMessagesAsync(resourceGroupName, certificateOrderName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve the list of certificate actions.
            /// </summary>
            /// <remarks>
            /// Description for Retrieve the list of certificate actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate order.
            /// </param>
            public static IList<CertificateOrderAction> RetrieveCertificateActions(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return operations.RetrieveCertificateActionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the list of certificate actions.
            /// </summary>
            /// <remarks>
            /// Description for Retrieve the list of certificate actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CertificateOrderAction>> RetrieveCertificateActionsAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveCertificateActionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve email history.
            /// </summary>
            /// <remarks>
            /// Description for Retrieve email history.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate order.
            /// </param>
            public static IList<CertificateEmail> RetrieveCertificateEmailHistory(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return operations.RetrieveCertificateEmailHistoryAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve email history.
            /// </summary>
            /// <remarks>
            /// Description for Retrieve email history.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CertificateEmail>> RetrieveCertificateEmailHistoryAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveCertificateEmailHistoryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a certificate purchase order.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a certificate purchase order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to use for the certificate order.
            /// </param>
            public static AppServiceCertificateOrder BeginCreateOrUpdate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, AppServiceCertificateOrder certificateDistinguishedName)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a certificate purchase order.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a certificate purchase order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to use for the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificateOrder> BeginCreateOrUpdateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, AppServiceCertificateOrder certificateDistinguishedName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </summary>
            /// <remarks>
            /// Description for Creates or updates a certificate and associates with key
            /// vault secret.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key vault certificate resource Id.
            /// </param>
            public static AppServiceCertificateResource BeginCreateOrUpdateCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificateResource keyVaultCertificate)
            {
                return operations.BeginCreateOrUpdateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </summary>
            /// <remarks>
            /// Description for Creates or updates a certificate and associates with key
            /// vault secret.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key vault certificate resource Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificateResource> BeginCreateOrUpdateCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificateResource keyVaultCertificate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all certificate orders in a subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all certificate orders in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AppServiceCertificateOrder> ListNext(this IAppServiceCertificateOrdersOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificate orders in a subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all certificate orders in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificateOrder>> ListNextAsync(this IAppServiceCertificateOrdersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get certificate orders in a resource group.
            /// </summary>
            /// <remarks>
            /// Description for Get certificate orders in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AppServiceCertificateOrder> ListByResourceGroupNext(this IAppServiceCertificateOrdersOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get certificate orders in a resource group.
            /// </summary>
            /// <remarks>
            /// Description for Get certificate orders in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificateOrder>> ListByResourceGroupNextAsync(this IAppServiceCertificateOrdersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all certificates associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for List all certificates associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AppServiceCertificateResource> ListCertificatesNext(this IAppServiceCertificateOrdersOperations operations, string nextPageLink)
            {
                return operations.ListCertificatesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificates associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Description for List all certificates associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificateResource>> ListCertificatesNextAsync(this IAppServiceCertificateOrdersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCertificatesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
