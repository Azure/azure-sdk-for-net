// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StaticSitesOperations.
    /// </summary>
    public static partial class StaticSitesOperationsExtensions
    {
            /// <summary>
            /// Get all Static Sites for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all Static Sites for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<StaticSiteARMResource> List(this IStaticSitesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Static Sites for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all Static Sites for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteARMResource>> ListAsync(this IStaticSitesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all static sites in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static sites in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            public static IPage<StaticSiteARMResource> GetStaticSitesByResourceGroup(this IStaticSitesOperations operations, string resourceGroupName)
            {
                return operations.GetStaticSitesByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all static sites in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static sites in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteARMResource>> GetStaticSitesByResourceGroupAsync(this IStaticSitesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStaticSitesByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the details of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            public static StaticSiteARMResource GetStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name)
            {
                return operations.GetStaticSiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the details of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StaticSiteARMResource> GetStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStaticSiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new static site in an existing resource group, or updates an
            /// existing static site.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new static site in an existing resource group, or
            /// updates an existing static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site to create or update.
            /// </param>
            /// <param name='staticSiteEnvelope'>
            /// A JSON representation of the staticsite properties. See example.
            /// </param>
            public static StaticSiteARMResource CreateOrUpdateStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteARMResource staticSiteEnvelope)
            {
                return operations.CreateOrUpdateStaticSiteAsync(resourceGroupName, name, staticSiteEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new static site in an existing resource group, or updates an
            /// existing static site.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new static site in an existing resource group, or
            /// updates an existing static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site to create or update.
            /// </param>
            /// <param name='staticSiteEnvelope'>
            /// A JSON representation of the staticsite properties. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StaticSiteARMResource> CreateOrUpdateStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteARMResource staticSiteEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateStaticSiteWithHttpMessagesAsync(resourceGroupName, name, staticSiteEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a static site.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site to delete.
            /// </param>
            public static void DeleteStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name)
            {
                operations.DeleteStaticSiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a static site.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteStaticSiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new static site in an existing resource group, or updates an
            /// existing static site.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new static site in an existing resource group, or
            /// updates an existing static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site to create or update.
            /// </param>
            /// <param name='staticSiteEnvelope'>
            /// A JSON representation of the staticsite properties. See example.
            /// </param>
            public static StaticSiteARMResource UpdateStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSitePatchResource staticSiteEnvelope)
            {
                return operations.UpdateStaticSiteAsync(resourceGroupName, name, staticSiteEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new static site in an existing resource group, or updates an
            /// existing static site.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new static site in an existing resource group, or
            /// updates an existing static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site to create or update.
            /// </param>
            /// <param name='staticSiteEnvelope'>
            /// A JSON representation of the staticsite properties. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StaticSiteARMResource> UpdateStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSitePatchResource staticSiteEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateStaticSiteWithHttpMessagesAsync(resourceGroupName, name, staticSiteEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of users of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the list of users of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='authprovider'>
            /// The auth provider for the users.
            /// </param>
            public static IPage<StaticSiteUserARMResource> ListStaticSiteUsers(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider)
            {
                return operations.ListStaticSiteUsersAsync(resourceGroupName, name, authprovider).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of users of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the list of users of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='authprovider'>
            /// The auth provider for the users.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteUserARMResource>> ListStaticSiteUsersAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStaticSiteUsersWithHttpMessagesAsync(resourceGroupName, name, authprovider, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the user entry from the static site.
            /// </summary>
            /// <remarks>
            /// Description for Deletes the user entry from the static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the staticsite.
            /// </param>
            /// <param name='authprovider'>
            /// The auth provider for this user.
            /// </param>
            /// <param name='userid'>
            /// The user id of the user.
            /// </param>
            public static void DeleteStaticSiteUser(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider, string userid)
            {
                operations.DeleteStaticSiteUserAsync(resourceGroupName, name, authprovider, userid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the user entry from the static site.
            /// </summary>
            /// <remarks>
            /// Description for Deletes the user entry from the static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the staticsite.
            /// </param>
            /// <param name='authprovider'>
            /// The auth provider for this user.
            /// </param>
            /// <param name='userid'>
            /// The user id of the user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteStaticSiteUserAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider, string userid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteStaticSiteUserWithHttpMessagesAsync(resourceGroupName, name, authprovider, userid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a user entry with the listed roles
            /// </summary>
            /// <remarks>
            /// Description for Updates a user entry with the listed roles
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='authprovider'>
            /// The auth provider for this user.
            /// </param>
            /// <param name='userid'>
            /// The user id of the user.
            /// </param>
            /// <param name='staticSiteUserEnvelope'>
            /// A JSON representation of the StaticSiteUser properties. See example.
            /// </param>
            public static StaticSiteUserARMResource UpdateStaticSiteUser(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider, string userid, StaticSiteUserARMResource staticSiteUserEnvelope)
            {
                return operations.UpdateStaticSiteUserAsync(resourceGroupName, name, authprovider, userid, staticSiteUserEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user entry with the listed roles
            /// </summary>
            /// <remarks>
            /// Description for Updates a user entry with the listed roles
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='authprovider'>
            /// The auth provider for this user.
            /// </param>
            /// <param name='userid'>
            /// The user id of the user.
            /// </param>
            /// <param name='staticSiteUserEnvelope'>
            /// A JSON representation of the StaticSiteUser properties. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StaticSiteUserARMResource> UpdateStaticSiteUserAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider, string userid, StaticSiteUserARMResource staticSiteUserEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateStaticSiteUserWithHttpMessagesAsync(resourceGroupName, name, authprovider, userid, staticSiteUserEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all static site builds for a particular static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static site builds for a particular static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            public static IPage<StaticSiteBuildARMResource> GetStaticSiteBuilds(this IStaticSitesOperations operations, string resourceGroupName, string name)
            {
                return operations.GetStaticSiteBuildsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all static site builds for a particular static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static site builds for a particular static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteBuildARMResource>> GetStaticSiteBuildsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStaticSiteBuildsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of a static site build.
            /// </summary>
            /// <remarks>
            /// Description for Gets the details of a static site build.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='prId'>
            /// The stage site identifier.
            /// </param>
            public static StaticSiteBuildARMResource GetStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string prId)
            {
                return operations.GetStaticSiteBuildAsync(resourceGroupName, name, prId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a static site build.
            /// </summary>
            /// <remarks>
            /// Description for Gets the details of a static site build.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='prId'>
            /// The stage site identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StaticSiteBuildARMResource> GetStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string prId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, prId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a static site build.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a static site build.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='prId'>
            /// The stage site identifier.
            /// </param>
            public static void DeleteStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string prId)
            {
                operations.DeleteStaticSiteBuildAsync(resourceGroupName, name, prId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a static site build.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a static site build.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='prId'>
            /// The stage site identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string prId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, prId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates the function app settings of a static site build.
            /// </summary>
            /// <remarks>
            /// Description for Creates or updates the function app settings of a static
            /// site build.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='prId'>
            /// The stage site identifier.
            /// </param>
            /// <param name='appSettings'>
            /// </param>
            public static StringDictionary CreateOrUpdateStaticSiteBuildFunctionAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name, string prId, StringDictionary appSettings)
            {
                return operations.CreateOrUpdateStaticSiteBuildFunctionAppSettingsAsync(resourceGroupName, name, prId, appSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the function app settings of a static site build.
            /// </summary>
            /// <remarks>
            /// Description for Creates or updates the function app settings of a static
            /// site build.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='prId'>
            /// The stage site identifier.
            /// </param>
            /// <param name='appSettings'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> CreateOrUpdateStaticSiteBuildFunctionAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string prId, StringDictionary appSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateStaticSiteBuildFunctionAppSettingsWithHttpMessagesAsync(resourceGroupName, name, prId, appSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the functions of a particular static site build.
            /// </summary>
            /// <remarks>
            /// Description for Gets the functions of a particular static site build.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='prId'>
            /// The stage site identifier.
            /// </param>
            public static IPage<StaticSiteFunctionOverviewARMResource> ListStaticSiteBuildFunctions(this IStaticSitesOperations operations, string resourceGroupName, string name, string prId)
            {
                return operations.ListStaticSiteBuildFunctionsAsync(resourceGroupName, name, prId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the functions of a particular static site build.
            /// </summary>
            /// <remarks>
            /// Description for Gets the functions of a particular static site build.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='prId'>
            /// The stage site identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteFunctionOverviewARMResource>> ListStaticSiteBuildFunctionsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string prId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStaticSiteBuildFunctionsWithHttpMessagesAsync(resourceGroupName, name, prId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the application settings of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the application settings of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='prId'>
            /// The stage site identifier.
            /// </param>
            public static StringDictionary ListStaticSiteBuildFunctionAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name, string prId)
            {
                return operations.ListStaticSiteBuildFunctionAppSettingsAsync(resourceGroupName, name, prId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the application settings of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the application settings of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='prId'>
            /// The stage site identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> ListStaticSiteBuildFunctionAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string prId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStaticSiteBuildFunctionAppSettingsWithHttpMessagesAsync(resourceGroupName, name, prId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the function app settings of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Creates or updates the function app settings of a static
            /// site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='appSettings'>
            /// </param>
            public static StringDictionary CreateOrUpdateStaticSiteFunctionAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name, StringDictionary appSettings)
            {
                return operations.CreateOrUpdateStaticSiteFunctionAppSettingsAsync(resourceGroupName, name, appSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the function app settings of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Creates or updates the function app settings of a static
            /// site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='appSettings'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> CreateOrUpdateStaticSiteFunctionAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StringDictionary appSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateStaticSiteFunctionAppSettingsWithHttpMessagesAsync(resourceGroupName, name, appSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an invitation link for a user with the role
            /// </summary>
            /// <remarks>
            /// Description for Creates an invitation link for a user with the role
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='staticSiteUserRolesInvitationEnvelope'>
            /// </param>
            public static StaticSiteUserInvitationResponseResource CreateUserRolesInvitationLink(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope)
            {
                return operations.CreateUserRolesInvitationLinkAsync(resourceGroupName, name, staticSiteUserRolesInvitationEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an invitation link for a user with the role
            /// </summary>
            /// <remarks>
            /// Description for Creates an invitation link for a user with the role
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='staticSiteUserRolesInvitationEnvelope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StaticSiteUserInvitationResponseResource> CreateUserRolesInvitationLinkAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserRolesInvitationLinkWithHttpMessagesAsync(resourceGroupName, name, staticSiteUserRolesInvitationEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all static site custom domains for a particular static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static site custom domains for a particular static
            /// site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site resource to search in.
            /// </param>
            public static IPage<StaticSiteCustomDomainOverviewARMResource> ListStaticSiteCustomDomains(this IStaticSitesOperations operations, string resourceGroupName, string name)
            {
                return operations.ListStaticSiteCustomDomainsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all static site custom domains for a particular static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static site custom domains for a particular static
            /// site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site resource to search in.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteCustomDomainOverviewARMResource>> ListStaticSiteCustomDomainsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStaticSiteCustomDomainsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new static site custom domain in an existing resource group and
            /// static site.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new static site custom domain in an existing
            /// resource group and static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='domainName'>
            /// The custom domain to create.
            /// </param>
            public static StaticSiteCustomDomainOverviewARMResource CreateOrUpdateStaticSiteCustomDomain(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName)
            {
                return operations.CreateOrUpdateStaticSiteCustomDomainAsync(resourceGroupName, name, domainName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new static site custom domain in an existing resource group and
            /// static site.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new static site custom domain in an existing
            /// resource group and static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='domainName'>
            /// The custom domain to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StaticSiteCustomDomainOverviewARMResource> CreateOrUpdateStaticSiteCustomDomainAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateStaticSiteCustomDomainWithHttpMessagesAsync(resourceGroupName, name, domainName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a custom domain.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a custom domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='domainName'>
            /// The custom domain to delete.
            /// </param>
            public static void DeleteStaticSiteCustomDomain(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName)
            {
                operations.DeleteStaticSiteCustomDomainAsync(resourceGroupName, name, domainName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a custom domain.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a custom domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='domainName'>
            /// The custom domain to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteStaticSiteCustomDomainAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteStaticSiteCustomDomainWithHttpMessagesAsync(resourceGroupName, name, domainName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Validates a particular custom domain can be added to a static site.
            /// </summary>
            /// <remarks>
            /// Description for Validates a particular custom domain can be added to a
            /// static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='domainName'>
            /// The custom domain to validate.
            /// </param>
            public static void ValidateCustomDomainCanBeAddedToStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName)
            {
                operations.ValidateCustomDomainCanBeAddedToStaticSiteAsync(resourceGroupName, name, domainName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates a particular custom domain can be added to a static site.
            /// </summary>
            /// <remarks>
            /// Description for Validates a particular custom domain can be added to a
            /// static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='domainName'>
            /// The custom domain to validate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ValidateCustomDomainCanBeAddedToStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ValidateCustomDomainCanBeAddedToStaticSiteWithHttpMessagesAsync(resourceGroupName, name, domainName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Detaches a static site.
            /// </summary>
            /// <remarks>
            /// Description for Detaches a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site to detach.
            /// </param>
            public static void DetachStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name)
            {
                operations.DetachStaticSiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Detaches a static site.
            /// </summary>
            /// <remarks>
            /// Description for Detaches a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site to detach.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DetachStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DetachStaticSiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the functions of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the functions of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            public static IPage<StaticSiteFunctionOverviewARMResource> ListStaticSiteFunctions(this IStaticSitesOperations operations, string resourceGroupName, string name)
            {
                return operations.ListStaticSiteFunctionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the functions of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the functions of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteFunctionOverviewARMResource>> ListStaticSiteFunctionsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStaticSiteFunctionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the application settings of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the application settings of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            public static StringDictionary ListStaticSiteFunctionAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name)
            {
                return operations.ListStaticSiteFunctionAppSettingsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the application settings of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the application settings of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> ListStaticSiteFunctionAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStaticSiteFunctionAppSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the secrets for an existing static site.
            /// </summary>
            /// <remarks>
            /// Description for Lists the secrets for an existing static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            public static StringDictionary ListStaticSiteSecrets(this IStaticSitesOperations operations, string resourceGroupName, string name)
            {
                return operations.ListStaticSiteSecretsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the secrets for an existing static site.
            /// </summary>
            /// <remarks>
            /// Description for Lists the secrets for an existing static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> ListStaticSiteSecretsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStaticSiteSecretsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resets the api key for an existing static site.
            /// </summary>
            /// <remarks>
            /// Description for Resets the api key for an existing static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='resetPropertiesEnvelope'>
            /// </param>
            public static void ResetStaticSiteApiKey(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteResetPropertiesARMResource resetPropertiesEnvelope)
            {
                operations.ResetStaticSiteApiKeyAsync(resourceGroupName, name, resetPropertiesEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the api key for an existing static site.
            /// </summary>
            /// <remarks>
            /// Description for Resets the api key for an existing static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the static site.
            /// </param>
            /// <param name='resetPropertiesEnvelope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetStaticSiteApiKeyAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteResetPropertiesARMResource resetPropertiesEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResetStaticSiteApiKeyWithHttpMessagesAsync(resourceGroupName, name, resetPropertiesEnvelope, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all Static Sites for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all Static Sites for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StaticSiteARMResource> ListNext(this IStaticSitesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Static Sites for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all Static Sites for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteARMResource>> ListNextAsync(this IStaticSitesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all static sites in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static sites in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StaticSiteARMResource> GetStaticSitesByResourceGroupNext(this IStaticSitesOperations operations, string nextPageLink)
            {
                return operations.GetStaticSitesByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all static sites in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static sites in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteARMResource>> GetStaticSitesByResourceGroupNextAsync(this IStaticSitesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStaticSitesByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of users of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the list of users of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StaticSiteUserARMResource> ListStaticSiteUsersNext(this IStaticSitesOperations operations, string nextPageLink)
            {
                return operations.ListStaticSiteUsersNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of users of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the list of users of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteUserARMResource>> ListStaticSiteUsersNextAsync(this IStaticSitesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStaticSiteUsersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all static site builds for a particular static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static site builds for a particular static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StaticSiteBuildARMResource> GetStaticSiteBuildsNext(this IStaticSitesOperations operations, string nextPageLink)
            {
                return operations.GetStaticSiteBuildsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all static site builds for a particular static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static site builds for a particular static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteBuildARMResource>> GetStaticSiteBuildsNextAsync(this IStaticSitesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStaticSiteBuildsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the functions of a particular static site build.
            /// </summary>
            /// <remarks>
            /// Description for Gets the functions of a particular static site build.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StaticSiteFunctionOverviewARMResource> ListStaticSiteBuildFunctionsNext(this IStaticSitesOperations operations, string nextPageLink)
            {
                return operations.ListStaticSiteBuildFunctionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the functions of a particular static site build.
            /// </summary>
            /// <remarks>
            /// Description for Gets the functions of a particular static site build.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteFunctionOverviewARMResource>> ListStaticSiteBuildFunctionsNextAsync(this IStaticSitesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStaticSiteBuildFunctionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all static site custom domains for a particular static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static site custom domains for a particular static
            /// site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StaticSiteCustomDomainOverviewARMResource> ListStaticSiteCustomDomainsNext(this IStaticSitesOperations operations, string nextPageLink)
            {
                return operations.ListStaticSiteCustomDomainsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all static site custom domains for a particular static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets all static site custom domains for a particular static
            /// site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteCustomDomainOverviewARMResource>> ListStaticSiteCustomDomainsNextAsync(this IStaticSitesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStaticSiteCustomDomainsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the functions of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the functions of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StaticSiteFunctionOverviewARMResource> ListStaticSiteFunctionsNext(this IStaticSitesOperations operations, string nextPageLink)
            {
                return operations.ListStaticSiteFunctionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the functions of a static site.
            /// </summary>
            /// <remarks>
            /// Description for Gets the functions of a static site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StaticSiteFunctionOverviewARMResource>> ListStaticSiteFunctionsNextAsync(this IStaticSitesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStaticSiteFunctionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
