// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ResourceHealthMetadataOperations.
    /// </summary>
    public static partial class ResourceHealthMetadataOperationsExtensions
    {
            /// <summary>
            /// List all ResourceHealthMetadata for all sites in the subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all ResourceHealthMetadata for all sites in the
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ResourceHealthMetadata> List(this IResourceHealthMetadataOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all ResourceHealthMetadata for all sites in the subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all ResourceHealthMetadata for all sites in the
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceHealthMetadata>> ListAsync(this IResourceHealthMetadataOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all ResourceHealthMetadata for all sites in the resource group in the
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all ResourceHealthMetadata for all sites in the
            /// resource group in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            public static IPage<ResourceHealthMetadata> ListByResourceGroup(this IResourceHealthMetadataOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all ResourceHealthMetadata for all sites in the resource group in the
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all ResourceHealthMetadata for all sites in the
            /// resource group in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceHealthMetadata>> ListByResourceGroupAsync(this IResourceHealthMetadataOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site as a
            /// collection
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site as a collection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            public static IPage<ResourceHealthMetadata> ListBySite(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name)
            {
                return operations.ListBySiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site as a
            /// collection
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site as a collection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceHealthMetadata>> ListBySiteAsync(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static ResourceHealthMetadata GetBySite(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name)
            {
                return operations.GetBySiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceHealthMetadata> GetBySiteAsync(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBySiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site as a
            /// collection
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site as a collection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IPage<ResourceHealthMetadata> ListBySiteSlot(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.ListBySiteSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site as a
            /// collection
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site as a collection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceHealthMetadata>> ListBySiteSlotAsync(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySiteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static ResourceHealthMetadata GetBySiteSlot(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, string slot)
            {
                return operations.GetBySiteSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceHealthMetadata> GetBySiteSlotAsync(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBySiteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all ResourceHealthMetadata for all sites in the subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all ResourceHealthMetadata for all sites in the
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceHealthMetadata> ListNext(this IResourceHealthMetadataOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all ResourceHealthMetadata for all sites in the subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all ResourceHealthMetadata for all sites in the
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceHealthMetadata>> ListNextAsync(this IResourceHealthMetadataOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all ResourceHealthMetadata for all sites in the resource group in the
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all ResourceHealthMetadata for all sites in the
            /// resource group in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceHealthMetadata> ListByResourceGroupNext(this IResourceHealthMetadataOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all ResourceHealthMetadata for all sites in the resource group in the
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Description for List all ResourceHealthMetadata for all sites in the
            /// resource group in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceHealthMetadata>> ListByResourceGroupNextAsync(this IResourceHealthMetadataOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site as a
            /// collection
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site as a collection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceHealthMetadata> ListBySiteNext(this IResourceHealthMetadataOperations operations, string nextPageLink)
            {
                return operations.ListBySiteNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site as a
            /// collection
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site as a collection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceHealthMetadata>> ListBySiteNextAsync(this IResourceHealthMetadataOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySiteNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site as a
            /// collection
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site as a collection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceHealthMetadata> ListBySiteSlotNext(this IResourceHealthMetadataOperations operations, string nextPageLink)
            {
                return operations.ListBySiteSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the category of ResourceHealthMetadata to use for the given site as a
            /// collection
            /// </summary>
            /// <remarks>
            /// Description for Gets the category of ResourceHealthMetadata to use for the
            /// given site as a collection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceHealthMetadata>> ListBySiteSlotNextAsync(this IResourceHealthMetadataOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySiteSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
