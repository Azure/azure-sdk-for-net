// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AppServiceEnvironmentsOperations.
    /// </summary>
    public static partial class AppServiceEnvironmentsOperationsExtensions
    {
            /// <summary>
            /// Get all App Service Environments for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service Environments for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<AppServiceEnvironmentResource> List(this IAppServiceEnvironmentsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all App Service Environments for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service Environments for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceEnvironmentResource>> ListAsync(this IAppServiceEnvironmentsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all App Service Environments in a resource group.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service Environments in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            public static IPage<AppServiceEnvironmentResource> ListByResourceGroup(this IAppServiceEnvironmentsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all App Service Environments in a resource group.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service Environments in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceEnvironmentResource>> ListByResourceGroupAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the properties of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the properties of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static AppServiceEnvironmentResource Get(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the properties of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the properties of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceEnvironmentResource> GetAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Create or update an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Configuration details of the App Service Environment.
            /// </param>
            public static AppServiceEnvironmentResource CreateOrUpdate(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentResource hostingEnvironmentEnvelope)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, name, hostingEnvironmentEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Create or update an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Configuration details of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceEnvironmentResource> CreateOrUpdateAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentResource hostingEnvironmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Delete an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='forceDelete'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App
            /// Service Environment contains resources. The default is
            /// &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            public static void Delete(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?))
            {
                operations.DeleteAsync(resourceGroupName, name, forceDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Delete an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='forceDelete'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App
            /// Service Environment contains resources. The default is
            /// &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Create or update an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Configuration details of the App Service Environment.
            /// </param>
            public static AppServiceEnvironmentResource Update(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentPatchResource hostingEnvironmentEnvelope)
            {
                return operations.UpdateAsync(resourceGroupName, name, hostingEnvironmentEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Create or update an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Configuration details of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceEnvironmentResource> UpdateAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentPatchResource hostingEnvironmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the used, available, and total worker capacity an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the used, available, and total worker capacity an App
            /// Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<StampCapacity> ListCapacities(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListCapacitiesAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the used, available, and total worker capacity an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the used, available, and total worker capacity an App
            /// Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StampCapacity>> ListCapacitiesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCapacitiesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get IP addresses assigned to an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get IP addresses assigned to an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static AddressResponse GetVipInfo(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetVipInfoAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get IP addresses assigned to an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get IP addresses assigned to an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResponse> GetVipInfoAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVipInfoWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Move an App Service Environment to a different VNET.
            /// </summary>
            /// <remarks>
            /// Description for Move an App Service Environment to a different VNET.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='vnetInfo'>
            /// Details for the new virtual network.
            /// </param>
            public static IPage<Site> ChangeVnet(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, VirtualNetworkProfile vnetInfo)
            {
                return operations.ChangeVnetAsync(resourceGroupName, name, vnetInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Move an App Service Environment to a different VNET.
            /// </summary>
            /// <remarks>
            /// Description for Move an App Service Environment to a different VNET.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='vnetInfo'>
            /// Details for the new virtual network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ChangeVnetAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, VirtualNetworkProfile vnetInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeVnetWithHttpMessagesAsync(resourceGroupName, name, vnetInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get diagnostic information for an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get diagnostic information for an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IList<HostingEnvironmentDiagnostics> ListDiagnostics(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListDiagnosticsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get diagnostic information for an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get diagnostic information for an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HostingEnvironmentDiagnostics>> ListDiagnosticsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDiagnosticsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a diagnostics item for an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get a diagnostics item for an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='diagnosticsName'>
            /// Name of the diagnostics item.
            /// </param>
            public static HostingEnvironmentDiagnostics GetDiagnosticsItem(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string diagnosticsName)
            {
                return operations.GetDiagnosticsItemAsync(resourceGroupName, name, diagnosticsName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a diagnostics item for an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get a diagnostics item for an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='diagnosticsName'>
            /// Name of the diagnostics item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironmentDiagnostics> GetDiagnosticsItemAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string diagnosticsName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticsItemWithHttpMessagesAsync(resourceGroupName, name, diagnosticsName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the network endpoints of all inbound dependencies of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the network endpoints of all inbound dependencies of an
            /// App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<InboundEnvironmentEndpoint> GetInboundNetworkDependenciesEndpoints(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetInboundNetworkDependenciesEndpointsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the network endpoints of all inbound dependencies of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the network endpoints of all inbound dependencies of an
            /// App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InboundEnvironmentEndpoint>> GetInboundNetworkDependenciesEndpointsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInboundNetworkDependenciesEndpointsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all multi-role pools.
            /// </summary>
            /// <remarks>
            /// Description for Get all multi-role pools.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<WorkerPoolResource> ListMultiRolePools(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListMultiRolePoolsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all multi-role pools.
            /// </summary>
            /// <remarks>
            /// Description for Get all multi-role pools.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPoolResource>> ListMultiRolePoolsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get properties of a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Get properties of a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static WorkerPoolResource GetMultiRolePool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetMultiRolePoolAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get properties of a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Get properties of a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResource> GetMultiRolePoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of the multi-role pool.
            /// </param>
            public static WorkerPoolResource CreateOrUpdateMultiRolePool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope)
            {
                return operations.CreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of the multi-role pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResource> CreateOrUpdateMultiRolePoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of the multi-role pool.
            /// </param>
            public static WorkerPoolResource UpdateMultiRolePool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope)
            {
                return operations.UpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of the multi-role pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResource> UpdateMultiRolePoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a multi-role pool of an
            /// App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a specific instance of a
            /// multi-role pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='instance'>
            /// Name of the instance in the multi-role pool.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListMultiRolePoolInstanceMetricDefinitions(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string instance)
            {
                return operations.ListMultiRolePoolInstanceMetricDefinitionsAsync(resourceGroupName, name, instance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a multi-role pool of an
            /// App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a specific instance of a
            /// multi-role pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='instance'>
            /// Name of the instance in the multi-role pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListMultiRolePoolInstanceMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string instance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolInstanceMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, instance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a multi-role pool of an App
            /// Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListMultiRoleMetricDefinitions(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListMultiRoleMetricDefinitionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a multi-role pool of an App
            /// Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListMultiRoleMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRoleMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get available SKUs for scaling a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Get available SKUs for scaling a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<SkuInfo> ListMultiRolePoolSkus(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListMultiRolePoolSkusAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available SKUs for scaling a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Get available SKUs for scaling a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> ListMultiRolePoolSkusAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolSkusWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get usage metrics for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get usage metrics for a multi-role pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<Usage> ListMultiRoleUsages(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListMultiRoleUsagesAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get usage metrics for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get usage metrics for a multi-role pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Usage>> ListMultiRoleUsagesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRoleUsagesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all currently running operations on the App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for List all currently running operations on the App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IList<Operation> ListOperations(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListOperationsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all currently running operations on the App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for List all currently running operations on the App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Operation>> ListOperationsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOperationsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the network endpoints of all outbound dependencies of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the network endpoints of all outbound dependencies of
            /// an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<OutboundEnvironmentEndpoint> GetOutboundNetworkDependenciesEndpoints(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetOutboundNetworkDependenciesEndpointsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the network endpoints of all outbound dependencies of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the network endpoints of all outbound dependencies of
            /// an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OutboundEnvironmentEndpoint>> GetOutboundNetworkDependenciesEndpointsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOutboundNetworkDependenciesEndpointsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reboot all machines in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Reboot all machines in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static void Reboot(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                operations.RebootAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reboot all machines in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Reboot all machines in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RebootAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RebootWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<Site> Resume(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.ResumeAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ResumeAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all App Service plans in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service plans in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<AppServicePlan> ListAppServicePlans(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListAppServicePlansAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all App Service plans in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service plans in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServicePlan>> ListAppServicePlansAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppServicePlansWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all apps in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all apps in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Comma separated list of app properties to include.
            /// </param>
            public static IPage<Site> ListWebApps(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string))
            {
                return operations.ListWebAppsAsync(resourceGroupName, name, propertiesToInclude).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all apps in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all apps in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Comma separated list of app properties to include.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListWebAppsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebAppsWithHttpMessagesAsync(resourceGroupName, name, propertiesToInclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<Site> Suspend(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.SuspendAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> SuspendAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuspendWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get global usage metrics of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get global usage metrics of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq
            /// 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<CsmUsageQuota> ListUsages(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string filter = default(string))
            {
                return operations.ListUsagesAsync(resourceGroupName, name, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get global usage metrics of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get global usage metrics of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq
            /// 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all worker pools of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all worker pools of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<WorkerPoolResource> ListWorkerPools(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.ListWorkerPoolsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all worker pools of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all worker pools of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPoolResource>> ListWorkerPoolsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get properties of a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Get properties of a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            public static WorkerPoolResource GetWorkerPool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return operations.GetWorkerPoolAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get properties of a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Get properties of a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResource> GetWorkerPoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of the worker pool.
            /// </param>
            public static WorkerPoolResource CreateOrUpdateWorkerPool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope)
            {
                return operations.CreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResource> CreateOrUpdateWorkerPoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of the worker pool.
            /// </param>
            public static WorkerPoolResource UpdateWorkerPool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope)
            {
                return operations.UpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResource> UpdateWorkerPoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a worker pool of an App
            /// Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a specific instance of a worker
            /// pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='instance'>
            /// Name of the instance in the worker pool.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListWorkerPoolInstanceMetricDefinitions(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance)
            {
                return operations.ListWorkerPoolInstanceMetricDefinitionsAsync(resourceGroupName, name, workerPoolName, instance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a worker pool of an App
            /// Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a specific instance of a worker
            /// pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='instance'>
            /// Name of the instance in the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListWorkerPoolInstanceMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolInstanceMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, instance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a worker pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListWebWorkerMetricDefinitions(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return operations.ListWebWorkerMetricDefinitionsAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a worker pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListWebWorkerMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebWorkerMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get available SKUs for scaling a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Get available SKUs for scaling a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            public static IPage<SkuInfo> ListWorkerPoolSkus(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return operations.ListWorkerPoolSkusAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available SKUs for scaling a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Get available SKUs for scaling a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> ListWorkerPoolSkusAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolSkusWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get usage metrics for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get usage metrics for a worker pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            public static IPage<Usage> ListWebWorkerUsages(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return operations.ListWebWorkerUsagesAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get usage metrics for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get usage metrics for a worker pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Usage>> ListWebWorkerUsagesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebWorkerUsagesWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Create or update an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Configuration details of the App Service Environment.
            /// </param>
            public static AppServiceEnvironmentResource BeginCreateOrUpdate(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentResource hostingEnvironmentEnvelope)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, name, hostingEnvironmentEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Create or update an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Configuration details of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceEnvironmentResource> BeginCreateOrUpdateAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentResource hostingEnvironmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Delete an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='forceDelete'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App
            /// Service Environment contains resources. The default is
            /// &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            public static void BeginDelete(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?))
            {
                operations.BeginDeleteAsync(resourceGroupName, name, forceDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Delete an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='forceDelete'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App
            /// Service Environment contains resources. The default is
            /// &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Move an App Service Environment to a different VNET.
            /// </summary>
            /// <remarks>
            /// Description for Move an App Service Environment to a different VNET.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='vnetInfo'>
            /// Details for the new virtual network.
            /// </param>
            public static IPage<Site> BeginChangeVnet(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, VirtualNetworkProfile vnetInfo)
            {
                return operations.BeginChangeVnetAsync(resourceGroupName, name, vnetInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Move an App Service Environment to a different VNET.
            /// </summary>
            /// <remarks>
            /// Description for Move an App Service Environment to a different VNET.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='vnetInfo'>
            /// Details for the new virtual network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> BeginChangeVnetAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, VirtualNetworkProfile vnetInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginChangeVnetWithHttpMessagesAsync(resourceGroupName, name, vnetInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of the multi-role pool.
            /// </param>
            public static WorkerPoolResource BeginCreateOrUpdateMultiRolePool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope)
            {
                return operations.BeginCreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of the multi-role pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResource> BeginCreateOrUpdateMultiRolePoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<Site> BeginResume(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.BeginResumeAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> BeginResumeAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            public static IPage<Site> BeginSuspend(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.BeginSuspendAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> BeginSuspendAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSuspendWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of the worker pool.
            /// </param>
            public static WorkerPoolResource BeginCreateOrUpdateWorkerPool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope)
            {
                return operations.BeginCreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Create or update a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResource> BeginCreateOrUpdateWorkerPoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all App Service Environments for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service Environments for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AppServiceEnvironmentResource> ListNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all App Service Environments for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service Environments for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceEnvironmentResource>> ListNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all App Service Environments in a resource group.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service Environments in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AppServiceEnvironmentResource> ListByResourceGroupNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all App Service Environments in a resource group.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service Environments in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceEnvironmentResource>> ListByResourceGroupNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the used, available, and total worker capacity an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the used, available, and total worker capacity an App
            /// Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StampCapacity> ListCapacitiesNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListCapacitiesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the used, available, and total worker capacity an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the used, available, and total worker capacity an App
            /// Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StampCapacity>> ListCapacitiesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCapacitiesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Move an App Service Environment to a different VNET.
            /// </summary>
            /// <remarks>
            /// Description for Move an App Service Environment to a different VNET.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> ChangeVnetNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ChangeVnetNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Move an App Service Environment to a different VNET.
            /// </summary>
            /// <remarks>
            /// Description for Move an App Service Environment to a different VNET.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ChangeVnetNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeVnetNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the network endpoints of all inbound dependencies of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the network endpoints of all inbound dependencies of an
            /// App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<InboundEnvironmentEndpoint> GetInboundNetworkDependenciesEndpointsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetInboundNetworkDependenciesEndpointsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the network endpoints of all inbound dependencies of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the network endpoints of all inbound dependencies of an
            /// App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InboundEnvironmentEndpoint>> GetInboundNetworkDependenciesEndpointsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInboundNetworkDependenciesEndpointsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all multi-role pools.
            /// </summary>
            /// <remarks>
            /// Description for Get all multi-role pools.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkerPoolResource> ListMultiRolePoolsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListMultiRolePoolsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all multi-role pools.
            /// </summary>
            /// <remarks>
            /// Description for Get all multi-role pools.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPoolResource>> ListMultiRolePoolsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a multi-role pool of an
            /// App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a specific instance of a
            /// multi-role pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListMultiRolePoolInstanceMetricDefinitionsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListMultiRolePoolInstanceMetricDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a multi-role pool of an
            /// App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a specific instance of a
            /// multi-role pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListMultiRolePoolInstanceMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolInstanceMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a multi-role pool of an App
            /// Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListMultiRoleMetricDefinitionsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListMultiRoleMetricDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a multi-role pool of an App
            /// Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListMultiRoleMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRoleMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get available SKUs for scaling a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Get available SKUs for scaling a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SkuInfo> ListMultiRolePoolSkusNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListMultiRolePoolSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available SKUs for scaling a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Description for Get available SKUs for scaling a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> ListMultiRolePoolSkusNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get usage metrics for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get usage metrics for a multi-role pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Usage> ListMultiRoleUsagesNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListMultiRoleUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get usage metrics for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get usage metrics for a multi-role pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Usage>> ListMultiRoleUsagesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRoleUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the network endpoints of all outbound dependencies of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the network endpoints of all outbound dependencies of
            /// an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OutboundEnvironmentEndpoint> GetOutboundNetworkDependenciesEndpointsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetOutboundNetworkDependenciesEndpointsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the network endpoints of all outbound dependencies of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get the network endpoints of all outbound dependencies of
            /// an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OutboundEnvironmentEndpoint>> GetOutboundNetworkDependenciesEndpointsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOutboundNetworkDependenciesEndpointsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> ResumeNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ResumeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ResumeNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all App Service plans in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service plans in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AppServicePlan> ListAppServicePlansNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListAppServicePlansNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all App Service plans in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all App Service plans in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServicePlan>> ListAppServicePlansNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppServicePlansNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all apps in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all apps in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> ListWebAppsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListWebAppsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all apps in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all apps in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListWebAppsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebAppsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> SuspendNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.SuspendNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> SuspendNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuspendNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get global usage metrics of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get global usage metrics of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CsmUsageQuota> ListUsagesNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get global usage metrics of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get global usage metrics of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all worker pools of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all worker pools of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkerPoolResource> ListWorkerPoolsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListWorkerPoolsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all worker pools of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get all worker pools of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPoolResource>> ListWorkerPoolsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a worker pool of an App
            /// Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a specific instance of a worker
            /// pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListWorkerPoolInstanceMetricDefinitionsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListWorkerPoolInstanceMetricDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a worker pool of an App
            /// Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a specific instance of a worker
            /// pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListWorkerPoolInstanceMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolInstanceMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a worker pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetricDefinition> ListWebWorkerMetricDefinitionsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListWebWorkerMetricDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get metric definitions for a worker pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinition>> ListWebWorkerMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebWorkerMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get available SKUs for scaling a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Get available SKUs for scaling a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SkuInfo> ListWorkerPoolSkusNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListWorkerPoolSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available SKUs for scaling a worker pool.
            /// </summary>
            /// <remarks>
            /// Description for Get available SKUs for scaling a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> ListWorkerPoolSkusNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get usage metrics for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get usage metrics for a worker pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Usage> ListWebWorkerUsagesNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListWebWorkerUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get usage metrics for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Get usage metrics for a worker pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Usage>> ListWebWorkerUsagesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebWorkerUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Move an App Service Environment to a different VNET.
            /// </summary>
            /// <remarks>
            /// Description for Move an App Service Environment to a different VNET.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> BeginChangeVnetNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.BeginChangeVnetNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Move an App Service Environment to a different VNET.
            /// </summary>
            /// <remarks>
            /// Description for Move an App Service Environment to a different VNET.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> BeginChangeVnetNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginChangeVnetNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> BeginResumeNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.BeginResumeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> BeginResumeNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> BeginSuspendNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.BeginSuspendNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Description for Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> BeginSuspendNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSuspendNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
