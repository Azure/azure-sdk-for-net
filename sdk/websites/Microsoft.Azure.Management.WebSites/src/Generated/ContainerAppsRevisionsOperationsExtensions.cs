// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ContainerAppsRevisionsOperations.
    /// </summary>
    public static partial class ContainerAppsRevisionsOperationsExtensions
    {
            /// <summary>
            /// Get the Revisions for a given Container App.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='containerAppName'>
            /// Name of the Container App for which Revisions are needed.
            /// </param>
            public static IPage<Revision> ListRevisions(this IContainerAppsRevisionsOperations operations, string resourceGroupName, string containerAppName)
            {
                return operations.ListRevisionsAsync(resourceGroupName, containerAppName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the Revisions for a given Container App.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='containerAppName'>
            /// Name of the Container App for which Revisions are needed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Revision>> ListRevisionsAsync(this IContainerAppsRevisionsOperations operations, string resourceGroupName, string containerAppName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRevisionsWithHttpMessagesAsync(resourceGroupName, containerAppName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a revision of a Container App.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='containerAppName'>
            /// Name of the Container App.
            /// </param>
            /// <param name='name'>
            /// Name of the Container App Revision.
            /// </param>
            public static Revision GetRevision(this IContainerAppsRevisionsOperations operations, string resourceGroupName, string containerAppName, string name)
            {
                return operations.GetRevisionAsync(resourceGroupName, containerAppName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a revision of a Container App.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='containerAppName'>
            /// Name of the Container App.
            /// </param>
            /// <param name='name'>
            /// Name of the Container App Revision.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Revision> GetRevisionAsync(this IContainerAppsRevisionsOperations operations, string resourceGroupName, string containerAppName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRevisionWithHttpMessagesAsync(resourceGroupName, containerAppName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Activates a revision for a Container App
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='containerAppName'>
            /// Name of the Container App.
            /// </param>
            /// <param name='name'>
            /// Name of the Container App Revision to activate
            /// </param>
            public static void ActivateRevision(this IContainerAppsRevisionsOperations operations, string resourceGroupName, string containerAppName, string name)
            {
                operations.ActivateRevisionAsync(resourceGroupName, containerAppName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activates a revision for a Container App
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='containerAppName'>
            /// Name of the Container App.
            /// </param>
            /// <param name='name'>
            /// Name of the Container App Revision to activate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ActivateRevisionAsync(this IContainerAppsRevisionsOperations operations, string resourceGroupName, string containerAppName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ActivateRevisionWithHttpMessagesAsync(resourceGroupName, containerAppName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deactivates a revision for a Container App
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='containerAppName'>
            /// Name of the Container App.
            /// </param>
            /// <param name='name'>
            /// Name of the Container App Revision to deactivate
            /// </param>
            public static void DeactivateRevision(this IContainerAppsRevisionsOperations operations, string resourceGroupName, string containerAppName, string name)
            {
                operations.DeactivateRevisionAsync(resourceGroupName, containerAppName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deactivates a revision for a Container App
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='containerAppName'>
            /// Name of the Container App.
            /// </param>
            /// <param name='name'>
            /// Name of the Container App Revision to deactivate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeactivateRevisionAsync(this IContainerAppsRevisionsOperations operations, string resourceGroupName, string containerAppName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeactivateRevisionWithHttpMessagesAsync(resourceGroupName, containerAppName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restarts a revision for a Container App
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='containerAppName'>
            /// Name of the Container App.
            /// </param>
            /// <param name='name'>
            /// Name of the Container App Revision to restart
            /// </param>
            public static void RestartRevision(this IContainerAppsRevisionsOperations operations, string resourceGroupName, string containerAppName, string name)
            {
                operations.RestartRevisionAsync(resourceGroupName, containerAppName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts a revision for a Container App
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='containerAppName'>
            /// Name of the Container App.
            /// </param>
            /// <param name='name'>
            /// Name of the Container App Revision to restart
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartRevisionAsync(this IContainerAppsRevisionsOperations operations, string resourceGroupName, string containerAppName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestartRevisionWithHttpMessagesAsync(resourceGroupName, containerAppName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the Revisions for a given Container App.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Revision> ListRevisionsNext(this IContainerAppsRevisionsOperations operations, string nextPageLink)
            {
                return operations.ListRevisionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the Revisions for a given Container App.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Revision>> ListRevisionsNextAsync(this IContainerAppsRevisionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRevisionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
