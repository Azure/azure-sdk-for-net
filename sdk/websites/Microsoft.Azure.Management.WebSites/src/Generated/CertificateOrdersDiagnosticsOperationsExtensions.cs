// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CertificateOrdersDiagnosticsOperations.
    /// </summary>
    public static partial class CertificateOrdersDiagnosticsOperationsExtensions
    {
            /// <summary>
            /// Microsoft.CertificateRegistration to get the list of detectors for this RP.
            /// </summary>
            /// <remarks>
            /// Description for Microsoft.CertificateRegistration to get the list of
            /// detectors for this RP.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// The certificate order name for which the response is needed.
            /// </param>
            public static IPage<DetectorResponse> ListAppServiceCertificateOrderDetectorResponse(this ICertificateOrdersDiagnosticsOperations operations, string resourceGroupName, string certificateOrderName)
            {
                return operations.ListAppServiceCertificateOrderDetectorResponseAsync(resourceGroupName, certificateOrderName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Microsoft.CertificateRegistration to get the list of detectors for this RP.
            /// </summary>
            /// <remarks>
            /// Description for Microsoft.CertificateRegistration to get the list of
            /// detectors for this RP.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// The certificate order name for which the response is needed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorResponse>> ListAppServiceCertificateOrderDetectorResponseAsync(this ICertificateOrdersDiagnosticsOperations operations, string resourceGroupName, string certificateOrderName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppServiceCertificateOrderDetectorResponseWithHttpMessagesAsync(resourceGroupName, certificateOrderName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Microsoft.CertificateRegistration call to get a detector response from App
            /// Lens.
            /// </summary>
            /// <remarks>
            /// Description for Microsoft.CertificateRegistration call to get a detector
            /// response from App Lens.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// The certificate order name for which the response is needed.
            /// </param>
            /// <param name='detectorName'>
            /// The detector name which needs to be run.
            /// </param>
            /// <param name='startTime'>
            /// The start time for detector response.
            /// </param>
            /// <param name='endTime'>
            /// The end time for the detector response.
            /// </param>
            /// <param name='timeGrain'>
            /// The time grain for the detector response.
            /// </param>
            public static DetectorResponse GetAppServiceCertificateOrderDetectorResponse(this ICertificateOrdersDiagnosticsOperations operations, string resourceGroupName, string certificateOrderName, string detectorName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.GetAppServiceCertificateOrderDetectorResponseAsync(resourceGroupName, certificateOrderName, detectorName, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Microsoft.CertificateRegistration call to get a detector response from App
            /// Lens.
            /// </summary>
            /// <remarks>
            /// Description for Microsoft.CertificateRegistration call to get a detector
            /// response from App Lens.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// The certificate order name for which the response is needed.
            /// </param>
            /// <param name='detectorName'>
            /// The detector name which needs to be run.
            /// </param>
            /// <param name='startTime'>
            /// The start time for detector response.
            /// </param>
            /// <param name='endTime'>
            /// The end time for the detector response.
            /// </param>
            /// <param name='timeGrain'>
            /// The time grain for the detector response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DetectorResponse> GetAppServiceCertificateOrderDetectorResponseAsync(this ICertificateOrdersDiagnosticsOperations operations, string resourceGroupName, string certificateOrderName, string detectorName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppServiceCertificateOrderDetectorResponseWithHttpMessagesAsync(resourceGroupName, certificateOrderName, detectorName, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Microsoft.CertificateRegistration to get the list of detectors for this RP.
            /// </summary>
            /// <remarks>
            /// Description for Microsoft.CertificateRegistration to get the list of
            /// detectors for this RP.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DetectorResponse> ListAppServiceCertificateOrderDetectorResponseNext(this ICertificateOrdersDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListAppServiceCertificateOrderDetectorResponseNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Microsoft.CertificateRegistration to get the list of detectors for this RP.
            /// </summary>
            /// <remarks>
            /// Description for Microsoft.CertificateRegistration to get the list of
            /// detectors for this RP.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorResponse>> ListAppServiceCertificateOrderDetectorResponseNextAsync(this ICertificateOrdersDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppServiceCertificateOrderDetectorResponseNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
