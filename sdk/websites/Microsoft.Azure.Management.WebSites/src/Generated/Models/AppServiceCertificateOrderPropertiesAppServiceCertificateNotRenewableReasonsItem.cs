// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Azure.Management.WebSites.Models
{
    /// <summary> The AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem. </summary>
    public readonly partial struct AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem : IEquatable<AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RegistrationStatusNotSupportedForRenewalValue = "RegistrationStatusNotSupportedForRenewal";
        private const string ExpirationNotInRenewalTimeRangeValue = "ExpirationNotInRenewalTimeRange";
        private const string SubscriptionNotActiveValue = "SubscriptionNotActive";

        /// <summary> RegistrationStatusNotSupportedForRenewal. </summary>
        public static AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem RegistrationStatusNotSupportedForRenewal { get; } = new AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem(RegistrationStatusNotSupportedForRenewalValue);
        /// <summary> ExpirationNotInRenewalTimeRange. </summary>
        public static AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem ExpirationNotInRenewalTimeRange { get; } = new AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem(ExpirationNotInRenewalTimeRangeValue);
        /// <summary> SubscriptionNotActive. </summary>
        public static AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem SubscriptionNotActive { get; } = new AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem(SubscriptionNotActiveValue);
        /// <summary> Determines if two <see cref="AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem"/> values are the same. </summary>
        public static bool operator ==(AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem left, AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem"/> values are not the same. </summary>
        public static bool operator !=(AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem left, AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem"/>. </summary>
        public static implicit operator AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem(string value) => new AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
