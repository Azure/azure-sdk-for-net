// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.Management.WebSites.Models
{
    public partial class ForwardProxy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Convention))
            {
                writer.WritePropertyName("convention");
                writer.WriteStringValue(Convention.Value.ToSerialString());
            }
            if (Optional.IsDefined(CustomHostHeaderName))
            {
                writer.WritePropertyName("customHostHeaderName");
                writer.WriteStringValue(CustomHostHeaderName);
            }
            if (Optional.IsDefined(CustomProtoHeaderName))
            {
                writer.WritePropertyName("customProtoHeaderName");
                writer.WriteStringValue(CustomProtoHeaderName);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ForwardProxy DeserializeForwardProxy(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> kind = default;
            Optional<string> type = default;
            Optional<ForwardProxyConvention> convention = default;
            Optional<string> customHostHeaderName = default;
            Optional<string> customProtoHeaderName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("convention"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            convention = property0.Value.GetString().ToForwardProxyConvention();
                            continue;
                        }
                        if (property0.NameEquals("customHostHeaderName"))
                        {
                            customHostHeaderName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("customProtoHeaderName"))
                        {
                            customProtoHeaderName = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ForwardProxy(id.Value, name.Value, kind.Value, type.Value, Optional.ToNullable(convention), customHostHeaderName.Value, customProtoHeaderName.Value);
        }
    }
}
