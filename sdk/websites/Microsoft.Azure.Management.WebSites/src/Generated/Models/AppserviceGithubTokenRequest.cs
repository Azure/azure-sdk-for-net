// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Appservice Github token request content.
    /// </summary>
    public partial class AppserviceGithubTokenRequest
    {
        /// <summary>
        /// Initializes a new instance of the AppserviceGithubTokenRequest
        /// class.
        /// </summary>
        public AppserviceGithubTokenRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppserviceGithubTokenRequest
        /// class.
        /// </summary>
        /// <param name="code">Code string to exchange for Github Access
        /// token</param>
        /// <param name="state">State string used for verification.</param>
        public AppserviceGithubTokenRequest(string code, string state)
        {
            Code = code;
            State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets code string to exchange for Github Access token
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets state string used for verification.
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
            if (State == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "State");
            }
        }
    }
}
