// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for KubeEnvironmentProvisioningState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum KubeEnvironmentProvisioningState
    {
        [EnumMember(Value = "Succeeded")]
        Succeeded,
        [EnumMember(Value = "Failed")]
        Failed,
        [EnumMember(Value = "Canceled")]
        Canceled,
        [EnumMember(Value = "Waiting")]
        Waiting,
        [EnumMember(Value = "InitializationInProgress")]
        InitializationInProgress,
        [EnumMember(Value = "InfrastructureSetupInProgress")]
        InfrastructureSetupInProgress,
        [EnumMember(Value = "InfrastructureSetupComplete")]
        InfrastructureSetupComplete,
        [EnumMember(Value = "ScheduledForDelete")]
        ScheduledForDelete,
        [EnumMember(Value = "UpgradeRequested")]
        UpgradeRequested,
        [EnumMember(Value = "UpgradeFailed")]
        UpgradeFailed
    }
    internal static class KubeEnvironmentProvisioningStateEnumExtension
    {
        internal static string ToSerializedValue(this KubeEnvironmentProvisioningState? value)
        {
            return value == null ? null : ((KubeEnvironmentProvisioningState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this KubeEnvironmentProvisioningState value)
        {
            switch( value )
            {
                case KubeEnvironmentProvisioningState.Succeeded:
                    return "Succeeded";
                case KubeEnvironmentProvisioningState.Failed:
                    return "Failed";
                case KubeEnvironmentProvisioningState.Canceled:
                    return "Canceled";
                case KubeEnvironmentProvisioningState.Waiting:
                    return "Waiting";
                case KubeEnvironmentProvisioningState.InitializationInProgress:
                    return "InitializationInProgress";
                case KubeEnvironmentProvisioningState.InfrastructureSetupInProgress:
                    return "InfrastructureSetupInProgress";
                case KubeEnvironmentProvisioningState.InfrastructureSetupComplete:
                    return "InfrastructureSetupComplete";
                case KubeEnvironmentProvisioningState.ScheduledForDelete:
                    return "ScheduledForDelete";
                case KubeEnvironmentProvisioningState.UpgradeRequested:
                    return "UpgradeRequested";
                case KubeEnvironmentProvisioningState.UpgradeFailed:
                    return "UpgradeFailed";
            }
            return null;
        }

        internal static KubeEnvironmentProvisioningState? ParseKubeEnvironmentProvisioningState(this string value)
        {
            switch( value )
            {
                case "Succeeded":
                    return KubeEnvironmentProvisioningState.Succeeded;
                case "Failed":
                    return KubeEnvironmentProvisioningState.Failed;
                case "Canceled":
                    return KubeEnvironmentProvisioningState.Canceled;
                case "Waiting":
                    return KubeEnvironmentProvisioningState.Waiting;
                case "InitializationInProgress":
                    return KubeEnvironmentProvisioningState.InitializationInProgress;
                case "InfrastructureSetupInProgress":
                    return KubeEnvironmentProvisioningState.InfrastructureSetupInProgress;
                case "InfrastructureSetupComplete":
                    return KubeEnvironmentProvisioningState.InfrastructureSetupComplete;
                case "ScheduledForDelete":
                    return KubeEnvironmentProvisioningState.ScheduledForDelete;
                case "UpgradeRequested":
                    return KubeEnvironmentProvisioningState.UpgradeRequested;
                case "UpgradeFailed":
                    return KubeEnvironmentProvisioningState.UpgradeFailed;
            }
            return null;
        }
    }
}
