// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.Management.WebSites.Models
{
    public partial class SiteConfigResource : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(NumberOfWorkers))
            {
                writer.WritePropertyName("numberOfWorkers");
                writer.WriteNumberValue(NumberOfWorkers.Value);
            }
            if (Optional.IsCollectionDefined(DefaultDocuments))
            {
                writer.WritePropertyName("defaultDocuments");
                writer.WriteStartArray();
                foreach (var item in DefaultDocuments)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(NetFrameworkVersion))
            {
                writer.WritePropertyName("netFrameworkVersion");
                writer.WriteStringValue(NetFrameworkVersion);
            }
            if (Optional.IsDefined(PhpVersion))
            {
                writer.WritePropertyName("phpVersion");
                writer.WriteStringValue(PhpVersion);
            }
            if (Optional.IsDefined(PythonVersion))
            {
                writer.WritePropertyName("pythonVersion");
                writer.WriteStringValue(PythonVersion);
            }
            if (Optional.IsDefined(NodeVersion))
            {
                writer.WritePropertyName("nodeVersion");
                writer.WriteStringValue(NodeVersion);
            }
            if (Optional.IsDefined(PowerShellVersion))
            {
                writer.WritePropertyName("powerShellVersion");
                writer.WriteStringValue(PowerShellVersion);
            }
            if (Optional.IsDefined(LinuxFxVersion))
            {
                writer.WritePropertyName("linuxFxVersion");
                writer.WriteStringValue(LinuxFxVersion);
            }
            if (Optional.IsDefined(WindowsFxVersion))
            {
                writer.WritePropertyName("windowsFxVersion");
                writer.WriteStringValue(WindowsFxVersion);
            }
            if (Optional.IsDefined(RequestTracingEnabled))
            {
                writer.WritePropertyName("requestTracingEnabled");
                writer.WriteBooleanValue(RequestTracingEnabled.Value);
            }
            if (Optional.IsDefined(RequestTracingExpirationTime))
            {
                writer.WritePropertyName("requestTracingExpirationTime");
                writer.WriteStringValue(RequestTracingExpirationTime.Value, "O");
            }
            if (Optional.IsDefined(RemoteDebuggingEnabled))
            {
                writer.WritePropertyName("remoteDebuggingEnabled");
                writer.WriteBooleanValue(RemoteDebuggingEnabled.Value);
            }
            if (Optional.IsDefined(RemoteDebuggingVersion))
            {
                writer.WritePropertyName("remoteDebuggingVersion");
                writer.WriteStringValue(RemoteDebuggingVersion);
            }
            if (Optional.IsDefined(HttpLoggingEnabled))
            {
                writer.WritePropertyName("httpLoggingEnabled");
                writer.WriteBooleanValue(HttpLoggingEnabled.Value);
            }
            if (Optional.IsDefined(LogsDirectorySizeLimit))
            {
                writer.WritePropertyName("logsDirectorySizeLimit");
                writer.WriteNumberValue(LogsDirectorySizeLimit.Value);
            }
            if (Optional.IsDefined(DetailedErrorLoggingEnabled))
            {
                writer.WritePropertyName("detailedErrorLoggingEnabled");
                writer.WriteBooleanValue(DetailedErrorLoggingEnabled.Value);
            }
            if (Optional.IsDefined(PublishingUsername))
            {
                writer.WritePropertyName("publishingUsername");
                writer.WriteStringValue(PublishingUsername);
            }
            if (Optional.IsCollectionDefined(AppSettings))
            {
                writer.WritePropertyName("appSettings");
                writer.WriteStartArray();
                foreach (var item in AppSettings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ConnectionStrings))
            {
                writer.WritePropertyName("connectionStrings");
                writer.WriteStartArray();
                foreach (var item in ConnectionStrings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(HandlerMappings))
            {
                writer.WritePropertyName("handlerMappings");
                writer.WriteStartArray();
                foreach (var item in HandlerMappings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DocumentRoot))
            {
                writer.WritePropertyName("documentRoot");
                writer.WriteStringValue(DocumentRoot);
            }
            if (Optional.IsDefined(ScmType))
            {
                writer.WritePropertyName("scmType");
                writer.WriteStringValue(ScmType.Value.ToString());
            }
            if (Optional.IsDefined(Use32BitWorkerProcess))
            {
                writer.WritePropertyName("use32BitWorkerProcess");
                writer.WriteBooleanValue(Use32BitWorkerProcess.Value);
            }
            if (Optional.IsDefined(WebSocketsEnabled))
            {
                writer.WritePropertyName("webSocketsEnabled");
                writer.WriteBooleanValue(WebSocketsEnabled.Value);
            }
            if (Optional.IsDefined(AlwaysOn))
            {
                writer.WritePropertyName("alwaysOn");
                writer.WriteBooleanValue(AlwaysOn.Value);
            }
            if (Optional.IsDefined(JavaVersion))
            {
                writer.WritePropertyName("javaVersion");
                writer.WriteStringValue(JavaVersion);
            }
            if (Optional.IsDefined(JavaContainer))
            {
                writer.WritePropertyName("javaContainer");
                writer.WriteStringValue(JavaContainer);
            }
            if (Optional.IsDefined(JavaContainerVersion))
            {
                writer.WritePropertyName("javaContainerVersion");
                writer.WriteStringValue(JavaContainerVersion);
            }
            if (Optional.IsDefined(AppCommandLine))
            {
                writer.WritePropertyName("appCommandLine");
                writer.WriteStringValue(AppCommandLine);
            }
            if (Optional.IsDefined(ManagedPipelineMode))
            {
                writer.WritePropertyName("managedPipelineMode");
                writer.WriteStringValue(ManagedPipelineMode.Value.ToSerialString());
            }
            if (Optional.IsCollectionDefined(VirtualApplications))
            {
                writer.WritePropertyName("virtualApplications");
                writer.WriteStartArray();
                foreach (var item in VirtualApplications)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LoadBalancing))
            {
                writer.WritePropertyName("loadBalancing");
                writer.WriteStringValue(LoadBalancing.Value.ToSerialString());
            }
            if (Optional.IsDefined(Experiments))
            {
                writer.WritePropertyName("experiments");
                writer.WriteObjectValue(Experiments);
            }
            if (Optional.IsDefined(Limits))
            {
                writer.WritePropertyName("limits");
                writer.WriteObjectValue(Limits);
            }
            if (Optional.IsDefined(AutoHealEnabled))
            {
                writer.WritePropertyName("autoHealEnabled");
                writer.WriteBooleanValue(AutoHealEnabled.Value);
            }
            if (Optional.IsDefined(AutoHealRules))
            {
                writer.WritePropertyName("autoHealRules");
                writer.WriteObjectValue(AutoHealRules);
            }
            if (Optional.IsDefined(TracingOptions))
            {
                writer.WritePropertyName("tracingOptions");
                writer.WriteStringValue(TracingOptions);
            }
            if (Optional.IsDefined(VnetName))
            {
                writer.WritePropertyName("vnetName");
                writer.WriteStringValue(VnetName);
            }
            if (Optional.IsDefined(VnetRouteAllEnabled))
            {
                writer.WritePropertyName("vnetRouteAllEnabled");
                writer.WriteBooleanValue(VnetRouteAllEnabled.Value);
            }
            if (Optional.IsDefined(VnetPrivatePortsCount))
            {
                writer.WritePropertyName("vnetPrivatePortsCount");
                writer.WriteNumberValue(VnetPrivatePortsCount.Value);
            }
            if (Optional.IsDefined(Cors))
            {
                writer.WritePropertyName("cors");
                writer.WriteObjectValue(Cors);
            }
            if (Optional.IsDefined(Push))
            {
                writer.WritePropertyName("push");
                writer.WriteObjectValue(Push);
            }
            if (Optional.IsDefined(ApiDefinition))
            {
                writer.WritePropertyName("apiDefinition");
                writer.WriteObjectValue(ApiDefinition);
            }
            if (Optional.IsDefined(ApiManagementConfig))
            {
                writer.WritePropertyName("apiManagementConfig");
                writer.WriteObjectValue(ApiManagementConfig);
            }
            if (Optional.IsDefined(AutoSwapSlotName))
            {
                writer.WritePropertyName("autoSwapSlotName");
                writer.WriteStringValue(AutoSwapSlotName);
            }
            if (Optional.IsDefined(LocalMySqlEnabled))
            {
                writer.WritePropertyName("localMySqlEnabled");
                writer.WriteBooleanValue(LocalMySqlEnabled.Value);
            }
            if (Optional.IsDefined(ManagedServiceIdentityId))
            {
                writer.WritePropertyName("managedServiceIdentityId");
                writer.WriteNumberValue(ManagedServiceIdentityId.Value);
            }
            if (Optional.IsDefined(XManagedServiceIdentityId))
            {
                writer.WritePropertyName("xManagedServiceIdentityId");
                writer.WriteNumberValue(XManagedServiceIdentityId.Value);
            }
            if (Optional.IsDefined(KeyVaultReferenceIdentity))
            {
                writer.WritePropertyName("keyVaultReferenceIdentity");
                writer.WriteStringValue(KeyVaultReferenceIdentity);
            }
            if (Optional.IsCollectionDefined(IpSecurityRestrictions))
            {
                writer.WritePropertyName("ipSecurityRestrictions");
                writer.WriteStartArray();
                foreach (var item in IpSecurityRestrictions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ScmIpSecurityRestrictions))
            {
                writer.WritePropertyName("scmIpSecurityRestrictions");
                writer.WriteStartArray();
                foreach (var item in ScmIpSecurityRestrictions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ScmIpSecurityRestrictionsUseMain))
            {
                writer.WritePropertyName("scmIpSecurityRestrictionsUseMain");
                writer.WriteBooleanValue(ScmIpSecurityRestrictionsUseMain.Value);
            }
            if (Optional.IsDefined(Http20Enabled))
            {
                writer.WritePropertyName("http20Enabled");
                writer.WriteBooleanValue(Http20Enabled.Value);
            }
            if (Optional.IsDefined(MinTlsVersion))
            {
                writer.WritePropertyName("minTlsVersion");
                writer.WriteStringValue(MinTlsVersion.Value.ToString());
            }
            if (Optional.IsDefined(ScmMinTlsVersion))
            {
                writer.WritePropertyName("scmMinTlsVersion");
                writer.WriteStringValue(ScmMinTlsVersion.Value.ToString());
            }
            if (Optional.IsDefined(FtpsState))
            {
                writer.WritePropertyName("ftpsState");
                writer.WriteStringValue(FtpsState.Value.ToString());
            }
            if (Optional.IsDefined(PreWarmedInstanceCount))
            {
                writer.WritePropertyName("preWarmedInstanceCount");
                writer.WriteNumberValue(PreWarmedInstanceCount.Value);
            }
            if (Optional.IsDefined(FunctionAppScaleLimit))
            {
                writer.WritePropertyName("functionAppScaleLimit");
                writer.WriteNumberValue(FunctionAppScaleLimit.Value);
            }
            if (Optional.IsDefined(HealthCheckPath))
            {
                writer.WritePropertyName("healthCheckPath");
                writer.WriteStringValue(HealthCheckPath);
            }
            if (Optional.IsDefined(FunctionsRuntimeScaleMonitoringEnabled))
            {
                writer.WritePropertyName("functionsRuntimeScaleMonitoringEnabled");
                writer.WriteBooleanValue(FunctionsRuntimeScaleMonitoringEnabled.Value);
            }
            if (Optional.IsDefined(WebsiteTimeZone))
            {
                writer.WritePropertyName("websiteTimeZone");
                writer.WriteStringValue(WebsiteTimeZone);
            }
            if (Optional.IsDefined(MinimumElasticInstanceCount))
            {
                writer.WritePropertyName("minimumElasticInstanceCount");
                writer.WriteNumberValue(MinimumElasticInstanceCount.Value);
            }
            if (Optional.IsCollectionDefined(AzureStorageAccounts))
            {
                writer.WritePropertyName("azureStorageAccounts");
                writer.WriteStartObject();
                foreach (var item in AzureStorageAccounts)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess");
                writer.WriteStringValue(PublicNetworkAccess);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SiteConfigResource DeserializeSiteConfigResource(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> kind = default;
            Optional<string> type = default;
            Optional<int> numberOfWorkers = default;
            Optional<IList<string>> defaultDocuments = default;
            Optional<string> netFrameworkVersion = default;
            Optional<string> phpVersion = default;
            Optional<string> pythonVersion = default;
            Optional<string> nodeVersion = default;
            Optional<string> powerShellVersion = default;
            Optional<string> linuxFxVersion = default;
            Optional<string> windowsFxVersion = default;
            Optional<bool> requestTracingEnabled = default;
            Optional<DateTimeOffset> requestTracingExpirationTime = default;
            Optional<bool> remoteDebuggingEnabled = default;
            Optional<string> remoteDebuggingVersion = default;
            Optional<bool> httpLoggingEnabled = default;
            Optional<int> logsDirectorySizeLimit = default;
            Optional<bool> detailedErrorLoggingEnabled = default;
            Optional<string> publishingUsername = default;
            Optional<IList<NameValuePair>> appSettings = default;
            Optional<IList<ConnStringInfo>> connectionStrings = default;
            Optional<SiteMachineKey> machineKey = default;
            Optional<IList<HandlerMapping>> handlerMappings = default;
            Optional<string> documentRoot = default;
            Optional<ScmType> scmType = default;
            Optional<bool> use32BitWorkerProcess = default;
            Optional<bool> webSocketsEnabled = default;
            Optional<bool> alwaysOn = default;
            Optional<string> javaVersion = default;
            Optional<string> javaContainer = default;
            Optional<string> javaContainerVersion = default;
            Optional<string> appCommandLine = default;
            Optional<ManagedPipelineMode> managedPipelineMode = default;
            Optional<IList<VirtualApplication>> virtualApplications = default;
            Optional<SiteLoadBalancing> loadBalancing = default;
            Optional<Experiments> experiments = default;
            Optional<SiteLimits> limits = default;
            Optional<bool> autoHealEnabled = default;
            Optional<AutoHealRules> autoHealRules = default;
            Optional<string> tracingOptions = default;
            Optional<string> vnetName = default;
            Optional<bool> vnetRouteAllEnabled = default;
            Optional<int> vnetPrivatePortsCount = default;
            Optional<CorsSettings> cors = default;
            Optional<PushSettings> push = default;
            Optional<ApiDefinitionInfo> apiDefinition = default;
            Optional<ApiManagementConfig> apiManagementConfig = default;
            Optional<string> autoSwapSlotName = default;
            Optional<bool> localMySqlEnabled = default;
            Optional<int> managedServiceIdentityId = default;
            Optional<int> xManagedServiceIdentityId = default;
            Optional<string> keyVaultReferenceIdentity = default;
            Optional<IList<IpSecurityRestriction>> ipSecurityRestrictions = default;
            Optional<IList<IpSecurityRestriction>> scmIpSecurityRestrictions = default;
            Optional<bool> scmIpSecurityRestrictionsUseMain = default;
            Optional<bool> http20Enabled = default;
            Optional<SupportedTlsVersions> minTlsVersion = default;
            Optional<SupportedTlsVersions> scmMinTlsVersion = default;
            Optional<FtpsState> ftpsState = default;
            Optional<int> preWarmedInstanceCount = default;
            Optional<int> functionAppScaleLimit = default;
            Optional<string> healthCheckPath = default;
            Optional<bool> functionsRuntimeScaleMonitoringEnabled = default;
            Optional<string> websiteTimeZone = default;
            Optional<int> minimumElasticInstanceCount = default;
            Optional<IDictionary<string, AzureStorageInfoValue>> azureStorageAccounts = default;
            Optional<string> publicNetworkAccess = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("numberOfWorkers"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            numberOfWorkers = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("defaultDocuments"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            defaultDocuments = array;
                            continue;
                        }
                        if (property0.NameEquals("netFrameworkVersion"))
                        {
                            netFrameworkVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("phpVersion"))
                        {
                            phpVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("pythonVersion"))
                        {
                            pythonVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("nodeVersion"))
                        {
                            nodeVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("powerShellVersion"))
                        {
                            powerShellVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("linuxFxVersion"))
                        {
                            linuxFxVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("windowsFxVersion"))
                        {
                            windowsFxVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("requestTracingEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            requestTracingEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("requestTracingExpirationTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            requestTracingExpirationTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("remoteDebuggingEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            remoteDebuggingEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("remoteDebuggingVersion"))
                        {
                            remoteDebuggingVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("httpLoggingEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            httpLoggingEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("logsDirectorySizeLimit"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            logsDirectorySizeLimit = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("detailedErrorLoggingEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            detailedErrorLoggingEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("publishingUsername"))
                        {
                            publishingUsername = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("appSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<NameValuePair> array = new List<NameValuePair>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(NameValuePair.DeserializeNameValuePair(item));
                            }
                            appSettings = array;
                            continue;
                        }
                        if (property0.NameEquals("connectionStrings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ConnStringInfo> array = new List<ConnStringInfo>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ConnStringInfo.DeserializeConnStringInfo(item));
                            }
                            connectionStrings = array;
                            continue;
                        }
                        if (property0.NameEquals("machineKey"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            machineKey = SiteMachineKey.DeserializeSiteMachineKey(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("handlerMappings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<HandlerMapping> array = new List<HandlerMapping>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(HandlerMapping.DeserializeHandlerMapping(item));
                            }
                            handlerMappings = array;
                            continue;
                        }
                        if (property0.NameEquals("documentRoot"))
                        {
                            documentRoot = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("scmType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            scmType = new ScmType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("use32BitWorkerProcess"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            use32BitWorkerProcess = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("webSocketsEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            webSocketsEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("alwaysOn"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            alwaysOn = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("javaVersion"))
                        {
                            javaVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("javaContainer"))
                        {
                            javaContainer = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("javaContainerVersion"))
                        {
                            javaContainerVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("appCommandLine"))
                        {
                            appCommandLine = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("managedPipelineMode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            managedPipelineMode = property0.Value.GetString().ToManagedPipelineMode();
                            continue;
                        }
                        if (property0.NameEquals("virtualApplications"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<VirtualApplication> array = new List<VirtualApplication>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(VirtualApplication.DeserializeVirtualApplication(item));
                            }
                            virtualApplications = array;
                            continue;
                        }
                        if (property0.NameEquals("loadBalancing"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            loadBalancing = property0.Value.GetString().ToSiteLoadBalancing();
                            continue;
                        }
                        if (property0.NameEquals("experiments"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            experiments = Experiments.DeserializeExperiments(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("limits"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            limits = SiteLimits.DeserializeSiteLimits(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("autoHealEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            autoHealEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("autoHealRules"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            autoHealRules = AutoHealRules.DeserializeAutoHealRules(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("tracingOptions"))
                        {
                            tracingOptions = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vnetName"))
                        {
                            vnetName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vnetRouteAllEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            vnetRouteAllEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("vnetPrivatePortsCount"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            vnetPrivatePortsCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("cors"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            cors = CorsSettings.DeserializeCorsSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("push"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            push = PushSettings.DeserializePushSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("apiDefinition"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            apiDefinition = ApiDefinitionInfo.DeserializeApiDefinitionInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("apiManagementConfig"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            apiManagementConfig = ApiManagementConfig.DeserializeApiManagementConfig(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("autoSwapSlotName"))
                        {
                            autoSwapSlotName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("localMySqlEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            localMySqlEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("managedServiceIdentityId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            managedServiceIdentityId = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("xManagedServiceIdentityId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            xManagedServiceIdentityId = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("keyVaultReferenceIdentity"))
                        {
                            keyVaultReferenceIdentity = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ipSecurityRestrictions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<IpSecurityRestriction> array = new List<IpSecurityRestriction>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(IpSecurityRestriction.DeserializeIpSecurityRestriction(item));
                            }
                            ipSecurityRestrictions = array;
                            continue;
                        }
                        if (property0.NameEquals("scmIpSecurityRestrictions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<IpSecurityRestriction> array = new List<IpSecurityRestriction>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(IpSecurityRestriction.DeserializeIpSecurityRestriction(item));
                            }
                            scmIpSecurityRestrictions = array;
                            continue;
                        }
                        if (property0.NameEquals("scmIpSecurityRestrictionsUseMain"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            scmIpSecurityRestrictionsUseMain = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("http20Enabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            http20Enabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("minTlsVersion"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            minTlsVersion = new SupportedTlsVersions(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("scmMinTlsVersion"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            scmMinTlsVersion = new SupportedTlsVersions(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("ftpsState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            ftpsState = new FtpsState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("preWarmedInstanceCount"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            preWarmedInstanceCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("functionAppScaleLimit"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            functionAppScaleLimit = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("healthCheckPath"))
                        {
                            healthCheckPath = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("functionsRuntimeScaleMonitoringEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            functionsRuntimeScaleMonitoringEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("websiteTimeZone"))
                        {
                            websiteTimeZone = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("minimumElasticInstanceCount"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            minimumElasticInstanceCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("azureStorageAccounts"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            Dictionary<string, AzureStorageInfoValue> dictionary = new Dictionary<string, AzureStorageInfoValue>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, AzureStorageInfoValue.DeserializeAzureStorageInfoValue(property1.Value));
                            }
                            azureStorageAccounts = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("publicNetworkAccess"))
                        {
                            publicNetworkAccess = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SiteConfigResource(id.Value, name.Value, kind.Value, type.Value, Optional.ToNullable(numberOfWorkers), Optional.ToList(defaultDocuments), netFrameworkVersion.Value, phpVersion.Value, pythonVersion.Value, nodeVersion.Value, powerShellVersion.Value, linuxFxVersion.Value, windowsFxVersion.Value, Optional.ToNullable(requestTracingEnabled), Optional.ToNullable(requestTracingExpirationTime), Optional.ToNullable(remoteDebuggingEnabled), remoteDebuggingVersion.Value, Optional.ToNullable(httpLoggingEnabled), Optional.ToNullable(logsDirectorySizeLimit), Optional.ToNullable(detailedErrorLoggingEnabled), publishingUsername.Value, Optional.ToList(appSettings), Optional.ToList(connectionStrings), machineKey.Value, Optional.ToList(handlerMappings), documentRoot.Value, Optional.ToNullable(scmType), Optional.ToNullable(use32BitWorkerProcess), Optional.ToNullable(webSocketsEnabled), Optional.ToNullable(alwaysOn), javaVersion.Value, javaContainer.Value, javaContainerVersion.Value, appCommandLine.Value, Optional.ToNullable(managedPipelineMode), Optional.ToList(virtualApplications), Optional.ToNullable(loadBalancing), experiments.Value, limits.Value, Optional.ToNullable(autoHealEnabled), autoHealRules.Value, tracingOptions.Value, vnetName.Value, Optional.ToNullable(vnetRouteAllEnabled), Optional.ToNullable(vnetPrivatePortsCount), cors.Value, push.Value, apiDefinition.Value, apiManagementConfig.Value, autoSwapSlotName.Value, Optional.ToNullable(localMySqlEnabled), Optional.ToNullable(managedServiceIdentityId), Optional.ToNullable(xManagedServiceIdentityId), keyVaultReferenceIdentity.Value, Optional.ToList(ipSecurityRestrictions), Optional.ToList(scmIpSecurityRestrictions), Optional.ToNullable(scmIpSecurityRestrictionsUseMain), Optional.ToNullable(http20Enabled), Optional.ToNullable(minTlsVersion), Optional.ToNullable(scmMinTlsVersion), Optional.ToNullable(ftpsState), Optional.ToNullable(preWarmedInstanceCount), Optional.ToNullable(functionAppScaleLimit), healthCheckPath.Value, Optional.ToNullable(functionsRuntimeScaleMonitoringEnabled), websiteTimeZone.Value, Optional.ToNullable(minimumElasticInstanceCount), Optional.ToDictionary(azureStorageAccounts), publicNetworkAccess.Value);
        }
    }
}
