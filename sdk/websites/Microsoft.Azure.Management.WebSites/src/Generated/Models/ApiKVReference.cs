// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Description of site key vault references.
    /// </summary>
    public partial class ApiKVReference
    {
        /// <summary>
        /// Initializes a new instance of the ApiKVReference class.
        /// </summary>
        public ApiKVReference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApiKVReference class.
        /// </summary>
        /// <param name="status">Possible values include: 'Initialized',
        /// 'Resolved', 'InvalidSyntax', 'MSINotEnabled', 'VaultNotFound',
        /// 'SecretNotFound', 'SecretVersionNotFound',
        /// 'AccessToKeyVaultDenied', 'OtherReasons'</param>
        /// <param name="identityType">Possible values include:
        /// 'SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssigned',
        /// 'None'</param>
        /// <param name="source">Possible values include: 'KeyVault'</param>
        /// <param name="location">Possible values include:
        /// 'ApplicationSetting'</param>
        public ApiKVReference(string reference = default(string), ResolveStatus? status = default(ResolveStatus?), string vaultName = default(string), string secretName = default(string), string secretVersion = default(string), ManagedServiceIdentityType? identityType = default(ManagedServiceIdentityType?), string details = default(string), ConfigReferenceSource? source = default(ConfigReferenceSource?), ConfigReferenceLocation? location = default(ConfigReferenceLocation?))
        {
            Reference = reference;
            Status = status;
            VaultName = vaultName;
            SecretName = secretName;
            SecretVersion = secretVersion;
            IdentityType = identityType;
            Details = details;
            Source = source;
            Location = location;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reference")]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Initialized', 'Resolved',
        /// 'InvalidSyntax', 'MSINotEnabled', 'VaultNotFound',
        /// 'SecretNotFound', 'SecretVersionNotFound',
        /// 'AccessToKeyVaultDenied', 'OtherReasons'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public ResolveStatus? Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vaultName")]
        public string VaultName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "secretName")]
        public string SecretName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "secretVersion")]
        public string SecretVersion { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'SystemAssigned',
        /// 'UserAssigned', 'SystemAssigned, UserAssigned', 'None'
        /// </summary>
        [JsonProperty(PropertyName = "identityType")]
        public ManagedServiceIdentityType? IdentityType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "details")]
        public string Details { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'KeyVault'
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public ConfigReferenceSource? Source { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'ApplicationSetting'
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public ConfigReferenceLocation? Location { get; set; }

    }
}
