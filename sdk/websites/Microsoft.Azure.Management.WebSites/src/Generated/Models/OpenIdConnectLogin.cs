// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The configuration settings of the login flow of the custom Open ID
    /// Connect provider.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class OpenIdConnectLogin : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the OpenIdConnectLogin class.
        /// </summary>
        public OpenIdConnectLogin()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OpenIdConnectLogin class.
        /// </summary>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource Name.</param>
        /// <param name="kind">Kind of resource.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="nameClaimType">The name of the claim that contains the
        /// users name.</param>
        /// <param name="scopes">A list of the scopes that should be requested
        /// while authenticating.</param>
        public OpenIdConnectLogin(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string nameClaimType = default(string), IList<string> scopes = default(IList<string>))
            : base(id, name, kind, type)
        {
            NameClaimType = nameClaimType;
            Scopes = scopes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the claim that contains the users name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nameClaimType")]
        public string NameClaimType { get; set; }

        /// <summary>
        /// Gets or sets a list of the scopes that should be requested while
        /// authenticating.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scopes")]
        public IList<string> Scopes { get; set; }

    }
}
