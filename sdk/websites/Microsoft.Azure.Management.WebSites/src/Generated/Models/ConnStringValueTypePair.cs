// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Database connection string value to type pair.
    /// </summary>
    public partial class ConnStringValueTypePair
    {
        /// <summary>
        /// Initializes a new instance of the ConnStringValueTypePair class.
        /// </summary>
        public ConnStringValueTypePair()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnStringValueTypePair class.
        /// </summary>
        /// <param name="value">Value of pair.</param>
        /// <param name="type">Type of database. Possible values include:
        /// 'MySql', 'SQLServer', 'SQLAzure', 'Custom', 'NotificationHub',
        /// 'ServiceBus', 'EventHub', 'ApiHub', 'DocDb', 'RedisCache',
        /// 'PostgreSQL'</param>
        public ConnStringValueTypePair(string value, ConnectionStringType type)
        {
            Value = value;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets value of pair.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets type of database. Possible values include: 'MySql',
        /// 'SQLServer', 'SQLAzure', 'Custom', 'NotificationHub', 'ServiceBus',
        /// 'EventHub', 'ApiHub', 'DocDb', 'RedisCache', 'PostgreSQL'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public ConnectionStringType Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
