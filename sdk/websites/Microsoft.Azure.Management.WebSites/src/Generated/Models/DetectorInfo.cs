// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Definition of Detector
    /// </summary>
    public partial class DetectorInfo
    {
        /// <summary>
        /// Initializes a new instance of the DetectorInfo class.
        /// </summary>
        public DetectorInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DetectorInfo class.
        /// </summary>
        /// <param name="id">Id of detector</param>
        /// <param name="name">Name of detector</param>
        /// <param name="description">Short description of the detector and its
        /// purpose.</param>
        /// <param name="author">Author of the detector.</param>
        /// <param name="category">Problem category. This serves for organizing
        /// group for detectors.</param>
        /// <param name="supportTopicList">List of Support Topics for which
        /// this detector is enabled.</param>
        /// <param name="analysisType">Analysis Types for which this detector
        /// should apply to.</param>
        /// <param name="type">Whether this detector is an Analysis Detector or
        /// not. Possible values include: 'Detector', 'Analysis',
        /// 'CategoryOverview'</param>
        /// <param name="score">Defines score of a detector to power ML based
        /// matching.</param>
        public DetectorInfo(string id = default(string), string name = default(string), string description = default(string), string author = default(string), string category = default(string), IList<SupportTopic> supportTopicList = default(IList<SupportTopic>), IList<string> analysisType = default(IList<string>), DetectorType? type = default(DetectorType?), double? score = default(double?))
        {
            Id = id;
            Name = name;
            Description = description;
            Author = author;
            Category = category;
            SupportTopicList = supportTopicList;
            AnalysisType = analysisType;
            Type = type;
            Score = score;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets id of detector
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets name of detector
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets short description of the detector and its purpose.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets author of the detector.
        /// </summary>
        [JsonProperty(PropertyName = "author")]
        public string Author { get; private set; }

        /// <summary>
        /// Gets problem category. This serves for organizing group for
        /// detectors.
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; private set; }

        /// <summary>
        /// Gets list of Support Topics for which this detector is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "supportTopicList")]
        public IList<SupportTopic> SupportTopicList { get; private set; }

        /// <summary>
        /// Gets analysis Types for which this detector should apply to.
        /// </summary>
        [JsonProperty(PropertyName = "analysisType")]
        public IList<string> AnalysisType { get; private set; }

        /// <summary>
        /// Gets whether this detector is an Analysis Detector or not. Possible
        /// values include: 'Detector', 'Analysis', 'CategoryOverview'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public DetectorType? Type { get; private set; }

        /// <summary>
        /// Gets defines score of a detector to power ML based matching.
        /// </summary>
        [JsonProperty(PropertyName = "score")]
        public double? Score { get; private set; }

    }
}
