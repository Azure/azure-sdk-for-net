// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.Management.WebSites.Models
{
    public partial class TriggeredJobRun : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(WebJobId))
            {
                writer.WritePropertyName("web_job_id");
                writer.WriteStringValue(WebJobId);
            }
            if (Optional.IsDefined(WebJobName))
            {
                writer.WritePropertyName("web_job_name");
                writer.WriteStringValue(WebJobName);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToSerialString());
            }
            if (Optional.IsDefined(StartTime))
            {
                writer.WritePropertyName("start_time");
                writer.WriteStringValue(StartTime.Value, "O");
            }
            if (Optional.IsDefined(EndTime))
            {
                writer.WritePropertyName("end_time");
                writer.WriteStringValue(EndTime.Value, "O");
            }
            if (Optional.IsDefined(Duration))
            {
                writer.WritePropertyName("duration");
                writer.WriteStringValue(Duration);
            }
            if (Optional.IsDefined(OutputUrl))
            {
                writer.WritePropertyName("output_url");
                writer.WriteStringValue(OutputUrl);
            }
            if (Optional.IsDefined(ErrorUrl))
            {
                writer.WritePropertyName("error_url");
                writer.WriteStringValue(ErrorUrl);
            }
            if (Optional.IsDefined(Url))
            {
                writer.WritePropertyName("url");
                writer.WriteStringValue(Url);
            }
            if (Optional.IsDefined(JobName))
            {
                writer.WritePropertyName("job_name");
                writer.WriteStringValue(JobName);
            }
            if (Optional.IsDefined(Trigger))
            {
                writer.WritePropertyName("trigger");
                writer.WriteStringValue(Trigger);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static TriggeredJobRun DeserializeTriggeredJobRun(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> kind = default;
            Optional<string> type = default;
            Optional<string> webJobId = default;
            Optional<string> webJobName = default;
            Optional<TriggeredWebJobStatus> status = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<DateTimeOffset> endTime = default;
            Optional<string> duration = default;
            Optional<string> outputUrl = default;
            Optional<string> errorUrl = default;
            Optional<string> url = default;
            Optional<string> jobName = default;
            Optional<string> trigger = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("web_job_id"))
                        {
                            webJobId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("web_job_name"))
                        {
                            webJobName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("status"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            status = property0.Value.GetString().ToTriggeredWebJobStatus();
                            continue;
                        }
                        if (property0.NameEquals("start_time"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            startTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("end_time"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            endTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("duration"))
                        {
                            duration = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("output_url"))
                        {
                            outputUrl = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("error_url"))
                        {
                            errorUrl = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("url"))
                        {
                            url = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("job_name"))
                        {
                            jobName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("trigger"))
                        {
                            trigger = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new TriggeredJobRun(id.Value, name.Value, kind.Value, type.Value, webJobId.Value, webJobName.Value, Optional.ToNullable(status), Optional.ToNullable(startTime), Optional.ToNullable(endTime), duration.Value, outputUrl.Value, errorUrl.Value, url.Value, jobName.Value, trigger.Value);
        }
    }
}
