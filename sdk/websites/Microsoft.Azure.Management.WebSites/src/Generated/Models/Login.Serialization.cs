// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.Management.WebSites.Models
{
    public partial class Login : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Routes))
            {
                writer.WritePropertyName("routes");
                writer.WriteObjectValue(Routes);
            }
            if (Optional.IsDefined(TokenStore))
            {
                writer.WritePropertyName("tokenStore");
                writer.WriteObjectValue(TokenStore);
            }
            if (Optional.IsDefined(PreserveUrlFragmentsForLogins))
            {
                writer.WritePropertyName("preserveUrlFragmentsForLogins");
                writer.WriteBooleanValue(PreserveUrlFragmentsForLogins.Value);
            }
            if (Optional.IsCollectionDefined(AllowedExternalRedirectUrls))
            {
                writer.WritePropertyName("allowedExternalRedirectUrls");
                writer.WriteStartArray();
                foreach (var item in AllowedExternalRedirectUrls)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(CookieExpiration))
            {
                writer.WritePropertyName("cookieExpiration");
                writer.WriteObjectValue(CookieExpiration);
            }
            if (Optional.IsDefined(Nonce))
            {
                writer.WritePropertyName("nonce");
                writer.WriteObjectValue(Nonce);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static Login DeserializeLogin(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> kind = default;
            Optional<string> type = default;
            Optional<LoginRoutes> routes = default;
            Optional<TokenStore> tokenStore = default;
            Optional<bool> preserveUrlFragmentsForLogins = default;
            Optional<IList<string>> allowedExternalRedirectUrls = default;
            Optional<CookieExpiration> cookieExpiration = default;
            Optional<Nonce> nonce = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("routes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            routes = LoginRoutes.DeserializeLoginRoutes(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("tokenStore"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            tokenStore = TokenStore.DeserializeTokenStore(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("preserveUrlFragmentsForLogins"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            preserveUrlFragmentsForLogins = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("allowedExternalRedirectUrls"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            allowedExternalRedirectUrls = array;
                            continue;
                        }
                        if (property0.NameEquals("cookieExpiration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            cookieExpiration = CookieExpiration.DeserializeCookieExpiration(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("nonce"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            nonce = Nonce.DeserializeNonce(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new Login(id.Value, name.Value, kind.Value, type.Value, routes.Value, tokenStore.Value, Optional.ToNullable(preserveUrlFragmentsForLogins), Optional.ToList(allowedExternalRedirectUrls), cookieExpiration.Value, nonce.Value);
        }
    }
}
