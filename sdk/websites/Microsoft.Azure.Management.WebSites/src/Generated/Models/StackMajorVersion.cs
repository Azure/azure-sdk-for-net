// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Application stack major version.
    /// </summary>
    public partial class StackMajorVersion
    {
        /// <summary>
        /// Initializes a new instance of the StackMajorVersion class.
        /// </summary>
        public StackMajorVersion()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StackMajorVersion class.
        /// </summary>
        /// <param name="displayVersion">Application stack major version
        /// (display only).</param>
        /// <param name="runtimeVersion">Application stack major version
        /// (runtime only).</param>
        /// <param name="isDefault">&lt;code&gt;true&lt;/code&gt; if this is
        /// the default major version; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.</param>
        /// <param name="minorVersions">Minor versions associated with the
        /// major version.</param>
        /// <param name="applicationInsights">&lt;code&gt;true&lt;/code&gt; if
        /// this supports Application Insights; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.</param>
        /// <param name="isPreview">&lt;code&gt;true&lt;/code&gt; if this stack
        /// is in Preview, otherwise &lt;code&gt;false&lt;/code&gt;.</param>
        /// <param name="isDeprecated">&lt;code&gt;true&lt;/code&gt; if this
        /// stack has been deprecated, otherwise
        /// &lt;code&gt;false&lt;/code&gt;.</param>
        /// <param name="isHidden">&lt;code&gt;true&lt;/code&gt; if this stack
        /// should be hidden for new customers on portal, otherwise
        /// &lt;code&gt;false&lt;/code&gt;.</param>
        /// <param name="appSettingsDictionary">&lt;appSettings&gt;
        /// &lt;appSetting name="FUNCTIONS_WORKER_RUNTIME" value="dotnet" /&gt;
        /// &lt;/appSettings&gt;
        /// Example: All the function apps need AppSetting:
        /// "FUNCTIONS_WORKER_RUNTIME" to be set stack name</param>
        /// <param
        /// name="siteConfigPropertiesDictionary">&lt;siteConfigProperties&gt;
        /// &lt;siteConfigProperty name="Use32BitWorkerProcess" value="false"
        /// /&gt;
        /// &lt;/siteConfigProperties&gt;
        /// Example: All Linux Function Apps, need Use32BitWorkerProcess to be
        /// set to 0</param>
        public StackMajorVersion(string displayVersion = default(string), string runtimeVersion = default(string), bool? isDefault = default(bool?), IList<StackMinorVersion> minorVersions = default(IList<StackMinorVersion>), bool? applicationInsights = default(bool?), bool? isPreview = default(bool?), bool? isDeprecated = default(bool?), bool? isHidden = default(bool?), IDictionary<string, object> appSettingsDictionary = default(IDictionary<string, object>), IDictionary<string, object> siteConfigPropertiesDictionary = default(IDictionary<string, object>))
        {
            DisplayVersion = displayVersion;
            RuntimeVersion = runtimeVersion;
            IsDefault = isDefault;
            MinorVersions = minorVersions;
            ApplicationInsights = applicationInsights;
            IsPreview = isPreview;
            IsDeprecated = isDeprecated;
            IsHidden = isHidden;
            AppSettingsDictionary = appSettingsDictionary;
            SiteConfigPropertiesDictionary = siteConfigPropertiesDictionary;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets application stack major version (display only).
        /// </summary>
        [JsonProperty(PropertyName = "displayVersion")]
        public string DisplayVersion { get; set; }

        /// <summary>
        /// Gets or sets application stack major version (runtime only).
        /// </summary>
        [JsonProperty(PropertyName = "runtimeVersion")]
        public string RuntimeVersion { get; set; }

        /// <summary>
        /// Gets or sets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if this
        /// is the default major version; otherwise,
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "isDefault")]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Gets or sets minor versions associated with the major version.
        /// </summary>
        [JsonProperty(PropertyName = "minorVersions")]
        public IList<StackMinorVersion> MinorVersions { get; set; }

        /// <summary>
        /// Gets or sets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if this
        /// supports Application Insights; otherwise,
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "applicationInsights")]
        public bool? ApplicationInsights { get; set; }

        /// <summary>
        /// Gets or sets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if this
        /// stack is in Preview, otherwise
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "isPreview")]
        public bool? IsPreview { get; set; }

        /// <summary>
        /// Gets or sets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if this
        /// stack has been deprecated, otherwise
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "isDeprecated")]
        public bool? IsDeprecated { get; set; }

        /// <summary>
        /// Gets or sets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if this
        /// stack should be hidden for new customers on portal, otherwise
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "isHidden")]
        public bool? IsHidden { get; set; }

        /// <summary>
        /// Gets or sets &amp;lt;appSettings&amp;gt;
        /// &amp;lt;appSetting name="FUNCTIONS_WORKER_RUNTIME" value="dotnet"
        /// /&amp;gt;
        /// &amp;lt;/appSettings&amp;gt;
        /// Example: All the function apps need AppSetting:
        /// "FUNCTIONS_WORKER_RUNTIME" to be set stack name
        /// </summary>
        [JsonProperty(PropertyName = "appSettingsDictionary")]
        public IDictionary<string, object> AppSettingsDictionary { get; set; }

        /// <summary>
        /// Gets or sets &amp;lt;siteConfigProperties&amp;gt;
        /// &amp;lt;siteConfigProperty name="Use32BitWorkerProcess"
        /// value="false" /&amp;gt;
        /// &amp;lt;/siteConfigProperties&amp;gt;
        /// Example: All Linux Function Apps, need Use32BitWorkerProcess to be
        /// set to 0
        /// </summary>
        [JsonProperty(PropertyName = "siteConfigPropertiesDictionary")]
        public IDictionary<string, object> SiteConfigPropertiesDictionary { get; set; }

    }
}
