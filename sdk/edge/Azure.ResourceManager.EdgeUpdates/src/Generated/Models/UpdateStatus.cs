// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EdgeUpdates.Models
{
    /// <summary> The Status. </summary>
    public readonly partial struct UpdateStatus : IEquatable<UpdateStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UpdateStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UpdateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string UpdateAvailableValue = "UpdateAvailable";
        private const string UptoDateValue = "UptoDate";
        private const string UpdateInProgressValue = "UpdateInProgress";
        private const string NeedsAttentionValue = "NeedsAttention";

        /// <summary> The device is in Unknown state. </summary>
        public static UpdateStatus Unknown { get; } = new UpdateStatus(UnknownValue);
        /// <summary> The device is in UpdateAvailable state. </summary>
        public static UpdateStatus UpdateAvailable { get; } = new UpdateStatus(UpdateAvailableValue);
        /// <summary> The device is in UptoDate state. </summary>
        public static UpdateStatus UptoDate { get; } = new UpdateStatus(UptoDateValue);
        /// <summary> The device is in UpdateInProgress state. </summary>
        public static UpdateStatus UpdateInProgress { get; } = new UpdateStatus(UpdateInProgressValue);
        /// <summary> The device is in NeedsAttention state. </summary>
        public static UpdateStatus NeedsAttention { get; } = new UpdateStatus(NeedsAttentionValue);
        /// <summary> Determines if two <see cref="UpdateStatus"/> values are the same. </summary>
        public static bool operator ==(UpdateStatus left, UpdateStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UpdateStatus"/> values are not the same. </summary>
        public static bool operator !=(UpdateStatus left, UpdateStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UpdateStatus"/>. </summary>
        public static implicit operator UpdateStatus(string value) => new UpdateStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UpdateStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UpdateStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
