// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.EdgeConnectivityStatuses.Models;

namespace Azure.ResourceManager.EdgeConnectivityStatuses
{
    /// <summary> A class to add extension methods to ArmResource. </summary>
    internal partial class ArmResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _connectivityStatusesClientDiagnostics;
        private ConnectivityStatusesRestOperations _connectivityStatusesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ArmResourceExtensionClient"/> class for mocking. </summary>
        protected ArmResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ArmResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ArmResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ConnectivityStatusesClientDiagnostics => _connectivityStatusesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.EdgeConnectivityStatuses", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ConnectivityStatusesRestOperations ConnectivityStatusesRestClient => _connectivityStatusesRestClient ??= new ConnectivityStatusesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List ConnectivityStatus resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectivityStatuses_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ConnectivityStatus" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ConnectivityStatus> GetConnectivityStatusesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ConnectivityStatusesRestClient.CreateListRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ConnectivityStatusesRestClient.CreateListNextPageRequest(nextLink, Id);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, ConnectivityStatus.DeserializeConnectivityStatus, ConnectivityStatusesClientDiagnostics, Pipeline, "ArmResourceExtensionClient.GetConnectivityStatuses", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List ConnectivityStatus resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectivityStatuses_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ConnectivityStatus" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ConnectivityStatus> GetConnectivityStatuses(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ConnectivityStatusesRestClient.CreateListRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ConnectivityStatusesRestClient.CreateListNextPageRequest(nextLink, Id);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, ConnectivityStatus.DeserializeConnectivityStatus, ConnectivityStatusesClientDiagnostics, Pipeline, "ArmResourceExtensionClient.GetConnectivityStatuses", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a ConnectivityStatus
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectivityStatuses_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="connectivityStatusName"> Name of ConnectivityStatus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ConnectivityStatus>> GetConnectivityStatusAsync(string connectivityStatusName, CancellationToken cancellationToken = default)
        {
            using var scope = ConnectivityStatusesClientDiagnostics.CreateScope("ArmResourceExtensionClient.GetConnectivityStatus");
            scope.Start();
            try
            {
                var response = await ConnectivityStatusesRestClient.GetAsync(Id, connectivityStatusName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a ConnectivityStatus
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectivityStatuses_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="connectivityStatusName"> Name of ConnectivityStatus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ConnectivityStatus> GetConnectivityStatus(string connectivityStatusName, CancellationToken cancellationToken = default)
        {
            using var scope = ConnectivityStatusesClientDiagnostics.CreateScope("ArmResourceExtensionClient.GetConnectivityStatus");
            scope.Start();
            try
            {
                var response = ConnectivityStatusesRestClient.Get(Id, connectivityStatusName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a ConnectivityStatus
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectivityStatuses_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="connectivityStatusName"> Name of ConnectivityStatus. </param>
        /// <param name="resource"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<ConnectivityStatus>> CreateOrUpdateConnectivityStatusAsync(WaitUntil waitUntil, string connectivityStatusName, ConnectivityStatus resource, CancellationToken cancellationToken = default)
        {
            using var scope = ConnectivityStatusesClientDiagnostics.CreateScope("ArmResourceExtensionClient.CreateOrUpdateConnectivityStatus");
            scope.Start();
            try
            {
                var response = await ConnectivityStatusesRestClient.CreateOrUpdateAsync(Id, connectivityStatusName, resource, cancellationToken).ConfigureAwait(false);
                var operation = new EdgeConnectivityStatusesArmOperation<ConnectivityStatus>(new ConnectivityStatusOperationSource(), ConnectivityStatusesClientDiagnostics, Pipeline, ConnectivityStatusesRestClient.CreateCreateOrUpdateRequest(Id, connectivityStatusName, resource).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a ConnectivityStatus
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectivityStatuses_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="connectivityStatusName"> Name of ConnectivityStatus. </param>
        /// <param name="resource"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<ConnectivityStatus> CreateOrUpdateConnectivityStatus(WaitUntil waitUntil, string connectivityStatusName, ConnectivityStatus resource, CancellationToken cancellationToken = default)
        {
            using var scope = ConnectivityStatusesClientDiagnostics.CreateScope("ArmResourceExtensionClient.CreateOrUpdateConnectivityStatus");
            scope.Start();
            try
            {
                var response = ConnectivityStatusesRestClient.CreateOrUpdate(Id, connectivityStatusName, resource, cancellationToken);
                var operation = new EdgeConnectivityStatusesArmOperation<ConnectivityStatus>(new ConnectivityStatusOperationSource(), ConnectivityStatusesClientDiagnostics, Pipeline, ConnectivityStatusesRestClient.CreateCreateOrUpdateRequest(Id, connectivityStatusName, resource).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a ConnectivityStatus
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectivityStatuses_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="connectivityStatusName"> Name of ConnectivityStatus. </param>
        /// <param name="properties"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ConnectivityStatus>> UpdateConnectivityStatusAsync(string connectivityStatusName, ConnectivityStatusUpdate properties, CancellationToken cancellationToken = default)
        {
            using var scope = ConnectivityStatusesClientDiagnostics.CreateScope("ArmResourceExtensionClient.UpdateConnectivityStatus");
            scope.Start();
            try
            {
                var response = await ConnectivityStatusesRestClient.UpdateAsync(Id, connectivityStatusName, properties, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a ConnectivityStatus
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectivityStatuses_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="connectivityStatusName"> Name of ConnectivityStatus. </param>
        /// <param name="properties"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ConnectivityStatus> UpdateConnectivityStatus(string connectivityStatusName, ConnectivityStatusUpdate properties, CancellationToken cancellationToken = default)
        {
            using var scope = ConnectivityStatusesClientDiagnostics.CreateScope("ArmResourceExtensionClient.UpdateConnectivityStatus");
            scope.Start();
            try
            {
                var response = ConnectivityStatusesRestClient.Update(Id, connectivityStatusName, properties, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a ConnectivityStatus
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectivityStatuses_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="connectivityStatusName"> Name of ConnectivityStatus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteConnectivityStatusAsync(string connectivityStatusName, CancellationToken cancellationToken = default)
        {
            using var scope = ConnectivityStatusesClientDiagnostics.CreateScope("ArmResourceExtensionClient.DeleteConnectivityStatus");
            scope.Start();
            try
            {
                var response = await ConnectivityStatusesRestClient.DeleteAsync(Id, connectivityStatusName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a ConnectivityStatus
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectivityStatuses_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="connectivityStatusName"> Name of ConnectivityStatus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteConnectivityStatus(string connectivityStatusName, CancellationToken cancellationToken = default)
        {
            using var scope = ConnectivityStatusesClientDiagnostics.CreateScope("ArmResourceExtensionClient.DeleteConnectivityStatus");
            scope.Start();
            try
            {
                var response = ConnectivityStatusesRestClient.Delete(Id, connectivityStatusName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
