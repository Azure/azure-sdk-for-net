// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.Sku.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmSkuModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.SkuResourceSku"/>. </summary>
        /// <param name="resourceType"> The type of resource the SKU applies to. </param>
        /// <param name="name"> The name of SKU. </param>
        /// <param name="tier"> Specifies the tier of virtual machines in a scale set.&lt;br /&gt;&lt;br /&gt; Possible Values:&lt;br /&gt;&lt;br /&gt; **Standard**&lt;br /&gt;&lt;br /&gt; **Basic**. </param>
        /// <param name="size"> The Size of the SKU. </param>
        /// <param name="family"> The Family of this particular SKU. </param>
        /// <param name="kind"> The Kind of resources that are supported in this SKU. </param>
        /// <param name="capacity"> Specifies the number of virtual machines in the scale set. </param>
        /// <param name="locations"> The set of locations that the SKU is available. </param>
        /// <param name="locationInfo"> A list of locations and availability zones in those locations where the SKU is available. </param>
        /// <param name="apiVersions"> The api versions that support this SKU. </param>
        /// <param name="costs"> Metadata for retrieving price info. </param>
        /// <param name="capabilities"> A name value pair to describe the capability. </param>
        /// <param name="restrictions"> The restrictions because of which SKU cannot be used. This is empty if there are no restrictions. </param>
        /// <returns> A new <see cref="Models.SkuResourceSku"/> instance for mocking. </returns>
        public static SkuResourceSku SkuResourceSku(string resourceType = null, string name = null, string tier = null, string size = null, string family = null, string kind = null, SkuResourceSkuCapacity capacity = null, IEnumerable<AzureLocation> locations = null, IEnumerable<SkuResourceSkuLocationInfo> locationInfo = null, IEnumerable<string> apiVersions = null, IEnumerable<ResourceSkuCosts> costs = null, IEnumerable<ComputeResourceSkuCapabilities> capabilities = null, IEnumerable<SkuResourceSkuRestrictions> restrictions = null)
        {
            locations ??= new List<AzureLocation>();
            locationInfo ??= new List<SkuResourceSkuLocationInfo>();
            apiVersions ??= new List<string>();
            costs ??= new List<ResourceSkuCosts>();
            capabilities ??= new List<ComputeResourceSkuCapabilities>();
            restrictions ??= new List<SkuResourceSkuRestrictions>();

            return new SkuResourceSku(
                resourceType,
                name,
                tier,
                size,
                family,
                kind,
                capacity,
                locations?.ToList(),
                locationInfo?.ToList(),
                apiVersions?.ToList(),
                costs?.ToList(),
                capabilities?.ToList(),
                restrictions?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SkuResourceSkuCapacity"/>. </summary>
        /// <param name="minimum"> The minimum capacity. </param>
        /// <param name="maximum"> The maximum capacity that can be set. </param>
        /// <param name="default"> The default capacity. </param>
        /// <param name="scaleType"> The scale type applicable to the sku. </param>
        /// <returns> A new <see cref="Models.SkuResourceSkuCapacity"/> instance for mocking. </returns>
        public static SkuResourceSkuCapacity SkuResourceSkuCapacity(long? minimum = null, long? maximum = null, long? @default = null, SkuResourceSkuCapacityScaleType? scaleType = null)
        {
            return new SkuResourceSkuCapacity(minimum, maximum, @default, scaleType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SkuResourceSkuLocationInfo"/>. </summary>
        /// <param name="location"> Location of the SKU. </param>
        /// <param name="zones"> List of availability zones where the SKU is supported. </param>
        /// <param name="zoneDetails"> Details of capabilities available to a SKU in specific zones. </param>
        /// <param name="extendedLocations"> The names of extended locations. </param>
        /// <param name="extendedLocationType"> The type of the extended location. </param>
        /// <returns> A new <see cref="Models.SkuResourceSkuLocationInfo"/> instance for mocking. </returns>
        public static SkuResourceSkuLocationInfo SkuResourceSkuLocationInfo(AzureLocation? location = null, IEnumerable<string> zones = null, IEnumerable<SkuResourceSkuZoneDetails> zoneDetails = null, IEnumerable<string> extendedLocations = null, ExtendedLocationType? extendedLocationType = null)
        {
            zones ??= new List<string>();
            zoneDetails ??= new List<SkuResourceSkuZoneDetails>();
            extendedLocations ??= new List<string>();

            return new SkuResourceSkuLocationInfo(
                location,
                zones?.ToList(),
                zoneDetails?.ToList(),
                extendedLocations?.ToList(),
                extendedLocationType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SkuResourceSkuZoneDetails"/>. </summary>
        /// <param name="name"> The set of zones that the SKU is available in with the specified capabilities. </param>
        /// <param name="capabilities"> A list of capabilities that are available for the SKU in the specified list of zones. </param>
        /// <returns> A new <see cref="Models.SkuResourceSkuZoneDetails"/> instance for mocking. </returns>
        public static SkuResourceSkuZoneDetails SkuResourceSkuZoneDetails(IEnumerable<string> name = null, IEnumerable<ComputeResourceSkuCapabilities> capabilities = null)
        {
            name ??= new List<string>();
            capabilities ??= new List<ComputeResourceSkuCapabilities>();

            return new SkuResourceSkuZoneDetails(name?.ToList(), capabilities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ComputeResourceSkuCapabilities"/>. </summary>
        /// <param name="name"> An invariant to describe the feature. </param>
        /// <param name="value"> An invariant if the feature is measured by quantity. </param>
        /// <returns> A new <see cref="Models.ComputeResourceSkuCapabilities"/> instance for mocking. </returns>
        public static ComputeResourceSkuCapabilities ComputeResourceSkuCapabilities(string name = null, string value = null)
        {
            return new ComputeResourceSkuCapabilities(name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceSkuCosts"/>. </summary>
        /// <param name="meterId"> Used for querying price from commerce. </param>
        /// <param name="quantity"> The multiplier is needed to extend the base metered cost. </param>
        /// <param name="extendedUnit"> An invariant to show the extended unit. </param>
        /// <returns> A new <see cref="Models.ResourceSkuCosts"/> instance for mocking. </returns>
        public static ResourceSkuCosts ResourceSkuCosts(string meterId = null, long? quantity = null, string extendedUnit = null)
        {
            return new ResourceSkuCosts(meterId, quantity, extendedUnit, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SkuResourceSkuRestrictions"/>. </summary>
        /// <param name="restrictionsType"> The type of restrictions. </param>
        /// <param name="values"> The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted. </param>
        /// <param name="restrictionInfo"> The information about the restriction where the SKU cannot be used. </param>
        /// <param name="reasonCode"> The reason for restriction. </param>
        /// <returns> A new <see cref="Models.SkuResourceSkuRestrictions"/> instance for mocking. </returns>
        public static SkuResourceSkuRestrictions SkuResourceSkuRestrictions(SkuResourceSkuRestrictionsType? restrictionsType = null, IEnumerable<string> values = null, SkuResourceSkuRestrictionInfo restrictionInfo = null, SkuResourceSkuRestrictionsReasonCode? reasonCode = null)
        {
            values ??= new List<string>();

            return new SkuResourceSkuRestrictions(restrictionsType, values?.ToList(), restrictionInfo, reasonCode, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SkuResourceSkuRestrictionInfo"/>. </summary>
        /// <param name="locations"> Locations where the SKU is restricted. </param>
        /// <param name="zones"> List of availability zones where the SKU is restricted. </param>
        /// <returns> A new <see cref="Models.SkuResourceSkuRestrictionInfo"/> instance for mocking. </returns>
        public static SkuResourceSkuRestrictionInfo SkuResourceSkuRestrictionInfo(IEnumerable<AzureLocation> locations = null, IEnumerable<string> zones = null)
        {
            locations ??= new List<AzureLocation>();
            zones ??= new List<string>();

            return new SkuResourceSkuRestrictionInfo(locations?.ToList(), zones?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
