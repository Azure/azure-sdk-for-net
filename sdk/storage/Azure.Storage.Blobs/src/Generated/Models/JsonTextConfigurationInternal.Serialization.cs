// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Blobs.Models
{
    internal partial class JsonTextConfigurationInternal : IXmlSerializable, IPersistableModel<JsonTextConfigurationInternal>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "JsonTextConfiguration");
            if (Optional.IsDefined(RecordSeparator))
            {
                writer.WriteStartElement("RecordSeparator");
                writer.WriteValue(RecordSeparator);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static JsonTextConfigurationInternal DeserializeJsonTextConfigurationInternal(XElement element, ModelReaderWriterOptions options = null)
        {
            string recordSeparator = default;
            if (element.Element("RecordSeparator") is XElement recordSeparatorElement)
            {
                recordSeparator = (string)recordSeparatorElement;
            }
            return new JsonTextConfigurationInternal(recordSeparator, default);
        }

        BinaryData IPersistableModel<JsonTextConfigurationInternal>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<JsonTextConfigurationInternal>;
            bool isValid = options.Format == "J" && implementsJson || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        JsonTextConfigurationInternal IPersistableModel<JsonTextConfigurationInternal>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(JsonTextConfigurationInternal)} does not support '{options.Format}' format.");
            }

            return DeserializeJsonTextConfigurationInternal(XElement.Load(data.ToStream()), options);
        }

        string IPersistableModel<JsonTextConfigurationInternal>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
