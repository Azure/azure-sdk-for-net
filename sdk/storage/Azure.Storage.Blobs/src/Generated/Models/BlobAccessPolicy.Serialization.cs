// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Blobs.Models
{
    public partial class BlobAccessPolicy : IXmlSerializable
    {
        private void WriteInternal(XmlWriter writer, string nameHint, ModelReaderWriterOptions options)
        {
            writer.WriteStartElement(nameHint ?? "AccessPolicy");
            if (Optional.IsDefined(PolicyStartsOn))
            {
                writer.WriteStartElement("Start");
                writer.WriteValue(PolicyStartsOn.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(PolicyExpiresOn))
            {
                writer.WriteStartElement("Expiry");
                writer.WriteValue(PolicyExpiresOn.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Permissions))
            {
                writer.WriteStartElement("Permission");
                writer.WriteValue(Permissions);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => WriteInternal(writer, nameHint, new ModelReaderWriterOptions("W"));

        internal static BlobAccessPolicy DeserializeBlobAccessPolicy(XElement element, ModelReaderWriterOptions options = null)
        {
            DateTimeOffset? policyStartsOn = default;
            DateTimeOffset? policyExpiresOn = default;
            string permissions = default;
            if (element.Element("Start") is XElement startElement)
            {
                policyStartsOn = startElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("Expiry") is XElement expiryElement)
            {
                policyExpiresOn = expiryElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("Permission") is XElement permissionElement)
            {
                permissions = (string)permissionElement;
            }
            return new BlobAccessPolicy(policyStartsOn, policyExpiresOn, permissions);
        }
    }
}
