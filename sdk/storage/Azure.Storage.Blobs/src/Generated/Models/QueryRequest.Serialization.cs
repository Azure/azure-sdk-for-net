// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Storage.Blobs.Models
{
    internal partial class QueryRequest : IXmlSerializable, IModelSerializable<QueryRequest>
    {
        private void Serialize(XmlWriter writer, string nameHint, ModelSerializerOptions options)
        {
            writer.WriteStartElement(nameHint ?? "QueryRequest");
            writer.WriteStartElement("QueryType");
            writer.WriteValue(QueryType);
            writer.WriteEndElement();
            writer.WriteStartElement("Expression");
            writer.WriteValue(Expression);
            writer.WriteEndElement();
            if (Optional.IsDefined(InputSerialization))
            {
                writer.WriteObjectValue(InputSerialization, "InputSerialization");
            }
            if (Optional.IsDefined(OutputSerialization))
            {
                writer.WriteObjectValue(OutputSerialization, "OutputSerialization");
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => Serialize(writer, nameHint, ModelSerializerOptions.DefaultWireOptions);

        internal static QueryRequest DeserializeQueryRequest(XElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;
            string queryType = default;
            string expression = default;
            QuerySerialization inputSerialization = default;
            QuerySerialization outputSerialization = default;
            if (element.Element("QueryType") is XElement queryTypeElement)
            {
                queryType = (string)queryTypeElement;
            }
            if (element.Element("Expression") is XElement expressionElement)
            {
                expression = (string)expressionElement;
            }
            if (element.Element("InputSerialization") is XElement inputSerializationElement)
            {
                inputSerialization = QuerySerialization.DeserializeQuerySerialization(inputSerializationElement);
            }
            if (element.Element("OutputSerialization") is XElement outputSerializationElement)
            {
                outputSerialization = QuerySerialization.DeserializeQuerySerialization(outputSerializationElement);
            }
            return new QueryRequest(queryType, expression, inputSerialization, outputSerialization, default);
        }

        BinaryData IModelSerializable<QueryRequest>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            options ??= ModelSerializerOptions.DefaultWireOptions;
            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            Serialize(writer, null, options);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        QueryRequest IModelSerializable<QueryRequest>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return DeserializeQueryRequest(XElement.Load(data.ToStream()), options);
        }

        public static implicit operator RequestContent(QueryRequest model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator QueryRequest(Response response)
        {
            if (response is null)
            {
                return null;
            }

            return DeserializeQueryRequest(XElement.Load(response.ContentStream), ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
