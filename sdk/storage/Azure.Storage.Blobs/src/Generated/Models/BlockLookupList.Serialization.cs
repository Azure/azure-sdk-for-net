// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Blobs.Models
{
    internal partial class BlockLookupList : IXmlSerializable, IPersistableModel<BlockLookupList>
    {
        private void _Write(XmlWriter writer, string nameHint, ModelReaderWriterOptions options)
        {
            writer.WriteStartElement(nameHint ?? "BlockList");
            if (Optional.IsCollectionDefined(Committed))
            {
                foreach (var item in Committed)
                {
                    writer.WriteStartElement("Committed");
                    writer.WriteValue(item);
                    writer.WriteEndElement();
                }
            }
            if (Optional.IsCollectionDefined(Uncommitted))
            {
                foreach (var item in Uncommitted)
                {
                    writer.WriteStartElement("Uncommitted");
                    writer.WriteValue(item);
                    writer.WriteEndElement();
                }
            }
            if (Optional.IsCollectionDefined(Latest))
            {
                foreach (var item in Latest)
                {
                    writer.WriteStartElement("Latest");
                    writer.WriteValue(item);
                    writer.WriteEndElement();
                }
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => _Write(writer, nameHint, new ModelReaderWriterOptions("W"));

        internal static BlockLookupList DeserializeBlockLookupList(XElement element, ModelReaderWriterOptions options = null)
        {
            IList<string> committed = default;
            IList<string> uncommitted = default;
            IList<string> latest = default;
            var array = new List<string>();
            foreach (var e in element.Elements("Committed"))
            {
                array.Add((string)e);
            }
            committed = array;
            var array0 = new List<string>();
            foreach (var e in element.Elements("Uncommitted"))
            {
                array0.Add((string)e);
            }
            uncommitted = array0;
            var array1 = new List<string>();
            foreach (var e in element.Elements("Latest"))
            {
                array1.Add((string)e);
            }
            latest = array1;
            return new BlockLookupList(committed, uncommitted, latest, serializedAdditionalRawData: null);
        }

        BinaryData IPersistableModel<BlockLookupList>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BlockLookupList>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    {
                        using MemoryStream stream = new MemoryStream();
                        using XmlWriter writer = XmlWriter.Create(stream);
                        _Write(writer, null, options);
                        writer.Flush();
                        if (stream.Position > int.MaxValue)
                        {
                            return BinaryData.FromStream(stream);
                        }
                        else
                        {
                            return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
                        }
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(BlockLookupList)} does not support '{options.Format}' format.");
            }
        }

        BlockLookupList IPersistableModel<BlockLookupList>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BlockLookupList>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    return DeserializeBlockLookupList(XElement.Load(data.ToStream()), options);
                default:
                    throw new InvalidOperationException($"The model {nameof(BlockLookupList)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<BlockLookupList>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
