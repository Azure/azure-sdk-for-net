// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Storage.Blobs.Models
{
    internal partial class BlockLookupList : IXmlSerializable, IModelSerializable<BlockLookupList>
    {
        private void Serialize(XmlWriter writer, string nameHint, ModelSerializerOptions options)
        {
            writer.WriteStartElement(nameHint ?? "BlockList");
            if (Optional.IsCollectionDefined(Committed))
            {
                foreach (var item in Committed)
                {
                    writer.WriteStartElement("Committed");
                    writer.WriteValue(item);
                    writer.WriteEndElement();
                }
            }
            if (Optional.IsCollectionDefined(Uncommitted))
            {
                foreach (var item in Uncommitted)
                {
                    writer.WriteStartElement("Uncommitted");
                    writer.WriteValue(item);
                    writer.WriteEndElement();
                }
            }
            if (Optional.IsCollectionDefined(Latest))
            {
                foreach (var item in Latest)
                {
                    writer.WriteStartElement("Latest");
                    writer.WriteValue(item);
                    writer.WriteEndElement();
                }
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => Serialize(writer, nameHint, ModelSerializerOptions.DefaultWireOptions);

        internal static BlockLookupList DeserializeBlockLookupList(XElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;
            IList<string> committed = default;
            IList<string> uncommitted = default;
            IList<string> latest = default;
            var array = new List<string>();
            foreach (var e in element.Elements("Committed"))
            {
                array.Add((string)e);
            }
            committed = array;
            var array0 = new List<string>();
            foreach (var e in element.Elements("Uncommitted"))
            {
                array0.Add((string)e);
            }
            uncommitted = array0;
            var array1 = new List<string>();
            foreach (var e in element.Elements("Latest"))
            {
                array1.Add((string)e);
            }
            latest = array1;
            return new BlockLookupList(committed, uncommitted, latest, default);
        }

        BinaryData IModelSerializable<BlockLookupList>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            options ??= ModelSerializerOptions.DefaultWireOptions;
            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            Serialize(writer, null, options);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        BlockLookupList IModelSerializable<BlockLookupList>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return DeserializeBlockLookupList(XElement.Load(data.ToStream()), options);
        }

        public static implicit operator RequestContent(BlockLookupList model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator BlockLookupList(Response response)
        {
            if (response is null)
            {
                return null;
            }

            return DeserializeBlockLookupList(XElement.Load(response.ContentStream), ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
