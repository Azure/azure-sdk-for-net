// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Blobs.Models
{
    internal partial class FilterBlobItem : IXmlSerializable, IModel<FilterBlobItem>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "Blob");
            writer.WriteStartElement("Name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("ContainerName");
            writer.WriteValue(ContainerName);
            writer.WriteEndElement();
            if (Optional.IsDefined(Tags))
            {
                writer.WriteObjectValue(Tags, "Tags");
            }
            if (Optional.IsDefined(VersionId))
            {
                writer.WriteStartElement("VersionId");
                writer.WriteValue(VersionId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(IsCurrentVersion))
            {
                writer.WriteStartElement("IsCurrentVersion");
                writer.WriteValue(IsCurrentVersion.Value);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static FilterBlobItem DeserializeFilterBlobItem(XElement element, ModelReaderWriterOptions options = null)
        {
            string name = default;
            string containerName = default;
            BlobTags tags = default;
            string versionId = default;
            bool? isCurrentVersion = default;
            if (element.Element("Name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("ContainerName") is XElement containerNameElement)
            {
                containerName = (string)containerNameElement;
            }
            if (element.Element("Tags") is XElement tagsElement)
            {
                tags = BlobTags.DeserializeBlobTags(tagsElement);
            }
            if (element.Element("VersionId") is XElement versionIdElement)
            {
                versionId = (string)versionIdElement;
            }
            if (element.Element("IsCurrentVersion") is XElement isCurrentVersionElement)
            {
                isCurrentVersion = (bool?)isCurrentVersionElement;
            }
            return new FilterBlobItem(name, containerName, tags, versionId, isCurrentVersion, default);
        }

        BinaryData IModel<FilterBlobItem>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<FilterBlobItem>;
            bool isValid = options.Format == ModelReaderWriterFormat.Json && implementsJson || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        FilterBlobItem IModel<FilterBlobItem>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(FilterBlobItem)} does not support '{options.Format}' format.");
            }

            return DeserializeFilterBlobItem(XElement.Load(data.ToStream()), options);
        }

        ModelReaderWriterFormat IModel<FilterBlobItem>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Xml;
    }
}
