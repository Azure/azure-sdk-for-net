// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Blobs.Models
{
    internal partial class ContainerPropertiesInternal : IXmlSerializable, IModel<ContainerPropertiesInternal>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "ContainerProperties");
            writer.WriteStartElement("Last-Modified");
            writer.WriteValue(LastModified, "R");
            writer.WriteEndElement();
            writer.WriteStartElement("Etag");
            writer.WriteValue(Etag);
            writer.WriteEndElement();
            if (Optional.IsDefined(LeaseStatus))
            {
                writer.WriteStartElement("LeaseStatus");
                writer.WriteValue(LeaseStatus.Value.ToSerialString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LeaseState))
            {
                writer.WriteStartElement("LeaseState");
                writer.WriteValue(LeaseState.Value.ToSerialString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LeaseDuration))
            {
                writer.WriteStartElement("LeaseDuration");
                writer.WriteValue(LeaseDuration.Value.ToSerialString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(PublicAccess))
            {
                writer.WriteStartElement("PublicAccess");
                writer.WriteValue(PublicAccess.Value.ToSerialString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(HasImmutabilityPolicy))
            {
                writer.WriteStartElement("HasImmutabilityPolicy");
                writer.WriteValue(HasImmutabilityPolicy.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(HasLegalHold))
            {
                writer.WriteStartElement("HasLegalHold");
                writer.WriteValue(HasLegalHold.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DefaultEncryptionScope))
            {
                writer.WriteStartElement("DefaultEncryptionScope");
                writer.WriteValue(DefaultEncryptionScope);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(PreventEncryptionScopeOverride))
            {
                writer.WriteStartElement("DenyEncryptionScopeOverride");
                writer.WriteValue(PreventEncryptionScopeOverride.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DeletedTime))
            {
                writer.WriteStartElement("DeletedTime");
                writer.WriteValue(DeletedTime.Value, "R");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(RemainingRetentionDays))
            {
                writer.WriteStartElement("RemainingRetentionDays");
                writer.WriteValue(RemainingRetentionDays.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(IsImmutableStorageWithVersioningEnabled))
            {
                writer.WriteStartElement("ImmutableStorageWithVersioningEnabled");
                writer.WriteValue(IsImmutableStorageWithVersioningEnabled.Value);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static ContainerPropertiesInternal DeserializeContainerPropertiesInternal(XElement element, ModelReaderWriterOptions options = null)
        {
            DateTimeOffset lastModified = default;
            string etag = default;
            LeaseStatus? leaseStatus = default;
            LeaseState? leaseState = default;
            LeaseDurationType? leaseDuration = default;
            PublicAccessType? publicAccess = default;
            bool? hasImmutabilityPolicy = default;
            bool? hasLegalHold = default;
            string defaultEncryptionScope = default;
            bool? preventEncryptionScopeOverride = default;
            DateTimeOffset? deletedTime = default;
            int? remainingRetentionDays = default;
            bool? isImmutableStorageWithVersioningEnabled = default;
            if (element.Element("Last-Modified") is XElement lastModifiedElement)
            {
                lastModified = lastModifiedElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("Etag") is XElement etagElement)
            {
                etag = (string)etagElement;
            }
            if (element.Element("LeaseStatus") is XElement leaseStatusElement)
            {
                leaseStatus = leaseStatusElement.Value.ToLeaseStatus();
            }
            if (element.Element("LeaseState") is XElement leaseStateElement)
            {
                leaseState = leaseStateElement.Value.ToLeaseState();
            }
            if (element.Element("LeaseDuration") is XElement leaseDurationElement)
            {
                leaseDuration = leaseDurationElement.Value.ToLeaseDurationType();
            }
            if (element.Element("PublicAccess") is XElement publicAccessElement)
            {
                publicAccess = publicAccessElement.Value.ToPublicAccessType();
            }
            if (element.Element("HasImmutabilityPolicy") is XElement hasImmutabilityPolicyElement)
            {
                hasImmutabilityPolicy = (bool?)hasImmutabilityPolicyElement;
            }
            if (element.Element("HasLegalHold") is XElement hasLegalHoldElement)
            {
                hasLegalHold = (bool?)hasLegalHoldElement;
            }
            if (element.Element("DefaultEncryptionScope") is XElement defaultEncryptionScopeElement)
            {
                defaultEncryptionScope = (string)defaultEncryptionScopeElement;
            }
            if (element.Element("DenyEncryptionScopeOverride") is XElement denyEncryptionScopeOverrideElement)
            {
                preventEncryptionScopeOverride = (bool?)denyEncryptionScopeOverrideElement;
            }
            if (element.Element("DeletedTime") is XElement deletedTimeElement)
            {
                deletedTime = deletedTimeElement.GetDateTimeOffsetValue("R");
            }
            if (element.Element("RemainingRetentionDays") is XElement remainingRetentionDaysElement)
            {
                remainingRetentionDays = (int?)remainingRetentionDaysElement;
            }
            if (element.Element("ImmutableStorageWithVersioningEnabled") is XElement immutableStorageWithVersioningEnabledElement)
            {
                isImmutableStorageWithVersioningEnabled = (bool?)immutableStorageWithVersioningEnabledElement;
            }
            return new ContainerPropertiesInternal(lastModified, etag, leaseStatus, leaseState, leaseDuration, publicAccess, hasImmutabilityPolicy, hasLegalHold, defaultEncryptionScope, preventEncryptionScopeOverride, deletedTime, remainingRetentionDays, isImmutableStorageWithVersioningEnabled, default);
        }

        BinaryData IModel<ContainerPropertiesInternal>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<ContainerPropertiesInternal>;
            bool isValid = options.Format == ModelReaderWriterFormat.Json && implementsJson || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        ContainerPropertiesInternal IModel<ContainerPropertiesInternal>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ContainerPropertiesInternal)} does not support '{options.Format}' format.");
            }

            return DeserializeContainerPropertiesInternal(XElement.Load(data.ToStream()), options);
        }

        ModelReaderWriterFormat IModel<ContainerPropertiesInternal>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Xml;
    }
}
