// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Blobs.Models
{
    internal partial class DelimitedTextConfigurationInternal : IXmlSerializable, IPersistableModel<DelimitedTextConfigurationInternal>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "DelimitedTextConfiguration");
            if (Optional.IsDefined(ColumnSeparator))
            {
                writer.WriteStartElement("ColumnSeparator");
                writer.WriteValue(ColumnSeparator);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(FieldQuote))
            {
                writer.WriteStartElement("FieldQuote");
                writer.WriteValue(FieldQuote);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(RecordSeparator))
            {
                writer.WriteStartElement("RecordSeparator");
                writer.WriteValue(RecordSeparator);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(EscapeChar))
            {
                writer.WriteStartElement("EscapeChar");
                writer.WriteValue(EscapeChar);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(HeadersPresent))
            {
                writer.WriteStartElement("HasHeaders");
                writer.WriteValue(HeadersPresent.Value);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static DelimitedTextConfigurationInternal DeserializeDelimitedTextConfigurationInternal(XElement element, ModelReaderWriterOptions options = null)
        {
            string columnSeparator = default;
            string fieldQuote = default;
            string recordSeparator = default;
            string escapeChar = default;
            bool? headersPresent = default;
            if (element.Element("ColumnSeparator") is XElement columnSeparatorElement)
            {
                columnSeparator = (string)columnSeparatorElement;
            }
            if (element.Element("FieldQuote") is XElement fieldQuoteElement)
            {
                fieldQuote = (string)fieldQuoteElement;
            }
            if (element.Element("RecordSeparator") is XElement recordSeparatorElement)
            {
                recordSeparator = (string)recordSeparatorElement;
            }
            if (element.Element("EscapeChar") is XElement escapeCharElement)
            {
                escapeChar = (string)escapeCharElement;
            }
            if (element.Element("HasHeaders") is XElement hasHeadersElement)
            {
                headersPresent = (bool?)hasHeadersElement;
            }
            return new DelimitedTextConfigurationInternal(columnSeparator, fieldQuote, recordSeparator, escapeChar, headersPresent, default);
        }

        BinaryData IPersistableModel<DelimitedTextConfigurationInternal>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<DelimitedTextConfigurationInternal>;
            bool isValid = options.Format == "J" && implementsJson || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        DelimitedTextConfigurationInternal IPersistableModel<DelimitedTextConfigurationInternal>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(DelimitedTextConfigurationInternal)} does not support '{options.Format}' format.");
            }

            return DeserializeDelimitedTextConfigurationInternal(XElement.Load(data.ToStream()), options);
        }

        string IPersistableModel<DelimitedTextConfigurationInternal>.GetWireFormat(ModelReaderWriterOptions options) => "X";
    }
}
