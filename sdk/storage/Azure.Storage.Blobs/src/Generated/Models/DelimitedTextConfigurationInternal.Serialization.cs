// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Storage.Blobs.Models
{
    internal partial class DelimitedTextConfigurationInternal : IXmlSerializable, IModelSerializable<DelimitedTextConfigurationInternal>
    {
        private void Serialize(XmlWriter writer, string nameHint, ModelSerializerOptions options)
        {
            writer.WriteStartElement(nameHint ?? "DelimitedTextConfiguration");
            if (Optional.IsDefined(ColumnSeparator))
            {
                writer.WriteStartElement("ColumnSeparator");
                writer.WriteValue(ColumnSeparator);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(FieldQuote))
            {
                writer.WriteStartElement("FieldQuote");
                writer.WriteValue(FieldQuote);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(RecordSeparator))
            {
                writer.WriteStartElement("RecordSeparator");
                writer.WriteValue(RecordSeparator);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(EscapeChar))
            {
                writer.WriteStartElement("EscapeChar");
                writer.WriteValue(EscapeChar);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(HeadersPresent))
            {
                writer.WriteStartElement("HasHeaders");
                writer.WriteValue(HeadersPresent.Value);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => Serialize(writer, nameHint, ModelSerializerOptions.DefaultWireOptions);

        internal static DelimitedTextConfigurationInternal DeserializeDelimitedTextConfigurationInternal(XElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;
            string columnSeparator = default;
            string fieldQuote = default;
            string recordSeparator = default;
            string escapeChar = default;
            bool? headersPresent = default;
            if (element.Element("ColumnSeparator") is XElement columnSeparatorElement)
            {
                columnSeparator = (string)columnSeparatorElement;
            }
            if (element.Element("FieldQuote") is XElement fieldQuoteElement)
            {
                fieldQuote = (string)fieldQuoteElement;
            }
            if (element.Element("RecordSeparator") is XElement recordSeparatorElement)
            {
                recordSeparator = (string)recordSeparatorElement;
            }
            if (element.Element("EscapeChar") is XElement escapeCharElement)
            {
                escapeChar = (string)escapeCharElement;
            }
            if (element.Element("HasHeaders") is XElement hasHeadersElement)
            {
                headersPresent = (bool?)hasHeadersElement;
            }
            return new DelimitedTextConfigurationInternal(columnSeparator, fieldQuote, recordSeparator, escapeChar, headersPresent, default);
        }

        BinaryData IModelSerializable<DelimitedTextConfigurationInternal>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            options ??= ModelSerializerOptions.DefaultWireOptions;
            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            Serialize(writer, null, options);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        DelimitedTextConfigurationInternal IModelSerializable<DelimitedTextConfigurationInternal>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return DeserializeDelimitedTextConfigurationInternal(XElement.Load(data.ToStream()), options);
        }

        public static implicit operator RequestContent(DelimitedTextConfigurationInternal model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator DelimitedTextConfigurationInternal(Response response)
        {
            if (response is null)
            {
                return null;
            }

            return DeserializeDelimitedTextConfigurationInternal(XElement.Load(response.ContentStream), ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
