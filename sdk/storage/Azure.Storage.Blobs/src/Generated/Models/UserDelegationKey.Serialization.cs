// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Storage.Blobs.Models
{
    public partial class UserDelegationKey : IXmlSerializable, IModelSerializable<UserDelegationKey>
    {
        private void Serialize(XmlWriter writer, string nameHint, ModelSerializerOptions options)
        {
            writer.WriteStartElement(nameHint ?? "UserDelegationKey");
            writer.WriteStartElement("SignedOid");
            writer.WriteValue(SignedObjectId);
            writer.WriteEndElement();
            writer.WriteStartElement("SignedTid");
            writer.WriteValue(SignedTenantId);
            writer.WriteEndElement();
            writer.WriteStartElement("SignedStart");
            writer.WriteValue(SignedStartsOn, "O");
            writer.WriteEndElement();
            writer.WriteStartElement("SignedExpiry");
            writer.WriteValue(SignedExpiresOn, "O");
            writer.WriteEndElement();
            writer.WriteStartElement("SignedService");
            writer.WriteValue(SignedService);
            writer.WriteEndElement();
            writer.WriteStartElement("SignedVersion");
            writer.WriteValue(SignedVersion);
            writer.WriteEndElement();
            writer.WriteStartElement("Value");
            writer.WriteValue(Value);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => Serialize(writer, nameHint, ModelSerializerOptions.DefaultWireOptions);

        internal static UserDelegationKey DeserializeUserDelegationKey(XElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;
            string signedObjectId = default;
            string signedTenantId = default;
            DateTimeOffset signedStartsOn = default;
            DateTimeOffset signedExpiresOn = default;
            string signedService = default;
            string signedVersion = default;
            string value = default;
            if (element.Element("SignedOid") is XElement signedOidElement)
            {
                signedObjectId = (string)signedOidElement;
            }
            if (element.Element("SignedTid") is XElement signedTidElement)
            {
                signedTenantId = (string)signedTidElement;
            }
            if (element.Element("SignedStart") is XElement signedStartElement)
            {
                signedStartsOn = signedStartElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("SignedExpiry") is XElement signedExpiryElement)
            {
                signedExpiresOn = signedExpiryElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("SignedService") is XElement signedServiceElement)
            {
                signedService = (string)signedServiceElement;
            }
            if (element.Element("SignedVersion") is XElement signedVersionElement)
            {
                signedVersion = (string)signedVersionElement;
            }
            if (element.Element("Value") is XElement valueElement)
            {
                value = (string)valueElement;
            }
            return new UserDelegationKey(signedObjectId, signedTenantId, signedStartsOn, signedExpiresOn, signedService, signedVersion, value, default);
        }

        BinaryData IModelSerializable<UserDelegationKey>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            options ??= ModelSerializerOptions.DefaultWireOptions;
            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            Serialize(writer, null, options);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        UserDelegationKey IModelSerializable<UserDelegationKey>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return DeserializeUserDelegationKey(XElement.Load(data.ToStream()), options);
        }

        /// <summary> Converts a <see cref="UserDelegationKey"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="UserDelegationKey"/> to convert. </param>
        public static implicit operator RequestContent(UserDelegationKey model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="UserDelegationKey"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator UserDelegationKey(Response response)
        {
            if (response is null)
            {
                return null;
            }

            return DeserializeUserDelegationKey(XElement.Load(response.ContentStream), ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
