// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Blobs.Models
{
    internal partial class BlobFlatListSegment : IXmlSerializable, IModel<BlobFlatListSegment>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "Blobs");
            foreach (var item in BlobItems)
            {
                writer.WriteObjectValue(item, "Blob");
            }
            writer.WriteEndElement();
        }

        internal static BlobFlatListSegment DeserializeBlobFlatListSegment(XElement element, ModelReaderWriterOptions options = null)
        {
            IReadOnlyList<BlobItemInternal> blobItems = default;
            var array = new List<BlobItemInternal>();
            foreach (var e in element.Elements("Blob"))
            {
                array.Add(BlobItemInternal.DeserializeBlobItemInternal(e));
            }
            blobItems = array;
            return new BlobFlatListSegment(blobItems, default);
        }

        BinaryData IModel<BlobFlatListSegment>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<BlobFlatListSegment>;
            bool isValid = options.Format == ModelReaderWriterFormat.Json && implementsJson || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        BlobFlatListSegment IModel<BlobFlatListSegment>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(BlobFlatListSegment)} does not support '{options.Format}' format.");
            }

            return DeserializeBlobFlatListSegment(XElement.Load(data.ToStream()), options);
        }

        ModelReaderWriterFormat IModel<BlobFlatListSegment>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Xml;
    }
}
