// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Storage.Blobs.Models
{
    /// <summary> The Constant29. </summary>
    public readonly partial struct Constant29 : IEquatable<Constant29>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Constant29"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Constant29(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string _20250705Value = "2025-07-05";

        /// <summary> 2025-07-05. </summary>
        public static Constant29 _20250705 { get; } = new Constant29(_20250705Value);
        /// <summary> Determines if two <see cref="Constant29"/> values are the same. </summary>
        public static bool operator ==(Constant29 left, Constant29 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Constant29"/> values are not the same. </summary>
        public static bool operator !=(Constant29 left, Constant29 right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Constant29"/>. </summary>
        public static implicit operator Constant29(string value) => new Constant29(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Constant29 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Constant29 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
